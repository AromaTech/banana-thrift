/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"

#import "Authentication.h"
#import "Banana.h"

typedef BananaAuthentication_ApplicationToken * BananaEvents_ApplicationToken;

typedef Banana_int BananaEvents_int;

typedef Banana_long BananaEvents_long;

typedef Banana_timestamp BananaEvents_timestamp;

typedef Banana_uuid BananaEvents_uuid;

typedef Banana_User * BananaEvents_User;

typedef Banana_Application * BananaEvents_Application;

@interface BananaEvents_ApplicationTokenRenewed : NSObject <TBase, NSCoding> {
  NSString * __message;
  BananaEvents_User __user;
  BananaEvents_ApplicationToken __applicationToken;
  BananaEvents_uuid __applicationId;
  NSString * __applicationName;

  BOOL __message_isset;
  BOOL __user_isset;
  BOOL __applicationToken_isset;
  BOOL __applicationId_isset;
  BOOL __applicationName_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=message, setter=setMessage:) NSString * message;
@property (nonatomic, retain, getter=user, setter=setUser:) BananaEvents_User user;
@property (nonatomic, retain, getter=applicationToken, setter=setApplicationToken:) BananaEvents_ApplicationToken applicationToken;
@property (nonatomic, retain, getter=applicationId, setter=setApplicationId:) BananaEvents_uuid applicationId;
@property (nonatomic, retain, getter=applicationName, setter=setApplicationName:) NSString * applicationName;
#endif

- (id) init;
- (id) initWithMessage: (NSString *) message user: (BananaEvents_User) user applicationToken: (BananaEvents_ApplicationToken) applicationToken applicationId: (BananaEvents_uuid) applicationId applicationName: (NSString *) applicationName;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) message;
- (void) setMessage: (NSString *) message;
#endif
- (BOOL) messageIsSet;

#if !__has_feature(objc_arc)
- (BananaEvents_User) user;
- (void) setUser: (BananaEvents_User) user;
#endif
- (BOOL) userIsSet;

#if !__has_feature(objc_arc)
- (BananaEvents_ApplicationToken) applicationToken;
- (void) setApplicationToken: (BananaEvents_ApplicationToken) applicationToken;
#endif
- (BOOL) applicationTokenIsSet;

#if !__has_feature(objc_arc)
- (BananaEvents_uuid) applicationId;
- (void) setApplicationId: (BananaEvents_uuid) applicationId;
#endif
- (BOOL) applicationIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) applicationName;
- (void) setApplicationName: (NSString *) applicationName;
#endif
- (BOOL) applicationNameIsSet;

@end

@interface BananaEvents_ApplicationTokenRegenerated : NSObject <TBase, NSCoding> {
  NSString * __message;
  BananaEvents_User __user;
  BananaEvents_ApplicationToken __applicationToken;
  BananaEvents_uuid __applicationId;
  NSString * __applicationName;

  BOOL __message_isset;
  BOOL __user_isset;
  BOOL __applicationToken_isset;
  BOOL __applicationId_isset;
  BOOL __applicationName_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=message, setter=setMessage:) NSString * message;
@property (nonatomic, retain, getter=user, setter=setUser:) BananaEvents_User user;
@property (nonatomic, retain, getter=applicationToken, setter=setApplicationToken:) BananaEvents_ApplicationToken applicationToken;
@property (nonatomic, retain, getter=applicationId, setter=setApplicationId:) BananaEvents_uuid applicationId;
@property (nonatomic, retain, getter=applicationName, setter=setApplicationName:) NSString * applicationName;
#endif

- (id) init;
- (id) initWithMessage: (NSString *) message user: (BananaEvents_User) user applicationToken: (BananaEvents_ApplicationToken) applicationToken applicationId: (BananaEvents_uuid) applicationId applicationName: (NSString *) applicationName;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) message;
- (void) setMessage: (NSString *) message;
#endif
- (BOOL) messageIsSet;

#if !__has_feature(objc_arc)
- (BananaEvents_User) user;
- (void) setUser: (BananaEvents_User) user;
#endif
- (BOOL) userIsSet;

#if !__has_feature(objc_arc)
- (BananaEvents_ApplicationToken) applicationToken;
- (void) setApplicationToken: (BananaEvents_ApplicationToken) applicationToken;
#endif
- (BOOL) applicationTokenIsSet;

#if !__has_feature(objc_arc)
- (BananaEvents_uuid) applicationId;
- (void) setApplicationId: (BananaEvents_uuid) applicationId;
#endif
- (BOOL) applicationIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) applicationName;
- (void) setApplicationName: (NSString *) applicationName;
#endif
- (BOOL) applicationNameIsSet;

@end

@interface BananaEvents_ApplicationSentMessage : NSObject <TBase, NSCoding> {
  NSString * __message;
  Banana_Message * __messageSentByApplication;
  BananaEvents_uuid __applicationId;
  NSString * __applicationName;

  BOOL __message_isset;
  BOOL __messageSentByApplication_isset;
  BOOL __applicationId_isset;
  BOOL __applicationName_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=message, setter=setMessage:) NSString * message;
@property (nonatomic, retain, getter=messageSentByApplication, setter=setMessageSentByApplication:) Banana_Message * messageSentByApplication;
@property (nonatomic, retain, getter=applicationId, setter=setApplicationId:) BananaEvents_uuid applicationId;
@property (nonatomic, retain, getter=applicationName, setter=setApplicationName:) NSString * applicationName;
#endif

- (id) init;
- (id) initWithMessage: (NSString *) message messageSentByApplication: (Banana_Message *) messageSentByApplication applicationId: (BananaEvents_uuid) applicationId applicationName: (NSString *) applicationName;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) message;
- (void) setMessage: (NSString *) message;
#endif
- (BOOL) messageIsSet;

#if !__has_feature(objc_arc)
- (Banana_Message *) messageSentByApplication;
- (void) setMessageSentByApplication: (Banana_Message *) messageSentByApplication;
#endif
- (BOOL) messageSentByApplicationIsSet;

#if !__has_feature(objc_arc)
- (BananaEvents_uuid) applicationId;
- (void) setApplicationId: (BananaEvents_uuid) applicationId;
#endif
- (BOOL) applicationIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) applicationName;
- (void) setApplicationName: (NSString *) applicationName;
#endif
- (BOOL) applicationNameIsSet;

@end

@interface BananaEvents_HealthCheckFailed : NSObject <TBase, NSCoding> {
  NSString * __message;
  NSString * __hostname;
  BananaEvents_uuid __applicationId;
  NSString * __applicationName;

  BOOL __message_isset;
  BOOL __hostname_isset;
  BOOL __applicationId_isset;
  BOOL __applicationName_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=message, setter=setMessage:) NSString * message;
@property (nonatomic, retain, getter=hostname, setter=setHostname:) NSString * hostname;
@property (nonatomic, retain, getter=applicationId, setter=setApplicationId:) BananaEvents_uuid applicationId;
@property (nonatomic, retain, getter=applicationName, setter=setApplicationName:) NSString * applicationName;
#endif

- (id) init;
- (id) initWithMessage: (NSString *) message hostname: (NSString *) hostname applicationId: (BananaEvents_uuid) applicationId applicationName: (NSString *) applicationName;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) message;
- (void) setMessage: (NSString *) message;
#endif
- (BOOL) messageIsSet;

#if !__has_feature(objc_arc)
- (NSString *) hostname;
- (void) setHostname: (NSString *) hostname;
#endif
- (BOOL) hostnameIsSet;

#if !__has_feature(objc_arc)
- (BananaEvents_uuid) applicationId;
- (void) setApplicationId: (BananaEvents_uuid) applicationId;
#endif
- (BOOL) applicationIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) applicationName;
- (void) setApplicationName: (NSString *) applicationName;
#endif
- (BOOL) applicationNameIsSet;

@end

@interface BananaEvents_HealthCheckBackToNormal : NSObject <TBase, NSCoding> {
  NSString * __message;
  BananaEvents_uuid __applicationId;
  NSString * __applicationName;

  BOOL __message_isset;
  BOOL __applicationId_isset;
  BOOL __applicationName_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=message, setter=setMessage:) NSString * message;
@property (nonatomic, retain, getter=applicationId, setter=setApplicationId:) BananaEvents_uuid applicationId;
@property (nonatomic, retain, getter=applicationName, setter=setApplicationName:) NSString * applicationName;
#endif

- (id) init;
- (id) initWithMessage: (NSString *) message applicationId: (BananaEvents_uuid) applicationId applicationName: (NSString *) applicationName;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) message;
- (void) setMessage: (NSString *) message;
#endif
- (BOOL) messageIsSet;

#if !__has_feature(objc_arc)
- (BananaEvents_uuid) applicationId;
- (void) setApplicationId: (BananaEvents_uuid) applicationId;
#endif
- (BOOL) applicationIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) applicationName;
- (void) setApplicationName: (NSString *) applicationName;
#endif
- (BOOL) applicationNameIsSet;

@end

@interface BananaEvents_OwnerApprovedRequest : NSObject <TBase, NSCoding> {
  NSString * __message;
  BananaEvents_uuid __applicationId;
  NSString * __applicationName;
  BananaEvents_User __owner;

  BOOL __message_isset;
  BOOL __applicationId_isset;
  BOOL __applicationName_isset;
  BOOL __owner_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=message, setter=setMessage:) NSString * message;
@property (nonatomic, retain, getter=applicationId, setter=setApplicationId:) BananaEvents_uuid applicationId;
@property (nonatomic, retain, getter=applicationName, setter=setApplicationName:) NSString * applicationName;
@property (nonatomic, retain, getter=owner, setter=setOwner:) BananaEvents_User owner;
#endif

- (id) init;
- (id) initWithMessage: (NSString *) message applicationId: (BananaEvents_uuid) applicationId applicationName: (NSString *) applicationName owner: (BananaEvents_User) owner;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) message;
- (void) setMessage: (NSString *) message;
#endif
- (BOOL) messageIsSet;

#if !__has_feature(objc_arc)
- (BananaEvents_uuid) applicationId;
- (void) setApplicationId: (BananaEvents_uuid) applicationId;
#endif
- (BOOL) applicationIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) applicationName;
- (void) setApplicationName: (NSString *) applicationName;
#endif
- (BOOL) applicationNameIsSet;

#if !__has_feature(objc_arc)
- (BananaEvents_User) owner;
- (void) setOwner: (BananaEvents_User) owner;
#endif
- (BOOL) ownerIsSet;

@end

@interface BananaEvents_GeneralEvent : NSObject <TBase, NSCoding> {
  BananaEvents_uuid __applicationId;
  NSString * __applicationName;
  NSString * __message;
  BananaEvents_timestamp __timestamp;

  BOOL __applicationId_isset;
  BOOL __applicationName_isset;
  BOOL __message_isset;
  BOOL __timestamp_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=applicationId, setter=setApplicationId:) BananaEvents_uuid applicationId;
@property (nonatomic, retain, getter=applicationName, setter=setApplicationName:) NSString * applicationName;
@property (nonatomic, retain, getter=message, setter=setMessage:) NSString * message;
@property (nonatomic, getter=timestamp, setter=setTimestamp:) BananaEvents_timestamp timestamp;
#endif

- (id) init;
- (id) initWithApplicationId: (BananaEvents_uuid) applicationId applicationName: (NSString *) applicationName message: (NSString *) message timestamp: (BananaEvents_timestamp) timestamp;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaEvents_uuid) applicationId;
- (void) setApplicationId: (BananaEvents_uuid) applicationId;
#endif
- (BOOL) applicationIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) applicationName;
- (void) setApplicationName: (NSString *) applicationName;
#endif
- (BOOL) applicationNameIsSet;

#if !__has_feature(objc_arc)
- (NSString *) message;
- (void) setMessage: (NSString *) message;
#endif
- (BOOL) messageIsSet;

#if !__has_feature(objc_arc)
- (BananaEvents_timestamp) timestamp;
- (void) setTimestamp: (BananaEvents_timestamp) timestamp;
#endif
- (BOOL) timestampIsSet;

@end

@interface BananaEvents_EventType : NSObject <TBase, NSCoding> {
  BananaEvents_HealthCheckFailed * __healthCheckFailed;
  BananaEvents_HealthCheckBackToNormal * __healthCheckBackToNormal;
  BananaEvents_ApplicationTokenRenewed * __applicationTokenRenewed;
  BananaEvents_ApplicationTokenRegenerated * __applicationTokenRegenerated;
  BananaEvents_ApplicationSentMessage * __applicationSentMessage;
  BananaEvents_OwnerApprovedRequest * __ownerApprovedRequest;
  BananaEvents_GeneralEvent * __generalEvent;

  BOOL __healthCheckFailed_isset;
  BOOL __healthCheckBackToNormal_isset;
  BOOL __applicationTokenRenewed_isset;
  BOOL __applicationTokenRegenerated_isset;
  BOOL __applicationSentMessage_isset;
  BOOL __ownerApprovedRequest_isset;
  BOOL __generalEvent_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=healthCheckFailed, setter=setHealthCheckFailed:) BananaEvents_HealthCheckFailed * healthCheckFailed;
@property (nonatomic, retain, getter=healthCheckBackToNormal, setter=setHealthCheckBackToNormal:) BananaEvents_HealthCheckBackToNormal * healthCheckBackToNormal;
@property (nonatomic, retain, getter=applicationTokenRenewed, setter=setApplicationTokenRenewed:) BananaEvents_ApplicationTokenRenewed * applicationTokenRenewed;
@property (nonatomic, retain, getter=applicationTokenRegenerated, setter=setApplicationTokenRegenerated:) BananaEvents_ApplicationTokenRegenerated * applicationTokenRegenerated;
@property (nonatomic, retain, getter=applicationSentMessage, setter=setApplicationSentMessage:) BananaEvents_ApplicationSentMessage * applicationSentMessage;
@property (nonatomic, retain, getter=ownerApprovedRequest, setter=setOwnerApprovedRequest:) BananaEvents_OwnerApprovedRequest * ownerApprovedRequest;
@property (nonatomic, retain, getter=generalEvent, setter=setGeneralEvent:) BananaEvents_GeneralEvent * generalEvent;
#endif

- (id) init;
- (id) initWithHealthCheckFailed: (BananaEvents_HealthCheckFailed *) healthCheckFailed healthCheckBackToNormal: (BananaEvents_HealthCheckBackToNormal *) healthCheckBackToNormal applicationTokenRenewed: (BananaEvents_ApplicationTokenRenewed *) applicationTokenRenewed applicationTokenRegenerated: (BananaEvents_ApplicationTokenRegenerated *) applicationTokenRegenerated applicationSentMessage: (BananaEvents_ApplicationSentMessage *) applicationSentMessage ownerApprovedRequest: (BananaEvents_OwnerApprovedRequest *) ownerApprovedRequest generalEvent: (BananaEvents_GeneralEvent *) generalEvent;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaEvents_HealthCheckFailed *) healthCheckFailed;
- (void) setHealthCheckFailed: (BananaEvents_HealthCheckFailed *) healthCheckFailed;
#endif
- (BOOL) healthCheckFailedIsSet;

#if !__has_feature(objc_arc)
- (BananaEvents_HealthCheckBackToNormal *) healthCheckBackToNormal;
- (void) setHealthCheckBackToNormal: (BananaEvents_HealthCheckBackToNormal *) healthCheckBackToNormal;
#endif
- (BOOL) healthCheckBackToNormalIsSet;

#if !__has_feature(objc_arc)
- (BananaEvents_ApplicationTokenRenewed *) applicationTokenRenewed;
- (void) setApplicationTokenRenewed: (BananaEvents_ApplicationTokenRenewed *) applicationTokenRenewed;
#endif
- (BOOL) applicationTokenRenewedIsSet;

#if !__has_feature(objc_arc)
- (BananaEvents_ApplicationTokenRegenerated *) applicationTokenRegenerated;
- (void) setApplicationTokenRegenerated: (BananaEvents_ApplicationTokenRegenerated *) applicationTokenRegenerated;
#endif
- (BOOL) applicationTokenRegeneratedIsSet;

#if !__has_feature(objc_arc)
- (BananaEvents_ApplicationSentMessage *) applicationSentMessage;
- (void) setApplicationSentMessage: (BananaEvents_ApplicationSentMessage *) applicationSentMessage;
#endif
- (BOOL) applicationSentMessageIsSet;

#if !__has_feature(objc_arc)
- (BananaEvents_OwnerApprovedRequest *) ownerApprovedRequest;
- (void) setOwnerApprovedRequest: (BananaEvents_OwnerApprovedRequest *) ownerApprovedRequest;
#endif
- (BOOL) ownerApprovedRequestIsSet;

#if !__has_feature(objc_arc)
- (BananaEvents_GeneralEvent *) generalEvent;
- (void) setGeneralEvent: (BananaEvents_GeneralEvent *) generalEvent;
#endif
- (BOOL) generalEventIsSet;

@end

@interface BananaEvents_Event : NSObject <TBase, NSCoding> {
  BananaEvents_EventType * __eventType;
  BananaEvents_timestamp __timestamp;
  BananaEvents_uuid __eventId;

  BOOL __eventType_isset;
  BOOL __timestamp_isset;
  BOOL __eventId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=eventType, setter=setEventType:) BananaEvents_EventType * eventType;
@property (nonatomic, getter=timestamp, setter=setTimestamp:) BananaEvents_timestamp timestamp;
@property (nonatomic, retain, getter=eventId, setter=setEventId:) BananaEvents_uuid eventId;
#endif

- (id) init;
- (id) initWithEventType: (BananaEvents_EventType *) eventType timestamp: (BananaEvents_timestamp) timestamp eventId: (BananaEvents_uuid) eventId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaEvents_EventType *) eventType;
- (void) setEventType: (BananaEvents_EventType *) eventType;
#endif
- (BOOL) eventTypeIsSet;

#if !__has_feature(objc_arc)
- (BananaEvents_timestamp) timestamp;
- (void) setTimestamp: (BananaEvents_timestamp) timestamp;
#endif
- (BOOL) timestampIsSet;

#if !__has_feature(objc_arc)
- (BananaEvents_uuid) eventId;
- (void) setEventId: (BananaEvents_uuid) eventId;
#endif
- (BOOL) eventIdIsSet;

@end

@interface BananaEvents_EventsConstants : NSObject {
}
@end
