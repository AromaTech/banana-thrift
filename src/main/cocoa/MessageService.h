/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"

#import "Authentication.h"
#import "Aroma.h"
#import "Channels.h"
#import "Endpoint.h"
#import "Events.h"
#import "Exceptions.h"
#import "ApplicationService.h"

typedef Banana_int MessageService_int;

typedef Banana_long MessageService_long;

typedef Banana_timestamp MessageService_timestamp;

typedef BananaAuthentication_ApplicationToken * MessageService_ApplicationToken;

typedef BananaAuthentication_AuthenticationToken * MessageService_AuthenticationToken;

typedef BananaAuthentication_UserToken * MessageService_UserToken;

typedef Banana_Application * MessageService_Application;

typedef int MessageService_Urgency;

typedef BananaEvents_Event * MessageService_Event;

typedef BananaException_AccountAlreadyExistsException * MessageService_AccountAlreadyExistsException;

typedef BananaException_InvalidArgumentException * MessageService_InvalidArgumentException;

typedef BananaException_InvalidCredentialsException * MessageService_InvalidCredentialsException;

typedef BananaException_InvalidTokenException * MessageService_InvalidTokenException;

typedef BananaException_OperationFailedException * MessageService_OperationFailedException;

typedef BananaException_ApplicationAlreadyRegisteredException * MessageService_ApplicationAlreadyRegisteredException;

typedef BananaException_ApplicationDoesNotExistException * MessageService_ApplicationDoesNotExistException;

typedef BananaException_CustomChannelUnreachableException * MessageService_CustomChannelUnreachableException;

typedef BananaException_ChannelDoesNotExistException * MessageService_ChannelDoesNotExistException;

typedef BananaException_UnauthorizedException * MessageService_UnauthorizedException;

typedef ApplicationService_SendMessageRequest * MessageService_SendMessageRequest;

typedef ApplicationService_SendMessageResponse * MessageService_SendMessageResponse;

typedef MessageService_BananaService.DeleteMessageRequest MessageService_DeleteMessageRequest;

typedef MessageService_BananaService.DeleteMessageResponse MessageService_DeleteMessageResponse;

typedef MessageService_BananaService.DismissMessageRequest MessageService_DismissMessageRequest;

typedef MessageService_BananaService.DismissMessageResponse MessageService_DismissMessageResponse;

typedef MessageService_BananaService.GetApplicationMessagesRequest MessageService_GetApplicationMessagesRequest;

typedef MessageService_BananaService.GetApplicationMessagesResponse MessageService_GetApplicationMessagesResponse;

typedef MessageService_BananaService.GetInboxRequest MessageService_GetInboxRequest;

typedef MessageService_BananaService.GetInboxResponse MessageService_GetInboxResponse;

typedef MessageService_BananaService.GetFullMessageRequest MessageService_GetFullMessageRequest;

typedef MessageService_BananaService.GetFullMessageResponse MessageService_GetFullMessageResponse;

@protocol MessageService_MessageService <NSObject>
- (double) getApiVersion;  // throws TException
@end

@interface MessageService_MessageServiceClient : TBaseClient <MessageService_MessageService> - (id) initWithProtocol: (id <TProtocol>) protocol;
- (id) initWithInProtocol: (id <TProtocol>) inProtocol outProtocol: (id <TProtocol>) outProtocol;
@end

@interface MessageService_MessageServiceProcessor : NSObject <TProcessor> {
  id <MessageService_MessageService> mService;
  NSDictionary * mMethodMap;
}
- (id) initWithMessageService: (id <MessageService_MessageService>) service;
- (id<MessageService_MessageService>) service;
@end

@interface MessageService_MessageServiceConstants : NSObject {
}
+ (MessageService_int) SERVICE_PORT;
+ (BananaEndpoint_TcpEndpoint *) PRODUCTION_ENDPOINT;
+ (BananaEndpoint_TcpEndpoint *) BETA_ENDPOINT;
+ (Banana_LengthOfTime *) DEFAULT_MESSAGE_LIFETIME;
@end
