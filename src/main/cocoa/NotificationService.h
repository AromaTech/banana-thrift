/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"

#import "Authentication.h"
#import "Aroma.h"
#import "Channels.h"
#import "Endpoint.h"
#import "Events.h"
#import "Exceptions.h"

typedef Aroma_int NotificationService_int;

typedef Aroma_long NotificationService_long;

typedef Aroma_timestamp NotificationService_timestamp;

typedef Aroma_uuid NotificationService_uuid;

typedef BananaAuthentication_AuthenticationToken * NotificationService_AuthenticationToken;

typedef BananaAuthentication_UserToken * NotificationService_UserToken;

typedef Aroma_Application * NotificationService_Application;

typedef int NotificationService_Urgency;

typedef Aroma_User * NotificationService_User;

typedef AromaChannels_AromaChannel * NotificationService_AromaChannel;

typedef AromaEvents_Event * NotificationService_Event;

typedef AromaException_AccountAlreadyExistsException * NotificationService_AccountAlreadyExistsException;

typedef AromaException_InvalidArgumentException * NotificationService_InvalidArgumentException;

typedef AromaException_InvalidCredentialsException * NotificationService_InvalidCredentialsException;

typedef AromaException_InvalidTokenException * NotificationService_InvalidTokenException;

typedef AromaException_OperationFailedException * NotificationService_OperationFailedException;

typedef AromaException_ApplicationAlreadyRegisteredException * NotificationService_ApplicationAlreadyRegisteredException;

typedef AromaException_ApplicationDoesNotExistException * NotificationService_ApplicationDoesNotExistException;

typedef AromaException_CustomChannelUnreachableException * NotificationService_CustomChannelUnreachableException;

typedef AromaException_ChannelDoesNotExistException * NotificationService_ChannelDoesNotExistException;

typedef AromaException_UnauthorizedException * NotificationService_UnauthorizedException;

@interface NotificationService_GetEventsRequest : NSObject <TBase, NSCoding> {
  NotificationService_UserToken __token;
  NotificationService_uuid __forUser;
  NotificationService_uuid __byApplication;

  BOOL __token_isset;
  BOOL __forUser_isset;
  BOOL __byApplication_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) NotificationService_UserToken token;
@property (nonatomic, retain, getter=forUser, setter=setForUser:) NotificationService_uuid forUser;
@property (nonatomic, retain, getter=byApplication, setter=setByApplication:) NotificationService_uuid byApplication;
#endif

- (id) init;
- (id) initWithToken: (NotificationService_UserToken) token forUser: (NotificationService_uuid) forUser byApplication: (NotificationService_uuid) byApplication;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NotificationService_UserToken) token;
- (void) setToken: (NotificationService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (NotificationService_uuid) forUser;
- (void) setForUser: (NotificationService_uuid) forUser;
#endif
- (BOOL) forUserIsSet;

#if !__has_feature(objc_arc)
- (NotificationService_uuid) byApplication;
- (void) setByApplication: (NotificationService_uuid) byApplication;
#endif
- (BOOL) byApplicationIsSet;

@end

@interface NotificationService_GetEventsResponse : NSObject <TBase, NSCoding> {
  NSMutableArray * __events;

  BOOL __events_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=events, setter=setEvents:) NSMutableArray * events;
#endif

- (id) init;
- (id) initWithEvents: (NSMutableArray *) events;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) events;
- (void) setEvents: (NSMutableArray *) events;
#endif
- (BOOL) eventsIsSet;

@end

@interface NotificationService_SendNotificationRequest : NSObject <TBase, NSCoding> {
  NotificationService_AuthenticationToken __token;
  NotificationService_Event __event;
  NSMutableDictionary * __channels;
  BOOL __storeEvent;

  BOOL __token_isset;
  BOOL __event_isset;
  BOOL __channels_isset;
  BOOL __storeEvent_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) NotificationService_AuthenticationToken token;
@property (nonatomic, retain, getter=event, setter=setEvent:) NotificationService_Event event;
@property (nonatomic, retain, getter=channels, setter=setChannels:) NSMutableDictionary * channels;
@property (nonatomic, getter=storeEvent, setter=setStoreEvent:) BOOL storeEvent;
#endif

- (id) init;
- (id) initWithToken: (NotificationService_AuthenticationToken) token event: (NotificationService_Event) event channels: (NSMutableDictionary *) channels storeEvent: (BOOL) storeEvent;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NotificationService_AuthenticationToken) token;
- (void) setToken: (NotificationService_AuthenticationToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (NotificationService_Event) event;
- (void) setEvent: (NotificationService_Event) event;
#endif
- (BOOL) eventIsSet;

#if !__has_feature(objc_arc)
- (NSMutableDictionary *) channels;
- (void) setChannels: (NSMutableDictionary *) channels;
#endif
- (BOOL) channelsIsSet;

#if !__has_feature(objc_arc)
- (BOOL) storeEvent;
- (void) setStoreEvent: (BOOL) storeEvent;
#endif
- (BOOL) storeEventIsSet;

@end

@interface NotificationService_SendNotificationResponse : NSObject <TBase, NSCoding> {
  NotificationService_uuid __notificationId;

  BOOL __notificationId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=notificationId, setter=setNotificationId:) NotificationService_uuid notificationId;
#endif

- (id) init;
- (id) initWithNotificationId: (NotificationService_uuid) notificationId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NotificationService_uuid) notificationId;
- (void) setNotificationId: (NotificationService_uuid) notificationId;
#endif
- (BOOL) notificationIdIsSet;

@end

@protocol NotificationService_NotificationService <NSObject>
- (double) getApiVersion;  // throws TException
- (NotificationService_SendNotificationResponse *) sendNotification: (NotificationService_SendNotificationRequest *) request;  // throws NotificationService_InvalidArgumentException, NotificationService_OperationFailedException, NotificationService_InvalidTokenException, TException
@end

@interface NotificationService_NotificationServiceClient : TBaseClient <NotificationService_NotificationService> - (id) initWithProtocol: (id <TProtocol>) protocol;
- (id) initWithInProtocol: (id <TProtocol>) inProtocol outProtocol: (id <TProtocol>) outProtocol;
@end

@interface NotificationService_NotificationServiceProcessor : NSObject <TProcessor> {
  id <NotificationService_NotificationService> mService;
  NSDictionary * mMethodMap;
}
- (id) initWithNotificationService: (id <NotificationService_NotificationService>) service;
- (id<NotificationService_NotificationService>) service;
@end

@interface NotificationService_NotificationServiceConstants : NSObject {
}
+ (NotificationService_int) SERVICE_PORT;
+ (AromaEndpoint_TcpEndpoint *) PRODUCTION_ENDPOINT;
+ (AromaEndpoint_TcpEndpoint *) BETA_ENDPOINT;
@end
