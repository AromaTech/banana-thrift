/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"

#import "Authentication.h"
#import "Banana.h"
#import "Exceptions.h"

#import "Endpoint.h"

@implementation BananaEndpoint_TcpEndpoint

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.port = 80;

#endif
  return self;
}

- (id) initWithHostname: (NSString *) hostname port: (BananaEndpoint_int) port
{
  self = [super init];
  __hostname = [hostname retain_stub];
  __hostname_isset = YES;
  __port = port;
  __port_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"hostname"])
  {
    __hostname = [[decoder decodeObjectForKey: @"hostname"] retain_stub];
    __hostname_isset = YES;
  }
  if ([decoder containsValueForKey: @"port"])
  {
    __port = [decoder decodeInt32ForKey: @"port"];
    __port_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__hostname_isset)
  {
    [encoder encodeObject: __hostname forKey: @"hostname"];
  }
  if (__port_isset)
  {
    [encoder encodeInt32: __port forKey: @"port"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __hostname_isset ? 2654435761 : 0;
  if (__hostname_isset)
  {
    hash = (hash * 31) ^ [__hostname hash];
  }
  hash = (hash * 31) ^ __port_isset ? 2654435761 : 0;
  if (__port_isset)
  {
    hash = (hash * 31) ^ [@(__port) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaEndpoint_TcpEndpoint class]]) {
    return NO;
  }
  BananaEndpoint_TcpEndpoint *other = (BananaEndpoint_TcpEndpoint *)anObject;
  if ((__hostname_isset != other->__hostname_isset) ||
      (__hostname_isset && ((__hostname || other->__hostname) && ![__hostname isEqual:other->__hostname]))) {
    return NO;
  }
  if ((__port_isset != other->__port_isset) ||
      (__port_isset && (__port != other->__port))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__hostname release_stub];
  [super dealloc_stub];
}

- (NSString *) hostname {
  return [[__hostname retain_stub] autorelease_stub];
}

- (void) setHostname: (NSString *) hostname {
  [hostname retain_stub];
  [__hostname release_stub];
  __hostname = hostname;
  __hostname_isset = YES;
}

- (BOOL) hostnameIsSet {
  return __hostname_isset;
}

- (void) unsetHostname {
  [__hostname release_stub];
  __hostname = nil;
  __hostname_isset = NO;
}

- (int32_t) port {
  return __port;
}

- (void) setPort: (int32_t) port {
  __port = port;
  __port_isset = YES;
}

- (BOOL) portIsSet {
  return __port_isset;
}

- (void) unsetPort {
  __port_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHostname: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPort: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TcpEndpoint"];
  if (__hostname_isset) {
    if (__hostname != nil) {
      [outProtocol writeFieldBeginWithName: @"hostname" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __hostname];
      [outProtocol writeFieldEnd];
    }
  }
  if (__port_isset) {
    [outProtocol writeFieldBeginWithName: @"port" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __port];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__hostname_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'hostname' is not set."];
  }
  if (!__port_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'port' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaEndpoint_TcpEndpoint("];
  [ms appendString: @"hostname:"];
  [ms appendFormat: @"\"%@\"", __hostname];
  [ms appendString: @",port:"];
  [ms appendFormat: @"%i", __port];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaEndpoint_ThriftHttpEndpoint

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUrl: (NSString *) url
{
  self = [super init];
  __url = [url retain_stub];
  __url_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"url"])
  {
    __url = [[decoder decodeObjectForKey: @"url"] retain_stub];
    __url_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__url_isset)
  {
    [encoder encodeObject: __url forKey: @"url"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __url_isset ? 2654435761 : 0;
  if (__url_isset)
  {
    hash = (hash * 31) ^ [__url hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaEndpoint_ThriftHttpEndpoint class]]) {
    return NO;
  }
  BananaEndpoint_ThriftHttpEndpoint *other = (BananaEndpoint_ThriftHttpEndpoint *)anObject;
  if ((__url_isset != other->__url_isset) ||
      (__url_isset && ((__url || other->__url) && ![__url isEqual:other->__url]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__url release_stub];
  [super dealloc_stub];
}

- (NSString *) url {
  return [[__url retain_stub] autorelease_stub];
}

- (void) setUrl: (NSString *) url {
  [url retain_stub];
  [__url release_stub];
  __url = url;
  __url_isset = YES;
}

- (BOOL) urlIsSet {
  return __url_isset;
}

- (void) unsetUrl {
  [__url release_stub];
  __url = nil;
  __url_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ThriftHttpEndpoint"];
  if (__url_isset) {
    if (__url != nil) {
      [outProtocol writeFieldBeginWithName: @"url" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __url];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__url_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'url' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaEndpoint_ThriftHttpEndpoint("];
  [ms appendString: @"url:"];
  [ms appendFormat: @"\"%@\"", __url];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaEndpoint_RestHttpEndpoint

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUrl: (NSString *) url
{
  self = [super init];
  __url = [url retain_stub];
  __url_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"url"])
  {
    __url = [[decoder decodeObjectForKey: @"url"] retain_stub];
    __url_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__url_isset)
  {
    [encoder encodeObject: __url forKey: @"url"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __url_isset ? 2654435761 : 0;
  if (__url_isset)
  {
    hash = (hash * 31) ^ [__url hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaEndpoint_RestHttpEndpoint class]]) {
    return NO;
  }
  BananaEndpoint_RestHttpEndpoint *other = (BananaEndpoint_RestHttpEndpoint *)anObject;
  if ((__url_isset != other->__url_isset) ||
      (__url_isset && ((__url || other->__url) && ![__url isEqual:other->__url]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__url release_stub];
  [super dealloc_stub];
}

- (NSString *) url {
  return [[__url retain_stub] autorelease_stub];
}

- (void) setUrl: (NSString *) url {
  [url retain_stub];
  [__url release_stub];
  __url = url;
  __url_isset = YES;
}

- (BOOL) urlIsSet {
  return __url_isset;
}

- (void) unsetUrl {
  [__url release_stub];
  __url = nil;
  __url_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RestHttpEndpoint"];
  if (__url_isset) {
    if (__url != nil) {
      [outProtocol writeFieldBeginWithName: @"url" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __url];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__url_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'url' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaEndpoint_RestHttpEndpoint("];
  [ms appendString: @"url:"];
  [ms appendFormat: @"\"%@\"", __url];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaEndpoint_Endpoint

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTcp: (BananaEndpoint_TcpEndpoint *) tcp thriftHttp: (BananaEndpoint_ThriftHttpEndpoint *) thriftHttp restHttp: (BananaEndpoint_RestHttpEndpoint *) restHttp
{
  self = [super init];
  __tcp = [tcp retain_stub];
  __tcp_isset = YES;
  __thriftHttp = [thriftHttp retain_stub];
  __thriftHttp_isset = YES;
  __restHttp = [restHttp retain_stub];
  __restHttp_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"tcp"])
  {
    __tcp = [[decoder decodeObjectForKey: @"tcp"] retain_stub];
    __tcp_isset = YES;
  }
  if ([decoder containsValueForKey: @"thriftHttp"])
  {
    __thriftHttp = [[decoder decodeObjectForKey: @"thriftHttp"] retain_stub];
    __thriftHttp_isset = YES;
  }
  if ([decoder containsValueForKey: @"restHttp"])
  {
    __restHttp = [[decoder decodeObjectForKey: @"restHttp"] retain_stub];
    __restHttp_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__tcp_isset)
  {
    [encoder encodeObject: __tcp forKey: @"tcp"];
  }
  if (__thriftHttp_isset)
  {
    [encoder encodeObject: __thriftHttp forKey: @"thriftHttp"];
  }
  if (__restHttp_isset)
  {
    [encoder encodeObject: __restHttp forKey: @"restHttp"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __tcp_isset ? 2654435761 : 0;
  if (__tcp_isset)
  {
    hash = (hash * 31) ^ [__tcp hash];
  }
  hash = (hash * 31) ^ __thriftHttp_isset ? 2654435761 : 0;
  if (__thriftHttp_isset)
  {
    hash = (hash * 31) ^ [__thriftHttp hash];
  }
  hash = (hash * 31) ^ __restHttp_isset ? 2654435761 : 0;
  if (__restHttp_isset)
  {
    hash = (hash * 31) ^ [__restHttp hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaEndpoint_Endpoint class]]) {
    return NO;
  }
  BananaEndpoint_Endpoint *other = (BananaEndpoint_Endpoint *)anObject;
  if ((__tcp_isset != other->__tcp_isset) ||
      (__tcp_isset && ((__tcp || other->__tcp) && ![__tcp isEqual:other->__tcp]))) {
    return NO;
  }
  if ((__thriftHttp_isset != other->__thriftHttp_isset) ||
      (__thriftHttp_isset && ((__thriftHttp || other->__thriftHttp) && ![__thriftHttp isEqual:other->__thriftHttp]))) {
    return NO;
  }
  if ((__restHttp_isset != other->__restHttp_isset) ||
      (__restHttp_isset && ((__restHttp || other->__restHttp) && ![__restHttp isEqual:other->__restHttp]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__tcp release_stub];
  [__thriftHttp release_stub];
  [__restHttp release_stub];
  [super dealloc_stub];
}

- (BananaEndpoint_TcpEndpoint *) tcp {
  return [[__tcp retain_stub] autorelease_stub];
}

- (void) setTcp: (BananaEndpoint_TcpEndpoint *) tcp {
  [tcp retain_stub];
  [__tcp release_stub];
  __tcp = tcp;
  __tcp_isset = YES;
}

- (BOOL) tcpIsSet {
  return __tcp_isset;
}

- (void) unsetTcp {
  [__tcp release_stub];
  __tcp = nil;
  __tcp_isset = NO;
}

- (BananaEndpoint_ThriftHttpEndpoint *) thriftHttp {
  return [[__thriftHttp retain_stub] autorelease_stub];
}

- (void) setThriftHttp: (BananaEndpoint_ThriftHttpEndpoint *) thriftHttp {
  [thriftHttp retain_stub];
  [__thriftHttp release_stub];
  __thriftHttp = thriftHttp;
  __thriftHttp_isset = YES;
}

- (BOOL) thriftHttpIsSet {
  return __thriftHttp_isset;
}

- (void) unsetThriftHttp {
  [__thriftHttp release_stub];
  __thriftHttp = nil;
  __thriftHttp_isset = NO;
}

- (BananaEndpoint_RestHttpEndpoint *) restHttp {
  return [[__restHttp retain_stub] autorelease_stub];
}

- (void) setRestHttp: (BananaEndpoint_RestHttpEndpoint *) restHttp {
  [restHttp retain_stub];
  [__restHttp release_stub];
  __restHttp = restHttp;
  __restHttp_isset = YES;
}

- (BOOL) restHttpIsSet {
  return __restHttp_isset;
}

- (void) unsetRestHttp {
  [__restHttp release_stub];
  __restHttp = nil;
  __restHttp_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaEndpoint_TcpEndpoint *fieldValue = [[BananaEndpoint_TcpEndpoint alloc] init];
          [fieldValue read: inProtocol];
          [self setTcp: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaEndpoint_ThriftHttpEndpoint *fieldValue = [[BananaEndpoint_ThriftHttpEndpoint alloc] init];
          [fieldValue read: inProtocol];
          [self setThriftHttp: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaEndpoint_RestHttpEndpoint *fieldValue = [[BananaEndpoint_RestHttpEndpoint alloc] init];
          [fieldValue read: inProtocol];
          [self setRestHttp: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Endpoint"];
  if (__tcp_isset) {
    if (__tcp != nil) {
      [outProtocol writeFieldBeginWithName: @"tcp" type: TType_STRUCT fieldID: 1];
      [__tcp write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__thriftHttp_isset) {
    if (__thriftHttp != nil) {
      [outProtocol writeFieldBeginWithName: @"thriftHttp" type: TType_STRUCT fieldID: 2];
      [__thriftHttp write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__restHttp_isset) {
    if (__restHttp != nil) {
      [outProtocol writeFieldBeginWithName: @"restHttp" type: TType_STRUCT fieldID: 3];
      [__restHttp write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaEndpoint_Endpoint("];
  [ms appendString: @"tcp:"];
  [ms appendFormat: @"%@", __tcp];
  [ms appendString: @",thriftHttp:"];
  [ms appendFormat: @"%@", __thriftHttp];
  [ms appendString: @",restHttp:"];
  [ms appendFormat: @"%@", __restHttp];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaEndpoint_HealthPokeRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithApplicationName: (NSString *) applicationName serviceToken: (BananaAuthentication_ApplicationToken *) serviceToken
{
  self = [super init];
  __applicationName = [applicationName retain_stub];
  __applicationName_isset = YES;
  __serviceToken = [serviceToken retain_stub];
  __serviceToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"applicationName"])
  {
    __applicationName = [[decoder decodeObjectForKey: @"applicationName"] retain_stub];
    __applicationName_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceToken"])
  {
    __serviceToken = [[decoder decodeObjectForKey: @"serviceToken"] retain_stub];
    __serviceToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__applicationName_isset)
  {
    [encoder encodeObject: __applicationName forKey: @"applicationName"];
  }
  if (__serviceToken_isset)
  {
    [encoder encodeObject: __serviceToken forKey: @"serviceToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __applicationName_isset ? 2654435761 : 0;
  if (__applicationName_isset)
  {
    hash = (hash * 31) ^ [__applicationName hash];
  }
  hash = (hash * 31) ^ __serviceToken_isset ? 2654435761 : 0;
  if (__serviceToken_isset)
  {
    hash = (hash * 31) ^ [__serviceToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaEndpoint_HealthPokeRequest class]]) {
    return NO;
  }
  BananaEndpoint_HealthPokeRequest *other = (BananaEndpoint_HealthPokeRequest *)anObject;
  if ((__applicationName_isset != other->__applicationName_isset) ||
      (__applicationName_isset && ((__applicationName || other->__applicationName) && ![__applicationName isEqual:other->__applicationName]))) {
    return NO;
  }
  if ((__serviceToken_isset != other->__serviceToken_isset) ||
      (__serviceToken_isset && ((__serviceToken || other->__serviceToken) && ![__serviceToken isEqual:other->__serviceToken]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__applicationName release_stub];
  [__serviceToken release_stub];
  [super dealloc_stub];
}

- (NSString *) applicationName {
  return [[__applicationName retain_stub] autorelease_stub];
}

- (void) setApplicationName: (NSString *) applicationName {
  [applicationName retain_stub];
  [__applicationName release_stub];
  __applicationName = applicationName;
  __applicationName_isset = YES;
}

- (BOOL) applicationNameIsSet {
  return __applicationName_isset;
}

- (void) unsetApplicationName {
  [__applicationName release_stub];
  __applicationName = nil;
  __applicationName_isset = NO;
}

- (BananaAuthentication_ApplicationToken *) serviceToken {
  return [[__serviceToken retain_stub] autorelease_stub];
}

- (void) setServiceToken: (BananaAuthentication_ApplicationToken *) serviceToken {
  [serviceToken retain_stub];
  [__serviceToken release_stub];
  __serviceToken = serviceToken;
  __serviceToken_isset = YES;
}

- (BOOL) serviceTokenIsSet {
  return __serviceToken_isset;
}

- (void) unsetServiceToken {
  [__serviceToken release_stub];
  __serviceToken = nil;
  __serviceToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_ApplicationToken *fieldValue = [[BananaAuthentication_ApplicationToken alloc] init];
          [fieldValue read: inProtocol];
          [self setServiceToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HealthPokeRequest"];
  if (__applicationName_isset) {
    if (__applicationName != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __applicationName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serviceToken_isset) {
    if (__serviceToken != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceToken" type: TType_STRUCT fieldID: 2];
      [__serviceToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaEndpoint_HealthPokeRequest("];
  [ms appendString: @"applicationName:"];
  [ms appendFormat: @"\"%@\"", __applicationName];
  [ms appendString: @",serviceToken:"];
  [ms appendFormat: @"%@", __serviceToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaEndpoint_HealthPokeResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMessage: (NSString *) message healthy: (BOOL) healthy
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  __healthy = healthy;
  __healthy_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"healthy"])
  {
    __healthy = [decoder decodeBoolForKey: @"healthy"];
    __healthy_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__healthy_isset)
  {
    [encoder encodeBool: __healthy forKey: @"healthy"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __healthy_isset ? 2654435761 : 0;
  if (__healthy_isset)
  {
    hash = (hash * 31) ^ [@(__healthy) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaEndpoint_HealthPokeResponse class]]) {
    return NO;
  }
  BananaEndpoint_HealthPokeResponse *other = (BananaEndpoint_HealthPokeResponse *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__healthy_isset != other->__healthy_isset) ||
      (__healthy_isset && (__healthy != other->__healthy))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (BOOL) healthy {
  return __healthy;
}

- (void) setHealthy: (BOOL) healthy {
  __healthy = healthy;
  __healthy_isset = YES;
}

- (BOOL) healthyIsSet {
  return __healthy_isset;
}

- (void) unsetHealthy {
  __healthy_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setHealthy: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HealthPokeResponse"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__healthy_isset) {
    [outProtocol writeFieldBeginWithName: @"healthy" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __healthy];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaEndpoint_HealthPokeResponse("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",healthy:"];
  [ms appendFormat: @"%i", __healthy];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation BananaEndpoint_EndpointConstants
+ (void) initialize {
}
@end

@interface BananaEndpoint_healthPoke_args : NSObject <TBase, NSCoding> {
  BananaEndpoint_HealthPokeRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaEndpoint_HealthPokeRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaEndpoint_HealthPokeRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaEndpoint_HealthPokeRequest *) request;
- (void) setRequest: (BananaEndpoint_HealthPokeRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaEndpoint_healthPoke_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaEndpoint_HealthPokeRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaEndpoint_healthPoke_args class]]) {
    return NO;
  }
  BananaEndpoint_healthPoke_args *other = (BananaEndpoint_healthPoke_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaEndpoint_HealthPokeRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaEndpoint_HealthPokeRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaEndpoint_HealthPokeRequest *fieldValue = [[BananaEndpoint_HealthPokeRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"healthPoke_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaEndpoint_healthPoke_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaEndpoint_HealthPoke_result : NSObject <TBase, NSCoding> {
  BananaEndpoint_HealthPokeResponse * __success;
  BananaEndpoint_OperationFailedException __ex1;

  BOOL __success_isset;
  BOOL __ex1_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaEndpoint_HealthPokeResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaEndpoint_OperationFailedException ex1;
#endif

- (id) init;
- (id) initWithSuccess: (BananaEndpoint_HealthPokeResponse *) success ex1: (BananaEndpoint_OperationFailedException) ex1;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaEndpoint_HealthPokeResponse *) success;
- (void) setSuccess: (BananaEndpoint_HealthPokeResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaEndpoint_OperationFailedException) ex1;
- (void) setEx1: (BananaEndpoint_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

@end

@implementation BananaEndpoint_HealthPoke_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaEndpoint_HealthPokeResponse *) success ex1: (BananaEndpoint_OperationFailedException) ex1
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaEndpoint_HealthPoke_result class]]) {
    return NO;
  }
  BananaEndpoint_HealthPoke_result *other = (BananaEndpoint_HealthPoke_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [super dealloc_stub];
}

- (BananaEndpoint_HealthPokeResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaEndpoint_HealthPokeResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaEndpoint_HealthPokeResponse *fieldValue = [[BananaEndpoint_HealthPokeResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HealthPoke_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaEndpoint_HealthPoke_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaEndpoint_ApplicationEndpointClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) send_healthPoke: (BananaEndpoint_HealthPokeRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"healthPoke" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"healthPoke_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaEndpoint_HealthPokeResponse *) recv_healthPoke
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaEndpoint_HealthPoke_result * result = [[[BananaEndpoint_HealthPoke_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"healthPoke failed: unknown result"];
}

- (BananaEndpoint_HealthPokeResponse *) healthPoke: (BananaEndpoint_HealthPokeRequest *) request
{
  [self send_healthPoke : request];
  [[outProtocol transport] flush];
  return [self recv_healthPoke];
}

@end

@implementation BananaEndpoint_ApplicationEndpointProcessor

- (id) initWithApplicationEndpoint: (id <BananaEndpoint_ApplicationEndpoint>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
  SEL s = @selector(process_healthPoke_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"healthPoke"];
}
return self;
}

- (id<BananaEndpoint_ApplicationEndpoint>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_healthPoke_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaEndpoint_healthPoke_args * args = [[BananaEndpoint_healthPoke_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaEndpoint_HealthPoke_result * result = [[BananaEndpoint_HealthPoke_result alloc] init];
[result setSuccess: [mService healthPoke: [args request]]];
[outProtocol writeMessageBeginWithName: @"healthPoke"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

