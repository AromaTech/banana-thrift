/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TProtocolFactory.h"
#import "TApplicationError.h"
#import "TProtocolError.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TBaseClient.h"

#import "AromaAuthentication_Authentication.h"
#import "Aroma_Aroma.h"
#import "AromaChannels_Channels.h"
#import "AromaEndpoint_Endpoint.h"
#import "AromaEvents_Events.h"
#import "AromaException_Exceptions.h"
#import "AromaReactions_Reactions.h"

#import "AromaService_AromaService.h"

@implementation AromaService_SignInRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithCredentials: (AromaAuthentication_Credentials *) credentials emailAddress: (NSString *) emailAddress
{
  self = [super init];
  if (self)  {
    _credentials = credentials;
    _credentialsIsSet = YES;
    _emailAddress = emailAddress;
    _emailAddressIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"credentials"])
    {
      _credentials = [decoder decodeObjectForKey: @"credentials"];
      _credentialsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"emailAddress"])
    {
      _emailAddress = [decoder decodeObjectForKey: @"emailAddress"];
      _emailAddressIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_credentialsIsSet)
  {
    [encoder encodeObject: _credentials forKey: @"credentials"];
  }
  if (_emailAddressIsSet)
  {
    [encoder encodeObject: _emailAddress forKey: @"emailAddress"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _credentialsIsSet ? 2654435761 : 0;
  if (_credentialsIsSet)
  {
    hash = (hash * 31) ^ [_credentials hash];
  }
  hash = (hash * 31) ^ _emailAddressIsSet ? 2654435761 : 0;
  if (_emailAddressIsSet)
  {
    hash = (hash * 31) ^ [_emailAddress hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_SignInRequest class]]) {
    return NO;
  }
  AromaService_SignInRequest *other = (AromaService_SignInRequest *)anObject;
  if ((_credentialsIsSet != other->_credentialsIsSet) ||
      (_credentialsIsSet && ((_credentials || other->_credentials) && ![_credentials isEqual:other->_credentials]))) {
    return NO;
  }
  if ((_emailAddressIsSet != other->_emailAddressIsSet) ||
      (_emailAddressIsSet && ((_emailAddress || other->_emailAddress) && ![_emailAddress isEqual:other->_emailAddress]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_SignInRequest * val = [AromaService_SignInRequest new];
  if (_credentialsIsSet)
  {
    val.credentials = [self.credentials copy];
  }
  if (_emailAddressIsSet)
  {
    val.emailAddress = [self.emailAddress copy];
  }
  return val;
}

- (void) setCredentials: (AromaAuthentication_Credentials *) credentials {
  _credentials = credentials;
  _credentialsIsSet = YES;
}

- (void) unsetCredentials {
  _credentials = nil;
  _credentialsIsSet = NO;
}

- (void) setEmailAddress: (NSString *) emailAddress {
  _emailAddress = emailAddress;
  _emailAddressIsSet = YES;
}

- (void) unsetEmailAddress {
  _emailAddress = nil;
  _emailAddressIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_Credentials *fieldValue = [[AromaAuthentication_Credentials alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.credentials = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.emailAddress = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"SignInRequest" error: __thriftError]) return NO;
  if (_credentialsIsSet) {
    if (_credentials != nil) {
      if (![outProtocol writeFieldBeginWithName: @"credentials" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_credentials write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_emailAddressIsSet) {
    if (_emailAddress != nil) {
      if (![outProtocol writeFieldBeginWithName: @"emailAddress" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _emailAddress error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_SignInRequest("];
  [ms appendString: @"credentials:"];
  [ms appendFormat: @"%@", _credentials];
  [ms appendString: @",emailAddress:"];
  [ms appendFormat: @"\"%@\"", _emailAddress];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_SignInResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithUserToken: (AromaService_UserToken) userToken
{
  self = [super init];
  if (self)  {
    _userToken = userToken;
    _userTokenIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"userToken"])
    {
      _userToken = [decoder decodeObjectForKey: @"userToken"];
      _userTokenIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_userTokenIsSet)
  {
    [encoder encodeObject: _userToken forKey: @"userToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _userTokenIsSet ? 2654435761 : 0;
  if (_userTokenIsSet)
  {
    hash = (hash * 31) ^ [_userToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_SignInResponse class]]) {
    return NO;
  }
  AromaService_SignInResponse *other = (AromaService_SignInResponse *)anObject;
  if ((_userTokenIsSet != other->_userTokenIsSet) ||
      (_userTokenIsSet && ((_userToken || other->_userToken) && ![_userToken isEqual:other->_userToken]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_SignInResponse * val = [AromaService_SignInResponse new];
  if (_userTokenIsSet)
  {
    val.userToken = [self.userToken copy];
  }
  return val;
}

- (void) setUserToken: (AromaAuthentication_UserToken *) userToken {
  _userToken = userToken;
  _userTokenIsSet = YES;
}

- (void) unsetUserToken {
  _userToken = nil;
  _userTokenIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.userToken = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"SignInResponse" error: __thriftError]) return NO;
  if (_userTokenIsSet) {
    if (_userToken != nil) {
      if (![outProtocol writeFieldBeginWithName: @"userToken" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_userToken write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_SignInResponse("];
  [ms appendString: @"userToken:"];
  [ms appendFormat: @"%@", _userToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_SignUpRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithEmail: (NSString *) email name: (NSString *) name firstName: (NSString *) firstName middleName: (NSString *) middleName lastName: (NSString *) lastName username: (NSString *) username organizationId: (AromaService_uuid) organizationId credentials: (AromaAuthentication_Credentials *) credentials mainRole: (AromaService_Role) mainRole birthDate: (AromaService_timestamp) birthDate githubProfile: (NSString *) githubProfile profileImage: (AromaService_Image) profileImage
{
  self = [super init];
  if (self)  {
    _email = email;
    _emailIsSet = YES;
    _name = name;
    _nameIsSet = YES;
    _firstName = firstName;
    _firstNameIsSet = YES;
    _middleName = middleName;
    _middleNameIsSet = YES;
    _lastName = lastName;
    _lastNameIsSet = YES;
    _username = username;
    _usernameIsSet = YES;
    _organizationId = organizationId;
    _organizationIdIsSet = YES;
    _credentials = credentials;
    _credentialsIsSet = YES;
    _mainRole = mainRole;
    _mainRoleIsSet = YES;
    _birthDate = birthDate;
    _birthDateIsSet = YES;
    _githubProfile = githubProfile;
    _githubProfileIsSet = YES;
    _profileImage = profileImage;
    _profileImageIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"email"])
    {
      _email = [decoder decodeObjectForKey: @"email"];
      _emailIsSet = YES;
    }
    if ([decoder containsValueForKey: @"name"])
    {
      _name = [decoder decodeObjectForKey: @"name"];
      _nameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"firstName"])
    {
      _firstName = [decoder decodeObjectForKey: @"firstName"];
      _firstNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"middleName"])
    {
      _middleName = [decoder decodeObjectForKey: @"middleName"];
      _middleNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"lastName"])
    {
      _lastName = [decoder decodeObjectForKey: @"lastName"];
      _lastNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"username"])
    {
      _username = [decoder decodeObjectForKey: @"username"];
      _usernameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"organizationId"])
    {
      _organizationId = [decoder decodeObjectForKey: @"organizationId"];
      _organizationIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"credentials"])
    {
      _credentials = [decoder decodeObjectForKey: @"credentials"];
      _credentialsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"mainRole"])
    {
      _mainRole = [decoder decodeIntForKey: @"mainRole"];
      _mainRoleIsSet = YES;
    }
    if ([decoder containsValueForKey: @"birthDate"])
    {
      _birthDate = [decoder decodeInt64ForKey: @"birthDate"];
      _birthDateIsSet = YES;
    }
    if ([decoder containsValueForKey: @"githubProfile"])
    {
      _githubProfile = [decoder decodeObjectForKey: @"githubProfile"];
      _githubProfileIsSet = YES;
    }
    if ([decoder containsValueForKey: @"profileImage"])
    {
      _profileImage = [decoder decodeObjectForKey: @"profileImage"];
      _profileImageIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_emailIsSet)
  {
    [encoder encodeObject: _email forKey: @"email"];
  }
  if (_nameIsSet)
  {
    [encoder encodeObject: _name forKey: @"name"];
  }
  if (_firstNameIsSet)
  {
    [encoder encodeObject: _firstName forKey: @"firstName"];
  }
  if (_middleNameIsSet)
  {
    [encoder encodeObject: _middleName forKey: @"middleName"];
  }
  if (_lastNameIsSet)
  {
    [encoder encodeObject: _lastName forKey: @"lastName"];
  }
  if (_usernameIsSet)
  {
    [encoder encodeObject: _username forKey: @"username"];
  }
  if (_organizationIdIsSet)
  {
    [encoder encodeObject: _organizationId forKey: @"organizationId"];
  }
  if (_credentialsIsSet)
  {
    [encoder encodeObject: _credentials forKey: @"credentials"];
  }
  if (_mainRoleIsSet)
  {
    [encoder encodeInt: _mainRole forKey: @"mainRole"];
  }
  if (_birthDateIsSet)
  {
    [encoder encodeInt64: _birthDate forKey: @"birthDate"];
  }
  if (_githubProfileIsSet)
  {
    [encoder encodeObject: _githubProfile forKey: @"githubProfile"];
  }
  if (_profileImageIsSet)
  {
    [encoder encodeObject: _profileImage forKey: @"profileImage"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _emailIsSet ? 2654435761 : 0;
  if (_emailIsSet)
  {
    hash = (hash * 31) ^ [_email hash];
  }
  hash = (hash * 31) ^ _nameIsSet ? 2654435761 : 0;
  if (_nameIsSet)
  {
    hash = (hash * 31) ^ [_name hash];
  }
  hash = (hash * 31) ^ _firstNameIsSet ? 2654435761 : 0;
  if (_firstNameIsSet)
  {
    hash = (hash * 31) ^ [_firstName hash];
  }
  hash = (hash * 31) ^ _middleNameIsSet ? 2654435761 : 0;
  if (_middleNameIsSet)
  {
    hash = (hash * 31) ^ [_middleName hash];
  }
  hash = (hash * 31) ^ _lastNameIsSet ? 2654435761 : 0;
  if (_lastNameIsSet)
  {
    hash = (hash * 31) ^ [_lastName hash];
  }
  hash = (hash * 31) ^ _usernameIsSet ? 2654435761 : 0;
  if (_usernameIsSet)
  {
    hash = (hash * 31) ^ [_username hash];
  }
  hash = (hash * 31) ^ _organizationIdIsSet ? 2654435761 : 0;
  if (_organizationIdIsSet)
  {
    hash = (hash * 31) ^ [_organizationId hash];
  }
  hash = (hash * 31) ^ _credentialsIsSet ? 2654435761 : 0;
  if (_credentialsIsSet)
  {
    hash = (hash * 31) ^ [_credentials hash];
  }
  hash = (hash * 31) ^ _mainRoleIsSet ? 2654435761 : 0;
  if (_mainRoleIsSet)
  {
    hash = (hash * 31) ^ [@(_mainRole) hash];
  }
  hash = (hash * 31) ^ _birthDateIsSet ? 2654435761 : 0;
  if (_birthDateIsSet)
  {
    hash = (hash * 31) ^ [@(_birthDate) hash];
  }
  hash = (hash * 31) ^ _githubProfileIsSet ? 2654435761 : 0;
  if (_githubProfileIsSet)
  {
    hash = (hash * 31) ^ [_githubProfile hash];
  }
  hash = (hash * 31) ^ _profileImageIsSet ? 2654435761 : 0;
  if (_profileImageIsSet)
  {
    hash = (hash * 31) ^ [_profileImage hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_SignUpRequest class]]) {
    return NO;
  }
  AromaService_SignUpRequest *other = (AromaService_SignUpRequest *)anObject;
  if ((_emailIsSet != other->_emailIsSet) ||
      (_emailIsSet && ((_email || other->_email) && ![_email isEqual:other->_email]))) {
    return NO;
  }
  if ((_nameIsSet != other->_nameIsSet) ||
      (_nameIsSet && ((_name || other->_name) && ![_name isEqual:other->_name]))) {
    return NO;
  }
  if ((_firstNameIsSet != other->_firstNameIsSet) ||
      (_firstNameIsSet && ((_firstName || other->_firstName) && ![_firstName isEqual:other->_firstName]))) {
    return NO;
  }
  if ((_middleNameIsSet != other->_middleNameIsSet) ||
      (_middleNameIsSet && ((_middleName || other->_middleName) && ![_middleName isEqual:other->_middleName]))) {
    return NO;
  }
  if ((_lastNameIsSet != other->_lastNameIsSet) ||
      (_lastNameIsSet && ((_lastName || other->_lastName) && ![_lastName isEqual:other->_lastName]))) {
    return NO;
  }
  if ((_usernameIsSet != other->_usernameIsSet) ||
      (_usernameIsSet && ((_username || other->_username) && ![_username isEqual:other->_username]))) {
    return NO;
  }
  if ((_organizationIdIsSet != other->_organizationIdIsSet) ||
      (_organizationIdIsSet && ((_organizationId || other->_organizationId) && ![_organizationId isEqual:other->_organizationId]))) {
    return NO;
  }
  if ((_credentialsIsSet != other->_credentialsIsSet) ||
      (_credentialsIsSet && ((_credentials || other->_credentials) && ![_credentials isEqual:other->_credentials]))) {
    return NO;
  }
  if ((_mainRoleIsSet != other->_mainRoleIsSet) ||
      (_mainRoleIsSet && (_mainRole != other->_mainRole))) {
    return NO;
  }
  if ((_birthDateIsSet != other->_birthDateIsSet) ||
      (_birthDateIsSet && (_birthDate != other->_birthDate))) {
    return NO;
  }
  if ((_githubProfileIsSet != other->_githubProfileIsSet) ||
      (_githubProfileIsSet && ((_githubProfile || other->_githubProfile) && ![_githubProfile isEqual:other->_githubProfile]))) {
    return NO;
  }
  if ((_profileImageIsSet != other->_profileImageIsSet) ||
      (_profileImageIsSet && ((_profileImage || other->_profileImage) && ![_profileImage isEqual:other->_profileImage]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_SignUpRequest * val = [AromaService_SignUpRequest new];
  if (_emailIsSet)
  {
    val.email = [self.email copy];
  }
  if (_nameIsSet)
  {
    val.name = [self.name copy];
  }
  if (_firstNameIsSet)
  {
    val.firstName = [self.firstName copy];
  }
  if (_middleNameIsSet)
  {
    val.middleName = [self.middleName copy];
  }
  if (_lastNameIsSet)
  {
    val.lastName = [self.lastName copy];
  }
  if (_usernameIsSet)
  {
    val.username = [self.username copy];
  }
  if (_organizationIdIsSet)
  {
    val.organizationId = [self.organizationId copy];
  }
  if (_credentialsIsSet)
  {
    val.credentials = [self.credentials copy];
  }
  if (_mainRoleIsSet)
  {
    val.mainRole = self.mainRole;
  }
  if (_birthDateIsSet)
  {
    val.birthDate = self.birthDate;
  }
  if (_githubProfileIsSet)
  {
    val.githubProfile = [self.githubProfile copy];
  }
  if (_profileImageIsSet)
  {
    val.profileImage = [self.profileImage copy];
  }
  return val;
}

- (void) setEmail: (NSString *) email {
  _email = email;
  _emailIsSet = YES;
}

- (void) unsetEmail {
  _email = nil;
  _emailIsSet = NO;
}

- (void) setName: (NSString *) name {
  _name = name;
  _nameIsSet = YES;
}

- (void) unsetName {
  _name = nil;
  _nameIsSet = NO;
}

- (void) setFirstName: (NSString *) firstName {
  _firstName = firstName;
  _firstNameIsSet = YES;
}

- (void) unsetFirstName {
  _firstName = nil;
  _firstNameIsSet = NO;
}

- (void) setMiddleName: (NSString *) middleName {
  _middleName = middleName;
  _middleNameIsSet = YES;
}

- (void) unsetMiddleName {
  _middleName = nil;
  _middleNameIsSet = NO;
}

- (void) setLastName: (NSString *) lastName {
  _lastName = lastName;
  _lastNameIsSet = YES;
}

- (void) unsetLastName {
  _lastName = nil;
  _lastNameIsSet = NO;
}

- (void) setUsername: (NSString *) username {
  _username = username;
  _usernameIsSet = YES;
}

- (void) unsetUsername {
  _username = nil;
  _usernameIsSet = NO;
}

- (void) setOrganizationId: (NSString *) organizationId {
  _organizationId = organizationId;
  _organizationIdIsSet = YES;
}

- (void) unsetOrganizationId {
  _organizationId = nil;
  _organizationIdIsSet = NO;
}

- (void) setCredentials: (AromaAuthentication_Credentials *) credentials {
  _credentials = credentials;
  _credentialsIsSet = YES;
}

- (void) unsetCredentials {
  _credentials = nil;
  _credentialsIsSet = NO;
}

- (void) setMainRole: (AromaService_Role) mainRole {
  _mainRole = mainRole;
  _mainRoleIsSet = YES;
}

- (void) unsetMainRole {
  _mainRoleIsSet = NO;
}

- (void) setBirthDate: (SInt64) birthDate {
  _birthDate = birthDate;
  _birthDateIsSet = YES;
}

- (void) unsetBirthDate {
  _birthDateIsSet = NO;
}

- (void) setGithubProfile: (NSString *) githubProfile {
  _githubProfile = githubProfile;
  _githubProfileIsSet = YES;
}

- (void) unsetGithubProfile {
  _githubProfile = nil;
  _githubProfileIsSet = NO;
}

- (void) setProfileImage: (Aroma_Image *) profileImage {
  _profileImage = profileImage;
  _profileImageIsSet = YES;
}

- (void) unsetProfileImage {
  _profileImage = nil;
  _profileImageIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.email = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.name = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.firstName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.middleName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.lastName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.username = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 7:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.organizationId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 8:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_Credentials *fieldValue = [[AromaAuthentication_Credentials alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.credentials = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 9:
        if (fieldType == TTypeI32) {
          AromaService_Role fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.mainRole = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 10:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.birthDate = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 11:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.githubProfile = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 12:
        if (fieldType == TTypeSTRUCT) {
          Aroma_Image *fieldValue = [[Aroma_Image alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.profileImage = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"SignUpRequest" error: __thriftError]) return NO;
  if (_emailIsSet) {
    if (_email != nil) {
      if (![outProtocol writeFieldBeginWithName: @"email" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _email error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_nameIsSet) {
    if (_name != nil) {
      if (![outProtocol writeFieldBeginWithName: @"name" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _name error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_firstNameIsSet) {
    if (_firstName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"firstName" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _firstName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_middleNameIsSet) {
    if (_middleName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"middleName" type: TTypeSTRING fieldID: 4 error: __thriftError]) return NO;
      if (![outProtocol writeString: _middleName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_lastNameIsSet) {
    if (_lastName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"lastName" type: TTypeSTRING fieldID: 5 error: __thriftError]) return NO;
      if (![outProtocol writeString: _lastName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_usernameIsSet) {
    if (_username != nil) {
      if (![outProtocol writeFieldBeginWithName: @"username" type: TTypeSTRING fieldID: 6 error: __thriftError]) return NO;
      if (![outProtocol writeString: _username error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_organizationIdIsSet) {
    if (_organizationId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"organizationId" type: TTypeSTRING fieldID: 7 error: __thriftError]) return NO;
      if (![outProtocol writeString: _organizationId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_credentialsIsSet) {
    if (_credentials != nil) {
      if (![outProtocol writeFieldBeginWithName: @"credentials" type: TTypeSTRUCT fieldID: 8 error: __thriftError]) return NO;
      if (![_credentials write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_mainRoleIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"mainRole" type: TTypeI32 fieldID: 9 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _mainRole error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_birthDateIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"birthDate" type: TTypeI64 fieldID: 10 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _birthDate error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_githubProfileIsSet) {
    if (_githubProfile != nil) {
      if (![outProtocol writeFieldBeginWithName: @"githubProfile" type: TTypeSTRING fieldID: 11 error: __thriftError]) return NO;
      if (![outProtocol writeString: _githubProfile error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_profileImageIsSet) {
    if (_profileImage != nil) {
      if (![outProtocol writeFieldBeginWithName: @"profileImage" type: TTypeSTRUCT fieldID: 12 error: __thriftError]) return NO;
      if (![_profileImage write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_SignUpRequest("];
  [ms appendString: @"email:"];
  [ms appendFormat: @"\"%@\"", _email];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", _name];
  [ms appendString: @",firstName:"];
  [ms appendFormat: @"\"%@\"", _firstName];
  [ms appendString: @",middleName:"];
  [ms appendFormat: @"\"%@\"", _middleName];
  [ms appendString: @",lastName:"];
  [ms appendFormat: @"\"%@\"", _lastName];
  [ms appendString: @",username:"];
  [ms appendFormat: @"\"%@\"", _username];
  [ms appendString: @",organizationId:"];
  [ms appendFormat: @"\"%@\"", _organizationId];
  [ms appendString: @",credentials:"];
  [ms appendFormat: @"%@", _credentials];
  [ms appendString: @",mainRole:"];
  [ms appendFormat: @"%i", (int)_mainRole];
  [ms appendString: @",birthDate:"];
  [ms appendFormat: @"%qi", _birthDate];
  [ms appendString: @",githubProfile:"];
  [ms appendFormat: @"\"%@\"", _githubProfile];
  [ms appendString: @",profileImage:"];
  [ms appendFormat: @"%@", _profileImage];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_SignUpResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithUserToken: (AromaService_UserToken) userToken account: (AromaAuthentication_AromaAccount *) account userId: (AromaService_uuid) userId
{
  self = [super init];
  if (self)  {
    _userToken = userToken;
    _userTokenIsSet = YES;
    _account = account;
    _accountIsSet = YES;
    _userId = userId;
    _userIdIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"userToken"])
    {
      _userToken = [decoder decodeObjectForKey: @"userToken"];
      _userTokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"account"])
    {
      _account = [decoder decodeObjectForKey: @"account"];
      _accountIsSet = YES;
    }
    if ([decoder containsValueForKey: @"userId"])
    {
      _userId = [decoder decodeObjectForKey: @"userId"];
      _userIdIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_userTokenIsSet)
  {
    [encoder encodeObject: _userToken forKey: @"userToken"];
  }
  if (_accountIsSet)
  {
    [encoder encodeObject: _account forKey: @"account"];
  }
  if (_userIdIsSet)
  {
    [encoder encodeObject: _userId forKey: @"userId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _userTokenIsSet ? 2654435761 : 0;
  if (_userTokenIsSet)
  {
    hash = (hash * 31) ^ [_userToken hash];
  }
  hash = (hash * 31) ^ _accountIsSet ? 2654435761 : 0;
  if (_accountIsSet)
  {
    hash = (hash * 31) ^ [_account hash];
  }
  hash = (hash * 31) ^ _userIdIsSet ? 2654435761 : 0;
  if (_userIdIsSet)
  {
    hash = (hash * 31) ^ [_userId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_SignUpResponse class]]) {
    return NO;
  }
  AromaService_SignUpResponse *other = (AromaService_SignUpResponse *)anObject;
  if ((_userTokenIsSet != other->_userTokenIsSet) ||
      (_userTokenIsSet && ((_userToken || other->_userToken) && ![_userToken isEqual:other->_userToken]))) {
    return NO;
  }
  if ((_accountIsSet != other->_accountIsSet) ||
      (_accountIsSet && ((_account || other->_account) && ![_account isEqual:other->_account]))) {
    return NO;
  }
  if ((_userIdIsSet != other->_userIdIsSet) ||
      (_userIdIsSet && ((_userId || other->_userId) && ![_userId isEqual:other->_userId]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_SignUpResponse * val = [AromaService_SignUpResponse new];
  if (_userTokenIsSet)
  {
    val.userToken = [self.userToken copy];
  }
  if (_accountIsSet)
  {
    val.account = [self.account copy];
  }
  if (_userIdIsSet)
  {
    val.userId = [self.userId copy];
  }
  return val;
}

- (void) setUserToken: (AromaAuthentication_UserToken *) userToken {
  _userToken = userToken;
  _userTokenIsSet = YES;
}

- (void) unsetUserToken {
  _userToken = nil;
  _userTokenIsSet = NO;
}

- (void) setAccount: (AromaAuthentication_AromaAccount *) account {
  _account = account;
  _accountIsSet = YES;
}

- (void) unsetAccount {
  _account = nil;
  _accountIsSet = NO;
}

- (void) setUserId: (NSString *) userId {
  _userId = userId;
  _userIdIsSet = YES;
}

- (void) unsetUserId {
  _userId = nil;
  _userIdIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.userToken = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_AromaAccount *fieldValue = [[AromaAuthentication_AromaAccount alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.account = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.userId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"SignUpResponse" error: __thriftError]) return NO;
  if (_userTokenIsSet) {
    if (_userToken != nil) {
      if (![outProtocol writeFieldBeginWithName: @"userToken" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_userToken write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_accountIsSet) {
    if (_account != nil) {
      if (![outProtocol writeFieldBeginWithName: @"account" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_account write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_userIdIsSet) {
    if (_userId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _userId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_SignUpResponse("];
  [ms appendString: @"userToken:"];
  [ms appendFormat: @"%@", _userToken];
  [ms appendString: @",account:"];
  [ms appendFormat: @"%@", _account];
  [ms appendString: @",userId:"];
  [ms appendFormat: @"\"%@\"", _userId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_CheckExistsRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithEmailAddress: (NSString *) emailAddress
{
  self = [super init];
  if (self)  {
    _emailAddress = emailAddress;
    _emailAddressIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"emailAddress"])
    {
      _emailAddress = [decoder decodeObjectForKey: @"emailAddress"];
      _emailAddressIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_emailAddressIsSet)
  {
    [encoder encodeObject: _emailAddress forKey: @"emailAddress"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _emailAddressIsSet ? 2654435761 : 0;
  if (_emailAddressIsSet)
  {
    hash = (hash * 31) ^ [_emailAddress hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_CheckExistsRequest class]]) {
    return NO;
  }
  AromaService_CheckExistsRequest *other = (AromaService_CheckExistsRequest *)anObject;
  if ((_emailAddressIsSet != other->_emailAddressIsSet) ||
      (_emailAddressIsSet && ((_emailAddress || other->_emailAddress) && ![_emailAddress isEqual:other->_emailAddress]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_CheckExistsRequest * val = [AromaService_CheckExistsRequest new];
  if (_emailAddressIsSet)
  {
    val.emailAddress = [self.emailAddress copy];
  }
  return val;
}

- (void) setEmailAddress: (NSString *) emailAddress {
  _emailAddress = emailAddress;
  _emailAddressIsSet = YES;
}

- (void) unsetEmailAddress {
  _emailAddress = nil;
  _emailAddressIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.emailAddress = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"CheckExistsRequest" error: __thriftError]) return NO;
  if (_emailAddressIsSet) {
    if (_emailAddress != nil) {
      if (![outProtocol writeFieldBeginWithName: @"emailAddress" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _emailAddress error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_CheckExistsRequest("];
  [ms appendString: @"emailAddress:"];
  [ms appendFormat: @"\"%@\"", _emailAddress];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_CheckExistsResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithExists: (BOOL) exists message: (NSString *) message
{
  self = [super init];
  if (self)  {
    _exists = exists;
    _existsIsSet = YES;
    _message = message;
    _messageIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"exists"])
    {
      _exists = [decoder decodeBoolForKey: @"exists"];
      _existsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"message"])
    {
      _message = [decoder decodeObjectForKey: @"message"];
      _messageIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_existsIsSet)
  {
    [encoder encodeBool: _exists forKey: @"exists"];
  }
  if (_messageIsSet)
  {
    [encoder encodeObject: _message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _existsIsSet ? 2654435761 : 0;
  if (_existsIsSet)
  {
    hash = (hash * 31) ^ [@(_exists) hash];
  }
  hash = (hash * 31) ^ _messageIsSet ? 2654435761 : 0;
  if (_messageIsSet)
  {
    hash = (hash * 31) ^ [_message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_CheckExistsResponse class]]) {
    return NO;
  }
  AromaService_CheckExistsResponse *other = (AromaService_CheckExistsResponse *)anObject;
  if ((_existsIsSet != other->_existsIsSet) ||
      (_existsIsSet && (_exists != other->_exists))) {
    return NO;
  }
  if ((_messageIsSet != other->_messageIsSet) ||
      (_messageIsSet && ((_message || other->_message) && ![_message isEqual:other->_message]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_CheckExistsResponse * val = [AromaService_CheckExistsResponse new];
  if (_existsIsSet)
  {
    val.exists = self.exists;
  }
  if (_messageIsSet)
  {
    val.message = [self.message copy];
  }
  return val;
}

- (void) setExists: (BOOL) exists {
  _exists = exists;
  _existsIsSet = YES;
}

- (void) unsetExists {
  _existsIsSet = NO;
}

- (void) setMessage: (NSString *) message {
  _message = message;
  _messageIsSet = YES;
}

- (void) unsetMessage {
  _message = nil;
  _messageIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeBOOL) {
          BOOL fieldValue;
          if (![inProtocol readBool:&fieldValue error: __thriftError]) return NO;
          self.exists = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.message = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"CheckExistsResponse" error: __thriftError]) return NO;
  if (_existsIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"exists" type: TTypeBOOL fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeBool: _exists error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_messageIsSet) {
    if (_message != nil) {
      if (![outProtocol writeFieldBeginWithName: @"message" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _message error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_CheckExistsResponse("];
  [ms appendString: @"exists:"];
  [ms appendFormat: @"%i", _exists];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", _message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_GetUserInfoRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithToken: (AromaService_UserToken) token userId: (AromaService_uuid) userId email: (NSString *) email
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
    _userId = userId;
    _userIdIsSet = YES;
    _email = email;
    _emailIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"userId"])
    {
      _userId = [decoder decodeObjectForKey: @"userId"];
      _userIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"email"])
    {
      _email = [decoder decodeObjectForKey: @"email"];
      _emailIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
  if (_userIdIsSet)
  {
    [encoder encodeObject: _userId forKey: @"userId"];
  }
  if (_emailIsSet)
  {
    [encoder encodeObject: _email forKey: @"email"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  hash = (hash * 31) ^ _userIdIsSet ? 2654435761 : 0;
  if (_userIdIsSet)
  {
    hash = (hash * 31) ^ [_userId hash];
  }
  hash = (hash * 31) ^ _emailIsSet ? 2654435761 : 0;
  if (_emailIsSet)
  {
    hash = (hash * 31) ^ [_email hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_GetUserInfoRequest class]]) {
    return NO;
  }
  AromaService_GetUserInfoRequest *other = (AromaService_GetUserInfoRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  if ((_userIdIsSet != other->_userIdIsSet) ||
      (_userIdIsSet && ((_userId || other->_userId) && ![_userId isEqual:other->_userId]))) {
    return NO;
  }
  if ((_emailIsSet != other->_emailIsSet) ||
      (_emailIsSet && ((_email || other->_email) && ![_email isEqual:other->_email]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_GetUserInfoRequest * val = [AromaService_GetUserInfoRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  if (_userIdIsSet)
  {
    val.userId = [self.userId copy];
  }
  if (_emailIsSet)
  {
    val.email = [self.email copy];
  }
  return val;
}

- (void) setToken: (AromaAuthentication_UserToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (void) setUserId: (NSString *) userId {
  _userId = userId;
  _userIdIsSet = YES;
}

- (void) unsetUserId {
  _userId = nil;
  _userIdIsSet = NO;
}

- (void) setEmail: (NSString *) email {
  _email = email;
  _emailIsSet = YES;
}

- (void) unsetEmail {
  _email = nil;
  _emailIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.userId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.email = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GetUserInfoRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_userIdIsSet) {
    if (_userId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _userId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_emailIsSet) {
    if (_email != nil) {
      if (![outProtocol writeFieldBeginWithName: @"email" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _email error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_GetUserInfoRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @",userId:"];
  [ms appendFormat: @"\"%@\"", _userId];
  [ms appendString: @",email:"];
  [ms appendFormat: @"\"%@\"", _email];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_GetUserInfoResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithUserInfo: (AromaService_User) userInfo
{
  self = [super init];
  if (self)  {
    _userInfo = userInfo;
    _userInfoIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"userInfo"])
    {
      _userInfo = [decoder decodeObjectForKey: @"userInfo"];
      _userInfoIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_userInfoIsSet)
  {
    [encoder encodeObject: _userInfo forKey: @"userInfo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _userInfoIsSet ? 2654435761 : 0;
  if (_userInfoIsSet)
  {
    hash = (hash * 31) ^ [_userInfo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_GetUserInfoResponse class]]) {
    return NO;
  }
  AromaService_GetUserInfoResponse *other = (AromaService_GetUserInfoResponse *)anObject;
  if ((_userInfoIsSet != other->_userInfoIsSet) ||
      (_userInfoIsSet && ((_userInfo || other->_userInfo) && ![_userInfo isEqual:other->_userInfo]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_GetUserInfoResponse * val = [AromaService_GetUserInfoResponse new];
  if (_userInfoIsSet)
  {
    val.userInfo = [self.userInfo copy];
  }
  return val;
}

- (void) setUserInfo: (Aroma_User *) userInfo {
  _userInfo = userInfo;
  _userInfoIsSet = YES;
}

- (void) unsetUserInfo {
  _userInfo = nil;
  _userInfoIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          Aroma_User *fieldValue = [[Aroma_User alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.userInfo = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GetUserInfoResponse" error: __thriftError]) return NO;
  if (_userInfoIsSet) {
    if (_userInfo != nil) {
      if (![outProtocol writeFieldBeginWithName: @"userInfo" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_userInfo write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_GetUserInfoResponse("];
  [ms appendString: @"userInfo:"];
  [ms appendFormat: @"%@", _userInfo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_GetApplicationInfoRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.includeFollowingInfo = NO;

  }
  return self;
}

- (instancetype) initWithToken: (AromaService_AuthenticationToken) token applicationId: (AromaService_uuid) applicationId includeFollowingInfo: (BOOL) includeFollowingInfo
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
    _applicationId = applicationId;
    _applicationIdIsSet = YES;
    _includeFollowingInfo = includeFollowingInfo;
    _includeFollowingInfoIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationId"])
    {
      _applicationId = [decoder decodeObjectForKey: @"applicationId"];
      _applicationIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"includeFollowingInfo"])
    {
      _includeFollowingInfo = [decoder decodeBoolForKey: @"includeFollowingInfo"];
      _includeFollowingInfoIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
  if (_applicationIdIsSet)
  {
    [encoder encodeObject: _applicationId forKey: @"applicationId"];
  }
  if (_includeFollowingInfoIsSet)
  {
    [encoder encodeBool: _includeFollowingInfo forKey: @"includeFollowingInfo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  hash = (hash * 31) ^ _applicationIdIsSet ? 2654435761 : 0;
  if (_applicationIdIsSet)
  {
    hash = (hash * 31) ^ [_applicationId hash];
  }
  hash = (hash * 31) ^ _includeFollowingInfoIsSet ? 2654435761 : 0;
  if (_includeFollowingInfoIsSet)
  {
    hash = (hash * 31) ^ [@(_includeFollowingInfo) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_GetApplicationInfoRequest class]]) {
    return NO;
  }
  AromaService_GetApplicationInfoRequest *other = (AromaService_GetApplicationInfoRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  if ((_applicationIdIsSet != other->_applicationIdIsSet) ||
      (_applicationIdIsSet && ((_applicationId || other->_applicationId) && ![_applicationId isEqual:other->_applicationId]))) {
    return NO;
  }
  if ((_includeFollowingInfoIsSet != other->_includeFollowingInfoIsSet) ||
      (_includeFollowingInfoIsSet && (_includeFollowingInfo != other->_includeFollowingInfo))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_GetApplicationInfoRequest * val = [AromaService_GetApplicationInfoRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  if (_applicationIdIsSet)
  {
    val.applicationId = [self.applicationId copy];
  }
  if (_includeFollowingInfoIsSet)
  {
    val.includeFollowingInfo = self.includeFollowingInfo;
  }
  return val;
}

- (void) setToken: (AromaAuthentication_AuthenticationToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (void) setApplicationId: (NSString *) applicationId {
  _applicationId = applicationId;
  _applicationIdIsSet = YES;
}

- (void) unsetApplicationId {
  _applicationId = nil;
  _applicationIdIsSet = NO;
}

- (void) setIncludeFollowingInfo: (BOOL) includeFollowingInfo {
  _includeFollowingInfo = includeFollowingInfo;
  _includeFollowingInfoIsSet = YES;
}

- (void) unsetIncludeFollowingInfo {
  _includeFollowingInfoIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_AuthenticationToken *fieldValue = [[AromaAuthentication_AuthenticationToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.applicationId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeBOOL) {
          BOOL fieldValue;
          if (![inProtocol readBool:&fieldValue error: __thriftError]) return NO;
          self.includeFollowingInfo = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GetApplicationInfoRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationIdIsSet) {
    if (_applicationId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationId" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _applicationId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_includeFollowingInfoIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"includeFollowingInfo" type: TTypeBOOL fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeBool: _includeFollowingInfo error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_GetApplicationInfoRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", _applicationId];
  [ms appendString: @",includeFollowingInfo:"];
  [ms appendFormat: @"%i", _includeFollowingInfo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_GetApplicationInfoResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithApplicationInfo: (AromaService_Application) applicationInfo
{
  self = [super init];
  if (self)  {
    _applicationInfo = applicationInfo;
    _applicationInfoIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"applicationInfo"])
    {
      _applicationInfo = [decoder decodeObjectForKey: @"applicationInfo"];
      _applicationInfoIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_applicationInfoIsSet)
  {
    [encoder encodeObject: _applicationInfo forKey: @"applicationInfo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _applicationInfoIsSet ? 2654435761 : 0;
  if (_applicationInfoIsSet)
  {
    hash = (hash * 31) ^ [_applicationInfo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_GetApplicationInfoResponse class]]) {
    return NO;
  }
  AromaService_GetApplicationInfoResponse *other = (AromaService_GetApplicationInfoResponse *)anObject;
  if ((_applicationInfoIsSet != other->_applicationInfoIsSet) ||
      (_applicationInfoIsSet && ((_applicationInfo || other->_applicationInfo) && ![_applicationInfo isEqual:other->_applicationInfo]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_GetApplicationInfoResponse * val = [AromaService_GetApplicationInfoResponse new];
  if (_applicationInfoIsSet)
  {
    val.applicationInfo = [self.applicationInfo copy];
  }
  return val;
}

- (void) setApplicationInfo: (Aroma_Application *) applicationInfo {
  _applicationInfo = applicationInfo;
  _applicationInfoIsSet = YES;
}

- (void) unsetApplicationInfo {
  _applicationInfo = nil;
  _applicationInfoIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          Aroma_Application *fieldValue = [[Aroma_Application alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.applicationInfo = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GetApplicationInfoResponse" error: __thriftError]) return NO;
  if (_applicationInfoIsSet) {
    if (_applicationInfo != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationInfo" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_applicationInfo write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_GetApplicationInfoResponse("];
  [ms appendString: @"applicationInfo:"];
  [ms appendFormat: @"%@", _applicationInfo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_GetApplicationsOwnedByRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithToken: (AromaService_UserToken) token userId: (AromaService_uuid) userId
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
    _userId = userId;
    _userIdIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"userId"])
    {
      _userId = [decoder decodeObjectForKey: @"userId"];
      _userIdIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
  if (_userIdIsSet)
  {
    [encoder encodeObject: _userId forKey: @"userId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  hash = (hash * 31) ^ _userIdIsSet ? 2654435761 : 0;
  if (_userIdIsSet)
  {
    hash = (hash * 31) ^ [_userId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_GetApplicationsOwnedByRequest class]]) {
    return NO;
  }
  AromaService_GetApplicationsOwnedByRequest *other = (AromaService_GetApplicationsOwnedByRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  if ((_userIdIsSet != other->_userIdIsSet) ||
      (_userIdIsSet && ((_userId || other->_userId) && ![_userId isEqual:other->_userId]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_GetApplicationsOwnedByRequest * val = [AromaService_GetApplicationsOwnedByRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  if (_userIdIsSet)
  {
    val.userId = [self.userId copy];
  }
  return val;
}

- (void) setToken: (AromaAuthentication_UserToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (void) setUserId: (NSString *) userId {
  _userId = userId;
  _userIdIsSet = YES;
}

- (void) unsetUserId {
  _userId = nil;
  _userIdIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.userId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GetApplicationsOwnedByRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_userIdIsSet) {
    if (_userId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _userId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_GetApplicationsOwnedByRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @",userId:"];
  [ms appendFormat: @"\"%@\"", _userId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_GetApplicationsOwnedByResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.applications = @[]  }
  return self;
}

- (instancetype) initWithApplications: (NSArray<AromaService_Application> *) applications
{
  self = [super init];
  if (self)  {
    _applications = [applications mutableCopy];
    _applicationsIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"applications"])
    {
      _applications = [decoder decodeObjectForKey: @"applications"];
      _applicationsIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_applicationsIsSet)
  {
    [encoder encodeObject: _applications forKey: @"applications"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _applicationsIsSet ? 2654435761 : 0;
  if (_applicationsIsSet)
  {
    hash = (hash * 31) ^ [_applications hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_GetApplicationsOwnedByResponse class]]) {
    return NO;
  }
  AromaService_GetApplicationsOwnedByResponse *other = (AromaService_GetApplicationsOwnedByResponse *)anObject;
  if ((_applicationsIsSet != other->_applicationsIsSet) ||
      (_applicationsIsSet && ((_applications || other->_applications) && ![_applications isEqual:other->_applications]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_GetApplicationsOwnedByResponse * val = [AromaService_GetApplicationsOwnedByResponse new];
  if (_applicationsIsSet)
  {
    val.applications = [self.applications copy];
  }
  return val;
}

- (void) setApplications: (NSMutableArray<AromaService_Application> *) applications {
  _applications = applications;
  _applicationsIsSet = YES;
}

- (void) unsetApplications {
  _applications = nil;
  _applicationsIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeLIST) {
          SInt32 _size0;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size0 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            Aroma_Application *_elem2 = [[Aroma_Application alloc] init];
            if (![_elem2 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem2];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.applications = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GetApplicationsOwnedByResponse" error: __thriftError]) return NO;
  if (_applicationsIsSet) {
    if (_applications != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applications" type: TTypeLIST fieldID: 1 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_applications count] error: __thriftError]) return NO;
        int idx4;
        for (idx4 = 0; idx4 < [_applications count]; idx4++)
        {
          if (![[_applications objectAtIndex: idx4] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_GetApplicationsOwnedByResponse("];
  [ms appendString: @"applications:"];
  [ms appendFormat: @"%@", _applications];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_ProvisionApplicationRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.applicationDescription = @"";

    self.tier = 1;

  }
  return self;
}

- (instancetype) initWithToken: (AromaService_UserToken) token applicationName: (NSString *) applicationName programmingLanguage: (AromaService_ProgrammingLanguage) programmingLanguage organizationId: (AromaService_uuid) organizationId icon: (AromaService_Image) icon owners: (NSSet<AromaService_uuid> *) owners applicationDescription: (NSString *) applicationDescription tier: (AromaService_Tier) tier
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
    _applicationName = applicationName;
    _applicationNameIsSet = YES;
    _programmingLanguage = programmingLanguage;
    _programmingLanguageIsSet = YES;
    _organizationId = organizationId;
    _organizationIdIsSet = YES;
    _icon = icon;
    _iconIsSet = YES;
    _owners = [owners mutableCopy];
    _ownersIsSet = YES;
    _applicationDescription = applicationDescription;
    _applicationDescriptionIsSet = YES;
    _tier = tier;
    _tierIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationName"])
    {
      _applicationName = [decoder decodeObjectForKey: @"applicationName"];
      _applicationNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"programmingLanguage"])
    {
      _programmingLanguage = [decoder decodeIntForKey: @"programmingLanguage"];
      _programmingLanguageIsSet = YES;
    }
    if ([decoder containsValueForKey: @"organizationId"])
    {
      _organizationId = [decoder decodeObjectForKey: @"organizationId"];
      _organizationIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"icon"])
    {
      _icon = [decoder decodeObjectForKey: @"icon"];
      _iconIsSet = YES;
    }
    if ([decoder containsValueForKey: @"owners"])
    {
      _owners = [decoder decodeObjectForKey: @"owners"];
      _ownersIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationDescription"])
    {
      _applicationDescription = [decoder decodeObjectForKey: @"applicationDescription"];
      _applicationDescriptionIsSet = YES;
    }
    if ([decoder containsValueForKey: @"tier"])
    {
      _tier = [decoder decodeIntForKey: @"tier"];
      _tierIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
  if (_applicationNameIsSet)
  {
    [encoder encodeObject: _applicationName forKey: @"applicationName"];
  }
  if (_programmingLanguageIsSet)
  {
    [encoder encodeInt: _programmingLanguage forKey: @"programmingLanguage"];
  }
  if (_organizationIdIsSet)
  {
    [encoder encodeObject: _organizationId forKey: @"organizationId"];
  }
  if (_iconIsSet)
  {
    [encoder encodeObject: _icon forKey: @"icon"];
  }
  if (_ownersIsSet)
  {
    [encoder encodeObject: _owners forKey: @"owners"];
  }
  if (_applicationDescriptionIsSet)
  {
    [encoder encodeObject: _applicationDescription forKey: @"applicationDescription"];
  }
  if (_tierIsSet)
  {
    [encoder encodeInt: _tier forKey: @"tier"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  hash = (hash * 31) ^ _applicationNameIsSet ? 2654435761 : 0;
  if (_applicationNameIsSet)
  {
    hash = (hash * 31) ^ [_applicationName hash];
  }
  hash = (hash * 31) ^ _programmingLanguageIsSet ? 2654435761 : 0;
  if (_programmingLanguageIsSet)
  {
    hash = (hash * 31) ^ [@(_programmingLanguage) hash];
  }
  hash = (hash * 31) ^ _organizationIdIsSet ? 2654435761 : 0;
  if (_organizationIdIsSet)
  {
    hash = (hash * 31) ^ [_organizationId hash];
  }
  hash = (hash * 31) ^ _iconIsSet ? 2654435761 : 0;
  if (_iconIsSet)
  {
    hash = (hash * 31) ^ [_icon hash];
  }
  hash = (hash * 31) ^ _ownersIsSet ? 2654435761 : 0;
  if (_ownersIsSet)
  {
    hash = (hash * 31) ^ [_owners hash];
  }
  hash = (hash * 31) ^ _applicationDescriptionIsSet ? 2654435761 : 0;
  if (_applicationDescriptionIsSet)
  {
    hash = (hash * 31) ^ [_applicationDescription hash];
  }
  hash = (hash * 31) ^ _tierIsSet ? 2654435761 : 0;
  if (_tierIsSet)
  {
    hash = (hash * 31) ^ [@(_tier) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_ProvisionApplicationRequest class]]) {
    return NO;
  }
  AromaService_ProvisionApplicationRequest *other = (AromaService_ProvisionApplicationRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  if ((_applicationNameIsSet != other->_applicationNameIsSet) ||
      (_applicationNameIsSet && ((_applicationName || other->_applicationName) && ![_applicationName isEqual:other->_applicationName]))) {
    return NO;
  }
  if ((_programmingLanguageIsSet != other->_programmingLanguageIsSet) ||
      (_programmingLanguageIsSet && (_programmingLanguage != other->_programmingLanguage))) {
    return NO;
  }
  if ((_organizationIdIsSet != other->_organizationIdIsSet) ||
      (_organizationIdIsSet && ((_organizationId || other->_organizationId) && ![_organizationId isEqual:other->_organizationId]))) {
    return NO;
  }
  if ((_iconIsSet != other->_iconIsSet) ||
      (_iconIsSet && ((_icon || other->_icon) && ![_icon isEqual:other->_icon]))) {
    return NO;
  }
  if ((_ownersIsSet != other->_ownersIsSet) ||
      (_ownersIsSet && ((_owners || other->_owners) && ![_owners isEqual:other->_owners]))) {
    return NO;
  }
  if ((_applicationDescriptionIsSet != other->_applicationDescriptionIsSet) ||
      (_applicationDescriptionIsSet && ((_applicationDescription || other->_applicationDescription) && ![_applicationDescription isEqual:other->_applicationDescription]))) {
    return NO;
  }
  if ((_tierIsSet != other->_tierIsSet) ||
      (_tierIsSet && (_tier != other->_tier))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_ProvisionApplicationRequest * val = [AromaService_ProvisionApplicationRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  if (_applicationNameIsSet)
  {
    val.applicationName = [self.applicationName copy];
  }
  if (_programmingLanguageIsSet)
  {
    val.programmingLanguage = self.programmingLanguage;
  }
  if (_organizationIdIsSet)
  {
    val.organizationId = [self.organizationId copy];
  }
  if (_iconIsSet)
  {
    val.icon = [self.icon copy];
  }
  if (_ownersIsSet)
  {
    val.owners = [self.owners copy];
  }
  if (_applicationDescriptionIsSet)
  {
    val.applicationDescription = [self.applicationDescription copy];
  }
  if (_tierIsSet)
  {
    val.tier = self.tier;
  }
  return val;
}

- (void) setToken: (AromaAuthentication_UserToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (void) setApplicationName: (NSString *) applicationName {
  _applicationName = applicationName;
  _applicationNameIsSet = YES;
}

- (void) unsetApplicationName {
  _applicationName = nil;
  _applicationNameIsSet = NO;
}

- (void) setProgrammingLanguage: (AromaService_ProgrammingLanguage) programmingLanguage {
  _programmingLanguage = programmingLanguage;
  _programmingLanguageIsSet = YES;
}

- (void) unsetProgrammingLanguage {
  _programmingLanguageIsSet = NO;
}

- (void) setOrganizationId: (NSString *) organizationId {
  _organizationId = organizationId;
  _organizationIdIsSet = YES;
}

- (void) unsetOrganizationId {
  _organizationId = nil;
  _organizationIdIsSet = NO;
}

- (void) setIcon: (Aroma_Image *) icon {
  _icon = icon;
  _iconIsSet = YES;
}

- (void) unsetIcon {
  _icon = nil;
  _iconIsSet = NO;
}

- (void) setOwners: (NSMutableSet<AromaService_uuid> *) owners {
  _owners = owners;
  _ownersIsSet = YES;
}

- (void) unsetOwners {
  _owners = nil;
  _ownersIsSet = NO;
}

- (void) setApplicationDescription: (NSString *) applicationDescription {
  _applicationDescription = applicationDescription;
  _applicationDescriptionIsSet = YES;
}

- (void) unsetApplicationDescription {
  _applicationDescription = nil;
  _applicationDescriptionIsSet = NO;
}

- (void) setTier: (AromaService_Tier) tier {
  _tier = tier;
  _tierIsSet = YES;
}

- (void) unsetTier {
  _tierIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.applicationName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeI32) {
          AromaService_ProgrammingLanguage fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.programmingLanguage = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.organizationId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          Aroma_Image *fieldValue = [[Aroma_Image alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.icon = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeSET) {
          SInt32 _size5;
          if (![inProtocol readSetBeginReturningElementType: NULL size: &_size5 error: __thriftError]) return NO;
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            NSString * _elem7;
            if (![inProtocol readString:&_elem7 error: __thriftError]) return NO;
            [fieldValue addObject: _elem7];
          }
          if (![inProtocol readSetEnd: __thriftError]) return NO;
          self.owners = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 7:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.applicationDescription = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 8:
        if (fieldType == TTypeI32) {
          AromaService_Tier fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.tier = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ProvisionApplicationRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationNameIsSet) {
    if (_applicationName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationName" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _applicationName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_programmingLanguageIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"programmingLanguage" type: TTypeI32 fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _programmingLanguage error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_organizationIdIsSet) {
    if (_organizationId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"organizationId" type: TTypeSTRING fieldID: 4 error: __thriftError]) return NO;
      if (![outProtocol writeString: _organizationId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_iconIsSet) {
    if (_icon != nil) {
      if (![outProtocol writeFieldBeginWithName: @"icon" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_icon write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_ownersIsSet) {
    if (_owners != nil) {
      if (![outProtocol writeFieldBeginWithName: @"owners" type: TTypeSET fieldID: 6 error: __thriftError]) return NO;
      {
        if (![outProtocol writeSetBeginWithElementType: TTypeSTRING size: (SInt32)[_owners count] error: __thriftError]) return NO;
        NSEnumerator * _iter8 = [_owners objectEnumerator];
        id obj9;
        while ((obj9 = [_iter8 nextObject]))
        {
          if (![outProtocol writeString: obj9 error: __thriftError]) return NO;
        }
        if (![outProtocol writeSetEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationDescriptionIsSet) {
    if (_applicationDescription != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationDescription" type: TTypeSTRING fieldID: 7 error: __thriftError]) return NO;
      if (![outProtocol writeString: _applicationDescription error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_tierIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"tier" type: TTypeI32 fieldID: 8 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _tier error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_ProvisionApplicationRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @",applicationName:"];
  [ms appendFormat: @"\"%@\"", _applicationName];
  [ms appendString: @",programmingLanguage:"];
  [ms appendFormat: @"%i", (int)_programmingLanguage];
  [ms appendString: @",organizationId:"];
  [ms appendFormat: @"\"%@\"", _organizationId];
  [ms appendString: @",icon:"];
  [ms appendFormat: @"%@", _icon];
  [ms appendString: @",owners:"];
  [ms appendFormat: @"%@", _owners];
  [ms appendString: @",applicationDescription:"];
  [ms appendFormat: @"\"%@\"", _applicationDescription];
  [ms appendString: @",tier:"];
  [ms appendFormat: @"%i", (int)_tier];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_ProvisionApplicationResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithApplicationToken: (AromaService_ApplicationToken) applicationToken applicationInfo: (AromaService_Application) applicationInfo
{
  self = [super init];
  if (self)  {
    _applicationToken = applicationToken;
    _applicationTokenIsSet = YES;
    _applicationInfo = applicationInfo;
    _applicationInfoIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"applicationToken"])
    {
      _applicationToken = [decoder decodeObjectForKey: @"applicationToken"];
      _applicationTokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationInfo"])
    {
      _applicationInfo = [decoder decodeObjectForKey: @"applicationInfo"];
      _applicationInfoIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_applicationTokenIsSet)
  {
    [encoder encodeObject: _applicationToken forKey: @"applicationToken"];
  }
  if (_applicationInfoIsSet)
  {
    [encoder encodeObject: _applicationInfo forKey: @"applicationInfo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _applicationTokenIsSet ? 2654435761 : 0;
  if (_applicationTokenIsSet)
  {
    hash = (hash * 31) ^ [_applicationToken hash];
  }
  hash = (hash * 31) ^ _applicationInfoIsSet ? 2654435761 : 0;
  if (_applicationInfoIsSet)
  {
    hash = (hash * 31) ^ [_applicationInfo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_ProvisionApplicationResponse class]]) {
    return NO;
  }
  AromaService_ProvisionApplicationResponse *other = (AromaService_ProvisionApplicationResponse *)anObject;
  if ((_applicationTokenIsSet != other->_applicationTokenIsSet) ||
      (_applicationTokenIsSet && ((_applicationToken || other->_applicationToken) && ![_applicationToken isEqual:other->_applicationToken]))) {
    return NO;
  }
  if ((_applicationInfoIsSet != other->_applicationInfoIsSet) ||
      (_applicationInfoIsSet && ((_applicationInfo || other->_applicationInfo) && ![_applicationInfo isEqual:other->_applicationInfo]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_ProvisionApplicationResponse * val = [AromaService_ProvisionApplicationResponse new];
  if (_applicationTokenIsSet)
  {
    val.applicationToken = [self.applicationToken copy];
  }
  if (_applicationInfoIsSet)
  {
    val.applicationInfo = [self.applicationInfo copy];
  }
  return val;
}

- (void) setApplicationToken: (AromaAuthentication_ApplicationToken *) applicationToken {
  _applicationToken = applicationToken;
  _applicationTokenIsSet = YES;
}

- (void) unsetApplicationToken {
  _applicationToken = nil;
  _applicationTokenIsSet = NO;
}

- (void) setApplicationInfo: (Aroma_Application *) applicationInfo {
  _applicationInfo = applicationInfo;
  _applicationInfoIsSet = YES;
}

- (void) unsetApplicationInfo {
  _applicationInfo = nil;
  _applicationInfoIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_ApplicationToken *fieldValue = [[AromaAuthentication_ApplicationToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.applicationToken = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          Aroma_Application *fieldValue = [[Aroma_Application alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.applicationInfo = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ProvisionApplicationResponse" error: __thriftError]) return NO;
  if (_applicationTokenIsSet) {
    if (_applicationToken != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationToken" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_applicationToken write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationInfoIsSet) {
    if (_applicationInfo != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationInfo" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_applicationInfo write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_ProvisionApplicationResponse("];
  [ms appendString: @"applicationToken:"];
  [ms appendFormat: @"%@", _applicationToken];
  [ms appendString: @",applicationInfo:"];
  [ms appendFormat: @"%@", _applicationInfo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_DeleteApplicationRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithToken: (AromaService_UserToken) token applicationId: (AromaService_uuid) applicationId
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
    _applicationId = applicationId;
    _applicationIdIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationId"])
    {
      _applicationId = [decoder decodeObjectForKey: @"applicationId"];
      _applicationIdIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
  if (_applicationIdIsSet)
  {
    [encoder encodeObject: _applicationId forKey: @"applicationId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  hash = (hash * 31) ^ _applicationIdIsSet ? 2654435761 : 0;
  if (_applicationIdIsSet)
  {
    hash = (hash * 31) ^ [_applicationId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_DeleteApplicationRequest class]]) {
    return NO;
  }
  AromaService_DeleteApplicationRequest *other = (AromaService_DeleteApplicationRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  if ((_applicationIdIsSet != other->_applicationIdIsSet) ||
      (_applicationIdIsSet && ((_applicationId || other->_applicationId) && ![_applicationId isEqual:other->_applicationId]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_DeleteApplicationRequest * val = [AromaService_DeleteApplicationRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  if (_applicationIdIsSet)
  {
    val.applicationId = [self.applicationId copy];
  }
  return val;
}

- (void) setToken: (AromaAuthentication_UserToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (void) setApplicationId: (NSString *) applicationId {
  _applicationId = applicationId;
  _applicationIdIsSet = YES;
}

- (void) unsetApplicationId {
  _applicationId = nil;
  _applicationIdIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.applicationId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"DeleteApplicationRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationIdIsSet) {
    if (_applicationId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationId" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _applicationId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_DeleteApplicationRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", _applicationId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_DeleteApplicationResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.message = @"Success";

  }
  return self;
}

- (instancetype) initWithMessage: (NSString *) message
{
  self = [super init];
  if (self)  {
    _message = message;
    _messageIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"message"])
    {
      _message = [decoder decodeObjectForKey: @"message"];
      _messageIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_messageIsSet)
  {
    [encoder encodeObject: _message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _messageIsSet ? 2654435761 : 0;
  if (_messageIsSet)
  {
    hash = (hash * 31) ^ [_message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_DeleteApplicationResponse class]]) {
    return NO;
  }
  AromaService_DeleteApplicationResponse *other = (AromaService_DeleteApplicationResponse *)anObject;
  if ((_messageIsSet != other->_messageIsSet) ||
      (_messageIsSet && ((_message || other->_message) && ![_message isEqual:other->_message]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_DeleteApplicationResponse * val = [AromaService_DeleteApplicationResponse new];
  if (_messageIsSet)
  {
    val.message = [self.message copy];
  }
  return val;
}

- (void) setMessage: (NSString *) message {
  _message = message;
  _messageIsSet = YES;
}

- (void) unsetMessage {
  _message = nil;
  _messageIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.message = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"DeleteApplicationResponse" error: __thriftError]) return NO;
  if (_messageIsSet) {
    if (_message != nil) {
      if (![outProtocol writeFieldBeginWithName: @"message" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _message error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_DeleteApplicationResponse("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", _message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_UpdateApplicationRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithToken: (AromaService_UserToken) token updatedApplication: (AromaService_Application) updatedApplication
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
    _updatedApplication = updatedApplication;
    _updatedApplicationIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"updatedApplication"])
    {
      _updatedApplication = [decoder decodeObjectForKey: @"updatedApplication"];
      _updatedApplicationIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
  if (_updatedApplicationIsSet)
  {
    [encoder encodeObject: _updatedApplication forKey: @"updatedApplication"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  hash = (hash * 31) ^ _updatedApplicationIsSet ? 2654435761 : 0;
  if (_updatedApplicationIsSet)
  {
    hash = (hash * 31) ^ [_updatedApplication hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_UpdateApplicationRequest class]]) {
    return NO;
  }
  AromaService_UpdateApplicationRequest *other = (AromaService_UpdateApplicationRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  if ((_updatedApplicationIsSet != other->_updatedApplicationIsSet) ||
      (_updatedApplicationIsSet && ((_updatedApplication || other->_updatedApplication) && ![_updatedApplication isEqual:other->_updatedApplication]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_UpdateApplicationRequest * val = [AromaService_UpdateApplicationRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  if (_updatedApplicationIsSet)
  {
    val.updatedApplication = [self.updatedApplication copy];
  }
  return val;
}

- (void) setToken: (AromaAuthentication_UserToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (void) setUpdatedApplication: (Aroma_Application *) updatedApplication {
  _updatedApplication = updatedApplication;
  _updatedApplicationIsSet = YES;
}

- (void) unsetUpdatedApplication {
  _updatedApplication = nil;
  _updatedApplicationIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          Aroma_Application *fieldValue = [[Aroma_Application alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.updatedApplication = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UpdateApplicationRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_updatedApplicationIsSet) {
    if (_updatedApplication != nil) {
      if (![outProtocol writeFieldBeginWithName: @"updatedApplication" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_updatedApplication write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_UpdateApplicationRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @",updatedApplication:"];
  [ms appendFormat: @"%@", _updatedApplication];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_UpdateApplicationResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithApplication: (AromaService_Application) application
{
  self = [super init];
  if (self)  {
    _application = application;
    _applicationIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"application"])
    {
      _application = [decoder decodeObjectForKey: @"application"];
      _applicationIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_applicationIsSet)
  {
    [encoder encodeObject: _application forKey: @"application"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _applicationIsSet ? 2654435761 : 0;
  if (_applicationIsSet)
  {
    hash = (hash * 31) ^ [_application hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_UpdateApplicationResponse class]]) {
    return NO;
  }
  AromaService_UpdateApplicationResponse *other = (AromaService_UpdateApplicationResponse *)anObject;
  if ((_applicationIsSet != other->_applicationIsSet) ||
      (_applicationIsSet && ((_application || other->_application) && ![_application isEqual:other->_application]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_UpdateApplicationResponse * val = [AromaService_UpdateApplicationResponse new];
  if (_applicationIsSet)
  {
    val.application = [self.application copy];
  }
  return val;
}

- (void) setApplication: (Aroma_Application *) application {
  _application = application;
  _applicationIsSet = YES;
}

- (void) unsetApplication {
  _application = nil;
  _applicationIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          Aroma_Application *fieldValue = [[Aroma_Application alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.application = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UpdateApplicationResponse" error: __thriftError]) return NO;
  if (_applicationIsSet) {
    if (_application != nil) {
      if (![outProtocol writeFieldBeginWithName: @"application" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_application write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_UpdateApplicationResponse("];
  [ms appendString: @"application:"];
  [ms appendFormat: @"%@", _application];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_SearchForApplicationsRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithToken: (AromaService_UserToken) token applicationName: (NSString *) applicationName organizationId: (AromaService_uuid) organizationId
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
    _applicationName = applicationName;
    _applicationNameIsSet = YES;
    _organizationId = organizationId;
    _organizationIdIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationName"])
    {
      _applicationName = [decoder decodeObjectForKey: @"applicationName"];
      _applicationNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"organizationId"])
    {
      _organizationId = [decoder decodeObjectForKey: @"organizationId"];
      _organizationIdIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
  if (_applicationNameIsSet)
  {
    [encoder encodeObject: _applicationName forKey: @"applicationName"];
  }
  if (_organizationIdIsSet)
  {
    [encoder encodeObject: _organizationId forKey: @"organizationId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  hash = (hash * 31) ^ _applicationNameIsSet ? 2654435761 : 0;
  if (_applicationNameIsSet)
  {
    hash = (hash * 31) ^ [_applicationName hash];
  }
  hash = (hash * 31) ^ _organizationIdIsSet ? 2654435761 : 0;
  if (_organizationIdIsSet)
  {
    hash = (hash * 31) ^ [_organizationId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_SearchForApplicationsRequest class]]) {
    return NO;
  }
  AromaService_SearchForApplicationsRequest *other = (AromaService_SearchForApplicationsRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  if ((_applicationNameIsSet != other->_applicationNameIsSet) ||
      (_applicationNameIsSet && ((_applicationName || other->_applicationName) && ![_applicationName isEqual:other->_applicationName]))) {
    return NO;
  }
  if ((_organizationIdIsSet != other->_organizationIdIsSet) ||
      (_organizationIdIsSet && ((_organizationId || other->_organizationId) && ![_organizationId isEqual:other->_organizationId]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_SearchForApplicationsRequest * val = [AromaService_SearchForApplicationsRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  if (_applicationNameIsSet)
  {
    val.applicationName = [self.applicationName copy];
  }
  if (_organizationIdIsSet)
  {
    val.organizationId = [self.organizationId copy];
  }
  return val;
}

- (void) setToken: (AromaAuthentication_UserToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (void) setApplicationName: (NSString *) applicationName {
  _applicationName = applicationName;
  _applicationNameIsSet = YES;
}

- (void) unsetApplicationName {
  _applicationName = nil;
  _applicationNameIsSet = NO;
}

- (void) setOrganizationId: (NSString *) organizationId {
  _organizationId = organizationId;
  _organizationIdIsSet = YES;
}

- (void) unsetOrganizationId {
  _organizationId = nil;
  _organizationIdIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.applicationName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.organizationId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"SearchForApplicationsRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationNameIsSet) {
    if (_applicationName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationName" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _applicationName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_organizationIdIsSet) {
    if (_organizationId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"organizationId" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _organizationId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_SearchForApplicationsRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @",applicationName:"];
  [ms appendFormat: @"\"%@\"", _applicationName];
  [ms appendString: @",organizationId:"];
  [ms appendFormat: @"\"%@\"", _organizationId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_SearchForApplicationsResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.applications = @[]  }
  return self;
}

- (instancetype) initWithApplications: (NSArray<AromaService_Application> *) applications
{
  self = [super init];
  if (self)  {
    _applications = [applications mutableCopy];
    _applicationsIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"applications"])
    {
      _applications = [decoder decodeObjectForKey: @"applications"];
      _applicationsIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_applicationsIsSet)
  {
    [encoder encodeObject: _applications forKey: @"applications"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _applicationsIsSet ? 2654435761 : 0;
  if (_applicationsIsSet)
  {
    hash = (hash * 31) ^ [_applications hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_SearchForApplicationsResponse class]]) {
    return NO;
  }
  AromaService_SearchForApplicationsResponse *other = (AromaService_SearchForApplicationsResponse *)anObject;
  if ((_applicationsIsSet != other->_applicationsIsSet) ||
      (_applicationsIsSet && ((_applications || other->_applications) && ![_applications isEqual:other->_applications]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_SearchForApplicationsResponse * val = [AromaService_SearchForApplicationsResponse new];
  if (_applicationsIsSet)
  {
    val.applications = [self.applications copy];
  }
  return val;
}

- (void) setApplications: (NSMutableArray<AromaService_Application> *) applications {
  _applications = applications;
  _applicationsIsSet = YES;
}

- (void) unsetApplications {
  _applications = nil;
  _applicationsIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeLIST) {
          SInt32 _size10;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size10 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            Aroma_Application *_elem12 = [[Aroma_Application alloc] init];
            if (![_elem12 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem12];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.applications = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"SearchForApplicationsResponse" error: __thriftError]) return NO;
  if (_applicationsIsSet) {
    if (_applications != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applications" type: TTypeLIST fieldID: 1 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_applications count] error: __thriftError]) return NO;
        int idx14;
        for (idx14 = 0; idx14 < [_applications count]; idx14++)
        {
          if (![[_applications objectAtIndex: idx14] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_SearchForApplicationsResponse("];
  [ms appendString: @"applications:"];
  [ms appendFormat: @"%@", _applications];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_RecreateApplicationTokenRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithToken: (AromaService_UserToken) token applicationId: (AromaService_uuid) applicationId
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
    _applicationId = applicationId;
    _applicationIdIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationId"])
    {
      _applicationId = [decoder decodeObjectForKey: @"applicationId"];
      _applicationIdIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
  if (_applicationIdIsSet)
  {
    [encoder encodeObject: _applicationId forKey: @"applicationId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  hash = (hash * 31) ^ _applicationIdIsSet ? 2654435761 : 0;
  if (_applicationIdIsSet)
  {
    hash = (hash * 31) ^ [_applicationId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_RecreateApplicationTokenRequest class]]) {
    return NO;
  }
  AromaService_RecreateApplicationTokenRequest *other = (AromaService_RecreateApplicationTokenRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  if ((_applicationIdIsSet != other->_applicationIdIsSet) ||
      (_applicationIdIsSet && ((_applicationId || other->_applicationId) && ![_applicationId isEqual:other->_applicationId]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_RecreateApplicationTokenRequest * val = [AromaService_RecreateApplicationTokenRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  if (_applicationIdIsSet)
  {
    val.applicationId = [self.applicationId copy];
  }
  return val;
}

- (void) setToken: (AromaAuthentication_UserToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (void) setApplicationId: (NSString *) applicationId {
  _applicationId = applicationId;
  _applicationIdIsSet = YES;
}

- (void) unsetApplicationId {
  _applicationId = nil;
  _applicationIdIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.applicationId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"RecreateApplicationTokenRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationIdIsSet) {
    if (_applicationId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationId" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _applicationId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_RecreateApplicationTokenRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", _applicationId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_RecreateApplicationTokenResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithApplicationToken: (AromaService_ApplicationToken) applicationToken
{
  self = [super init];
  if (self)  {
    _applicationToken = applicationToken;
    _applicationTokenIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"applicationToken"])
    {
      _applicationToken = [decoder decodeObjectForKey: @"applicationToken"];
      _applicationTokenIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_applicationTokenIsSet)
  {
    [encoder encodeObject: _applicationToken forKey: @"applicationToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _applicationTokenIsSet ? 2654435761 : 0;
  if (_applicationTokenIsSet)
  {
    hash = (hash * 31) ^ [_applicationToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_RecreateApplicationTokenResponse class]]) {
    return NO;
  }
  AromaService_RecreateApplicationTokenResponse *other = (AromaService_RecreateApplicationTokenResponse *)anObject;
  if ((_applicationTokenIsSet != other->_applicationTokenIsSet) ||
      (_applicationTokenIsSet && ((_applicationToken || other->_applicationToken) && ![_applicationToken isEqual:other->_applicationToken]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_RecreateApplicationTokenResponse * val = [AromaService_RecreateApplicationTokenResponse new];
  if (_applicationTokenIsSet)
  {
    val.applicationToken = [self.applicationToken copy];
  }
  return val;
}

- (void) setApplicationToken: (AromaAuthentication_ApplicationToken *) applicationToken {
  _applicationToken = applicationToken;
  _applicationTokenIsSet = YES;
}

- (void) unsetApplicationToken {
  _applicationToken = nil;
  _applicationTokenIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_ApplicationToken *fieldValue = [[AromaAuthentication_ApplicationToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.applicationToken = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"RecreateApplicationTokenResponse" error: __thriftError]) return NO;
  if (_applicationTokenIsSet) {
    if (_applicationToken != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationToken" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_applicationToken write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_RecreateApplicationTokenResponse("];
  [ms appendString: @"applicationToken:"];
  [ms appendFormat: @"%@", _applicationToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_RenewApplicationTokenRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithToken: (AromaService_UserToken) token newLifetime: (Aroma_LengthOfTime *) newLifetime applicationId: (AromaService_uuid) applicationId
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
    _newLifetime = newLifetime;
    _newLifetimeIsSet = YES;
    _applicationId = applicationId;
    _applicationIdIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"newLifetime"])
    {
      _newLifetime = [decoder decodeObjectForKey: @"newLifetime"];
      _newLifetimeIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationId"])
    {
      _applicationId = [decoder decodeObjectForKey: @"applicationId"];
      _applicationIdIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
  if (_newLifetimeIsSet)
  {
    [encoder encodeObject: _newLifetime forKey: @"newLifetime"];
  }
  if (_applicationIdIsSet)
  {
    [encoder encodeObject: _applicationId forKey: @"applicationId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  hash = (hash * 31) ^ _newLifetimeIsSet ? 2654435761 : 0;
  if (_newLifetimeIsSet)
  {
    hash = (hash * 31) ^ [_newLifetime hash];
  }
  hash = (hash * 31) ^ _applicationIdIsSet ? 2654435761 : 0;
  if (_applicationIdIsSet)
  {
    hash = (hash * 31) ^ [_applicationId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_RenewApplicationTokenRequest class]]) {
    return NO;
  }
  AromaService_RenewApplicationTokenRequest *other = (AromaService_RenewApplicationTokenRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  if ((_newLifetimeIsSet != other->_newLifetimeIsSet) ||
      (_newLifetimeIsSet && ((_newLifetime || other->_newLifetime) && ![_newLifetime isEqual:other->_newLifetime]))) {
    return NO;
  }
  if ((_applicationIdIsSet != other->_applicationIdIsSet) ||
      (_applicationIdIsSet && ((_applicationId || other->_applicationId) && ![_applicationId isEqual:other->_applicationId]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_RenewApplicationTokenRequest * val = [AromaService_RenewApplicationTokenRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  if (_newLifetimeIsSet)
  {
    val.newLifetime = [self.newLifetime copy];
  }
  if (_applicationIdIsSet)
  {
    val.applicationId = [self.applicationId copy];
  }
  return val;
}

- (void) setToken: (AromaAuthentication_UserToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (void) setNewLifetime: (Aroma_LengthOfTime *) newLifetime {
  _newLifetime = newLifetime;
  _newLifetimeIsSet = YES;
}

- (void) unsetNewLifetime {
  _newLifetime = nil;
  _newLifetimeIsSet = NO;
}

- (void) setApplicationId: (NSString *) applicationId {
  _applicationId = applicationId;
  _applicationIdIsSet = YES;
}

- (void) unsetApplicationId {
  _applicationId = nil;
  _applicationIdIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          Aroma_LengthOfTime *fieldValue = [[Aroma_LengthOfTime alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.newLifetime = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.applicationId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"RenewApplicationTokenRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_newLifetimeIsSet) {
    if (_newLifetime != nil) {
      if (![outProtocol writeFieldBeginWithName: @"newLifetime" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_newLifetime write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationIdIsSet) {
    if (_applicationId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationId" type: TTypeSTRING fieldID: 4 error: __thriftError]) return NO;
      if (![outProtocol writeString: _applicationId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_RenewApplicationTokenRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @",newLifetime:"];
  [ms appendFormat: @"%@", _newLifetime];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", _applicationId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_RenewApplicationTokenResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithApplicationToken: (AromaService_ApplicationToken) applicationToken
{
  self = [super init];
  if (self)  {
    _applicationToken = applicationToken;
    _applicationTokenIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"applicationToken"])
    {
      _applicationToken = [decoder decodeObjectForKey: @"applicationToken"];
      _applicationTokenIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_applicationTokenIsSet)
  {
    [encoder encodeObject: _applicationToken forKey: @"applicationToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _applicationTokenIsSet ? 2654435761 : 0;
  if (_applicationTokenIsSet)
  {
    hash = (hash * 31) ^ [_applicationToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_RenewApplicationTokenResponse class]]) {
    return NO;
  }
  AromaService_RenewApplicationTokenResponse *other = (AromaService_RenewApplicationTokenResponse *)anObject;
  if ((_applicationTokenIsSet != other->_applicationTokenIsSet) ||
      (_applicationTokenIsSet && ((_applicationToken || other->_applicationToken) && ![_applicationToken isEqual:other->_applicationToken]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_RenewApplicationTokenResponse * val = [AromaService_RenewApplicationTokenResponse new];
  if (_applicationTokenIsSet)
  {
    val.applicationToken = [self.applicationToken copy];
  }
  return val;
}

- (void) setApplicationToken: (AromaAuthentication_ApplicationToken *) applicationToken {
  _applicationToken = applicationToken;
  _applicationTokenIsSet = YES;
}

- (void) unsetApplicationToken {
  _applicationToken = nil;
  _applicationTokenIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_ApplicationToken *fieldValue = [[AromaAuthentication_ApplicationToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.applicationToken = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"RenewApplicationTokenResponse" error: __thriftError]) return NO;
  if (_applicationTokenIsSet) {
    if (_applicationToken != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationToken" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_applicationToken write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_RenewApplicationTokenResponse("];
  [ms appendString: @"applicationToken:"];
  [ms appendFormat: @"%@", _applicationToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_GetApplicationsFollowedByRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithToken: (AromaService_UserToken) token userId: (AromaService_uuid) userId
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
    _userId = userId;
    _userIdIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"userId"])
    {
      _userId = [decoder decodeObjectForKey: @"userId"];
      _userIdIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
  if (_userIdIsSet)
  {
    [encoder encodeObject: _userId forKey: @"userId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  hash = (hash * 31) ^ _userIdIsSet ? 2654435761 : 0;
  if (_userIdIsSet)
  {
    hash = (hash * 31) ^ [_userId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_GetApplicationsFollowedByRequest class]]) {
    return NO;
  }
  AromaService_GetApplicationsFollowedByRequest *other = (AromaService_GetApplicationsFollowedByRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  if ((_userIdIsSet != other->_userIdIsSet) ||
      (_userIdIsSet && ((_userId || other->_userId) && ![_userId isEqual:other->_userId]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_GetApplicationsFollowedByRequest * val = [AromaService_GetApplicationsFollowedByRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  if (_userIdIsSet)
  {
    val.userId = [self.userId copy];
  }
  return val;
}

- (void) setToken: (AromaAuthentication_UserToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (void) setUserId: (NSString *) userId {
  _userId = userId;
  _userIdIsSet = YES;
}

- (void) unsetUserId {
  _userId = nil;
  _userIdIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.userId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GetApplicationsFollowedByRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_userIdIsSet) {
    if (_userId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _userId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_GetApplicationsFollowedByRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @",userId:"];
  [ms appendFormat: @"\"%@\"", _userId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_GetApplicationsFollowedByResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.applications = @[]  }
  return self;
}

- (instancetype) initWithApplications: (NSArray<AromaService_Application> *) applications
{
  self = [super init];
  if (self)  {
    _applications = [applications mutableCopy];
    _applicationsIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"applications"])
    {
      _applications = [decoder decodeObjectForKey: @"applications"];
      _applicationsIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_applicationsIsSet)
  {
    [encoder encodeObject: _applications forKey: @"applications"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _applicationsIsSet ? 2654435761 : 0;
  if (_applicationsIsSet)
  {
    hash = (hash * 31) ^ [_applications hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_GetApplicationsFollowedByResponse class]]) {
    return NO;
  }
  AromaService_GetApplicationsFollowedByResponse *other = (AromaService_GetApplicationsFollowedByResponse *)anObject;
  if ((_applicationsIsSet != other->_applicationsIsSet) ||
      (_applicationsIsSet && ((_applications || other->_applications) && ![_applications isEqual:other->_applications]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_GetApplicationsFollowedByResponse * val = [AromaService_GetApplicationsFollowedByResponse new];
  if (_applicationsIsSet)
  {
    val.applications = [self.applications copy];
  }
  return val;
}

- (void) setApplications: (NSMutableArray<AromaService_Application> *) applications {
  _applications = applications;
  _applicationsIsSet = YES;
}

- (void) unsetApplications {
  _applications = nil;
  _applicationsIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeLIST) {
          SInt32 _size15;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size15 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            Aroma_Application *_elem17 = [[Aroma_Application alloc] init];
            if (![_elem17 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem17];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.applications = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GetApplicationsFollowedByResponse" error: __thriftError]) return NO;
  if (_applicationsIsSet) {
    if (_applications != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applications" type: TTypeLIST fieldID: 1 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_applications count] error: __thriftError]) return NO;
        int idx19;
        for (idx19 = 0; idx19 < [_applications count]; idx19++)
        {
          if (![[_applications objectAtIndex: idx19] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_GetApplicationsFollowedByResponse("];
  [ms appendString: @"applications:"];
  [ms appendFormat: @"%@", _applications];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_FollowApplicationRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithToken: (AromaService_UserToken) token applicationId: (AromaService_uuid) applicationId organizationId: (AromaService_uuid) organizationId
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
    _applicationId = applicationId;
    _applicationIdIsSet = YES;
    _organizationId = organizationId;
    _organizationIdIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationId"])
    {
      _applicationId = [decoder decodeObjectForKey: @"applicationId"];
      _applicationIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"organizationId"])
    {
      _organizationId = [decoder decodeObjectForKey: @"organizationId"];
      _organizationIdIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
  if (_applicationIdIsSet)
  {
    [encoder encodeObject: _applicationId forKey: @"applicationId"];
  }
  if (_organizationIdIsSet)
  {
    [encoder encodeObject: _organizationId forKey: @"organizationId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  hash = (hash * 31) ^ _applicationIdIsSet ? 2654435761 : 0;
  if (_applicationIdIsSet)
  {
    hash = (hash * 31) ^ [_applicationId hash];
  }
  hash = (hash * 31) ^ _organizationIdIsSet ? 2654435761 : 0;
  if (_organizationIdIsSet)
  {
    hash = (hash * 31) ^ [_organizationId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_FollowApplicationRequest class]]) {
    return NO;
  }
  AromaService_FollowApplicationRequest *other = (AromaService_FollowApplicationRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  if ((_applicationIdIsSet != other->_applicationIdIsSet) ||
      (_applicationIdIsSet && ((_applicationId || other->_applicationId) && ![_applicationId isEqual:other->_applicationId]))) {
    return NO;
  }
  if ((_organizationIdIsSet != other->_organizationIdIsSet) ||
      (_organizationIdIsSet && ((_organizationId || other->_organizationId) && ![_organizationId isEqual:other->_organizationId]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_FollowApplicationRequest * val = [AromaService_FollowApplicationRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  if (_applicationIdIsSet)
  {
    val.applicationId = [self.applicationId copy];
  }
  if (_organizationIdIsSet)
  {
    val.organizationId = [self.organizationId copy];
  }
  return val;
}

- (void) setToken: (AromaAuthentication_UserToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (void) setApplicationId: (NSString *) applicationId {
  _applicationId = applicationId;
  _applicationIdIsSet = YES;
}

- (void) unsetApplicationId {
  _applicationId = nil;
  _applicationIdIsSet = NO;
}

- (void) setOrganizationId: (NSString *) organizationId {
  _organizationId = organizationId;
  _organizationIdIsSet = YES;
}

- (void) unsetOrganizationId {
  _organizationId = nil;
  _organizationIdIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.applicationId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.organizationId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"FollowApplicationRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationIdIsSet) {
    if (_applicationId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationId" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _applicationId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_organizationIdIsSet) {
    if (_organizationId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"organizationId" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _organizationId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_FollowApplicationRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", _applicationId];
  [ms appendString: @",organizationId:"];
  [ms appendFormat: @"\"%@\"", _organizationId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_FollowApplicationResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.message = @"Success";

  }
  return self;
}

- (instancetype) initWithMessage: (NSString *) message
{
  self = [super init];
  if (self)  {
    _message = message;
    _messageIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"message"])
    {
      _message = [decoder decodeObjectForKey: @"message"];
      _messageIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_messageIsSet)
  {
    [encoder encodeObject: _message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _messageIsSet ? 2654435761 : 0;
  if (_messageIsSet)
  {
    hash = (hash * 31) ^ [_message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_FollowApplicationResponse class]]) {
    return NO;
  }
  AromaService_FollowApplicationResponse *other = (AromaService_FollowApplicationResponse *)anObject;
  if ((_messageIsSet != other->_messageIsSet) ||
      (_messageIsSet && ((_message || other->_message) && ![_message isEqual:other->_message]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_FollowApplicationResponse * val = [AromaService_FollowApplicationResponse new];
  if (_messageIsSet)
  {
    val.message = [self.message copy];
  }
  return val;
}

- (void) setMessage: (NSString *) message {
  _message = message;
  _messageIsSet = YES;
}

- (void) unsetMessage {
  _message = nil;
  _messageIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.message = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"FollowApplicationResponse" error: __thriftError]) return NO;
  if (_messageIsSet) {
    if (_message != nil) {
      if (![outProtocol writeFieldBeginWithName: @"message" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _message error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_FollowApplicationResponse("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", _message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_UnfollowApplicationRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithToken: (AromaService_UserToken) token applicationId: (AromaService_uuid) applicationId organizationId: (AromaService_uuid) organizationId
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
    _applicationId = applicationId;
    _applicationIdIsSet = YES;
    _organizationId = organizationId;
    _organizationIdIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationId"])
    {
      _applicationId = [decoder decodeObjectForKey: @"applicationId"];
      _applicationIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"organizationId"])
    {
      _organizationId = [decoder decodeObjectForKey: @"organizationId"];
      _organizationIdIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
  if (_applicationIdIsSet)
  {
    [encoder encodeObject: _applicationId forKey: @"applicationId"];
  }
  if (_organizationIdIsSet)
  {
    [encoder encodeObject: _organizationId forKey: @"organizationId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  hash = (hash * 31) ^ _applicationIdIsSet ? 2654435761 : 0;
  if (_applicationIdIsSet)
  {
    hash = (hash * 31) ^ [_applicationId hash];
  }
  hash = (hash * 31) ^ _organizationIdIsSet ? 2654435761 : 0;
  if (_organizationIdIsSet)
  {
    hash = (hash * 31) ^ [_organizationId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_UnfollowApplicationRequest class]]) {
    return NO;
  }
  AromaService_UnfollowApplicationRequest *other = (AromaService_UnfollowApplicationRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  if ((_applicationIdIsSet != other->_applicationIdIsSet) ||
      (_applicationIdIsSet && ((_applicationId || other->_applicationId) && ![_applicationId isEqual:other->_applicationId]))) {
    return NO;
  }
  if ((_organizationIdIsSet != other->_organizationIdIsSet) ||
      (_organizationIdIsSet && ((_organizationId || other->_organizationId) && ![_organizationId isEqual:other->_organizationId]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_UnfollowApplicationRequest * val = [AromaService_UnfollowApplicationRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  if (_applicationIdIsSet)
  {
    val.applicationId = [self.applicationId copy];
  }
  if (_organizationIdIsSet)
  {
    val.organizationId = [self.organizationId copy];
  }
  return val;
}

- (void) setToken: (AromaAuthentication_UserToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (void) setApplicationId: (NSString *) applicationId {
  _applicationId = applicationId;
  _applicationIdIsSet = YES;
}

- (void) unsetApplicationId {
  _applicationId = nil;
  _applicationIdIsSet = NO;
}

- (void) setOrganizationId: (NSString *) organizationId {
  _organizationId = organizationId;
  _organizationIdIsSet = YES;
}

- (void) unsetOrganizationId {
  _organizationId = nil;
  _organizationIdIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.applicationId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.organizationId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UnfollowApplicationRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationIdIsSet) {
    if (_applicationId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationId" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _applicationId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_organizationIdIsSet) {
    if (_organizationId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"organizationId" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _organizationId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_UnfollowApplicationRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", _applicationId];
  [ms appendString: @",organizationId:"];
  [ms appendFormat: @"\"%@\"", _organizationId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_UnfollowApplicationResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.message = @"Success";

  }
  return self;
}

- (instancetype) initWithMessage: (NSString *) message
{
  self = [super init];
  if (self)  {
    _message = message;
    _messageIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"message"])
    {
      _message = [decoder decodeObjectForKey: @"message"];
      _messageIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_messageIsSet)
  {
    [encoder encodeObject: _message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _messageIsSet ? 2654435761 : 0;
  if (_messageIsSet)
  {
    hash = (hash * 31) ^ [_message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_UnfollowApplicationResponse class]]) {
    return NO;
  }
  AromaService_UnfollowApplicationResponse *other = (AromaService_UnfollowApplicationResponse *)anObject;
  if ((_messageIsSet != other->_messageIsSet) ||
      (_messageIsSet && ((_message || other->_message) && ![_message isEqual:other->_message]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_UnfollowApplicationResponse * val = [AromaService_UnfollowApplicationResponse new];
  if (_messageIsSet)
  {
    val.message = [self.message copy];
  }
  return val;
}

- (void) setMessage: (NSString *) message {
  _message = message;
  _messageIsSet = YES;
}

- (void) unsetMessage {
  _message = nil;
  _messageIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.message = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UnfollowApplicationResponse" error: __thriftError]) return NO;
  if (_messageIsSet) {
    if (_message != nil) {
      if (![outProtocol writeFieldBeginWithName: @"message" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _message error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_UnfollowApplicationResponse("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", _message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_GetApplicationMessagesRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.limit = 0;

  }
  return self;
}

- (instancetype) initWithToken: (AromaService_UserToken) token applicationId: (AromaService_uuid) applicationId limit: (AromaService_int) limit
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
    _applicationId = applicationId;
    _applicationIdIsSet = YES;
    _limit = limit;
    _limitIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationId"])
    {
      _applicationId = [decoder decodeObjectForKey: @"applicationId"];
      _applicationIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"limit"])
    {
      _limit = [decoder decodeInt32ForKey: @"limit"];
      _limitIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
  if (_applicationIdIsSet)
  {
    [encoder encodeObject: _applicationId forKey: @"applicationId"];
  }
  if (_limitIsSet)
  {
    [encoder encodeInt32: _limit forKey: @"limit"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  hash = (hash * 31) ^ _applicationIdIsSet ? 2654435761 : 0;
  if (_applicationIdIsSet)
  {
    hash = (hash * 31) ^ [_applicationId hash];
  }
  hash = (hash * 31) ^ _limitIsSet ? 2654435761 : 0;
  if (_limitIsSet)
  {
    hash = (hash * 31) ^ [@(_limit) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_GetApplicationMessagesRequest class]]) {
    return NO;
  }
  AromaService_GetApplicationMessagesRequest *other = (AromaService_GetApplicationMessagesRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  if ((_applicationIdIsSet != other->_applicationIdIsSet) ||
      (_applicationIdIsSet && ((_applicationId || other->_applicationId) && ![_applicationId isEqual:other->_applicationId]))) {
    return NO;
  }
  if ((_limitIsSet != other->_limitIsSet) ||
      (_limitIsSet && (_limit != other->_limit))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_GetApplicationMessagesRequest * val = [AromaService_GetApplicationMessagesRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  if (_applicationIdIsSet)
  {
    val.applicationId = [self.applicationId copy];
  }
  if (_limitIsSet)
  {
    val.limit = self.limit;
  }
  return val;
}

- (void) setToken: (AromaAuthentication_UserToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (void) setApplicationId: (NSString *) applicationId {
  _applicationId = applicationId;
  _applicationIdIsSet = YES;
}

- (void) unsetApplicationId {
  _applicationId = nil;
  _applicationIdIsSet = NO;
}

- (void) setLimit: (SInt32) limit {
  _limit = limit;
  _limitIsSet = YES;
}

- (void) unsetLimit {
  _limitIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.applicationId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeI32) {
          SInt32 fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.limit = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GetApplicationMessagesRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationIdIsSet) {
    if (_applicationId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationId" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _applicationId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_limitIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"limit" type: TTypeI32 fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _limit error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_GetApplicationMessagesRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", _applicationId];
  [ms appendString: @",limit:"];
  [ms appendFormat: @"%i", (int)_limit];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_GetApplicationMessagesResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.messages = @[]    self.totalMessagesMatching = 0;

  }
  return self;
}

- (instancetype) initWithMessages: (NSArray<AromaService_Message *> *) messages totalMessagesMatching: (AromaService_int) totalMessagesMatching
{
  self = [super init];
  if (self)  {
    _messages = [messages mutableCopy];
    _messagesIsSet = YES;
    _totalMessagesMatching = totalMessagesMatching;
    _totalMessagesMatchingIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"messages"])
    {
      _messages = [decoder decodeObjectForKey: @"messages"];
      _messagesIsSet = YES;
    }
    if ([decoder containsValueForKey: @"totalMessagesMatching"])
    {
      _totalMessagesMatching = [decoder decodeInt32ForKey: @"totalMessagesMatching"];
      _totalMessagesMatchingIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_messagesIsSet)
  {
    [encoder encodeObject: _messages forKey: @"messages"];
  }
  if (_totalMessagesMatchingIsSet)
  {
    [encoder encodeInt32: _totalMessagesMatching forKey: @"totalMessagesMatching"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _messagesIsSet ? 2654435761 : 0;
  if (_messagesIsSet)
  {
    hash = (hash * 31) ^ [_messages hash];
  }
  hash = (hash * 31) ^ _totalMessagesMatchingIsSet ? 2654435761 : 0;
  if (_totalMessagesMatchingIsSet)
  {
    hash = (hash * 31) ^ [@(_totalMessagesMatching) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_GetApplicationMessagesResponse class]]) {
    return NO;
  }
  AromaService_GetApplicationMessagesResponse *other = (AromaService_GetApplicationMessagesResponse *)anObject;
  if ((_messagesIsSet != other->_messagesIsSet) ||
      (_messagesIsSet && ((_messages || other->_messages) && ![_messages isEqual:other->_messages]))) {
    return NO;
  }
  if ((_totalMessagesMatchingIsSet != other->_totalMessagesMatchingIsSet) ||
      (_totalMessagesMatchingIsSet && (_totalMessagesMatching != other->_totalMessagesMatching))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_GetApplicationMessagesResponse * val = [AromaService_GetApplicationMessagesResponse new];
  if (_messagesIsSet)
  {
    val.messages = [self.messages copy];
  }
  if (_totalMessagesMatchingIsSet)
  {
    val.totalMessagesMatching = self.totalMessagesMatching;
  }
  return val;
}

- (void) setMessages: (NSMutableArray<AromaService_Message *> *) messages {
  _messages = messages;
  _messagesIsSet = YES;
}

- (void) unsetMessages {
  _messages = nil;
  _messagesIsSet = NO;
}

- (void) setTotalMessagesMatching: (SInt32) totalMessagesMatching {
  _totalMessagesMatching = totalMessagesMatching;
  _totalMessagesMatchingIsSet = YES;
}

- (void) unsetTotalMessagesMatching {
  _totalMessagesMatchingIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeLIST) {
          SInt32 _size20;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size20 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size20];
          int _i21;
          for (_i21 = 0; _i21 < _size20; ++_i21)
          {
            Aroma_Message *_elem22 = [[Aroma_Message alloc] init];
            if (![_elem22 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem22];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.messages = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeI32) {
          SInt32 fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.totalMessagesMatching = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GetApplicationMessagesResponse" error: __thriftError]) return NO;
  if (_messagesIsSet) {
    if (_messages != nil) {
      if (![outProtocol writeFieldBeginWithName: @"messages" type: TTypeLIST fieldID: 1 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_messages count] error: __thriftError]) return NO;
        int idx24;
        for (idx24 = 0; idx24 < [_messages count]; idx24++)
        {
          if (![[_messages objectAtIndex: idx24] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_totalMessagesMatchingIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"totalMessagesMatching" type: TTypeI32 fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _totalMessagesMatching error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_GetApplicationMessagesResponse("];
  [ms appendString: @"messages:"];
  [ms appendFormat: @"%@", _messages];
  [ms appendString: @",totalMessagesMatching:"];
  [ms appendFormat: @"%i", (int)_totalMessagesMatching];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_GetFullMessageRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithToken: (AromaService_UserToken) token messageId: (AromaService_uuid) messageId applicationId: (AromaService_uuid) applicationId
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
    _messageId = messageId;
    _messageIdIsSet = YES;
    _applicationId = applicationId;
    _applicationIdIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"messageId"])
    {
      _messageId = [decoder decodeObjectForKey: @"messageId"];
      _messageIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationId"])
    {
      _applicationId = [decoder decodeObjectForKey: @"applicationId"];
      _applicationIdIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
  if (_messageIdIsSet)
  {
    [encoder encodeObject: _messageId forKey: @"messageId"];
  }
  if (_applicationIdIsSet)
  {
    [encoder encodeObject: _applicationId forKey: @"applicationId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  hash = (hash * 31) ^ _messageIdIsSet ? 2654435761 : 0;
  if (_messageIdIsSet)
  {
    hash = (hash * 31) ^ [_messageId hash];
  }
  hash = (hash * 31) ^ _applicationIdIsSet ? 2654435761 : 0;
  if (_applicationIdIsSet)
  {
    hash = (hash * 31) ^ [_applicationId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_GetFullMessageRequest class]]) {
    return NO;
  }
  AromaService_GetFullMessageRequest *other = (AromaService_GetFullMessageRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  if ((_messageIdIsSet != other->_messageIdIsSet) ||
      (_messageIdIsSet && ((_messageId || other->_messageId) && ![_messageId isEqual:other->_messageId]))) {
    return NO;
  }
  if ((_applicationIdIsSet != other->_applicationIdIsSet) ||
      (_applicationIdIsSet && ((_applicationId || other->_applicationId) && ![_applicationId isEqual:other->_applicationId]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_GetFullMessageRequest * val = [AromaService_GetFullMessageRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  if (_messageIdIsSet)
  {
    val.messageId = [self.messageId copy];
  }
  if (_applicationIdIsSet)
  {
    val.applicationId = [self.applicationId copy];
  }
  return val;
}

- (void) setToken: (AromaAuthentication_UserToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (void) setMessageId: (NSString *) messageId {
  _messageId = messageId;
  _messageIdIsSet = YES;
}

- (void) unsetMessageId {
  _messageId = nil;
  _messageIdIsSet = NO;
}

- (void) setApplicationId: (NSString *) applicationId {
  _applicationId = applicationId;
  _applicationIdIsSet = YES;
}

- (void) unsetApplicationId {
  _applicationId = nil;
  _applicationIdIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.messageId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.applicationId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GetFullMessageRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_messageIdIsSet) {
    if (_messageId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"messageId" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _messageId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationIdIsSet) {
    if (_applicationId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationId" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _applicationId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_GetFullMessageRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @",messageId:"];
  [ms appendFormat: @"\"%@\"", _messageId];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", _applicationId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_GetFullMessageResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithFullMessage: (Aroma_Message *) fullMessage
{
  self = [super init];
  if (self)  {
    _fullMessage = fullMessage;
    _fullMessageIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"fullMessage"])
    {
      _fullMessage = [decoder decodeObjectForKey: @"fullMessage"];
      _fullMessageIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_fullMessageIsSet)
  {
    [encoder encodeObject: _fullMessage forKey: @"fullMessage"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _fullMessageIsSet ? 2654435761 : 0;
  if (_fullMessageIsSet)
  {
    hash = (hash * 31) ^ [_fullMessage hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_GetFullMessageResponse class]]) {
    return NO;
  }
  AromaService_GetFullMessageResponse *other = (AromaService_GetFullMessageResponse *)anObject;
  if ((_fullMessageIsSet != other->_fullMessageIsSet) ||
      (_fullMessageIsSet && ((_fullMessage || other->_fullMessage) && ![_fullMessage isEqual:other->_fullMessage]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_GetFullMessageResponse * val = [AromaService_GetFullMessageResponse new];
  if (_fullMessageIsSet)
  {
    val.fullMessage = [self.fullMessage copy];
  }
  return val;
}

- (void) setFullMessage: (Aroma_Message *) fullMessage {
  _fullMessage = fullMessage;
  _fullMessageIsSet = YES;
}

- (void) unsetFullMessage {
  _fullMessage = nil;
  _fullMessageIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          Aroma_Message *fieldValue = [[Aroma_Message alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.fullMessage = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GetFullMessageResponse" error: __thriftError]) return NO;
  if (_fullMessageIsSet) {
    if (_fullMessage != nil) {
      if (![outProtocol writeFieldBeginWithName: @"fullMessage" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_fullMessage write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_GetFullMessageResponse("];
  [ms appendString: @"fullMessage:"];
  [ms appendFormat: @"%@", _fullMessage];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_GetMediaRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithToken: (AromaService_UserToken) token mediaId: (AromaService_uuid) mediaId desiredThumbnailSize: (Aroma_Dimension *) desiredThumbnailSize
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
    _mediaId = mediaId;
    _mediaIdIsSet = YES;
    _desiredThumbnailSize = desiredThumbnailSize;
    _desiredThumbnailSizeIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"mediaId"])
    {
      _mediaId = [decoder decodeObjectForKey: @"mediaId"];
      _mediaIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"desiredThumbnailSize"])
    {
      _desiredThumbnailSize = [decoder decodeObjectForKey: @"desiredThumbnailSize"];
      _desiredThumbnailSizeIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
  if (_mediaIdIsSet)
  {
    [encoder encodeObject: _mediaId forKey: @"mediaId"];
  }
  if (_desiredThumbnailSizeIsSet)
  {
    [encoder encodeObject: _desiredThumbnailSize forKey: @"desiredThumbnailSize"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  hash = (hash * 31) ^ _mediaIdIsSet ? 2654435761 : 0;
  if (_mediaIdIsSet)
  {
    hash = (hash * 31) ^ [_mediaId hash];
  }
  hash = (hash * 31) ^ _desiredThumbnailSizeIsSet ? 2654435761 : 0;
  if (_desiredThumbnailSizeIsSet)
  {
    hash = (hash * 31) ^ [_desiredThumbnailSize hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_GetMediaRequest class]]) {
    return NO;
  }
  AromaService_GetMediaRequest *other = (AromaService_GetMediaRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  if ((_mediaIdIsSet != other->_mediaIdIsSet) ||
      (_mediaIdIsSet && ((_mediaId || other->_mediaId) && ![_mediaId isEqual:other->_mediaId]))) {
    return NO;
  }
  if ((_desiredThumbnailSizeIsSet != other->_desiredThumbnailSizeIsSet) ||
      (_desiredThumbnailSizeIsSet && ((_desiredThumbnailSize || other->_desiredThumbnailSize) && ![_desiredThumbnailSize isEqual:other->_desiredThumbnailSize]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_GetMediaRequest * val = [AromaService_GetMediaRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  if (_mediaIdIsSet)
  {
    val.mediaId = [self.mediaId copy];
  }
  if (_desiredThumbnailSizeIsSet)
  {
    val.desiredThumbnailSize = [self.desiredThumbnailSize copy];
  }
  return val;
}

- (void) setToken: (AromaAuthentication_UserToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (void) setMediaId: (NSString *) mediaId {
  _mediaId = mediaId;
  _mediaIdIsSet = YES;
}

- (void) unsetMediaId {
  _mediaId = nil;
  _mediaIdIsSet = NO;
}

- (void) setDesiredThumbnailSize: (Aroma_Dimension *) desiredThumbnailSize {
  _desiredThumbnailSize = desiredThumbnailSize;
  _desiredThumbnailSizeIsSet = YES;
}

- (void) unsetDesiredThumbnailSize {
  _desiredThumbnailSize = nil;
  _desiredThumbnailSizeIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.mediaId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          Aroma_Dimension *fieldValue = [[Aroma_Dimension alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.desiredThumbnailSize = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GetMediaRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_mediaIdIsSet) {
    if (_mediaId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"mediaId" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _mediaId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_desiredThumbnailSizeIsSet) {
    if (_desiredThumbnailSize != nil) {
      if (![outProtocol writeFieldBeginWithName: @"desiredThumbnailSize" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_desiredThumbnailSize write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_GetMediaRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @",mediaId:"];
  [ms appendFormat: @"\"%@\"", _mediaId];
  [ms appendString: @",desiredThumbnailSize:"];
  [ms appendFormat: @"%@", _desiredThumbnailSize];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_GetMediaResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithImage: (Aroma_Image *) image
{
  self = [super init];
  if (self)  {
    _image = image;
    _imageIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"image"])
    {
      _image = [decoder decodeObjectForKey: @"image"];
      _imageIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_imageIsSet)
  {
    [encoder encodeObject: _image forKey: @"image"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _imageIsSet ? 2654435761 : 0;
  if (_imageIsSet)
  {
    hash = (hash * 31) ^ [_image hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_GetMediaResponse class]]) {
    return NO;
  }
  AromaService_GetMediaResponse *other = (AromaService_GetMediaResponse *)anObject;
  if ((_imageIsSet != other->_imageIsSet) ||
      (_imageIsSet && ((_image || other->_image) && ![_image isEqual:other->_image]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_GetMediaResponse * val = [AromaService_GetMediaResponse new];
  if (_imageIsSet)
  {
    val.image = [self.image copy];
  }
  return val;
}

- (void) setImage: (Aroma_Image *) image {
  _image = image;
  _imageIsSet = YES;
}

- (void) unsetImage {
  _image = nil;
  _imageIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          Aroma_Image *fieldValue = [[Aroma_Image alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.image = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GetMediaResponse" error: __thriftError]) return NO;
  if (_imageIsSet) {
    if (_image != nil) {
      if (![outProtocol writeFieldBeginWithName: @"image" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_image write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_GetMediaResponse("];
  [ms appendString: @"image:"];
  [ms appendFormat: @"%@", _image];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_DeleteMessageRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.messageIds = @[]    self.deleteAll = NO;

  }
  return self;
}

- (instancetype) initWithToken: (AromaService_UserToken) token messageId: (AromaService_uuid) messageId applicationId: (AromaService_uuid) applicationId messageIds: (NSArray<AromaService_uuid> *) messageIds deleteAll: (BOOL) deleteAll
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
    _messageId = messageId;
    _messageIdIsSet = YES;
    _applicationId = applicationId;
    _applicationIdIsSet = YES;
    _messageIds = [messageIds mutableCopy];
    _messageIdsIsSet = YES;
    _deleteAll = deleteAll;
    _deleteAllIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"messageId"])
    {
      _messageId = [decoder decodeObjectForKey: @"messageId"];
      _messageIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationId"])
    {
      _applicationId = [decoder decodeObjectForKey: @"applicationId"];
      _applicationIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"messageIds"])
    {
      _messageIds = [decoder decodeObjectForKey: @"messageIds"];
      _messageIdsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"deleteAll"])
    {
      _deleteAll = [decoder decodeBoolForKey: @"deleteAll"];
      _deleteAllIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
  if (_messageIdIsSet)
  {
    [encoder encodeObject: _messageId forKey: @"messageId"];
  }
  if (_applicationIdIsSet)
  {
    [encoder encodeObject: _applicationId forKey: @"applicationId"];
  }
  if (_messageIdsIsSet)
  {
    [encoder encodeObject: _messageIds forKey: @"messageIds"];
  }
  if (_deleteAllIsSet)
  {
    [encoder encodeBool: _deleteAll forKey: @"deleteAll"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  hash = (hash * 31) ^ _messageIdIsSet ? 2654435761 : 0;
  if (_messageIdIsSet)
  {
    hash = (hash * 31) ^ [_messageId hash];
  }
  hash = (hash * 31) ^ _applicationIdIsSet ? 2654435761 : 0;
  if (_applicationIdIsSet)
  {
    hash = (hash * 31) ^ [_applicationId hash];
  }
  hash = (hash * 31) ^ _messageIdsIsSet ? 2654435761 : 0;
  if (_messageIdsIsSet)
  {
    hash = (hash * 31) ^ [_messageIds hash];
  }
  hash = (hash * 31) ^ _deleteAllIsSet ? 2654435761 : 0;
  if (_deleteAllIsSet)
  {
    hash = (hash * 31) ^ [@(_deleteAll) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_DeleteMessageRequest class]]) {
    return NO;
  }
  AromaService_DeleteMessageRequest *other = (AromaService_DeleteMessageRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  if ((_messageIdIsSet != other->_messageIdIsSet) ||
      (_messageIdIsSet && ((_messageId || other->_messageId) && ![_messageId isEqual:other->_messageId]))) {
    return NO;
  }
  if ((_applicationIdIsSet != other->_applicationIdIsSet) ||
      (_applicationIdIsSet && ((_applicationId || other->_applicationId) && ![_applicationId isEqual:other->_applicationId]))) {
    return NO;
  }
  if ((_messageIdsIsSet != other->_messageIdsIsSet) ||
      (_messageIdsIsSet && ((_messageIds || other->_messageIds) && ![_messageIds isEqual:other->_messageIds]))) {
    return NO;
  }
  if ((_deleteAllIsSet != other->_deleteAllIsSet) ||
      (_deleteAllIsSet && (_deleteAll != other->_deleteAll))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_DeleteMessageRequest * val = [AromaService_DeleteMessageRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  if (_messageIdIsSet)
  {
    val.messageId = [self.messageId copy];
  }
  if (_applicationIdIsSet)
  {
    val.applicationId = [self.applicationId copy];
  }
  if (_messageIdsIsSet)
  {
    val.messageIds = [self.messageIds copy];
  }
  if (_deleteAllIsSet)
  {
    val.deleteAll = self.deleteAll;
  }
  return val;
}

- (void) setToken: (AromaAuthentication_UserToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (void) setMessageId: (NSString *) messageId {
  _messageId = messageId;
  _messageIdIsSet = YES;
}

- (void) unsetMessageId {
  _messageId = nil;
  _messageIdIsSet = NO;
}

- (void) setApplicationId: (NSString *) applicationId {
  _applicationId = applicationId;
  _applicationIdIsSet = YES;
}

- (void) unsetApplicationId {
  _applicationId = nil;
  _applicationIdIsSet = NO;
}

- (void) setMessageIds: (NSMutableArray<AromaService_uuid> *) messageIds {
  _messageIds = messageIds;
  _messageIdsIsSet = YES;
}

- (void) unsetMessageIds {
  _messageIds = nil;
  _messageIdsIsSet = NO;
}

- (void) setDeleteAll: (BOOL) deleteAll {
  _deleteAll = deleteAll;
  _deleteAllIsSet = YES;
}

- (void) unsetDeleteAll {
  _deleteAllIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.messageId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.applicationId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeLIST) {
          SInt32 _size25;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size25 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size25];
          int _i26;
          for (_i26 = 0; _i26 < _size25; ++_i26)
          {
            NSString * _elem27;
            if (![inProtocol readString:&_elem27 error: __thriftError]) return NO;
            [fieldValue addObject: _elem27];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.messageIds = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeBOOL) {
          BOOL fieldValue;
          if (![inProtocol readBool:&fieldValue error: __thriftError]) return NO;
          self.deleteAll = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"DeleteMessageRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_messageIdIsSet) {
    if (_messageId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"messageId" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _messageId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationIdIsSet) {
    if (_applicationId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationId" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _applicationId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_messageIdsIsSet) {
    if (_messageIds != nil) {
      if (![outProtocol writeFieldBeginWithName: @"messageIds" type: TTypeLIST fieldID: 4 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRING size: (SInt32)[_messageIds count] error: __thriftError]) return NO;
        int idx29;
        for (idx29 = 0; idx29 < [_messageIds count]; idx29++)
        {
          if (![outProtocol writeString: [_messageIds objectAtIndex: idx29] error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_deleteAllIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"deleteAll" type: TTypeBOOL fieldID: 5 error: __thriftError]) return NO;
    if (![outProtocol writeBool: _deleteAll error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_DeleteMessageRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @",messageId:"];
  [ms appendFormat: @"\"%@\"", _messageId];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", _applicationId];
  [ms appendString: @",messageIds:"];
  [ms appendFormat: @"%@", _messageIds];
  [ms appendString: @",deleteAll:"];
  [ms appendFormat: @"%i", _deleteAll];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_DeleteMessageResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.messagesDeleted = 0;

  }
  return self;
}

- (instancetype) initWithMessagesDeleted: (AromaService_int) messagesDeleted
{
  self = [super init];
  if (self)  {
    _messagesDeleted = messagesDeleted;
    _messagesDeletedIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"messagesDeleted"])
    {
      _messagesDeleted = [decoder decodeInt32ForKey: @"messagesDeleted"];
      _messagesDeletedIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_messagesDeletedIsSet)
  {
    [encoder encodeInt32: _messagesDeleted forKey: @"messagesDeleted"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _messagesDeletedIsSet ? 2654435761 : 0;
  if (_messagesDeletedIsSet)
  {
    hash = (hash * 31) ^ [@(_messagesDeleted) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_DeleteMessageResponse class]]) {
    return NO;
  }
  AromaService_DeleteMessageResponse *other = (AromaService_DeleteMessageResponse *)anObject;
  if ((_messagesDeletedIsSet != other->_messagesDeletedIsSet) ||
      (_messagesDeletedIsSet && (_messagesDeleted != other->_messagesDeleted))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_DeleteMessageResponse * val = [AromaService_DeleteMessageResponse new];
  if (_messagesDeletedIsSet)
  {
    val.messagesDeleted = self.messagesDeleted;
  }
  return val;
}

- (void) setMessagesDeleted: (SInt32) messagesDeleted {
  _messagesDeleted = messagesDeleted;
  _messagesDeletedIsSet = YES;
}

- (void) unsetMessagesDeleted {
  _messagesDeletedIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeI32) {
          SInt32 fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.messagesDeleted = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"DeleteMessageResponse" error: __thriftError]) return NO;
  if (_messagesDeletedIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"messagesDeleted" type: TTypeI32 fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _messagesDeleted error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_DeleteMessageResponse("];
  [ms appendString: @"messagesDeleted:"];
  [ms appendFormat: @"%i", (int)_messagesDeleted];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_DismissMessageRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.messageIds = @[]    self.dismissAll = NO;

  }
  return self;
}

- (instancetype) initWithToken: (AromaService_UserToken) token messageId: (AromaService_uuid) messageId applicationId: (AromaService_uuid) applicationId messageIds: (NSArray<AromaService_uuid> *) messageIds dismissAll: (BOOL) dismissAll
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
    _messageId = messageId;
    _messageIdIsSet = YES;
    _applicationId = applicationId;
    _applicationIdIsSet = YES;
    _messageIds = [messageIds mutableCopy];
    _messageIdsIsSet = YES;
    _dismissAll = dismissAll;
    _dismissAllIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"messageId"])
    {
      _messageId = [decoder decodeObjectForKey: @"messageId"];
      _messageIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationId"])
    {
      _applicationId = [decoder decodeObjectForKey: @"applicationId"];
      _applicationIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"messageIds"])
    {
      _messageIds = [decoder decodeObjectForKey: @"messageIds"];
      _messageIdsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"dismissAll"])
    {
      _dismissAll = [decoder decodeBoolForKey: @"dismissAll"];
      _dismissAllIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
  if (_messageIdIsSet)
  {
    [encoder encodeObject: _messageId forKey: @"messageId"];
  }
  if (_applicationIdIsSet)
  {
    [encoder encodeObject: _applicationId forKey: @"applicationId"];
  }
  if (_messageIdsIsSet)
  {
    [encoder encodeObject: _messageIds forKey: @"messageIds"];
  }
  if (_dismissAllIsSet)
  {
    [encoder encodeBool: _dismissAll forKey: @"dismissAll"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  hash = (hash * 31) ^ _messageIdIsSet ? 2654435761 : 0;
  if (_messageIdIsSet)
  {
    hash = (hash * 31) ^ [_messageId hash];
  }
  hash = (hash * 31) ^ _applicationIdIsSet ? 2654435761 : 0;
  if (_applicationIdIsSet)
  {
    hash = (hash * 31) ^ [_applicationId hash];
  }
  hash = (hash * 31) ^ _messageIdsIsSet ? 2654435761 : 0;
  if (_messageIdsIsSet)
  {
    hash = (hash * 31) ^ [_messageIds hash];
  }
  hash = (hash * 31) ^ _dismissAllIsSet ? 2654435761 : 0;
  if (_dismissAllIsSet)
  {
    hash = (hash * 31) ^ [@(_dismissAll) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_DismissMessageRequest class]]) {
    return NO;
  }
  AromaService_DismissMessageRequest *other = (AromaService_DismissMessageRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  if ((_messageIdIsSet != other->_messageIdIsSet) ||
      (_messageIdIsSet && ((_messageId || other->_messageId) && ![_messageId isEqual:other->_messageId]))) {
    return NO;
  }
  if ((_applicationIdIsSet != other->_applicationIdIsSet) ||
      (_applicationIdIsSet && ((_applicationId || other->_applicationId) && ![_applicationId isEqual:other->_applicationId]))) {
    return NO;
  }
  if ((_messageIdsIsSet != other->_messageIdsIsSet) ||
      (_messageIdsIsSet && ((_messageIds || other->_messageIds) && ![_messageIds isEqual:other->_messageIds]))) {
    return NO;
  }
  if ((_dismissAllIsSet != other->_dismissAllIsSet) ||
      (_dismissAllIsSet && (_dismissAll != other->_dismissAll))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_DismissMessageRequest * val = [AromaService_DismissMessageRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  if (_messageIdIsSet)
  {
    val.messageId = [self.messageId copy];
  }
  if (_applicationIdIsSet)
  {
    val.applicationId = [self.applicationId copy];
  }
  if (_messageIdsIsSet)
  {
    val.messageIds = [self.messageIds copy];
  }
  if (_dismissAllIsSet)
  {
    val.dismissAll = self.dismissAll;
  }
  return val;
}

- (void) setToken: (AromaAuthentication_UserToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (void) setMessageId: (NSString *) messageId {
  _messageId = messageId;
  _messageIdIsSet = YES;
}

- (void) unsetMessageId {
  _messageId = nil;
  _messageIdIsSet = NO;
}

- (void) setApplicationId: (NSString *) applicationId {
  _applicationId = applicationId;
  _applicationIdIsSet = YES;
}

- (void) unsetApplicationId {
  _applicationId = nil;
  _applicationIdIsSet = NO;
}

- (void) setMessageIds: (NSMutableArray<AromaService_uuid> *) messageIds {
  _messageIds = messageIds;
  _messageIdsIsSet = YES;
}

- (void) unsetMessageIds {
  _messageIds = nil;
  _messageIdsIsSet = NO;
}

- (void) setDismissAll: (BOOL) dismissAll {
  _dismissAll = dismissAll;
  _dismissAllIsSet = YES;
}

- (void) unsetDismissAll {
  _dismissAllIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.messageId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.applicationId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeLIST) {
          SInt32 _size30;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size30 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size30];
          int _i31;
          for (_i31 = 0; _i31 < _size30; ++_i31)
          {
            NSString * _elem32;
            if (![inProtocol readString:&_elem32 error: __thriftError]) return NO;
            [fieldValue addObject: _elem32];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.messageIds = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeBOOL) {
          BOOL fieldValue;
          if (![inProtocol readBool:&fieldValue error: __thriftError]) return NO;
          self.dismissAll = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"DismissMessageRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_messageIdIsSet) {
    if (_messageId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"messageId" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _messageId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationIdIsSet) {
    if (_applicationId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationId" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _applicationId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_messageIdsIsSet) {
    if (_messageIds != nil) {
      if (![outProtocol writeFieldBeginWithName: @"messageIds" type: TTypeLIST fieldID: 4 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRING size: (SInt32)[_messageIds count] error: __thriftError]) return NO;
        int idx34;
        for (idx34 = 0; idx34 < [_messageIds count]; idx34++)
        {
          if (![outProtocol writeString: [_messageIds objectAtIndex: idx34] error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_dismissAllIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"dismissAll" type: TTypeBOOL fieldID: 5 error: __thriftError]) return NO;
    if (![outProtocol writeBool: _dismissAll error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_DismissMessageRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @",messageId:"];
  [ms appendFormat: @"\"%@\"", _messageId];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", _applicationId];
  [ms appendString: @",messageIds:"];
  [ms appendFormat: @"%@", _messageIds];
  [ms appendString: @",dismissAll:"];
  [ms appendFormat: @"%i", _dismissAll];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_DismissMessageResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.messagesDismissed = 0;

  }
  return self;
}

- (instancetype) initWithMessagesDismissed: (AromaService_int) messagesDismissed
{
  self = [super init];
  if (self)  {
    _messagesDismissed = messagesDismissed;
    _messagesDismissedIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"messagesDismissed"])
    {
      _messagesDismissed = [decoder decodeInt32ForKey: @"messagesDismissed"];
      _messagesDismissedIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_messagesDismissedIsSet)
  {
    [encoder encodeInt32: _messagesDismissed forKey: @"messagesDismissed"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _messagesDismissedIsSet ? 2654435761 : 0;
  if (_messagesDismissedIsSet)
  {
    hash = (hash * 31) ^ [@(_messagesDismissed) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_DismissMessageResponse class]]) {
    return NO;
  }
  AromaService_DismissMessageResponse *other = (AromaService_DismissMessageResponse *)anObject;
  if ((_messagesDismissedIsSet != other->_messagesDismissedIsSet) ||
      (_messagesDismissedIsSet && (_messagesDismissed != other->_messagesDismissed))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_DismissMessageResponse * val = [AromaService_DismissMessageResponse new];
  if (_messagesDismissedIsSet)
  {
    val.messagesDismissed = self.messagesDismissed;
  }
  return val;
}

- (void) setMessagesDismissed: (SInt32) messagesDismissed {
  _messagesDismissed = messagesDismissed;
  _messagesDismissedIsSet = YES;
}

- (void) unsetMessagesDismissed {
  _messagesDismissedIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeI32) {
          SInt32 fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.messagesDismissed = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"DismissMessageResponse" error: __thriftError]) return NO;
  if (_messagesDismissedIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"messagesDismissed" type: TTypeI32 fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _messagesDismissed error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_DismissMessageResponse("];
  [ms appendString: @"messagesDismissed:"];
  [ms appendFormat: @"%i", (int)_messagesDismissed];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_GetInboxRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.limit = 0;

  }
  return self;
}

- (instancetype) initWithToken: (AromaService_UserToken) token limit: (AromaService_int) limit
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
    _limit = limit;
    _limitIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"limit"])
    {
      _limit = [decoder decodeInt32ForKey: @"limit"];
      _limitIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
  if (_limitIsSet)
  {
    [encoder encodeInt32: _limit forKey: @"limit"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  hash = (hash * 31) ^ _limitIsSet ? 2654435761 : 0;
  if (_limitIsSet)
  {
    hash = (hash * 31) ^ [@(_limit) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_GetInboxRequest class]]) {
    return NO;
  }
  AromaService_GetInboxRequest *other = (AromaService_GetInboxRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  if ((_limitIsSet != other->_limitIsSet) ||
      (_limitIsSet && (_limit != other->_limit))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_GetInboxRequest * val = [AromaService_GetInboxRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  if (_limitIsSet)
  {
    val.limit = self.limit;
  }
  return val;
}

- (void) setToken: (AromaAuthentication_UserToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (void) setLimit: (SInt32) limit {
  _limit = limit;
  _limitIsSet = YES;
}

- (void) unsetLimit {
  _limitIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeI32) {
          SInt32 fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.limit = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GetInboxRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_limitIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"limit" type: TTypeI32 fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _limit error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_GetInboxRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @",limit:"];
  [ms appendFormat: @"%i", (int)_limit];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_GetInboxResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.messages = @[]  }
  return self;
}

- (instancetype) initWithMessages: (NSArray<AromaService_Message *> *) messages
{
  self = [super init];
  if (self)  {
    _messages = [messages mutableCopy];
    _messagesIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"messages"])
    {
      _messages = [decoder decodeObjectForKey: @"messages"];
      _messagesIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_messagesIsSet)
  {
    [encoder encodeObject: _messages forKey: @"messages"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _messagesIsSet ? 2654435761 : 0;
  if (_messagesIsSet)
  {
    hash = (hash * 31) ^ [_messages hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_GetInboxResponse class]]) {
    return NO;
  }
  AromaService_GetInboxResponse *other = (AromaService_GetInboxResponse *)anObject;
  if ((_messagesIsSet != other->_messagesIsSet) ||
      (_messagesIsSet && ((_messages || other->_messages) && ![_messages isEqual:other->_messages]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_GetInboxResponse * val = [AromaService_GetInboxResponse new];
  if (_messagesIsSet)
  {
    val.messages = [self.messages copy];
  }
  return val;
}

- (void) setMessages: (NSMutableArray<AromaService_Message *> *) messages {
  _messages = messages;
  _messagesIsSet = YES;
}

- (void) unsetMessages {
  _messages = nil;
  _messagesIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeLIST) {
          SInt32 _size35;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size35 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size35];
          int _i36;
          for (_i36 = 0; _i36 < _size35; ++_i36)
          {
            Aroma_Message *_elem37 = [[Aroma_Message alloc] init];
            if (![_elem37 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem37];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.messages = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GetInboxResponse" error: __thriftError]) return NO;
  if (_messagesIsSet) {
    if (_messages != nil) {
      if (![outProtocol writeFieldBeginWithName: @"messages" type: TTypeLIST fieldID: 1 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_messages count] error: __thriftError]) return NO;
        int idx39;
        for (idx39 = 0; idx39 < [_messages count]; idx39++)
        {
          if (![[_messages objectAtIndex: idx39] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_GetInboxResponse("];
  [ms appendString: @"messages:"];
  [ms appendFormat: @"%@", _messages];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_GetActivityRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.limit = 0;

  }
  return self;
}

- (instancetype) initWithToken: (AromaService_UserToken) token limit: (AromaService_int) limit
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
    _limit = limit;
    _limitIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"limit"])
    {
      _limit = [decoder decodeInt32ForKey: @"limit"];
      _limitIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
  if (_limitIsSet)
  {
    [encoder encodeInt32: _limit forKey: @"limit"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  hash = (hash * 31) ^ _limitIsSet ? 2654435761 : 0;
  if (_limitIsSet)
  {
    hash = (hash * 31) ^ [@(_limit) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_GetActivityRequest class]]) {
    return NO;
  }
  AromaService_GetActivityRequest *other = (AromaService_GetActivityRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  if ((_limitIsSet != other->_limitIsSet) ||
      (_limitIsSet && (_limit != other->_limit))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_GetActivityRequest * val = [AromaService_GetActivityRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  if (_limitIsSet)
  {
    val.limit = self.limit;
  }
  return val;
}

- (void) setToken: (AromaAuthentication_UserToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (void) setLimit: (SInt32) limit {
  _limit = limit;
  _limitIsSet = YES;
}

- (void) unsetLimit {
  _limitIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeI32) {
          SInt32 fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.limit = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GetActivityRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_limitIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"limit" type: TTypeI32 fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _limit error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_GetActivityRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @",limit:"];
  [ms appendFormat: @"%i", (int)_limit];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_GetActivityResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.events = @[]  }
  return self;
}

- (instancetype) initWithEvents: (NSArray<AromaService_Event *> *) events
{
  self = [super init];
  if (self)  {
    _events = [events mutableCopy];
    _eventsIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"events"])
    {
      _events = [decoder decodeObjectForKey: @"events"];
      _eventsIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_eventsIsSet)
  {
    [encoder encodeObject: _events forKey: @"events"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _eventsIsSet ? 2654435761 : 0;
  if (_eventsIsSet)
  {
    hash = (hash * 31) ^ [_events hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_GetActivityResponse class]]) {
    return NO;
  }
  AromaService_GetActivityResponse *other = (AromaService_GetActivityResponse *)anObject;
  if ((_eventsIsSet != other->_eventsIsSet) ||
      (_eventsIsSet && ((_events || other->_events) && ![_events isEqual:other->_events]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_GetActivityResponse * val = [AromaService_GetActivityResponse new];
  if (_eventsIsSet)
  {
    val.events = [self.events copy];
  }
  return val;
}

- (void) setEvents: (NSMutableArray<AromaService_Event *> *) events {
  _events = events;
  _eventsIsSet = YES;
}

- (void) unsetEvents {
  _events = nil;
  _eventsIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeLIST) {
          SInt32 _size40;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size40 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size40];
          int _i41;
          for (_i41 = 0; _i41 < _size40; ++_i41)
          {
            AromaEvents_Event *_elem42 = [[AromaEvents_Event alloc] init];
            if (![_elem42 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem42];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.events = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GetActivityResponse" error: __thriftError]) return NO;
  if (_eventsIsSet) {
    if (_events != nil) {
      if (![outProtocol writeFieldBeginWithName: @"events" type: TTypeLIST fieldID: 1 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_events count] error: __thriftError]) return NO;
        int idx44;
        for (idx44 = 0; idx44 < [_events count]; idx44++)
        {
          if (![[_events objectAtIndex: idx44] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_GetActivityResponse("];
  [ms appendString: @"events:"];
  [ms appendFormat: @"%@", _events];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_DeleteActivityRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.deleteAll = NO;

  }
  return self;
}

- (instancetype) initWithToken: (AromaService_UserToken) token eventId: (AromaService_uuid) eventId deleteAll: (BOOL) deleteAll multipleEventIds: (NSArray<AromaService_uuid> *) multipleEventIds
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
    _eventId = eventId;
    _eventIdIsSet = YES;
    _deleteAll = deleteAll;
    _deleteAllIsSet = YES;
    _multipleEventIds = [multipleEventIds mutableCopy];
    _multipleEventIdsIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"eventId"])
    {
      _eventId = [decoder decodeObjectForKey: @"eventId"];
      _eventIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"deleteAll"])
    {
      _deleteAll = [decoder decodeBoolForKey: @"deleteAll"];
      _deleteAllIsSet = YES;
    }
    if ([decoder containsValueForKey: @"multipleEventIds"])
    {
      _multipleEventIds = [decoder decodeObjectForKey: @"multipleEventIds"];
      _multipleEventIdsIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
  if (_eventIdIsSet)
  {
    [encoder encodeObject: _eventId forKey: @"eventId"];
  }
  if (_deleteAllIsSet)
  {
    [encoder encodeBool: _deleteAll forKey: @"deleteAll"];
  }
  if (_multipleEventIdsIsSet)
  {
    [encoder encodeObject: _multipleEventIds forKey: @"multipleEventIds"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  hash = (hash * 31) ^ _eventIdIsSet ? 2654435761 : 0;
  if (_eventIdIsSet)
  {
    hash = (hash * 31) ^ [_eventId hash];
  }
  hash = (hash * 31) ^ _deleteAllIsSet ? 2654435761 : 0;
  if (_deleteAllIsSet)
  {
    hash = (hash * 31) ^ [@(_deleteAll) hash];
  }
  hash = (hash * 31) ^ _multipleEventIdsIsSet ? 2654435761 : 0;
  if (_multipleEventIdsIsSet)
  {
    hash = (hash * 31) ^ [_multipleEventIds hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_DeleteActivityRequest class]]) {
    return NO;
  }
  AromaService_DeleteActivityRequest *other = (AromaService_DeleteActivityRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  if ((_eventIdIsSet != other->_eventIdIsSet) ||
      (_eventIdIsSet && ((_eventId || other->_eventId) && ![_eventId isEqual:other->_eventId]))) {
    return NO;
  }
  if ((_deleteAllIsSet != other->_deleteAllIsSet) ||
      (_deleteAllIsSet && (_deleteAll != other->_deleteAll))) {
    return NO;
  }
  if ((_multipleEventIdsIsSet != other->_multipleEventIdsIsSet) ||
      (_multipleEventIdsIsSet && ((_multipleEventIds || other->_multipleEventIds) && ![_multipleEventIds isEqual:other->_multipleEventIds]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_DeleteActivityRequest * val = [AromaService_DeleteActivityRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  if (_eventIdIsSet)
  {
    val.eventId = [self.eventId copy];
  }
  if (_deleteAllIsSet)
  {
    val.deleteAll = self.deleteAll;
  }
  if (_multipleEventIdsIsSet)
  {
    val.multipleEventIds = [self.multipleEventIds copy];
  }
  return val;
}

- (void) setToken: (AromaAuthentication_UserToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (void) setEventId: (NSString *) eventId {
  _eventId = eventId;
  _eventIdIsSet = YES;
}

- (void) unsetEventId {
  _eventId = nil;
  _eventIdIsSet = NO;
}

- (void) setDeleteAll: (BOOL) deleteAll {
  _deleteAll = deleteAll;
  _deleteAllIsSet = YES;
}

- (void) unsetDeleteAll {
  _deleteAllIsSet = NO;
}

- (void) setMultipleEventIds: (NSMutableArray<AromaService_uuid> *) multipleEventIds {
  _multipleEventIds = multipleEventIds;
  _multipleEventIdsIsSet = YES;
}

- (void) unsetMultipleEventIds {
  _multipleEventIds = nil;
  _multipleEventIdsIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.eventId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeBOOL) {
          BOOL fieldValue;
          if (![inProtocol readBool:&fieldValue error: __thriftError]) return NO;
          self.deleteAll = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeLIST) {
          SInt32 _size45;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size45 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size45];
          int _i46;
          for (_i46 = 0; _i46 < _size45; ++_i46)
          {
            NSString * _elem47;
            if (![inProtocol readString:&_elem47 error: __thriftError]) return NO;
            [fieldValue addObject: _elem47];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.multipleEventIds = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"DeleteActivityRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_eventIdIsSet) {
    if (_eventId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"eventId" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _eventId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_deleteAllIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"deleteAll" type: TTypeBOOL fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeBool: _deleteAll error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_multipleEventIdsIsSet) {
    if (_multipleEventIds != nil) {
      if (![outProtocol writeFieldBeginWithName: @"multipleEventIds" type: TTypeLIST fieldID: 4 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRING size: (SInt32)[_multipleEventIds count] error: __thriftError]) return NO;
        int idx49;
        for (idx49 = 0; idx49 < [_multipleEventIds count]; idx49++)
        {
          if (![outProtocol writeString: [_multipleEventIds objectAtIndex: idx49] error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_DeleteActivityRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @",eventId:"];
  [ms appendFormat: @"\"%@\"", _eventId];
  [ms appendString: @",deleteAll:"];
  [ms appendFormat: @"%i", _deleteAll];
  [ms appendString: @",multipleEventIds:"];
  [ms appendFormat: @"%@", _multipleEventIds];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_DeleteActivityResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.totalEventsDeleted = 0;

  }
  return self;
}

- (instancetype) initWithTotalEventsDeleted: (AromaService_int) totalEventsDeleted
{
  self = [super init];
  if (self)  {
    _totalEventsDeleted = totalEventsDeleted;
    _totalEventsDeletedIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"totalEventsDeleted"])
    {
      _totalEventsDeleted = [decoder decodeInt32ForKey: @"totalEventsDeleted"];
      _totalEventsDeletedIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_totalEventsDeletedIsSet)
  {
    [encoder encodeInt32: _totalEventsDeleted forKey: @"totalEventsDeleted"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _totalEventsDeletedIsSet ? 2654435761 : 0;
  if (_totalEventsDeletedIsSet)
  {
    hash = (hash * 31) ^ [@(_totalEventsDeleted) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_DeleteActivityResponse class]]) {
    return NO;
  }
  AromaService_DeleteActivityResponse *other = (AromaService_DeleteActivityResponse *)anObject;
  if ((_totalEventsDeletedIsSet != other->_totalEventsDeletedIsSet) ||
      (_totalEventsDeletedIsSet && (_totalEventsDeleted != other->_totalEventsDeleted))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_DeleteActivityResponse * val = [AromaService_DeleteActivityResponse new];
  if (_totalEventsDeletedIsSet)
  {
    val.totalEventsDeleted = self.totalEventsDeleted;
  }
  return val;
}

- (void) setTotalEventsDeleted: (SInt32) totalEventsDeleted {
  _totalEventsDeleted = totalEventsDeleted;
  _totalEventsDeletedIsSet = YES;
}

- (void) unsetTotalEventsDeleted {
  _totalEventsDeletedIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeI32) {
          SInt32 fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.totalEventsDeleted = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"DeleteActivityResponse" error: __thriftError]) return NO;
  if (_totalEventsDeletedIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"totalEventsDeleted" type: TTypeI32 fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _totalEventsDeleted error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_DeleteActivityResponse("];
  [ms appendString: @"totalEventsDeleted:"];
  [ms appendFormat: @"%i", (int)_totalEventsDeleted];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_GetReactionsRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithToken: (AromaService_UserToken) token forAppId: (AromaService_uuid) forAppId
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
    _forAppId = forAppId;
    _forAppIdIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"forAppId"])
    {
      _forAppId = [decoder decodeObjectForKey: @"forAppId"];
      _forAppIdIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
  if (_forAppIdIsSet)
  {
    [encoder encodeObject: _forAppId forKey: @"forAppId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  hash = (hash * 31) ^ _forAppIdIsSet ? 2654435761 : 0;
  if (_forAppIdIsSet)
  {
    hash = (hash * 31) ^ [_forAppId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_GetReactionsRequest class]]) {
    return NO;
  }
  AromaService_GetReactionsRequest *other = (AromaService_GetReactionsRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  if ((_forAppIdIsSet != other->_forAppIdIsSet) ||
      (_forAppIdIsSet && ((_forAppId || other->_forAppId) && ![_forAppId isEqual:other->_forAppId]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_GetReactionsRequest * val = [AromaService_GetReactionsRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  if (_forAppIdIsSet)
  {
    val.forAppId = [self.forAppId copy];
  }
  return val;
}

- (void) setToken: (AromaAuthentication_UserToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (void) setForAppId: (NSString *) forAppId {
  _forAppId = forAppId;
  _forAppIdIsSet = YES;
}

- (void) unsetForAppId {
  _forAppId = nil;
  _forAppIdIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.forAppId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GetReactionsRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_forAppIdIsSet) {
    if (_forAppId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"forAppId" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _forAppId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_GetReactionsRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @",forAppId:"];
  [ms appendFormat: @"\"%@\"", _forAppId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_GetReactionsResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.reactions = @[]  }
  return self;
}

- (instancetype) initWithReactions: (NSArray<AromaService_Reaction> *) reactions
{
  self = [super init];
  if (self)  {
    _reactions = [reactions mutableCopy];
    _reactionsIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"reactions"])
    {
      _reactions = [decoder decodeObjectForKey: @"reactions"];
      _reactionsIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_reactionsIsSet)
  {
    [encoder encodeObject: _reactions forKey: @"reactions"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _reactionsIsSet ? 2654435761 : 0;
  if (_reactionsIsSet)
  {
    hash = (hash * 31) ^ [_reactions hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_GetReactionsResponse class]]) {
    return NO;
  }
  AromaService_GetReactionsResponse *other = (AromaService_GetReactionsResponse *)anObject;
  if ((_reactionsIsSet != other->_reactionsIsSet) ||
      (_reactionsIsSet && ((_reactions || other->_reactions) && ![_reactions isEqual:other->_reactions]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_GetReactionsResponse * val = [AromaService_GetReactionsResponse new];
  if (_reactionsIsSet)
  {
    val.reactions = [self.reactions copy];
  }
  return val;
}

- (void) setReactions: (NSMutableArray<AromaService_Reaction> *) reactions {
  _reactions = reactions;
  _reactionsIsSet = YES;
}

- (void) unsetReactions {
  _reactions = nil;
  _reactionsIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeLIST) {
          SInt32 _size50;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size50 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size50];
          int _i51;
          for (_i51 = 0; _i51 < _size50; ++_i51)
          {
            AromaReactions_Reaction *_elem52 = [[AromaReactions_Reaction alloc] init];
            if (![_elem52 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem52];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.reactions = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GetReactionsResponse" error: __thriftError]) return NO;
  if (_reactionsIsSet) {
    if (_reactions != nil) {
      if (![outProtocol writeFieldBeginWithName: @"reactions" type: TTypeLIST fieldID: 1 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_reactions count] error: __thriftError]) return NO;
        int idx54;
        for (idx54 = 0; idx54 < [_reactions count]; idx54++)
        {
          if (![[_reactions objectAtIndex: idx54] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_GetReactionsResponse("];
  [ms appendString: @"reactions:"];
  [ms appendFormat: @"%@", _reactions];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_UpdateReactionsRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.reactions = @[]  }
  return self;
}

- (instancetype) initWithToken: (AromaService_UserToken) token forAppId: (AromaService_uuid) forAppId reactions: (NSArray<AromaService_Reaction> *) reactions
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
    _forAppId = forAppId;
    _forAppIdIsSet = YES;
    _reactions = [reactions mutableCopy];
    _reactionsIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"forAppId"])
    {
      _forAppId = [decoder decodeObjectForKey: @"forAppId"];
      _forAppIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"reactions"])
    {
      _reactions = [decoder decodeObjectForKey: @"reactions"];
      _reactionsIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
  if (_forAppIdIsSet)
  {
    [encoder encodeObject: _forAppId forKey: @"forAppId"];
  }
  if (_reactionsIsSet)
  {
    [encoder encodeObject: _reactions forKey: @"reactions"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  hash = (hash * 31) ^ _forAppIdIsSet ? 2654435761 : 0;
  if (_forAppIdIsSet)
  {
    hash = (hash * 31) ^ [_forAppId hash];
  }
  hash = (hash * 31) ^ _reactionsIsSet ? 2654435761 : 0;
  if (_reactionsIsSet)
  {
    hash = (hash * 31) ^ [_reactions hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_UpdateReactionsRequest class]]) {
    return NO;
  }
  AromaService_UpdateReactionsRequest *other = (AromaService_UpdateReactionsRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  if ((_forAppIdIsSet != other->_forAppIdIsSet) ||
      (_forAppIdIsSet && ((_forAppId || other->_forAppId) && ![_forAppId isEqual:other->_forAppId]))) {
    return NO;
  }
  if ((_reactionsIsSet != other->_reactionsIsSet) ||
      (_reactionsIsSet && ((_reactions || other->_reactions) && ![_reactions isEqual:other->_reactions]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_UpdateReactionsRequest * val = [AromaService_UpdateReactionsRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  if (_forAppIdIsSet)
  {
    val.forAppId = [self.forAppId copy];
  }
  if (_reactionsIsSet)
  {
    val.reactions = [self.reactions copy];
  }
  return val;
}

- (void) setToken: (AromaAuthentication_UserToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (void) setForAppId: (NSString *) forAppId {
  _forAppId = forAppId;
  _forAppIdIsSet = YES;
}

- (void) unsetForAppId {
  _forAppId = nil;
  _forAppIdIsSet = NO;
}

- (void) setReactions: (NSMutableArray<AromaService_Reaction> *) reactions {
  _reactions = reactions;
  _reactionsIsSet = YES;
}

- (void) unsetReactions {
  _reactions = nil;
  _reactionsIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.forAppId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeLIST) {
          SInt32 _size55;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size55 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size55];
          int _i56;
          for (_i56 = 0; _i56 < _size55; ++_i56)
          {
            AromaReactions_Reaction *_elem57 = [[AromaReactions_Reaction alloc] init];
            if (![_elem57 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem57];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.reactions = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UpdateReactionsRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_forAppIdIsSet) {
    if (_forAppId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"forAppId" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _forAppId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_reactionsIsSet) {
    if (_reactions != nil) {
      if (![outProtocol writeFieldBeginWithName: @"reactions" type: TTypeLIST fieldID: 3 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_reactions count] error: __thriftError]) return NO;
        int idx59;
        for (idx59 = 0; idx59 < [_reactions count]; idx59++)
        {
          if (![[_reactions objectAtIndex: idx59] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_UpdateReactionsRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @",forAppId:"];
  [ms appendFormat: @"\"%@\"", _forAppId];
  [ms appendString: @",reactions:"];
  [ms appendFormat: @"%@", _reactions];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_UpdateReactionsResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.reactions = @[]  }
  return self;
}

- (instancetype) initWithReactions: (NSArray<AromaService_Reaction> *) reactions
{
  self = [super init];
  if (self)  {
    _reactions = [reactions mutableCopy];
    _reactionsIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"reactions"])
    {
      _reactions = [decoder decodeObjectForKey: @"reactions"];
      _reactionsIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_reactionsIsSet)
  {
    [encoder encodeObject: _reactions forKey: @"reactions"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _reactionsIsSet ? 2654435761 : 0;
  if (_reactionsIsSet)
  {
    hash = (hash * 31) ^ [_reactions hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_UpdateReactionsResponse class]]) {
    return NO;
  }
  AromaService_UpdateReactionsResponse *other = (AromaService_UpdateReactionsResponse *)anObject;
  if ((_reactionsIsSet != other->_reactionsIsSet) ||
      (_reactionsIsSet && ((_reactions || other->_reactions) && ![_reactions isEqual:other->_reactions]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_UpdateReactionsResponse * val = [AromaService_UpdateReactionsResponse new];
  if (_reactionsIsSet)
  {
    val.reactions = [self.reactions copy];
  }
  return val;
}

- (void) setReactions: (NSMutableArray<AromaService_Reaction> *) reactions {
  _reactions = reactions;
  _reactionsIsSet = YES;
}

- (void) unsetReactions {
  _reactions = nil;
  _reactionsIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeLIST) {
          SInt32 _size60;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size60 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size60];
          int _i61;
          for (_i61 = 0; _i61 < _size60; ++_i61)
          {
            AromaReactions_Reaction *_elem62 = [[AromaReactions_Reaction alloc] init];
            if (![_elem62 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem62];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.reactions = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UpdateReactionsResponse" error: __thriftError]) return NO;
  if (_reactionsIsSet) {
    if (_reactions != nil) {
      if (![outProtocol writeFieldBeginWithName: @"reactions" type: TTypeLIST fieldID: 1 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_reactions count] error: __thriftError]) return NO;
        int idx64;
        for (idx64 = 0; idx64 < [_reactions count]; idx64++)
        {
          if (![[_reactions objectAtIndex: idx64] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_UpdateReactionsResponse("];
  [ms appendString: @"reactions:"];
  [ms appendFormat: @"%@", _reactions];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_GetBuzzRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithToken: (AromaService_UserToken) token
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_GetBuzzRequest class]]) {
    return NO;
  }
  AromaService_GetBuzzRequest *other = (AromaService_GetBuzzRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_GetBuzzRequest * val = [AromaService_GetBuzzRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  return val;
}

- (void) setToken: (AromaAuthentication_UserToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GetBuzzRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_GetBuzzRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_GetBuzzResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.freshUsers = @[]    self.freshApplications = @[]    self.failedHealthChecks = @[]    self.generalEvents = @[]  }
  return self;
}

- (instancetype) initWithFreshUsers: (NSArray<AromaService_User> *) freshUsers freshApplications: (NSArray<AromaService_Application> *) freshApplications failedHealthChecks: (NSArray<AromaService_HealthCheckFailed> *) failedHealthChecks generalEvents: (NSArray<AromaService_Event *> *) generalEvents
{
  self = [super init];
  if (self)  {
    _freshUsers = [freshUsers mutableCopy];
    _freshUsersIsSet = YES;
    _freshApplications = [freshApplications mutableCopy];
    _freshApplicationsIsSet = YES;
    _failedHealthChecks = [failedHealthChecks mutableCopy];
    _failedHealthChecksIsSet = YES;
    _generalEvents = [generalEvents mutableCopy];
    _generalEventsIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"freshUsers"])
    {
      _freshUsers = [decoder decodeObjectForKey: @"freshUsers"];
      _freshUsersIsSet = YES;
    }
    if ([decoder containsValueForKey: @"freshApplications"])
    {
      _freshApplications = [decoder decodeObjectForKey: @"freshApplications"];
      _freshApplicationsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"failedHealthChecks"])
    {
      _failedHealthChecks = [decoder decodeObjectForKey: @"failedHealthChecks"];
      _failedHealthChecksIsSet = YES;
    }
    if ([decoder containsValueForKey: @"generalEvents"])
    {
      _generalEvents = [decoder decodeObjectForKey: @"generalEvents"];
      _generalEventsIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_freshUsersIsSet)
  {
    [encoder encodeObject: _freshUsers forKey: @"freshUsers"];
  }
  if (_freshApplicationsIsSet)
  {
    [encoder encodeObject: _freshApplications forKey: @"freshApplications"];
  }
  if (_failedHealthChecksIsSet)
  {
    [encoder encodeObject: _failedHealthChecks forKey: @"failedHealthChecks"];
  }
  if (_generalEventsIsSet)
  {
    [encoder encodeObject: _generalEvents forKey: @"generalEvents"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _freshUsersIsSet ? 2654435761 : 0;
  if (_freshUsersIsSet)
  {
    hash = (hash * 31) ^ [_freshUsers hash];
  }
  hash = (hash * 31) ^ _freshApplicationsIsSet ? 2654435761 : 0;
  if (_freshApplicationsIsSet)
  {
    hash = (hash * 31) ^ [_freshApplications hash];
  }
  hash = (hash * 31) ^ _failedHealthChecksIsSet ? 2654435761 : 0;
  if (_failedHealthChecksIsSet)
  {
    hash = (hash * 31) ^ [_failedHealthChecks hash];
  }
  hash = (hash * 31) ^ _generalEventsIsSet ? 2654435761 : 0;
  if (_generalEventsIsSet)
  {
    hash = (hash * 31) ^ [_generalEvents hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_GetBuzzResponse class]]) {
    return NO;
  }
  AromaService_GetBuzzResponse *other = (AromaService_GetBuzzResponse *)anObject;
  if ((_freshUsersIsSet != other->_freshUsersIsSet) ||
      (_freshUsersIsSet && ((_freshUsers || other->_freshUsers) && ![_freshUsers isEqual:other->_freshUsers]))) {
    return NO;
  }
  if ((_freshApplicationsIsSet != other->_freshApplicationsIsSet) ||
      (_freshApplicationsIsSet && ((_freshApplications || other->_freshApplications) && ![_freshApplications isEqual:other->_freshApplications]))) {
    return NO;
  }
  if ((_failedHealthChecksIsSet != other->_failedHealthChecksIsSet) ||
      (_failedHealthChecksIsSet && ((_failedHealthChecks || other->_failedHealthChecks) && ![_failedHealthChecks isEqual:other->_failedHealthChecks]))) {
    return NO;
  }
  if ((_generalEventsIsSet != other->_generalEventsIsSet) ||
      (_generalEventsIsSet && ((_generalEvents || other->_generalEvents) && ![_generalEvents isEqual:other->_generalEvents]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_GetBuzzResponse * val = [AromaService_GetBuzzResponse new];
  if (_freshUsersIsSet)
  {
    val.freshUsers = [self.freshUsers copy];
  }
  if (_freshApplicationsIsSet)
  {
    val.freshApplications = [self.freshApplications copy];
  }
  if (_failedHealthChecksIsSet)
  {
    val.failedHealthChecks = [self.failedHealthChecks copy];
  }
  if (_generalEventsIsSet)
  {
    val.generalEvents = [self.generalEvents copy];
  }
  return val;
}

- (void) setFreshUsers: (NSMutableArray<AromaService_User> *) freshUsers {
  _freshUsers = freshUsers;
  _freshUsersIsSet = YES;
}

- (void) unsetFreshUsers {
  _freshUsers = nil;
  _freshUsersIsSet = NO;
}

- (void) setFreshApplications: (NSMutableArray<AromaService_Application> *) freshApplications {
  _freshApplications = freshApplications;
  _freshApplicationsIsSet = YES;
}

- (void) unsetFreshApplications {
  _freshApplications = nil;
  _freshApplicationsIsSet = NO;
}

- (void) setFailedHealthChecks: (NSMutableArray<AromaService_HealthCheckFailed> *) failedHealthChecks {
  _failedHealthChecks = failedHealthChecks;
  _failedHealthChecksIsSet = YES;
}

- (void) unsetFailedHealthChecks {
  _failedHealthChecks = nil;
  _failedHealthChecksIsSet = NO;
}

- (void) setGeneralEvents: (NSMutableArray<AromaService_Event *> *) generalEvents {
  _generalEvents = generalEvents;
  _generalEventsIsSet = YES;
}

- (void) unsetGeneralEvents {
  _generalEvents = nil;
  _generalEventsIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeLIST) {
          SInt32 _size65;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size65 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size65];
          int _i66;
          for (_i66 = 0; _i66 < _size65; ++_i66)
          {
            Aroma_User *_elem67 = [[Aroma_User alloc] init];
            if (![_elem67 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem67];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.freshUsers = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeLIST) {
          SInt32 _size68;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size68 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size68];
          int _i69;
          for (_i69 = 0; _i69 < _size68; ++_i69)
          {
            Aroma_Application *_elem70 = [[Aroma_Application alloc] init];
            if (![_elem70 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem70];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.freshApplications = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeLIST) {
          SInt32 _size71;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size71 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size71];
          int _i72;
          for (_i72 = 0; _i72 < _size71; ++_i72)
          {
            AromaEvents_HealthCheckFailed *_elem73 = [[AromaEvents_HealthCheckFailed alloc] init];
            if (![_elem73 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem73];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.failedHealthChecks = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeLIST) {
          SInt32 _size74;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size74 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size74];
          int _i75;
          for (_i75 = 0; _i75 < _size74; ++_i75)
          {
            AromaEvents_Event *_elem76 = [[AromaEvents_Event alloc] init];
            if (![_elem76 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem76];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.generalEvents = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GetBuzzResponse" error: __thriftError]) return NO;
  if (_freshUsersIsSet) {
    if (_freshUsers != nil) {
      if (![outProtocol writeFieldBeginWithName: @"freshUsers" type: TTypeLIST fieldID: 1 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_freshUsers count] error: __thriftError]) return NO;
        int idx78;
        for (idx78 = 0; idx78 < [_freshUsers count]; idx78++)
        {
          if (![[_freshUsers objectAtIndex: idx78] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_freshApplicationsIsSet) {
    if (_freshApplications != nil) {
      if (![outProtocol writeFieldBeginWithName: @"freshApplications" type: TTypeLIST fieldID: 2 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_freshApplications count] error: __thriftError]) return NO;
        int idx80;
        for (idx80 = 0; idx80 < [_freshApplications count]; idx80++)
        {
          if (![[_freshApplications objectAtIndex: idx80] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_failedHealthChecksIsSet) {
    if (_failedHealthChecks != nil) {
      if (![outProtocol writeFieldBeginWithName: @"failedHealthChecks" type: TTypeLIST fieldID: 3 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_failedHealthChecks count] error: __thriftError]) return NO;
        int idx82;
        for (idx82 = 0; idx82 < [_failedHealthChecks count]; idx82++)
        {
          if (![[_failedHealthChecks objectAtIndex: idx82] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_generalEventsIsSet) {
    if (_generalEvents != nil) {
      if (![outProtocol writeFieldBeginWithName: @"generalEvents" type: TTypeLIST fieldID: 4 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_generalEvents count] error: __thriftError]) return NO;
        int idx84;
        for (idx84 = 0; idx84 < [_generalEvents count]; idx84++)
        {
          if (![[_generalEvents objectAtIndex: idx84] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_GetBuzzResponse("];
  [ms appendString: @"freshUsers:"];
  [ms appendFormat: @"%@", _freshUsers];
  [ms appendString: @",freshApplications:"];
  [ms appendFormat: @"%@", _freshApplications];
  [ms appendString: @",failedHealthChecks:"];
  [ms appendFormat: @"%@", _failedHealthChecks];
  [ms appendString: @",generalEvents:"];
  [ms appendFormat: @"%@", _generalEvents];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_GetDashboardRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithToken: (AromaService_UserToken) token
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_GetDashboardRequest class]]) {
    return NO;
  }
  AromaService_GetDashboardRequest *other = (AromaService_GetDashboardRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_GetDashboardRequest * val = [AromaService_GetDashboardRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  return val;
}

- (void) setToken: (AromaAuthentication_UserToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GetDashboardRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_GetDashboardRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_GetDashboardResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.unreadMessageCount = 0;

    self.totalMessagesLastHour = 0;

    self.totalMessagesLast24hrs = 0;

    self.recentMessages = @[]    self.numberOfLowUrgencyMessages = 0;

    self.numberOfMediumUrgencyMessages = 0;

    self.numberOfHighUrgencyMessages = 0;

  }
  return self;
}

- (instancetype) initWithUnreadMessageCount: (AromaService_int) unreadMessageCount totalMessagesLastHour: (AromaService_int) totalMessagesLastHour totalMessagesLast24hrs: (AromaService_int) totalMessagesLast24hrs recentMessages: (NSArray<AromaService_Message *> *) recentMessages numberOfLowUrgencyMessages: (AromaService_int) numberOfLowUrgencyMessages numberOfMediumUrgencyMessages: (AromaService_int) numberOfMediumUrgencyMessages numberOfHighUrgencyMessages: (AromaService_int) numberOfHighUrgencyMessages
{
  self = [super init];
  if (self)  {
    _unreadMessageCount = unreadMessageCount;
    _unreadMessageCountIsSet = YES;
    _totalMessagesLastHour = totalMessagesLastHour;
    _totalMessagesLastHourIsSet = YES;
    _totalMessagesLast24hrs = totalMessagesLast24hrs;
    _totalMessagesLast24hrsIsSet = YES;
    _recentMessages = [recentMessages mutableCopy];
    _recentMessagesIsSet = YES;
    _numberOfLowUrgencyMessages = numberOfLowUrgencyMessages;
    _numberOfLowUrgencyMessagesIsSet = YES;
    _numberOfMediumUrgencyMessages = numberOfMediumUrgencyMessages;
    _numberOfMediumUrgencyMessagesIsSet = YES;
    _numberOfHighUrgencyMessages = numberOfHighUrgencyMessages;
    _numberOfHighUrgencyMessagesIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"unreadMessageCount"])
    {
      _unreadMessageCount = [decoder decodeInt32ForKey: @"unreadMessageCount"];
      _unreadMessageCountIsSet = YES;
    }
    if ([decoder containsValueForKey: @"totalMessagesLastHour"])
    {
      _totalMessagesLastHour = [decoder decodeInt32ForKey: @"totalMessagesLastHour"];
      _totalMessagesLastHourIsSet = YES;
    }
    if ([decoder containsValueForKey: @"totalMessagesLast24hrs"])
    {
      _totalMessagesLast24hrs = [decoder decodeInt32ForKey: @"totalMessagesLast24hrs"];
      _totalMessagesLast24hrsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"recentMessages"])
    {
      _recentMessages = [decoder decodeObjectForKey: @"recentMessages"];
      _recentMessagesIsSet = YES;
    }
    if ([decoder containsValueForKey: @"numberOfLowUrgencyMessages"])
    {
      _numberOfLowUrgencyMessages = [decoder decodeInt32ForKey: @"numberOfLowUrgencyMessages"];
      _numberOfLowUrgencyMessagesIsSet = YES;
    }
    if ([decoder containsValueForKey: @"numberOfMediumUrgencyMessages"])
    {
      _numberOfMediumUrgencyMessages = [decoder decodeInt32ForKey: @"numberOfMediumUrgencyMessages"];
      _numberOfMediumUrgencyMessagesIsSet = YES;
    }
    if ([decoder containsValueForKey: @"numberOfHighUrgencyMessages"])
    {
      _numberOfHighUrgencyMessages = [decoder decodeInt32ForKey: @"numberOfHighUrgencyMessages"];
      _numberOfHighUrgencyMessagesIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_unreadMessageCountIsSet)
  {
    [encoder encodeInt32: _unreadMessageCount forKey: @"unreadMessageCount"];
  }
  if (_totalMessagesLastHourIsSet)
  {
    [encoder encodeInt32: _totalMessagesLastHour forKey: @"totalMessagesLastHour"];
  }
  if (_totalMessagesLast24hrsIsSet)
  {
    [encoder encodeInt32: _totalMessagesLast24hrs forKey: @"totalMessagesLast24hrs"];
  }
  if (_recentMessagesIsSet)
  {
    [encoder encodeObject: _recentMessages forKey: @"recentMessages"];
  }
  if (_numberOfLowUrgencyMessagesIsSet)
  {
    [encoder encodeInt32: _numberOfLowUrgencyMessages forKey: @"numberOfLowUrgencyMessages"];
  }
  if (_numberOfMediumUrgencyMessagesIsSet)
  {
    [encoder encodeInt32: _numberOfMediumUrgencyMessages forKey: @"numberOfMediumUrgencyMessages"];
  }
  if (_numberOfHighUrgencyMessagesIsSet)
  {
    [encoder encodeInt32: _numberOfHighUrgencyMessages forKey: @"numberOfHighUrgencyMessages"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _unreadMessageCountIsSet ? 2654435761 : 0;
  if (_unreadMessageCountIsSet)
  {
    hash = (hash * 31) ^ [@(_unreadMessageCount) hash];
  }
  hash = (hash * 31) ^ _totalMessagesLastHourIsSet ? 2654435761 : 0;
  if (_totalMessagesLastHourIsSet)
  {
    hash = (hash * 31) ^ [@(_totalMessagesLastHour) hash];
  }
  hash = (hash * 31) ^ _totalMessagesLast24hrsIsSet ? 2654435761 : 0;
  if (_totalMessagesLast24hrsIsSet)
  {
    hash = (hash * 31) ^ [@(_totalMessagesLast24hrs) hash];
  }
  hash = (hash * 31) ^ _recentMessagesIsSet ? 2654435761 : 0;
  if (_recentMessagesIsSet)
  {
    hash = (hash * 31) ^ [_recentMessages hash];
  }
  hash = (hash * 31) ^ _numberOfLowUrgencyMessagesIsSet ? 2654435761 : 0;
  if (_numberOfLowUrgencyMessagesIsSet)
  {
    hash = (hash * 31) ^ [@(_numberOfLowUrgencyMessages) hash];
  }
  hash = (hash * 31) ^ _numberOfMediumUrgencyMessagesIsSet ? 2654435761 : 0;
  if (_numberOfMediumUrgencyMessagesIsSet)
  {
    hash = (hash * 31) ^ [@(_numberOfMediumUrgencyMessages) hash];
  }
  hash = (hash * 31) ^ _numberOfHighUrgencyMessagesIsSet ? 2654435761 : 0;
  if (_numberOfHighUrgencyMessagesIsSet)
  {
    hash = (hash * 31) ^ [@(_numberOfHighUrgencyMessages) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_GetDashboardResponse class]]) {
    return NO;
  }
  AromaService_GetDashboardResponse *other = (AromaService_GetDashboardResponse *)anObject;
  if ((_unreadMessageCountIsSet != other->_unreadMessageCountIsSet) ||
      (_unreadMessageCountIsSet && (_unreadMessageCount != other->_unreadMessageCount))) {
    return NO;
  }
  if ((_totalMessagesLastHourIsSet != other->_totalMessagesLastHourIsSet) ||
      (_totalMessagesLastHourIsSet && (_totalMessagesLastHour != other->_totalMessagesLastHour))) {
    return NO;
  }
  if ((_totalMessagesLast24hrsIsSet != other->_totalMessagesLast24hrsIsSet) ||
      (_totalMessagesLast24hrsIsSet && (_totalMessagesLast24hrs != other->_totalMessagesLast24hrs))) {
    return NO;
  }
  if ((_recentMessagesIsSet != other->_recentMessagesIsSet) ||
      (_recentMessagesIsSet && ((_recentMessages || other->_recentMessages) && ![_recentMessages isEqual:other->_recentMessages]))) {
    return NO;
  }
  if ((_numberOfLowUrgencyMessagesIsSet != other->_numberOfLowUrgencyMessagesIsSet) ||
      (_numberOfLowUrgencyMessagesIsSet && (_numberOfLowUrgencyMessages != other->_numberOfLowUrgencyMessages))) {
    return NO;
  }
  if ((_numberOfMediumUrgencyMessagesIsSet != other->_numberOfMediumUrgencyMessagesIsSet) ||
      (_numberOfMediumUrgencyMessagesIsSet && (_numberOfMediumUrgencyMessages != other->_numberOfMediumUrgencyMessages))) {
    return NO;
  }
  if ((_numberOfHighUrgencyMessagesIsSet != other->_numberOfHighUrgencyMessagesIsSet) ||
      (_numberOfHighUrgencyMessagesIsSet && (_numberOfHighUrgencyMessages != other->_numberOfHighUrgencyMessages))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_GetDashboardResponse * val = [AromaService_GetDashboardResponse new];
  if (_unreadMessageCountIsSet)
  {
    val.unreadMessageCount = self.unreadMessageCount;
  }
  if (_totalMessagesLastHourIsSet)
  {
    val.totalMessagesLastHour = self.totalMessagesLastHour;
  }
  if (_totalMessagesLast24hrsIsSet)
  {
    val.totalMessagesLast24hrs = self.totalMessagesLast24hrs;
  }
  if (_recentMessagesIsSet)
  {
    val.recentMessages = [self.recentMessages copy];
  }
  if (_numberOfLowUrgencyMessagesIsSet)
  {
    val.numberOfLowUrgencyMessages = self.numberOfLowUrgencyMessages;
  }
  if (_numberOfMediumUrgencyMessagesIsSet)
  {
    val.numberOfMediumUrgencyMessages = self.numberOfMediumUrgencyMessages;
  }
  if (_numberOfHighUrgencyMessagesIsSet)
  {
    val.numberOfHighUrgencyMessages = self.numberOfHighUrgencyMessages;
  }
  return val;
}

- (void) setUnreadMessageCount: (SInt32) unreadMessageCount {
  _unreadMessageCount = unreadMessageCount;
  _unreadMessageCountIsSet = YES;
}

- (void) unsetUnreadMessageCount {
  _unreadMessageCountIsSet = NO;
}

- (void) setTotalMessagesLastHour: (SInt32) totalMessagesLastHour {
  _totalMessagesLastHour = totalMessagesLastHour;
  _totalMessagesLastHourIsSet = YES;
}

- (void) unsetTotalMessagesLastHour {
  _totalMessagesLastHourIsSet = NO;
}

- (void) setTotalMessagesLast24hrs: (SInt32) totalMessagesLast24hrs {
  _totalMessagesLast24hrs = totalMessagesLast24hrs;
  _totalMessagesLast24hrsIsSet = YES;
}

- (void) unsetTotalMessagesLast24hrs {
  _totalMessagesLast24hrsIsSet = NO;
}

- (void) setRecentMessages: (NSMutableArray<AromaService_Message *> *) recentMessages {
  _recentMessages = recentMessages;
  _recentMessagesIsSet = YES;
}

- (void) unsetRecentMessages {
  _recentMessages = nil;
  _recentMessagesIsSet = NO;
}

- (void) setNumberOfLowUrgencyMessages: (SInt32) numberOfLowUrgencyMessages {
  _numberOfLowUrgencyMessages = numberOfLowUrgencyMessages;
  _numberOfLowUrgencyMessagesIsSet = YES;
}

- (void) unsetNumberOfLowUrgencyMessages {
  _numberOfLowUrgencyMessagesIsSet = NO;
}

- (void) setNumberOfMediumUrgencyMessages: (SInt32) numberOfMediumUrgencyMessages {
  _numberOfMediumUrgencyMessages = numberOfMediumUrgencyMessages;
  _numberOfMediumUrgencyMessagesIsSet = YES;
}

- (void) unsetNumberOfMediumUrgencyMessages {
  _numberOfMediumUrgencyMessagesIsSet = NO;
}

- (void) setNumberOfHighUrgencyMessages: (SInt32) numberOfHighUrgencyMessages {
  _numberOfHighUrgencyMessages = numberOfHighUrgencyMessages;
  _numberOfHighUrgencyMessagesIsSet = YES;
}

- (void) unsetNumberOfHighUrgencyMessages {
  _numberOfHighUrgencyMessagesIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeI32) {
          SInt32 fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.unreadMessageCount = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeI32) {
          SInt32 fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.totalMessagesLastHour = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeI32) {
          SInt32 fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.totalMessagesLast24hrs = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeLIST) {
          SInt32 _size85;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size85 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size85];
          int _i86;
          for (_i86 = 0; _i86 < _size85; ++_i86)
          {
            Aroma_Message *_elem87 = [[Aroma_Message alloc] init];
            if (![_elem87 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem87];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.recentMessages = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeI32) {
          SInt32 fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.numberOfLowUrgencyMessages = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeI32) {
          SInt32 fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.numberOfMediumUrgencyMessages = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 7:
        if (fieldType == TTypeI32) {
          SInt32 fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.numberOfHighUrgencyMessages = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GetDashboardResponse" error: __thriftError]) return NO;
  if (_unreadMessageCountIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"unreadMessageCount" type: TTypeI32 fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _unreadMessageCount error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_totalMessagesLastHourIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"totalMessagesLastHour" type: TTypeI32 fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _totalMessagesLastHour error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_totalMessagesLast24hrsIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"totalMessagesLast24hrs" type: TTypeI32 fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _totalMessagesLast24hrs error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_recentMessagesIsSet) {
    if (_recentMessages != nil) {
      if (![outProtocol writeFieldBeginWithName: @"recentMessages" type: TTypeLIST fieldID: 4 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_recentMessages count] error: __thriftError]) return NO;
        int idx89;
        for (idx89 = 0; idx89 < [_recentMessages count]; idx89++)
        {
          if (![[_recentMessages objectAtIndex: idx89] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_numberOfLowUrgencyMessagesIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"numberOfLowUrgencyMessages" type: TTypeI32 fieldID: 5 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _numberOfLowUrgencyMessages error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_numberOfMediumUrgencyMessagesIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"numberOfMediumUrgencyMessages" type: TTypeI32 fieldID: 6 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _numberOfMediumUrgencyMessages error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_numberOfHighUrgencyMessagesIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"numberOfHighUrgencyMessages" type: TTypeI32 fieldID: 7 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _numberOfHighUrgencyMessages error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_GetDashboardResponse("];
  [ms appendString: @"unreadMessageCount:"];
  [ms appendFormat: @"%i", (int)_unreadMessageCount];
  [ms appendString: @",totalMessagesLastHour:"];
  [ms appendFormat: @"%i", (int)_totalMessagesLastHour];
  [ms appendString: @",totalMessagesLast24hrs:"];
  [ms appendFormat: @"%i", (int)_totalMessagesLast24hrs];
  [ms appendString: @",recentMessages:"];
  [ms appendFormat: @"%@", _recentMessages];
  [ms appendString: @",numberOfLowUrgencyMessages:"];
  [ms appendFormat: @"%i", (int)_numberOfLowUrgencyMessages];
  [ms appendString: @",numberOfMediumUrgencyMessages:"];
  [ms appendFormat: @"%i", (int)_numberOfMediumUrgencyMessages];
  [ms appendString: @",numberOfHighUrgencyMessages:"];
  [ms appendFormat: @"%i", (int)_numberOfHighUrgencyMessages];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_CheckIfDeviceIsRegisteredRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithToken: (AromaService_UserToken) token device: (AromaService_MobileDevice) device
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
    _device = device;
    _deviceIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"device"])
    {
      _device = [decoder decodeObjectForKey: @"device"];
      _deviceIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
  if (_deviceIsSet)
  {
    [encoder encodeObject: _device forKey: @"device"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  hash = (hash * 31) ^ _deviceIsSet ? 2654435761 : 0;
  if (_deviceIsSet)
  {
    hash = (hash * 31) ^ [_device hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_CheckIfDeviceIsRegisteredRequest class]]) {
    return NO;
  }
  AromaService_CheckIfDeviceIsRegisteredRequest *other = (AromaService_CheckIfDeviceIsRegisteredRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  if ((_deviceIsSet != other->_deviceIsSet) ||
      (_deviceIsSet && ((_device || other->_device) && ![_device isEqual:other->_device]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_CheckIfDeviceIsRegisteredRequest * val = [AromaService_CheckIfDeviceIsRegisteredRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  if (_deviceIsSet)
  {
    val.device = [self.device copy];
  }
  return val;
}

- (void) setToken: (AromaAuthentication_UserToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (void) setDevice: (AromaChannels_MobileDevice *) device {
  _device = device;
  _deviceIsSet = YES;
}

- (void) unsetDevice {
  _device = nil;
  _deviceIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaChannels_MobileDevice *fieldValue = [[AromaChannels_MobileDevice alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.device = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"CheckIfDeviceIsRegisteredRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_deviceIsSet) {
    if (_device != nil) {
      if (![outProtocol writeFieldBeginWithName: @"device" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_device write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_CheckIfDeviceIsRegisteredRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @",device:"];
  [ms appendFormat: @"%@", _device];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_CheckIfDeviceIsRegisteredResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithIsRegistered: (BOOL) isRegistered
{
  self = [super init];
  if (self)  {
    _isRegistered = isRegistered;
    _isRegisteredIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"isRegistered"])
    {
      _isRegistered = [decoder decodeBoolForKey: @"isRegistered"];
      _isRegisteredIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_isRegisteredIsSet)
  {
    [encoder encodeBool: _isRegistered forKey: @"isRegistered"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _isRegisteredIsSet ? 2654435761 : 0;
  if (_isRegisteredIsSet)
  {
    hash = (hash * 31) ^ [@(_isRegistered) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_CheckIfDeviceIsRegisteredResponse class]]) {
    return NO;
  }
  AromaService_CheckIfDeviceIsRegisteredResponse *other = (AromaService_CheckIfDeviceIsRegisteredResponse *)anObject;
  if ((_isRegisteredIsSet != other->_isRegisteredIsSet) ||
      (_isRegisteredIsSet && (_isRegistered != other->_isRegistered))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_CheckIfDeviceIsRegisteredResponse * val = [AromaService_CheckIfDeviceIsRegisteredResponse new];
  if (_isRegisteredIsSet)
  {
    val.isRegistered = self.isRegistered;
  }
  return val;
}

- (void) setIsRegistered: (BOOL) isRegistered {
  _isRegistered = isRegistered;
  _isRegisteredIsSet = YES;
}

- (void) unsetIsRegistered {
  _isRegisteredIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeBOOL) {
          BOOL fieldValue;
          if (![inProtocol readBool:&fieldValue error: __thriftError]) return NO;
          self.isRegistered = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"CheckIfDeviceIsRegisteredResponse" error: __thriftError]) return NO;
  if (_isRegisteredIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"isRegistered" type: TTypeBOOL fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeBool: _isRegistered error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_isRegisteredIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"isRegistered"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_CheckIfDeviceIsRegisteredResponse("];
  [ms appendString: @"isRegistered:"];
  [ms appendFormat: @"%i", _isRegistered];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_GetRegisteredDevicesRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithToken: (AromaService_UserToken) token
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_GetRegisteredDevicesRequest class]]) {
    return NO;
  }
  AromaService_GetRegisteredDevicesRequest *other = (AromaService_GetRegisteredDevicesRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_GetRegisteredDevicesRequest * val = [AromaService_GetRegisteredDevicesRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  return val;
}

- (void) setToken: (AromaAuthentication_UserToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GetRegisteredDevicesRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_GetRegisteredDevicesRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_GetRegisteredDevicesResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.devices = @[]  }
  return self;
}

- (instancetype) initWithDevices: (NSArray<AromaService_MobileDevice> *) devices
{
  self = [super init];
  if (self)  {
    _devices = [devices mutableCopy];
    _devicesIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"devices"])
    {
      _devices = [decoder decodeObjectForKey: @"devices"];
      _devicesIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_devicesIsSet)
  {
    [encoder encodeObject: _devices forKey: @"devices"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _devicesIsSet ? 2654435761 : 0;
  if (_devicesIsSet)
  {
    hash = (hash * 31) ^ [_devices hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_GetRegisteredDevicesResponse class]]) {
    return NO;
  }
  AromaService_GetRegisteredDevicesResponse *other = (AromaService_GetRegisteredDevicesResponse *)anObject;
  if ((_devicesIsSet != other->_devicesIsSet) ||
      (_devicesIsSet && ((_devices || other->_devices) && ![_devices isEqual:other->_devices]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_GetRegisteredDevicesResponse * val = [AromaService_GetRegisteredDevicesResponse new];
  if (_devicesIsSet)
  {
    val.devices = [self.devices copy];
  }
  return val;
}

- (void) setDevices: (NSMutableArray<AromaService_MobileDevice> *) devices {
  _devices = devices;
  _devicesIsSet = YES;
}

- (void) unsetDevices {
  _devices = nil;
  _devicesIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeLIST) {
          SInt32 _size90;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size90 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size90];
          int _i91;
          for (_i91 = 0; _i91 < _size90; ++_i91)
          {
            AromaChannels_MobileDevice *_elem92 = [[AromaChannels_MobileDevice alloc] init];
            if (![_elem92 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem92];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.devices = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GetRegisteredDevicesResponse" error: __thriftError]) return NO;
  if (_devicesIsSet) {
    if (_devices != nil) {
      if (![outProtocol writeFieldBeginWithName: @"devices" type: TTypeLIST fieldID: 1 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_devices count] error: __thriftError]) return NO;
        int idx94;
        for (idx94 = 0; idx94 < [_devices count]; idx94++)
        {
          if (![[_devices objectAtIndex: idx94] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_GetRegisteredDevicesResponse("];
  [ms appendString: @"devices:"];
  [ms appendFormat: @"%@", _devices];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_RegisterDeviceRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithToken: (AromaService_UserToken) token device: (AromaService_MobileDevice) device
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
    _device = device;
    _deviceIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"device"])
    {
      _device = [decoder decodeObjectForKey: @"device"];
      _deviceIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
  if (_deviceIsSet)
  {
    [encoder encodeObject: _device forKey: @"device"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  hash = (hash * 31) ^ _deviceIsSet ? 2654435761 : 0;
  if (_deviceIsSet)
  {
    hash = (hash * 31) ^ [_device hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_RegisterDeviceRequest class]]) {
    return NO;
  }
  AromaService_RegisterDeviceRequest *other = (AromaService_RegisterDeviceRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  if ((_deviceIsSet != other->_deviceIsSet) ||
      (_deviceIsSet && ((_device || other->_device) && ![_device isEqual:other->_device]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_RegisterDeviceRequest * val = [AromaService_RegisterDeviceRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  if (_deviceIsSet)
  {
    val.device = [self.device copy];
  }
  return val;
}

- (void) setToken: (AromaAuthentication_UserToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (void) setDevice: (AromaChannels_MobileDevice *) device {
  _device = device;
  _deviceIsSet = YES;
}

- (void) unsetDevice {
  _device = nil;
  _deviceIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaChannels_MobileDevice *fieldValue = [[AromaChannels_MobileDevice alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.device = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"RegisterDeviceRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_deviceIsSet) {
    if (_device != nil) {
      if (![outProtocol writeFieldBeginWithName: @"device" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_device write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_RegisterDeviceRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @",device:"];
  [ms appendFormat: @"%@", _device];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_RegisterDeviceResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.message = @"Successfully Registered";

  }
  return self;
}

- (instancetype) initWithMessage: (NSString *) message
{
  self = [super init];
  if (self)  {
    _message = message;
    _messageIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"message"])
    {
      _message = [decoder decodeObjectForKey: @"message"];
      _messageIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_messageIsSet)
  {
    [encoder encodeObject: _message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _messageIsSet ? 2654435761 : 0;
  if (_messageIsSet)
  {
    hash = (hash * 31) ^ [_message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_RegisterDeviceResponse class]]) {
    return NO;
  }
  AromaService_RegisterDeviceResponse *other = (AromaService_RegisterDeviceResponse *)anObject;
  if ((_messageIsSet != other->_messageIsSet) ||
      (_messageIsSet && ((_message || other->_message) && ![_message isEqual:other->_message]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_RegisterDeviceResponse * val = [AromaService_RegisterDeviceResponse new];
  if (_messageIsSet)
  {
    val.message = [self.message copy];
  }
  return val;
}

- (void) setMessage: (NSString *) message {
  _message = message;
  _messageIsSet = YES;
}

- (void) unsetMessage {
  _message = nil;
  _messageIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.message = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"RegisterDeviceResponse" error: __thriftError]) return NO;
  if (_messageIsSet) {
    if (_message != nil) {
      if (![outProtocol writeFieldBeginWithName: @"message" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _message error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_RegisterDeviceResponse("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", _message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_UnregisterDeviceRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithToken: (AromaService_UserToken) token device: (AromaService_MobileDevice) device
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
    _device = device;
    _deviceIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"device"])
    {
      _device = [decoder decodeObjectForKey: @"device"];
      _deviceIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
  if (_deviceIsSet)
  {
    [encoder encodeObject: _device forKey: @"device"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  hash = (hash * 31) ^ _deviceIsSet ? 2654435761 : 0;
  if (_deviceIsSet)
  {
    hash = (hash * 31) ^ [_device hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_UnregisterDeviceRequest class]]) {
    return NO;
  }
  AromaService_UnregisterDeviceRequest *other = (AromaService_UnregisterDeviceRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  if ((_deviceIsSet != other->_deviceIsSet) ||
      (_deviceIsSet && ((_device || other->_device) && ![_device isEqual:other->_device]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_UnregisterDeviceRequest * val = [AromaService_UnregisterDeviceRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  if (_deviceIsSet)
  {
    val.device = [self.device copy];
  }
  return val;
}

- (void) setToken: (AromaAuthentication_UserToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (void) setDevice: (AromaChannels_MobileDevice *) device {
  _device = device;
  _deviceIsSet = YES;
}

- (void) unsetDevice {
  _device = nil;
  _deviceIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaChannels_MobileDevice *fieldValue = [[AromaChannels_MobileDevice alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.device = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UnregisterDeviceRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_deviceIsSet) {
    if (_device != nil) {
      if (![outProtocol writeFieldBeginWithName: @"device" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_device write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_UnregisterDeviceRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @",device:"];
  [ms appendFormat: @"%@", _device];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_UnregisterDeviceResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRemovedDevice: (AromaService_MobileDevice) removedDevice
{
  self = [super init];
  if (self)  {
    _removedDevice = removedDevice;
    _removedDeviceIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"removedDevice"])
    {
      _removedDevice = [decoder decodeObjectForKey: @"removedDevice"];
      _removedDeviceIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_removedDeviceIsSet)
  {
    [encoder encodeObject: _removedDevice forKey: @"removedDevice"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _removedDeviceIsSet ? 2654435761 : 0;
  if (_removedDeviceIsSet)
  {
    hash = (hash * 31) ^ [_removedDevice hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_UnregisterDeviceResponse class]]) {
    return NO;
  }
  AromaService_UnregisterDeviceResponse *other = (AromaService_UnregisterDeviceResponse *)anObject;
  if ((_removedDeviceIsSet != other->_removedDeviceIsSet) ||
      (_removedDeviceIsSet && ((_removedDevice || other->_removedDevice) && ![_removedDevice isEqual:other->_removedDevice]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_UnregisterDeviceResponse * val = [AromaService_UnregisterDeviceResponse new];
  if (_removedDeviceIsSet)
  {
    val.removedDevice = [self.removedDevice copy];
  }
  return val;
}

- (void) setRemovedDevice: (AromaChannels_MobileDevice *) removedDevice {
  _removedDevice = removedDevice;
  _removedDeviceIsSet = YES;
}

- (void) unsetRemovedDevice {
  _removedDevice = nil;
  _removedDeviceIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaChannels_MobileDevice *fieldValue = [[AromaChannels_MobileDevice alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.removedDevice = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UnregisterDeviceResponse" error: __thriftError]) return NO;
  if (_removedDeviceIsSet) {
    if (_removedDevice != nil) {
      if (![outProtocol writeFieldBeginWithName: @"removedDevice" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_removedDevice write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_UnregisterDeviceResponse("];
  [ms appendString: @"removedDevice:"];
  [ms appendFormat: @"%@", _removedDevice];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_RegisterHealthCheckRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithToken: (AromaService_UserToken) token endpoint: (AromaService_Endpoint) endpoint
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
    _endpoint = endpoint;
    _endpointIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"endpoint"])
    {
      _endpoint = [decoder decodeObjectForKey: @"endpoint"];
      _endpointIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
  if (_endpointIsSet)
  {
    [encoder encodeObject: _endpoint forKey: @"endpoint"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  hash = (hash * 31) ^ _endpointIsSet ? 2654435761 : 0;
  if (_endpointIsSet)
  {
    hash = (hash * 31) ^ [_endpoint hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_RegisterHealthCheckRequest class]]) {
    return NO;
  }
  AromaService_RegisterHealthCheckRequest *other = (AromaService_RegisterHealthCheckRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  if ((_endpointIsSet != other->_endpointIsSet) ||
      (_endpointIsSet && ((_endpoint || other->_endpoint) && ![_endpoint isEqual:other->_endpoint]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_RegisterHealthCheckRequest * val = [AromaService_RegisterHealthCheckRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  if (_endpointIsSet)
  {
    val.endpoint = [self.endpoint copy];
  }
  return val;
}

- (void) setToken: (AromaAuthentication_UserToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (void) setEndpoint: (AromaEndpoint_Endpoint *) endpoint {
  _endpoint = endpoint;
  _endpointIsSet = YES;
}

- (void) unsetEndpoint {
  _endpoint = nil;
  _endpointIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaEndpoint_Endpoint *fieldValue = [[AromaEndpoint_Endpoint alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.endpoint = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"RegisterHealthCheckRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_endpointIsSet) {
    if (_endpoint != nil) {
      if (![outProtocol writeFieldBeginWithName: @"endpoint" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_endpoint write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_RegisterHealthCheckRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @",endpoint:"];
  [ms appendFormat: @"%@", _endpoint];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_RegisterHealthCheckResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithMessage: (NSString *) message healthCheckToken: (NSString *) healthCheckToken
{
  self = [super init];
  if (self)  {
    _message = message;
    _messageIsSet = YES;
    _healthCheckToken = healthCheckToken;
    _healthCheckTokenIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"message"])
    {
      _message = [decoder decodeObjectForKey: @"message"];
      _messageIsSet = YES;
    }
    if ([decoder containsValueForKey: @"healthCheckToken"])
    {
      _healthCheckToken = [decoder decodeObjectForKey: @"healthCheckToken"];
      _healthCheckTokenIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_messageIsSet)
  {
    [encoder encodeObject: _message forKey: @"message"];
  }
  if (_healthCheckTokenIsSet)
  {
    [encoder encodeObject: _healthCheckToken forKey: @"healthCheckToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _messageIsSet ? 2654435761 : 0;
  if (_messageIsSet)
  {
    hash = (hash * 31) ^ [_message hash];
  }
  hash = (hash * 31) ^ _healthCheckTokenIsSet ? 2654435761 : 0;
  if (_healthCheckTokenIsSet)
  {
    hash = (hash * 31) ^ [_healthCheckToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_RegisterHealthCheckResponse class]]) {
    return NO;
  }
  AromaService_RegisterHealthCheckResponse *other = (AromaService_RegisterHealthCheckResponse *)anObject;
  if ((_messageIsSet != other->_messageIsSet) ||
      (_messageIsSet && ((_message || other->_message) && ![_message isEqual:other->_message]))) {
    return NO;
  }
  if ((_healthCheckTokenIsSet != other->_healthCheckTokenIsSet) ||
      (_healthCheckTokenIsSet && ((_healthCheckToken || other->_healthCheckToken) && ![_healthCheckToken isEqual:other->_healthCheckToken]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_RegisterHealthCheckResponse * val = [AromaService_RegisterHealthCheckResponse new];
  if (_messageIsSet)
  {
    val.message = [self.message copy];
  }
  if (_healthCheckTokenIsSet)
  {
    val.healthCheckToken = [self.healthCheckToken copy];
  }
  return val;
}

- (void) setMessage: (NSString *) message {
  _message = message;
  _messageIsSet = YES;
}

- (void) unsetMessage {
  _message = nil;
  _messageIsSet = NO;
}

- (void) setHealthCheckToken: (NSString *) healthCheckToken {
  _healthCheckToken = healthCheckToken;
  _healthCheckTokenIsSet = YES;
}

- (void) unsetHealthCheckToken {
  _healthCheckToken = nil;
  _healthCheckTokenIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.message = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.healthCheckToken = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"RegisterHealthCheckResponse" error: __thriftError]) return NO;
  if (_messageIsSet) {
    if (_message != nil) {
      if (![outProtocol writeFieldBeginWithName: @"message" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _message error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_healthCheckTokenIsSet) {
    if (_healthCheckToken != nil) {
      if (![outProtocol writeFieldBeginWithName: @"healthCheckToken" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _healthCheckToken error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_RegisterHealthCheckResponse("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", _message];
  [ms appendString: @",healthCheckToken:"];
  [ms appendFormat: @"\"%@\"", _healthCheckToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_GetServiceAnnouncementsRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithToken: (AromaService_UserToken) token
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_GetServiceAnnouncementsRequest class]]) {
    return NO;
  }
  AromaService_GetServiceAnnouncementsRequest *other = (AromaService_GetServiceAnnouncementsRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_GetServiceAnnouncementsRequest * val = [AromaService_GetServiceAnnouncementsRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  return val;
}

- (void) setToken: (AromaAuthentication_UserToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_UserToken *fieldValue = [[AromaAuthentication_UserToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GetServiceAnnouncementsRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_GetServiceAnnouncementsRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaService_GetServiceAnnouncementsResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.serviceAnnouncements = @[]  }
  return self;
}

- (instancetype) initWithServiceAnnouncements: (NSArray<AromaService_ServiceAnnouncement *> *) serviceAnnouncements
{
  self = [super init];
  if (self)  {
    _serviceAnnouncements = [serviceAnnouncements mutableCopy];
    _serviceAnnouncementsIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"serviceAnnouncements"])
    {
      _serviceAnnouncements = [decoder decodeObjectForKey: @"serviceAnnouncements"];
      _serviceAnnouncementsIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_serviceAnnouncementsIsSet)
  {
    [encoder encodeObject: _serviceAnnouncements forKey: @"serviceAnnouncements"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _serviceAnnouncementsIsSet ? 2654435761 : 0;
  if (_serviceAnnouncementsIsSet)
  {
    hash = (hash * 31) ^ [_serviceAnnouncements hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_GetServiceAnnouncementsResponse class]]) {
    return NO;
  }
  AromaService_GetServiceAnnouncementsResponse *other = (AromaService_GetServiceAnnouncementsResponse *)anObject;
  if ((_serviceAnnouncementsIsSet != other->_serviceAnnouncementsIsSet) ||
      (_serviceAnnouncementsIsSet && ((_serviceAnnouncements || other->_serviceAnnouncements) && ![_serviceAnnouncements isEqual:other->_serviceAnnouncements]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_GetServiceAnnouncementsResponse * val = [AromaService_GetServiceAnnouncementsResponse new];
  if (_serviceAnnouncementsIsSet)
  {
    val.serviceAnnouncements = [self.serviceAnnouncements copy];
  }
  return val;
}

- (void) setServiceAnnouncements: (NSMutableArray<AromaService_ServiceAnnouncement *> *) serviceAnnouncements {
  _serviceAnnouncements = serviceAnnouncements;
  _serviceAnnouncementsIsSet = YES;
}

- (void) unsetServiceAnnouncements {
  _serviceAnnouncements = nil;
  _serviceAnnouncementsIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeLIST) {
          SInt32 _size95;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size95 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size95];
          int _i96;
          for (_i96 = 0; _i96 < _size95; ++_i96)
          {
            Aroma_ServiceAnnouncement *_elem97 = [[Aroma_ServiceAnnouncement alloc] init];
            if (![_elem97 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem97];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.serviceAnnouncements = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GetServiceAnnouncementsResponse" error: __thriftError]) return NO;
  if (_serviceAnnouncementsIsSet) {
    if (_serviceAnnouncements != nil) {
      if (![outProtocol writeFieldBeginWithName: @"serviceAnnouncements" type: TTypeLIST fieldID: 1 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_serviceAnnouncements count] error: __thriftError]) return NO;
        int idx99;
        for (idx99 = 0; idx99 < [_serviceAnnouncements count]; idx99++)
        {
          if (![[_serviceAnnouncements objectAtIndex: idx99] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_GetServiceAnnouncementsResponse("];
  [ms appendString: @"serviceAnnouncements:"];
  [ms appendFormat: @"%@", _serviceAnnouncements];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

NSString *AromaService_AromaServiceErrorDomain = @"AromaService_AromaServiceErrorDomain";

AromaService_int AromaService_SERVICE_PORT = 7010;
AromaEndpoint_TcpEndpoint * AromaService_PRODUCTION_ENDPOINT;
AromaEndpoint_TcpEndpoint * AromaService_BETA_ENDPOINT;
Aroma_Dimension * AromaService_MAX_PROFILE_IMAGE_DIMENSION;
AromaService_int AromaService_MAX_PROFILE_PICTURE_SIZE_IN_KILOBYTES = 100;
Aroma_LengthOfTime * AromaService_DEFAULT_APP_TOKEN_LIFETIME;
Aroma_Dimension * AromaService_MAX_APPLICATION_ICON_DIMENSION;
AromaService_int AromaService_MAX_APPLICATION_ICON_SIZE_IN_KILOBYTES = 100;
AromaService_int AromaService_APPLICATION_NAME_MAX_LENGTH = 20;
AromaService_int AromaService_APPLICATION_MAX_OWNERS = 10;
AromaService_int AromaService_MAX_MESSAGE_LENGTH = 5000;
Aroma_LengthOfTime * AromaService_DEFAULT_INBOX_LIFETIME;
Aroma_LengthOfTime * AromaService_DEFAULT_ACTIVITY_LIFETIME;
AromaService_int AromaService_MAXIMUM_REACTIONS = 100;

@implementation AromaService_AromaServiceConstants

+ (void) initialize {

  AromaService_PRODUCTION_ENDPOINT = [AromaEndpoint_TcpEndpoint new];
  [AromaService_PRODUCTION_ENDPOINT setHostname:@"aroma-srv.aroma.tech"];
  [AromaService_PRODUCTION_ENDPOINT setPort:80];
;

  AromaService_BETA_ENDPOINT = [AromaEndpoint_TcpEndpoint new];
  [AromaService_BETA_ENDPOINT setHostname:@"aroma-srv.beta.aroma.tech"];
  [AromaService_BETA_ENDPOINT setPort:7010];
;

  AromaService_MAX_PROFILE_IMAGE_DIMENSION = [Aroma_Dimension new];
  [AromaService_MAX_PROFILE_IMAGE_DIMENSION setWidth:1024];
  [AromaService_MAX_PROFILE_IMAGE_DIMENSION setHeight:1024];
;

  AromaService_DEFAULT_APP_TOKEN_LIFETIME = [Aroma_LengthOfTime new];
  [AromaService_DEFAULT_APP_TOKEN_LIFETIME setValue:180];
  [AromaService_DEFAULT_APP_TOKEN_LIFETIME setUnit:5];
;

  AromaService_MAX_APPLICATION_ICON_DIMENSION = [Aroma_Dimension new];
  [AromaService_MAX_APPLICATION_ICON_DIMENSION setWidth:1024];
  [AromaService_MAX_APPLICATION_ICON_DIMENSION setHeight:1024];
;

  AromaService_DEFAULT_INBOX_LIFETIME = [Aroma_LengthOfTime new];
  [AromaService_DEFAULT_INBOX_LIFETIME setValue:3];
  [AromaService_DEFAULT_INBOX_LIFETIME setUnit:5];
;

  AromaService_DEFAULT_ACTIVITY_LIFETIME = [Aroma_LengthOfTime new];
  [AromaService_DEFAULT_ACTIVITY_LIFETIME setValue:4];
  [AromaService_DEFAULT_ACTIVITY_LIFETIME setUnit:5];
;
}

+ (AromaEndpoint_TcpEndpoint *) PRODUCTION_ENDPOINT {
  return AromaService_PRODUCTION_ENDPOINT;
}

+ (AromaEndpoint_TcpEndpoint *) BETA_ENDPOINT {
  return AromaService_BETA_ENDPOINT;
}

+ (Aroma_Dimension *) MAX_PROFILE_IMAGE_DIMENSION {
  return AromaService_MAX_PROFILE_IMAGE_DIMENSION;
}

+ (Aroma_LengthOfTime *) DEFAULT_APP_TOKEN_LIFETIME {
  return AromaService_DEFAULT_APP_TOKEN_LIFETIME;
}

+ (Aroma_Dimension *) MAX_APPLICATION_ICON_DIMENSION {
  return AromaService_MAX_APPLICATION_ICON_DIMENSION;
}

+ (Aroma_LengthOfTime *) DEFAULT_INBOX_LIFETIME {
  return AromaService_DEFAULT_INBOX_LIFETIME;
}

+ (Aroma_LengthOfTime *) DEFAULT_ACTIVITY_LIFETIME {
  return AromaService_DEFAULT_ACTIVITY_LIFETIME;
}
@end

@interface AromaService_AromaService_signIn_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_SignInRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaService_SignInRequest *) request;

@end

@implementation AromaService_AromaService_signIn_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaService_SignInRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_signIn_args class]]) {
    return NO;
  }
  AromaService_AromaService_signIn_args *other = (AromaService_AromaService_signIn_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_signIn_args * val = [AromaService_AromaService_signIn_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaService_SignInRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaService_SignInRequest *fieldValue = [[AromaService_SignInRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_signIn_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_signIn_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_signIn_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_SignInResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) AromaService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) AromaService_InvalidCredentialsException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;

@property (strong, nonatomic) AromaService_UserDoesNotExistException ex4;
@property (assign, nonatomic) BOOL ex4IsSet;
- (void) unsetEx4;


- (instancetype) initWithSuccess: (AromaService_SignInResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidCredentialsException) ex3 ex4: (AromaService_UserDoesNotExistException) ex4;

@end

@implementation AromaService_AromaService_signIn_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaService_SignInResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidCredentialsException) ex3 ex4: (AromaService_UserDoesNotExistException) ex4
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
    _ex4 = ex4;
    _ex4IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex4"])
    {
      _ex4 = [decoder decodeObjectForKey: @"ex4"];
      _ex4IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
  if (_ex4IsSet)
  {
    [encoder encodeObject: _ex4 forKey: @"ex4"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  hash = (hash * 31) ^ _ex4IsSet ? 2654435761 : 0;
  if (_ex4IsSet)
  {
    hash = (hash * 31) ^ [_ex4 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_signIn_result class]]) {
    return NO;
  }
  AromaService_AromaService_signIn_result *other = (AromaService_AromaService_signIn_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  if ((_ex4IsSet != other->_ex4IsSet) ||
      (_ex4IsSet && ((_ex4 || other->_ex4) && ![_ex4 isEqual:other->_ex4]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_signIn_result * val = [AromaService_AromaService_signIn_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  if (_ex4IsSet)
  {
    val.ex4 = [self.ex4 copy];
  }
  return val;
}

- (void) setSuccess: (AromaService_SignInResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidCredentialsException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (void) setEx4: (AromaException_UserDoesNotExistException *) ex4 {
  _ex4 = ex4;
  _ex4IsSet = YES;
}

- (void) unsetEx4 {
  _ex4 = nil;
  _ex4IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaService_SignInResponse *fieldValue = [[AromaService_SignInResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidCredentialsException *fieldValue = [[AromaException_InvalidCredentialsException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          AromaException_UserDoesNotExistException *fieldValue = [[AromaException_UserDoesNotExistException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex4 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_signIn_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex4IsSet) {
    if (_ex4 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex4" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_ex4 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_signIn_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", _ex4];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_signUp_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_SignUpRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaService_SignUpRequest *) request;

@end

@implementation AromaService_AromaService_signUp_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaService_SignUpRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_signUp_args class]]) {
    return NO;
  }
  AromaService_AromaService_signUp_args *other = (AromaService_AromaService_signUp_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_signUp_args * val = [AromaService_AromaService_signUp_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaService_SignUpRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaService_SignUpRequest *fieldValue = [[AromaService_SignUpRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_signUp_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_signUp_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_signUp_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_SignUpResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) AromaService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) AromaService_InvalidCredentialsException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;

@property (strong, nonatomic) AromaService_AccountAlreadyExistsException ex4;
@property (assign, nonatomic) BOOL ex4IsSet;
- (void) unsetEx4;


- (instancetype) initWithSuccess: (AromaService_SignUpResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidCredentialsException) ex3 ex4: (AromaService_AccountAlreadyExistsException) ex4;

@end

@implementation AromaService_AromaService_signUp_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaService_SignUpResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidCredentialsException) ex3 ex4: (AromaService_AccountAlreadyExistsException) ex4
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
    _ex4 = ex4;
    _ex4IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex4"])
    {
      _ex4 = [decoder decodeObjectForKey: @"ex4"];
      _ex4IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
  if (_ex4IsSet)
  {
    [encoder encodeObject: _ex4 forKey: @"ex4"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  hash = (hash * 31) ^ _ex4IsSet ? 2654435761 : 0;
  if (_ex4IsSet)
  {
    hash = (hash * 31) ^ [_ex4 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_signUp_result class]]) {
    return NO;
  }
  AromaService_AromaService_signUp_result *other = (AromaService_AromaService_signUp_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  if ((_ex4IsSet != other->_ex4IsSet) ||
      (_ex4IsSet && ((_ex4 || other->_ex4) && ![_ex4 isEqual:other->_ex4]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_signUp_result * val = [AromaService_AromaService_signUp_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  if (_ex4IsSet)
  {
    val.ex4 = [self.ex4 copy];
  }
  return val;
}

- (void) setSuccess: (AromaService_SignUpResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidCredentialsException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (void) setEx4: (AromaException_AccountAlreadyExistsException *) ex4 {
  _ex4 = ex4;
  _ex4IsSet = YES;
}

- (void) unsetEx4 {
  _ex4 = nil;
  _ex4IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaService_SignUpResponse *fieldValue = [[AromaService_SignUpResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidCredentialsException *fieldValue = [[AromaException_InvalidCredentialsException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          AromaException_AccountAlreadyExistsException *fieldValue = [[AromaException_AccountAlreadyExistsException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex4 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_signUp_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex4IsSet) {
    if (_ex4 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex4" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_ex4 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_signUp_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", _ex4];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_getUserInfo_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_GetUserInfoRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaService_GetUserInfoRequest *) request;

@end

@implementation AromaService_AromaService_getUserInfo_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaService_GetUserInfoRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_getUserInfo_args class]]) {
    return NO;
  }
  AromaService_AromaService_getUserInfo_args *other = (AromaService_AromaService_getUserInfo_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_getUserInfo_args * val = [AromaService_AromaService_getUserInfo_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaService_GetUserInfoRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaService_GetUserInfoRequest *fieldValue = [[AromaService_GetUserInfoRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_getUserInfo_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_getUserInfo_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_getUserInfo_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_GetUserInfoResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) AromaService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) AromaService_InvalidTokenException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;

@property (strong, nonatomic) AromaService_UnauthorizedException ex4;
@property (assign, nonatomic) BOOL ex4IsSet;
- (void) unsetEx4;

@property (strong, nonatomic) AromaService_UserDoesNotExistException ex5;
@property (assign, nonatomic) BOOL ex5IsSet;
- (void) unsetEx5;


- (instancetype) initWithSuccess: (AromaService_GetUserInfoResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_UnauthorizedException) ex4 ex5: (AromaService_UserDoesNotExistException) ex5;

@end

@implementation AromaService_AromaService_getUserInfo_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaService_GetUserInfoResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_UnauthorizedException) ex4 ex5: (AromaService_UserDoesNotExistException) ex5
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
    _ex4 = ex4;
    _ex4IsSet = YES;
    _ex5 = ex5;
    _ex5IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex4"])
    {
      _ex4 = [decoder decodeObjectForKey: @"ex4"];
      _ex4IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex5"])
    {
      _ex5 = [decoder decodeObjectForKey: @"ex5"];
      _ex5IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
  if (_ex4IsSet)
  {
    [encoder encodeObject: _ex4 forKey: @"ex4"];
  }
  if (_ex5IsSet)
  {
    [encoder encodeObject: _ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  hash = (hash * 31) ^ _ex4IsSet ? 2654435761 : 0;
  if (_ex4IsSet)
  {
    hash = (hash * 31) ^ [_ex4 hash];
  }
  hash = (hash * 31) ^ _ex5IsSet ? 2654435761 : 0;
  if (_ex5IsSet)
  {
    hash = (hash * 31) ^ [_ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_getUserInfo_result class]]) {
    return NO;
  }
  AromaService_AromaService_getUserInfo_result *other = (AromaService_AromaService_getUserInfo_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  if ((_ex4IsSet != other->_ex4IsSet) ||
      (_ex4IsSet && ((_ex4 || other->_ex4) && ![_ex4 isEqual:other->_ex4]))) {
    return NO;
  }
  if ((_ex5IsSet != other->_ex5IsSet) ||
      (_ex5IsSet && ((_ex5 || other->_ex5) && ![_ex5 isEqual:other->_ex5]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_getUserInfo_result * val = [AromaService_AromaService_getUserInfo_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  if (_ex4IsSet)
  {
    val.ex4 = [self.ex4 copy];
  }
  if (_ex5IsSet)
  {
    val.ex5 = [self.ex5 copy];
  }
  return val;
}

- (void) setSuccess: (AromaService_GetUserInfoResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidTokenException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (void) setEx4: (AromaException_UnauthorizedException *) ex4 {
  _ex4 = ex4;
  _ex4IsSet = YES;
}

- (void) unsetEx4 {
  _ex4 = nil;
  _ex4IsSet = NO;
}

- (void) setEx5: (AromaException_UserDoesNotExistException *) ex5 {
  _ex5 = ex5;
  _ex5IsSet = YES;
}

- (void) unsetEx5 {
  _ex5 = nil;
  _ex5IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaService_GetUserInfoResponse *fieldValue = [[AromaService_GetUserInfoResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          AromaException_UnauthorizedException *fieldValue = [[AromaException_UnauthorizedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex4 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          AromaException_UserDoesNotExistException *fieldValue = [[AromaException_UserDoesNotExistException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex5 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_getUserInfo_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex4IsSet) {
    if (_ex4 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex4" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_ex4 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex5IsSet) {
    if (_ex5 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex5" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_ex5 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_getUserInfo_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", _ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", _ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_getApplicationInfo_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_GetApplicationInfoRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaService_GetApplicationInfoRequest *) request;

@end

@implementation AromaService_AromaService_getApplicationInfo_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaService_GetApplicationInfoRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_getApplicationInfo_args class]]) {
    return NO;
  }
  AromaService_AromaService_getApplicationInfo_args *other = (AromaService_AromaService_getApplicationInfo_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_getApplicationInfo_args * val = [AromaService_AromaService_getApplicationInfo_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaService_GetApplicationInfoRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaService_GetApplicationInfoRequest *fieldValue = [[AromaService_GetApplicationInfoRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_getApplicationInfo_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_getApplicationInfo_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_getApplicationInfo_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_GetApplicationInfoResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) AromaService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) AromaService_InvalidTokenException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;

@property (strong, nonatomic) AromaService_ApplicationDoesNotExistException ex4;
@property (assign, nonatomic) BOOL ex4IsSet;
- (void) unsetEx4;

@property (strong, nonatomic) AromaService_UnauthorizedException ex5;
@property (assign, nonatomic) BOOL ex5IsSet;
- (void) unsetEx5;


- (instancetype) initWithSuccess: (AromaService_GetApplicationInfoResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_ApplicationDoesNotExistException) ex4 ex5: (AromaService_UnauthorizedException) ex5;

@end

@implementation AromaService_AromaService_getApplicationInfo_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaService_GetApplicationInfoResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_ApplicationDoesNotExistException) ex4 ex5: (AromaService_UnauthorizedException) ex5
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
    _ex4 = ex4;
    _ex4IsSet = YES;
    _ex5 = ex5;
    _ex5IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex4"])
    {
      _ex4 = [decoder decodeObjectForKey: @"ex4"];
      _ex4IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex5"])
    {
      _ex5 = [decoder decodeObjectForKey: @"ex5"];
      _ex5IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
  if (_ex4IsSet)
  {
    [encoder encodeObject: _ex4 forKey: @"ex4"];
  }
  if (_ex5IsSet)
  {
    [encoder encodeObject: _ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  hash = (hash * 31) ^ _ex4IsSet ? 2654435761 : 0;
  if (_ex4IsSet)
  {
    hash = (hash * 31) ^ [_ex4 hash];
  }
  hash = (hash * 31) ^ _ex5IsSet ? 2654435761 : 0;
  if (_ex5IsSet)
  {
    hash = (hash * 31) ^ [_ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_getApplicationInfo_result class]]) {
    return NO;
  }
  AromaService_AromaService_getApplicationInfo_result *other = (AromaService_AromaService_getApplicationInfo_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  if ((_ex4IsSet != other->_ex4IsSet) ||
      (_ex4IsSet && ((_ex4 || other->_ex4) && ![_ex4 isEqual:other->_ex4]))) {
    return NO;
  }
  if ((_ex5IsSet != other->_ex5IsSet) ||
      (_ex5IsSet && ((_ex5 || other->_ex5) && ![_ex5 isEqual:other->_ex5]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_getApplicationInfo_result * val = [AromaService_AromaService_getApplicationInfo_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  if (_ex4IsSet)
  {
    val.ex4 = [self.ex4 copy];
  }
  if (_ex5IsSet)
  {
    val.ex5 = [self.ex5 copy];
  }
  return val;
}

- (void) setSuccess: (AromaService_GetApplicationInfoResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidTokenException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (void) setEx4: (AromaException_ApplicationDoesNotExistException *) ex4 {
  _ex4 = ex4;
  _ex4IsSet = YES;
}

- (void) unsetEx4 {
  _ex4 = nil;
  _ex4IsSet = NO;
}

- (void) setEx5: (AromaException_UnauthorizedException *) ex5 {
  _ex5 = ex5;
  _ex5IsSet = YES;
}

- (void) unsetEx5 {
  _ex5 = nil;
  _ex5IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaService_GetApplicationInfoResponse *fieldValue = [[AromaService_GetApplicationInfoResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          AromaException_ApplicationDoesNotExistException *fieldValue = [[AromaException_ApplicationDoesNotExistException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex4 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          AromaException_UnauthorizedException *fieldValue = [[AromaException_UnauthorizedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex5 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_getApplicationInfo_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex4IsSet) {
    if (_ex4 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex4" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_ex4 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex5IsSet) {
    if (_ex5 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex5" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_ex5 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_getApplicationInfo_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", _ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", _ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_getApplicationsOwnedBy_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_GetApplicationsOwnedByRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaService_GetApplicationsOwnedByRequest *) request;

@end

@implementation AromaService_AromaService_getApplicationsOwnedBy_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaService_GetApplicationsOwnedByRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_getApplicationsOwnedBy_args class]]) {
    return NO;
  }
  AromaService_AromaService_getApplicationsOwnedBy_args *other = (AromaService_AromaService_getApplicationsOwnedBy_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_getApplicationsOwnedBy_args * val = [AromaService_AromaService_getApplicationsOwnedBy_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaService_GetApplicationsOwnedByRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaService_GetApplicationsOwnedByRequest *fieldValue = [[AromaService_GetApplicationsOwnedByRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_getApplicationsOwnedBy_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_getApplicationsOwnedBy_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_getApplicationsOwnedBy_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_GetApplicationsOwnedByResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) AromaService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) AromaService_InvalidTokenException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;


- (instancetype) initWithSuccess: (AromaService_GetApplicationsOwnedByResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3;

@end

@implementation AromaService_AromaService_getApplicationsOwnedBy_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaService_GetApplicationsOwnedByResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_getApplicationsOwnedBy_result class]]) {
    return NO;
  }
  AromaService_AromaService_getApplicationsOwnedBy_result *other = (AromaService_AromaService_getApplicationsOwnedBy_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_getApplicationsOwnedBy_result * val = [AromaService_AromaService_getApplicationsOwnedBy_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  return val;
}

- (void) setSuccess: (AromaService_GetApplicationsOwnedByResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidTokenException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaService_GetApplicationsOwnedByResponse *fieldValue = [[AromaService_GetApplicationsOwnedByResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_getApplicationsOwnedBy_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_getApplicationsOwnedBy_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_provisionApplication_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_ProvisionApplicationRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaService_ProvisionApplicationRequest *) request;

@end

@implementation AromaService_AromaService_provisionApplication_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaService_ProvisionApplicationRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_provisionApplication_args class]]) {
    return NO;
  }
  AromaService_AromaService_provisionApplication_args *other = (AromaService_AromaService_provisionApplication_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_provisionApplication_args * val = [AromaService_AromaService_provisionApplication_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaService_ProvisionApplicationRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaService_ProvisionApplicationRequest *fieldValue = [[AromaService_ProvisionApplicationRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_provisionApplication_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_provisionApplication_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_provisionApplication_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_ProvisionApplicationResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) AromaService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) AromaService_InvalidTokenException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;

@property (strong, nonatomic) AromaService_ApplicationDoesNotExistException ex4;
@property (assign, nonatomic) BOOL ex4IsSet;
- (void) unsetEx4;

@property (strong, nonatomic) AromaService_UnauthorizedException ex5;
@property (assign, nonatomic) BOOL ex5IsSet;
- (void) unsetEx5;


- (instancetype) initWithSuccess: (AromaService_ProvisionApplicationResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_ApplicationDoesNotExistException) ex4 ex5: (AromaService_UnauthorizedException) ex5;

@end

@implementation AromaService_AromaService_provisionApplication_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaService_ProvisionApplicationResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_ApplicationDoesNotExistException) ex4 ex5: (AromaService_UnauthorizedException) ex5
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
    _ex4 = ex4;
    _ex4IsSet = YES;
    _ex5 = ex5;
    _ex5IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex4"])
    {
      _ex4 = [decoder decodeObjectForKey: @"ex4"];
      _ex4IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex5"])
    {
      _ex5 = [decoder decodeObjectForKey: @"ex5"];
      _ex5IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
  if (_ex4IsSet)
  {
    [encoder encodeObject: _ex4 forKey: @"ex4"];
  }
  if (_ex5IsSet)
  {
    [encoder encodeObject: _ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  hash = (hash * 31) ^ _ex4IsSet ? 2654435761 : 0;
  if (_ex4IsSet)
  {
    hash = (hash * 31) ^ [_ex4 hash];
  }
  hash = (hash * 31) ^ _ex5IsSet ? 2654435761 : 0;
  if (_ex5IsSet)
  {
    hash = (hash * 31) ^ [_ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_provisionApplication_result class]]) {
    return NO;
  }
  AromaService_AromaService_provisionApplication_result *other = (AromaService_AromaService_provisionApplication_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  if ((_ex4IsSet != other->_ex4IsSet) ||
      (_ex4IsSet && ((_ex4 || other->_ex4) && ![_ex4 isEqual:other->_ex4]))) {
    return NO;
  }
  if ((_ex5IsSet != other->_ex5IsSet) ||
      (_ex5IsSet && ((_ex5 || other->_ex5) && ![_ex5 isEqual:other->_ex5]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_provisionApplication_result * val = [AromaService_AromaService_provisionApplication_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  if (_ex4IsSet)
  {
    val.ex4 = [self.ex4 copy];
  }
  if (_ex5IsSet)
  {
    val.ex5 = [self.ex5 copy];
  }
  return val;
}

- (void) setSuccess: (AromaService_ProvisionApplicationResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidTokenException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (void) setEx4: (AromaException_ApplicationDoesNotExistException *) ex4 {
  _ex4 = ex4;
  _ex4IsSet = YES;
}

- (void) unsetEx4 {
  _ex4 = nil;
  _ex4IsSet = NO;
}

- (void) setEx5: (AromaException_UnauthorizedException *) ex5 {
  _ex5 = ex5;
  _ex5IsSet = YES;
}

- (void) unsetEx5 {
  _ex5 = nil;
  _ex5IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaService_ProvisionApplicationResponse *fieldValue = [[AromaService_ProvisionApplicationResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          AromaException_ApplicationDoesNotExistException *fieldValue = [[AromaException_ApplicationDoesNotExistException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex4 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          AromaException_UnauthorizedException *fieldValue = [[AromaException_UnauthorizedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex5 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_provisionApplication_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex4IsSet) {
    if (_ex4 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex4" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_ex4 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex5IsSet) {
    if (_ex5 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex5" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_ex5 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_provisionApplication_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", _ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", _ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_recreateToken_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_RecreateApplicationTokenRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaService_RecreateApplicationTokenRequest *) request;

@end

@implementation AromaService_AromaService_recreateToken_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaService_RecreateApplicationTokenRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_recreateToken_args class]]) {
    return NO;
  }
  AromaService_AromaService_recreateToken_args *other = (AromaService_AromaService_recreateToken_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_recreateToken_args * val = [AromaService_AromaService_recreateToken_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaService_RecreateApplicationTokenRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaService_RecreateApplicationTokenRequest *fieldValue = [[AromaService_RecreateApplicationTokenRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_recreateToken_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_recreateToken_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_recreateToken_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_RecreateApplicationTokenResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) AromaService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) AromaService_InvalidTokenException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;

@property (strong, nonatomic) AromaService_ApplicationDoesNotExistException ex4;
@property (assign, nonatomic) BOOL ex4IsSet;
- (void) unsetEx4;

@property (strong, nonatomic) AromaService_UnauthorizedException ex5;
@property (assign, nonatomic) BOOL ex5IsSet;
- (void) unsetEx5;


- (instancetype) initWithSuccess: (AromaService_RecreateApplicationTokenResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_ApplicationDoesNotExistException) ex4 ex5: (AromaService_UnauthorizedException) ex5;

@end

@implementation AromaService_AromaService_recreateToken_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaService_RecreateApplicationTokenResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_ApplicationDoesNotExistException) ex4 ex5: (AromaService_UnauthorizedException) ex5
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
    _ex4 = ex4;
    _ex4IsSet = YES;
    _ex5 = ex5;
    _ex5IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex4"])
    {
      _ex4 = [decoder decodeObjectForKey: @"ex4"];
      _ex4IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex5"])
    {
      _ex5 = [decoder decodeObjectForKey: @"ex5"];
      _ex5IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
  if (_ex4IsSet)
  {
    [encoder encodeObject: _ex4 forKey: @"ex4"];
  }
  if (_ex5IsSet)
  {
    [encoder encodeObject: _ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  hash = (hash * 31) ^ _ex4IsSet ? 2654435761 : 0;
  if (_ex4IsSet)
  {
    hash = (hash * 31) ^ [_ex4 hash];
  }
  hash = (hash * 31) ^ _ex5IsSet ? 2654435761 : 0;
  if (_ex5IsSet)
  {
    hash = (hash * 31) ^ [_ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_recreateToken_result class]]) {
    return NO;
  }
  AromaService_AromaService_recreateToken_result *other = (AromaService_AromaService_recreateToken_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  if ((_ex4IsSet != other->_ex4IsSet) ||
      (_ex4IsSet && ((_ex4 || other->_ex4) && ![_ex4 isEqual:other->_ex4]))) {
    return NO;
  }
  if ((_ex5IsSet != other->_ex5IsSet) ||
      (_ex5IsSet && ((_ex5 || other->_ex5) && ![_ex5 isEqual:other->_ex5]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_recreateToken_result * val = [AromaService_AromaService_recreateToken_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  if (_ex4IsSet)
  {
    val.ex4 = [self.ex4 copy];
  }
  if (_ex5IsSet)
  {
    val.ex5 = [self.ex5 copy];
  }
  return val;
}

- (void) setSuccess: (AromaService_RecreateApplicationTokenResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidTokenException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (void) setEx4: (AromaException_ApplicationDoesNotExistException *) ex4 {
  _ex4 = ex4;
  _ex4IsSet = YES;
}

- (void) unsetEx4 {
  _ex4 = nil;
  _ex4IsSet = NO;
}

- (void) setEx5: (AromaException_UnauthorizedException *) ex5 {
  _ex5 = ex5;
  _ex5IsSet = YES;
}

- (void) unsetEx5 {
  _ex5 = nil;
  _ex5IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaService_RecreateApplicationTokenResponse *fieldValue = [[AromaService_RecreateApplicationTokenResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          AromaException_ApplicationDoesNotExistException *fieldValue = [[AromaException_ApplicationDoesNotExistException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex4 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          AromaException_UnauthorizedException *fieldValue = [[AromaException_UnauthorizedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex5 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_recreateToken_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex4IsSet) {
    if (_ex4 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex4" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_ex4 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex5IsSet) {
    if (_ex5 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex5" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_ex5 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_recreateToken_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", _ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", _ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_deleteApplication_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_DeleteApplicationRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaService_DeleteApplicationRequest *) request;

@end

@implementation AromaService_AromaService_deleteApplication_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaService_DeleteApplicationRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_deleteApplication_args class]]) {
    return NO;
  }
  AromaService_AromaService_deleteApplication_args *other = (AromaService_AromaService_deleteApplication_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_deleteApplication_args * val = [AromaService_AromaService_deleteApplication_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaService_DeleteApplicationRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaService_DeleteApplicationRequest *fieldValue = [[AromaService_DeleteApplicationRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_deleteApplication_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_deleteApplication_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_deleteApplication_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_DeleteApplicationResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) AromaService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) AromaService_InvalidTokenException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;

@property (strong, nonatomic) AromaService_ApplicationDoesNotExistException ex4;
@property (assign, nonatomic) BOOL ex4IsSet;
- (void) unsetEx4;

@property (strong, nonatomic) AromaService_UnauthorizedException ex5;
@property (assign, nonatomic) BOOL ex5IsSet;
- (void) unsetEx5;


- (instancetype) initWithSuccess: (AromaService_DeleteApplicationResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_ApplicationDoesNotExistException) ex4 ex5: (AromaService_UnauthorizedException) ex5;

@end

@implementation AromaService_AromaService_deleteApplication_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaService_DeleteApplicationResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_ApplicationDoesNotExistException) ex4 ex5: (AromaService_UnauthorizedException) ex5
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
    _ex4 = ex4;
    _ex4IsSet = YES;
    _ex5 = ex5;
    _ex5IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex4"])
    {
      _ex4 = [decoder decodeObjectForKey: @"ex4"];
      _ex4IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex5"])
    {
      _ex5 = [decoder decodeObjectForKey: @"ex5"];
      _ex5IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
  if (_ex4IsSet)
  {
    [encoder encodeObject: _ex4 forKey: @"ex4"];
  }
  if (_ex5IsSet)
  {
    [encoder encodeObject: _ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  hash = (hash * 31) ^ _ex4IsSet ? 2654435761 : 0;
  if (_ex4IsSet)
  {
    hash = (hash * 31) ^ [_ex4 hash];
  }
  hash = (hash * 31) ^ _ex5IsSet ? 2654435761 : 0;
  if (_ex5IsSet)
  {
    hash = (hash * 31) ^ [_ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_deleteApplication_result class]]) {
    return NO;
  }
  AromaService_AromaService_deleteApplication_result *other = (AromaService_AromaService_deleteApplication_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  if ((_ex4IsSet != other->_ex4IsSet) ||
      (_ex4IsSet && ((_ex4 || other->_ex4) && ![_ex4 isEqual:other->_ex4]))) {
    return NO;
  }
  if ((_ex5IsSet != other->_ex5IsSet) ||
      (_ex5IsSet && ((_ex5 || other->_ex5) && ![_ex5 isEqual:other->_ex5]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_deleteApplication_result * val = [AromaService_AromaService_deleteApplication_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  if (_ex4IsSet)
  {
    val.ex4 = [self.ex4 copy];
  }
  if (_ex5IsSet)
  {
    val.ex5 = [self.ex5 copy];
  }
  return val;
}

- (void) setSuccess: (AromaService_DeleteApplicationResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidTokenException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (void) setEx4: (AromaException_ApplicationDoesNotExistException *) ex4 {
  _ex4 = ex4;
  _ex4IsSet = YES;
}

- (void) unsetEx4 {
  _ex4 = nil;
  _ex4IsSet = NO;
}

- (void) setEx5: (AromaException_UnauthorizedException *) ex5 {
  _ex5 = ex5;
  _ex5IsSet = YES;
}

- (void) unsetEx5 {
  _ex5 = nil;
  _ex5IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaService_DeleteApplicationResponse *fieldValue = [[AromaService_DeleteApplicationResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          AromaException_ApplicationDoesNotExistException *fieldValue = [[AromaException_ApplicationDoesNotExistException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex4 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          AromaException_UnauthorizedException *fieldValue = [[AromaException_UnauthorizedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex5 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_deleteApplication_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex4IsSet) {
    if (_ex4 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex4" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_ex4 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex5IsSet) {
    if (_ex5 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex5" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_ex5 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_deleteApplication_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", _ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", _ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_renewApplicationToken_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_RenewApplicationTokenRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaService_RenewApplicationTokenRequest *) request;

@end

@implementation AromaService_AromaService_renewApplicationToken_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaService_RenewApplicationTokenRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_renewApplicationToken_args class]]) {
    return NO;
  }
  AromaService_AromaService_renewApplicationToken_args *other = (AromaService_AromaService_renewApplicationToken_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_renewApplicationToken_args * val = [AromaService_AromaService_renewApplicationToken_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaService_RenewApplicationTokenRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaService_RenewApplicationTokenRequest *fieldValue = [[AromaService_RenewApplicationTokenRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_renewApplicationToken_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_renewApplicationToken_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_renewApplicationToken_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_RenewApplicationTokenResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) AromaService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) AromaService_InvalidTokenException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;

@property (strong, nonatomic) AromaService_ApplicationDoesNotExistException ex4;
@property (assign, nonatomic) BOOL ex4IsSet;
- (void) unsetEx4;

@property (strong, nonatomic) AromaService_UnauthorizedException ex5;
@property (assign, nonatomic) BOOL ex5IsSet;
- (void) unsetEx5;


- (instancetype) initWithSuccess: (AromaService_RenewApplicationTokenResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_ApplicationDoesNotExistException) ex4 ex5: (AromaService_UnauthorizedException) ex5;

@end

@implementation AromaService_AromaService_renewApplicationToken_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaService_RenewApplicationTokenResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_ApplicationDoesNotExistException) ex4 ex5: (AromaService_UnauthorizedException) ex5
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
    _ex4 = ex4;
    _ex4IsSet = YES;
    _ex5 = ex5;
    _ex5IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex4"])
    {
      _ex4 = [decoder decodeObjectForKey: @"ex4"];
      _ex4IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex5"])
    {
      _ex5 = [decoder decodeObjectForKey: @"ex5"];
      _ex5IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
  if (_ex4IsSet)
  {
    [encoder encodeObject: _ex4 forKey: @"ex4"];
  }
  if (_ex5IsSet)
  {
    [encoder encodeObject: _ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  hash = (hash * 31) ^ _ex4IsSet ? 2654435761 : 0;
  if (_ex4IsSet)
  {
    hash = (hash * 31) ^ [_ex4 hash];
  }
  hash = (hash * 31) ^ _ex5IsSet ? 2654435761 : 0;
  if (_ex5IsSet)
  {
    hash = (hash * 31) ^ [_ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_renewApplicationToken_result class]]) {
    return NO;
  }
  AromaService_AromaService_renewApplicationToken_result *other = (AromaService_AromaService_renewApplicationToken_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  if ((_ex4IsSet != other->_ex4IsSet) ||
      (_ex4IsSet && ((_ex4 || other->_ex4) && ![_ex4 isEqual:other->_ex4]))) {
    return NO;
  }
  if ((_ex5IsSet != other->_ex5IsSet) ||
      (_ex5IsSet && ((_ex5 || other->_ex5) && ![_ex5 isEqual:other->_ex5]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_renewApplicationToken_result * val = [AromaService_AromaService_renewApplicationToken_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  if (_ex4IsSet)
  {
    val.ex4 = [self.ex4 copy];
  }
  if (_ex5IsSet)
  {
    val.ex5 = [self.ex5 copy];
  }
  return val;
}

- (void) setSuccess: (AromaService_RenewApplicationTokenResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidTokenException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (void) setEx4: (AromaException_ApplicationDoesNotExistException *) ex4 {
  _ex4 = ex4;
  _ex4IsSet = YES;
}

- (void) unsetEx4 {
  _ex4 = nil;
  _ex4IsSet = NO;
}

- (void) setEx5: (AromaException_UnauthorizedException *) ex5 {
  _ex5 = ex5;
  _ex5IsSet = YES;
}

- (void) unsetEx5 {
  _ex5 = nil;
  _ex5IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaService_RenewApplicationTokenResponse *fieldValue = [[AromaService_RenewApplicationTokenResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          AromaException_ApplicationDoesNotExistException *fieldValue = [[AromaException_ApplicationDoesNotExistException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex4 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          AromaException_UnauthorizedException *fieldValue = [[AromaException_UnauthorizedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex5 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_renewApplicationToken_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex4IsSet) {
    if (_ex4 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex4" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_ex4 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex5IsSet) {
    if (_ex5 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex5" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_ex5 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_renewApplicationToken_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", _ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", _ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_updateApplication_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_UpdateApplicationRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaService_UpdateApplicationRequest *) request;

@end

@implementation AromaService_AromaService_updateApplication_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaService_UpdateApplicationRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_updateApplication_args class]]) {
    return NO;
  }
  AromaService_AromaService_updateApplication_args *other = (AromaService_AromaService_updateApplication_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_updateApplication_args * val = [AromaService_AromaService_updateApplication_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaService_UpdateApplicationRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaService_UpdateApplicationRequest *fieldValue = [[AromaService_UpdateApplicationRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_updateApplication_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_updateApplication_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_updateApplication_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_UpdateApplicationResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) AromaService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) AromaService_InvalidTokenException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;

@property (strong, nonatomic) AromaService_ApplicationDoesNotExistException ex4;
@property (assign, nonatomic) BOOL ex4IsSet;
- (void) unsetEx4;

@property (strong, nonatomic) AromaService_UnauthorizedException ex5;
@property (assign, nonatomic) BOOL ex5IsSet;
- (void) unsetEx5;


- (instancetype) initWithSuccess: (AromaService_UpdateApplicationResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_ApplicationDoesNotExistException) ex4 ex5: (AromaService_UnauthorizedException) ex5;

@end

@implementation AromaService_AromaService_updateApplication_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaService_UpdateApplicationResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_ApplicationDoesNotExistException) ex4 ex5: (AromaService_UnauthorizedException) ex5
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
    _ex4 = ex4;
    _ex4IsSet = YES;
    _ex5 = ex5;
    _ex5IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex4"])
    {
      _ex4 = [decoder decodeObjectForKey: @"ex4"];
      _ex4IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex5"])
    {
      _ex5 = [decoder decodeObjectForKey: @"ex5"];
      _ex5IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
  if (_ex4IsSet)
  {
    [encoder encodeObject: _ex4 forKey: @"ex4"];
  }
  if (_ex5IsSet)
  {
    [encoder encodeObject: _ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  hash = (hash * 31) ^ _ex4IsSet ? 2654435761 : 0;
  if (_ex4IsSet)
  {
    hash = (hash * 31) ^ [_ex4 hash];
  }
  hash = (hash * 31) ^ _ex5IsSet ? 2654435761 : 0;
  if (_ex5IsSet)
  {
    hash = (hash * 31) ^ [_ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_updateApplication_result class]]) {
    return NO;
  }
  AromaService_AromaService_updateApplication_result *other = (AromaService_AromaService_updateApplication_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  if ((_ex4IsSet != other->_ex4IsSet) ||
      (_ex4IsSet && ((_ex4 || other->_ex4) && ![_ex4 isEqual:other->_ex4]))) {
    return NO;
  }
  if ((_ex5IsSet != other->_ex5IsSet) ||
      (_ex5IsSet && ((_ex5 || other->_ex5) && ![_ex5 isEqual:other->_ex5]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_updateApplication_result * val = [AromaService_AromaService_updateApplication_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  if (_ex4IsSet)
  {
    val.ex4 = [self.ex4 copy];
  }
  if (_ex5IsSet)
  {
    val.ex5 = [self.ex5 copy];
  }
  return val;
}

- (void) setSuccess: (AromaService_UpdateApplicationResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidTokenException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (void) setEx4: (AromaException_ApplicationDoesNotExistException *) ex4 {
  _ex4 = ex4;
  _ex4IsSet = YES;
}

- (void) unsetEx4 {
  _ex4 = nil;
  _ex4IsSet = NO;
}

- (void) setEx5: (AromaException_UnauthorizedException *) ex5 {
  _ex5 = ex5;
  _ex5IsSet = YES;
}

- (void) unsetEx5 {
  _ex5 = nil;
  _ex5IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaService_UpdateApplicationResponse *fieldValue = [[AromaService_UpdateApplicationResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          AromaException_ApplicationDoesNotExistException *fieldValue = [[AromaException_ApplicationDoesNotExistException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex4 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          AromaException_UnauthorizedException *fieldValue = [[AromaException_UnauthorizedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex5 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_updateApplication_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex4IsSet) {
    if (_ex4 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex4" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_ex4 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex5IsSet) {
    if (_ex5 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex5" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_ex5 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_updateApplication_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", _ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", _ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_searchForApplications_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_SearchForApplicationsRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaService_SearchForApplicationsRequest *) request;

@end

@implementation AromaService_AromaService_searchForApplications_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaService_SearchForApplicationsRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_searchForApplications_args class]]) {
    return NO;
  }
  AromaService_AromaService_searchForApplications_args *other = (AromaService_AromaService_searchForApplications_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_searchForApplications_args * val = [AromaService_AromaService_searchForApplications_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaService_SearchForApplicationsRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaService_SearchForApplicationsRequest *fieldValue = [[AromaService_SearchForApplicationsRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_searchForApplications_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_searchForApplications_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_searchForApplications_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_SearchForApplicationsResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) AromaService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) AromaService_InvalidTokenException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;

@property (strong, nonatomic) AromaService_UnauthorizedException ex4;
@property (assign, nonatomic) BOOL ex4IsSet;
- (void) unsetEx4;


- (instancetype) initWithSuccess: (AromaService_SearchForApplicationsResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_UnauthorizedException) ex4;

@end

@implementation AromaService_AromaService_searchForApplications_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaService_SearchForApplicationsResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_UnauthorizedException) ex4
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
    _ex4 = ex4;
    _ex4IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex4"])
    {
      _ex4 = [decoder decodeObjectForKey: @"ex4"];
      _ex4IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
  if (_ex4IsSet)
  {
    [encoder encodeObject: _ex4 forKey: @"ex4"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  hash = (hash * 31) ^ _ex4IsSet ? 2654435761 : 0;
  if (_ex4IsSet)
  {
    hash = (hash * 31) ^ [_ex4 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_searchForApplications_result class]]) {
    return NO;
  }
  AromaService_AromaService_searchForApplications_result *other = (AromaService_AromaService_searchForApplications_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  if ((_ex4IsSet != other->_ex4IsSet) ||
      (_ex4IsSet && ((_ex4 || other->_ex4) && ![_ex4 isEqual:other->_ex4]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_searchForApplications_result * val = [AromaService_AromaService_searchForApplications_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  if (_ex4IsSet)
  {
    val.ex4 = [self.ex4 copy];
  }
  return val;
}

- (void) setSuccess: (AromaService_SearchForApplicationsResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidTokenException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (void) setEx4: (AromaException_UnauthorizedException *) ex4 {
  _ex4 = ex4;
  _ex4IsSet = YES;
}

- (void) unsetEx4 {
  _ex4 = nil;
  _ex4IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaService_SearchForApplicationsResponse *fieldValue = [[AromaService_SearchForApplicationsResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          AromaException_UnauthorizedException *fieldValue = [[AromaException_UnauthorizedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex4 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_searchForApplications_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex4IsSet) {
    if (_ex4 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex4" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_ex4 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_searchForApplications_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", _ex4];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_getApplicationMessages_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_GetApplicationMessagesRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaService_GetApplicationMessagesRequest *) request;

@end

@implementation AromaService_AromaService_getApplicationMessages_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaService_GetApplicationMessagesRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_getApplicationMessages_args class]]) {
    return NO;
  }
  AromaService_AromaService_getApplicationMessages_args *other = (AromaService_AromaService_getApplicationMessages_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_getApplicationMessages_args * val = [AromaService_AromaService_getApplicationMessages_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaService_GetApplicationMessagesRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaService_GetApplicationMessagesRequest *fieldValue = [[AromaService_GetApplicationMessagesRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_getApplicationMessages_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_getApplicationMessages_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_getApplicationMessages_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_GetApplicationMessagesResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) AromaService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) AromaService_InvalidTokenException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;

@property (strong, nonatomic) AromaService_UnauthorizedException ex4;
@property (assign, nonatomic) BOOL ex4IsSet;
- (void) unsetEx4;

@property (strong, nonatomic) AromaService_ApplicationDoesNotExistException ex5;
@property (assign, nonatomic) BOOL ex5IsSet;
- (void) unsetEx5;


- (instancetype) initWithSuccess: (AromaService_GetApplicationMessagesResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_UnauthorizedException) ex4 ex5: (AromaService_ApplicationDoesNotExistException) ex5;

@end

@implementation AromaService_AromaService_getApplicationMessages_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaService_GetApplicationMessagesResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_UnauthorizedException) ex4 ex5: (AromaService_ApplicationDoesNotExistException) ex5
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
    _ex4 = ex4;
    _ex4IsSet = YES;
    _ex5 = ex5;
    _ex5IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex4"])
    {
      _ex4 = [decoder decodeObjectForKey: @"ex4"];
      _ex4IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex5"])
    {
      _ex5 = [decoder decodeObjectForKey: @"ex5"];
      _ex5IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
  if (_ex4IsSet)
  {
    [encoder encodeObject: _ex4 forKey: @"ex4"];
  }
  if (_ex5IsSet)
  {
    [encoder encodeObject: _ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  hash = (hash * 31) ^ _ex4IsSet ? 2654435761 : 0;
  if (_ex4IsSet)
  {
    hash = (hash * 31) ^ [_ex4 hash];
  }
  hash = (hash * 31) ^ _ex5IsSet ? 2654435761 : 0;
  if (_ex5IsSet)
  {
    hash = (hash * 31) ^ [_ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_getApplicationMessages_result class]]) {
    return NO;
  }
  AromaService_AromaService_getApplicationMessages_result *other = (AromaService_AromaService_getApplicationMessages_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  if ((_ex4IsSet != other->_ex4IsSet) ||
      (_ex4IsSet && ((_ex4 || other->_ex4) && ![_ex4 isEqual:other->_ex4]))) {
    return NO;
  }
  if ((_ex5IsSet != other->_ex5IsSet) ||
      (_ex5IsSet && ((_ex5 || other->_ex5) && ![_ex5 isEqual:other->_ex5]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_getApplicationMessages_result * val = [AromaService_AromaService_getApplicationMessages_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  if (_ex4IsSet)
  {
    val.ex4 = [self.ex4 copy];
  }
  if (_ex5IsSet)
  {
    val.ex5 = [self.ex5 copy];
  }
  return val;
}

- (void) setSuccess: (AromaService_GetApplicationMessagesResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidTokenException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (void) setEx4: (AromaException_UnauthorizedException *) ex4 {
  _ex4 = ex4;
  _ex4IsSet = YES;
}

- (void) unsetEx4 {
  _ex4 = nil;
  _ex4IsSet = NO;
}

- (void) setEx5: (AromaException_ApplicationDoesNotExistException *) ex5 {
  _ex5 = ex5;
  _ex5IsSet = YES;
}

- (void) unsetEx5 {
  _ex5 = nil;
  _ex5IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaService_GetApplicationMessagesResponse *fieldValue = [[AromaService_GetApplicationMessagesResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          AromaException_UnauthorizedException *fieldValue = [[AromaException_UnauthorizedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex4 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          AromaException_ApplicationDoesNotExistException *fieldValue = [[AromaException_ApplicationDoesNotExistException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex5 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_getApplicationMessages_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex4IsSet) {
    if (_ex4 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex4" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_ex4 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex5IsSet) {
    if (_ex5 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex5" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_ex5 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_getApplicationMessages_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", _ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", _ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_getFullMessage_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_GetFullMessageRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaService_GetFullMessageRequest *) request;

@end

@implementation AromaService_AromaService_getFullMessage_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaService_GetFullMessageRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_getFullMessage_args class]]) {
    return NO;
  }
  AromaService_AromaService_getFullMessage_args *other = (AromaService_AromaService_getFullMessage_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_getFullMessage_args * val = [AromaService_AromaService_getFullMessage_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaService_GetFullMessageRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaService_GetFullMessageRequest *fieldValue = [[AromaService_GetFullMessageRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_getFullMessage_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_getFullMessage_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_getFullMessage_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_GetFullMessageResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) AromaService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) AromaService_InvalidTokenException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;


- (instancetype) initWithSuccess: (AromaService_GetFullMessageResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3;

@end

@implementation AromaService_AromaService_getFullMessage_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaService_GetFullMessageResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_getFullMessage_result class]]) {
    return NO;
  }
  AromaService_AromaService_getFullMessage_result *other = (AromaService_AromaService_getFullMessage_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_getFullMessage_result * val = [AromaService_AromaService_getFullMessage_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  return val;
}

- (void) setSuccess: (AromaService_GetFullMessageResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidTokenException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaService_GetFullMessageResponse *fieldValue = [[AromaService_GetFullMessageResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_getFullMessage_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_getFullMessage_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_deleteMessage_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_DeleteMessageRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaService_DeleteMessageRequest *) request;

@end

@implementation AromaService_AromaService_deleteMessage_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaService_DeleteMessageRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_deleteMessage_args class]]) {
    return NO;
  }
  AromaService_AromaService_deleteMessage_args *other = (AromaService_AromaService_deleteMessage_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_deleteMessage_args * val = [AromaService_AromaService_deleteMessage_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaService_DeleteMessageRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaService_DeleteMessageRequest *fieldValue = [[AromaService_DeleteMessageRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_deleteMessage_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_deleteMessage_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_deleteMessage_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_DeleteMessageResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) AromaService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) AromaService_InvalidTokenException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;

@property (strong, nonatomic) AromaService_MessageDoesNotExistException ex4;
@property (assign, nonatomic) BOOL ex4IsSet;
- (void) unsetEx4;

@property (strong, nonatomic) AromaService_UnauthorizedException ex5;
@property (assign, nonatomic) BOOL ex5IsSet;
- (void) unsetEx5;


- (instancetype) initWithSuccess: (AromaService_DeleteMessageResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_MessageDoesNotExistException) ex4 ex5: (AromaService_UnauthorizedException) ex5;

@end

@implementation AromaService_AromaService_deleteMessage_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaService_DeleteMessageResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_MessageDoesNotExistException) ex4 ex5: (AromaService_UnauthorizedException) ex5
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
    _ex4 = ex4;
    _ex4IsSet = YES;
    _ex5 = ex5;
    _ex5IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex4"])
    {
      _ex4 = [decoder decodeObjectForKey: @"ex4"];
      _ex4IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex5"])
    {
      _ex5 = [decoder decodeObjectForKey: @"ex5"];
      _ex5IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
  if (_ex4IsSet)
  {
    [encoder encodeObject: _ex4 forKey: @"ex4"];
  }
  if (_ex5IsSet)
  {
    [encoder encodeObject: _ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  hash = (hash * 31) ^ _ex4IsSet ? 2654435761 : 0;
  if (_ex4IsSet)
  {
    hash = (hash * 31) ^ [_ex4 hash];
  }
  hash = (hash * 31) ^ _ex5IsSet ? 2654435761 : 0;
  if (_ex5IsSet)
  {
    hash = (hash * 31) ^ [_ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_deleteMessage_result class]]) {
    return NO;
  }
  AromaService_AromaService_deleteMessage_result *other = (AromaService_AromaService_deleteMessage_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  if ((_ex4IsSet != other->_ex4IsSet) ||
      (_ex4IsSet && ((_ex4 || other->_ex4) && ![_ex4 isEqual:other->_ex4]))) {
    return NO;
  }
  if ((_ex5IsSet != other->_ex5IsSet) ||
      (_ex5IsSet && ((_ex5 || other->_ex5) && ![_ex5 isEqual:other->_ex5]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_deleteMessage_result * val = [AromaService_AromaService_deleteMessage_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  if (_ex4IsSet)
  {
    val.ex4 = [self.ex4 copy];
  }
  if (_ex5IsSet)
  {
    val.ex5 = [self.ex5 copy];
  }
  return val;
}

- (void) setSuccess: (AromaService_DeleteMessageResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidTokenException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (void) setEx4: (AromaException_MessageDoesNotExistException *) ex4 {
  _ex4 = ex4;
  _ex4IsSet = YES;
}

- (void) unsetEx4 {
  _ex4 = nil;
  _ex4IsSet = NO;
}

- (void) setEx5: (AromaException_UnauthorizedException *) ex5 {
  _ex5 = ex5;
  _ex5IsSet = YES;
}

- (void) unsetEx5 {
  _ex5 = nil;
  _ex5IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaService_DeleteMessageResponse *fieldValue = [[AromaService_DeleteMessageResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          AromaException_MessageDoesNotExistException *fieldValue = [[AromaException_MessageDoesNotExistException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex4 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          AromaException_UnauthorizedException *fieldValue = [[AromaException_UnauthorizedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex5 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_deleteMessage_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex4IsSet) {
    if (_ex4 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex4" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_ex4 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex5IsSet) {
    if (_ex5 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex5" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_ex5 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_deleteMessage_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", _ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", _ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_dismissMessage_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_DismissMessageRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaService_DismissMessageRequest *) request;

@end

@implementation AromaService_AromaService_dismissMessage_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaService_DismissMessageRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_dismissMessage_args class]]) {
    return NO;
  }
  AromaService_AromaService_dismissMessage_args *other = (AromaService_AromaService_dismissMessage_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_dismissMessage_args * val = [AromaService_AromaService_dismissMessage_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaService_DismissMessageRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaService_DismissMessageRequest *fieldValue = [[AromaService_DismissMessageRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_dismissMessage_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_dismissMessage_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_dismissMessage_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_DismissMessageResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) AromaService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) AromaService_InvalidTokenException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;

@property (strong, nonatomic) AromaService_MessageDoesNotExistException ex4;
@property (assign, nonatomic) BOOL ex4IsSet;
- (void) unsetEx4;

@property (strong, nonatomic) AromaService_UnauthorizedException ex5;
@property (assign, nonatomic) BOOL ex5IsSet;
- (void) unsetEx5;


- (instancetype) initWithSuccess: (AromaService_DismissMessageResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_MessageDoesNotExistException) ex4 ex5: (AromaService_UnauthorizedException) ex5;

@end

@implementation AromaService_AromaService_dismissMessage_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaService_DismissMessageResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_MessageDoesNotExistException) ex4 ex5: (AromaService_UnauthorizedException) ex5
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
    _ex4 = ex4;
    _ex4IsSet = YES;
    _ex5 = ex5;
    _ex5IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex4"])
    {
      _ex4 = [decoder decodeObjectForKey: @"ex4"];
      _ex4IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex5"])
    {
      _ex5 = [decoder decodeObjectForKey: @"ex5"];
      _ex5IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
  if (_ex4IsSet)
  {
    [encoder encodeObject: _ex4 forKey: @"ex4"];
  }
  if (_ex5IsSet)
  {
    [encoder encodeObject: _ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  hash = (hash * 31) ^ _ex4IsSet ? 2654435761 : 0;
  if (_ex4IsSet)
  {
    hash = (hash * 31) ^ [_ex4 hash];
  }
  hash = (hash * 31) ^ _ex5IsSet ? 2654435761 : 0;
  if (_ex5IsSet)
  {
    hash = (hash * 31) ^ [_ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_dismissMessage_result class]]) {
    return NO;
  }
  AromaService_AromaService_dismissMessage_result *other = (AromaService_AromaService_dismissMessage_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  if ((_ex4IsSet != other->_ex4IsSet) ||
      (_ex4IsSet && ((_ex4 || other->_ex4) && ![_ex4 isEqual:other->_ex4]))) {
    return NO;
  }
  if ((_ex5IsSet != other->_ex5IsSet) ||
      (_ex5IsSet && ((_ex5 || other->_ex5) && ![_ex5 isEqual:other->_ex5]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_dismissMessage_result * val = [AromaService_AromaService_dismissMessage_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  if (_ex4IsSet)
  {
    val.ex4 = [self.ex4 copy];
  }
  if (_ex5IsSet)
  {
    val.ex5 = [self.ex5 copy];
  }
  return val;
}

- (void) setSuccess: (AromaService_DismissMessageResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidTokenException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (void) setEx4: (AromaException_MessageDoesNotExistException *) ex4 {
  _ex4 = ex4;
  _ex4IsSet = YES;
}

- (void) unsetEx4 {
  _ex4 = nil;
  _ex4IsSet = NO;
}

- (void) setEx5: (AromaException_UnauthorizedException *) ex5 {
  _ex5 = ex5;
  _ex5IsSet = YES;
}

- (void) unsetEx5 {
  _ex5 = nil;
  _ex5IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaService_DismissMessageResponse *fieldValue = [[AromaService_DismissMessageResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          AromaException_MessageDoesNotExistException *fieldValue = [[AromaException_MessageDoesNotExistException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex4 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          AromaException_UnauthorizedException *fieldValue = [[AromaException_UnauthorizedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex5 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_dismissMessage_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex4IsSet) {
    if (_ex4 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex4" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_ex4 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex5IsSet) {
    if (_ex5 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex5" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_ex5 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_dismissMessage_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", _ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", _ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_getInbox_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_GetInboxRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaService_GetInboxRequest *) request;

@end

@implementation AromaService_AromaService_getInbox_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaService_GetInboxRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_getInbox_args class]]) {
    return NO;
  }
  AromaService_AromaService_getInbox_args *other = (AromaService_AromaService_getInbox_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_getInbox_args * val = [AromaService_AromaService_getInbox_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaService_GetInboxRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaService_GetInboxRequest *fieldValue = [[AromaService_GetInboxRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_getInbox_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_getInbox_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_getInbox_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_GetInboxResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) AromaService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) AromaService_InvalidTokenException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;


- (instancetype) initWithSuccess: (AromaService_GetInboxResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3;

@end

@implementation AromaService_AromaService_getInbox_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaService_GetInboxResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_getInbox_result class]]) {
    return NO;
  }
  AromaService_AromaService_getInbox_result *other = (AromaService_AromaService_getInbox_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_getInbox_result * val = [AromaService_AromaService_getInbox_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  return val;
}

- (void) setSuccess: (AromaService_GetInboxResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidTokenException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaService_GetInboxResponse *fieldValue = [[AromaService_GetInboxResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_getInbox_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_getInbox_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_getActivity_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_GetActivityRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaService_GetActivityRequest *) request;

@end

@implementation AromaService_AromaService_getActivity_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaService_GetActivityRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_getActivity_args class]]) {
    return NO;
  }
  AromaService_AromaService_getActivity_args *other = (AromaService_AromaService_getActivity_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_getActivity_args * val = [AromaService_AromaService_getActivity_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaService_GetActivityRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaService_GetActivityRequest *fieldValue = [[AromaService_GetActivityRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_getActivity_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_getActivity_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_getActivity_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_GetActivityResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) AromaService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) AromaService_InvalidTokenException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;


- (instancetype) initWithSuccess: (AromaService_GetActivityResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3;

@end

@implementation AromaService_AromaService_getActivity_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaService_GetActivityResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_getActivity_result class]]) {
    return NO;
  }
  AromaService_AromaService_getActivity_result *other = (AromaService_AromaService_getActivity_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_getActivity_result * val = [AromaService_AromaService_getActivity_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  return val;
}

- (void) setSuccess: (AromaService_GetActivityResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidTokenException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaService_GetActivityResponse *fieldValue = [[AromaService_GetActivityResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_getActivity_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_getActivity_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_getReactions_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_GetReactionsRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaService_GetReactionsRequest *) request;

@end

@implementation AromaService_AromaService_getReactions_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaService_GetReactionsRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_getReactions_args class]]) {
    return NO;
  }
  AromaService_AromaService_getReactions_args *other = (AromaService_AromaService_getReactions_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_getReactions_args * val = [AromaService_AromaService_getReactions_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaService_GetReactionsRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaService_GetReactionsRequest *fieldValue = [[AromaService_GetReactionsRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_getReactions_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_getReactions_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_getReactions_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_GetReactionsResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) AromaService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) AromaService_InvalidTokenException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;

@property (strong, nonatomic) AromaService_ApplicationDoesNotExistException ex4;
@property (assign, nonatomic) BOOL ex4IsSet;
- (void) unsetEx4;

@property (strong, nonatomic) AromaService_UnauthorizedException ex5;
@property (assign, nonatomic) BOOL ex5IsSet;
- (void) unsetEx5;


- (instancetype) initWithSuccess: (AromaService_GetReactionsResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_ApplicationDoesNotExistException) ex4 ex5: (AromaService_UnauthorizedException) ex5;

@end

@implementation AromaService_AromaService_getReactions_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaService_GetReactionsResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_ApplicationDoesNotExistException) ex4 ex5: (AromaService_UnauthorizedException) ex5
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
    _ex4 = ex4;
    _ex4IsSet = YES;
    _ex5 = ex5;
    _ex5IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex4"])
    {
      _ex4 = [decoder decodeObjectForKey: @"ex4"];
      _ex4IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex5"])
    {
      _ex5 = [decoder decodeObjectForKey: @"ex5"];
      _ex5IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
  if (_ex4IsSet)
  {
    [encoder encodeObject: _ex4 forKey: @"ex4"];
  }
  if (_ex5IsSet)
  {
    [encoder encodeObject: _ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  hash = (hash * 31) ^ _ex4IsSet ? 2654435761 : 0;
  if (_ex4IsSet)
  {
    hash = (hash * 31) ^ [_ex4 hash];
  }
  hash = (hash * 31) ^ _ex5IsSet ? 2654435761 : 0;
  if (_ex5IsSet)
  {
    hash = (hash * 31) ^ [_ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_getReactions_result class]]) {
    return NO;
  }
  AromaService_AromaService_getReactions_result *other = (AromaService_AromaService_getReactions_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  if ((_ex4IsSet != other->_ex4IsSet) ||
      (_ex4IsSet && ((_ex4 || other->_ex4) && ![_ex4 isEqual:other->_ex4]))) {
    return NO;
  }
  if ((_ex5IsSet != other->_ex5IsSet) ||
      (_ex5IsSet && ((_ex5 || other->_ex5) && ![_ex5 isEqual:other->_ex5]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_getReactions_result * val = [AromaService_AromaService_getReactions_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  if (_ex4IsSet)
  {
    val.ex4 = [self.ex4 copy];
  }
  if (_ex5IsSet)
  {
    val.ex5 = [self.ex5 copy];
  }
  return val;
}

- (void) setSuccess: (AromaService_GetReactionsResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidTokenException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (void) setEx4: (AromaException_ApplicationDoesNotExistException *) ex4 {
  _ex4 = ex4;
  _ex4IsSet = YES;
}

- (void) unsetEx4 {
  _ex4 = nil;
  _ex4IsSet = NO;
}

- (void) setEx5: (AromaException_UnauthorizedException *) ex5 {
  _ex5 = ex5;
  _ex5IsSet = YES;
}

- (void) unsetEx5 {
  _ex5 = nil;
  _ex5IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaService_GetReactionsResponse *fieldValue = [[AromaService_GetReactionsResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          AromaException_ApplicationDoesNotExistException *fieldValue = [[AromaException_ApplicationDoesNotExistException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex4 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          AromaException_UnauthorizedException *fieldValue = [[AromaException_UnauthorizedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex5 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_getReactions_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex4IsSet) {
    if (_ex4 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex4" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_ex4 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex5IsSet) {
    if (_ex5 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex5" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_ex5 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_getReactions_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", _ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", _ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_updateReactions_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_UpdateReactionsRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaService_UpdateReactionsRequest *) request;

@end

@implementation AromaService_AromaService_updateReactions_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaService_UpdateReactionsRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_updateReactions_args class]]) {
    return NO;
  }
  AromaService_AromaService_updateReactions_args *other = (AromaService_AromaService_updateReactions_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_updateReactions_args * val = [AromaService_AromaService_updateReactions_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaService_UpdateReactionsRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaService_UpdateReactionsRequest *fieldValue = [[AromaService_UpdateReactionsRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_updateReactions_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_updateReactions_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_updateReactions_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_UpdateReactionsResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) AromaService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) AromaService_InvalidTokenException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;

@property (strong, nonatomic) AromaService_ApplicationDoesNotExistException ex4;
@property (assign, nonatomic) BOOL ex4IsSet;
- (void) unsetEx4;

@property (strong, nonatomic) AromaService_UnauthorizedException ex5;
@property (assign, nonatomic) BOOL ex5IsSet;
- (void) unsetEx5;


- (instancetype) initWithSuccess: (AromaService_UpdateReactionsResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_ApplicationDoesNotExistException) ex4 ex5: (AromaService_UnauthorizedException) ex5;

@end

@implementation AromaService_AromaService_updateReactions_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaService_UpdateReactionsResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_ApplicationDoesNotExistException) ex4 ex5: (AromaService_UnauthorizedException) ex5
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
    _ex4 = ex4;
    _ex4IsSet = YES;
    _ex5 = ex5;
    _ex5IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex4"])
    {
      _ex4 = [decoder decodeObjectForKey: @"ex4"];
      _ex4IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex5"])
    {
      _ex5 = [decoder decodeObjectForKey: @"ex5"];
      _ex5IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
  if (_ex4IsSet)
  {
    [encoder encodeObject: _ex4 forKey: @"ex4"];
  }
  if (_ex5IsSet)
  {
    [encoder encodeObject: _ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  hash = (hash * 31) ^ _ex4IsSet ? 2654435761 : 0;
  if (_ex4IsSet)
  {
    hash = (hash * 31) ^ [_ex4 hash];
  }
  hash = (hash * 31) ^ _ex5IsSet ? 2654435761 : 0;
  if (_ex5IsSet)
  {
    hash = (hash * 31) ^ [_ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_updateReactions_result class]]) {
    return NO;
  }
  AromaService_AromaService_updateReactions_result *other = (AromaService_AromaService_updateReactions_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  if ((_ex4IsSet != other->_ex4IsSet) ||
      (_ex4IsSet && ((_ex4 || other->_ex4) && ![_ex4 isEqual:other->_ex4]))) {
    return NO;
  }
  if ((_ex5IsSet != other->_ex5IsSet) ||
      (_ex5IsSet && ((_ex5 || other->_ex5) && ![_ex5 isEqual:other->_ex5]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_updateReactions_result * val = [AromaService_AromaService_updateReactions_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  if (_ex4IsSet)
  {
    val.ex4 = [self.ex4 copy];
  }
  if (_ex5IsSet)
  {
    val.ex5 = [self.ex5 copy];
  }
  return val;
}

- (void) setSuccess: (AromaService_UpdateReactionsResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidTokenException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (void) setEx4: (AromaException_ApplicationDoesNotExistException *) ex4 {
  _ex4 = ex4;
  _ex4IsSet = YES;
}

- (void) unsetEx4 {
  _ex4 = nil;
  _ex4IsSet = NO;
}

- (void) setEx5: (AromaException_UnauthorizedException *) ex5 {
  _ex5 = ex5;
  _ex5IsSet = YES;
}

- (void) unsetEx5 {
  _ex5 = nil;
  _ex5IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaService_UpdateReactionsResponse *fieldValue = [[AromaService_UpdateReactionsResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          AromaException_ApplicationDoesNotExistException *fieldValue = [[AromaException_ApplicationDoesNotExistException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex4 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          AromaException_UnauthorizedException *fieldValue = [[AromaException_UnauthorizedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex5 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_updateReactions_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex4IsSet) {
    if (_ex4 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex4" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_ex4 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex5IsSet) {
    if (_ex5 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex5" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_ex5 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_updateReactions_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", _ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", _ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_getApplicationsFollowedBy_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_GetApplicationsFollowedByRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaService_GetApplicationsFollowedByRequest *) request;

@end

@implementation AromaService_AromaService_getApplicationsFollowedBy_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaService_GetApplicationsFollowedByRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_getApplicationsFollowedBy_args class]]) {
    return NO;
  }
  AromaService_AromaService_getApplicationsFollowedBy_args *other = (AromaService_AromaService_getApplicationsFollowedBy_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_getApplicationsFollowedBy_args * val = [AromaService_AromaService_getApplicationsFollowedBy_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaService_GetApplicationsFollowedByRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaService_GetApplicationsFollowedByRequest *fieldValue = [[AromaService_GetApplicationsFollowedByRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_getApplicationsFollowedBy_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_getApplicationsFollowedBy_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_getApplicationsFollowedBy_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_GetApplicationsFollowedByResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) AromaService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) AromaService_InvalidTokenException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;


- (instancetype) initWithSuccess: (AromaService_GetApplicationsFollowedByResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3;

@end

@implementation AromaService_AromaService_getApplicationsFollowedBy_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaService_GetApplicationsFollowedByResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_getApplicationsFollowedBy_result class]]) {
    return NO;
  }
  AromaService_AromaService_getApplicationsFollowedBy_result *other = (AromaService_AromaService_getApplicationsFollowedBy_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_getApplicationsFollowedBy_result * val = [AromaService_AromaService_getApplicationsFollowedBy_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  return val;
}

- (void) setSuccess: (AromaService_GetApplicationsFollowedByResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidTokenException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaService_GetApplicationsFollowedByResponse *fieldValue = [[AromaService_GetApplicationsFollowedByResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_getApplicationsFollowedBy_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_getApplicationsFollowedBy_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_followApplication_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_FollowApplicationRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaService_FollowApplicationRequest *) request;

@end

@implementation AromaService_AromaService_followApplication_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaService_FollowApplicationRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_followApplication_args class]]) {
    return NO;
  }
  AromaService_AromaService_followApplication_args *other = (AromaService_AromaService_followApplication_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_followApplication_args * val = [AromaService_AromaService_followApplication_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaService_FollowApplicationRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaService_FollowApplicationRequest *fieldValue = [[AromaService_FollowApplicationRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_followApplication_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_followApplication_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_followApplication_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_FollowApplicationResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) AromaService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) AromaService_InvalidTokenException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;

@property (strong, nonatomic) AromaService_ApplicationDoesNotExistException ex4;
@property (assign, nonatomic) BOOL ex4IsSet;
- (void) unsetEx4;

@property (strong, nonatomic) AromaService_UnauthorizedException ex5;
@property (assign, nonatomic) BOOL ex5IsSet;
- (void) unsetEx5;


- (instancetype) initWithSuccess: (AromaService_FollowApplicationResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_ApplicationDoesNotExistException) ex4 ex5: (AromaService_UnauthorizedException) ex5;

@end

@implementation AromaService_AromaService_followApplication_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaService_FollowApplicationResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_ApplicationDoesNotExistException) ex4 ex5: (AromaService_UnauthorizedException) ex5
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
    _ex4 = ex4;
    _ex4IsSet = YES;
    _ex5 = ex5;
    _ex5IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex4"])
    {
      _ex4 = [decoder decodeObjectForKey: @"ex4"];
      _ex4IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex5"])
    {
      _ex5 = [decoder decodeObjectForKey: @"ex5"];
      _ex5IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
  if (_ex4IsSet)
  {
    [encoder encodeObject: _ex4 forKey: @"ex4"];
  }
  if (_ex5IsSet)
  {
    [encoder encodeObject: _ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  hash = (hash * 31) ^ _ex4IsSet ? 2654435761 : 0;
  if (_ex4IsSet)
  {
    hash = (hash * 31) ^ [_ex4 hash];
  }
  hash = (hash * 31) ^ _ex5IsSet ? 2654435761 : 0;
  if (_ex5IsSet)
  {
    hash = (hash * 31) ^ [_ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_followApplication_result class]]) {
    return NO;
  }
  AromaService_AromaService_followApplication_result *other = (AromaService_AromaService_followApplication_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  if ((_ex4IsSet != other->_ex4IsSet) ||
      (_ex4IsSet && ((_ex4 || other->_ex4) && ![_ex4 isEqual:other->_ex4]))) {
    return NO;
  }
  if ((_ex5IsSet != other->_ex5IsSet) ||
      (_ex5IsSet && ((_ex5 || other->_ex5) && ![_ex5 isEqual:other->_ex5]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_followApplication_result * val = [AromaService_AromaService_followApplication_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  if (_ex4IsSet)
  {
    val.ex4 = [self.ex4 copy];
  }
  if (_ex5IsSet)
  {
    val.ex5 = [self.ex5 copy];
  }
  return val;
}

- (void) setSuccess: (AromaService_FollowApplicationResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidTokenException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (void) setEx4: (AromaException_ApplicationDoesNotExistException *) ex4 {
  _ex4 = ex4;
  _ex4IsSet = YES;
}

- (void) unsetEx4 {
  _ex4 = nil;
  _ex4IsSet = NO;
}

- (void) setEx5: (AromaException_UnauthorizedException *) ex5 {
  _ex5 = ex5;
  _ex5IsSet = YES;
}

- (void) unsetEx5 {
  _ex5 = nil;
  _ex5IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaService_FollowApplicationResponse *fieldValue = [[AromaService_FollowApplicationResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          AromaException_ApplicationDoesNotExistException *fieldValue = [[AromaException_ApplicationDoesNotExistException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex4 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          AromaException_UnauthorizedException *fieldValue = [[AromaException_UnauthorizedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex5 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_followApplication_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex4IsSet) {
    if (_ex4 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex4" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_ex4 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex5IsSet) {
    if (_ex5 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex5" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_ex5 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_followApplication_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", _ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", _ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_unfollowApplication_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_UnfollowApplicationRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaService_UnfollowApplicationRequest *) request;

@end

@implementation AromaService_AromaService_unfollowApplication_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaService_UnfollowApplicationRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_unfollowApplication_args class]]) {
    return NO;
  }
  AromaService_AromaService_unfollowApplication_args *other = (AromaService_AromaService_unfollowApplication_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_unfollowApplication_args * val = [AromaService_AromaService_unfollowApplication_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaService_UnfollowApplicationRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaService_UnfollowApplicationRequest *fieldValue = [[AromaService_UnfollowApplicationRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_unfollowApplication_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_unfollowApplication_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_unfollowApplication_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_UnfollowApplicationResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) AromaService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) AromaService_InvalidTokenException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;

@property (strong, nonatomic) AromaService_ApplicationDoesNotExistException ex4;
@property (assign, nonatomic) BOOL ex4IsSet;
- (void) unsetEx4;

@property (strong, nonatomic) AromaService_UnauthorizedException ex5;
@property (assign, nonatomic) BOOL ex5IsSet;
- (void) unsetEx5;


- (instancetype) initWithSuccess: (AromaService_UnfollowApplicationResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_ApplicationDoesNotExistException) ex4 ex5: (AromaService_UnauthorizedException) ex5;

@end

@implementation AromaService_AromaService_unfollowApplication_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaService_UnfollowApplicationResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_ApplicationDoesNotExistException) ex4 ex5: (AromaService_UnauthorizedException) ex5
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
    _ex4 = ex4;
    _ex4IsSet = YES;
    _ex5 = ex5;
    _ex5IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex4"])
    {
      _ex4 = [decoder decodeObjectForKey: @"ex4"];
      _ex4IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex5"])
    {
      _ex5 = [decoder decodeObjectForKey: @"ex5"];
      _ex5IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
  if (_ex4IsSet)
  {
    [encoder encodeObject: _ex4 forKey: @"ex4"];
  }
  if (_ex5IsSet)
  {
    [encoder encodeObject: _ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  hash = (hash * 31) ^ _ex4IsSet ? 2654435761 : 0;
  if (_ex4IsSet)
  {
    hash = (hash * 31) ^ [_ex4 hash];
  }
  hash = (hash * 31) ^ _ex5IsSet ? 2654435761 : 0;
  if (_ex5IsSet)
  {
    hash = (hash * 31) ^ [_ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_unfollowApplication_result class]]) {
    return NO;
  }
  AromaService_AromaService_unfollowApplication_result *other = (AromaService_AromaService_unfollowApplication_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  if ((_ex4IsSet != other->_ex4IsSet) ||
      (_ex4IsSet && ((_ex4 || other->_ex4) && ![_ex4 isEqual:other->_ex4]))) {
    return NO;
  }
  if ((_ex5IsSet != other->_ex5IsSet) ||
      (_ex5IsSet && ((_ex5 || other->_ex5) && ![_ex5 isEqual:other->_ex5]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_unfollowApplication_result * val = [AromaService_AromaService_unfollowApplication_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  if (_ex4IsSet)
  {
    val.ex4 = [self.ex4 copy];
  }
  if (_ex5IsSet)
  {
    val.ex5 = [self.ex5 copy];
  }
  return val;
}

- (void) setSuccess: (AromaService_UnfollowApplicationResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidTokenException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (void) setEx4: (AromaException_ApplicationDoesNotExistException *) ex4 {
  _ex4 = ex4;
  _ex4IsSet = YES;
}

- (void) unsetEx4 {
  _ex4 = nil;
  _ex4IsSet = NO;
}

- (void) setEx5: (AromaException_UnauthorizedException *) ex5 {
  _ex5 = ex5;
  _ex5IsSet = YES;
}

- (void) unsetEx5 {
  _ex5 = nil;
  _ex5IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaService_UnfollowApplicationResponse *fieldValue = [[AromaService_UnfollowApplicationResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          AromaException_ApplicationDoesNotExistException *fieldValue = [[AromaException_ApplicationDoesNotExistException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex4 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          AromaException_UnauthorizedException *fieldValue = [[AromaException_UnauthorizedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex5 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_unfollowApplication_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex4IsSet) {
    if (_ex4 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex4" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_ex4 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex5IsSet) {
    if (_ex5 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex5" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_ex5 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_unfollowApplication_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", _ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", _ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_checkIfDeviceIsRegistered_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_CheckIfDeviceIsRegisteredRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaService_CheckIfDeviceIsRegisteredRequest *) request;

@end

@implementation AromaService_AromaService_checkIfDeviceIsRegistered_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaService_CheckIfDeviceIsRegisteredRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_checkIfDeviceIsRegistered_args class]]) {
    return NO;
  }
  AromaService_AromaService_checkIfDeviceIsRegistered_args *other = (AromaService_AromaService_checkIfDeviceIsRegistered_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_checkIfDeviceIsRegistered_args * val = [AromaService_AromaService_checkIfDeviceIsRegistered_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaService_CheckIfDeviceIsRegisteredRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaService_CheckIfDeviceIsRegisteredRequest *fieldValue = [[AromaService_CheckIfDeviceIsRegisteredRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_checkIfDeviceIsRegistered_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_checkIfDeviceIsRegistered_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_checkIfDeviceIsRegistered_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_CheckIfDeviceIsRegisteredResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) AromaService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) AromaService_InvalidTokenException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;

@property (strong, nonatomic) AromaService_UnauthorizedException ex4;
@property (assign, nonatomic) BOOL ex4IsSet;
- (void) unsetEx4;


- (instancetype) initWithSuccess: (AromaService_CheckIfDeviceIsRegisteredResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_UnauthorizedException) ex4;

@end

@implementation AromaService_AromaService_checkIfDeviceIsRegistered_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaService_CheckIfDeviceIsRegisteredResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_UnauthorizedException) ex4
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
    _ex4 = ex4;
    _ex4IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex4"])
    {
      _ex4 = [decoder decodeObjectForKey: @"ex4"];
      _ex4IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
  if (_ex4IsSet)
  {
    [encoder encodeObject: _ex4 forKey: @"ex4"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  hash = (hash * 31) ^ _ex4IsSet ? 2654435761 : 0;
  if (_ex4IsSet)
  {
    hash = (hash * 31) ^ [_ex4 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_checkIfDeviceIsRegistered_result class]]) {
    return NO;
  }
  AromaService_AromaService_checkIfDeviceIsRegistered_result *other = (AromaService_AromaService_checkIfDeviceIsRegistered_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  if ((_ex4IsSet != other->_ex4IsSet) ||
      (_ex4IsSet && ((_ex4 || other->_ex4) && ![_ex4 isEqual:other->_ex4]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_checkIfDeviceIsRegistered_result * val = [AromaService_AromaService_checkIfDeviceIsRegistered_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  if (_ex4IsSet)
  {
    val.ex4 = [self.ex4 copy];
  }
  return val;
}

- (void) setSuccess: (AromaService_CheckIfDeviceIsRegisteredResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidTokenException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (void) setEx4: (AromaException_UnauthorizedException *) ex4 {
  _ex4 = ex4;
  _ex4IsSet = YES;
}

- (void) unsetEx4 {
  _ex4 = nil;
  _ex4IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaService_CheckIfDeviceIsRegisteredResponse *fieldValue = [[AromaService_CheckIfDeviceIsRegisteredResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          AromaException_UnauthorizedException *fieldValue = [[AromaException_UnauthorizedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex4 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_checkIfDeviceIsRegistered_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex4IsSet) {
    if (_ex4 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex4" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_ex4 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_checkIfDeviceIsRegistered_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", _ex4];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_getRegisteredDevices_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_GetRegisteredDevicesRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaService_GetRegisteredDevicesRequest *) request;

@end

@implementation AromaService_AromaService_getRegisteredDevices_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaService_GetRegisteredDevicesRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_getRegisteredDevices_args class]]) {
    return NO;
  }
  AromaService_AromaService_getRegisteredDevices_args *other = (AromaService_AromaService_getRegisteredDevices_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_getRegisteredDevices_args * val = [AromaService_AromaService_getRegisteredDevices_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaService_GetRegisteredDevicesRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaService_GetRegisteredDevicesRequest *fieldValue = [[AromaService_GetRegisteredDevicesRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_getRegisteredDevices_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_getRegisteredDevices_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_getRegisteredDevices_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_GetRegisteredDevicesResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) AromaService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) AromaService_InvalidTokenException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;

@property (strong, nonatomic) AromaService_UnauthorizedException ex4;
@property (assign, nonatomic) BOOL ex4IsSet;
- (void) unsetEx4;


- (instancetype) initWithSuccess: (AromaService_GetRegisteredDevicesResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_UnauthorizedException) ex4;

@end

@implementation AromaService_AromaService_getRegisteredDevices_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaService_GetRegisteredDevicesResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_UnauthorizedException) ex4
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
    _ex4 = ex4;
    _ex4IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex4"])
    {
      _ex4 = [decoder decodeObjectForKey: @"ex4"];
      _ex4IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
  if (_ex4IsSet)
  {
    [encoder encodeObject: _ex4 forKey: @"ex4"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  hash = (hash * 31) ^ _ex4IsSet ? 2654435761 : 0;
  if (_ex4IsSet)
  {
    hash = (hash * 31) ^ [_ex4 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_getRegisteredDevices_result class]]) {
    return NO;
  }
  AromaService_AromaService_getRegisteredDevices_result *other = (AromaService_AromaService_getRegisteredDevices_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  if ((_ex4IsSet != other->_ex4IsSet) ||
      (_ex4IsSet && ((_ex4 || other->_ex4) && ![_ex4 isEqual:other->_ex4]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_getRegisteredDevices_result * val = [AromaService_AromaService_getRegisteredDevices_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  if (_ex4IsSet)
  {
    val.ex4 = [self.ex4 copy];
  }
  return val;
}

- (void) setSuccess: (AromaService_GetRegisteredDevicesResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidTokenException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (void) setEx4: (AromaException_UnauthorizedException *) ex4 {
  _ex4 = ex4;
  _ex4IsSet = YES;
}

- (void) unsetEx4 {
  _ex4 = nil;
  _ex4IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaService_GetRegisteredDevicesResponse *fieldValue = [[AromaService_GetRegisteredDevicesResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          AromaException_UnauthorizedException *fieldValue = [[AromaException_UnauthorizedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex4 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_getRegisteredDevices_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex4IsSet) {
    if (_ex4 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex4" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_ex4 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_getRegisteredDevices_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", _ex4];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_registerDevice_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_RegisterDeviceRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaService_RegisterDeviceRequest *) request;

@end

@implementation AromaService_AromaService_registerDevice_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaService_RegisterDeviceRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_registerDevice_args class]]) {
    return NO;
  }
  AromaService_AromaService_registerDevice_args *other = (AromaService_AromaService_registerDevice_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_registerDevice_args * val = [AromaService_AromaService_registerDevice_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaService_RegisterDeviceRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaService_RegisterDeviceRequest *fieldValue = [[AromaService_RegisterDeviceRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_registerDevice_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_registerDevice_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_registerDevice_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_RegisterDeviceResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) AromaService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) AromaService_InvalidTokenException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;

@property (strong, nonatomic) AromaService_UnauthorizedException ex4;
@property (assign, nonatomic) BOOL ex4IsSet;
- (void) unsetEx4;


- (instancetype) initWithSuccess: (AromaService_RegisterDeviceResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_UnauthorizedException) ex4;

@end

@implementation AromaService_AromaService_registerDevice_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaService_RegisterDeviceResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_UnauthorizedException) ex4
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
    _ex4 = ex4;
    _ex4IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex4"])
    {
      _ex4 = [decoder decodeObjectForKey: @"ex4"];
      _ex4IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
  if (_ex4IsSet)
  {
    [encoder encodeObject: _ex4 forKey: @"ex4"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  hash = (hash * 31) ^ _ex4IsSet ? 2654435761 : 0;
  if (_ex4IsSet)
  {
    hash = (hash * 31) ^ [_ex4 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_registerDevice_result class]]) {
    return NO;
  }
  AromaService_AromaService_registerDevice_result *other = (AromaService_AromaService_registerDevice_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  if ((_ex4IsSet != other->_ex4IsSet) ||
      (_ex4IsSet && ((_ex4 || other->_ex4) && ![_ex4 isEqual:other->_ex4]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_registerDevice_result * val = [AromaService_AromaService_registerDevice_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  if (_ex4IsSet)
  {
    val.ex4 = [self.ex4 copy];
  }
  return val;
}

- (void) setSuccess: (AromaService_RegisterDeviceResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidTokenException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (void) setEx4: (AromaException_UnauthorizedException *) ex4 {
  _ex4 = ex4;
  _ex4IsSet = YES;
}

- (void) unsetEx4 {
  _ex4 = nil;
  _ex4IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaService_RegisterDeviceResponse *fieldValue = [[AromaService_RegisterDeviceResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          AromaException_UnauthorizedException *fieldValue = [[AromaException_UnauthorizedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex4 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_registerDevice_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex4IsSet) {
    if (_ex4 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex4" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_ex4 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_registerDevice_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", _ex4];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_unregisterDevice_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_UnregisterDeviceRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaService_UnregisterDeviceRequest *) request;

@end

@implementation AromaService_AromaService_unregisterDevice_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaService_UnregisterDeviceRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_unregisterDevice_args class]]) {
    return NO;
  }
  AromaService_AromaService_unregisterDevice_args *other = (AromaService_AromaService_unregisterDevice_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_unregisterDevice_args * val = [AromaService_AromaService_unregisterDevice_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaService_UnregisterDeviceRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaService_UnregisterDeviceRequest *fieldValue = [[AromaService_UnregisterDeviceRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_unregisterDevice_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_unregisterDevice_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_unregisterDevice_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_UnregisterDeviceResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) AromaService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) AromaService_InvalidTokenException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;

@property (strong, nonatomic) AromaService_UnauthorizedException ex4;
@property (assign, nonatomic) BOOL ex4IsSet;
- (void) unsetEx4;


- (instancetype) initWithSuccess: (AromaService_UnregisterDeviceResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_UnauthorizedException) ex4;

@end

@implementation AromaService_AromaService_unregisterDevice_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaService_UnregisterDeviceResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_UnauthorizedException) ex4
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
    _ex4 = ex4;
    _ex4IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex4"])
    {
      _ex4 = [decoder decodeObjectForKey: @"ex4"];
      _ex4IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
  if (_ex4IsSet)
  {
    [encoder encodeObject: _ex4 forKey: @"ex4"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  hash = (hash * 31) ^ _ex4IsSet ? 2654435761 : 0;
  if (_ex4IsSet)
  {
    hash = (hash * 31) ^ [_ex4 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_unregisterDevice_result class]]) {
    return NO;
  }
  AromaService_AromaService_unregisterDevice_result *other = (AromaService_AromaService_unregisterDevice_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  if ((_ex4IsSet != other->_ex4IsSet) ||
      (_ex4IsSet && ((_ex4 || other->_ex4) && ![_ex4 isEqual:other->_ex4]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_unregisterDevice_result * val = [AromaService_AromaService_unregisterDevice_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  if (_ex4IsSet)
  {
    val.ex4 = [self.ex4 copy];
  }
  return val;
}

- (void) setSuccess: (AromaService_UnregisterDeviceResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidTokenException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (void) setEx4: (AromaException_UnauthorizedException *) ex4 {
  _ex4 = ex4;
  _ex4IsSet = YES;
}

- (void) unsetEx4 {
  _ex4 = nil;
  _ex4IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaService_UnregisterDeviceResponse *fieldValue = [[AromaService_UnregisterDeviceResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          AromaException_UnauthorizedException *fieldValue = [[AromaException_UnauthorizedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex4 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_unregisterDevice_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex4IsSet) {
    if (_ex4 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex4" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_ex4 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_unregisterDevice_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", _ex4];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_getDashboard_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_GetDashboardRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaService_GetDashboardRequest *) request;

@end

@implementation AromaService_AromaService_getDashboard_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaService_GetDashboardRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_getDashboard_args class]]) {
    return NO;
  }
  AromaService_AromaService_getDashboard_args *other = (AromaService_AromaService_getDashboard_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_getDashboard_args * val = [AromaService_AromaService_getDashboard_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaService_GetDashboardRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaService_GetDashboardRequest *fieldValue = [[AromaService_GetDashboardRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_getDashboard_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_getDashboard_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_getDashboard_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_GetDashboardResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) AromaService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) AromaService_InvalidTokenException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;


- (instancetype) initWithSuccess: (AromaService_GetDashboardResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3;

@end

@implementation AromaService_AromaService_getDashboard_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaService_GetDashboardResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_getDashboard_result class]]) {
    return NO;
  }
  AromaService_AromaService_getDashboard_result *other = (AromaService_AromaService_getDashboard_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_getDashboard_result * val = [AromaService_AromaService_getDashboard_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  return val;
}

- (void) setSuccess: (AromaService_GetDashboardResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidTokenException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaService_GetDashboardResponse *fieldValue = [[AromaService_GetDashboardResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_getDashboard_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_getDashboard_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_getBuzz_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_GetBuzzRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaService_GetBuzzRequest *) request;

@end

@implementation AromaService_AromaService_getBuzz_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaService_GetBuzzRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_getBuzz_args class]]) {
    return NO;
  }
  AromaService_AromaService_getBuzz_args *other = (AromaService_AromaService_getBuzz_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_getBuzz_args * val = [AromaService_AromaService_getBuzz_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaService_GetBuzzRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaService_GetBuzzRequest *fieldValue = [[AromaService_GetBuzzRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_getBuzz_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_getBuzz_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_getBuzz_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_GetBuzzResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) AromaService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) AromaService_InvalidTokenException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;

@property (strong, nonatomic) AromaService_ApplicationDoesNotExistException ex4;
@property (assign, nonatomic) BOOL ex4IsSet;
- (void) unsetEx4;

@property (strong, nonatomic) AromaService_UnauthorizedException ex5;
@property (assign, nonatomic) BOOL ex5IsSet;
- (void) unsetEx5;


- (instancetype) initWithSuccess: (AromaService_GetBuzzResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_ApplicationDoesNotExistException) ex4 ex5: (AromaService_UnauthorizedException) ex5;

@end

@implementation AromaService_AromaService_getBuzz_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaService_GetBuzzResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_ApplicationDoesNotExistException) ex4 ex5: (AromaService_UnauthorizedException) ex5
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
    _ex4 = ex4;
    _ex4IsSet = YES;
    _ex5 = ex5;
    _ex5IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex4"])
    {
      _ex4 = [decoder decodeObjectForKey: @"ex4"];
      _ex4IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex5"])
    {
      _ex5 = [decoder decodeObjectForKey: @"ex5"];
      _ex5IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
  if (_ex4IsSet)
  {
    [encoder encodeObject: _ex4 forKey: @"ex4"];
  }
  if (_ex5IsSet)
  {
    [encoder encodeObject: _ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  hash = (hash * 31) ^ _ex4IsSet ? 2654435761 : 0;
  if (_ex4IsSet)
  {
    hash = (hash * 31) ^ [_ex4 hash];
  }
  hash = (hash * 31) ^ _ex5IsSet ? 2654435761 : 0;
  if (_ex5IsSet)
  {
    hash = (hash * 31) ^ [_ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_getBuzz_result class]]) {
    return NO;
  }
  AromaService_AromaService_getBuzz_result *other = (AromaService_AromaService_getBuzz_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  if ((_ex4IsSet != other->_ex4IsSet) ||
      (_ex4IsSet && ((_ex4 || other->_ex4) && ![_ex4 isEqual:other->_ex4]))) {
    return NO;
  }
  if ((_ex5IsSet != other->_ex5IsSet) ||
      (_ex5IsSet && ((_ex5 || other->_ex5) && ![_ex5 isEqual:other->_ex5]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_getBuzz_result * val = [AromaService_AromaService_getBuzz_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  if (_ex4IsSet)
  {
    val.ex4 = [self.ex4 copy];
  }
  if (_ex5IsSet)
  {
    val.ex5 = [self.ex5 copy];
  }
  return val;
}

- (void) setSuccess: (AromaService_GetBuzzResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidTokenException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (void) setEx4: (AromaException_ApplicationDoesNotExistException *) ex4 {
  _ex4 = ex4;
  _ex4IsSet = YES;
}

- (void) unsetEx4 {
  _ex4 = nil;
  _ex4IsSet = NO;
}

- (void) setEx5: (AromaException_UnauthorizedException *) ex5 {
  _ex5 = ex5;
  _ex5IsSet = YES;
}

- (void) unsetEx5 {
  _ex5 = nil;
  _ex5IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaService_GetBuzzResponse *fieldValue = [[AromaService_GetBuzzResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          AromaException_ApplicationDoesNotExistException *fieldValue = [[AromaException_ApplicationDoesNotExistException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex4 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          AromaException_UnauthorizedException *fieldValue = [[AromaException_UnauthorizedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex5 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_getBuzz_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex4IsSet) {
    if (_ex4 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex4" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_ex4 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex5IsSet) {
    if (_ex5 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex5" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_ex5 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_getBuzz_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", _ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", _ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_getApiVersion_args : NSObject <TBase, NSCoding, NSCopying> 



@end

@implementation AromaService_AromaService_getApiVersion_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_getApiVersion_args class]]) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_getApiVersion_args * val = [AromaService_AromaService_getApiVersion_args new];
  return val;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_getApiVersion_args" error: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_getApiVersion_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_getApiVersion_result : NSObject <TBase, NSCoding, NSCopying> 

@property (assign, nonatomic) double success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;


- (instancetype) initWithSuccess: (double) success;

@end

@implementation AromaService_AromaService_getApiVersion_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (double) success
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeDoubleForKey: @"success"];
      _successIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeDouble: _success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [@(_success) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_getApiVersion_result class]]) {
    return NO;
  }
  AromaService_AromaService_getApiVersion_result *other = (AromaService_AromaService_getApiVersion_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && (_success != other->_success))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_getApiVersion_result * val = [AromaService_AromaService_getApiVersion_result new];
  if (_successIsSet)
  {
    val.success = self.success;
  }
  return val;
}

- (void) setSuccess: (double) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _successIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeDOUBLE) {
          double fieldValue;
          if (![inProtocol readDouble:&fieldValue error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_getApiVersion_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeDOUBLE fieldID: 0 error: __thriftError]) return NO;
    if (![outProtocol writeDouble: _success error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_getApiVersion_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%f", _success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_registerHealthCheck_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_RegisterHealthCheckRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaService_RegisterHealthCheckRequest *) request;

@end

@implementation AromaService_AromaService_registerHealthCheck_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaService_RegisterHealthCheckRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_registerHealthCheck_args class]]) {
    return NO;
  }
  AromaService_AromaService_registerHealthCheck_args *other = (AromaService_AromaService_registerHealthCheck_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_registerHealthCheck_args * val = [AromaService_AromaService_registerHealthCheck_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaService_RegisterHealthCheckRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaService_RegisterHealthCheckRequest *fieldValue = [[AromaService_RegisterHealthCheckRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_registerHealthCheck_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_registerHealthCheck_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_registerHealthCheck_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_RegisterHealthCheckResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) AromaService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) AromaService_InvalidTokenException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;

@property (strong, nonatomic) AromaService_ApplicationDoesNotExistException ex4;
@property (assign, nonatomic) BOOL ex4IsSet;
- (void) unsetEx4;

@property (strong, nonatomic) AromaService_UnauthorizedException ex5;
@property (assign, nonatomic) BOOL ex5IsSet;
- (void) unsetEx5;


- (instancetype) initWithSuccess: (AromaService_RegisterHealthCheckResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_ApplicationDoesNotExistException) ex4 ex5: (AromaService_UnauthorizedException) ex5;

@end

@implementation AromaService_AromaService_registerHealthCheck_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaService_RegisterHealthCheckResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_ApplicationDoesNotExistException) ex4 ex5: (AromaService_UnauthorizedException) ex5
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
    _ex4 = ex4;
    _ex4IsSet = YES;
    _ex5 = ex5;
    _ex5IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex4"])
    {
      _ex4 = [decoder decodeObjectForKey: @"ex4"];
      _ex4IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex5"])
    {
      _ex5 = [decoder decodeObjectForKey: @"ex5"];
      _ex5IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
  if (_ex4IsSet)
  {
    [encoder encodeObject: _ex4 forKey: @"ex4"];
  }
  if (_ex5IsSet)
  {
    [encoder encodeObject: _ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  hash = (hash * 31) ^ _ex4IsSet ? 2654435761 : 0;
  if (_ex4IsSet)
  {
    hash = (hash * 31) ^ [_ex4 hash];
  }
  hash = (hash * 31) ^ _ex5IsSet ? 2654435761 : 0;
  if (_ex5IsSet)
  {
    hash = (hash * 31) ^ [_ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_registerHealthCheck_result class]]) {
    return NO;
  }
  AromaService_AromaService_registerHealthCheck_result *other = (AromaService_AromaService_registerHealthCheck_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  if ((_ex4IsSet != other->_ex4IsSet) ||
      (_ex4IsSet && ((_ex4 || other->_ex4) && ![_ex4 isEqual:other->_ex4]))) {
    return NO;
  }
  if ((_ex5IsSet != other->_ex5IsSet) ||
      (_ex5IsSet && ((_ex5 || other->_ex5) && ![_ex5 isEqual:other->_ex5]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_registerHealthCheck_result * val = [AromaService_AromaService_registerHealthCheck_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  if (_ex4IsSet)
  {
    val.ex4 = [self.ex4 copy];
  }
  if (_ex5IsSet)
  {
    val.ex5 = [self.ex5 copy];
  }
  return val;
}

- (void) setSuccess: (AromaService_RegisterHealthCheckResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidTokenException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (void) setEx4: (AromaException_ApplicationDoesNotExistException *) ex4 {
  _ex4 = ex4;
  _ex4IsSet = YES;
}

- (void) unsetEx4 {
  _ex4 = nil;
  _ex4IsSet = NO;
}

- (void) setEx5: (AromaException_UnauthorizedException *) ex5 {
  _ex5 = ex5;
  _ex5IsSet = YES;
}

- (void) unsetEx5 {
  _ex5 = nil;
  _ex5IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaService_RegisterHealthCheckResponse *fieldValue = [[AromaService_RegisterHealthCheckResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          AromaException_ApplicationDoesNotExistException *fieldValue = [[AromaException_ApplicationDoesNotExistException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex4 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          AromaException_UnauthorizedException *fieldValue = [[AromaException_UnauthorizedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex5 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_registerHealthCheck_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex4IsSet) {
    if (_ex4 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex4" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_ex4 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex5IsSet) {
    if (_ex5 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex5" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_ex5 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_registerHealthCheck_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", _ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", _ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_getMedia_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_GetMediaRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaService_GetMediaRequest *) request;

@end

@implementation AromaService_AromaService_getMedia_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaService_GetMediaRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_getMedia_args class]]) {
    return NO;
  }
  AromaService_AromaService_getMedia_args *other = (AromaService_AromaService_getMedia_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_getMedia_args * val = [AromaService_AromaService_getMedia_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaService_GetMediaRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaService_GetMediaRequest *fieldValue = [[AromaService_GetMediaRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_getMedia_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_getMedia_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaService_getMedia_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaService_GetMediaResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) AromaService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) AromaService_InvalidTokenException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;

@property (strong, nonatomic) AromaService_DoesNotExistException ex4;
@property (assign, nonatomic) BOOL ex4IsSet;
- (void) unsetEx4;

@property (strong, nonatomic) AromaService_UnauthorizedException ex5;
@property (assign, nonatomic) BOOL ex5IsSet;
- (void) unsetEx5;


- (instancetype) initWithSuccess: (AromaService_GetMediaResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_DoesNotExistException) ex4 ex5: (AromaService_UnauthorizedException) ex5;

@end

@implementation AromaService_AromaService_getMedia_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaService_GetMediaResponse *) success ex1: (AromaService_OperationFailedException) ex1 ex2: (AromaService_InvalidArgumentException) ex2 ex3: (AromaService_InvalidTokenException) ex3 ex4: (AromaService_DoesNotExistException) ex4 ex5: (AromaService_UnauthorizedException) ex5
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
    _ex4 = ex4;
    _ex4IsSet = YES;
    _ex5 = ex5;
    _ex5IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex4"])
    {
      _ex4 = [decoder decodeObjectForKey: @"ex4"];
      _ex4IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex5"])
    {
      _ex5 = [decoder decodeObjectForKey: @"ex5"];
      _ex5IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
  if (_ex4IsSet)
  {
    [encoder encodeObject: _ex4 forKey: @"ex4"];
  }
  if (_ex5IsSet)
  {
    [encoder encodeObject: _ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  hash = (hash * 31) ^ _ex4IsSet ? 2654435761 : 0;
  if (_ex4IsSet)
  {
    hash = (hash * 31) ^ [_ex4 hash];
  }
  hash = (hash * 31) ^ _ex5IsSet ? 2654435761 : 0;
  if (_ex5IsSet)
  {
    hash = (hash * 31) ^ [_ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaService_AromaService_getMedia_result class]]) {
    return NO;
  }
  AromaService_AromaService_getMedia_result *other = (AromaService_AromaService_getMedia_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  if ((_ex4IsSet != other->_ex4IsSet) ||
      (_ex4IsSet && ((_ex4 || other->_ex4) && ![_ex4 isEqual:other->_ex4]))) {
    return NO;
  }
  if ((_ex5IsSet != other->_ex5IsSet) ||
      (_ex5IsSet && ((_ex5 || other->_ex5) && ![_ex5 isEqual:other->_ex5]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaService_AromaService_getMedia_result * val = [AromaService_AromaService_getMedia_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  if (_ex4IsSet)
  {
    val.ex4 = [self.ex4 copy];
  }
  if (_ex5IsSet)
  {
    val.ex5 = [self.ex5 copy];
  }
  return val;
}

- (void) setSuccess: (AromaService_GetMediaResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidTokenException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (void) setEx4: (AromaException_DoesNotExistException *) ex4 {
  _ex4 = ex4;
  _ex4IsSet = YES;
}

- (void) unsetEx4 {
  _ex4 = nil;
  _ex4IsSet = NO;
}

- (void) setEx5: (AromaException_UnauthorizedException *) ex5 {
  _ex5 = ex5;
  _ex5IsSet = YES;
}

- (void) unsetEx5 {
  _ex5 = nil;
  _ex5IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaService_GetMediaResponse *fieldValue = [[AromaService_GetMediaResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          AromaException_DoesNotExistException *fieldValue = [[AromaException_DoesNotExistException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex4 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          AromaException_UnauthorizedException *fieldValue = [[AromaException_UnauthorizedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex5 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaService_getMedia_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex4IsSet) {
    if (_ex4 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex4" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_ex4 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex5IsSet) {
    if (_ex5 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex5" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_ex5 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaService_AromaService_getMedia_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", _ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", _ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaService_AromaServiceClient () {

  id<TProtocol> inProtocol;
  id<TProtocol> outProtocol;

}

@end

@implementation AromaService_AromaServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  if (self)   {
    inProtocol = anInProtocol;
    outProtocol = anOutProtocol;
  }
  return self;
}

- (BOOL) send_signIn: (AromaService_SignInRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"signIn" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_signIn_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_signIn: (AromaService_SignInResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_signIn_result * resulter = [AromaService_AromaService_signIn_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (resulter.ex4IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex4];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"signIn"}];
  }
  return NO;
}

- (AromaService_SignInResponse *) signIn: (AromaService_SignInRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_signIn : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaService_SignInResponse * __result;
  if (![self recv_signIn: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_signUp: (AromaService_SignUpRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"signUp" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_signUp_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_signUp: (AromaService_SignUpResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_signUp_result * resulter = [AromaService_AromaService_signUp_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (resulter.ex4IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex4];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"signUp"}];
  }
  return NO;
}

- (AromaService_SignUpResponse *) signUp: (AromaService_SignUpRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_signUp : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaService_SignUpResponse * __result;
  if (![self recv_signUp: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_getUserInfo: (AromaService_GetUserInfoRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"getUserInfo" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_getUserInfo_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_getUserInfo: (AromaService_GetUserInfoResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_getUserInfo_result * resulter = [AromaService_AromaService_getUserInfo_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (resulter.ex4IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex4];
    }
    return NO;
  }
  if (resulter.ex5IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex5];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"getUserInfo"}];
  }
  return NO;
}

- (AromaService_GetUserInfoResponse *) getUserInfo: (AromaService_GetUserInfoRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_getUserInfo : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaService_GetUserInfoResponse * __result;
  if (![self recv_getUserInfo: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_getApplicationInfo: (AromaService_GetApplicationInfoRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"getApplicationInfo" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_getApplicationInfo_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_getApplicationInfo: (AromaService_GetApplicationInfoResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_getApplicationInfo_result * resulter = [AromaService_AromaService_getApplicationInfo_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (resulter.ex4IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex4];
    }
    return NO;
  }
  if (resulter.ex5IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex5];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"getApplicationInfo"}];
  }
  return NO;
}

- (AromaService_GetApplicationInfoResponse *) getApplicationInfo: (AromaService_GetApplicationInfoRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_getApplicationInfo : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaService_GetApplicationInfoResponse * __result;
  if (![self recv_getApplicationInfo: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_getApplicationsOwnedBy: (AromaService_GetApplicationsOwnedByRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"getApplicationsOwnedBy" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_getApplicationsOwnedBy_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_getApplicationsOwnedBy: (AromaService_GetApplicationsOwnedByResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_getApplicationsOwnedBy_result * resulter = [AromaService_AromaService_getApplicationsOwnedBy_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"getApplicationsOwnedBy"}];
  }
  return NO;
}

- (AromaService_GetApplicationsOwnedByResponse *) getApplicationsOwnedBy: (AromaService_GetApplicationsOwnedByRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_getApplicationsOwnedBy : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaService_GetApplicationsOwnedByResponse * __result;
  if (![self recv_getApplicationsOwnedBy: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_provisionApplication: (AromaService_ProvisionApplicationRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"provisionApplication" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_provisionApplication_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_provisionApplication: (AromaService_ProvisionApplicationResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_provisionApplication_result * resulter = [AromaService_AromaService_provisionApplication_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (resulter.ex4IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex4];
    }
    return NO;
  }
  if (resulter.ex5IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex5];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"provisionApplication"}];
  }
  return NO;
}

- (AromaService_ProvisionApplicationResponse *) provisionApplication: (AromaService_ProvisionApplicationRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_provisionApplication : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaService_ProvisionApplicationResponse * __result;
  if (![self recv_provisionApplication: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_recreateToken: (AromaService_RecreateApplicationTokenRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"recreateToken" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_recreateToken_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_recreateToken: (AromaService_RecreateApplicationTokenResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_recreateToken_result * resulter = [AromaService_AromaService_recreateToken_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (resulter.ex4IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex4];
    }
    return NO;
  }
  if (resulter.ex5IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex5];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"recreateToken"}];
  }
  return NO;
}

- (AromaService_RecreateApplicationTokenResponse *) recreateToken: (AromaService_RecreateApplicationTokenRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_recreateToken : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaService_RecreateApplicationTokenResponse * __result;
  if (![self recv_recreateToken: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_deleteApplication: (AromaService_DeleteApplicationRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"deleteApplication" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_deleteApplication_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_deleteApplication: (AromaService_DeleteApplicationResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_deleteApplication_result * resulter = [AromaService_AromaService_deleteApplication_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (resulter.ex4IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex4];
    }
    return NO;
  }
  if (resulter.ex5IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex5];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"deleteApplication"}];
  }
  return NO;
}

- (AromaService_DeleteApplicationResponse *) deleteApplication: (AromaService_DeleteApplicationRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_deleteApplication : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaService_DeleteApplicationResponse * __result;
  if (![self recv_deleteApplication: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_renewApplicationToken: (AromaService_RenewApplicationTokenRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"renewApplicationToken" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_renewApplicationToken_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_renewApplicationToken: (AromaService_RenewApplicationTokenResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_renewApplicationToken_result * resulter = [AromaService_AromaService_renewApplicationToken_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (resulter.ex4IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex4];
    }
    return NO;
  }
  if (resulter.ex5IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex5];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"renewApplicationToken"}];
  }
  return NO;
}

- (AromaService_RenewApplicationTokenResponse *) renewApplicationToken: (AromaService_RenewApplicationTokenRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_renewApplicationToken : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaService_RenewApplicationTokenResponse * __result;
  if (![self recv_renewApplicationToken: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_updateApplication: (AromaService_UpdateApplicationRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"updateApplication" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_updateApplication_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_updateApplication: (AromaService_UpdateApplicationResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_updateApplication_result * resulter = [AromaService_AromaService_updateApplication_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (resulter.ex4IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex4];
    }
    return NO;
  }
  if (resulter.ex5IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex5];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"updateApplication"}];
  }
  return NO;
}

- (AromaService_UpdateApplicationResponse *) updateApplication: (AromaService_UpdateApplicationRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_updateApplication : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaService_UpdateApplicationResponse * __result;
  if (![self recv_updateApplication: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_searchForApplications: (AromaService_SearchForApplicationsRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"searchForApplications" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_searchForApplications_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_searchForApplications: (AromaService_SearchForApplicationsResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_searchForApplications_result * resulter = [AromaService_AromaService_searchForApplications_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (resulter.ex4IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex4];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"searchForApplications"}];
  }
  return NO;
}

- (AromaService_SearchForApplicationsResponse *) searchForApplications: (AromaService_SearchForApplicationsRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_searchForApplications : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaService_SearchForApplicationsResponse * __result;
  if (![self recv_searchForApplications: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_getApplicationMessages: (AromaService_GetApplicationMessagesRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"getApplicationMessages" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_getApplicationMessages_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_getApplicationMessages: (AromaService_GetApplicationMessagesResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_getApplicationMessages_result * resulter = [AromaService_AromaService_getApplicationMessages_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (resulter.ex4IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex4];
    }
    return NO;
  }
  if (resulter.ex5IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex5];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"getApplicationMessages"}];
  }
  return NO;
}

- (AromaService_GetApplicationMessagesResponse *) getApplicationMessages: (AromaService_GetApplicationMessagesRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_getApplicationMessages : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaService_GetApplicationMessagesResponse * __result;
  if (![self recv_getApplicationMessages: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_getFullMessage: (AromaService_GetFullMessageRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"getFullMessage" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_getFullMessage_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_getFullMessage: (AromaService_GetFullMessageResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_getFullMessage_result * resulter = [AromaService_AromaService_getFullMessage_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"getFullMessage"}];
  }
  return NO;
}

- (AromaService_GetFullMessageResponse *) getFullMessage: (AromaService_GetFullMessageRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_getFullMessage : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaService_GetFullMessageResponse * __result;
  if (![self recv_getFullMessage: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_deleteMessage: (AromaService_DeleteMessageRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"deleteMessage" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_deleteMessage_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_deleteMessage: (AromaService_DeleteMessageResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_deleteMessage_result * resulter = [AromaService_AromaService_deleteMessage_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (resulter.ex4IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex4];
    }
    return NO;
  }
  if (resulter.ex5IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex5];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"deleteMessage"}];
  }
  return NO;
}

- (AromaService_DeleteMessageResponse *) deleteMessage: (AromaService_DeleteMessageRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_deleteMessage : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaService_DeleteMessageResponse * __result;
  if (![self recv_deleteMessage: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_dismissMessage: (AromaService_DismissMessageRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"dismissMessage" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_dismissMessage_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_dismissMessage: (AromaService_DismissMessageResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_dismissMessage_result * resulter = [AromaService_AromaService_dismissMessage_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (resulter.ex4IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex4];
    }
    return NO;
  }
  if (resulter.ex5IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex5];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"dismissMessage"}];
  }
  return NO;
}

- (AromaService_DismissMessageResponse *) dismissMessage: (AromaService_DismissMessageRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_dismissMessage : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaService_DismissMessageResponse * __result;
  if (![self recv_dismissMessage: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_getInbox: (AromaService_GetInboxRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"getInbox" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_getInbox_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_getInbox: (AromaService_GetInboxResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_getInbox_result * resulter = [AromaService_AromaService_getInbox_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"getInbox"}];
  }
  return NO;
}

- (AromaService_GetInboxResponse *) getInbox: (AromaService_GetInboxRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_getInbox : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaService_GetInboxResponse * __result;
  if (![self recv_getInbox: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_getActivity: (AromaService_GetActivityRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"getActivity" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_getActivity_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_getActivity: (AromaService_GetActivityResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_getActivity_result * resulter = [AromaService_AromaService_getActivity_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"getActivity"}];
  }
  return NO;
}

- (AromaService_GetActivityResponse *) getActivity: (AromaService_GetActivityRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_getActivity : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaService_GetActivityResponse * __result;
  if (![self recv_getActivity: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_getReactions: (AromaService_GetReactionsRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"getReactions" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_getReactions_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_getReactions: (AromaService_GetReactionsResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_getReactions_result * resulter = [AromaService_AromaService_getReactions_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (resulter.ex4IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex4];
    }
    return NO;
  }
  if (resulter.ex5IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex5];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"getReactions"}];
  }
  return NO;
}

- (AromaService_GetReactionsResponse *) getReactions: (AromaService_GetReactionsRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_getReactions : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaService_GetReactionsResponse * __result;
  if (![self recv_getReactions: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_updateReactions: (AromaService_UpdateReactionsRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"updateReactions" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_updateReactions_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_updateReactions: (AromaService_UpdateReactionsResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_updateReactions_result * resulter = [AromaService_AromaService_updateReactions_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (resulter.ex4IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex4];
    }
    return NO;
  }
  if (resulter.ex5IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex5];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"updateReactions"}];
  }
  return NO;
}

- (AromaService_UpdateReactionsResponse *) updateReactions: (AromaService_UpdateReactionsRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_updateReactions : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaService_UpdateReactionsResponse * __result;
  if (![self recv_updateReactions: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_getApplicationsFollowedBy: (AromaService_GetApplicationsFollowedByRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"getApplicationsFollowedBy" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_getApplicationsFollowedBy_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_getApplicationsFollowedBy: (AromaService_GetApplicationsFollowedByResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_getApplicationsFollowedBy_result * resulter = [AromaService_AromaService_getApplicationsFollowedBy_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"getApplicationsFollowedBy"}];
  }
  return NO;
}

- (AromaService_GetApplicationsFollowedByResponse *) getApplicationsFollowedBy: (AromaService_GetApplicationsFollowedByRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_getApplicationsFollowedBy : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaService_GetApplicationsFollowedByResponse * __result;
  if (![self recv_getApplicationsFollowedBy: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_followApplication: (AromaService_FollowApplicationRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"followApplication" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_followApplication_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_followApplication: (AromaService_FollowApplicationResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_followApplication_result * resulter = [AromaService_AromaService_followApplication_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (resulter.ex4IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex4];
    }
    return NO;
  }
  if (resulter.ex5IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex5];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"followApplication"}];
  }
  return NO;
}

- (AromaService_FollowApplicationResponse *) followApplication: (AromaService_FollowApplicationRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_followApplication : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaService_FollowApplicationResponse * __result;
  if (![self recv_followApplication: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_unfollowApplication: (AromaService_UnfollowApplicationRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"unfollowApplication" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_unfollowApplication_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_unfollowApplication: (AromaService_UnfollowApplicationResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_unfollowApplication_result * resulter = [AromaService_AromaService_unfollowApplication_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (resulter.ex4IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex4];
    }
    return NO;
  }
  if (resulter.ex5IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex5];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"unfollowApplication"}];
  }
  return NO;
}

- (AromaService_UnfollowApplicationResponse *) unfollowApplication: (AromaService_UnfollowApplicationRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_unfollowApplication : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaService_UnfollowApplicationResponse * __result;
  if (![self recv_unfollowApplication: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_checkIfDeviceIsRegistered: (AromaService_CheckIfDeviceIsRegisteredRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"checkIfDeviceIsRegistered" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_checkIfDeviceIsRegistered_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_checkIfDeviceIsRegistered: (AromaService_CheckIfDeviceIsRegisteredResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_checkIfDeviceIsRegistered_result * resulter = [AromaService_AromaService_checkIfDeviceIsRegistered_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (resulter.ex4IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex4];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"checkIfDeviceIsRegistered"}];
  }
  return NO;
}

- (AromaService_CheckIfDeviceIsRegisteredResponse *) checkIfDeviceIsRegistered: (AromaService_CheckIfDeviceIsRegisteredRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_checkIfDeviceIsRegistered : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaService_CheckIfDeviceIsRegisteredResponse * __result;
  if (![self recv_checkIfDeviceIsRegistered: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_getRegisteredDevices: (AromaService_GetRegisteredDevicesRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"getRegisteredDevices" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_getRegisteredDevices_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_getRegisteredDevices: (AromaService_GetRegisteredDevicesResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_getRegisteredDevices_result * resulter = [AromaService_AromaService_getRegisteredDevices_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (resulter.ex4IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex4];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"getRegisteredDevices"}];
  }
  return NO;
}

- (AromaService_GetRegisteredDevicesResponse *) getRegisteredDevices: (AromaService_GetRegisteredDevicesRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_getRegisteredDevices : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaService_GetRegisteredDevicesResponse * __result;
  if (![self recv_getRegisteredDevices: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_registerDevice: (AromaService_RegisterDeviceRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"registerDevice" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_registerDevice_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_registerDevice: (AromaService_RegisterDeviceResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_registerDevice_result * resulter = [AromaService_AromaService_registerDevice_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (resulter.ex4IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex4];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"registerDevice"}];
  }
  return NO;
}

- (AromaService_RegisterDeviceResponse *) registerDevice: (AromaService_RegisterDeviceRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_registerDevice : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaService_RegisterDeviceResponse * __result;
  if (![self recv_registerDevice: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_unregisterDevice: (AromaService_UnregisterDeviceRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"unregisterDevice" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_unregisterDevice_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_unregisterDevice: (AromaService_UnregisterDeviceResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_unregisterDevice_result * resulter = [AromaService_AromaService_unregisterDevice_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (resulter.ex4IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex4];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"unregisterDevice"}];
  }
  return NO;
}

- (AromaService_UnregisterDeviceResponse *) unregisterDevice: (AromaService_UnregisterDeviceRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_unregisterDevice : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaService_UnregisterDeviceResponse * __result;
  if (![self recv_unregisterDevice: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_getDashboard: (AromaService_GetDashboardRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"getDashboard" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_getDashboard_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_getDashboard: (AromaService_GetDashboardResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_getDashboard_result * resulter = [AromaService_AromaService_getDashboard_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"getDashboard"}];
  }
  return NO;
}

- (AromaService_GetDashboardResponse *) getDashboard: (AromaService_GetDashboardRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_getDashboard : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaService_GetDashboardResponse * __result;
  if (![self recv_getDashboard: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_getBuzz: (AromaService_GetBuzzRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"getBuzz" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_getBuzz_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_getBuzz: (AromaService_GetBuzzResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_getBuzz_result * resulter = [AromaService_AromaService_getBuzz_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (resulter.ex4IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex4];
    }
    return NO;
  }
  if (resulter.ex5IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex5];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"getBuzz"}];
  }
  return NO;
}

- (AromaService_GetBuzzResponse *) getBuzz: (AromaService_GetBuzzRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_getBuzz : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaService_GetBuzzResponse * __result;
  if (![self recv_getBuzz: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_getApiVersion: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"getApiVersion" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_getApiVersion_args" error: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_getApiVersion: (double *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_getApiVersion_result * resulter = [AromaService_AromaService_getApiVersion_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"getApiVersion"}];
  }
  return NO;
}

- (NSNumber *) getApiVersion: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_getApiVersion: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  double __result;
  if (![self recv_getApiVersion: &__result error: __thriftError]) return nil;
  return @(__result);
}

- (BOOL) send_registerHealthCheck: (AromaService_RegisterHealthCheckRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"registerHealthCheck" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_registerHealthCheck_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_registerHealthCheck: (AromaService_RegisterHealthCheckResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_registerHealthCheck_result * resulter = [AromaService_AromaService_registerHealthCheck_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (resulter.ex4IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex4];
    }
    return NO;
  }
  if (resulter.ex5IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex5];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"registerHealthCheck"}];
  }
  return NO;
}

- (AromaService_RegisterHealthCheckResponse *) registerHealthCheck: (AromaService_RegisterHealthCheckRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_registerHealthCheck : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaService_RegisterHealthCheckResponse * __result;
  if (![self recv_registerHealthCheck: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_getMedia: (AromaService_GetMediaRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"getMedia" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"AromaService_getMedia_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_getMedia: (AromaService_GetMediaResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaService_AromaService_getMedia_result * resulter = [AromaService_AromaService_getMedia_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (resulter.ex4IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex4];
    }
    return NO;
  }
  if (resulter.ex5IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex5];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"getMedia"}];
  }
  return NO;
}

- (AromaService_GetMediaResponse *) getMedia: (AromaService_GetMediaRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_getMedia : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaService_GetMediaResponse * __result;
  if (![self recv_getMedia: &__result error: __thriftError]) return nil;
  return __result;
}

@end

@interface AromaService_AromaServiceProcessor () {
  id <AromaService_AromaService> service;
  NSDictionary * methodMap;
}
@end

@implementation AromaService_AromaServiceProcessor

- (id) initWithAromaService: (id <AromaService_AromaService>) aService
{
  self = [super init];
  if (self)   {
    service = aService;
    methodMap = [NSMutableDictionary dictionary];
    {
      SEL s = @selector(process_signIn_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"signIn"];
    }
    {
      SEL s = @selector(process_signUp_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"signUp"];
    }
    {
      SEL s = @selector(process_getUserInfo_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"getUserInfo"];
    }
    {
      SEL s = @selector(process_getApplicationInfo_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"getApplicationInfo"];
    }
    {
      SEL s = @selector(process_getApplicationsOwnedBy_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"getApplicationsOwnedBy"];
    }
    {
      SEL s = @selector(process_provisionApplication_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"provisionApplication"];
    }
    {
      SEL s = @selector(process_recreateToken_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"recreateToken"];
    }
    {
      SEL s = @selector(process_deleteApplication_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"deleteApplication"];
    }
    {
      SEL s = @selector(process_renewApplicationToken_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"renewApplicationToken"];
    }
    {
      SEL s = @selector(process_updateApplication_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"updateApplication"];
    }
    {
      SEL s = @selector(process_searchForApplications_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"searchForApplications"];
    }
    {
      SEL s = @selector(process_getApplicationMessages_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"getApplicationMessages"];
    }
    {
      SEL s = @selector(process_getFullMessage_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"getFullMessage"];
    }
    {
      SEL s = @selector(process_deleteMessage_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"deleteMessage"];
    }
    {
      SEL s = @selector(process_dismissMessage_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"dismissMessage"];
    }
    {
      SEL s = @selector(process_getInbox_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"getInbox"];
    }
    {
      SEL s = @selector(process_getActivity_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"getActivity"];
    }
    {
      SEL s = @selector(process_getReactions_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"getReactions"];
    }
    {
      SEL s = @selector(process_updateReactions_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"updateReactions"];
    }
    {
      SEL s = @selector(process_getApplicationsFollowedBy_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"getApplicationsFollowedBy"];
    }
    {
      SEL s = @selector(process_followApplication_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"followApplication"];
    }
    {
      SEL s = @selector(process_unfollowApplication_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"unfollowApplication"];
    }
    {
      SEL s = @selector(process_checkIfDeviceIsRegistered_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"checkIfDeviceIsRegistered"];
    }
    {
      SEL s = @selector(process_getRegisteredDevices_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"getRegisteredDevices"];
    }
    {
      SEL s = @selector(process_registerDevice_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"registerDevice"];
    }
    {
      SEL s = @selector(process_unregisterDevice_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"unregisterDevice"];
    }
    {
      SEL s = @selector(process_getDashboard_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"getDashboard"];
    }
    {
      SEL s = @selector(process_getBuzz_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"getBuzz"];
    }
    {
      SEL s = @selector(process_getApiVersion_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"getApiVersion"];
    }
    {
      SEL s = @selector(process_registerHealthCheck_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"registerHealthCheck"];
    }
    {
      SEL s = @selector(process_getMedia_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"getMedia"];
    }
  }
  return self;
}

- (id<AromaService_AromaService>) service
{
  return service;
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
                          error: (NSError *__autoreleasing *)__thriftError
{
  NSString * messageName;
  SInt32 messageType;
  SInt32 seqID;
  if (![inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID
                                      error: __thriftError]) return NO;
  NSInvocation * invocation = [methodMap valueForKey: messageName];
  if (invocation == nil) {
    if (![TProtocolUtil skipType: TTypeSTRUCT onProtocol: inProtocol error: __thriftError]) return NO;
    if (![inProtocol readMessageEnd: __thriftError]) return NO;
    NSError * x = [NSError errorWithDomain: TApplicationErrorDomain
                                      code: TApplicationErrorUnknownMethod
                                  userInfo: @{TApplicationErrorMethodKey: messageName}];
    if (![outProtocol writeMessageBeginWithName: messageName
                                           type: TMessageTypeEXCEPTION
                                     sequenceID: seqID
                                          error: __thriftError]) return NO;
    if (![x write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeMessageEnd: __thriftError]) return NO;
    if (![[outProtocol transport] flush: __thriftError]) return NO;
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setArgument: &__thriftError atIndex: 5];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (BOOL) process_signIn_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_signIn_args * args = [AromaService_AromaService_signIn_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_signIn_result * result = [AromaService_AromaService_signIn_result new];
  AromaService_SignInResponse * serviceResult = [service signIn: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"signIn"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_signUp_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_signUp_args * args = [AromaService_AromaService_signUp_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_signUp_result * result = [AromaService_AromaService_signUp_result new];
  AromaService_SignUpResponse * serviceResult = [service signUp: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"signUp"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_getUserInfo_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_getUserInfo_args * args = [AromaService_AromaService_getUserInfo_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_getUserInfo_result * result = [AromaService_AromaService_getUserInfo_result new];
  AromaService_GetUserInfoResponse * serviceResult = [service getUserInfo: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"getUserInfo"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_getApplicationInfo_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_getApplicationInfo_args * args = [AromaService_AromaService_getApplicationInfo_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_getApplicationInfo_result * result = [AromaService_AromaService_getApplicationInfo_result new];
  AromaService_GetApplicationInfoResponse * serviceResult = [service getApplicationInfo: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"getApplicationInfo"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_getApplicationsOwnedBy_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_getApplicationsOwnedBy_args * args = [AromaService_AromaService_getApplicationsOwnedBy_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_getApplicationsOwnedBy_result * result = [AromaService_AromaService_getApplicationsOwnedBy_result new];
  AromaService_GetApplicationsOwnedByResponse * serviceResult = [service getApplicationsOwnedBy: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"getApplicationsOwnedBy"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_provisionApplication_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_provisionApplication_args * args = [AromaService_AromaService_provisionApplication_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_provisionApplication_result * result = [AromaService_AromaService_provisionApplication_result new];
  AromaService_ProvisionApplicationResponse * serviceResult = [service provisionApplication: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"provisionApplication"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_recreateToken_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_recreateToken_args * args = [AromaService_AromaService_recreateToken_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_recreateToken_result * result = [AromaService_AromaService_recreateToken_result new];
  AromaService_RecreateApplicationTokenResponse * serviceResult = [service recreateToken: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"recreateToken"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_deleteApplication_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_deleteApplication_args * args = [AromaService_AromaService_deleteApplication_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_deleteApplication_result * result = [AromaService_AromaService_deleteApplication_result new];
  AromaService_DeleteApplicationResponse * serviceResult = [service deleteApplication: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"deleteApplication"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_renewApplicationToken_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_renewApplicationToken_args * args = [AromaService_AromaService_renewApplicationToken_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_renewApplicationToken_result * result = [AromaService_AromaService_renewApplicationToken_result new];
  AromaService_RenewApplicationTokenResponse * serviceResult = [service renewApplicationToken: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"renewApplicationToken"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_updateApplication_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_updateApplication_args * args = [AromaService_AromaService_updateApplication_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_updateApplication_result * result = [AromaService_AromaService_updateApplication_result new];
  AromaService_UpdateApplicationResponse * serviceResult = [service updateApplication: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"updateApplication"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_searchForApplications_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_searchForApplications_args * args = [AromaService_AromaService_searchForApplications_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_searchForApplications_result * result = [AromaService_AromaService_searchForApplications_result new];
  AromaService_SearchForApplicationsResponse * serviceResult = [service searchForApplications: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"searchForApplications"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_getApplicationMessages_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_getApplicationMessages_args * args = [AromaService_AromaService_getApplicationMessages_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_getApplicationMessages_result * result = [AromaService_AromaService_getApplicationMessages_result new];
  AromaService_GetApplicationMessagesResponse * serviceResult = [service getApplicationMessages: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"getApplicationMessages"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_getFullMessage_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_getFullMessage_args * args = [AromaService_AromaService_getFullMessage_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_getFullMessage_result * result = [AromaService_AromaService_getFullMessage_result new];
  AromaService_GetFullMessageResponse * serviceResult = [service getFullMessage: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"getFullMessage"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_deleteMessage_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_deleteMessage_args * args = [AromaService_AromaService_deleteMessage_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_deleteMessage_result * result = [AromaService_AromaService_deleteMessage_result new];
  AromaService_DeleteMessageResponse * serviceResult = [service deleteMessage: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"deleteMessage"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_dismissMessage_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_dismissMessage_args * args = [AromaService_AromaService_dismissMessage_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_dismissMessage_result * result = [AromaService_AromaService_dismissMessage_result new];
  AromaService_DismissMessageResponse * serviceResult = [service dismissMessage: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"dismissMessage"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_getInbox_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_getInbox_args * args = [AromaService_AromaService_getInbox_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_getInbox_result * result = [AromaService_AromaService_getInbox_result new];
  AromaService_GetInboxResponse * serviceResult = [service getInbox: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"getInbox"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_getActivity_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_getActivity_args * args = [AromaService_AromaService_getActivity_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_getActivity_result * result = [AromaService_AromaService_getActivity_result new];
  AromaService_GetActivityResponse * serviceResult = [service getActivity: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"getActivity"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_getReactions_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_getReactions_args * args = [AromaService_AromaService_getReactions_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_getReactions_result * result = [AromaService_AromaService_getReactions_result new];
  AromaService_GetReactionsResponse * serviceResult = [service getReactions: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"getReactions"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_updateReactions_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_updateReactions_args * args = [AromaService_AromaService_updateReactions_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_updateReactions_result * result = [AromaService_AromaService_updateReactions_result new];
  AromaService_UpdateReactionsResponse * serviceResult = [service updateReactions: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"updateReactions"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_getApplicationsFollowedBy_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_getApplicationsFollowedBy_args * args = [AromaService_AromaService_getApplicationsFollowedBy_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_getApplicationsFollowedBy_result * result = [AromaService_AromaService_getApplicationsFollowedBy_result new];
  AromaService_GetApplicationsFollowedByResponse * serviceResult = [service getApplicationsFollowedBy: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"getApplicationsFollowedBy"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_followApplication_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_followApplication_args * args = [AromaService_AromaService_followApplication_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_followApplication_result * result = [AromaService_AromaService_followApplication_result new];
  AromaService_FollowApplicationResponse * serviceResult = [service followApplication: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"followApplication"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_unfollowApplication_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_unfollowApplication_args * args = [AromaService_AromaService_unfollowApplication_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_unfollowApplication_result * result = [AromaService_AromaService_unfollowApplication_result new];
  AromaService_UnfollowApplicationResponse * serviceResult = [service unfollowApplication: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"unfollowApplication"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_checkIfDeviceIsRegistered_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_checkIfDeviceIsRegistered_args * args = [AromaService_AromaService_checkIfDeviceIsRegistered_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_checkIfDeviceIsRegistered_result * result = [AromaService_AromaService_checkIfDeviceIsRegistered_result new];
  AromaService_CheckIfDeviceIsRegisteredResponse * serviceResult = [service checkIfDeviceIsRegistered: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"checkIfDeviceIsRegistered"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_getRegisteredDevices_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_getRegisteredDevices_args * args = [AromaService_AromaService_getRegisteredDevices_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_getRegisteredDevices_result * result = [AromaService_AromaService_getRegisteredDevices_result new];
  AromaService_GetRegisteredDevicesResponse * serviceResult = [service getRegisteredDevices: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"getRegisteredDevices"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_registerDevice_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_registerDevice_args * args = [AromaService_AromaService_registerDevice_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_registerDevice_result * result = [AromaService_AromaService_registerDevice_result new];
  AromaService_RegisterDeviceResponse * serviceResult = [service registerDevice: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"registerDevice"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_unregisterDevice_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_unregisterDevice_args * args = [AromaService_AromaService_unregisterDevice_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_unregisterDevice_result * result = [AromaService_AromaService_unregisterDevice_result new];
  AromaService_UnregisterDeviceResponse * serviceResult = [service unregisterDevice: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"unregisterDevice"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_getDashboard_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_getDashboard_args * args = [AromaService_AromaService_getDashboard_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_getDashboard_result * result = [AromaService_AromaService_getDashboard_result new];
  AromaService_GetDashboardResponse * serviceResult = [service getDashboard: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"getDashboard"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_getBuzz_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_getBuzz_args * args = [AromaService_AromaService_getBuzz_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_getBuzz_result * result = [AromaService_AromaService_getBuzz_result new];
  AromaService_GetBuzzResponse * serviceResult = [service getBuzz: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"getBuzz"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_getApiVersion_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_getApiVersion_args * args = [AromaService_AromaService_getApiVersion_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_getApiVersion_result * result = [AromaService_AromaService_getApiVersion_result new];
  NSNumber * serviceResult = [service getApiVersion: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: [serviceResult doubleValue]];
  if (![outProtocol writeMessageBeginWithName: @"getApiVersion"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_registerHealthCheck_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_registerHealthCheck_args * args = [AromaService_AromaService_registerHealthCheck_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_registerHealthCheck_result * result = [AromaService_AromaService_registerHealthCheck_result new];
  AromaService_RegisterHealthCheckResponse * serviceResult = [service registerHealthCheck: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"registerHealthCheck"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_getMedia_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaService_AromaService_getMedia_args * args = [AromaService_AromaService_getMedia_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaService_AromaService_getMedia_result * result = [AromaService_AromaService_getMedia_result new];
  AromaService_GetMediaResponse * serviceResult = [service getMedia: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"getMedia"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}
@end

