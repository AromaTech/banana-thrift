/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TProtocolFactory.h"
#import "TApplicationError.h"
#import "TProtocolError.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TBaseClient.h"

#import "Aroma_Aroma.h"

#import "AromaReactions_Reactions.h"

@implementation AromaReactions_MatcherAll

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_MatcherAll class]]) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaReactions_MatcherAll * val = [AromaReactions_MatcherAll new];
  return val;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"MatcherAll" error: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_MatcherAll("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_MatcherTitleIs

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithExpectedTitle: (NSString *) expectedTitle
{
  self = [super init];
  if (self)  {
    _expectedTitle = expectedTitle;
    _expectedTitleIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"expectedTitle"])
    {
      _expectedTitle = [decoder decodeObjectForKey: @"expectedTitle"];
      _expectedTitleIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_expectedTitleIsSet)
  {
    [encoder encodeObject: _expectedTitle forKey: @"expectedTitle"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _expectedTitleIsSet ? 2654435761 : 0;
  if (_expectedTitleIsSet)
  {
    hash = (hash * 31) ^ [_expectedTitle hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_MatcherTitleIs class]]) {
    return NO;
  }
  AromaReactions_MatcherTitleIs *other = (AromaReactions_MatcherTitleIs *)anObject;
  if ((_expectedTitleIsSet != other->_expectedTitleIsSet) ||
      (_expectedTitleIsSet && ((_expectedTitle || other->_expectedTitle) && ![_expectedTitle isEqual:other->_expectedTitle]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaReactions_MatcherTitleIs * val = [AromaReactions_MatcherTitleIs new];
  if (_expectedTitleIsSet)
  {
    val.expectedTitle = [self.expectedTitle copy];
  }
  return val;
}

- (void) setExpectedTitle: (NSString *) expectedTitle {
  _expectedTitle = expectedTitle;
  _expectedTitleIsSet = YES;
}

- (void) unsetExpectedTitle {
  _expectedTitle = nil;
  _expectedTitleIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.expectedTitle = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"MatcherTitleIs" error: __thriftError]) return NO;
  if (_expectedTitleIsSet) {
    if (_expectedTitle != nil) {
      if (![outProtocol writeFieldBeginWithName: @"expectedTitle" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _expectedTitle error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_MatcherTitleIs("];
  [ms appendString: @"expectedTitle:"];
  [ms appendFormat: @"\"%@\"", _expectedTitle];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_MatcherTitleIsNot

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithTitle: (NSString *) title
{
  self = [super init];
  if (self)  {
    _title = title;
    _titleIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"title"])
    {
      _title = [decoder decodeObjectForKey: @"title"];
      _titleIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_titleIsSet)
  {
    [encoder encodeObject: _title forKey: @"title"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _titleIsSet ? 2654435761 : 0;
  if (_titleIsSet)
  {
    hash = (hash * 31) ^ [_title hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_MatcherTitleIsNot class]]) {
    return NO;
  }
  AromaReactions_MatcherTitleIsNot *other = (AromaReactions_MatcherTitleIsNot *)anObject;
  if ((_titleIsSet != other->_titleIsSet) ||
      (_titleIsSet && ((_title || other->_title) && ![_title isEqual:other->_title]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaReactions_MatcherTitleIsNot * val = [AromaReactions_MatcherTitleIsNot new];
  if (_titleIsSet)
  {
    val.title = [self.title copy];
  }
  return val;
}

- (void) setTitle: (NSString *) title {
  _title = title;
  _titleIsSet = YES;
}

- (void) unsetTitle {
  _title = nil;
  _titleIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.title = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"MatcherTitleIsNot" error: __thriftError]) return NO;
  if (_titleIsSet) {
    if (_title != nil) {
      if (![outProtocol writeFieldBeginWithName: @"title" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _title error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_MatcherTitleIsNot("];
  [ms appendString: @"title:"];
  [ms appendFormat: @"\"%@\"", _title];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_MatcherTitleContains

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSubstring: (NSString *) substring
{
  self = [super init];
  if (self)  {
    _substring = substring;
    _substringIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"substring"])
    {
      _substring = [decoder decodeObjectForKey: @"substring"];
      _substringIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_substringIsSet)
  {
    [encoder encodeObject: _substring forKey: @"substring"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _substringIsSet ? 2654435761 : 0;
  if (_substringIsSet)
  {
    hash = (hash * 31) ^ [_substring hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_MatcherTitleContains class]]) {
    return NO;
  }
  AromaReactions_MatcherTitleContains *other = (AromaReactions_MatcherTitleContains *)anObject;
  if ((_substringIsSet != other->_substringIsSet) ||
      (_substringIsSet && ((_substring || other->_substring) && ![_substring isEqual:other->_substring]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaReactions_MatcherTitleContains * val = [AromaReactions_MatcherTitleContains new];
  if (_substringIsSet)
  {
    val.substring = [self.substring copy];
  }
  return val;
}

- (void) setSubstring: (NSString *) substring {
  _substring = substring;
  _substringIsSet = YES;
}

- (void) unsetSubstring {
  _substring = nil;
  _substringIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.substring = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"MatcherTitleContains" error: __thriftError]) return NO;
  if (_substringIsSet) {
    if (_substring != nil) {
      if (![outProtocol writeFieldBeginWithName: @"substring" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _substring error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_MatcherTitleContains("];
  [ms appendString: @"substring:"];
  [ms appendFormat: @"\"%@\"", _substring];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_MatcherTitleDoesNotContain

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSubstring: (NSString *) substring
{
  self = [super init];
  if (self)  {
    _substring = substring;
    _substringIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"substring"])
    {
      _substring = [decoder decodeObjectForKey: @"substring"];
      _substringIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_substringIsSet)
  {
    [encoder encodeObject: _substring forKey: @"substring"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _substringIsSet ? 2654435761 : 0;
  if (_substringIsSet)
  {
    hash = (hash * 31) ^ [_substring hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_MatcherTitleDoesNotContain class]]) {
    return NO;
  }
  AromaReactions_MatcherTitleDoesNotContain *other = (AromaReactions_MatcherTitleDoesNotContain *)anObject;
  if ((_substringIsSet != other->_substringIsSet) ||
      (_substringIsSet && ((_substring || other->_substring) && ![_substring isEqual:other->_substring]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaReactions_MatcherTitleDoesNotContain * val = [AromaReactions_MatcherTitleDoesNotContain new];
  if (_substringIsSet)
  {
    val.substring = [self.substring copy];
  }
  return val;
}

- (void) setSubstring: (NSString *) substring {
  _substring = substring;
  _substringIsSet = YES;
}

- (void) unsetSubstring {
  _substring = nil;
  _substringIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.substring = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"MatcherTitleDoesNotContain" error: __thriftError]) return NO;
  if (_substringIsSet) {
    if (_substring != nil) {
      if (![outProtocol writeFieldBeginWithName: @"substring" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _substring error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_MatcherTitleDoesNotContain("];
  [ms appendString: @"substring:"];
  [ms appendFormat: @"\"%@\"", _substring];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_MatcherBodyIs

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithExpectedBody: (NSString *) expectedBody
{
  self = [super init];
  if (self)  {
    _expectedBody = expectedBody;
    _expectedBodyIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"expectedBody"])
    {
      _expectedBody = [decoder decodeObjectForKey: @"expectedBody"];
      _expectedBodyIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_expectedBodyIsSet)
  {
    [encoder encodeObject: _expectedBody forKey: @"expectedBody"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _expectedBodyIsSet ? 2654435761 : 0;
  if (_expectedBodyIsSet)
  {
    hash = (hash * 31) ^ [_expectedBody hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_MatcherBodyIs class]]) {
    return NO;
  }
  AromaReactions_MatcherBodyIs *other = (AromaReactions_MatcherBodyIs *)anObject;
  if ((_expectedBodyIsSet != other->_expectedBodyIsSet) ||
      (_expectedBodyIsSet && ((_expectedBody || other->_expectedBody) && ![_expectedBody isEqual:other->_expectedBody]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaReactions_MatcherBodyIs * val = [AromaReactions_MatcherBodyIs new];
  if (_expectedBodyIsSet)
  {
    val.expectedBody = [self.expectedBody copy];
  }
  return val;
}

- (void) setExpectedBody: (NSString *) expectedBody {
  _expectedBody = expectedBody;
  _expectedBodyIsSet = YES;
}

- (void) unsetExpectedBody {
  _expectedBody = nil;
  _expectedBodyIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.expectedBody = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"MatcherBodyIs" error: __thriftError]) return NO;
  if (_expectedBodyIsSet) {
    if (_expectedBody != nil) {
      if (![outProtocol writeFieldBeginWithName: @"expectedBody" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _expectedBody error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_MatcherBodyIs("];
  [ms appendString: @"expectedBody:"];
  [ms appendFormat: @"\"%@\"", _expectedBody];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_MatcherBodyContains

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSubstring: (NSString *) substring
{
  self = [super init];
  if (self)  {
    _substring = substring;
    _substringIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"substring"])
    {
      _substring = [decoder decodeObjectForKey: @"substring"];
      _substringIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_substringIsSet)
  {
    [encoder encodeObject: _substring forKey: @"substring"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _substringIsSet ? 2654435761 : 0;
  if (_substringIsSet)
  {
    hash = (hash * 31) ^ [_substring hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_MatcherBodyContains class]]) {
    return NO;
  }
  AromaReactions_MatcherBodyContains *other = (AromaReactions_MatcherBodyContains *)anObject;
  if ((_substringIsSet != other->_substringIsSet) ||
      (_substringIsSet && ((_substring || other->_substring) && ![_substring isEqual:other->_substring]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaReactions_MatcherBodyContains * val = [AromaReactions_MatcherBodyContains new];
  if (_substringIsSet)
  {
    val.substring = [self.substring copy];
  }
  return val;
}

- (void) setSubstring: (NSString *) substring {
  _substring = substring;
  _substringIsSet = YES;
}

- (void) unsetSubstring {
  _substring = nil;
  _substringIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.substring = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"MatcherBodyContains" error: __thriftError]) return NO;
  if (_substringIsSet) {
    if (_substring != nil) {
      if (![outProtocol writeFieldBeginWithName: @"substring" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _substring error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_MatcherBodyContains("];
  [ms appendString: @"substring:"];
  [ms appendFormat: @"\"%@\"", _substring];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_MatcherBodyDoesNotContain

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSubstring: (NSString *) substring
{
  self = [super init];
  if (self)  {
    _substring = substring;
    _substringIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"substring"])
    {
      _substring = [decoder decodeObjectForKey: @"substring"];
      _substringIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_substringIsSet)
  {
    [encoder encodeObject: _substring forKey: @"substring"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _substringIsSet ? 2654435761 : 0;
  if (_substringIsSet)
  {
    hash = (hash * 31) ^ [_substring hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_MatcherBodyDoesNotContain class]]) {
    return NO;
  }
  AromaReactions_MatcherBodyDoesNotContain *other = (AromaReactions_MatcherBodyDoesNotContain *)anObject;
  if ((_substringIsSet != other->_substringIsSet) ||
      (_substringIsSet && ((_substring || other->_substring) && ![_substring isEqual:other->_substring]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaReactions_MatcherBodyDoesNotContain * val = [AromaReactions_MatcherBodyDoesNotContain new];
  if (_substringIsSet)
  {
    val.substring = [self.substring copy];
  }
  return val;
}

- (void) setSubstring: (NSString *) substring {
  _substring = substring;
  _substringIsSet = YES;
}

- (void) unsetSubstring {
  _substring = nil;
  _substringIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.substring = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"MatcherBodyDoesNotContain" error: __thriftError]) return NO;
  if (_substringIsSet) {
    if (_substring != nil) {
      if (![outProtocol writeFieldBeginWithName: @"substring" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _substring error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_MatcherBodyDoesNotContain("];
  [ms appendString: @"substring:"];
  [ms appendFormat: @"\"%@\"", _substring];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_MatcherUrgencyIs

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.possibleUrgencies = [NSSet setWithArray:@[]]  }
  return self;
}

- (instancetype) initWithPossibleUrgencies: (NSSet<NSNumber *> *) possibleUrgencies
{
  self = [super init];
  if (self)  {
    _possibleUrgencies = [possibleUrgencies mutableCopy];
    _possibleUrgenciesIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"possibleUrgencies"])
    {
      _possibleUrgencies = [decoder decodeObjectForKey: @"possibleUrgencies"];
      _possibleUrgenciesIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_possibleUrgenciesIsSet)
  {
    [encoder encodeObject: _possibleUrgencies forKey: @"possibleUrgencies"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _possibleUrgenciesIsSet ? 2654435761 : 0;
  if (_possibleUrgenciesIsSet)
  {
    hash = (hash * 31) ^ [_possibleUrgencies hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_MatcherUrgencyIs class]]) {
    return NO;
  }
  AromaReactions_MatcherUrgencyIs *other = (AromaReactions_MatcherUrgencyIs *)anObject;
  if ((_possibleUrgenciesIsSet != other->_possibleUrgenciesIsSet) ||
      (_possibleUrgenciesIsSet && ((_possibleUrgencies || other->_possibleUrgencies) && ![_possibleUrgencies isEqual:other->_possibleUrgencies]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaReactions_MatcherUrgencyIs * val = [AromaReactions_MatcherUrgencyIs new];
  if (_possibleUrgenciesIsSet)
  {
    val.possibleUrgencies = [self.possibleUrgencies copy];
  }
  return val;
}

- (void) setPossibleUrgencies: (NSMutableSet<NSNumber *> *) possibleUrgencies {
  _possibleUrgencies = possibleUrgencies;
  _possibleUrgenciesIsSet = YES;
}

- (void) unsetPossibleUrgencies {
  _possibleUrgencies = nil;
  _possibleUrgenciesIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSET) {
          SInt32 _size0;
          if (![inProtocol readSetBeginReturningElementType: NULL size: &_size0 error: __thriftError]) return NO;
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            AromaReactions_Urgency _elem2;
            if (![inProtocol readI32:&_elem2 error: __thriftError]) return NO;
            [fieldValue addObject: @(_elem2)];
          }
          if (![inProtocol readSetEnd: __thriftError]) return NO;
          self.possibleUrgencies = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"MatcherUrgencyIs" error: __thriftError]) return NO;
  if (_possibleUrgenciesIsSet) {
    if (_possibleUrgencies != nil) {
      if (![outProtocol writeFieldBeginWithName: @"possibleUrgencies" type: TTypeSET fieldID: 1 error: __thriftError]) return NO;
      {
        if (![outProtocol writeSetBeginWithElementType: TTypeI32 size: (SInt32)[_possibleUrgencies count] error: __thriftError]) return NO;
        NSEnumerator * _iter3 = [_possibleUrgencies objectEnumerator];
        id obj4;
        while ((obj4 = [_iter3 nextObject]))
        {
          if (![outProtocol writeI32: [obj4 intValue] error: __thriftError]) return NO;
        }
        if (![outProtocol writeSetEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_MatcherUrgencyIs("];
  [ms appendString: @"possibleUrgencies:"];
  [ms appendFormat: @"%@", _possibleUrgencies];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_MatcherHostnameIs

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithExpectedHostname: (NSString *) expectedHostname
{
  self = [super init];
  if (self)  {
    _expectedHostname = expectedHostname;
    _expectedHostnameIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"expectedHostname"])
    {
      _expectedHostname = [decoder decodeObjectForKey: @"expectedHostname"];
      _expectedHostnameIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_expectedHostnameIsSet)
  {
    [encoder encodeObject: _expectedHostname forKey: @"expectedHostname"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _expectedHostnameIsSet ? 2654435761 : 0;
  if (_expectedHostnameIsSet)
  {
    hash = (hash * 31) ^ [_expectedHostname hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_MatcherHostnameIs class]]) {
    return NO;
  }
  AromaReactions_MatcherHostnameIs *other = (AromaReactions_MatcherHostnameIs *)anObject;
  if ((_expectedHostnameIsSet != other->_expectedHostnameIsSet) ||
      (_expectedHostnameIsSet && ((_expectedHostname || other->_expectedHostname) && ![_expectedHostname isEqual:other->_expectedHostname]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaReactions_MatcherHostnameIs * val = [AromaReactions_MatcherHostnameIs new];
  if (_expectedHostnameIsSet)
  {
    val.expectedHostname = [self.expectedHostname copy];
  }
  return val;
}

- (void) setExpectedHostname: (NSString *) expectedHostname {
  _expectedHostname = expectedHostname;
  _expectedHostnameIsSet = YES;
}

- (void) unsetExpectedHostname {
  _expectedHostname = nil;
  _expectedHostnameIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.expectedHostname = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"MatcherHostnameIs" error: __thriftError]) return NO;
  if (_expectedHostnameIsSet) {
    if (_expectedHostname != nil) {
      if (![outProtocol writeFieldBeginWithName: @"expectedHostname" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _expectedHostname error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_MatcherHostnameIs("];
  [ms appendString: @"expectedHostname:"];
  [ms appendFormat: @"\"%@\"", _expectedHostname];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_MatcherHostnameContains

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSubstring: (NSString *) substring
{
  self = [super init];
  if (self)  {
    _substring = substring;
    _substringIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"substring"])
    {
      _substring = [decoder decodeObjectForKey: @"substring"];
      _substringIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_substringIsSet)
  {
    [encoder encodeObject: _substring forKey: @"substring"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _substringIsSet ? 2654435761 : 0;
  if (_substringIsSet)
  {
    hash = (hash * 31) ^ [_substring hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_MatcherHostnameContains class]]) {
    return NO;
  }
  AromaReactions_MatcherHostnameContains *other = (AromaReactions_MatcherHostnameContains *)anObject;
  if ((_substringIsSet != other->_substringIsSet) ||
      (_substringIsSet && ((_substring || other->_substring) && ![_substring isEqual:other->_substring]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaReactions_MatcherHostnameContains * val = [AromaReactions_MatcherHostnameContains new];
  if (_substringIsSet)
  {
    val.substring = [self.substring copy];
  }
  return val;
}

- (void) setSubstring: (NSString *) substring {
  _substring = substring;
  _substringIsSet = YES;
}

- (void) unsetSubstring {
  _substring = nil;
  _substringIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.substring = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"MatcherHostnameContains" error: __thriftError]) return NO;
  if (_substringIsSet) {
    if (_substring != nil) {
      if (![outProtocol writeFieldBeginWithName: @"substring" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _substring error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_MatcherHostnameContains("];
  [ms appendString: @"substring:"];
  [ms appendFormat: @"\"%@\"", _substring];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_MatcherHostnameDoesNotContain

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSubstring: (NSString *) substring
{
  self = [super init];
  if (self)  {
    _substring = substring;
    _substringIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"substring"])
    {
      _substring = [decoder decodeObjectForKey: @"substring"];
      _substringIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_substringIsSet)
  {
    [encoder encodeObject: _substring forKey: @"substring"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _substringIsSet ? 2654435761 : 0;
  if (_substringIsSet)
  {
    hash = (hash * 31) ^ [_substring hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_MatcherHostnameDoesNotContain class]]) {
    return NO;
  }
  AromaReactions_MatcherHostnameDoesNotContain *other = (AromaReactions_MatcherHostnameDoesNotContain *)anObject;
  if ((_substringIsSet != other->_substringIsSet) ||
      (_substringIsSet && ((_substring || other->_substring) && ![_substring isEqual:other->_substring]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaReactions_MatcherHostnameDoesNotContain * val = [AromaReactions_MatcherHostnameDoesNotContain new];
  if (_substringIsSet)
  {
    val.substring = [self.substring copy];
  }
  return val;
}

- (void) setSubstring: (NSString *) substring {
  _substring = substring;
  _substringIsSet = YES;
}

- (void) unsetSubstring {
  _substring = nil;
  _substringIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.substring = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"MatcherHostnameDoesNotContain" error: __thriftError]) return NO;
  if (_substringIsSet) {
    if (_substring != nil) {
      if (![outProtocol writeFieldBeginWithName: @"substring" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _substring error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_MatcherHostnameDoesNotContain("];
  [ms appendString: @"substring:"];
  [ms appendFormat: @"\"%@\"", _substring];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_MatcherApplicationIs

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithAppId: (AromaReactions_uuid) appId
{
  self = [super init];
  if (self)  {
    _appId = appId;
    _appIdIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"appId"])
    {
      _appId = [decoder decodeObjectForKey: @"appId"];
      _appIdIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_appIdIsSet)
  {
    [encoder encodeObject: _appId forKey: @"appId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _appIdIsSet ? 2654435761 : 0;
  if (_appIdIsSet)
  {
    hash = (hash * 31) ^ [_appId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_MatcherApplicationIs class]]) {
    return NO;
  }
  AromaReactions_MatcherApplicationIs *other = (AromaReactions_MatcherApplicationIs *)anObject;
  if ((_appIdIsSet != other->_appIdIsSet) ||
      (_appIdIsSet && ((_appId || other->_appId) && ![_appId isEqual:other->_appId]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaReactions_MatcherApplicationIs * val = [AromaReactions_MatcherApplicationIs new];
  if (_appIdIsSet)
  {
    val.appId = [self.appId copy];
  }
  return val;
}

- (void) setAppId: (NSString *) appId {
  _appId = appId;
  _appIdIsSet = YES;
}

- (void) unsetAppId {
  _appId = nil;
  _appIdIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.appId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"MatcherApplicationIs" error: __thriftError]) return NO;
  if (_appIdIsSet) {
    if (_appId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"appId" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _appId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_MatcherApplicationIs("];
  [ms appendString: @"appId:"];
  [ms appendFormat: @"\"%@\"", _appId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_MatcherApplicationIsNot

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithAppId: (AromaReactions_uuid) appId
{
  self = [super init];
  if (self)  {
    _appId = appId;
    _appIdIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"appId"])
    {
      _appId = [decoder decodeObjectForKey: @"appId"];
      _appIdIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_appIdIsSet)
  {
    [encoder encodeObject: _appId forKey: @"appId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _appIdIsSet ? 2654435761 : 0;
  if (_appIdIsSet)
  {
    hash = (hash * 31) ^ [_appId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_MatcherApplicationIsNot class]]) {
    return NO;
  }
  AromaReactions_MatcherApplicationIsNot *other = (AromaReactions_MatcherApplicationIsNot *)anObject;
  if ((_appIdIsSet != other->_appIdIsSet) ||
      (_appIdIsSet && ((_appId || other->_appId) && ![_appId isEqual:other->_appId]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaReactions_MatcherApplicationIsNot * val = [AromaReactions_MatcherApplicationIsNot new];
  if (_appIdIsSet)
  {
    val.appId = [self.appId copy];
  }
  return val;
}

- (void) setAppId: (NSString *) appId {
  _appId = appId;
  _appIdIsSet = YES;
}

- (void) unsetAppId {
  _appId = nil;
  _appIdIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.appId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"MatcherApplicationIsNot" error: __thriftError]) return NO;
  if (_appIdIsSet) {
    if (_appId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"appId" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _appId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_MatcherApplicationIsNot("];
  [ms appendString: @"appId:"];
  [ms appendFormat: @"\"%@\"", _appId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_AromaMatcher

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithAll: (AromaReactions_MatcherAll *) all titleIs: (AromaReactions_MatcherTitleIs *) titleIs titleIsNot: (AromaReactions_MatcherTitleIsNot *) titleIsNot titleContains: (AromaReactions_MatcherTitleContains *) titleContains titleDoesNotContain: (AromaReactions_MatcherTitleDoesNotContain *) titleDoesNotContain bodyIs: (AromaReactions_MatcherBodyIs *) bodyIs bodyContains: (AromaReactions_MatcherBodyContains *) bodyContains bodyDoesNotContain: (AromaReactions_MatcherBodyDoesNotContain *) bodyDoesNotContain urgencyEquals: (AromaReactions_MatcherUrgencyIs *) urgencyEquals hostnameIs: (AromaReactions_MatcherHostnameIs *) hostnameIs hostnameContains: (AromaReactions_MatcherHostnameContains *) hostnameContains hostnameDoesNotContain: (AromaReactions_MatcherHostnameDoesNotContain *) hostnameDoesNotContain applicationIs: (AromaReactions_MatcherApplicationIs *) applicationIs applicationIsNot: (AromaReactions_MatcherApplicationIsNot *) applicationIsNot
{
  self = [super init];
  if (self)  {
    _all = all;
    _allIsSet = YES;
    _titleIs = titleIs;
    _titleIsIsSet = YES;
    _titleIsNot = titleIsNot;
    _titleIsNotIsSet = YES;
    _titleContains = titleContains;
    _titleContainsIsSet = YES;
    _titleDoesNotContain = titleDoesNotContain;
    _titleDoesNotContainIsSet = YES;
    _bodyIs = bodyIs;
    _bodyIsIsSet = YES;
    _bodyContains = bodyContains;
    _bodyContainsIsSet = YES;
    _bodyDoesNotContain = bodyDoesNotContain;
    _bodyDoesNotContainIsSet = YES;
    _urgencyEquals = urgencyEquals;
    _urgencyEqualsIsSet = YES;
    _hostnameIs = hostnameIs;
    _hostnameIsIsSet = YES;
    _hostnameContains = hostnameContains;
    _hostnameContainsIsSet = YES;
    _hostnameDoesNotContain = hostnameDoesNotContain;
    _hostnameDoesNotContainIsSet = YES;
    _applicationIs = applicationIs;
    _applicationIsIsSet = YES;
    _applicationIsNot = applicationIsNot;
    _applicationIsNotIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"all"])
    {
      _all = [decoder decodeObjectForKey: @"all"];
      _allIsSet = YES;
    }
    if ([decoder containsValueForKey: @"titleIs"])
    {
      _titleIs = [decoder decodeObjectForKey: @"titleIs"];
      _titleIsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"titleIsNot"])
    {
      _titleIsNot = [decoder decodeObjectForKey: @"titleIsNot"];
      _titleIsNotIsSet = YES;
    }
    if ([decoder containsValueForKey: @"titleContains"])
    {
      _titleContains = [decoder decodeObjectForKey: @"titleContains"];
      _titleContainsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"titleDoesNotContain"])
    {
      _titleDoesNotContain = [decoder decodeObjectForKey: @"titleDoesNotContain"];
      _titleDoesNotContainIsSet = YES;
    }
    if ([decoder containsValueForKey: @"bodyIs"])
    {
      _bodyIs = [decoder decodeObjectForKey: @"bodyIs"];
      _bodyIsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"bodyContains"])
    {
      _bodyContains = [decoder decodeObjectForKey: @"bodyContains"];
      _bodyContainsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"bodyDoesNotContain"])
    {
      _bodyDoesNotContain = [decoder decodeObjectForKey: @"bodyDoesNotContain"];
      _bodyDoesNotContainIsSet = YES;
    }
    if ([decoder containsValueForKey: @"urgencyEquals"])
    {
      _urgencyEquals = [decoder decodeObjectForKey: @"urgencyEquals"];
      _urgencyEqualsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"hostnameIs"])
    {
      _hostnameIs = [decoder decodeObjectForKey: @"hostnameIs"];
      _hostnameIsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"hostnameContains"])
    {
      _hostnameContains = [decoder decodeObjectForKey: @"hostnameContains"];
      _hostnameContainsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"hostnameDoesNotContain"])
    {
      _hostnameDoesNotContain = [decoder decodeObjectForKey: @"hostnameDoesNotContain"];
      _hostnameDoesNotContainIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationIs"])
    {
      _applicationIs = [decoder decodeObjectForKey: @"applicationIs"];
      _applicationIsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationIsNot"])
    {
      _applicationIsNot = [decoder decodeObjectForKey: @"applicationIsNot"];
      _applicationIsNotIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_allIsSet)
  {
    [encoder encodeObject: _all forKey: @"all"];
  }
  if (_titleIsIsSet)
  {
    [encoder encodeObject: _titleIs forKey: @"titleIs"];
  }
  if (_titleIsNotIsSet)
  {
    [encoder encodeObject: _titleIsNot forKey: @"titleIsNot"];
  }
  if (_titleContainsIsSet)
  {
    [encoder encodeObject: _titleContains forKey: @"titleContains"];
  }
  if (_titleDoesNotContainIsSet)
  {
    [encoder encodeObject: _titleDoesNotContain forKey: @"titleDoesNotContain"];
  }
  if (_bodyIsIsSet)
  {
    [encoder encodeObject: _bodyIs forKey: @"bodyIs"];
  }
  if (_bodyContainsIsSet)
  {
    [encoder encodeObject: _bodyContains forKey: @"bodyContains"];
  }
  if (_bodyDoesNotContainIsSet)
  {
    [encoder encodeObject: _bodyDoesNotContain forKey: @"bodyDoesNotContain"];
  }
  if (_urgencyEqualsIsSet)
  {
    [encoder encodeObject: _urgencyEquals forKey: @"urgencyEquals"];
  }
  if (_hostnameIsIsSet)
  {
    [encoder encodeObject: _hostnameIs forKey: @"hostnameIs"];
  }
  if (_hostnameContainsIsSet)
  {
    [encoder encodeObject: _hostnameContains forKey: @"hostnameContains"];
  }
  if (_hostnameDoesNotContainIsSet)
  {
    [encoder encodeObject: _hostnameDoesNotContain forKey: @"hostnameDoesNotContain"];
  }
  if (_applicationIsIsSet)
  {
    [encoder encodeObject: _applicationIs forKey: @"applicationIs"];
  }
  if (_applicationIsNotIsSet)
  {
    [encoder encodeObject: _applicationIsNot forKey: @"applicationIsNot"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _allIsSet ? 2654435761 : 0;
  if (_allIsSet)
  {
    hash = (hash * 31) ^ [_all hash];
  }
  hash = (hash * 31) ^ _titleIsIsSet ? 2654435761 : 0;
  if (_titleIsIsSet)
  {
    hash = (hash * 31) ^ [_titleIs hash];
  }
  hash = (hash * 31) ^ _titleIsNotIsSet ? 2654435761 : 0;
  if (_titleIsNotIsSet)
  {
    hash = (hash * 31) ^ [_titleIsNot hash];
  }
  hash = (hash * 31) ^ _titleContainsIsSet ? 2654435761 : 0;
  if (_titleContainsIsSet)
  {
    hash = (hash * 31) ^ [_titleContains hash];
  }
  hash = (hash * 31) ^ _titleDoesNotContainIsSet ? 2654435761 : 0;
  if (_titleDoesNotContainIsSet)
  {
    hash = (hash * 31) ^ [_titleDoesNotContain hash];
  }
  hash = (hash * 31) ^ _bodyIsIsSet ? 2654435761 : 0;
  if (_bodyIsIsSet)
  {
    hash = (hash * 31) ^ [_bodyIs hash];
  }
  hash = (hash * 31) ^ _bodyContainsIsSet ? 2654435761 : 0;
  if (_bodyContainsIsSet)
  {
    hash = (hash * 31) ^ [_bodyContains hash];
  }
  hash = (hash * 31) ^ _bodyDoesNotContainIsSet ? 2654435761 : 0;
  if (_bodyDoesNotContainIsSet)
  {
    hash = (hash * 31) ^ [_bodyDoesNotContain hash];
  }
  hash = (hash * 31) ^ _urgencyEqualsIsSet ? 2654435761 : 0;
  if (_urgencyEqualsIsSet)
  {
    hash = (hash * 31) ^ [_urgencyEquals hash];
  }
  hash = (hash * 31) ^ _hostnameIsIsSet ? 2654435761 : 0;
  if (_hostnameIsIsSet)
  {
    hash = (hash * 31) ^ [_hostnameIs hash];
  }
  hash = (hash * 31) ^ _hostnameContainsIsSet ? 2654435761 : 0;
  if (_hostnameContainsIsSet)
  {
    hash = (hash * 31) ^ [_hostnameContains hash];
  }
  hash = (hash * 31) ^ _hostnameDoesNotContainIsSet ? 2654435761 : 0;
  if (_hostnameDoesNotContainIsSet)
  {
    hash = (hash * 31) ^ [_hostnameDoesNotContain hash];
  }
  hash = (hash * 31) ^ _applicationIsIsSet ? 2654435761 : 0;
  if (_applicationIsIsSet)
  {
    hash = (hash * 31) ^ [_applicationIs hash];
  }
  hash = (hash * 31) ^ _applicationIsNotIsSet ? 2654435761 : 0;
  if (_applicationIsNotIsSet)
  {
    hash = (hash * 31) ^ [_applicationIsNot hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_AromaMatcher class]]) {
    return NO;
  }
  AromaReactions_AromaMatcher *other = (AromaReactions_AromaMatcher *)anObject;
  if ((_allIsSet != other->_allIsSet) ||
      (_allIsSet && ((_all || other->_all) && ![_all isEqual:other->_all]))) {
    return NO;
  }
  if ((_titleIsIsSet != other->_titleIsIsSet) ||
      (_titleIsIsSet && ((_titleIs || other->_titleIs) && ![_titleIs isEqual:other->_titleIs]))) {
    return NO;
  }
  if ((_titleIsNotIsSet != other->_titleIsNotIsSet) ||
      (_titleIsNotIsSet && ((_titleIsNot || other->_titleIsNot) && ![_titleIsNot isEqual:other->_titleIsNot]))) {
    return NO;
  }
  if ((_titleContainsIsSet != other->_titleContainsIsSet) ||
      (_titleContainsIsSet && ((_titleContains || other->_titleContains) && ![_titleContains isEqual:other->_titleContains]))) {
    return NO;
  }
  if ((_titleDoesNotContainIsSet != other->_titleDoesNotContainIsSet) ||
      (_titleDoesNotContainIsSet && ((_titleDoesNotContain || other->_titleDoesNotContain) && ![_titleDoesNotContain isEqual:other->_titleDoesNotContain]))) {
    return NO;
  }
  if ((_bodyIsIsSet != other->_bodyIsIsSet) ||
      (_bodyIsIsSet && ((_bodyIs || other->_bodyIs) && ![_bodyIs isEqual:other->_bodyIs]))) {
    return NO;
  }
  if ((_bodyContainsIsSet != other->_bodyContainsIsSet) ||
      (_bodyContainsIsSet && ((_bodyContains || other->_bodyContains) && ![_bodyContains isEqual:other->_bodyContains]))) {
    return NO;
  }
  if ((_bodyDoesNotContainIsSet != other->_bodyDoesNotContainIsSet) ||
      (_bodyDoesNotContainIsSet && ((_bodyDoesNotContain || other->_bodyDoesNotContain) && ![_bodyDoesNotContain isEqual:other->_bodyDoesNotContain]))) {
    return NO;
  }
  if ((_urgencyEqualsIsSet != other->_urgencyEqualsIsSet) ||
      (_urgencyEqualsIsSet && ((_urgencyEquals || other->_urgencyEquals) && ![_urgencyEquals isEqual:other->_urgencyEquals]))) {
    return NO;
  }
  if ((_hostnameIsIsSet != other->_hostnameIsIsSet) ||
      (_hostnameIsIsSet && ((_hostnameIs || other->_hostnameIs) && ![_hostnameIs isEqual:other->_hostnameIs]))) {
    return NO;
  }
  if ((_hostnameContainsIsSet != other->_hostnameContainsIsSet) ||
      (_hostnameContainsIsSet && ((_hostnameContains || other->_hostnameContains) && ![_hostnameContains isEqual:other->_hostnameContains]))) {
    return NO;
  }
  if ((_hostnameDoesNotContainIsSet != other->_hostnameDoesNotContainIsSet) ||
      (_hostnameDoesNotContainIsSet && ((_hostnameDoesNotContain || other->_hostnameDoesNotContain) && ![_hostnameDoesNotContain isEqual:other->_hostnameDoesNotContain]))) {
    return NO;
  }
  if ((_applicationIsIsSet != other->_applicationIsIsSet) ||
      (_applicationIsIsSet && ((_applicationIs || other->_applicationIs) && ![_applicationIs isEqual:other->_applicationIs]))) {
    return NO;
  }
  if ((_applicationIsNotIsSet != other->_applicationIsNotIsSet) ||
      (_applicationIsNotIsSet && ((_applicationIsNot || other->_applicationIsNot) && ![_applicationIsNot isEqual:other->_applicationIsNot]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaReactions_AromaMatcher * val = [AromaReactions_AromaMatcher new];
  if (_allIsSet)
  {
    val.all = [self.all copy];
  }
  if (_titleIsIsSet)
  {
    val.titleIs = [self.titleIs copy];
  }
  if (_titleIsNotIsSet)
  {
    val.titleIsNot = [self.titleIsNot copy];
  }
  if (_titleContainsIsSet)
  {
    val.titleContains = [self.titleContains copy];
  }
  if (_titleDoesNotContainIsSet)
  {
    val.titleDoesNotContain = [self.titleDoesNotContain copy];
  }
  if (_bodyIsIsSet)
  {
    val.bodyIs = [self.bodyIs copy];
  }
  if (_bodyContainsIsSet)
  {
    val.bodyContains = [self.bodyContains copy];
  }
  if (_bodyDoesNotContainIsSet)
  {
    val.bodyDoesNotContain = [self.bodyDoesNotContain copy];
  }
  if (_urgencyEqualsIsSet)
  {
    val.urgencyEquals = [self.urgencyEquals copy];
  }
  if (_hostnameIsIsSet)
  {
    val.hostnameIs = [self.hostnameIs copy];
  }
  if (_hostnameContainsIsSet)
  {
    val.hostnameContains = [self.hostnameContains copy];
  }
  if (_hostnameDoesNotContainIsSet)
  {
    val.hostnameDoesNotContain = [self.hostnameDoesNotContain copy];
  }
  if (_applicationIsIsSet)
  {
    val.applicationIs = [self.applicationIs copy];
  }
  if (_applicationIsNotIsSet)
  {
    val.applicationIsNot = [self.applicationIsNot copy];
  }
  return val;
}

- (void) setAll: (AromaReactions_MatcherAll *) all {
  _all = all;
  _allIsSet = YES;
}

- (void) unsetAll {
  _all = nil;
  _allIsSet = NO;
}

- (void) setTitleIs: (AromaReactions_MatcherTitleIs *) titleIs {
  _titleIs = titleIs;
  _titleIsIsSet = YES;
}

- (void) unsetTitleIs {
  _titleIs = nil;
  _titleIsIsSet = NO;
}

- (void) setTitleIsNot: (AromaReactions_MatcherTitleIsNot *) titleIsNot {
  _titleIsNot = titleIsNot;
  _titleIsNotIsSet = YES;
}

- (void) unsetTitleIsNot {
  _titleIsNot = nil;
  _titleIsNotIsSet = NO;
}

- (void) setTitleContains: (AromaReactions_MatcherTitleContains *) titleContains {
  _titleContains = titleContains;
  _titleContainsIsSet = YES;
}

- (void) unsetTitleContains {
  _titleContains = nil;
  _titleContainsIsSet = NO;
}

- (void) setTitleDoesNotContain: (AromaReactions_MatcherTitleDoesNotContain *) titleDoesNotContain {
  _titleDoesNotContain = titleDoesNotContain;
  _titleDoesNotContainIsSet = YES;
}

- (void) unsetTitleDoesNotContain {
  _titleDoesNotContain = nil;
  _titleDoesNotContainIsSet = NO;
}

- (void) setBodyIs: (AromaReactions_MatcherBodyIs *) bodyIs {
  _bodyIs = bodyIs;
  _bodyIsIsSet = YES;
}

- (void) unsetBodyIs {
  _bodyIs = nil;
  _bodyIsIsSet = NO;
}

- (void) setBodyContains: (AromaReactions_MatcherBodyContains *) bodyContains {
  _bodyContains = bodyContains;
  _bodyContainsIsSet = YES;
}

- (void) unsetBodyContains {
  _bodyContains = nil;
  _bodyContainsIsSet = NO;
}

- (void) setBodyDoesNotContain: (AromaReactions_MatcherBodyDoesNotContain *) bodyDoesNotContain {
  _bodyDoesNotContain = bodyDoesNotContain;
  _bodyDoesNotContainIsSet = YES;
}

- (void) unsetBodyDoesNotContain {
  _bodyDoesNotContain = nil;
  _bodyDoesNotContainIsSet = NO;
}

- (void) setUrgencyEquals: (AromaReactions_MatcherUrgencyIs *) urgencyEquals {
  _urgencyEquals = urgencyEquals;
  _urgencyEqualsIsSet = YES;
}

- (void) unsetUrgencyEquals {
  _urgencyEquals = nil;
  _urgencyEqualsIsSet = NO;
}

- (void) setHostnameIs: (AromaReactions_MatcherHostnameIs *) hostnameIs {
  _hostnameIs = hostnameIs;
  _hostnameIsIsSet = YES;
}

- (void) unsetHostnameIs {
  _hostnameIs = nil;
  _hostnameIsIsSet = NO;
}

- (void) setHostnameContains: (AromaReactions_MatcherHostnameContains *) hostnameContains {
  _hostnameContains = hostnameContains;
  _hostnameContainsIsSet = YES;
}

- (void) unsetHostnameContains {
  _hostnameContains = nil;
  _hostnameContainsIsSet = NO;
}

- (void) setHostnameDoesNotContain: (AromaReactions_MatcherHostnameDoesNotContain *) hostnameDoesNotContain {
  _hostnameDoesNotContain = hostnameDoesNotContain;
  _hostnameDoesNotContainIsSet = YES;
}

- (void) unsetHostnameDoesNotContain {
  _hostnameDoesNotContain = nil;
  _hostnameDoesNotContainIsSet = NO;
}

- (void) setApplicationIs: (AromaReactions_MatcherApplicationIs *) applicationIs {
  _applicationIs = applicationIs;
  _applicationIsIsSet = YES;
}

- (void) unsetApplicationIs {
  _applicationIs = nil;
  _applicationIsIsSet = NO;
}

- (void) setApplicationIsNot: (AromaReactions_MatcherApplicationIsNot *) applicationIsNot {
  _applicationIsNot = applicationIsNot;
  _applicationIsNotIsSet = YES;
}

- (void) unsetApplicationIsNot {
  _applicationIsNot = nil;
  _applicationIsNotIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaReactions_MatcherAll *fieldValue = [[AromaReactions_MatcherAll alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.all = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaReactions_MatcherTitleIs *fieldValue = [[AromaReactions_MatcherTitleIs alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.titleIs = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaReactions_MatcherTitleIsNot *fieldValue = [[AromaReactions_MatcherTitleIsNot alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.titleIsNot = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          AromaReactions_MatcherTitleContains *fieldValue = [[AromaReactions_MatcherTitleContains alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.titleContains = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          AromaReactions_MatcherTitleDoesNotContain *fieldValue = [[AromaReactions_MatcherTitleDoesNotContain alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.titleDoesNotContain = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeSTRUCT) {
          AromaReactions_MatcherBodyIs *fieldValue = [[AromaReactions_MatcherBodyIs alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.bodyIs = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 7:
        if (fieldType == TTypeSTRUCT) {
          AromaReactions_MatcherBodyContains *fieldValue = [[AromaReactions_MatcherBodyContains alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.bodyContains = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 8:
        if (fieldType == TTypeSTRUCT) {
          AromaReactions_MatcherBodyDoesNotContain *fieldValue = [[AromaReactions_MatcherBodyDoesNotContain alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.bodyDoesNotContain = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 9:
        if (fieldType == TTypeSTRUCT) {
          AromaReactions_MatcherUrgencyIs *fieldValue = [[AromaReactions_MatcherUrgencyIs alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.urgencyEquals = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 10:
        if (fieldType == TTypeSTRUCT) {
          AromaReactions_MatcherHostnameIs *fieldValue = [[AromaReactions_MatcherHostnameIs alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.hostnameIs = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 11:
        if (fieldType == TTypeSTRUCT) {
          AromaReactions_MatcherHostnameContains *fieldValue = [[AromaReactions_MatcherHostnameContains alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.hostnameContains = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 12:
        if (fieldType == TTypeSTRUCT) {
          AromaReactions_MatcherHostnameDoesNotContain *fieldValue = [[AromaReactions_MatcherHostnameDoesNotContain alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.hostnameDoesNotContain = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 13:
        if (fieldType == TTypeSTRUCT) {
          AromaReactions_MatcherApplicationIs *fieldValue = [[AromaReactions_MatcherApplicationIs alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.applicationIs = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 14:
        if (fieldType == TTypeSTRUCT) {
          AromaReactions_MatcherApplicationIsNot *fieldValue = [[AromaReactions_MatcherApplicationIsNot alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.applicationIsNot = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaMatcher" error: __thriftError]) return NO;
  if (_allIsSet) {
    if (_all != nil) {
      if (![outProtocol writeFieldBeginWithName: @"all" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_all write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_titleIsIsSet) {
    if (_titleIs != nil) {
      if (![outProtocol writeFieldBeginWithName: @"titleIs" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_titleIs write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_titleIsNotIsSet) {
    if (_titleIsNot != nil) {
      if (![outProtocol writeFieldBeginWithName: @"titleIsNot" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_titleIsNot write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_titleContainsIsSet) {
    if (_titleContains != nil) {
      if (![outProtocol writeFieldBeginWithName: @"titleContains" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_titleContains write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_titleDoesNotContainIsSet) {
    if (_titleDoesNotContain != nil) {
      if (![outProtocol writeFieldBeginWithName: @"titleDoesNotContain" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_titleDoesNotContain write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_bodyIsIsSet) {
    if (_bodyIs != nil) {
      if (![outProtocol writeFieldBeginWithName: @"bodyIs" type: TTypeSTRUCT fieldID: 6 error: __thriftError]) return NO;
      if (![_bodyIs write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_bodyContainsIsSet) {
    if (_bodyContains != nil) {
      if (![outProtocol writeFieldBeginWithName: @"bodyContains" type: TTypeSTRUCT fieldID: 7 error: __thriftError]) return NO;
      if (![_bodyContains write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_bodyDoesNotContainIsSet) {
    if (_bodyDoesNotContain != nil) {
      if (![outProtocol writeFieldBeginWithName: @"bodyDoesNotContain" type: TTypeSTRUCT fieldID: 8 error: __thriftError]) return NO;
      if (![_bodyDoesNotContain write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_urgencyEqualsIsSet) {
    if (_urgencyEquals != nil) {
      if (![outProtocol writeFieldBeginWithName: @"urgencyEquals" type: TTypeSTRUCT fieldID: 9 error: __thriftError]) return NO;
      if (![_urgencyEquals write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_hostnameIsIsSet) {
    if (_hostnameIs != nil) {
      if (![outProtocol writeFieldBeginWithName: @"hostnameIs" type: TTypeSTRUCT fieldID: 10 error: __thriftError]) return NO;
      if (![_hostnameIs write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_hostnameContainsIsSet) {
    if (_hostnameContains != nil) {
      if (![outProtocol writeFieldBeginWithName: @"hostnameContains" type: TTypeSTRUCT fieldID: 11 error: __thriftError]) return NO;
      if (![_hostnameContains write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_hostnameDoesNotContainIsSet) {
    if (_hostnameDoesNotContain != nil) {
      if (![outProtocol writeFieldBeginWithName: @"hostnameDoesNotContain" type: TTypeSTRUCT fieldID: 12 error: __thriftError]) return NO;
      if (![_hostnameDoesNotContain write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationIsIsSet) {
    if (_applicationIs != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationIs" type: TTypeSTRUCT fieldID: 13 error: __thriftError]) return NO;
      if (![_applicationIs write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationIsNotIsSet) {
    if (_applicationIsNot != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationIsNot" type: TTypeSTRUCT fieldID: 14 error: __thriftError]) return NO;
      if (![_applicationIsNot write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_AromaMatcher("];
  [ms appendString: @"all:"];
  [ms appendFormat: @"%@", _all];
  [ms appendString: @",titleIs:"];
  [ms appendFormat: @"%@", _titleIs];
  [ms appendString: @",titleIsNot:"];
  [ms appendFormat: @"%@", _titleIsNot];
  [ms appendString: @",titleContains:"];
  [ms appendFormat: @"%@", _titleContains];
  [ms appendString: @",titleDoesNotContain:"];
  [ms appendFormat: @"%@", _titleDoesNotContain];
  [ms appendString: @",bodyIs:"];
  [ms appendFormat: @"%@", _bodyIs];
  [ms appendString: @",bodyContains:"];
  [ms appendFormat: @"%@", _bodyContains];
  [ms appendString: @",bodyDoesNotContain:"];
  [ms appendFormat: @"%@", _bodyDoesNotContain];
  [ms appendString: @",urgencyEquals:"];
  [ms appendFormat: @"%@", _urgencyEquals];
  [ms appendString: @",hostnameIs:"];
  [ms appendFormat: @"%@", _hostnameIs];
  [ms appendString: @",hostnameContains:"];
  [ms appendFormat: @"%@", _hostnameContains];
  [ms appendString: @",hostnameDoesNotContain:"];
  [ms appendFormat: @"%@", _hostnameDoesNotContain];
  [ms appendString: @",applicationIs:"];
  [ms appendFormat: @"%@", _applicationIs];
  [ms appendString: @",applicationIsNot:"];
  [ms appendFormat: @"%@", _applicationIsNot];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_ActionForwardToSlackChannel

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.includeBody = YES;

  }
  return self;
}

- (instancetype) initWithSlackChannel: (NSString *) slackChannel includeBody: (BOOL) includeBody webhookUrl: (NSString *) webhookUrl domainName: (NSString *) domainName
{
  self = [super init];
  if (self)  {
    _slackChannel = slackChannel;
    _slackChannelIsSet = YES;
    _includeBody = includeBody;
    _includeBodyIsSet = YES;
    _webhookUrl = webhookUrl;
    _webhookUrlIsSet = YES;
    _domainName = domainName;
    _domainNameIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"slackChannel"])
    {
      _slackChannel = [decoder decodeObjectForKey: @"slackChannel"];
      _slackChannelIsSet = YES;
    }
    if ([decoder containsValueForKey: @"includeBody"])
    {
      _includeBody = [decoder decodeBoolForKey: @"includeBody"];
      _includeBodyIsSet = YES;
    }
    if ([decoder containsValueForKey: @"webhookUrl"])
    {
      _webhookUrl = [decoder decodeObjectForKey: @"webhookUrl"];
      _webhookUrlIsSet = YES;
    }
    if ([decoder containsValueForKey: @"domainName"])
    {
      _domainName = [decoder decodeObjectForKey: @"domainName"];
      _domainNameIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_slackChannelIsSet)
  {
    [encoder encodeObject: _slackChannel forKey: @"slackChannel"];
  }
  if (_includeBodyIsSet)
  {
    [encoder encodeBool: _includeBody forKey: @"includeBody"];
  }
  if (_webhookUrlIsSet)
  {
    [encoder encodeObject: _webhookUrl forKey: @"webhookUrl"];
  }
  if (_domainNameIsSet)
  {
    [encoder encodeObject: _domainName forKey: @"domainName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _slackChannelIsSet ? 2654435761 : 0;
  if (_slackChannelIsSet)
  {
    hash = (hash * 31) ^ [_slackChannel hash];
  }
  hash = (hash * 31) ^ _includeBodyIsSet ? 2654435761 : 0;
  if (_includeBodyIsSet)
  {
    hash = (hash * 31) ^ [@(_includeBody) hash];
  }
  hash = (hash * 31) ^ _webhookUrlIsSet ? 2654435761 : 0;
  if (_webhookUrlIsSet)
  {
    hash = (hash * 31) ^ [_webhookUrl hash];
  }
  hash = (hash * 31) ^ _domainNameIsSet ? 2654435761 : 0;
  if (_domainNameIsSet)
  {
    hash = (hash * 31) ^ [_domainName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_ActionForwardToSlackChannel class]]) {
    return NO;
  }
  AromaReactions_ActionForwardToSlackChannel *other = (AromaReactions_ActionForwardToSlackChannel *)anObject;
  if ((_slackChannelIsSet != other->_slackChannelIsSet) ||
      (_slackChannelIsSet && ((_slackChannel || other->_slackChannel) && ![_slackChannel isEqual:other->_slackChannel]))) {
    return NO;
  }
  if ((_includeBodyIsSet != other->_includeBodyIsSet) ||
      (_includeBodyIsSet && (_includeBody != other->_includeBody))) {
    return NO;
  }
  if ((_webhookUrlIsSet != other->_webhookUrlIsSet) ||
      (_webhookUrlIsSet && ((_webhookUrl || other->_webhookUrl) && ![_webhookUrl isEqual:other->_webhookUrl]))) {
    return NO;
  }
  if ((_domainNameIsSet != other->_domainNameIsSet) ||
      (_domainNameIsSet && ((_domainName || other->_domainName) && ![_domainName isEqual:other->_domainName]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaReactions_ActionForwardToSlackChannel * val = [AromaReactions_ActionForwardToSlackChannel new];
  if (_slackChannelIsSet)
  {
    val.slackChannel = [self.slackChannel copy];
  }
  if (_includeBodyIsSet)
  {
    val.includeBody = self.includeBody;
  }
  if (_webhookUrlIsSet)
  {
    val.webhookUrl = [self.webhookUrl copy];
  }
  if (_domainNameIsSet)
  {
    val.domainName = [self.domainName copy];
  }
  return val;
}

- (void) setSlackChannel: (NSString *) slackChannel {
  _slackChannel = slackChannel;
  _slackChannelIsSet = YES;
}

- (void) unsetSlackChannel {
  _slackChannel = nil;
  _slackChannelIsSet = NO;
}

- (void) setIncludeBody: (BOOL) includeBody {
  _includeBody = includeBody;
  _includeBodyIsSet = YES;
}

- (void) unsetIncludeBody {
  _includeBodyIsSet = NO;
}

- (void) setWebhookUrl: (NSString *) webhookUrl {
  _webhookUrl = webhookUrl;
  _webhookUrlIsSet = YES;
}

- (void) unsetWebhookUrl {
  _webhookUrl = nil;
  _webhookUrlIsSet = NO;
}

- (void) setDomainName: (NSString *) domainName {
  _domainName = domainName;
  _domainNameIsSet = YES;
}

- (void) unsetDomainName {
  _domainName = nil;
  _domainNameIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.slackChannel = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeBOOL) {
          BOOL fieldValue;
          if (![inProtocol readBool:&fieldValue error: __thriftError]) return NO;
          self.includeBody = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.webhookUrl = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.domainName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ActionForwardToSlackChannel" error: __thriftError]) return NO;
  if (_slackChannelIsSet) {
    if (_slackChannel != nil) {
      if (![outProtocol writeFieldBeginWithName: @"slackChannel" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _slackChannel error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_includeBodyIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"includeBody" type: TTypeBOOL fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeBool: _includeBody error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_webhookUrlIsSet) {
    if (_webhookUrl != nil) {
      if (![outProtocol writeFieldBeginWithName: @"webhookUrl" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _webhookUrl error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_domainNameIsSet) {
    if (_domainName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"domainName" type: TTypeSTRING fieldID: 4 error: __thriftError]) return NO;
      if (![outProtocol writeString: _domainName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_ActionForwardToSlackChannel("];
  [ms appendString: @"slackChannel:"];
  [ms appendFormat: @"\"%@\"", _slackChannel];
  [ms appendString: @",includeBody:"];
  [ms appendFormat: @"%i", _includeBody];
  [ms appendString: @",webhookUrl:"];
  [ms appendFormat: @"\"%@\"", _webhookUrl];
  [ms appendString: @",domainName:"];
  [ms appendFormat: @"\"%@\"", _domainName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_ActionForwardToSlackUser

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.includeBody = YES;

  }
  return self;
}

- (instancetype) initWithSlackUsername: (NSString *) slackUsername includeBody: (BOOL) includeBody webhookUrl: (NSString *) webhookUrl domainName: (NSString *) domainName
{
  self = [super init];
  if (self)  {
    _slackUsername = slackUsername;
    _slackUsernameIsSet = YES;
    _includeBody = includeBody;
    _includeBodyIsSet = YES;
    _webhookUrl = webhookUrl;
    _webhookUrlIsSet = YES;
    _domainName = domainName;
    _domainNameIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"slackUsername"])
    {
      _slackUsername = [decoder decodeObjectForKey: @"slackUsername"];
      _slackUsernameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"includeBody"])
    {
      _includeBody = [decoder decodeBoolForKey: @"includeBody"];
      _includeBodyIsSet = YES;
    }
    if ([decoder containsValueForKey: @"webhookUrl"])
    {
      _webhookUrl = [decoder decodeObjectForKey: @"webhookUrl"];
      _webhookUrlIsSet = YES;
    }
    if ([decoder containsValueForKey: @"domainName"])
    {
      _domainName = [decoder decodeObjectForKey: @"domainName"];
      _domainNameIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_slackUsernameIsSet)
  {
    [encoder encodeObject: _slackUsername forKey: @"slackUsername"];
  }
  if (_includeBodyIsSet)
  {
    [encoder encodeBool: _includeBody forKey: @"includeBody"];
  }
  if (_webhookUrlIsSet)
  {
    [encoder encodeObject: _webhookUrl forKey: @"webhookUrl"];
  }
  if (_domainNameIsSet)
  {
    [encoder encodeObject: _domainName forKey: @"domainName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _slackUsernameIsSet ? 2654435761 : 0;
  if (_slackUsernameIsSet)
  {
    hash = (hash * 31) ^ [_slackUsername hash];
  }
  hash = (hash * 31) ^ _includeBodyIsSet ? 2654435761 : 0;
  if (_includeBodyIsSet)
  {
    hash = (hash * 31) ^ [@(_includeBody) hash];
  }
  hash = (hash * 31) ^ _webhookUrlIsSet ? 2654435761 : 0;
  if (_webhookUrlIsSet)
  {
    hash = (hash * 31) ^ [_webhookUrl hash];
  }
  hash = (hash * 31) ^ _domainNameIsSet ? 2654435761 : 0;
  if (_domainNameIsSet)
  {
    hash = (hash * 31) ^ [_domainName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_ActionForwardToSlackUser class]]) {
    return NO;
  }
  AromaReactions_ActionForwardToSlackUser *other = (AromaReactions_ActionForwardToSlackUser *)anObject;
  if ((_slackUsernameIsSet != other->_slackUsernameIsSet) ||
      (_slackUsernameIsSet && ((_slackUsername || other->_slackUsername) && ![_slackUsername isEqual:other->_slackUsername]))) {
    return NO;
  }
  if ((_includeBodyIsSet != other->_includeBodyIsSet) ||
      (_includeBodyIsSet && (_includeBody != other->_includeBody))) {
    return NO;
  }
  if ((_webhookUrlIsSet != other->_webhookUrlIsSet) ||
      (_webhookUrlIsSet && ((_webhookUrl || other->_webhookUrl) && ![_webhookUrl isEqual:other->_webhookUrl]))) {
    return NO;
  }
  if ((_domainNameIsSet != other->_domainNameIsSet) ||
      (_domainNameIsSet && ((_domainName || other->_domainName) && ![_domainName isEqual:other->_domainName]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaReactions_ActionForwardToSlackUser * val = [AromaReactions_ActionForwardToSlackUser new];
  if (_slackUsernameIsSet)
  {
    val.slackUsername = [self.slackUsername copy];
  }
  if (_includeBodyIsSet)
  {
    val.includeBody = self.includeBody;
  }
  if (_webhookUrlIsSet)
  {
    val.webhookUrl = [self.webhookUrl copy];
  }
  if (_domainNameIsSet)
  {
    val.domainName = [self.domainName copy];
  }
  return val;
}

- (void) setSlackUsername: (NSString *) slackUsername {
  _slackUsername = slackUsername;
  _slackUsernameIsSet = YES;
}

- (void) unsetSlackUsername {
  _slackUsername = nil;
  _slackUsernameIsSet = NO;
}

- (void) setIncludeBody: (BOOL) includeBody {
  _includeBody = includeBody;
  _includeBodyIsSet = YES;
}

- (void) unsetIncludeBody {
  _includeBodyIsSet = NO;
}

- (void) setWebhookUrl: (NSString *) webhookUrl {
  _webhookUrl = webhookUrl;
  _webhookUrlIsSet = YES;
}

- (void) unsetWebhookUrl {
  _webhookUrl = nil;
  _webhookUrlIsSet = NO;
}

- (void) setDomainName: (NSString *) domainName {
  _domainName = domainName;
  _domainNameIsSet = YES;
}

- (void) unsetDomainName {
  _domainName = nil;
  _domainNameIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.slackUsername = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeBOOL) {
          BOOL fieldValue;
          if (![inProtocol readBool:&fieldValue error: __thriftError]) return NO;
          self.includeBody = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.webhookUrl = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.domainName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ActionForwardToSlackUser" error: __thriftError]) return NO;
  if (_slackUsernameIsSet) {
    if (_slackUsername != nil) {
      if (![outProtocol writeFieldBeginWithName: @"slackUsername" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _slackUsername error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_includeBodyIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"includeBody" type: TTypeBOOL fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeBool: _includeBody error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_webhookUrlIsSet) {
    if (_webhookUrl != nil) {
      if (![outProtocol writeFieldBeginWithName: @"webhookUrl" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _webhookUrl error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_domainNameIsSet) {
    if (_domainName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"domainName" type: TTypeSTRING fieldID: 4 error: __thriftError]) return NO;
      if (![outProtocol writeString: _domainName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_ActionForwardToSlackUser("];
  [ms appendString: @"slackUsername:"];
  [ms appendFormat: @"\"%@\"", _slackUsername];
  [ms appendString: @",includeBody:"];
  [ms appendFormat: @"%i", _includeBody];
  [ms appendString: @",webhookUrl:"];
  [ms appendFormat: @"\"%@\"", _webhookUrl];
  [ms appendString: @",domainName:"];
  [ms appendFormat: @"\"%@\"", _domainName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_ActionForwardToGitter

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.includeBody = YES;

  }
  return self;
}

- (instancetype) initWithGitterWebhookUrl: (NSString *) gitterWebhookUrl includeBody: (BOOL) includeBody
{
  self = [super init];
  if (self)  {
    _gitterWebhookUrl = gitterWebhookUrl;
    _gitterWebhookUrlIsSet = YES;
    _includeBody = includeBody;
    _includeBodyIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"gitterWebhookUrl"])
    {
      _gitterWebhookUrl = [decoder decodeObjectForKey: @"gitterWebhookUrl"];
      _gitterWebhookUrlIsSet = YES;
    }
    if ([decoder containsValueForKey: @"includeBody"])
    {
      _includeBody = [decoder decodeBoolForKey: @"includeBody"];
      _includeBodyIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_gitterWebhookUrlIsSet)
  {
    [encoder encodeObject: _gitterWebhookUrl forKey: @"gitterWebhookUrl"];
  }
  if (_includeBodyIsSet)
  {
    [encoder encodeBool: _includeBody forKey: @"includeBody"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _gitterWebhookUrlIsSet ? 2654435761 : 0;
  if (_gitterWebhookUrlIsSet)
  {
    hash = (hash * 31) ^ [_gitterWebhookUrl hash];
  }
  hash = (hash * 31) ^ _includeBodyIsSet ? 2654435761 : 0;
  if (_includeBodyIsSet)
  {
    hash = (hash * 31) ^ [@(_includeBody) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_ActionForwardToGitter class]]) {
    return NO;
  }
  AromaReactions_ActionForwardToGitter *other = (AromaReactions_ActionForwardToGitter *)anObject;
  if ((_gitterWebhookUrlIsSet != other->_gitterWebhookUrlIsSet) ||
      (_gitterWebhookUrlIsSet && ((_gitterWebhookUrl || other->_gitterWebhookUrl) && ![_gitterWebhookUrl isEqual:other->_gitterWebhookUrl]))) {
    return NO;
  }
  if ((_includeBodyIsSet != other->_includeBodyIsSet) ||
      (_includeBodyIsSet && (_includeBody != other->_includeBody))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaReactions_ActionForwardToGitter * val = [AromaReactions_ActionForwardToGitter new];
  if (_gitterWebhookUrlIsSet)
  {
    val.gitterWebhookUrl = [self.gitterWebhookUrl copy];
  }
  if (_includeBodyIsSet)
  {
    val.includeBody = self.includeBody;
  }
  return val;
}

- (void) setGitterWebhookUrl: (NSString *) gitterWebhookUrl {
  _gitterWebhookUrl = gitterWebhookUrl;
  _gitterWebhookUrlIsSet = YES;
}

- (void) unsetGitterWebhookUrl {
  _gitterWebhookUrl = nil;
  _gitterWebhookUrlIsSet = NO;
}

- (void) setIncludeBody: (BOOL) includeBody {
  _includeBody = includeBody;
  _includeBodyIsSet = YES;
}

- (void) unsetIncludeBody {
  _includeBodyIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.gitterWebhookUrl = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeBOOL) {
          BOOL fieldValue;
          if (![inProtocol readBool:&fieldValue error: __thriftError]) return NO;
          self.includeBody = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ActionForwardToGitter" error: __thriftError]) return NO;
  if (_gitterWebhookUrlIsSet) {
    if (_gitterWebhookUrl != nil) {
      if (![outProtocol writeFieldBeginWithName: @"gitterWebhookUrl" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _gitterWebhookUrl error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_includeBodyIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"includeBody" type: TTypeBOOL fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeBool: _includeBody error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_ActionForwardToGitter("];
  [ms appendString: @"gitterWebhookUrl:"];
  [ms appendFormat: @"\"%@\"", _gitterWebhookUrl];
  [ms appendString: @",includeBody:"];
  [ms appendFormat: @"%i", _includeBody];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_ActionSendEmail

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.includeBody = YES;

  }
  return self;
}

- (instancetype) initWithEmailAddress: (NSString *) emailAddress includeBody: (BOOL) includeBody
{
  self = [super init];
  if (self)  {
    _emailAddress = emailAddress;
    _emailAddressIsSet = YES;
    _includeBody = includeBody;
    _includeBodyIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"emailAddress"])
    {
      _emailAddress = [decoder decodeObjectForKey: @"emailAddress"];
      _emailAddressIsSet = YES;
    }
    if ([decoder containsValueForKey: @"includeBody"])
    {
      _includeBody = [decoder decodeBoolForKey: @"includeBody"];
      _includeBodyIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_emailAddressIsSet)
  {
    [encoder encodeObject: _emailAddress forKey: @"emailAddress"];
  }
  if (_includeBodyIsSet)
  {
    [encoder encodeBool: _includeBody forKey: @"includeBody"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _emailAddressIsSet ? 2654435761 : 0;
  if (_emailAddressIsSet)
  {
    hash = (hash * 31) ^ [_emailAddress hash];
  }
  hash = (hash * 31) ^ _includeBodyIsSet ? 2654435761 : 0;
  if (_includeBodyIsSet)
  {
    hash = (hash * 31) ^ [@(_includeBody) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_ActionSendEmail class]]) {
    return NO;
  }
  AromaReactions_ActionSendEmail *other = (AromaReactions_ActionSendEmail *)anObject;
  if ((_emailAddressIsSet != other->_emailAddressIsSet) ||
      (_emailAddressIsSet && ((_emailAddress || other->_emailAddress) && ![_emailAddress isEqual:other->_emailAddress]))) {
    return NO;
  }
  if ((_includeBodyIsSet != other->_includeBodyIsSet) ||
      (_includeBodyIsSet && (_includeBody != other->_includeBody))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaReactions_ActionSendEmail * val = [AromaReactions_ActionSendEmail new];
  if (_emailAddressIsSet)
  {
    val.emailAddress = [self.emailAddress copy];
  }
  if (_includeBodyIsSet)
  {
    val.includeBody = self.includeBody;
  }
  return val;
}

- (void) setEmailAddress: (NSString *) emailAddress {
  _emailAddress = emailAddress;
  _emailAddressIsSet = YES;
}

- (void) unsetEmailAddress {
  _emailAddress = nil;
  _emailAddressIsSet = NO;
}

- (void) setIncludeBody: (BOOL) includeBody {
  _includeBody = includeBody;
  _includeBodyIsSet = YES;
}

- (void) unsetIncludeBody {
  _includeBodyIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.emailAddress = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeBOOL) {
          BOOL fieldValue;
          if (![inProtocol readBool:&fieldValue error: __thriftError]) return NO;
          self.includeBody = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ActionSendEmail" error: __thriftError]) return NO;
  if (_emailAddressIsSet) {
    if (_emailAddress != nil) {
      if (![outProtocol writeFieldBeginWithName: @"emailAddress" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _emailAddress error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_includeBodyIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"includeBody" type: TTypeBOOL fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeBool: _includeBody error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_ActionSendEmail("];
  [ms appendString: @"emailAddress:"];
  [ms appendFormat: @"\"%@\"", _emailAddress];
  [ms appendString: @",includeBody:"];
  [ms appendFormat: @"%i", _includeBody];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_ActionSkipInbox

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_ActionSkipInbox class]]) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaReactions_ActionSkipInbox * val = [AromaReactions_ActionSkipInbox new];
  return val;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ActionSkipInbox" error: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_ActionSkipInbox("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_ActionDontStoreMessage

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_ActionDontStoreMessage class]]) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaReactions_ActionDontStoreMessage * val = [AromaReactions_ActionDontStoreMessage new];
  return val;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ActionDontStoreMessage" error: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_ActionDontStoreMessage("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_ActionRespondWithMessage

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithMessageToRespondWith: (NSString *) messageToRespondWith
{
  self = [super init];
  if (self)  {
    _messageToRespondWith = messageToRespondWith;
    _messageToRespondWithIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"messageToRespondWith"])
    {
      _messageToRespondWith = [decoder decodeObjectForKey: @"messageToRespondWith"];
      _messageToRespondWithIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_messageToRespondWithIsSet)
  {
    [encoder encodeObject: _messageToRespondWith forKey: @"messageToRespondWith"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _messageToRespondWithIsSet ? 2654435761 : 0;
  if (_messageToRespondWithIsSet)
  {
    hash = (hash * 31) ^ [_messageToRespondWith hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_ActionRespondWithMessage class]]) {
    return NO;
  }
  AromaReactions_ActionRespondWithMessage *other = (AromaReactions_ActionRespondWithMessage *)anObject;
  if ((_messageToRespondWithIsSet != other->_messageToRespondWithIsSet) ||
      (_messageToRespondWithIsSet && ((_messageToRespondWith || other->_messageToRespondWith) && ![_messageToRespondWith isEqual:other->_messageToRespondWith]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaReactions_ActionRespondWithMessage * val = [AromaReactions_ActionRespondWithMessage new];
  if (_messageToRespondWithIsSet)
  {
    val.messageToRespondWith = [self.messageToRespondWith copy];
  }
  return val;
}

- (void) setMessageToRespondWith: (NSString *) messageToRespondWith {
  _messageToRespondWith = messageToRespondWith;
  _messageToRespondWithIsSet = YES;
}

- (void) unsetMessageToRespondWith {
  _messageToRespondWith = nil;
  _messageToRespondWithIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.messageToRespondWith = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ActionRespondWithMessage" error: __thriftError]) return NO;
  if (_messageToRespondWithIsSet) {
    if (_messageToRespondWith != nil) {
      if (![outProtocol writeFieldBeginWithName: @"messageToRespondWith" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _messageToRespondWith error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_ActionRespondWithMessage("];
  [ms appendString: @"messageToRespondWith:"];
  [ms appendFormat: @"\"%@\"", _messageToRespondWith];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_ActionForwardToUsers

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.userIds = @[]  }
  return self;
}

- (instancetype) initWithUserIds: (NSArray<AromaReactions_uuid> *) userIds
{
  self = [super init];
  if (self)  {
    _userIds = [userIds mutableCopy];
    _userIdsIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"userIds"])
    {
      _userIds = [decoder decodeObjectForKey: @"userIds"];
      _userIdsIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_userIdsIsSet)
  {
    [encoder encodeObject: _userIds forKey: @"userIds"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _userIdsIsSet ? 2654435761 : 0;
  if (_userIdsIsSet)
  {
    hash = (hash * 31) ^ [_userIds hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_ActionForwardToUsers class]]) {
    return NO;
  }
  AromaReactions_ActionForwardToUsers *other = (AromaReactions_ActionForwardToUsers *)anObject;
  if ((_userIdsIsSet != other->_userIdsIsSet) ||
      (_userIdsIsSet && ((_userIds || other->_userIds) && ![_userIds isEqual:other->_userIds]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaReactions_ActionForwardToUsers * val = [AromaReactions_ActionForwardToUsers new];
  if (_userIdsIsSet)
  {
    val.userIds = [self.userIds copy];
  }
  return val;
}

- (void) setUserIds: (NSMutableArray<AromaReactions_uuid> *) userIds {
  _userIds = userIds;
  _userIdsIsSet = YES;
}

- (void) unsetUserIds {
  _userIds = nil;
  _userIdsIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeLIST) {
          SInt32 _size5;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size5 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            NSString * _elem7;
            if (![inProtocol readString:&_elem7 error: __thriftError]) return NO;
            [fieldValue addObject: _elem7];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.userIds = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ActionForwardToUsers" error: __thriftError]) return NO;
  if (_userIdsIsSet) {
    if (_userIds != nil) {
      if (![outProtocol writeFieldBeginWithName: @"userIds" type: TTypeLIST fieldID: 1 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRING size: (SInt32)[_userIds count] error: __thriftError]) return NO;
        int idx9;
        for (idx9 = 0; idx9 < [_userIds count]; idx9++)
        {
          if (![outProtocol writeString: [_userIds objectAtIndex: idx9] error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_ActionForwardToUsers("];
  [ms appendString: @"userIds:"];
  [ms appendFormat: @"%@", _userIds];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_ActionSendPushNotification

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_ActionSendPushNotification class]]) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaReactions_ActionSendPushNotification * val = [AromaReactions_ActionSendPushNotification new];
  return val;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ActionSendPushNotification" error: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_ActionSendPushNotification("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_ActionDontSendPushNotification

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_ActionDontSendPushNotification class]]) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaReactions_ActionDontSendPushNotification * val = [AromaReactions_ActionDontSendPushNotification new];
  return val;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ActionDontSendPushNotification" error: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_ActionDontSendPushNotification("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_AromaAction

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithForwardToSlackChannel: (AromaReactions_ActionForwardToSlackChannel *) forwardToSlackChannel forwardToSlackUser: (AromaReactions_ActionForwardToSlackUser *) forwardToSlackUser forwardToGitter: (AromaReactions_ActionForwardToGitter *) forwardToGitter sendEmail: (AromaReactions_ActionSendEmail *) sendEmail skipInbox: (AromaReactions_ActionSkipInbox *) skipInbox dontStoreMessage: (AromaReactions_ActionDontStoreMessage *) dontStoreMessage responseWithMessage: (AromaReactions_ActionRespondWithMessage *) responseWithMessage forwardToUsers: (AromaReactions_ActionForwardToUsers *) forwardToUsers sendPushNotification: (AromaReactions_ActionSendPushNotification *) sendPushNotification dontSendPushNotification: (AromaReactions_ActionDontSendPushNotification *) dontSendPushNotification
{
  self = [super init];
  if (self)  {
    _forwardToSlackChannel = forwardToSlackChannel;
    _forwardToSlackChannelIsSet = YES;
    _forwardToSlackUser = forwardToSlackUser;
    _forwardToSlackUserIsSet = YES;
    _forwardToGitter = forwardToGitter;
    _forwardToGitterIsSet = YES;
    _sendEmail = sendEmail;
    _sendEmailIsSet = YES;
    _skipInbox = skipInbox;
    _skipInboxIsSet = YES;
    _dontStoreMessage = dontStoreMessage;
    _dontStoreMessageIsSet = YES;
    _responseWithMessage = responseWithMessage;
    _responseWithMessageIsSet = YES;
    _forwardToUsers = forwardToUsers;
    _forwardToUsersIsSet = YES;
    _sendPushNotification = sendPushNotification;
    _sendPushNotificationIsSet = YES;
    _dontSendPushNotification = dontSendPushNotification;
    _dontSendPushNotificationIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"forwardToSlackChannel"])
    {
      _forwardToSlackChannel = [decoder decodeObjectForKey: @"forwardToSlackChannel"];
      _forwardToSlackChannelIsSet = YES;
    }
    if ([decoder containsValueForKey: @"forwardToSlackUser"])
    {
      _forwardToSlackUser = [decoder decodeObjectForKey: @"forwardToSlackUser"];
      _forwardToSlackUserIsSet = YES;
    }
    if ([decoder containsValueForKey: @"forwardToGitter"])
    {
      _forwardToGitter = [decoder decodeObjectForKey: @"forwardToGitter"];
      _forwardToGitterIsSet = YES;
    }
    if ([decoder containsValueForKey: @"sendEmail"])
    {
      _sendEmail = [decoder decodeObjectForKey: @"sendEmail"];
      _sendEmailIsSet = YES;
    }
    if ([decoder containsValueForKey: @"skipInbox"])
    {
      _skipInbox = [decoder decodeObjectForKey: @"skipInbox"];
      _skipInboxIsSet = YES;
    }
    if ([decoder containsValueForKey: @"dontStoreMessage"])
    {
      _dontStoreMessage = [decoder decodeObjectForKey: @"dontStoreMessage"];
      _dontStoreMessageIsSet = YES;
    }
    if ([decoder containsValueForKey: @"responseWithMessage"])
    {
      _responseWithMessage = [decoder decodeObjectForKey: @"responseWithMessage"];
      _responseWithMessageIsSet = YES;
    }
    if ([decoder containsValueForKey: @"forwardToUsers"])
    {
      _forwardToUsers = [decoder decodeObjectForKey: @"forwardToUsers"];
      _forwardToUsersIsSet = YES;
    }
    if ([decoder containsValueForKey: @"sendPushNotification"])
    {
      _sendPushNotification = [decoder decodeObjectForKey: @"sendPushNotification"];
      _sendPushNotificationIsSet = YES;
    }
    if ([decoder containsValueForKey: @"dontSendPushNotification"])
    {
      _dontSendPushNotification = [decoder decodeObjectForKey: @"dontSendPushNotification"];
      _dontSendPushNotificationIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_forwardToSlackChannelIsSet)
  {
    [encoder encodeObject: _forwardToSlackChannel forKey: @"forwardToSlackChannel"];
  }
  if (_forwardToSlackUserIsSet)
  {
    [encoder encodeObject: _forwardToSlackUser forKey: @"forwardToSlackUser"];
  }
  if (_forwardToGitterIsSet)
  {
    [encoder encodeObject: _forwardToGitter forKey: @"forwardToGitter"];
  }
  if (_sendEmailIsSet)
  {
    [encoder encodeObject: _sendEmail forKey: @"sendEmail"];
  }
  if (_skipInboxIsSet)
  {
    [encoder encodeObject: _skipInbox forKey: @"skipInbox"];
  }
  if (_dontStoreMessageIsSet)
  {
    [encoder encodeObject: _dontStoreMessage forKey: @"dontStoreMessage"];
  }
  if (_responseWithMessageIsSet)
  {
    [encoder encodeObject: _responseWithMessage forKey: @"responseWithMessage"];
  }
  if (_forwardToUsersIsSet)
  {
    [encoder encodeObject: _forwardToUsers forKey: @"forwardToUsers"];
  }
  if (_sendPushNotificationIsSet)
  {
    [encoder encodeObject: _sendPushNotification forKey: @"sendPushNotification"];
  }
  if (_dontSendPushNotificationIsSet)
  {
    [encoder encodeObject: _dontSendPushNotification forKey: @"dontSendPushNotification"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _forwardToSlackChannelIsSet ? 2654435761 : 0;
  if (_forwardToSlackChannelIsSet)
  {
    hash = (hash * 31) ^ [_forwardToSlackChannel hash];
  }
  hash = (hash * 31) ^ _forwardToSlackUserIsSet ? 2654435761 : 0;
  if (_forwardToSlackUserIsSet)
  {
    hash = (hash * 31) ^ [_forwardToSlackUser hash];
  }
  hash = (hash * 31) ^ _forwardToGitterIsSet ? 2654435761 : 0;
  if (_forwardToGitterIsSet)
  {
    hash = (hash * 31) ^ [_forwardToGitter hash];
  }
  hash = (hash * 31) ^ _sendEmailIsSet ? 2654435761 : 0;
  if (_sendEmailIsSet)
  {
    hash = (hash * 31) ^ [_sendEmail hash];
  }
  hash = (hash * 31) ^ _skipInboxIsSet ? 2654435761 : 0;
  if (_skipInboxIsSet)
  {
    hash = (hash * 31) ^ [_skipInbox hash];
  }
  hash = (hash * 31) ^ _dontStoreMessageIsSet ? 2654435761 : 0;
  if (_dontStoreMessageIsSet)
  {
    hash = (hash * 31) ^ [_dontStoreMessage hash];
  }
  hash = (hash * 31) ^ _responseWithMessageIsSet ? 2654435761 : 0;
  if (_responseWithMessageIsSet)
  {
    hash = (hash * 31) ^ [_responseWithMessage hash];
  }
  hash = (hash * 31) ^ _forwardToUsersIsSet ? 2654435761 : 0;
  if (_forwardToUsersIsSet)
  {
    hash = (hash * 31) ^ [_forwardToUsers hash];
  }
  hash = (hash * 31) ^ _sendPushNotificationIsSet ? 2654435761 : 0;
  if (_sendPushNotificationIsSet)
  {
    hash = (hash * 31) ^ [_sendPushNotification hash];
  }
  hash = (hash * 31) ^ _dontSendPushNotificationIsSet ? 2654435761 : 0;
  if (_dontSendPushNotificationIsSet)
  {
    hash = (hash * 31) ^ [_dontSendPushNotification hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_AromaAction class]]) {
    return NO;
  }
  AromaReactions_AromaAction *other = (AromaReactions_AromaAction *)anObject;
  if ((_forwardToSlackChannelIsSet != other->_forwardToSlackChannelIsSet) ||
      (_forwardToSlackChannelIsSet && ((_forwardToSlackChannel || other->_forwardToSlackChannel) && ![_forwardToSlackChannel isEqual:other->_forwardToSlackChannel]))) {
    return NO;
  }
  if ((_forwardToSlackUserIsSet != other->_forwardToSlackUserIsSet) ||
      (_forwardToSlackUserIsSet && ((_forwardToSlackUser || other->_forwardToSlackUser) && ![_forwardToSlackUser isEqual:other->_forwardToSlackUser]))) {
    return NO;
  }
  if ((_forwardToGitterIsSet != other->_forwardToGitterIsSet) ||
      (_forwardToGitterIsSet && ((_forwardToGitter || other->_forwardToGitter) && ![_forwardToGitter isEqual:other->_forwardToGitter]))) {
    return NO;
  }
  if ((_sendEmailIsSet != other->_sendEmailIsSet) ||
      (_sendEmailIsSet && ((_sendEmail || other->_sendEmail) && ![_sendEmail isEqual:other->_sendEmail]))) {
    return NO;
  }
  if ((_skipInboxIsSet != other->_skipInboxIsSet) ||
      (_skipInboxIsSet && ((_skipInbox || other->_skipInbox) && ![_skipInbox isEqual:other->_skipInbox]))) {
    return NO;
  }
  if ((_dontStoreMessageIsSet != other->_dontStoreMessageIsSet) ||
      (_dontStoreMessageIsSet && ((_dontStoreMessage || other->_dontStoreMessage) && ![_dontStoreMessage isEqual:other->_dontStoreMessage]))) {
    return NO;
  }
  if ((_responseWithMessageIsSet != other->_responseWithMessageIsSet) ||
      (_responseWithMessageIsSet && ((_responseWithMessage || other->_responseWithMessage) && ![_responseWithMessage isEqual:other->_responseWithMessage]))) {
    return NO;
  }
  if ((_forwardToUsersIsSet != other->_forwardToUsersIsSet) ||
      (_forwardToUsersIsSet && ((_forwardToUsers || other->_forwardToUsers) && ![_forwardToUsers isEqual:other->_forwardToUsers]))) {
    return NO;
  }
  if ((_sendPushNotificationIsSet != other->_sendPushNotificationIsSet) ||
      (_sendPushNotificationIsSet && ((_sendPushNotification || other->_sendPushNotification) && ![_sendPushNotification isEqual:other->_sendPushNotification]))) {
    return NO;
  }
  if ((_dontSendPushNotificationIsSet != other->_dontSendPushNotificationIsSet) ||
      (_dontSendPushNotificationIsSet && ((_dontSendPushNotification || other->_dontSendPushNotification) && ![_dontSendPushNotification isEqual:other->_dontSendPushNotification]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaReactions_AromaAction * val = [AromaReactions_AromaAction new];
  if (_forwardToSlackChannelIsSet)
  {
    val.forwardToSlackChannel = [self.forwardToSlackChannel copy];
  }
  if (_forwardToSlackUserIsSet)
  {
    val.forwardToSlackUser = [self.forwardToSlackUser copy];
  }
  if (_forwardToGitterIsSet)
  {
    val.forwardToGitter = [self.forwardToGitter copy];
  }
  if (_sendEmailIsSet)
  {
    val.sendEmail = [self.sendEmail copy];
  }
  if (_skipInboxIsSet)
  {
    val.skipInbox = [self.skipInbox copy];
  }
  if (_dontStoreMessageIsSet)
  {
    val.dontStoreMessage = [self.dontStoreMessage copy];
  }
  if (_responseWithMessageIsSet)
  {
    val.responseWithMessage = [self.responseWithMessage copy];
  }
  if (_forwardToUsersIsSet)
  {
    val.forwardToUsers = [self.forwardToUsers copy];
  }
  if (_sendPushNotificationIsSet)
  {
    val.sendPushNotification = [self.sendPushNotification copy];
  }
  if (_dontSendPushNotificationIsSet)
  {
    val.dontSendPushNotification = [self.dontSendPushNotification copy];
  }
  return val;
}

- (void) setForwardToSlackChannel: (AromaReactions_ActionForwardToSlackChannel *) forwardToSlackChannel {
  _forwardToSlackChannel = forwardToSlackChannel;
  _forwardToSlackChannelIsSet = YES;
}

- (void) unsetForwardToSlackChannel {
  _forwardToSlackChannel = nil;
  _forwardToSlackChannelIsSet = NO;
}

- (void) setForwardToSlackUser: (AromaReactions_ActionForwardToSlackUser *) forwardToSlackUser {
  _forwardToSlackUser = forwardToSlackUser;
  _forwardToSlackUserIsSet = YES;
}

- (void) unsetForwardToSlackUser {
  _forwardToSlackUser = nil;
  _forwardToSlackUserIsSet = NO;
}

- (void) setForwardToGitter: (AromaReactions_ActionForwardToGitter *) forwardToGitter {
  _forwardToGitter = forwardToGitter;
  _forwardToGitterIsSet = YES;
}

- (void) unsetForwardToGitter {
  _forwardToGitter = nil;
  _forwardToGitterIsSet = NO;
}

- (void) setSendEmail: (AromaReactions_ActionSendEmail *) sendEmail {
  _sendEmail = sendEmail;
  _sendEmailIsSet = YES;
}

- (void) unsetSendEmail {
  _sendEmail = nil;
  _sendEmailIsSet = NO;
}

- (void) setSkipInbox: (AromaReactions_ActionSkipInbox *) skipInbox {
  _skipInbox = skipInbox;
  _skipInboxIsSet = YES;
}

- (void) unsetSkipInbox {
  _skipInbox = nil;
  _skipInboxIsSet = NO;
}

- (void) setDontStoreMessage: (AromaReactions_ActionDontStoreMessage *) dontStoreMessage {
  _dontStoreMessage = dontStoreMessage;
  _dontStoreMessageIsSet = YES;
}

- (void) unsetDontStoreMessage {
  _dontStoreMessage = nil;
  _dontStoreMessageIsSet = NO;
}

- (void) setResponseWithMessage: (AromaReactions_ActionRespondWithMessage *) responseWithMessage {
  _responseWithMessage = responseWithMessage;
  _responseWithMessageIsSet = YES;
}

- (void) unsetResponseWithMessage {
  _responseWithMessage = nil;
  _responseWithMessageIsSet = NO;
}

- (void) setForwardToUsers: (AromaReactions_ActionForwardToUsers *) forwardToUsers {
  _forwardToUsers = forwardToUsers;
  _forwardToUsersIsSet = YES;
}

- (void) unsetForwardToUsers {
  _forwardToUsers = nil;
  _forwardToUsersIsSet = NO;
}

- (void) setSendPushNotification: (AromaReactions_ActionSendPushNotification *) sendPushNotification {
  _sendPushNotification = sendPushNotification;
  _sendPushNotificationIsSet = YES;
}

- (void) unsetSendPushNotification {
  _sendPushNotification = nil;
  _sendPushNotificationIsSet = NO;
}

- (void) setDontSendPushNotification: (AromaReactions_ActionDontSendPushNotification *) dontSendPushNotification {
  _dontSendPushNotification = dontSendPushNotification;
  _dontSendPushNotificationIsSet = YES;
}

- (void) unsetDontSendPushNotification {
  _dontSendPushNotification = nil;
  _dontSendPushNotificationIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaReactions_ActionForwardToSlackChannel *fieldValue = [[AromaReactions_ActionForwardToSlackChannel alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.forwardToSlackChannel = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaReactions_ActionForwardToSlackUser *fieldValue = [[AromaReactions_ActionForwardToSlackUser alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.forwardToSlackUser = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 8:
        if (fieldType == TTypeSTRUCT) {
          AromaReactions_ActionForwardToGitter *fieldValue = [[AromaReactions_ActionForwardToGitter alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.forwardToGitter = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaReactions_ActionSendEmail *fieldValue = [[AromaReactions_ActionSendEmail alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.sendEmail = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          AromaReactions_ActionSkipInbox *fieldValue = [[AromaReactions_ActionSkipInbox alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.skipInbox = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          AromaReactions_ActionDontStoreMessage *fieldValue = [[AromaReactions_ActionDontStoreMessage alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.dontStoreMessage = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeSTRUCT) {
          AromaReactions_ActionRespondWithMessage *fieldValue = [[AromaReactions_ActionRespondWithMessage alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.responseWithMessage = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 7:
        if (fieldType == TTypeSTRUCT) {
          AromaReactions_ActionForwardToUsers *fieldValue = [[AromaReactions_ActionForwardToUsers alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.forwardToUsers = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 9:
        if (fieldType == TTypeSTRUCT) {
          AromaReactions_ActionSendPushNotification *fieldValue = [[AromaReactions_ActionSendPushNotification alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.sendPushNotification = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 10:
        if (fieldType == TTypeSTRUCT) {
          AromaReactions_ActionDontSendPushNotification *fieldValue = [[AromaReactions_ActionDontSendPushNotification alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.dontSendPushNotification = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaAction" error: __thriftError]) return NO;
  if (_forwardToSlackChannelIsSet) {
    if (_forwardToSlackChannel != nil) {
      if (![outProtocol writeFieldBeginWithName: @"forwardToSlackChannel" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_forwardToSlackChannel write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_forwardToSlackUserIsSet) {
    if (_forwardToSlackUser != nil) {
      if (![outProtocol writeFieldBeginWithName: @"forwardToSlackUser" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_forwardToSlackUser write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_forwardToGitterIsSet) {
    if (_forwardToGitter != nil) {
      if (![outProtocol writeFieldBeginWithName: @"forwardToGitter" type: TTypeSTRUCT fieldID: 8 error: __thriftError]) return NO;
      if (![_forwardToGitter write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_sendEmailIsSet) {
    if (_sendEmail != nil) {
      if (![outProtocol writeFieldBeginWithName: @"sendEmail" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_sendEmail write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_skipInboxIsSet) {
    if (_skipInbox != nil) {
      if (![outProtocol writeFieldBeginWithName: @"skipInbox" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_skipInbox write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_dontStoreMessageIsSet) {
    if (_dontStoreMessage != nil) {
      if (![outProtocol writeFieldBeginWithName: @"dontStoreMessage" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_dontStoreMessage write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_responseWithMessageIsSet) {
    if (_responseWithMessage != nil) {
      if (![outProtocol writeFieldBeginWithName: @"responseWithMessage" type: TTypeSTRUCT fieldID: 6 error: __thriftError]) return NO;
      if (![_responseWithMessage write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_forwardToUsersIsSet) {
    if (_forwardToUsers != nil) {
      if (![outProtocol writeFieldBeginWithName: @"forwardToUsers" type: TTypeSTRUCT fieldID: 7 error: __thriftError]) return NO;
      if (![_forwardToUsers write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_sendPushNotificationIsSet) {
    if (_sendPushNotification != nil) {
      if (![outProtocol writeFieldBeginWithName: @"sendPushNotification" type: TTypeSTRUCT fieldID: 9 error: __thriftError]) return NO;
      if (![_sendPushNotification write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_dontSendPushNotificationIsSet) {
    if (_dontSendPushNotification != nil) {
      if (![outProtocol writeFieldBeginWithName: @"dontSendPushNotification" type: TTypeSTRUCT fieldID: 10 error: __thriftError]) return NO;
      if (![_dontSendPushNotification write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_AromaAction("];
  [ms appendString: @"forwardToSlackChannel:"];
  [ms appendFormat: @"%@", _forwardToSlackChannel];
  [ms appendString: @",forwardToSlackUser:"];
  [ms appendFormat: @"%@", _forwardToSlackUser];
  [ms appendString: @",forwardToGitter:"];
  [ms appendFormat: @"%@", _forwardToGitter];
  [ms appendString: @",sendEmail:"];
  [ms appendFormat: @"%@", _sendEmail];
  [ms appendString: @",skipInbox:"];
  [ms appendFormat: @"%@", _skipInbox];
  [ms appendString: @",dontStoreMessage:"];
  [ms appendFormat: @"%@", _dontStoreMessage];
  [ms appendString: @",responseWithMessage:"];
  [ms appendFormat: @"%@", _responseWithMessage];
  [ms appendString: @",forwardToUsers:"];
  [ms appendFormat: @"%@", _forwardToUsers];
  [ms appendString: @",sendPushNotification:"];
  [ms appendFormat: @"%@", _sendPushNotification];
  [ms appendString: @",dontSendPushNotification:"];
  [ms appendFormat: @"%@", _dontSendPushNotification];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_Reaction

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.matchers = @[]    self.actions = @[]  }
  return self;
}

- (instancetype) initWithMatchers: (NSArray<AromaReactions_AromaMatcher *> *) matchers actions: (NSArray<AromaReactions_AromaAction *> *) actions name: (NSString *) name
{
  self = [super init];
  if (self)  {
    _matchers = [matchers mutableCopy];
    _matchersIsSet = YES;
    _actions = [actions mutableCopy];
    _actionsIsSet = YES;
    _name = name;
    _nameIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"matchers"])
    {
      _matchers = [decoder decodeObjectForKey: @"matchers"];
      _matchersIsSet = YES;
    }
    if ([decoder containsValueForKey: @"actions"])
    {
      _actions = [decoder decodeObjectForKey: @"actions"];
      _actionsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"name"])
    {
      _name = [decoder decodeObjectForKey: @"name"];
      _nameIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_matchersIsSet)
  {
    [encoder encodeObject: _matchers forKey: @"matchers"];
  }
  if (_actionsIsSet)
  {
    [encoder encodeObject: _actions forKey: @"actions"];
  }
  if (_nameIsSet)
  {
    [encoder encodeObject: _name forKey: @"name"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _matchersIsSet ? 2654435761 : 0;
  if (_matchersIsSet)
  {
    hash = (hash * 31) ^ [_matchers hash];
  }
  hash = (hash * 31) ^ _actionsIsSet ? 2654435761 : 0;
  if (_actionsIsSet)
  {
    hash = (hash * 31) ^ [_actions hash];
  }
  hash = (hash * 31) ^ _nameIsSet ? 2654435761 : 0;
  if (_nameIsSet)
  {
    hash = (hash * 31) ^ [_name hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_Reaction class]]) {
    return NO;
  }
  AromaReactions_Reaction *other = (AromaReactions_Reaction *)anObject;
  if ((_matchersIsSet != other->_matchersIsSet) ||
      (_matchersIsSet && ((_matchers || other->_matchers) && ![_matchers isEqual:other->_matchers]))) {
    return NO;
  }
  if ((_actionsIsSet != other->_actionsIsSet) ||
      (_actionsIsSet && ((_actions || other->_actions) && ![_actions isEqual:other->_actions]))) {
    return NO;
  }
  if ((_nameIsSet != other->_nameIsSet) ||
      (_nameIsSet && ((_name || other->_name) && ![_name isEqual:other->_name]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaReactions_Reaction * val = [AromaReactions_Reaction new];
  if (_matchersIsSet)
  {
    val.matchers = [self.matchers copy];
  }
  if (_actionsIsSet)
  {
    val.actions = [self.actions copy];
  }
  if (_nameIsSet)
  {
    val.name = [self.name copy];
  }
  return val;
}

- (void) setMatchers: (NSMutableArray<AromaReactions_AromaMatcher *> *) matchers {
  _matchers = matchers;
  _matchersIsSet = YES;
}

- (void) unsetMatchers {
  _matchers = nil;
  _matchersIsSet = NO;
}

- (void) setActions: (NSMutableArray<AromaReactions_AromaAction *> *) actions {
  _actions = actions;
  _actionsIsSet = YES;
}

- (void) unsetActions {
  _actions = nil;
  _actionsIsSet = NO;
}

- (void) setName: (NSString *) name {
  _name = name;
  _nameIsSet = YES;
}

- (void) unsetName {
  _name = nil;
  _nameIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeLIST) {
          SInt32 _size10;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size10 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            AromaReactions_AromaMatcher *_elem12 = [[AromaReactions_AromaMatcher alloc] init];
            if (![_elem12 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem12];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.matchers = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeLIST) {
          SInt32 _size13;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size13 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size13];
          int _i14;
          for (_i14 = 0; _i14 < _size13; ++_i14)
          {
            AromaReactions_AromaAction *_elem15 = [[AromaReactions_AromaAction alloc] init];
            if (![_elem15 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem15];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.actions = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.name = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Reaction" error: __thriftError]) return NO;
  if (_matchersIsSet) {
    if (_matchers != nil) {
      if (![outProtocol writeFieldBeginWithName: @"matchers" type: TTypeLIST fieldID: 1 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_matchers count] error: __thriftError]) return NO;
        int idx17;
        for (idx17 = 0; idx17 < [_matchers count]; idx17++)
        {
          if (![[_matchers objectAtIndex: idx17] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_actionsIsSet) {
    if (_actions != nil) {
      if (![outProtocol writeFieldBeginWithName: @"actions" type: TTypeLIST fieldID: 2 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_actions count] error: __thriftError]) return NO;
        int idx19;
        for (idx19 = 0; idx19 < [_actions count]; idx19++)
        {
          if (![[_actions objectAtIndex: idx19] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_nameIsSet) {
    if (_name != nil) {
      if (![outProtocol writeFieldBeginWithName: @"name" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _name error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_Reaction("];
  [ms appendString: @"matchers:"];
  [ms appendFormat: @"%@", _matchers];
  [ms appendString: @",actions:"];
  [ms appendFormat: @"%@", _actions];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", _name];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

NSString *AromaReactions_ReactionsErrorDomain = @"AromaReactions_ReactionsErrorDomain";


