/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"


#import "Banana.h"

@implementation Banana_Message

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.urgency = 1;

#endif
  return self;
}

- (id) initWithMessageId: (NSString *) messageId body: (NSString *) body urgency: (int) urgency timeMessageSent: (Banana_timestamp) timeMessageSent timeMessageReceived: (Banana_timestamp) timeMessageReceived nameOfApplication: (NSString *) nameOfApplication
{
  self = [super init];
  __messageId = [messageId retain_stub];
  __messageId_isset = YES;
  __body = [body retain_stub];
  __body_isset = YES;
  __urgency = urgency;
  __urgency_isset = YES;
  __timeMessageSent = timeMessageSent;
  __timeMessageSent_isset = YES;
  __timeMessageReceived = timeMessageReceived;
  __timeMessageReceived_isset = YES;
  __nameOfApplication = [nameOfApplication retain_stub];
  __nameOfApplication_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"messageId"])
  {
    __messageId = [[decoder decodeObjectForKey: @"messageId"] retain_stub];
    __messageId_isset = YES;
  }
  if ([decoder containsValueForKey: @"body"])
  {
    __body = [[decoder decodeObjectForKey: @"body"] retain_stub];
    __body_isset = YES;
  }
  if ([decoder containsValueForKey: @"urgency"])
  {
    __urgency = [decoder decodeIntForKey: @"urgency"];
    __urgency_isset = YES;
  }
  if ([decoder containsValueForKey: @"timeMessageSent"])
  {
    __timeMessageSent = [decoder decodeInt64ForKey: @"timeMessageSent"];
    __timeMessageSent_isset = YES;
  }
  if ([decoder containsValueForKey: @"timeMessageReceived"])
  {
    __timeMessageReceived = [decoder decodeInt64ForKey: @"timeMessageReceived"];
    __timeMessageReceived_isset = YES;
  }
  if ([decoder containsValueForKey: @"nameOfApplication"])
  {
    __nameOfApplication = [[decoder decodeObjectForKey: @"nameOfApplication"] retain_stub];
    __nameOfApplication_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__messageId_isset)
  {
    [encoder encodeObject: __messageId forKey: @"messageId"];
  }
  if (__body_isset)
  {
    [encoder encodeObject: __body forKey: @"body"];
  }
  if (__urgency_isset)
  {
    [encoder encodeInt: __urgency forKey: @"urgency"];
  }
  if (__timeMessageSent_isset)
  {
    [encoder encodeInt64: __timeMessageSent forKey: @"timeMessageSent"];
  }
  if (__timeMessageReceived_isset)
  {
    [encoder encodeInt64: __timeMessageReceived forKey: @"timeMessageReceived"];
  }
  if (__nameOfApplication_isset)
  {
    [encoder encodeObject: __nameOfApplication forKey: @"nameOfApplication"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __messageId_isset ? 2654435761 : 0;
  if (__messageId_isset)
  {
    hash = (hash * 31) ^ [__messageId hash];
  }
  hash = (hash * 31) ^ __body_isset ? 2654435761 : 0;
  if (__body_isset)
  {
    hash = (hash * 31) ^ [__body hash];
  }
  hash = (hash * 31) ^ __urgency_isset ? 2654435761 : 0;
  if (__urgency_isset)
  {
    hash = (hash * 31) ^ [@(__urgency) hash];
  }
  hash = (hash * 31) ^ __timeMessageSent_isset ? 2654435761 : 0;
  if (__timeMessageSent_isset)
  {
    hash = (hash * 31) ^ [@(__timeMessageSent) hash];
  }
  hash = (hash * 31) ^ __timeMessageReceived_isset ? 2654435761 : 0;
  if (__timeMessageReceived_isset)
  {
    hash = (hash * 31) ^ [@(__timeMessageReceived) hash];
  }
  hash = (hash * 31) ^ __nameOfApplication_isset ? 2654435761 : 0;
  if (__nameOfApplication_isset)
  {
    hash = (hash * 31) ^ [__nameOfApplication hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Banana_Message class]]) {
    return NO;
  }
  Banana_Message *other = (Banana_Message *)anObject;
  if ((__messageId_isset != other->__messageId_isset) ||
      (__messageId_isset && ((__messageId || other->__messageId) && ![__messageId isEqual:other->__messageId]))) {
    return NO;
  }
  if ((__body_isset != other->__body_isset) ||
      (__body_isset && ((__body || other->__body) && ![__body isEqual:other->__body]))) {
    return NO;
  }
  if ((__urgency_isset != other->__urgency_isset) ||
      (__urgency_isset && (__urgency != other->__urgency))) {
    return NO;
  }
  if ((__timeMessageSent_isset != other->__timeMessageSent_isset) ||
      (__timeMessageSent_isset && (__timeMessageSent != other->__timeMessageSent))) {
    return NO;
  }
  if ((__timeMessageReceived_isset != other->__timeMessageReceived_isset) ||
      (__timeMessageReceived_isset && (__timeMessageReceived != other->__timeMessageReceived))) {
    return NO;
  }
  if ((__nameOfApplication_isset != other->__nameOfApplication_isset) ||
      (__nameOfApplication_isset && ((__nameOfApplication || other->__nameOfApplication) && ![__nameOfApplication isEqual:other->__nameOfApplication]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__messageId release_stub];
  [__body release_stub];
  [__nameOfApplication release_stub];
  [super dealloc_stub];
}

- (NSString *) messageId {
  return [[__messageId retain_stub] autorelease_stub];
}

- (void) setMessageId: (NSString *) messageId {
  [messageId retain_stub];
  [__messageId release_stub];
  __messageId = messageId;
  __messageId_isset = YES;
}

- (BOOL) messageIdIsSet {
  return __messageId_isset;
}

- (void) unsetMessageId {
  [__messageId release_stub];
  __messageId = nil;
  __messageId_isset = NO;
}

- (NSString *) body {
  return [[__body retain_stub] autorelease_stub];
}

- (void) setBody: (NSString *) body {
  [body retain_stub];
  [__body release_stub];
  __body = body;
  __body_isset = YES;
}

- (BOOL) bodyIsSet {
  return __body_isset;
}

- (void) unsetBody {
  [__body release_stub];
  __body = nil;
  __body_isset = NO;
}

- (int) urgency {
  return __urgency;
}

- (void) setUrgency: (int) urgency {
  __urgency = urgency;
  __urgency_isset = YES;
}

- (BOOL) urgencyIsSet {
  return __urgency_isset;
}

- (void) unsetUrgency {
  __urgency_isset = NO;
}

- (int64_t) timeMessageSent {
  return __timeMessageSent;
}

- (void) setTimeMessageSent: (int64_t) timeMessageSent {
  __timeMessageSent = timeMessageSent;
  __timeMessageSent_isset = YES;
}

- (BOOL) timeMessageSentIsSet {
  return __timeMessageSent_isset;
}

- (void) unsetTimeMessageSent {
  __timeMessageSent_isset = NO;
}

- (int64_t) timeMessageReceived {
  return __timeMessageReceived;
}

- (void) setTimeMessageReceived: (int64_t) timeMessageReceived {
  __timeMessageReceived = timeMessageReceived;
  __timeMessageReceived_isset = YES;
}

- (BOOL) timeMessageReceivedIsSet {
  return __timeMessageReceived_isset;
}

- (void) unsetTimeMessageReceived {
  __timeMessageReceived_isset = NO;
}

- (NSString *) nameOfApplication {
  return [[__nameOfApplication retain_stub] autorelease_stub];
}

- (void) setNameOfApplication: (NSString *) nameOfApplication {
  [nameOfApplication retain_stub];
  [__nameOfApplication release_stub];
  __nameOfApplication = nameOfApplication;
  __nameOfApplication_isset = YES;
}

- (BOOL) nameOfApplicationIsSet {
  return __nameOfApplication_isset;
}

- (void) unsetNameOfApplication {
  [__nameOfApplication release_stub];
  __nameOfApplication = nil;
  __nameOfApplication_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessageId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBody: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setUrgency: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTimeMessageSent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTimeMessageReceived: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNameOfApplication: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Message"];
  if (__messageId_isset) {
    if (__messageId != nil) {
      [outProtocol writeFieldBeginWithName: @"messageId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __messageId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__body_isset) {
    if (__body != nil) {
      [outProtocol writeFieldBeginWithName: @"body" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __body];
      [outProtocol writeFieldEnd];
    }
  }
  if (__urgency_isset) {
    [outProtocol writeFieldBeginWithName: @"urgency" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __urgency];
    [outProtocol writeFieldEnd];
  }
  if (__timeMessageSent_isset) {
    [outProtocol writeFieldBeginWithName: @"timeMessageSent" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __timeMessageSent];
    [outProtocol writeFieldEnd];
  }
  if (__timeMessageReceived_isset) {
    [outProtocol writeFieldBeginWithName: @"timeMessageReceived" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __timeMessageReceived];
    [outProtocol writeFieldEnd];
  }
  if (__nameOfApplication_isset) {
    if (__nameOfApplication != nil) {
      [outProtocol writeFieldBeginWithName: @"nameOfApplication" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __nameOfApplication];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Banana_Message("];
  [ms appendString: @"messageId:"];
  [ms appendFormat: @"\"%@\"", __messageId];
  [ms appendString: @",body:"];
  [ms appendFormat: @"\"%@\"", __body];
  [ms appendString: @",urgency:"];
  [ms appendFormat: @"%i", __urgency];
  [ms appendString: @",timeMessageSent:"];
  [ms appendFormat: @"%qi", __timeMessageSent];
  [ms appendString: @",timeMessageReceived:"];
  [ms appendFormat: @"%qi", __timeMessageReceived];
  [ms appendString: @",nameOfApplication:"];
  [ms appendFormat: @"\"%@\"", __nameOfApplication];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Banana_TimePeriod

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUnit: (int) unit value: (Banana_int) value
{
  self = [super init];
  __unit = unit;
  __unit_isset = YES;
  __value = value;
  __value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"unit"])
  {
    __unit = [decoder decodeIntForKey: @"unit"];
    __unit_isset = YES;
  }
  if ([decoder containsValueForKey: @"value"])
  {
    __value = [decoder decodeInt32ForKey: @"value"];
    __value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__unit_isset)
  {
    [encoder encodeInt: __unit forKey: @"unit"];
  }
  if (__value_isset)
  {
    [encoder encodeInt32: __value forKey: @"value"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __unit_isset ? 2654435761 : 0;
  if (__unit_isset)
  {
    hash = (hash * 31) ^ [@(__unit) hash];
  }
  hash = (hash * 31) ^ __value_isset ? 2654435761 : 0;
  if (__value_isset)
  {
    hash = (hash * 31) ^ [@(__value) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Banana_TimePeriod class]]) {
    return NO;
  }
  Banana_TimePeriod *other = (Banana_TimePeriod *)anObject;
  if ((__unit_isset != other->__unit_isset) ||
      (__unit_isset && (__unit != other->__unit))) {
    return NO;
  }
  if ((__value_isset != other->__value_isset) ||
      (__value_isset && (__value != other->__value))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int) unit {
  return __unit;
}

- (void) setUnit: (int) unit {
  __unit = unit;
  __unit_isset = YES;
}

- (BOOL) unitIsSet {
  return __unit_isset;
}

- (void) unsetUnit {
  __unit_isset = NO;
}

- (int32_t) value {
  return __value;
}

- (void) setValue: (int32_t) value {
  __value = value;
  __value_isset = YES;
}

- (BOOL) valueIsSet {
  return __value_isset;
}

- (void) unsetValue {
  __value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setUnit: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimePeriod"];
  if (__unit_isset) {
    [outProtocol writeFieldBeginWithName: @"unit" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __unit];
    [outProtocol writeFieldEnd];
  }
  if (__value_isset) {
    [outProtocol writeFieldBeginWithName: @"value" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__unit_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'unit' is not set."];
  }
  if (!__value_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'value' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Banana_TimePeriod("];
  [ms appendString: @"unit:"];
  [ms appendFormat: @"%i", __unit];
  [ms appendString: @",value:"];
  [ms appendFormat: @"%i", __value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Banana_Dimension

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithWidth: (Banana_int) width height: (Banana_int) height
{
  self = [super init];
  __width = width;
  __width_isset = YES;
  __height = height;
  __height_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"width"])
  {
    __width = [decoder decodeInt32ForKey: @"width"];
    __width_isset = YES;
  }
  if ([decoder containsValueForKey: @"height"])
  {
    __height = [decoder decodeInt32ForKey: @"height"];
    __height_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__width_isset)
  {
    [encoder encodeInt32: __width forKey: @"width"];
  }
  if (__height_isset)
  {
    [encoder encodeInt32: __height forKey: @"height"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __width_isset ? 2654435761 : 0;
  if (__width_isset)
  {
    hash = (hash * 31) ^ [@(__width) hash];
  }
  hash = (hash * 31) ^ __height_isset ? 2654435761 : 0;
  if (__height_isset)
  {
    hash = (hash * 31) ^ [@(__height) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Banana_Dimension class]]) {
    return NO;
  }
  Banana_Dimension *other = (Banana_Dimension *)anObject;
  if ((__width_isset != other->__width_isset) ||
      (__width_isset && (__width != other->__width))) {
    return NO;
  }
  if ((__height_isset != other->__height_isset) ||
      (__height_isset && (__height != other->__height))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) width {
  return __width;
}

- (void) setWidth: (int32_t) width {
  __width = width;
  __width_isset = YES;
}

- (BOOL) widthIsSet {
  return __width_isset;
}

- (void) unsetWidth {
  __width_isset = NO;
}

- (int32_t) height {
  return __height;
}

- (void) setHeight: (int32_t) height {
  __height = height;
  __height_isset = YES;
}

- (BOOL) heightIsSet {
  return __height_isset;
}

- (void) unsetHeight {
  __height_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setWidth: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHeight: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Dimension"];
  if (__width_isset) {
    [outProtocol writeFieldBeginWithName: @"width" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __width];
    [outProtocol writeFieldEnd];
  }
  if (__height_isset) {
    [outProtocol writeFieldBeginWithName: @"height" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __height];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__width_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'width' is not set."];
  }
  if (!__height_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'height' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Banana_Dimension("];
  [ms appendString: @"width:"];
  [ms appendFormat: @"%i", __width];
  [ms appendString: @",height:"];
  [ms appendFormat: @"%i", __height];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Banana_Image

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithImageType: (int) imageType data: (NSData *) data dimension: (Banana_Dimension *) dimension
{
  self = [super init];
  __imageType = imageType;
  __imageType_isset = YES;
  __data = [data retain_stub];
  __data_isset = YES;
  __dimension = [dimension retain_stub];
  __dimension_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"imageType"])
  {
    __imageType = [decoder decodeIntForKey: @"imageType"];
    __imageType_isset = YES;
  }
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  if ([decoder containsValueForKey: @"dimension"])
  {
    __dimension = [[decoder decodeObjectForKey: @"dimension"] retain_stub];
    __dimension_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__imageType_isset)
  {
    [encoder encodeInt: __imageType forKey: @"imageType"];
  }
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
  if (__dimension_isset)
  {
    [encoder encodeObject: __dimension forKey: @"dimension"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __imageType_isset ? 2654435761 : 0;
  if (__imageType_isset)
  {
    hash = (hash * 31) ^ [@(__imageType) hash];
  }
  hash = (hash * 31) ^ __data_isset ? 2654435761 : 0;
  if (__data_isset)
  {
    hash = (hash * 31) ^ [__data hash];
  }
  hash = (hash * 31) ^ __dimension_isset ? 2654435761 : 0;
  if (__dimension_isset)
  {
    hash = (hash * 31) ^ [__dimension hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Banana_Image class]]) {
    return NO;
  }
  Banana_Image *other = (Banana_Image *)anObject;
  if ((__imageType_isset != other->__imageType_isset) ||
      (__imageType_isset && (__imageType != other->__imageType))) {
    return NO;
  }
  if ((__data_isset != other->__data_isset) ||
      (__data_isset && ((__data || other->__data) && ![__data isEqual:other->__data]))) {
    return NO;
  }
  if ((__dimension_isset != other->__dimension_isset) ||
      (__dimension_isset && ((__dimension || other->__dimension) && ![__dimension isEqual:other->__dimension]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__data release_stub];
  [__dimension release_stub];
  [super dealloc_stub];
}

- (int) imageType {
  return __imageType;
}

- (void) setImageType: (int) imageType {
  __imageType = imageType;
  __imageType_isset = YES;
}

- (BOOL) imageTypeIsSet {
  return __imageType_isset;
}

- (void) unsetImageType {
  __imageType_isset = NO;
}

- (NSData *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (NSData *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (Banana_Dimension *) dimension {
  return [[__dimension retain_stub] autorelease_stub];
}

- (void) setDimension: (Banana_Dimension *) dimension {
  [dimension retain_stub];
  [__dimension release_stub];
  __dimension = dimension;
  __dimension_isset = YES;
}

- (BOOL) dimensionIsSet {
  return __dimension_isset;
}

- (void) unsetDimension {
  [__dimension release_stub];
  __dimension = nil;
  __dimension_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setImageType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setData: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          Banana_Dimension *fieldValue = [[Banana_Dimension alloc] init];
          [fieldValue read: inProtocol];
          [self setDimension: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Image"];
  if (__imageType_isset) {
    [outProtocol writeFieldBeginWithName: @"imageType" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __imageType];
    [outProtocol writeFieldEnd];
  }
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_STRING fieldID: 2];
      [outProtocol writeBinary: __data];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dimension_isset) {
    if (__dimension != nil) {
      [outProtocol writeFieldBeginWithName: @"dimension" type: TType_STRUCT fieldID: 3];
      [__dimension write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Banana_Image("];
  [ms appendString: @"imageType:"];
  [ms appendFormat: @"%i", __imageType];
  [ms appendString: @",data:"];
  [ms appendFormat: @"\"%@\"", __data];
  [ms appendString: @",dimension:"];
  [ms appendFormat: @"%@", __dimension];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Banana_Human

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.roles = [[[NSMutableArray alloc] initWithCapacity:1] autorelease_stub];
  [self.roles addObject:[NSNumber numberWithInt: 1]];

#endif
  return self;
}

- (id) initWithEmail: (NSString *) email name: (NSString *) name username: (NSString *) username roles: (NSMutableArray *) roles
{
  self = [super init];
  __email = [email retain_stub];
  __email_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __username = [username retain_stub];
  __username_isset = YES;
  __roles = [roles retain_stub];
  __roles_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"username"])
  {
    __username = [[decoder decodeObjectForKey: @"username"] retain_stub];
    __username_isset = YES;
  }
  if ([decoder containsValueForKey: @"roles"])
  {
    __roles = [[decoder decodeObjectForKey: @"roles"] retain_stub];
    __roles_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__username_isset)
  {
    [encoder encodeObject: __username forKey: @"username"];
  }
  if (__roles_isset)
  {
    [encoder encodeObject: __roles forKey: @"roles"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __email_isset ? 2654435761 : 0;
  if (__email_isset)
  {
    hash = (hash * 31) ^ [__email hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __username_isset ? 2654435761 : 0;
  if (__username_isset)
  {
    hash = (hash * 31) ^ [__username hash];
  }
  hash = (hash * 31) ^ __roles_isset ? 2654435761 : 0;
  if (__roles_isset)
  {
    hash = (hash * 31) ^ [__roles hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Banana_Human class]]) {
    return NO;
  }
  Banana_Human *other = (Banana_Human *)anObject;
  if ((__email_isset != other->__email_isset) ||
      (__email_isset && ((__email || other->__email) && ![__email isEqual:other->__email]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__username_isset != other->__username_isset) ||
      (__username_isset && ((__username || other->__username) && ![__username isEqual:other->__username]))) {
    return NO;
  }
  if ((__roles_isset != other->__roles_isset) ||
      (__roles_isset && ((__roles || other->__roles) && ![__roles isEqual:other->__roles]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__email release_stub];
  [__name release_stub];
  [__username release_stub];
  [__roles release_stub];
  [super dealloc_stub];
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) username {
  return [[__username retain_stub] autorelease_stub];
}

- (void) setUsername: (NSString *) username {
  [username retain_stub];
  [__username release_stub];
  __username = username;
  __username_isset = YES;
}

- (BOOL) usernameIsSet {
  return __username_isset;
}

- (void) unsetUsername {
  [__username release_stub];
  __username = nil;
  __username_isset = NO;
}

- (NSMutableArray *) roles {
  return [[__roles retain_stub] autorelease_stub];
}

- (void) setRoles: (NSMutableArray *) roles {
  [roles retain_stub];
  [__roles release_stub];
  __roles = roles;
  __roles_isset = YES;
}

- (BOOL) rolesIsSet {
  return __roles_isset;
}

- (void) unsetRoles {
  [__roles release_stub];
  __roles = nil;
  __roles_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUsername: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            int _elem2 = [inProtocol readI32];
            [fieldValue addObject: [NSNumber numberWithInt: _elem2]];
          }
          [inProtocol readListEnd];
          [self setRoles: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Human"];
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__username_isset) {
    if (__username != nil) {
      [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __username];
      [outProtocol writeFieldEnd];
    }
  }
  if (__roles_isset) {
    if (__roles != nil) {
      [outProtocol writeFieldBeginWithName: @"roles" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_I32 size: [__roles count]];
        int idx4;
        for (idx4 = 0; idx4 < [__roles count]; idx4++)
        {
          [outProtocol writeI32: [[__roles objectAtIndex: idx4] intValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Banana_Human("];
  [ms appendString: @"email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",username:"];
  [ms appendFormat: @"\"%@\"", __username];
  [ms appendString: @",roles:"];
  [ms appendFormat: @"%@", __roles];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Banana_Application

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.subscribers = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithOwners: (NSMutableArray *) owners timeOfProvisioning: (Banana_timestamp) timeOfProvisioning name: (NSString *) name id: (NSString *) id totalMessagesSent: (Banana_long) totalMessagesSent icon: (Banana_Image *) icon programmingLanguage: (int) programmingLanguage subscribers: (NSMutableArray *) subscribers
{
  self = [super init];
  __owners = [owners retain_stub];
  __owners_isset = YES;
  __timeOfProvisioning = timeOfProvisioning;
  __timeOfProvisioning_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __id = [id retain_stub];
  __id_isset = YES;
  __totalMessagesSent = totalMessagesSent;
  __totalMessagesSent_isset = YES;
  __icon = [icon retain_stub];
  __icon_isset = YES;
  __programmingLanguage = programmingLanguage;
  __programmingLanguage_isset = YES;
  __subscribers = [subscribers retain_stub];
  __subscribers_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"owners"])
  {
    __owners = [[decoder decodeObjectForKey: @"owners"] retain_stub];
    __owners_isset = YES;
  }
  if ([decoder containsValueForKey: @"timeOfProvisioning"])
  {
    __timeOfProvisioning = [decoder decodeInt64ForKey: @"timeOfProvisioning"];
    __timeOfProvisioning_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalMessagesSent"])
  {
    __totalMessagesSent = [decoder decodeInt64ForKey: @"totalMessagesSent"];
    __totalMessagesSent_isset = YES;
  }
  if ([decoder containsValueForKey: @"icon"])
  {
    __icon = [[decoder decodeObjectForKey: @"icon"] retain_stub];
    __icon_isset = YES;
  }
  if ([decoder containsValueForKey: @"programmingLanguage"])
  {
    __programmingLanguage = [decoder decodeIntForKey: @"programmingLanguage"];
    __programmingLanguage_isset = YES;
  }
  if ([decoder containsValueForKey: @"subscribers"])
  {
    __subscribers = [[decoder decodeObjectForKey: @"subscribers"] retain_stub];
    __subscribers_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__owners_isset)
  {
    [encoder encodeObject: __owners forKey: @"owners"];
  }
  if (__timeOfProvisioning_isset)
  {
    [encoder encodeInt64: __timeOfProvisioning forKey: @"timeOfProvisioning"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__totalMessagesSent_isset)
  {
    [encoder encodeInt64: __totalMessagesSent forKey: @"totalMessagesSent"];
  }
  if (__icon_isset)
  {
    [encoder encodeObject: __icon forKey: @"icon"];
  }
  if (__programmingLanguage_isset)
  {
    [encoder encodeInt: __programmingLanguage forKey: @"programmingLanguage"];
  }
  if (__subscribers_isset)
  {
    [encoder encodeObject: __subscribers forKey: @"subscribers"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __owners_isset ? 2654435761 : 0;
  if (__owners_isset)
  {
    hash = (hash * 31) ^ [__owners hash];
  }
  hash = (hash * 31) ^ __timeOfProvisioning_isset ? 2654435761 : 0;
  if (__timeOfProvisioning_isset)
  {
    hash = (hash * 31) ^ [@(__timeOfProvisioning) hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [__id hash];
  }
  hash = (hash * 31) ^ __totalMessagesSent_isset ? 2654435761 : 0;
  if (__totalMessagesSent_isset)
  {
    hash = (hash * 31) ^ [@(__totalMessagesSent) hash];
  }
  hash = (hash * 31) ^ __icon_isset ? 2654435761 : 0;
  if (__icon_isset)
  {
    hash = (hash * 31) ^ [__icon hash];
  }
  hash = (hash * 31) ^ __programmingLanguage_isset ? 2654435761 : 0;
  if (__programmingLanguage_isset)
  {
    hash = (hash * 31) ^ [@(__programmingLanguage) hash];
  }
  hash = (hash * 31) ^ __subscribers_isset ? 2654435761 : 0;
  if (__subscribers_isset)
  {
    hash = (hash * 31) ^ [__subscribers hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Banana_Application class]]) {
    return NO;
  }
  Banana_Application *other = (Banana_Application *)anObject;
  if ((__owners_isset != other->__owners_isset) ||
      (__owners_isset && ((__owners || other->__owners) && ![__owners isEqual:other->__owners]))) {
    return NO;
  }
  if ((__timeOfProvisioning_isset != other->__timeOfProvisioning_isset) ||
      (__timeOfProvisioning_isset && (__timeOfProvisioning != other->__timeOfProvisioning))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && ((__id || other->__id) && ![__id isEqual:other->__id]))) {
    return NO;
  }
  if ((__totalMessagesSent_isset != other->__totalMessagesSent_isset) ||
      (__totalMessagesSent_isset && (__totalMessagesSent != other->__totalMessagesSent))) {
    return NO;
  }
  if ((__icon_isset != other->__icon_isset) ||
      (__icon_isset && ((__icon || other->__icon) && ![__icon isEqual:other->__icon]))) {
    return NO;
  }
  if ((__programmingLanguage_isset != other->__programmingLanguage_isset) ||
      (__programmingLanguage_isset && (__programmingLanguage != other->__programmingLanguage))) {
    return NO;
  }
  if ((__subscribers_isset != other->__subscribers_isset) ||
      (__subscribers_isset && ((__subscribers || other->__subscribers) && ![__subscribers isEqual:other->__subscribers]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__owners release_stub];
  [__name release_stub];
  [__id release_stub];
  [__icon release_stub];
  [__subscribers release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) owners {
  return [[__owners retain_stub] autorelease_stub];
}

- (void) setOwners: (NSMutableArray *) owners {
  [owners retain_stub];
  [__owners release_stub];
  __owners = owners;
  __owners_isset = YES;
}

- (BOOL) ownersIsSet {
  return __owners_isset;
}

- (void) unsetOwners {
  [__owners release_stub];
  __owners = nil;
  __owners_isset = NO;
}

- (int64_t) timeOfProvisioning {
  return __timeOfProvisioning;
}

- (void) setTimeOfProvisioning: (int64_t) timeOfProvisioning {
  __timeOfProvisioning = timeOfProvisioning;
  __timeOfProvisioning_isset = YES;
}

- (BOOL) timeOfProvisioningIsSet {
  return __timeOfProvisioning_isset;
}

- (void) unsetTimeOfProvisioning {
  __timeOfProvisioning_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (int64_t) totalMessagesSent {
  return __totalMessagesSent;
}

- (void) setTotalMessagesSent: (int64_t) totalMessagesSent {
  __totalMessagesSent = totalMessagesSent;
  __totalMessagesSent_isset = YES;
}

- (BOOL) totalMessagesSentIsSet {
  return __totalMessagesSent_isset;
}

- (void) unsetTotalMessagesSent {
  __totalMessagesSent_isset = NO;
}

- (Banana_Image *) icon {
  return [[__icon retain_stub] autorelease_stub];
}

- (void) setIcon: (Banana_Image *) icon {
  [icon retain_stub];
  [__icon release_stub];
  __icon = icon;
  __icon_isset = YES;
}

- (BOOL) iconIsSet {
  return __icon_isset;
}

- (void) unsetIcon {
  [__icon release_stub];
  __icon = nil;
  __icon_isset = NO;
}

- (int) programmingLanguage {
  return __programmingLanguage;
}

- (void) setProgrammingLanguage: (int) programmingLanguage {
  __programmingLanguage = programmingLanguage;
  __programmingLanguage_isset = YES;
}

- (BOOL) programmingLanguageIsSet {
  return __programmingLanguage_isset;
}

- (void) unsetProgrammingLanguage {
  __programmingLanguage_isset = NO;
}

- (NSMutableArray *) subscribers {
  return [[__subscribers retain_stub] autorelease_stub];
}

- (void) setSubscribers: (NSMutableArray *) subscribers {
  [subscribers retain_stub];
  [__subscribers release_stub];
  __subscribers = subscribers;
  __subscribers_isset = YES;
}

- (BOOL) subscribersIsSet {
  return __subscribers_isset;
}

- (void) unsetSubscribers {
  [__subscribers release_stub];
  __subscribers = nil;
  __subscribers_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            Banana_Human *_elem7 = [[Banana_Human alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release_stub];
          }
          [inProtocol readListEnd];
          [self setOwners: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTimeOfProvisioning: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTotalMessagesSent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRUCT) {
          Banana_Image *fieldValue = [[Banana_Image alloc] init];
          [fieldValue read: inProtocol];
          [self setIcon: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setProgrammingLanguage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_LIST) {
          int _size8;
          [inProtocol readListBeginReturningElementType: NULL size: &_size8];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size8];
          int _i9;
          for (_i9 = 0; _i9 < _size8; ++_i9)
          {
            Banana_Human *_elem10 = [[Banana_Human alloc] init];
            [_elem10 read: inProtocol];
            [fieldValue addObject: _elem10];
            [_elem10 release_stub];
          }
          [inProtocol readListEnd];
          [self setSubscribers: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Application"];
  if (__owners_isset) {
    if (__owners != nil) {
      [outProtocol writeFieldBeginWithName: @"owners" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__owners count]];
        int idx12;
        for (idx12 = 0; idx12 < [__owners count]; idx12++)
        {
          [[__owners objectAtIndex: idx12] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__timeOfProvisioning_isset) {
    [outProtocol writeFieldBeginWithName: @"timeOfProvisioning" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __timeOfProvisioning];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__totalMessagesSent_isset) {
    [outProtocol writeFieldBeginWithName: @"totalMessagesSent" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __totalMessagesSent];
    [outProtocol writeFieldEnd];
  }
  if (__icon_isset) {
    if (__icon != nil) {
      [outProtocol writeFieldBeginWithName: @"icon" type: TType_STRUCT fieldID: 6];
      [__icon write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__programmingLanguage_isset) {
    [outProtocol writeFieldBeginWithName: @"programmingLanguage" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __programmingLanguage];
    [outProtocol writeFieldEnd];
  }
  if (__subscribers_isset) {
    if (__subscribers != nil) {
      [outProtocol writeFieldBeginWithName: @"subscribers" type: TType_LIST fieldID: 8];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__subscribers count]];
        int idx14;
        for (idx14 = 0; idx14 < [__subscribers count]; idx14++)
        {
          [[__subscribers objectAtIndex: idx14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Banana_Application("];
  [ms appendString: @"owners:"];
  [ms appendFormat: @"%@", __owners];
  [ms appendString: @",timeOfProvisioning:"];
  [ms appendFormat: @"%qi", __timeOfProvisioning];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",totalMessagesSent:"];
  [ms appendFormat: @"%qi", __totalMessagesSent];
  [ms appendString: @",icon:"];
  [ms appendFormat: @"%@", __icon];
  [ms appendString: @",programmingLanguage:"];
  [ms appendFormat: @"%i", __programmingLanguage];
  [ms appendString: @",subscribers:"];
  [ms appendFormat: @"%@", __subscribers];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation Banana_BananaConstants
+ (void) initialize {
}
@end

