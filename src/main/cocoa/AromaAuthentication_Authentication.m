/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TProtocolFactory.h"
#import "TApplicationError.h"
#import "TProtocolError.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TBaseClient.h"

#import "Aroma_Aroma.h"

#import "AromaAuthentication_Authentication.h"

@implementation AromaAuthentication_ApplicationToken

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithTokenId: (NSString *) tokenId organization: (NSString *) organization timeOfExpiration: (AromaAuthentication_timestamp) timeOfExpiration applicationId: (AromaAuthentication_uuid) applicationId applicationName: (NSString *) applicationName status: (AromaAuthentication_TokenStatus) status
{
  self = [super init];
  if (self)  {
    _tokenId = tokenId;
    _tokenIdIsSet = YES;
    _organization = organization;
    _organizationIsSet = YES;
    _timeOfExpiration = timeOfExpiration;
    _timeOfExpirationIsSet = YES;
    _applicationId = applicationId;
    _applicationIdIsSet = YES;
    _applicationName = applicationName;
    _applicationNameIsSet = YES;
    _status = status;
    _statusIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"tokenId"])
    {
      _tokenId = [decoder decodeObjectForKey: @"tokenId"];
      _tokenIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"organization"])
    {
      _organization = [decoder decodeObjectForKey: @"organization"];
      _organizationIsSet = YES;
    }
    if ([decoder containsValueForKey: @"timeOfExpiration"])
    {
      _timeOfExpiration = [decoder decodeInt64ForKey: @"timeOfExpiration"];
      _timeOfExpirationIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationId"])
    {
      _applicationId = [decoder decodeObjectForKey: @"applicationId"];
      _applicationIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationName"])
    {
      _applicationName = [decoder decodeObjectForKey: @"applicationName"];
      _applicationNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"status"])
    {
      _status = [decoder decodeIntForKey: @"status"];
      _statusIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIdIsSet)
  {
    [encoder encodeObject: _tokenId forKey: @"tokenId"];
  }
  if (_organizationIsSet)
  {
    [encoder encodeObject: _organization forKey: @"organization"];
  }
  if (_timeOfExpirationIsSet)
  {
    [encoder encodeInt64: _timeOfExpiration forKey: @"timeOfExpiration"];
  }
  if (_applicationIdIsSet)
  {
    [encoder encodeObject: _applicationId forKey: @"applicationId"];
  }
  if (_applicationNameIsSet)
  {
    [encoder encodeObject: _applicationName forKey: @"applicationName"];
  }
  if (_statusIsSet)
  {
    [encoder encodeInt: _status forKey: @"status"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIdIsSet ? 2654435761 : 0;
  if (_tokenIdIsSet)
  {
    hash = (hash * 31) ^ [_tokenId hash];
  }
  hash = (hash * 31) ^ _organizationIsSet ? 2654435761 : 0;
  if (_organizationIsSet)
  {
    hash = (hash * 31) ^ [_organization hash];
  }
  hash = (hash * 31) ^ _timeOfExpirationIsSet ? 2654435761 : 0;
  if (_timeOfExpirationIsSet)
  {
    hash = (hash * 31) ^ [@(_timeOfExpiration) hash];
  }
  hash = (hash * 31) ^ _applicationIdIsSet ? 2654435761 : 0;
  if (_applicationIdIsSet)
  {
    hash = (hash * 31) ^ [_applicationId hash];
  }
  hash = (hash * 31) ^ _applicationNameIsSet ? 2654435761 : 0;
  if (_applicationNameIsSet)
  {
    hash = (hash * 31) ^ [_applicationName hash];
  }
  hash = (hash * 31) ^ _statusIsSet ? 2654435761 : 0;
  if (_statusIsSet)
  {
    hash = (hash * 31) ^ [@(_status) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaAuthentication_ApplicationToken class]]) {
    return NO;
  }
  AromaAuthentication_ApplicationToken *other = (AromaAuthentication_ApplicationToken *)anObject;
  if ((_tokenIdIsSet != other->_tokenIdIsSet) ||
      (_tokenIdIsSet && ((_tokenId || other->_tokenId) && ![_tokenId isEqual:other->_tokenId]))) {
    return NO;
  }
  if ((_organizationIsSet != other->_organizationIsSet) ||
      (_organizationIsSet && ((_organization || other->_organization) && ![_organization isEqual:other->_organization]))) {
    return NO;
  }
  if ((_timeOfExpirationIsSet != other->_timeOfExpirationIsSet) ||
      (_timeOfExpirationIsSet && (_timeOfExpiration != other->_timeOfExpiration))) {
    return NO;
  }
  if ((_applicationIdIsSet != other->_applicationIdIsSet) ||
      (_applicationIdIsSet && ((_applicationId || other->_applicationId) && ![_applicationId isEqual:other->_applicationId]))) {
    return NO;
  }
  if ((_applicationNameIsSet != other->_applicationNameIsSet) ||
      (_applicationNameIsSet && ((_applicationName || other->_applicationName) && ![_applicationName isEqual:other->_applicationName]))) {
    return NO;
  }
  if ((_statusIsSet != other->_statusIsSet) ||
      (_statusIsSet && (_status != other->_status))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaAuthentication_ApplicationToken * val = [AromaAuthentication_ApplicationToken new];
  if (_tokenIdIsSet)
  {
    val.tokenId = [self.tokenId copy];
  }
  if (_organizationIsSet)
  {
    val.organization = [self.organization copy];
  }
  if (_timeOfExpirationIsSet)
  {
    val.timeOfExpiration = self.timeOfExpiration;
  }
  if (_applicationIdIsSet)
  {
    val.applicationId = [self.applicationId copy];
  }
  if (_applicationNameIsSet)
  {
    val.applicationName = [self.applicationName copy];
  }
  if (_statusIsSet)
  {
    val.status = self.status;
  }
  return val;
}

- (void) setTokenId: (NSString *) tokenId {
  _tokenId = tokenId;
  _tokenIdIsSet = YES;
}

- (void) unsetTokenId {
  _tokenId = nil;
  _tokenIdIsSet = NO;
}

- (void) setOrganization: (NSString *) organization {
  _organization = organization;
  _organizationIsSet = YES;
}

- (void) unsetOrganization {
  _organization = nil;
  _organizationIsSet = NO;
}

- (void) setTimeOfExpiration: (SInt64) timeOfExpiration {
  _timeOfExpiration = timeOfExpiration;
  _timeOfExpirationIsSet = YES;
}

- (void) unsetTimeOfExpiration {
  _timeOfExpirationIsSet = NO;
}

- (void) setApplicationId: (NSString *) applicationId {
  _applicationId = applicationId;
  _applicationIdIsSet = YES;
}

- (void) unsetApplicationId {
  _applicationId = nil;
  _applicationIdIsSet = NO;
}

- (void) setApplicationName: (NSString *) applicationName {
  _applicationName = applicationName;
  _applicationNameIsSet = YES;
}

- (void) unsetApplicationName {
  _applicationName = nil;
  _applicationNameIsSet = NO;
}

- (void) setStatus: (AromaAuthentication_TokenStatus) status {
  _status = status;
  _statusIsSet = YES;
}

- (void) unsetStatus {
  _statusIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.tokenId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.organization = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.timeOfExpiration = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.applicationId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.applicationName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeI32) {
          AromaAuthentication_TokenStatus fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.status = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ApplicationToken" error: __thriftError]) return NO;
  if (_tokenIdIsSet) {
    if (_tokenId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"tokenId" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _tokenId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_organizationIsSet) {
    if (_organization != nil) {
      if (![outProtocol writeFieldBeginWithName: @"organization" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _organization error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_timeOfExpirationIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"timeOfExpiration" type: TTypeI64 fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _timeOfExpiration error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_applicationIdIsSet) {
    if (_applicationId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationId" type: TTypeSTRING fieldID: 4 error: __thriftError]) return NO;
      if (![outProtocol writeString: _applicationId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationNameIsSet) {
    if (_applicationName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationName" type: TTypeSTRING fieldID: 5 error: __thriftError]) return NO;
      if (![outProtocol writeString: _applicationName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_statusIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"status" type: TTypeI32 fieldID: 6 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _status error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaAuthentication_ApplicationToken("];
  [ms appendString: @"tokenId:"];
  [ms appendFormat: @"\"%@\"", _tokenId];
  [ms appendString: @",organization:"];
  [ms appendFormat: @"\"%@\"", _organization];
  [ms appendString: @",timeOfExpiration:"];
  [ms appendFormat: @"%qi", _timeOfExpiration];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", _applicationId];
  [ms appendString: @",applicationName:"];
  [ms appendFormat: @"\"%@\"", _applicationName];
  [ms appendString: @",status:"];
  [ms appendFormat: @"%i", (int)_status];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaAuthentication_UserToken

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.isOauthToken = NO;

  }
  return self;
}

- (instancetype) initWithTokenId: (NSString *) tokenId timeOfExpiration: (AromaAuthentication_timestamp) timeOfExpiration organization: (NSString *) organization isOauthToken: (BOOL) isOauthToken oauthProvider: (NSString *) oauthProvider userId: (AromaAuthentication_uuid) userId status: (AromaAuthentication_TokenStatus) status
{
  self = [super init];
  if (self)  {
    _tokenId = tokenId;
    _tokenIdIsSet = YES;
    _timeOfExpiration = timeOfExpiration;
    _timeOfExpirationIsSet = YES;
    _organization = organization;
    _organizationIsSet = YES;
    _isOauthToken = isOauthToken;
    _isOauthTokenIsSet = YES;
    _oauthProvider = oauthProvider;
    _oauthProviderIsSet = YES;
    _userId = userId;
    _userIdIsSet = YES;
    _status = status;
    _statusIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"tokenId"])
    {
      _tokenId = [decoder decodeObjectForKey: @"tokenId"];
      _tokenIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"timeOfExpiration"])
    {
      _timeOfExpiration = [decoder decodeInt64ForKey: @"timeOfExpiration"];
      _timeOfExpirationIsSet = YES;
    }
    if ([decoder containsValueForKey: @"organization"])
    {
      _organization = [decoder decodeObjectForKey: @"organization"];
      _organizationIsSet = YES;
    }
    if ([decoder containsValueForKey: @"isOauthToken"])
    {
      _isOauthToken = [decoder decodeBoolForKey: @"isOauthToken"];
      _isOauthTokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"oauthProvider"])
    {
      _oauthProvider = [decoder decodeObjectForKey: @"oauthProvider"];
      _oauthProviderIsSet = YES;
    }
    if ([decoder containsValueForKey: @"userId"])
    {
      _userId = [decoder decodeObjectForKey: @"userId"];
      _userIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"status"])
    {
      _status = [decoder decodeIntForKey: @"status"];
      _statusIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIdIsSet)
  {
    [encoder encodeObject: _tokenId forKey: @"tokenId"];
  }
  if (_timeOfExpirationIsSet)
  {
    [encoder encodeInt64: _timeOfExpiration forKey: @"timeOfExpiration"];
  }
  if (_organizationIsSet)
  {
    [encoder encodeObject: _organization forKey: @"organization"];
  }
  if (_isOauthTokenIsSet)
  {
    [encoder encodeBool: _isOauthToken forKey: @"isOauthToken"];
  }
  if (_oauthProviderIsSet)
  {
    [encoder encodeObject: _oauthProvider forKey: @"oauthProvider"];
  }
  if (_userIdIsSet)
  {
    [encoder encodeObject: _userId forKey: @"userId"];
  }
  if (_statusIsSet)
  {
    [encoder encodeInt: _status forKey: @"status"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIdIsSet ? 2654435761 : 0;
  if (_tokenIdIsSet)
  {
    hash = (hash * 31) ^ [_tokenId hash];
  }
  hash = (hash * 31) ^ _timeOfExpirationIsSet ? 2654435761 : 0;
  if (_timeOfExpirationIsSet)
  {
    hash = (hash * 31) ^ [@(_timeOfExpiration) hash];
  }
  hash = (hash * 31) ^ _organizationIsSet ? 2654435761 : 0;
  if (_organizationIsSet)
  {
    hash = (hash * 31) ^ [_organization hash];
  }
  hash = (hash * 31) ^ _isOauthTokenIsSet ? 2654435761 : 0;
  if (_isOauthTokenIsSet)
  {
    hash = (hash * 31) ^ [@(_isOauthToken) hash];
  }
  hash = (hash * 31) ^ _oauthProviderIsSet ? 2654435761 : 0;
  if (_oauthProviderIsSet)
  {
    hash = (hash * 31) ^ [_oauthProvider hash];
  }
  hash = (hash * 31) ^ _userIdIsSet ? 2654435761 : 0;
  if (_userIdIsSet)
  {
    hash = (hash * 31) ^ [_userId hash];
  }
  hash = (hash * 31) ^ _statusIsSet ? 2654435761 : 0;
  if (_statusIsSet)
  {
    hash = (hash * 31) ^ [@(_status) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaAuthentication_UserToken class]]) {
    return NO;
  }
  AromaAuthentication_UserToken *other = (AromaAuthentication_UserToken *)anObject;
  if ((_tokenIdIsSet != other->_tokenIdIsSet) ||
      (_tokenIdIsSet && ((_tokenId || other->_tokenId) && ![_tokenId isEqual:other->_tokenId]))) {
    return NO;
  }
  if ((_timeOfExpirationIsSet != other->_timeOfExpirationIsSet) ||
      (_timeOfExpirationIsSet && (_timeOfExpiration != other->_timeOfExpiration))) {
    return NO;
  }
  if ((_organizationIsSet != other->_organizationIsSet) ||
      (_organizationIsSet && ((_organization || other->_organization) && ![_organization isEqual:other->_organization]))) {
    return NO;
  }
  if ((_isOauthTokenIsSet != other->_isOauthTokenIsSet) ||
      (_isOauthTokenIsSet && (_isOauthToken != other->_isOauthToken))) {
    return NO;
  }
  if ((_oauthProviderIsSet != other->_oauthProviderIsSet) ||
      (_oauthProviderIsSet && ((_oauthProvider || other->_oauthProvider) && ![_oauthProvider isEqual:other->_oauthProvider]))) {
    return NO;
  }
  if ((_userIdIsSet != other->_userIdIsSet) ||
      (_userIdIsSet && ((_userId || other->_userId) && ![_userId isEqual:other->_userId]))) {
    return NO;
  }
  if ((_statusIsSet != other->_statusIsSet) ||
      (_statusIsSet && (_status != other->_status))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaAuthentication_UserToken * val = [AromaAuthentication_UserToken new];
  if (_tokenIdIsSet)
  {
    val.tokenId = [self.tokenId copy];
  }
  if (_timeOfExpirationIsSet)
  {
    val.timeOfExpiration = self.timeOfExpiration;
  }
  if (_organizationIsSet)
  {
    val.organization = [self.organization copy];
  }
  if (_isOauthTokenIsSet)
  {
    val.isOauthToken = self.isOauthToken;
  }
  if (_oauthProviderIsSet)
  {
    val.oauthProvider = [self.oauthProvider copy];
  }
  if (_userIdIsSet)
  {
    val.userId = [self.userId copy];
  }
  if (_statusIsSet)
  {
    val.status = self.status;
  }
  return val;
}

- (void) setTokenId: (NSString *) tokenId {
  _tokenId = tokenId;
  _tokenIdIsSet = YES;
}

- (void) unsetTokenId {
  _tokenId = nil;
  _tokenIdIsSet = NO;
}

- (void) setTimeOfExpiration: (SInt64) timeOfExpiration {
  _timeOfExpiration = timeOfExpiration;
  _timeOfExpirationIsSet = YES;
}

- (void) unsetTimeOfExpiration {
  _timeOfExpirationIsSet = NO;
}

- (void) setOrganization: (NSString *) organization {
  _organization = organization;
  _organizationIsSet = YES;
}

- (void) unsetOrganization {
  _organization = nil;
  _organizationIsSet = NO;
}

- (void) setIsOauthToken: (BOOL) isOauthToken {
  _isOauthToken = isOauthToken;
  _isOauthTokenIsSet = YES;
}

- (void) unsetIsOauthToken {
  _isOauthTokenIsSet = NO;
}

- (void) setOauthProvider: (NSString *) oauthProvider {
  _oauthProvider = oauthProvider;
  _oauthProviderIsSet = YES;
}

- (void) unsetOauthProvider {
  _oauthProvider = nil;
  _oauthProviderIsSet = NO;
}

- (void) setUserId: (NSString *) userId {
  _userId = userId;
  _userIdIsSet = YES;
}

- (void) unsetUserId {
  _userId = nil;
  _userIdIsSet = NO;
}

- (void) setStatus: (AromaAuthentication_TokenStatus) status {
  _status = status;
  _statusIsSet = YES;
}

- (void) unsetStatus {
  _statusIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.tokenId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.timeOfExpiration = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.organization = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeBOOL) {
          BOOL fieldValue;
          if (![inProtocol readBool:&fieldValue error: __thriftError]) return NO;
          self.isOauthToken = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.oauthProvider = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.userId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 7:
        if (fieldType == TTypeI32) {
          AromaAuthentication_TokenStatus fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.status = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserToken" error: __thriftError]) return NO;
  if (_tokenIdIsSet) {
    if (_tokenId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"tokenId" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _tokenId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_timeOfExpirationIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"timeOfExpiration" type: TTypeI64 fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _timeOfExpiration error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_organizationIsSet) {
    if (_organization != nil) {
      if (![outProtocol writeFieldBeginWithName: @"organization" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _organization error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_isOauthTokenIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"isOauthToken" type: TTypeBOOL fieldID: 4 error: __thriftError]) return NO;
    if (![outProtocol writeBool: _isOauthToken error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_oauthProviderIsSet) {
    if (_oauthProvider != nil) {
      if (![outProtocol writeFieldBeginWithName: @"oauthProvider" type: TTypeSTRING fieldID: 5 error: __thriftError]) return NO;
      if (![outProtocol writeString: _oauthProvider error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_userIdIsSet) {
    if (_userId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRING fieldID: 6 error: __thriftError]) return NO;
      if (![outProtocol writeString: _userId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_statusIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"status" type: TTypeI32 fieldID: 7 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _status error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaAuthentication_UserToken("];
  [ms appendString: @"tokenId:"];
  [ms appendFormat: @"\"%@\"", _tokenId];
  [ms appendString: @",timeOfExpiration:"];
  [ms appendFormat: @"%qi", _timeOfExpiration];
  [ms appendString: @",organization:"];
  [ms appendFormat: @"\"%@\"", _organization];
  [ms appendString: @",isOauthToken:"];
  [ms appendFormat: @"%i", _isOauthToken];
  [ms appendString: @",oauthProvider:"];
  [ms appendFormat: @"\"%@\"", _oauthProvider];
  [ms appendString: @",userId:"];
  [ms appendFormat: @"\"%@\"", _userId];
  [ms appendString: @",status:"];
  [ms appendFormat: @"%i", (int)_status];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaAuthentication_GithubToken

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithUsername: (NSString *) username email: (NSString *) email oauthToken: (NSString *) oauthToken
{
  self = [super init];
  if (self)  {
    _username = username;
    _usernameIsSet = YES;
    _email = email;
    _emailIsSet = YES;
    _oauthToken = oauthToken;
    _oauthTokenIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"username"])
    {
      _username = [decoder decodeObjectForKey: @"username"];
      _usernameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"email"])
    {
      _email = [decoder decodeObjectForKey: @"email"];
      _emailIsSet = YES;
    }
    if ([decoder containsValueForKey: @"oauthToken"])
    {
      _oauthToken = [decoder decodeObjectForKey: @"oauthToken"];
      _oauthTokenIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_usernameIsSet)
  {
    [encoder encodeObject: _username forKey: @"username"];
  }
  if (_emailIsSet)
  {
    [encoder encodeObject: _email forKey: @"email"];
  }
  if (_oauthTokenIsSet)
  {
    [encoder encodeObject: _oauthToken forKey: @"oauthToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _usernameIsSet ? 2654435761 : 0;
  if (_usernameIsSet)
  {
    hash = (hash * 31) ^ [_username hash];
  }
  hash = (hash * 31) ^ _emailIsSet ? 2654435761 : 0;
  if (_emailIsSet)
  {
    hash = (hash * 31) ^ [_email hash];
  }
  hash = (hash * 31) ^ _oauthTokenIsSet ? 2654435761 : 0;
  if (_oauthTokenIsSet)
  {
    hash = (hash * 31) ^ [_oauthToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaAuthentication_GithubToken class]]) {
    return NO;
  }
  AromaAuthentication_GithubToken *other = (AromaAuthentication_GithubToken *)anObject;
  if ((_usernameIsSet != other->_usernameIsSet) ||
      (_usernameIsSet && ((_username || other->_username) && ![_username isEqual:other->_username]))) {
    return NO;
  }
  if ((_emailIsSet != other->_emailIsSet) ||
      (_emailIsSet && ((_email || other->_email) && ![_email isEqual:other->_email]))) {
    return NO;
  }
  if ((_oauthTokenIsSet != other->_oauthTokenIsSet) ||
      (_oauthTokenIsSet && ((_oauthToken || other->_oauthToken) && ![_oauthToken isEqual:other->_oauthToken]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaAuthentication_GithubToken * val = [AromaAuthentication_GithubToken new];
  if (_usernameIsSet)
  {
    val.username = [self.username copy];
  }
  if (_emailIsSet)
  {
    val.email = [self.email copy];
  }
  if (_oauthTokenIsSet)
  {
    val.oauthToken = [self.oauthToken copy];
  }
  return val;
}

- (void) setUsername: (NSString *) username {
  _username = username;
  _usernameIsSet = YES;
}

- (void) unsetUsername {
  _username = nil;
  _usernameIsSet = NO;
}

- (void) setEmail: (NSString *) email {
  _email = email;
  _emailIsSet = YES;
}

- (void) unsetEmail {
  _email = nil;
  _emailIsSet = NO;
}

- (void) setOauthToken: (NSString *) oauthToken {
  _oauthToken = oauthToken;
  _oauthTokenIsSet = YES;
}

- (void) unsetOauthToken {
  _oauthToken = nil;
  _oauthTokenIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.username = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.email = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.oauthToken = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GithubToken" error: __thriftError]) return NO;
  if (_usernameIsSet) {
    if (_username != nil) {
      if (![outProtocol writeFieldBeginWithName: @"username" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _username error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_emailIsSet) {
    if (_email != nil) {
      if (![outProtocol writeFieldBeginWithName: @"email" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _email error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_oauthTokenIsSet) {
    if (_oauthToken != nil) {
      if (![outProtocol writeFieldBeginWithName: @"oauthToken" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _oauthToken error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_oauthTokenIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"oauthToken"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaAuthentication_GithubToken("];
  [ms appendString: @"username:"];
  [ms appendFormat: @"\"%@\"", _username];
  [ms appendString: @",email:"];
  [ms appendFormat: @"\"%@\"", _email];
  [ms appendString: @",oauthToken:"];
  [ms appendFormat: @"\"%@\"", _oauthToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaAuthentication_Password

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithEncryptedPassword: (NSString *) encryptedPassword
{
  self = [super init];
  if (self)  {
    _encryptedPassword = encryptedPassword;
    _encryptedPasswordIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"encryptedPassword"])
    {
      _encryptedPassword = [decoder decodeObjectForKey: @"encryptedPassword"];
      _encryptedPasswordIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_encryptedPasswordIsSet)
  {
    [encoder encodeObject: _encryptedPassword forKey: @"encryptedPassword"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _encryptedPasswordIsSet ? 2654435761 : 0;
  if (_encryptedPasswordIsSet)
  {
    hash = (hash * 31) ^ [_encryptedPassword hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaAuthentication_Password class]]) {
    return NO;
  }
  AromaAuthentication_Password *other = (AromaAuthentication_Password *)anObject;
  if ((_encryptedPasswordIsSet != other->_encryptedPasswordIsSet) ||
      (_encryptedPasswordIsSet && ((_encryptedPassword || other->_encryptedPassword) && ![_encryptedPassword isEqual:other->_encryptedPassword]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaAuthentication_Password * val = [AromaAuthentication_Password new];
  if (_encryptedPasswordIsSet)
  {
    val.encryptedPassword = [self.encryptedPassword copy];
  }
  return val;
}

- (void) setEncryptedPassword: (NSString *) encryptedPassword {
  _encryptedPassword = encryptedPassword;
  _encryptedPasswordIsSet = YES;
}

- (void) unsetEncryptedPassword {
  _encryptedPassword = nil;
  _encryptedPasswordIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.encryptedPassword = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Password" error: __thriftError]) return NO;
  if (_encryptedPasswordIsSet) {
    if (_encryptedPassword != nil) {
      if (![outProtocol writeFieldBeginWithName: @"encryptedPassword" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _encryptedPassword error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaAuthentication_Password("];
  [ms appendString: @"encryptedPassword:"];
  [ms appendFormat: @"\"%@\"", _encryptedPassword];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaAuthentication_AromaAccount

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithEmail: (NSString *) email password: (AromaAuthentication_Password *) password name: (NSString *) name profileImage: (Aroma_Image *) profileImage role: (AromaAuthentication_Role) role
{
  self = [super init];
  if (self)  {
    _email = email;
    _emailIsSet = YES;
    _password = password;
    _passwordIsSet = YES;
    _name = name;
    _nameIsSet = YES;
    _profileImage = profileImage;
    _profileImageIsSet = YES;
    _role = role;
    _roleIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"email"])
    {
      _email = [decoder decodeObjectForKey: @"email"];
      _emailIsSet = YES;
    }
    if ([decoder containsValueForKey: @"password"])
    {
      _password = [decoder decodeObjectForKey: @"password"];
      _passwordIsSet = YES;
    }
    if ([decoder containsValueForKey: @"name"])
    {
      _name = [decoder decodeObjectForKey: @"name"];
      _nameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"profileImage"])
    {
      _profileImage = [decoder decodeObjectForKey: @"profileImage"];
      _profileImageIsSet = YES;
    }
    if ([decoder containsValueForKey: @"role"])
    {
      _role = [decoder decodeIntForKey: @"role"];
      _roleIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_emailIsSet)
  {
    [encoder encodeObject: _email forKey: @"email"];
  }
  if (_passwordIsSet)
  {
    [encoder encodeObject: _password forKey: @"password"];
  }
  if (_nameIsSet)
  {
    [encoder encodeObject: _name forKey: @"name"];
  }
  if (_profileImageIsSet)
  {
    [encoder encodeObject: _profileImage forKey: @"profileImage"];
  }
  if (_roleIsSet)
  {
    [encoder encodeInt: _role forKey: @"role"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _emailIsSet ? 2654435761 : 0;
  if (_emailIsSet)
  {
    hash = (hash * 31) ^ [_email hash];
  }
  hash = (hash * 31) ^ _passwordIsSet ? 2654435761 : 0;
  if (_passwordIsSet)
  {
    hash = (hash * 31) ^ [_password hash];
  }
  hash = (hash * 31) ^ _nameIsSet ? 2654435761 : 0;
  if (_nameIsSet)
  {
    hash = (hash * 31) ^ [_name hash];
  }
  hash = (hash * 31) ^ _profileImageIsSet ? 2654435761 : 0;
  if (_profileImageIsSet)
  {
    hash = (hash * 31) ^ [_profileImage hash];
  }
  hash = (hash * 31) ^ _roleIsSet ? 2654435761 : 0;
  if (_roleIsSet)
  {
    hash = (hash * 31) ^ [@(_role) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaAuthentication_AromaAccount class]]) {
    return NO;
  }
  AromaAuthentication_AromaAccount *other = (AromaAuthentication_AromaAccount *)anObject;
  if ((_emailIsSet != other->_emailIsSet) ||
      (_emailIsSet && ((_email || other->_email) && ![_email isEqual:other->_email]))) {
    return NO;
  }
  if ((_passwordIsSet != other->_passwordIsSet) ||
      (_passwordIsSet && ((_password || other->_password) && ![_password isEqual:other->_password]))) {
    return NO;
  }
  if ((_nameIsSet != other->_nameIsSet) ||
      (_nameIsSet && ((_name || other->_name) && ![_name isEqual:other->_name]))) {
    return NO;
  }
  if ((_profileImageIsSet != other->_profileImageIsSet) ||
      (_profileImageIsSet && ((_profileImage || other->_profileImage) && ![_profileImage isEqual:other->_profileImage]))) {
    return NO;
  }
  if ((_roleIsSet != other->_roleIsSet) ||
      (_roleIsSet && (_role != other->_role))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaAuthentication_AromaAccount * val = [AromaAuthentication_AromaAccount new];
  if (_emailIsSet)
  {
    val.email = [self.email copy];
  }
  if (_passwordIsSet)
  {
    val.password = [self.password copy];
  }
  if (_nameIsSet)
  {
    val.name = [self.name copy];
  }
  if (_profileImageIsSet)
  {
    val.profileImage = [self.profileImage copy];
  }
  if (_roleIsSet)
  {
    val.role = self.role;
  }
  return val;
}

- (void) setEmail: (NSString *) email {
  _email = email;
  _emailIsSet = YES;
}

- (void) unsetEmail {
  _email = nil;
  _emailIsSet = NO;
}

- (void) setPassword: (AromaAuthentication_Password *) password {
  _password = password;
  _passwordIsSet = YES;
}

- (void) unsetPassword {
  _password = nil;
  _passwordIsSet = NO;
}

- (void) setName: (NSString *) name {
  _name = name;
  _nameIsSet = YES;
}

- (void) unsetName {
  _name = nil;
  _nameIsSet = NO;
}

- (void) setProfileImage: (Aroma_Image *) profileImage {
  _profileImage = profileImage;
  _profileImageIsSet = YES;
}

- (void) unsetProfileImage {
  _profileImage = nil;
  _profileImageIsSet = NO;
}

- (void) setRole: (AromaAuthentication_Role) role {
  _role = role;
  _roleIsSet = YES;
}

- (void) unsetRole {
  _roleIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.email = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_Password *fieldValue = [[AromaAuthentication_Password alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.password = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.name = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          Aroma_Image *fieldValue = [[Aroma_Image alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.profileImage = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeI32) {
          AromaAuthentication_Role fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.role = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaAccount" error: __thriftError]) return NO;
  if (_emailIsSet) {
    if (_email != nil) {
      if (![outProtocol writeFieldBeginWithName: @"email" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _email error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_passwordIsSet) {
    if (_password != nil) {
      if (![outProtocol writeFieldBeginWithName: @"password" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_password write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_nameIsSet) {
    if (_name != nil) {
      if (![outProtocol writeFieldBeginWithName: @"name" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _name error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_profileImageIsSet) {
    if (_profileImage != nil) {
      if (![outProtocol writeFieldBeginWithName: @"profileImage" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_profileImage write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_roleIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"role" type: TTypeI32 fieldID: 5 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _role error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaAuthentication_AromaAccount("];
  [ms appendString: @"email:"];
  [ms appendFormat: @"\"%@\"", _email];
  [ms appendString: @",password:"];
  [ms appendFormat: @"%@", _password];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", _name];
  [ms appendString: @",profileImage:"];
  [ms appendFormat: @"%@", _profileImage];
  [ms appendString: @",role:"];
  [ms appendFormat: @"%i", (int)_role];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaAuthentication_Credentials

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithGithubToken: (AromaAuthentication_GithubToken *) githubToken aromaPassword: (AromaAuthentication_Password *) aromaPassword
{
  self = [super init];
  if (self)  {
    _githubToken = githubToken;
    _githubTokenIsSet = YES;
    _aromaPassword = aromaPassword;
    _aromaPasswordIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"githubToken"])
    {
      _githubToken = [decoder decodeObjectForKey: @"githubToken"];
      _githubTokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"aromaPassword"])
    {
      _aromaPassword = [decoder decodeObjectForKey: @"aromaPassword"];
      _aromaPasswordIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_githubTokenIsSet)
  {
    [encoder encodeObject: _githubToken forKey: @"githubToken"];
  }
  if (_aromaPasswordIsSet)
  {
    [encoder encodeObject: _aromaPassword forKey: @"aromaPassword"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _githubTokenIsSet ? 2654435761 : 0;
  if (_githubTokenIsSet)
  {
    hash = (hash * 31) ^ [_githubToken hash];
  }
  hash = (hash * 31) ^ _aromaPasswordIsSet ? 2654435761 : 0;
  if (_aromaPasswordIsSet)
  {
    hash = (hash * 31) ^ [_aromaPassword hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaAuthentication_Credentials class]]) {
    return NO;
  }
  AromaAuthentication_Credentials *other = (AromaAuthentication_Credentials *)anObject;
  if ((_githubTokenIsSet != other->_githubTokenIsSet) ||
      (_githubTokenIsSet && ((_githubToken || other->_githubToken) && ![_githubToken isEqual:other->_githubToken]))) {
    return NO;
  }
  if ((_aromaPasswordIsSet != other->_aromaPasswordIsSet) ||
      (_aromaPasswordIsSet && ((_aromaPassword || other->_aromaPassword) && ![_aromaPassword isEqual:other->_aromaPassword]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaAuthentication_Credentials * val = [AromaAuthentication_Credentials new];
  if (_githubTokenIsSet)
  {
    val.githubToken = [self.githubToken copy];
  }
  if (_aromaPasswordIsSet)
  {
    val.aromaPassword = [self.aromaPassword copy];
  }
  return val;
}

- (void) setGithubToken: (AromaAuthentication_GithubToken *) githubToken {
  _githubToken = githubToken;
  _githubTokenIsSet = YES;
}

- (void) unsetGithubToken {
  _githubToken = nil;
  _githubTokenIsSet = NO;
}

- (void) setAromaPassword: (AromaAuthentication_Password *) aromaPassword {
  _aromaPassword = aromaPassword;
  _aromaPasswordIsSet = YES;
}

- (void) unsetAromaPassword {
  _aromaPassword = nil;
  _aromaPasswordIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_GithubToken *fieldValue = [[AromaAuthentication_GithubToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.githubToken = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_Password *fieldValue = [[AromaAuthentication_Password alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.aromaPassword = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Credentials" error: __thriftError]) return NO;
  if (_githubTokenIsSet) {
    if (_githubToken != nil) {
      if (![outProtocol writeFieldBeginWithName: @"githubToken" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_githubToken write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_aromaPasswordIsSet) {
    if (_aromaPassword != nil) {
      if (![outProtocol writeFieldBeginWithName: @"aromaPassword" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_aromaPassword write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaAuthentication_Credentials("];
  [ms appendString: @"githubToken:"];
  [ms appendFormat: @"%@", _githubToken];
  [ms appendString: @",aromaPassword:"];
  [ms appendFormat: @"%@", _aromaPassword];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaAuthentication_AuthenticationToken

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithTokenId: (NSString *) tokenId ownerId: (AromaAuthentication_uuid) ownerId timeOfCreation: (AromaAuthentication_timestamp) timeOfCreation timeOfExpiration: (AromaAuthentication_timestamp) timeOfExpiration tokenType: (AromaAuthentication_TokenType) tokenType organizationId: (AromaAuthentication_uuid) organizationId ownerName: (NSString *) ownerName organizationName: (NSString *) organizationName status: (AromaAuthentication_TokenStatus) status
{
  self = [super init];
  if (self)  {
    _tokenId = tokenId;
    _tokenIdIsSet = YES;
    _ownerId = ownerId;
    _ownerIdIsSet = YES;
    _timeOfCreation = timeOfCreation;
    _timeOfCreationIsSet = YES;
    _timeOfExpiration = timeOfExpiration;
    _timeOfExpirationIsSet = YES;
    _tokenType = tokenType;
    _tokenTypeIsSet = YES;
    _organizationId = organizationId;
    _organizationIdIsSet = YES;
    _ownerName = ownerName;
    _ownerNameIsSet = YES;
    _organizationName = organizationName;
    _organizationNameIsSet = YES;
    _status = status;
    _statusIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"tokenId"])
    {
      _tokenId = [decoder decodeObjectForKey: @"tokenId"];
      _tokenIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ownerId"])
    {
      _ownerId = [decoder decodeObjectForKey: @"ownerId"];
      _ownerIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"timeOfCreation"])
    {
      _timeOfCreation = [decoder decodeInt64ForKey: @"timeOfCreation"];
      _timeOfCreationIsSet = YES;
    }
    if ([decoder containsValueForKey: @"timeOfExpiration"])
    {
      _timeOfExpiration = [decoder decodeInt64ForKey: @"timeOfExpiration"];
      _timeOfExpirationIsSet = YES;
    }
    if ([decoder containsValueForKey: @"tokenType"])
    {
      _tokenType = [decoder decodeIntForKey: @"tokenType"];
      _tokenTypeIsSet = YES;
    }
    if ([decoder containsValueForKey: @"organizationId"])
    {
      _organizationId = [decoder decodeObjectForKey: @"organizationId"];
      _organizationIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ownerName"])
    {
      _ownerName = [decoder decodeObjectForKey: @"ownerName"];
      _ownerNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"organizationName"])
    {
      _organizationName = [decoder decodeObjectForKey: @"organizationName"];
      _organizationNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"status"])
    {
      _status = [decoder decodeIntForKey: @"status"];
      _statusIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIdIsSet)
  {
    [encoder encodeObject: _tokenId forKey: @"tokenId"];
  }
  if (_ownerIdIsSet)
  {
    [encoder encodeObject: _ownerId forKey: @"ownerId"];
  }
  if (_timeOfCreationIsSet)
  {
    [encoder encodeInt64: _timeOfCreation forKey: @"timeOfCreation"];
  }
  if (_timeOfExpirationIsSet)
  {
    [encoder encodeInt64: _timeOfExpiration forKey: @"timeOfExpiration"];
  }
  if (_tokenTypeIsSet)
  {
    [encoder encodeInt: _tokenType forKey: @"tokenType"];
  }
  if (_organizationIdIsSet)
  {
    [encoder encodeObject: _organizationId forKey: @"organizationId"];
  }
  if (_ownerNameIsSet)
  {
    [encoder encodeObject: _ownerName forKey: @"ownerName"];
  }
  if (_organizationNameIsSet)
  {
    [encoder encodeObject: _organizationName forKey: @"organizationName"];
  }
  if (_statusIsSet)
  {
    [encoder encodeInt: _status forKey: @"status"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIdIsSet ? 2654435761 : 0;
  if (_tokenIdIsSet)
  {
    hash = (hash * 31) ^ [_tokenId hash];
  }
  hash = (hash * 31) ^ _ownerIdIsSet ? 2654435761 : 0;
  if (_ownerIdIsSet)
  {
    hash = (hash * 31) ^ [_ownerId hash];
  }
  hash = (hash * 31) ^ _timeOfCreationIsSet ? 2654435761 : 0;
  if (_timeOfCreationIsSet)
  {
    hash = (hash * 31) ^ [@(_timeOfCreation) hash];
  }
  hash = (hash * 31) ^ _timeOfExpirationIsSet ? 2654435761 : 0;
  if (_timeOfExpirationIsSet)
  {
    hash = (hash * 31) ^ [@(_timeOfExpiration) hash];
  }
  hash = (hash * 31) ^ _tokenTypeIsSet ? 2654435761 : 0;
  if (_tokenTypeIsSet)
  {
    hash = (hash * 31) ^ [@(_tokenType) hash];
  }
  hash = (hash * 31) ^ _organizationIdIsSet ? 2654435761 : 0;
  if (_organizationIdIsSet)
  {
    hash = (hash * 31) ^ [_organizationId hash];
  }
  hash = (hash * 31) ^ _ownerNameIsSet ? 2654435761 : 0;
  if (_ownerNameIsSet)
  {
    hash = (hash * 31) ^ [_ownerName hash];
  }
  hash = (hash * 31) ^ _organizationNameIsSet ? 2654435761 : 0;
  if (_organizationNameIsSet)
  {
    hash = (hash * 31) ^ [_organizationName hash];
  }
  hash = (hash * 31) ^ _statusIsSet ? 2654435761 : 0;
  if (_statusIsSet)
  {
    hash = (hash * 31) ^ [@(_status) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaAuthentication_AuthenticationToken class]]) {
    return NO;
  }
  AromaAuthentication_AuthenticationToken *other = (AromaAuthentication_AuthenticationToken *)anObject;
  if ((_tokenIdIsSet != other->_tokenIdIsSet) ||
      (_tokenIdIsSet && ((_tokenId || other->_tokenId) && ![_tokenId isEqual:other->_tokenId]))) {
    return NO;
  }
  if ((_ownerIdIsSet != other->_ownerIdIsSet) ||
      (_ownerIdIsSet && ((_ownerId || other->_ownerId) && ![_ownerId isEqual:other->_ownerId]))) {
    return NO;
  }
  if ((_timeOfCreationIsSet != other->_timeOfCreationIsSet) ||
      (_timeOfCreationIsSet && (_timeOfCreation != other->_timeOfCreation))) {
    return NO;
  }
  if ((_timeOfExpirationIsSet != other->_timeOfExpirationIsSet) ||
      (_timeOfExpirationIsSet && (_timeOfExpiration != other->_timeOfExpiration))) {
    return NO;
  }
  if ((_tokenTypeIsSet != other->_tokenTypeIsSet) ||
      (_tokenTypeIsSet && (_tokenType != other->_tokenType))) {
    return NO;
  }
  if ((_organizationIdIsSet != other->_organizationIdIsSet) ||
      (_organizationIdIsSet && ((_organizationId || other->_organizationId) && ![_organizationId isEqual:other->_organizationId]))) {
    return NO;
  }
  if ((_ownerNameIsSet != other->_ownerNameIsSet) ||
      (_ownerNameIsSet && ((_ownerName || other->_ownerName) && ![_ownerName isEqual:other->_ownerName]))) {
    return NO;
  }
  if ((_organizationNameIsSet != other->_organizationNameIsSet) ||
      (_organizationNameIsSet && ((_organizationName || other->_organizationName) && ![_organizationName isEqual:other->_organizationName]))) {
    return NO;
  }
  if ((_statusIsSet != other->_statusIsSet) ||
      (_statusIsSet && (_status != other->_status))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaAuthentication_AuthenticationToken * val = [AromaAuthentication_AuthenticationToken new];
  if (_tokenIdIsSet)
  {
    val.tokenId = [self.tokenId copy];
  }
  if (_ownerIdIsSet)
  {
    val.ownerId = [self.ownerId copy];
  }
  if (_timeOfCreationIsSet)
  {
    val.timeOfCreation = self.timeOfCreation;
  }
  if (_timeOfExpirationIsSet)
  {
    val.timeOfExpiration = self.timeOfExpiration;
  }
  if (_tokenTypeIsSet)
  {
    val.tokenType = self.tokenType;
  }
  if (_organizationIdIsSet)
  {
    val.organizationId = [self.organizationId copy];
  }
  if (_ownerNameIsSet)
  {
    val.ownerName = [self.ownerName copy];
  }
  if (_organizationNameIsSet)
  {
    val.organizationName = [self.organizationName copy];
  }
  if (_statusIsSet)
  {
    val.status = self.status;
  }
  return val;
}

- (void) setTokenId: (NSString *) tokenId {
  _tokenId = tokenId;
  _tokenIdIsSet = YES;
}

- (void) unsetTokenId {
  _tokenId = nil;
  _tokenIdIsSet = NO;
}

- (void) setOwnerId: (NSString *) ownerId {
  _ownerId = ownerId;
  _ownerIdIsSet = YES;
}

- (void) unsetOwnerId {
  _ownerId = nil;
  _ownerIdIsSet = NO;
}

- (void) setTimeOfCreation: (SInt64) timeOfCreation {
  _timeOfCreation = timeOfCreation;
  _timeOfCreationIsSet = YES;
}

- (void) unsetTimeOfCreation {
  _timeOfCreationIsSet = NO;
}

- (void) setTimeOfExpiration: (SInt64) timeOfExpiration {
  _timeOfExpiration = timeOfExpiration;
  _timeOfExpirationIsSet = YES;
}

- (void) unsetTimeOfExpiration {
  _timeOfExpirationIsSet = NO;
}

- (void) setTokenType: (AromaAuthentication_TokenType) tokenType {
  _tokenType = tokenType;
  _tokenTypeIsSet = YES;
}

- (void) unsetTokenType {
  _tokenTypeIsSet = NO;
}

- (void) setOrganizationId: (NSString *) organizationId {
  _organizationId = organizationId;
  _organizationIdIsSet = YES;
}

- (void) unsetOrganizationId {
  _organizationId = nil;
  _organizationIdIsSet = NO;
}

- (void) setOwnerName: (NSString *) ownerName {
  _ownerName = ownerName;
  _ownerNameIsSet = YES;
}

- (void) unsetOwnerName {
  _ownerName = nil;
  _ownerNameIsSet = NO;
}

- (void) setOrganizationName: (NSString *) organizationName {
  _organizationName = organizationName;
  _organizationNameIsSet = YES;
}

- (void) unsetOrganizationName {
  _organizationName = nil;
  _organizationNameIsSet = NO;
}

- (void) setStatus: (AromaAuthentication_TokenStatus) status {
  _status = status;
  _statusIsSet = YES;
}

- (void) unsetStatus {
  _statusIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.tokenId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.ownerId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.timeOfCreation = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.timeOfExpiration = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeI32) {
          AromaAuthentication_TokenType fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.tokenType = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.organizationId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 7:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.ownerName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 8:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.organizationName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 9:
        if (fieldType == TTypeI32) {
          AromaAuthentication_TokenStatus fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.status = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AuthenticationToken" error: __thriftError]) return NO;
  if (_tokenIdIsSet) {
    if (_tokenId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"tokenId" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _tokenId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_ownerIdIsSet) {
    if (_ownerId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ownerId" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _ownerId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_timeOfCreationIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"timeOfCreation" type: TTypeI64 fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _timeOfCreation error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_timeOfExpirationIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"timeOfExpiration" type: TTypeI64 fieldID: 4 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _timeOfExpiration error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_tokenTypeIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"tokenType" type: TTypeI32 fieldID: 5 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _tokenType error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_organizationIdIsSet) {
    if (_organizationId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"organizationId" type: TTypeSTRING fieldID: 6 error: __thriftError]) return NO;
      if (![outProtocol writeString: _organizationId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_ownerNameIsSet) {
    if (_ownerName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ownerName" type: TTypeSTRING fieldID: 7 error: __thriftError]) return NO;
      if (![outProtocol writeString: _ownerName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_organizationNameIsSet) {
    if (_organizationName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"organizationName" type: TTypeSTRING fieldID: 8 error: __thriftError]) return NO;
      if (![outProtocol writeString: _organizationName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_statusIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"status" type: TTypeI32 fieldID: 9 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _status error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaAuthentication_AuthenticationToken("];
  [ms appendString: @"tokenId:"];
  [ms appendFormat: @"\"%@\"", _tokenId];
  [ms appendString: @",ownerId:"];
  [ms appendFormat: @"\"%@\"", _ownerId];
  [ms appendString: @",timeOfCreation:"];
  [ms appendFormat: @"%qi", _timeOfCreation];
  [ms appendString: @",timeOfExpiration:"];
  [ms appendFormat: @"%qi", _timeOfExpiration];
  [ms appendString: @",tokenType:"];
  [ms appendFormat: @"%i", (int)_tokenType];
  [ms appendString: @",organizationId:"];
  [ms appendFormat: @"\"%@\"", _organizationId];
  [ms appendString: @",ownerName:"];
  [ms appendFormat: @"\"%@\"", _ownerName];
  [ms appendString: @",organizationName:"];
  [ms appendFormat: @"\"%@\"", _organizationName];
  [ms appendString: @",status:"];
  [ms appendFormat: @"%i", (int)_status];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

NSString *AromaAuthentication_AuthenticationErrorDomain = @"AromaAuthentication_AuthenticationErrorDomain";

NSString * AromaAuthentication_OVER_THE_WIRE_PASSWORD_ENCRYPTION_KEY = @"AR3W3O04OJ5I894k40s04163U408pnU47AicAO6X29593AbTwaWk60qu966M9j12O6873Z64822x4qG71vaEjOei159sr9QUT1DaK";

