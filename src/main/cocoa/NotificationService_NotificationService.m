/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TProtocolFactory.h"
#import "TApplicationError.h"
#import "TProtocolError.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TBaseClient.h"

#import "AromaAuthentication_Authentication.h"
#import "Aroma_Aroma.h"
#import "AromaChannels_Channels.h"
#import "AromaEndpoint_Endpoint.h"
#import "AromaEvents_Events.h"
#import "AromaException_Exceptions.h"

#import "NotificationService_NotificationService.h"

@implementation NotificationService_SendNotificationRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithToken: (NotificationService_AuthenticationToken) token event: (NotificationService_Event) event channels: (NSDictionary<NotificationService_AromaChannel, NotificationService_User> *) channels
{
  self = [super init];
  if (self)  {
    _token = token;
    _tokenIsSet = YES;
    _event = event;
    _eventIsSet = YES;
    _channels = [channels mutableCopy];
    _channelsIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"event"])
    {
      _event = [decoder decodeObjectForKey: @"event"];
      _eventIsSet = YES;
    }
    if ([decoder containsValueForKey: @"channels"])
    {
      _channels = [decoder decodeObjectForKey: @"channels"];
      _channelsIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
  if (_eventIsSet)
  {
    [encoder encodeObject: _event forKey: @"event"];
  }
  if (_channelsIsSet)
  {
    [encoder encodeObject: _channels forKey: @"channels"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  hash = (hash * 31) ^ _eventIsSet ? 2654435761 : 0;
  if (_eventIsSet)
  {
    hash = (hash * 31) ^ [_event hash];
  }
  hash = (hash * 31) ^ _channelsIsSet ? 2654435761 : 0;
  if (_channelsIsSet)
  {
    hash = (hash * 31) ^ [_channels hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NotificationService_SendNotificationRequest class]]) {
    return NO;
  }
  NotificationService_SendNotificationRequest *other = (NotificationService_SendNotificationRequest *)anObject;
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  if ((_eventIsSet != other->_eventIsSet) ||
      (_eventIsSet && ((_event || other->_event) && ![_event isEqual:other->_event]))) {
    return NO;
  }
  if ((_channelsIsSet != other->_channelsIsSet) ||
      (_channelsIsSet && ((_channels || other->_channels) && ![_channels isEqual:other->_channels]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  NotificationService_SendNotificationRequest * val = [NotificationService_SendNotificationRequest new];
  if (_tokenIsSet)
  {
    val.token = [self.token copy];
  }
  if (_eventIsSet)
  {
    val.event = [self.event copy];
  }
  if (_channelsIsSet)
  {
    val.channels = [self.channels copy];
  }
  return val;
}

- (void) setToken: (AromaAuthentication_AuthenticationToken *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (void) setEvent: (AromaEvents_Event *) event {
  _event = event;
  _eventIsSet = YES;
}

- (void) unsetEvent {
  _event = nil;
  _eventIsSet = NO;
}

- (void) setChannels: (NSMutableDictionary<NotificationService_AromaChannel, NotificationService_User> *) channels {
  _channels = channels;
  _channelsIsSet = YES;
}

- (void) unsetChannels {
  _channels = nil;
  _channelsIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_AuthenticationToken *fieldValue = [[AromaAuthentication_AuthenticationToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaEvents_Event *fieldValue = [[AromaEvents_Event alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.event = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeMAP) {
          SInt32 _size0;
          if (![inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size0 error: __thriftError]) return NO;
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            AromaChannels_AromaChannel *_key2 = [[AromaChannels_AromaChannel alloc] init];
            if (![_key2 read: inProtocol error: __thriftError]) return NO;
            Aroma_User *_val3 = [[Aroma_User alloc] init];
            if (![_val3 read: inProtocol error: __thriftError]) return NO;
            [fieldValue setObject: _val3 forKey: _key2];
          }
          if (![inProtocol readMapEnd: __thriftError]) return NO;
          self.channels = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"SendNotificationRequest" error: __thriftError]) return NO;
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_token write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_eventIsSet) {
    if (_event != nil) {
      if (![outProtocol writeFieldBeginWithName: @"event" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_event write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_channelsIsSet) {
    if (_channels != nil) {
      if (![outProtocol writeFieldBeginWithName: @"channels" type: TTypeMAP fieldID: 3 error: __thriftError]) return NO;
      {
        if (![outProtocol writeMapBeginWithKeyType: TTypeSTRUCT valueType: TTypeSTRUCT size: (SInt32)[_channels count] error: __thriftError]) return NO;
        NSEnumerator * _iter4 = [_channels keyEnumerator];
        id key5;
        while ((key5 = [_iter4 nextObject]))
        {
          if (![key5 write: outProtocol error: __thriftError]) return NO;
          if (![[_channels objectForKey: key5] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeMapEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NotificationService_SendNotificationRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", _token];
  [ms appendString: @",event:"];
  [ms appendFormat: @"%@", _event];
  [ms appendString: @",channels:"];
  [ms appendFormat: @"%@", _channels];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NotificationService_SendNotificationResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithNotificationId: (NotificationService_uuid) notificationId
{
  self = [super init];
  if (self)  {
    _notificationId = notificationId;
    _notificationIdIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"notificationId"])
    {
      _notificationId = [decoder decodeObjectForKey: @"notificationId"];
      _notificationIdIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_notificationIdIsSet)
  {
    [encoder encodeObject: _notificationId forKey: @"notificationId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _notificationIdIsSet ? 2654435761 : 0;
  if (_notificationIdIsSet)
  {
    hash = (hash * 31) ^ [_notificationId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NotificationService_SendNotificationResponse class]]) {
    return NO;
  }
  NotificationService_SendNotificationResponse *other = (NotificationService_SendNotificationResponse *)anObject;
  if ((_notificationIdIsSet != other->_notificationIdIsSet) ||
      (_notificationIdIsSet && ((_notificationId || other->_notificationId) && ![_notificationId isEqual:other->_notificationId]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  NotificationService_SendNotificationResponse * val = [NotificationService_SendNotificationResponse new];
  if (_notificationIdIsSet)
  {
    val.notificationId = [self.notificationId copy];
  }
  return val;
}

- (void) setNotificationId: (NSString *) notificationId {
  _notificationId = notificationId;
  _notificationIdIsSet = YES;
}

- (void) unsetNotificationId {
  _notificationId = nil;
  _notificationIdIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.notificationId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"SendNotificationResponse" error: __thriftError]) return NO;
  if (_notificationIdIsSet) {
    if (_notificationId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"notificationId" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _notificationId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NotificationService_SendNotificationResponse("];
  [ms appendString: @"notificationId:"];
  [ms appendFormat: @"\"%@\"", _notificationId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

NSString *NotificationService_NotificationServiceErrorDomain = @"NotificationService_NotificationServiceErrorDomain";

NotificationService_int NotificationService_SERVICE_PORT = 7009;
AromaEndpoint_TcpEndpoint * NotificationService_PRODUCTION_ENDPOINT;
AromaEndpoint_TcpEndpoint * NotificationService_BETA_ENDPOINT;

@implementation NotificationService_NotificationServiceConstants

+ (void) initialize {

  NotificationService_PRODUCTION_ENDPOINT = [AromaEndpoint_TcpEndpoint new];
  [NotificationService_PRODUCTION_ENDPOINT setHostname:@"notification-srv.aroma.tech"];
  [NotificationService_PRODUCTION_ENDPOINT setPort:7009];
;

  NotificationService_BETA_ENDPOINT = [AromaEndpoint_TcpEndpoint new];
  [NotificationService_BETA_ENDPOINT setHostname:@"notification-srv.beta.aroma.tech"];
  [NotificationService_BETA_ENDPOINT setPort:7009];
;
}

+ (AromaEndpoint_TcpEndpoint *) PRODUCTION_ENDPOINT {
  return NotificationService_PRODUCTION_ENDPOINT;
}

+ (AromaEndpoint_TcpEndpoint *) BETA_ENDPOINT {
  return NotificationService_BETA_ENDPOINT;
}
@end

@interface NotificationService_NotificationService_getApiVersion_args : NSObject <TBase, NSCoding, NSCopying> 



@end

@implementation NotificationService_NotificationService_getApiVersion_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NotificationService_NotificationService_getApiVersion_args class]]) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  NotificationService_NotificationService_getApiVersion_args * val = [NotificationService_NotificationService_getApiVersion_args new];
  return val;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"NotificationService_getApiVersion_args" error: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NotificationService_NotificationService_getApiVersion_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NotificationService_NotificationService_getApiVersion_result : NSObject <TBase, NSCoding, NSCopying> 

@property (assign, nonatomic) double success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;


- (instancetype) initWithSuccess: (double) success;

@end

@implementation NotificationService_NotificationService_getApiVersion_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (double) success
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeDoubleForKey: @"success"];
      _successIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeDouble: _success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [@(_success) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NotificationService_NotificationService_getApiVersion_result class]]) {
    return NO;
  }
  NotificationService_NotificationService_getApiVersion_result *other = (NotificationService_NotificationService_getApiVersion_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && (_success != other->_success))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  NotificationService_NotificationService_getApiVersion_result * val = [NotificationService_NotificationService_getApiVersion_result new];
  if (_successIsSet)
  {
    val.success = self.success;
  }
  return val;
}

- (void) setSuccess: (double) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _successIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeDOUBLE) {
          double fieldValue;
          if (![inProtocol readDouble:&fieldValue error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"NotificationService_getApiVersion_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeDOUBLE fieldID: 0 error: __thriftError]) return NO;
    if (![outProtocol writeDouble: _success error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NotificationService_NotificationService_getApiVersion_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%f", _success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NotificationService_NotificationService_sendNotification_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) NotificationService_SendNotificationRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (NotificationService_SendNotificationRequest *) request;

@end

@implementation NotificationService_NotificationService_sendNotification_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (NotificationService_SendNotificationRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NotificationService_NotificationService_sendNotification_args class]]) {
    return NO;
  }
  NotificationService_NotificationService_sendNotification_args *other = (NotificationService_NotificationService_sendNotification_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  NotificationService_NotificationService_sendNotification_args * val = [NotificationService_NotificationService_sendNotification_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (NotificationService_SendNotificationRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          NotificationService_SendNotificationRequest *fieldValue = [[NotificationService_SendNotificationRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"NotificationService_sendNotification_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NotificationService_NotificationService_sendNotification_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NotificationService_NotificationService_sendNotification_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) NotificationService_SendNotificationResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) NotificationService_InvalidArgumentException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) NotificationService_OperationFailedException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) NotificationService_InvalidTokenException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;


- (instancetype) initWithSuccess: (NotificationService_SendNotificationResponse *) success ex1: (NotificationService_InvalidArgumentException) ex1 ex2: (NotificationService_OperationFailedException) ex2 ex3: (NotificationService_InvalidTokenException) ex3;

@end

@implementation NotificationService_NotificationService_sendNotification_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (NotificationService_SendNotificationResponse *) success ex1: (NotificationService_InvalidArgumentException) ex1 ex2: (NotificationService_OperationFailedException) ex2 ex3: (NotificationService_InvalidTokenException) ex3
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NotificationService_NotificationService_sendNotification_result class]]) {
    return NO;
  }
  NotificationService_NotificationService_sendNotification_result *other = (NotificationService_NotificationService_sendNotification_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  NotificationService_NotificationService_sendNotification_result * val = [NotificationService_NotificationService_sendNotification_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  return val;
}

- (void) setSuccess: (NotificationService_SendNotificationResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_InvalidArgumentException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_OperationFailedException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidTokenException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          NotificationService_SendNotificationResponse *fieldValue = [[NotificationService_SendNotificationResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"NotificationService_sendNotification_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NotificationService_NotificationService_sendNotification_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface NotificationService_NotificationServiceClient () {

  id<TProtocol> inProtocol;
  id<TProtocol> outProtocol;

}

@end

@implementation NotificationService_NotificationServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  if (self)   {
    inProtocol = anInProtocol;
    outProtocol = anOutProtocol;
  }
  return self;
}

- (BOOL) send_getApiVersion: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"getApiVersion" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"NotificationService_getApiVersion_args" error: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_getApiVersion: (double *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  NotificationService_NotificationService_getApiVersion_result * resulter = [NotificationService_NotificationService_getApiVersion_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"getApiVersion"}];
  }
  return NO;
}

- (NSNumber *) getApiVersion: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_getApiVersion: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  double __result;
  if (![self recv_getApiVersion: &__result error: __thriftError]) return nil;
  return @(__result);
}

- (BOOL) send_sendNotification: (NotificationService_SendNotificationRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"sendNotification" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"NotificationService_sendNotification_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_sendNotification: (NotificationService_SendNotificationResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  NotificationService_NotificationService_sendNotification_result * resulter = [NotificationService_NotificationService_sendNotification_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"sendNotification"}];
  }
  return NO;
}

- (NotificationService_SendNotificationResponse *) sendNotification: (NotificationService_SendNotificationRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_sendNotification : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  NotificationService_SendNotificationResponse * __result;
  if (![self recv_sendNotification: &__result error: __thriftError]) return nil;
  return __result;
}

@end

@interface NotificationService_NotificationServiceProcessor () {
  id <NotificationService_NotificationService> service;
  NSDictionary * methodMap;
}
@end

@implementation NotificationService_NotificationServiceProcessor

- (id) initWithNotificationService: (id <NotificationService_NotificationService>) aService
{
  self = [super init];
  if (self)   {
    service = aService;
    methodMap = [NSMutableDictionary dictionary];
    {
      SEL s = @selector(process_getApiVersion_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"getApiVersion"];
    }
    {
      SEL s = @selector(process_sendNotification_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"sendNotification"];
    }
  }
  return self;
}

- (id<NotificationService_NotificationService>) service
{
  return service;
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
                          error: (NSError *__autoreleasing *)__thriftError
{
  NSString * messageName;
  SInt32 messageType;
  SInt32 seqID;
  if (![inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID
                                      error: __thriftError]) return NO;
  NSInvocation * invocation = [methodMap valueForKey: messageName];
  if (invocation == nil) {
    if (![TProtocolUtil skipType: TTypeSTRUCT onProtocol: inProtocol error: __thriftError]) return NO;
    if (![inProtocol readMessageEnd: __thriftError]) return NO;
    NSError * x = [NSError errorWithDomain: TApplicationErrorDomain
                                      code: TApplicationErrorUnknownMethod
                                  userInfo: @{TApplicationErrorMethodKey: messageName}];
    if (![outProtocol writeMessageBeginWithName: messageName
                                           type: TMessageTypeEXCEPTION
                                     sequenceID: seqID
                                          error: __thriftError]) return NO;
    if (![x write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeMessageEnd: __thriftError]) return NO;
    if (![[outProtocol transport] flush: __thriftError]) return NO;
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setArgument: &__thriftError atIndex: 5];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (BOOL) process_getApiVersion_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  NotificationService_NotificationService_getApiVersion_args * args = [NotificationService_NotificationService_getApiVersion_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  NotificationService_NotificationService_getApiVersion_result * result = [NotificationService_NotificationService_getApiVersion_result new];
  NSNumber * serviceResult = [service getApiVersion: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: [serviceResult doubleValue]];
  if (![outProtocol writeMessageBeginWithName: @"getApiVersion"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_sendNotification_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  NotificationService_NotificationService_sendNotification_args * args = [NotificationService_NotificationService_sendNotification_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  NotificationService_NotificationService_sendNotification_result * result = [NotificationService_NotificationService_sendNotification_result new];
  NotificationService_SendNotificationResponse * serviceResult = [service sendNotification: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"sendNotification"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}
@end

