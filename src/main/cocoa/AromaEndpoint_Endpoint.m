/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TProtocolFactory.h"
#import "TApplicationError.h"
#import "TProtocolError.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TBaseClient.h"

#import "AromaAuthentication_Authentication.h"
#import "Aroma_Aroma.h"
#import "AromaException_Exceptions.h"

#import "AromaEndpoint_Endpoint.h"

@implementation AromaEndpoint_TcpEndpoint

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.port = 80;

  }
  return self;
}

- (instancetype) initWithHostname: (NSString *) hostname port: (AromaEndpoint_int) port
{
  self = [super init];
  if (self)  {
    _hostname = hostname;
    _hostnameIsSet = YES;
    _port = port;
    _portIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"hostname"])
    {
      _hostname = [decoder decodeObjectForKey: @"hostname"];
      _hostnameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"port"])
    {
      _port = [decoder decodeInt32ForKey: @"port"];
      _portIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_hostnameIsSet)
  {
    [encoder encodeObject: _hostname forKey: @"hostname"];
  }
  if (_portIsSet)
  {
    [encoder encodeInt32: _port forKey: @"port"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _hostnameIsSet ? 2654435761 : 0;
  if (_hostnameIsSet)
  {
    hash = (hash * 31) ^ [_hostname hash];
  }
  hash = (hash * 31) ^ _portIsSet ? 2654435761 : 0;
  if (_portIsSet)
  {
    hash = (hash * 31) ^ [@(_port) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEndpoint_TcpEndpoint class]]) {
    return NO;
  }
  AromaEndpoint_TcpEndpoint *other = (AromaEndpoint_TcpEndpoint *)anObject;
  if ((_hostnameIsSet != other->_hostnameIsSet) ||
      (_hostnameIsSet && ((_hostname || other->_hostname) && ![_hostname isEqual:other->_hostname]))) {
    return NO;
  }
  if ((_portIsSet != other->_portIsSet) ||
      (_portIsSet && (_port != other->_port))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaEndpoint_TcpEndpoint * val = [AromaEndpoint_TcpEndpoint new];
  if (_hostnameIsSet)
  {
    val.hostname = [self.hostname copy];
  }
  if (_portIsSet)
  {
    val.port = self.port;
  }
  return val;
}

- (void) setHostname: (NSString *) hostname {
  _hostname = hostname;
  _hostnameIsSet = YES;
}

- (void) unsetHostname {
  _hostname = nil;
  _hostnameIsSet = NO;
}

- (void) setPort: (SInt32) port {
  _port = port;
  _portIsSet = YES;
}

- (void) unsetPort {
  _portIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.hostname = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeI32) {
          SInt32 fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.port = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"TcpEndpoint" error: __thriftError]) return NO;
  if (_hostnameIsSet) {
    if (_hostname != nil) {
      if (![outProtocol writeFieldBeginWithName: @"hostname" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _hostname error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_portIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"port" type: TTypeI32 fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _port error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_hostnameIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"hostname"}];
    }
  }
  if (!_portIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"port"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEndpoint_TcpEndpoint("];
  [ms appendString: @"hostname:"];
  [ms appendFormat: @"\"%@\"", _hostname];
  [ms appendString: @",port:"];
  [ms appendFormat: @"%i", (int)_port];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEndpoint_HttpThriftEndpoint

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithUrl: (NSString *) url
{
  self = [super init];
  if (self)  {
    _url = url;
    _urlIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"url"])
    {
      _url = [decoder decodeObjectForKey: @"url"];
      _urlIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_urlIsSet)
  {
    [encoder encodeObject: _url forKey: @"url"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _urlIsSet ? 2654435761 : 0;
  if (_urlIsSet)
  {
    hash = (hash * 31) ^ [_url hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEndpoint_HttpThriftEndpoint class]]) {
    return NO;
  }
  AromaEndpoint_HttpThriftEndpoint *other = (AromaEndpoint_HttpThriftEndpoint *)anObject;
  if ((_urlIsSet != other->_urlIsSet) ||
      (_urlIsSet && ((_url || other->_url) && ![_url isEqual:other->_url]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaEndpoint_HttpThriftEndpoint * val = [AromaEndpoint_HttpThriftEndpoint new];
  if (_urlIsSet)
  {
    val.url = [self.url copy];
  }
  return val;
}

- (void) setUrl: (NSString *) url {
  _url = url;
  _urlIsSet = YES;
}

- (void) unsetUrl {
  _url = nil;
  _urlIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.url = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"HttpThriftEndpoint" error: __thriftError]) return NO;
  if (_urlIsSet) {
    if (_url != nil) {
      if (![outProtocol writeFieldBeginWithName: @"url" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _url error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_urlIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"url"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEndpoint_HttpThriftEndpoint("];
  [ms appendString: @"url:"];
  [ms appendFormat: @"\"%@\"", _url];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEndpoint_HttpRestEndpoint

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithUrl: (NSString *) url
{
  self = [super init];
  if (self)  {
    _url = url;
    _urlIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"url"])
    {
      _url = [decoder decodeObjectForKey: @"url"];
      _urlIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_urlIsSet)
  {
    [encoder encodeObject: _url forKey: @"url"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _urlIsSet ? 2654435761 : 0;
  if (_urlIsSet)
  {
    hash = (hash * 31) ^ [_url hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEndpoint_HttpRestEndpoint class]]) {
    return NO;
  }
  AromaEndpoint_HttpRestEndpoint *other = (AromaEndpoint_HttpRestEndpoint *)anObject;
  if ((_urlIsSet != other->_urlIsSet) ||
      (_urlIsSet && ((_url || other->_url) && ![_url isEqual:other->_url]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaEndpoint_HttpRestEndpoint * val = [AromaEndpoint_HttpRestEndpoint new];
  if (_urlIsSet)
  {
    val.url = [self.url copy];
  }
  return val;
}

- (void) setUrl: (NSString *) url {
  _url = url;
  _urlIsSet = YES;
}

- (void) unsetUrl {
  _url = nil;
  _urlIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.url = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"HttpRestEndpoint" error: __thriftError]) return NO;
  if (_urlIsSet) {
    if (_url != nil) {
      if (![outProtocol writeFieldBeginWithName: @"url" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _url error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_urlIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"url"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEndpoint_HttpRestEndpoint("];
  [ms appendString: @"url:"];
  [ms appendFormat: @"\"%@\"", _url];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEndpoint_Endpoint

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithTcp: (AromaEndpoint_TcpEndpoint *) tcp httpThrift: (AromaEndpoint_HttpThriftEndpoint *) httpThrift httpRest: (AromaEndpoint_HttpRestEndpoint *) httpRest
{
  self = [super init];
  if (self)  {
    _tcp = tcp;
    _tcpIsSet = YES;
    _httpThrift = httpThrift;
    _httpThriftIsSet = YES;
    _httpRest = httpRest;
    _httpRestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"tcp"])
    {
      _tcp = [decoder decodeObjectForKey: @"tcp"];
      _tcpIsSet = YES;
    }
    if ([decoder containsValueForKey: @"httpThrift"])
    {
      _httpThrift = [decoder decodeObjectForKey: @"httpThrift"];
      _httpThriftIsSet = YES;
    }
    if ([decoder containsValueForKey: @"httpRest"])
    {
      _httpRest = [decoder decodeObjectForKey: @"httpRest"];
      _httpRestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_tcpIsSet)
  {
    [encoder encodeObject: _tcp forKey: @"tcp"];
  }
  if (_httpThriftIsSet)
  {
    [encoder encodeObject: _httpThrift forKey: @"httpThrift"];
  }
  if (_httpRestIsSet)
  {
    [encoder encodeObject: _httpRest forKey: @"httpRest"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _tcpIsSet ? 2654435761 : 0;
  if (_tcpIsSet)
  {
    hash = (hash * 31) ^ [_tcp hash];
  }
  hash = (hash * 31) ^ _httpThriftIsSet ? 2654435761 : 0;
  if (_httpThriftIsSet)
  {
    hash = (hash * 31) ^ [_httpThrift hash];
  }
  hash = (hash * 31) ^ _httpRestIsSet ? 2654435761 : 0;
  if (_httpRestIsSet)
  {
    hash = (hash * 31) ^ [_httpRest hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEndpoint_Endpoint class]]) {
    return NO;
  }
  AromaEndpoint_Endpoint *other = (AromaEndpoint_Endpoint *)anObject;
  if ((_tcpIsSet != other->_tcpIsSet) ||
      (_tcpIsSet && ((_tcp || other->_tcp) && ![_tcp isEqual:other->_tcp]))) {
    return NO;
  }
  if ((_httpThriftIsSet != other->_httpThriftIsSet) ||
      (_httpThriftIsSet && ((_httpThrift || other->_httpThrift) && ![_httpThrift isEqual:other->_httpThrift]))) {
    return NO;
  }
  if ((_httpRestIsSet != other->_httpRestIsSet) ||
      (_httpRestIsSet && ((_httpRest || other->_httpRest) && ![_httpRest isEqual:other->_httpRest]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaEndpoint_Endpoint * val = [AromaEndpoint_Endpoint new];
  if (_tcpIsSet)
  {
    val.tcp = [self.tcp copy];
  }
  if (_httpThriftIsSet)
  {
    val.httpThrift = [self.httpThrift copy];
  }
  if (_httpRestIsSet)
  {
    val.httpRest = [self.httpRest copy];
  }
  return val;
}

- (void) setTcp: (AromaEndpoint_TcpEndpoint *) tcp {
  _tcp = tcp;
  _tcpIsSet = YES;
}

- (void) unsetTcp {
  _tcp = nil;
  _tcpIsSet = NO;
}

- (void) setHttpThrift: (AromaEndpoint_HttpThriftEndpoint *) httpThrift {
  _httpThrift = httpThrift;
  _httpThriftIsSet = YES;
}

- (void) unsetHttpThrift {
  _httpThrift = nil;
  _httpThriftIsSet = NO;
}

- (void) setHttpRest: (AromaEndpoint_HttpRestEndpoint *) httpRest {
  _httpRest = httpRest;
  _httpRestIsSet = YES;
}

- (void) unsetHttpRest {
  _httpRest = nil;
  _httpRestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaEndpoint_TcpEndpoint *fieldValue = [[AromaEndpoint_TcpEndpoint alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.tcp = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaEndpoint_HttpThriftEndpoint *fieldValue = [[AromaEndpoint_HttpThriftEndpoint alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.httpThrift = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaEndpoint_HttpRestEndpoint *fieldValue = [[AromaEndpoint_HttpRestEndpoint alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.httpRest = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Endpoint" error: __thriftError]) return NO;
  if (_tcpIsSet) {
    if (_tcp != nil) {
      if (![outProtocol writeFieldBeginWithName: @"tcp" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_tcp write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_httpThriftIsSet) {
    if (_httpThrift != nil) {
      if (![outProtocol writeFieldBeginWithName: @"httpThrift" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_httpThrift write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_httpRestIsSet) {
    if (_httpRest != nil) {
      if (![outProtocol writeFieldBeginWithName: @"httpRest" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_httpRest write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEndpoint_Endpoint("];
  [ms appendString: @"tcp:"];
  [ms appendFormat: @"%@", _tcp];
  [ms appendString: @",httpThrift:"];
  [ms appendFormat: @"%@", _httpThrift];
  [ms appendString: @",httpRest:"];
  [ms appendFormat: @"%@", _httpRest];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEndpoint_HealthPokeRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithApplicationId: (AromaEndpoint_uuid) applicationId serviceToken: (AromaAuthentication_ApplicationToken *) serviceToken
{
  self = [super init];
  if (self)  {
    _applicationId = applicationId;
    _applicationIdIsSet = YES;
    _serviceToken = serviceToken;
    _serviceTokenIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"applicationId"])
    {
      _applicationId = [decoder decodeObjectForKey: @"applicationId"];
      _applicationIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"serviceToken"])
    {
      _serviceToken = [decoder decodeObjectForKey: @"serviceToken"];
      _serviceTokenIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_applicationIdIsSet)
  {
    [encoder encodeObject: _applicationId forKey: @"applicationId"];
  }
  if (_serviceTokenIsSet)
  {
    [encoder encodeObject: _serviceToken forKey: @"serviceToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _applicationIdIsSet ? 2654435761 : 0;
  if (_applicationIdIsSet)
  {
    hash = (hash * 31) ^ [_applicationId hash];
  }
  hash = (hash * 31) ^ _serviceTokenIsSet ? 2654435761 : 0;
  if (_serviceTokenIsSet)
  {
    hash = (hash * 31) ^ [_serviceToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEndpoint_HealthPokeRequest class]]) {
    return NO;
  }
  AromaEndpoint_HealthPokeRequest *other = (AromaEndpoint_HealthPokeRequest *)anObject;
  if ((_applicationIdIsSet != other->_applicationIdIsSet) ||
      (_applicationIdIsSet && ((_applicationId || other->_applicationId) && ![_applicationId isEqual:other->_applicationId]))) {
    return NO;
  }
  if ((_serviceTokenIsSet != other->_serviceTokenIsSet) ||
      (_serviceTokenIsSet && ((_serviceToken || other->_serviceToken) && ![_serviceToken isEqual:other->_serviceToken]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaEndpoint_HealthPokeRequest * val = [AromaEndpoint_HealthPokeRequest new];
  if (_applicationIdIsSet)
  {
    val.applicationId = [self.applicationId copy];
  }
  if (_serviceTokenIsSet)
  {
    val.serviceToken = [self.serviceToken copy];
  }
  return val;
}

- (void) setApplicationId: (NSString *) applicationId {
  _applicationId = applicationId;
  _applicationIdIsSet = YES;
}

- (void) unsetApplicationId {
  _applicationId = nil;
  _applicationIdIsSet = NO;
}

- (void) setServiceToken: (AromaAuthentication_ApplicationToken *) serviceToken {
  _serviceToken = serviceToken;
  _serviceTokenIsSet = YES;
}

- (void) unsetServiceToken {
  _serviceToken = nil;
  _serviceTokenIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.applicationId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_ApplicationToken *fieldValue = [[AromaAuthentication_ApplicationToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.serviceToken = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"HealthPokeRequest" error: __thriftError]) return NO;
  if (_applicationIdIsSet) {
    if (_applicationId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationId" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _applicationId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_serviceTokenIsSet) {
    if (_serviceToken != nil) {
      if (![outProtocol writeFieldBeginWithName: @"serviceToken" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_serviceToken write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEndpoint_HealthPokeRequest("];
  [ms appendString: @"applicationId:"];
  [ms appendFormat: @"\"%@\"", _applicationId];
  [ms appendString: @",serviceToken:"];
  [ms appendFormat: @"%@", _serviceToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEndpoint_HealthPokeResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithMessage: (NSString *) message healthy: (BOOL) healthy
{
  self = [super init];
  if (self)  {
    _message = message;
    _messageIsSet = YES;
    _healthy = healthy;
    _healthyIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"message"])
    {
      _message = [decoder decodeObjectForKey: @"message"];
      _messageIsSet = YES;
    }
    if ([decoder containsValueForKey: @"healthy"])
    {
      _healthy = [decoder decodeBoolForKey: @"healthy"];
      _healthyIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_messageIsSet)
  {
    [encoder encodeObject: _message forKey: @"message"];
  }
  if (_healthyIsSet)
  {
    [encoder encodeBool: _healthy forKey: @"healthy"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _messageIsSet ? 2654435761 : 0;
  if (_messageIsSet)
  {
    hash = (hash * 31) ^ [_message hash];
  }
  hash = (hash * 31) ^ _healthyIsSet ? 2654435761 : 0;
  if (_healthyIsSet)
  {
    hash = (hash * 31) ^ [@(_healthy) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEndpoint_HealthPokeResponse class]]) {
    return NO;
  }
  AromaEndpoint_HealthPokeResponse *other = (AromaEndpoint_HealthPokeResponse *)anObject;
  if ((_messageIsSet != other->_messageIsSet) ||
      (_messageIsSet && ((_message || other->_message) && ![_message isEqual:other->_message]))) {
    return NO;
  }
  if ((_healthyIsSet != other->_healthyIsSet) ||
      (_healthyIsSet && (_healthy != other->_healthy))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaEndpoint_HealthPokeResponse * val = [AromaEndpoint_HealthPokeResponse new];
  if (_messageIsSet)
  {
    val.message = [self.message copy];
  }
  if (_healthyIsSet)
  {
    val.healthy = self.healthy;
  }
  return val;
}

- (void) setMessage: (NSString *) message {
  _message = message;
  _messageIsSet = YES;
}

- (void) unsetMessage {
  _message = nil;
  _messageIsSet = NO;
}

- (void) setHealthy: (BOOL) healthy {
  _healthy = healthy;
  _healthyIsSet = YES;
}

- (void) unsetHealthy {
  _healthyIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.message = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeBOOL) {
          BOOL fieldValue;
          if (![inProtocol readBool:&fieldValue error: __thriftError]) return NO;
          self.healthy = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"HealthPokeResponse" error: __thriftError]) return NO;
  if (_messageIsSet) {
    if (_message != nil) {
      if (![outProtocol writeFieldBeginWithName: @"message" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _message error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_healthyIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"healthy" type: TTypeBOOL fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeBool: _healthy error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEndpoint_HealthPokeResponse("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", _message];
  [ms appendString: @",healthy:"];
  [ms appendFormat: @"%i", _healthy];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

NSString *AromaEndpoint_EndpointErrorDomain = @"AromaEndpoint_EndpointErrorDomain";


@interface AromaEndpoint_ApplicationEndpoint_healthPoke_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaEndpoint_HealthPokeRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaEndpoint_HealthPokeRequest *) request;

@end

@implementation AromaEndpoint_ApplicationEndpoint_healthPoke_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaEndpoint_HealthPokeRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEndpoint_ApplicationEndpoint_healthPoke_args class]]) {
    return NO;
  }
  AromaEndpoint_ApplicationEndpoint_healthPoke_args *other = (AromaEndpoint_ApplicationEndpoint_healthPoke_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaEndpoint_ApplicationEndpoint_healthPoke_args * val = [AromaEndpoint_ApplicationEndpoint_healthPoke_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaEndpoint_HealthPokeRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaEndpoint_HealthPokeRequest *fieldValue = [[AromaEndpoint_HealthPokeRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ApplicationEndpoint_healthPoke_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEndpoint_ApplicationEndpoint_healthPoke_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaEndpoint_ApplicationEndpoint_healthPoke_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaEndpoint_HealthPokeResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) AromaEndpoint_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;


- (instancetype) initWithSuccess: (AromaEndpoint_HealthPokeResponse *) success ex1: (AromaEndpoint_OperationFailedException) ex1;

@end

@implementation AromaEndpoint_ApplicationEndpoint_healthPoke_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaEndpoint_HealthPokeResponse *) success ex1: (AromaEndpoint_OperationFailedException) ex1
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEndpoint_ApplicationEndpoint_healthPoke_result class]]) {
    return NO;
  }
  AromaEndpoint_ApplicationEndpoint_healthPoke_result *other = (AromaEndpoint_ApplicationEndpoint_healthPoke_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaEndpoint_ApplicationEndpoint_healthPoke_result * val = [AromaEndpoint_ApplicationEndpoint_healthPoke_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  return val;
}

- (void) setSuccess: (AromaEndpoint_HealthPokeResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          AromaEndpoint_HealthPokeResponse *fieldValue = [[AromaEndpoint_HealthPokeResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ApplicationEndpoint_healthPoke_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEndpoint_ApplicationEndpoint_healthPoke_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaEndpoint_ApplicationEndpointClient () {

  id<TProtocol> inProtocol;
  id<TProtocol> outProtocol;

}

@end

@implementation AromaEndpoint_ApplicationEndpointClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  if (self)   {
    inProtocol = anInProtocol;
    outProtocol = anOutProtocol;
  }
  return self;
}

- (BOOL) send_healthPoke: (AromaEndpoint_HealthPokeRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"healthPoke" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"ApplicationEndpoint_healthPoke_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_healthPoke: (AromaEndpoint_HealthPokeResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaEndpoint_ApplicationEndpoint_healthPoke_result * resulter = [AromaEndpoint_ApplicationEndpoint_healthPoke_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"healthPoke"}];
  }
  return NO;
}

- (AromaEndpoint_HealthPokeResponse *) healthPoke: (AromaEndpoint_HealthPokeRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_healthPoke : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaEndpoint_HealthPokeResponse * __result;
  if (![self recv_healthPoke: &__result error: __thriftError]) return nil;
  return __result;
}

@end

@interface AromaEndpoint_ApplicationEndpointProcessor () {
  id <AromaEndpoint_ApplicationEndpoint> service;
  NSDictionary * methodMap;
}
@end

@implementation AromaEndpoint_ApplicationEndpointProcessor

- (id) initWithApplicationEndpoint: (id <AromaEndpoint_ApplicationEndpoint>) aService
{
  self = [super init];
  if (self)   {
    service = aService;
    methodMap = [NSMutableDictionary dictionary];
    {
      SEL s = @selector(process_healthPoke_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"healthPoke"];
    }
  }
  return self;
}

- (id<AromaEndpoint_ApplicationEndpoint>) service
{
  return service;
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
                          error: (NSError *__autoreleasing *)__thriftError
{
  NSString * messageName;
  SInt32 messageType;
  SInt32 seqID;
  if (![inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID
                                      error: __thriftError]) return NO;
  NSInvocation * invocation = [methodMap valueForKey: messageName];
  if (invocation == nil) {
    if (![TProtocolUtil skipType: TTypeSTRUCT onProtocol: inProtocol error: __thriftError]) return NO;
    if (![inProtocol readMessageEnd: __thriftError]) return NO;
    NSError * x = [NSError errorWithDomain: TApplicationErrorDomain
                                      code: TApplicationErrorUnknownMethod
                                  userInfo: @{TApplicationErrorMethodKey: messageName}];
    if (![outProtocol writeMessageBeginWithName: messageName
                                           type: TMessageTypeEXCEPTION
                                     sequenceID: seqID
                                          error: __thriftError]) return NO;
    if (![x write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeMessageEnd: __thriftError]) return NO;
    if (![[outProtocol transport] flush: __thriftError]) return NO;
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setArgument: &__thriftError atIndex: 5];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (BOOL) process_healthPoke_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaEndpoint_ApplicationEndpoint_healthPoke_args * args = [AromaEndpoint_ApplicationEndpoint_healthPoke_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaEndpoint_ApplicationEndpoint_healthPoke_result * result = [AromaEndpoint_ApplicationEndpoint_healthPoke_result new];
  AromaEndpoint_HealthPokeResponse * serviceResult = [service healthPoke: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"healthPoke"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}
@end

