/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TProtocolFactory.h"
#import "TApplicationError.h"
#import "TProtocolError.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TBaseClient.h"

#import "AromaAuthentication_Authentication.h"
#import "Aroma_Aroma.h"

#import "AromaEvents_Events.h"

@implementation AromaEvents_ApplicationMessagesDeleted

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.message = @"Application's messages have been deleted";

  }
  return self;
}

- (instancetype) initWithTotalMessagesDeleted: (AromaEvents_int) totalMessagesDeleted message: (NSString *) message
{
  self = [super init];
  if (self)  {
    _totalMessagesDeleted = totalMessagesDeleted;
    _totalMessagesDeletedIsSet = YES;
    _message = message;
    _messageIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"totalMessagesDeleted"])
    {
      _totalMessagesDeleted = [decoder decodeInt32ForKey: @"totalMessagesDeleted"];
      _totalMessagesDeletedIsSet = YES;
    }
    if ([decoder containsValueForKey: @"message"])
    {
      _message = [decoder decodeObjectForKey: @"message"];
      _messageIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_totalMessagesDeletedIsSet)
  {
    [encoder encodeInt32: _totalMessagesDeleted forKey: @"totalMessagesDeleted"];
  }
  if (_messageIsSet)
  {
    [encoder encodeObject: _message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _totalMessagesDeletedIsSet ? 2654435761 : 0;
  if (_totalMessagesDeletedIsSet)
  {
    hash = (hash * 31) ^ [@(_totalMessagesDeleted) hash];
  }
  hash = (hash * 31) ^ _messageIsSet ? 2654435761 : 0;
  if (_messageIsSet)
  {
    hash = (hash * 31) ^ [_message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEvents_ApplicationMessagesDeleted class]]) {
    return NO;
  }
  AromaEvents_ApplicationMessagesDeleted *other = (AromaEvents_ApplicationMessagesDeleted *)anObject;
  if ((_totalMessagesDeletedIsSet != other->_totalMessagesDeletedIsSet) ||
      (_totalMessagesDeletedIsSet && (_totalMessagesDeleted != other->_totalMessagesDeleted))) {
    return NO;
  }
  if ((_messageIsSet != other->_messageIsSet) ||
      (_messageIsSet && ((_message || other->_message) && ![_message isEqual:other->_message]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaEvents_ApplicationMessagesDeleted * val = [AromaEvents_ApplicationMessagesDeleted new];
  if (_totalMessagesDeletedIsSet)
  {
    val.totalMessagesDeleted = self.totalMessagesDeleted;
  }
  if (_messageIsSet)
  {
    val.message = [self.message copy];
  }
  return val;
}

- (void) setTotalMessagesDeleted: (SInt32) totalMessagesDeleted {
  _totalMessagesDeleted = totalMessagesDeleted;
  _totalMessagesDeletedIsSet = YES;
}

- (void) unsetTotalMessagesDeleted {
  _totalMessagesDeletedIsSet = NO;
}

- (void) setMessage: (NSString *) message {
  _message = message;
  _messageIsSet = YES;
}

- (void) unsetMessage {
  _message = nil;
  _messageIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeI32) {
          SInt32 fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.totalMessagesDeleted = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.message = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ApplicationMessagesDeleted" error: __thriftError]) return NO;
  if (_totalMessagesDeletedIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"totalMessagesDeleted" type: TTypeI32 fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _totalMessagesDeleted error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_messageIsSet) {
    if (_message != nil) {
      if (![outProtocol writeFieldBeginWithName: @"message" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _message error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEvents_ApplicationMessagesDeleted("];
  [ms appendString: @"totalMessagesDeleted:"];
  [ms appendFormat: @"%i", (int)_totalMessagesDeleted];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", _message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEvents_ApplicationTokenRenewed

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.message = @"Application Token has been renewed";

  }
  return self;
}

- (instancetype) initWithApplicationToken: (AromaEvents_ApplicationToken) applicationToken message: (NSString *) message
{
  self = [super init];
  if (self)  {
    _applicationToken = applicationToken;
    _applicationTokenIsSet = YES;
    _message = message;
    _messageIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"applicationToken"])
    {
      _applicationToken = [decoder decodeObjectForKey: @"applicationToken"];
      _applicationTokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"message"])
    {
      _message = [decoder decodeObjectForKey: @"message"];
      _messageIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_applicationTokenIsSet)
  {
    [encoder encodeObject: _applicationToken forKey: @"applicationToken"];
  }
  if (_messageIsSet)
  {
    [encoder encodeObject: _message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _applicationTokenIsSet ? 2654435761 : 0;
  if (_applicationTokenIsSet)
  {
    hash = (hash * 31) ^ [_applicationToken hash];
  }
  hash = (hash * 31) ^ _messageIsSet ? 2654435761 : 0;
  if (_messageIsSet)
  {
    hash = (hash * 31) ^ [_message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEvents_ApplicationTokenRenewed class]]) {
    return NO;
  }
  AromaEvents_ApplicationTokenRenewed *other = (AromaEvents_ApplicationTokenRenewed *)anObject;
  if ((_applicationTokenIsSet != other->_applicationTokenIsSet) ||
      (_applicationTokenIsSet && ((_applicationToken || other->_applicationToken) && ![_applicationToken isEqual:other->_applicationToken]))) {
    return NO;
  }
  if ((_messageIsSet != other->_messageIsSet) ||
      (_messageIsSet && ((_message || other->_message) && ![_message isEqual:other->_message]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaEvents_ApplicationTokenRenewed * val = [AromaEvents_ApplicationTokenRenewed new];
  if (_applicationTokenIsSet)
  {
    val.applicationToken = [self.applicationToken copy];
  }
  if (_messageIsSet)
  {
    val.message = [self.message copy];
  }
  return val;
}

- (void) setApplicationToken: (AromaAuthentication_ApplicationToken *) applicationToken {
  _applicationToken = applicationToken;
  _applicationTokenIsSet = YES;
}

- (void) unsetApplicationToken {
  _applicationToken = nil;
  _applicationTokenIsSet = NO;
}

- (void) setMessage: (NSString *) message {
  _message = message;
  _messageIsSet = YES;
}

- (void) unsetMessage {
  _message = nil;
  _messageIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_ApplicationToken *fieldValue = [[AromaAuthentication_ApplicationToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.applicationToken = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.message = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ApplicationTokenRenewed" error: __thriftError]) return NO;
  if (_applicationTokenIsSet) {
    if (_applicationToken != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationToken" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_applicationToken write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_messageIsSet) {
    if (_message != nil) {
      if (![outProtocol writeFieldBeginWithName: @"message" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _message error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEvents_ApplicationTokenRenewed("];
  [ms appendString: @"applicationToken:"];
  [ms appendFormat: @"%@", _applicationToken];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", _message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEvents_ApplicationTokenRegenerated

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.message = @"Application Token has been re-created";

  }
  return self;
}

- (instancetype) initWithApplicationToken: (AromaEvents_ApplicationToken) applicationToken actor: (AromaEvents_User) actor message: (NSString *) message
{
  self = [super init];
  if (self)  {
    _applicationToken = applicationToken;
    _applicationTokenIsSet = YES;
    _actor = actor;
    _actorIsSet = YES;
    _message = message;
    _messageIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"applicationToken"])
    {
      _applicationToken = [decoder decodeObjectForKey: @"applicationToken"];
      _applicationTokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"actor"])
    {
      _actor = [decoder decodeObjectForKey: @"actor"];
      _actorIsSet = YES;
    }
    if ([decoder containsValueForKey: @"message"])
    {
      _message = [decoder decodeObjectForKey: @"message"];
      _messageIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_applicationTokenIsSet)
  {
    [encoder encodeObject: _applicationToken forKey: @"applicationToken"];
  }
  if (_actorIsSet)
  {
    [encoder encodeObject: _actor forKey: @"actor"];
  }
  if (_messageIsSet)
  {
    [encoder encodeObject: _message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _applicationTokenIsSet ? 2654435761 : 0;
  if (_applicationTokenIsSet)
  {
    hash = (hash * 31) ^ [_applicationToken hash];
  }
  hash = (hash * 31) ^ _actorIsSet ? 2654435761 : 0;
  if (_actorIsSet)
  {
    hash = (hash * 31) ^ [_actor hash];
  }
  hash = (hash * 31) ^ _messageIsSet ? 2654435761 : 0;
  if (_messageIsSet)
  {
    hash = (hash * 31) ^ [_message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEvents_ApplicationTokenRegenerated class]]) {
    return NO;
  }
  AromaEvents_ApplicationTokenRegenerated *other = (AromaEvents_ApplicationTokenRegenerated *)anObject;
  if ((_applicationTokenIsSet != other->_applicationTokenIsSet) ||
      (_applicationTokenIsSet && ((_applicationToken || other->_applicationToken) && ![_applicationToken isEqual:other->_applicationToken]))) {
    return NO;
  }
  if ((_actorIsSet != other->_actorIsSet) ||
      (_actorIsSet && ((_actor || other->_actor) && ![_actor isEqual:other->_actor]))) {
    return NO;
  }
  if ((_messageIsSet != other->_messageIsSet) ||
      (_messageIsSet && ((_message || other->_message) && ![_message isEqual:other->_message]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaEvents_ApplicationTokenRegenerated * val = [AromaEvents_ApplicationTokenRegenerated new];
  if (_applicationTokenIsSet)
  {
    val.applicationToken = [self.applicationToken copy];
  }
  if (_actorIsSet)
  {
    val.actor = [self.actor copy];
  }
  if (_messageIsSet)
  {
    val.message = [self.message copy];
  }
  return val;
}

- (void) setApplicationToken: (AromaAuthentication_ApplicationToken *) applicationToken {
  _applicationToken = applicationToken;
  _applicationTokenIsSet = YES;
}

- (void) unsetApplicationToken {
  _applicationToken = nil;
  _applicationTokenIsSet = NO;
}

- (void) setActor: (Aroma_User *) actor {
  _actor = actor;
  _actorIsSet = YES;
}

- (void) unsetActor {
  _actor = nil;
  _actorIsSet = NO;
}

- (void) setMessage: (NSString *) message {
  _message = message;
  _messageIsSet = YES;
}

- (void) unsetMessage {
  _message = nil;
  _messageIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_ApplicationToken *fieldValue = [[AromaAuthentication_ApplicationToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.applicationToken = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          Aroma_User *fieldValue = [[Aroma_User alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.actor = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.message = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ApplicationTokenRegenerated" error: __thriftError]) return NO;
  if (_applicationTokenIsSet) {
    if (_applicationToken != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationToken" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_applicationToken write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_actorIsSet) {
    if (_actor != nil) {
      if (![outProtocol writeFieldBeginWithName: @"actor" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_actor write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_messageIsSet) {
    if (_message != nil) {
      if (![outProtocol writeFieldBeginWithName: @"message" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _message error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEvents_ApplicationTokenRegenerated("];
  [ms appendString: @"applicationToken:"];
  [ms appendFormat: @"%@", _applicationToken];
  [ms appendString: @",actor:"];
  [ms appendFormat: @"%@", _actor];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", _message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEvents_ApplicationSentMessage

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.message = @"Application has sent an Alert";

  }
  return self;
}

- (instancetype) initWithMessageId: (AromaEvents_uuid) messageId messageSentByApplication: (Aroma_Message *) messageSentByApplication message: (NSString *) message
{
  self = [super init];
  if (self)  {
    _messageId = messageId;
    _messageIdIsSet = YES;
    _messageSentByApplication = messageSentByApplication;
    _messageSentByApplicationIsSet = YES;
    _message = message;
    _messageIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"messageId"])
    {
      _messageId = [decoder decodeObjectForKey: @"messageId"];
      _messageIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"messageSentByApplication"])
    {
      _messageSentByApplication = [decoder decodeObjectForKey: @"messageSentByApplication"];
      _messageSentByApplicationIsSet = YES;
    }
    if ([decoder containsValueForKey: @"message"])
    {
      _message = [decoder decodeObjectForKey: @"message"];
      _messageIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_messageIdIsSet)
  {
    [encoder encodeObject: _messageId forKey: @"messageId"];
  }
  if (_messageSentByApplicationIsSet)
  {
    [encoder encodeObject: _messageSentByApplication forKey: @"messageSentByApplication"];
  }
  if (_messageIsSet)
  {
    [encoder encodeObject: _message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _messageIdIsSet ? 2654435761 : 0;
  if (_messageIdIsSet)
  {
    hash = (hash * 31) ^ [_messageId hash];
  }
  hash = (hash * 31) ^ _messageSentByApplicationIsSet ? 2654435761 : 0;
  if (_messageSentByApplicationIsSet)
  {
    hash = (hash * 31) ^ [_messageSentByApplication hash];
  }
  hash = (hash * 31) ^ _messageIsSet ? 2654435761 : 0;
  if (_messageIsSet)
  {
    hash = (hash * 31) ^ [_message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEvents_ApplicationSentMessage class]]) {
    return NO;
  }
  AromaEvents_ApplicationSentMessage *other = (AromaEvents_ApplicationSentMessage *)anObject;
  if ((_messageIdIsSet != other->_messageIdIsSet) ||
      (_messageIdIsSet && ((_messageId || other->_messageId) && ![_messageId isEqual:other->_messageId]))) {
    return NO;
  }
  if ((_messageSentByApplicationIsSet != other->_messageSentByApplicationIsSet) ||
      (_messageSentByApplicationIsSet && ((_messageSentByApplication || other->_messageSentByApplication) && ![_messageSentByApplication isEqual:other->_messageSentByApplication]))) {
    return NO;
  }
  if ((_messageIsSet != other->_messageIsSet) ||
      (_messageIsSet && ((_message || other->_message) && ![_message isEqual:other->_message]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaEvents_ApplicationSentMessage * val = [AromaEvents_ApplicationSentMessage new];
  if (_messageIdIsSet)
  {
    val.messageId = [self.messageId copy];
  }
  if (_messageSentByApplicationIsSet)
  {
    val.messageSentByApplication = [self.messageSentByApplication copy];
  }
  if (_messageIsSet)
  {
    val.message = [self.message copy];
  }
  return val;
}

- (void) setMessageId: (NSString *) messageId {
  _messageId = messageId;
  _messageIdIsSet = YES;
}

- (void) unsetMessageId {
  _messageId = nil;
  _messageIdIsSet = NO;
}

- (void) setMessageSentByApplication: (Aroma_Message *) messageSentByApplication {
  _messageSentByApplication = messageSentByApplication;
  _messageSentByApplicationIsSet = YES;
}

- (void) unsetMessageSentByApplication {
  _messageSentByApplication = nil;
  _messageSentByApplicationIsSet = NO;
}

- (void) setMessage: (NSString *) message {
  _message = message;
  _messageIsSet = YES;
}

- (void) unsetMessage {
  _message = nil;
  _messageIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.messageId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          Aroma_Message *fieldValue = [[Aroma_Message alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.messageSentByApplication = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.message = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ApplicationSentMessage" error: __thriftError]) return NO;
  if (_messageIdIsSet) {
    if (_messageId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"messageId" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _messageId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_messageSentByApplicationIsSet) {
    if (_messageSentByApplication != nil) {
      if (![outProtocol writeFieldBeginWithName: @"messageSentByApplication" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_messageSentByApplication write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_messageIsSet) {
    if (_message != nil) {
      if (![outProtocol writeFieldBeginWithName: @"message" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _message error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEvents_ApplicationSentMessage("];
  [ms appendString: @"messageId:"];
  [ms appendFormat: @"\"%@\"", _messageId];
  [ms appendString: @",messageSentByApplication:"];
  [ms appendFormat: @"%@", _messageSentByApplication];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", _message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEvents_ApplicationDeleted

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.message = @"Application has been deleted";

  }
  return self;
}

- (instancetype) initWithMessage: (NSString *) message
{
  self = [super init];
  if (self)  {
    _message = message;
    _messageIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"message"])
    {
      _message = [decoder decodeObjectForKey: @"message"];
      _messageIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_messageIsSet)
  {
    [encoder encodeObject: _message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _messageIsSet ? 2654435761 : 0;
  if (_messageIsSet)
  {
    hash = (hash * 31) ^ [_message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEvents_ApplicationDeleted class]]) {
    return NO;
  }
  AromaEvents_ApplicationDeleted *other = (AromaEvents_ApplicationDeleted *)anObject;
  if ((_messageIsSet != other->_messageIsSet) ||
      (_messageIsSet && ((_message || other->_message) && ![_message isEqual:other->_message]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaEvents_ApplicationDeleted * val = [AromaEvents_ApplicationDeleted new];
  if (_messageIsSet)
  {
    val.message = [self.message copy];
  }
  return val;
}

- (void) setMessage: (NSString *) message {
  _message = message;
  _messageIsSet = YES;
}

- (void) unsetMessage {
  _message = nil;
  _messageIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.message = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ApplicationDeleted" error: __thriftError]) return NO;
  if (_messageIsSet) {
    if (_message != nil) {
      if (![outProtocol writeFieldBeginWithName: @"message" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _message error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEvents_ApplicationDeleted("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", _message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEvents_ApplicationFollowed

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.message = @"Application Followed";

  }
  return self;
}

- (instancetype) initWithMessage: (NSString *) message
{
  self = [super init];
  if (self)  {
    _message = message;
    _messageIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"message"])
    {
      _message = [decoder decodeObjectForKey: @"message"];
      _messageIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_messageIsSet)
  {
    [encoder encodeObject: _message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _messageIsSet ? 2654435761 : 0;
  if (_messageIsSet)
  {
    hash = (hash * 31) ^ [_message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEvents_ApplicationFollowed class]]) {
    return NO;
  }
  AromaEvents_ApplicationFollowed *other = (AromaEvents_ApplicationFollowed *)anObject;
  if ((_messageIsSet != other->_messageIsSet) ||
      (_messageIsSet && ((_message || other->_message) && ![_message isEqual:other->_message]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaEvents_ApplicationFollowed * val = [AromaEvents_ApplicationFollowed new];
  if (_messageIsSet)
  {
    val.message = [self.message copy];
  }
  return val;
}

- (void) setMessage: (NSString *) message {
  _message = message;
  _messageIsSet = YES;
}

- (void) unsetMessage {
  _message = nil;
  _messageIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.message = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ApplicationFollowed" error: __thriftError]) return NO;
  if (_messageIsSet) {
    if (_message != nil) {
      if (![outProtocol writeFieldBeginWithName: @"message" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _message error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEvents_ApplicationFollowed("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", _message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEvents_ApplicationUnfollowed

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.message = @"Application Unfollowed";

  }
  return self;
}

- (instancetype) initWithMessage: (NSString *) message
{
  self = [super init];
  if (self)  {
    _message = message;
    _messageIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"message"])
    {
      _message = [decoder decodeObjectForKey: @"message"];
      _messageIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_messageIsSet)
  {
    [encoder encodeObject: _message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _messageIsSet ? 2654435761 : 0;
  if (_messageIsSet)
  {
    hash = (hash * 31) ^ [_message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEvents_ApplicationUnfollowed class]]) {
    return NO;
  }
  AromaEvents_ApplicationUnfollowed *other = (AromaEvents_ApplicationUnfollowed *)anObject;
  if ((_messageIsSet != other->_messageIsSet) ||
      (_messageIsSet && ((_message || other->_message) && ![_message isEqual:other->_message]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaEvents_ApplicationUnfollowed * val = [AromaEvents_ApplicationUnfollowed new];
  if (_messageIsSet)
  {
    val.message = [self.message copy];
  }
  return val;
}

- (void) setMessage: (NSString *) message {
  _message = message;
  _messageIsSet = YES;
}

- (void) unsetMessage {
  _message = nil;
  _messageIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.message = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ApplicationUnfollowed" error: __thriftError]) return NO;
  if (_messageIsSet) {
    if (_message != nil) {
      if (![outProtocol writeFieldBeginWithName: @"message" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _message error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEvents_ApplicationUnfollowed("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", _message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEvents_ApplicationUpdated

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.message = @"Application Updated";

  }
  return self;
}

- (instancetype) initWithMessage: (NSString *) message
{
  self = [super init];
  if (self)  {
    _message = message;
    _messageIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"message"])
    {
      _message = [decoder decodeObjectForKey: @"message"];
      _messageIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_messageIsSet)
  {
    [encoder encodeObject: _message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _messageIsSet ? 2654435761 : 0;
  if (_messageIsSet)
  {
    hash = (hash * 31) ^ [_message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEvents_ApplicationUpdated class]]) {
    return NO;
  }
  AromaEvents_ApplicationUpdated *other = (AromaEvents_ApplicationUpdated *)anObject;
  if ((_messageIsSet != other->_messageIsSet) ||
      (_messageIsSet && ((_message || other->_message) && ![_message isEqual:other->_message]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaEvents_ApplicationUpdated * val = [AromaEvents_ApplicationUpdated new];
  if (_messageIsSet)
  {
    val.message = [self.message copy];
  }
  return val;
}

- (void) setMessage: (NSString *) message {
  _message = message;
  _messageIsSet = YES;
}

- (void) unsetMessage {
  _message = nil;
  _messageIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.message = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ApplicationUpdated" error: __thriftError]) return NO;
  if (_messageIsSet) {
    if (_message != nil) {
      if (![outProtocol writeFieldBeginWithName: @"message" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _message error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEvents_ApplicationUpdated("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", _message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEvents_ApplicationReactionsUpdated

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.message = @"Application Reactions Updated";

  }
  return self;
}

- (instancetype) initWithMessage: (NSString *) message
{
  self = [super init];
  if (self)  {
    _message = message;
    _messageIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"message"])
    {
      _message = [decoder decodeObjectForKey: @"message"];
      _messageIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_messageIsSet)
  {
    [encoder encodeObject: _message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _messageIsSet ? 2654435761 : 0;
  if (_messageIsSet)
  {
    hash = (hash * 31) ^ [_message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEvents_ApplicationReactionsUpdated class]]) {
    return NO;
  }
  AromaEvents_ApplicationReactionsUpdated *other = (AromaEvents_ApplicationReactionsUpdated *)anObject;
  if ((_messageIsSet != other->_messageIsSet) ||
      (_messageIsSet && ((_message || other->_message) && ![_message isEqual:other->_message]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaEvents_ApplicationReactionsUpdated * val = [AromaEvents_ApplicationReactionsUpdated new];
  if (_messageIsSet)
  {
    val.message = [self.message copy];
  }
  return val;
}

- (void) setMessage: (NSString *) message {
  _message = message;
  _messageIsSet = YES;
}

- (void) unsetMessage {
  _message = nil;
  _messageIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.message = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ApplicationReactionsUpdated" error: __thriftError]) return NO;
  if (_messageIsSet) {
    if (_message != nil) {
      if (![outProtocol writeFieldBeginWithName: @"message" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _message error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEvents_ApplicationReactionsUpdated("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", _message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEvents_HealthCheckFailed

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.message = @"Application failed a Health Check";

  }
  return self;
}

- (instancetype) initWithHostname: (NSString *) hostname message: (NSString *) message
{
  self = [super init];
  if (self)  {
    _hostname = hostname;
    _hostnameIsSet = YES;
    _message = message;
    _messageIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"hostname"])
    {
      _hostname = [decoder decodeObjectForKey: @"hostname"];
      _hostnameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"message"])
    {
      _message = [decoder decodeObjectForKey: @"message"];
      _messageIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_hostnameIsSet)
  {
    [encoder encodeObject: _hostname forKey: @"hostname"];
  }
  if (_messageIsSet)
  {
    [encoder encodeObject: _message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _hostnameIsSet ? 2654435761 : 0;
  if (_hostnameIsSet)
  {
    hash = (hash * 31) ^ [_hostname hash];
  }
  hash = (hash * 31) ^ _messageIsSet ? 2654435761 : 0;
  if (_messageIsSet)
  {
    hash = (hash * 31) ^ [_message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEvents_HealthCheckFailed class]]) {
    return NO;
  }
  AromaEvents_HealthCheckFailed *other = (AromaEvents_HealthCheckFailed *)anObject;
  if ((_hostnameIsSet != other->_hostnameIsSet) ||
      (_hostnameIsSet && ((_hostname || other->_hostname) && ![_hostname isEqual:other->_hostname]))) {
    return NO;
  }
  if ((_messageIsSet != other->_messageIsSet) ||
      (_messageIsSet && ((_message || other->_message) && ![_message isEqual:other->_message]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaEvents_HealthCheckFailed * val = [AromaEvents_HealthCheckFailed new];
  if (_hostnameIsSet)
  {
    val.hostname = [self.hostname copy];
  }
  if (_messageIsSet)
  {
    val.message = [self.message copy];
  }
  return val;
}

- (void) setHostname: (NSString *) hostname {
  _hostname = hostname;
  _hostnameIsSet = YES;
}

- (void) unsetHostname {
  _hostname = nil;
  _hostnameIsSet = NO;
}

- (void) setMessage: (NSString *) message {
  _message = message;
  _messageIsSet = YES;
}

- (void) unsetMessage {
  _message = nil;
  _messageIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.hostname = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.message = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"HealthCheckFailed" error: __thriftError]) return NO;
  if (_hostnameIsSet) {
    if (_hostname != nil) {
      if (![outProtocol writeFieldBeginWithName: @"hostname" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _hostname error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_messageIsSet) {
    if (_message != nil) {
      if (![outProtocol writeFieldBeginWithName: @"message" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _message error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEvents_HealthCheckFailed("];
  [ms appendString: @"hostname:"];
  [ms appendFormat: @"\"%@\"", _hostname];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", _message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEvents_HealthCheckBackToNormal

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.message = @"Application's Health is back to normal";

  }
  return self;
}

- (instancetype) initWithMessage: (NSString *) message
{
  self = [super init];
  if (self)  {
    _message = message;
    _messageIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"message"])
    {
      _message = [decoder decodeObjectForKey: @"message"];
      _messageIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_messageIsSet)
  {
    [encoder encodeObject: _message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _messageIsSet ? 2654435761 : 0;
  if (_messageIsSet)
  {
    hash = (hash * 31) ^ [_message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEvents_HealthCheckBackToNormal class]]) {
    return NO;
  }
  AromaEvents_HealthCheckBackToNormal *other = (AromaEvents_HealthCheckBackToNormal *)anObject;
  if ((_messageIsSet != other->_messageIsSet) ||
      (_messageIsSet && ((_message || other->_message) && ![_message isEqual:other->_message]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaEvents_HealthCheckBackToNormal * val = [AromaEvents_HealthCheckBackToNormal new];
  if (_messageIsSet)
  {
    val.message = [self.message copy];
  }
  return val;
}

- (void) setMessage: (NSString *) message {
  _message = message;
  _messageIsSet = YES;
}

- (void) unsetMessage {
  _message = nil;
  _messageIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.message = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"HealthCheckBackToNormal" error: __thriftError]) return NO;
  if (_messageIsSet) {
    if (_message != nil) {
      if (![outProtocol writeFieldBeginWithName: @"message" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _message error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEvents_HealthCheckBackToNormal("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", _message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEvents_OwnerAdded

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.message = @"New Owner Added";

  }
  return self;
}

- (instancetype) initWithUserIdOfNewOwner: (AromaEvents_uuid) userIdOfNewOwner newOwner: (AromaEvents_User) newOwner message: (NSString *) message
{
  self = [super init];
  if (self)  {
    _userIdOfNewOwner = userIdOfNewOwner;
    _userIdOfNewOwnerIsSet = YES;
    _newOwner = newOwner;
    _newOwnerIsSet = YES;
    _message = message;
    _messageIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"userIdOfNewOwner"])
    {
      _userIdOfNewOwner = [decoder decodeObjectForKey: @"userIdOfNewOwner"];
      _userIdOfNewOwnerIsSet = YES;
    }
    if ([decoder containsValueForKey: @"newOwner"])
    {
      _newOwner = [decoder decodeObjectForKey: @"newOwner"];
      _newOwnerIsSet = YES;
    }
    if ([decoder containsValueForKey: @"message"])
    {
      _message = [decoder decodeObjectForKey: @"message"];
      _messageIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_userIdOfNewOwnerIsSet)
  {
    [encoder encodeObject: _userIdOfNewOwner forKey: @"userIdOfNewOwner"];
  }
  if (_newOwnerIsSet)
  {
    [encoder encodeObject: _newOwner forKey: @"newOwner"];
  }
  if (_messageIsSet)
  {
    [encoder encodeObject: _message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _userIdOfNewOwnerIsSet ? 2654435761 : 0;
  if (_userIdOfNewOwnerIsSet)
  {
    hash = (hash * 31) ^ [_userIdOfNewOwner hash];
  }
  hash = (hash * 31) ^ _newOwnerIsSet ? 2654435761 : 0;
  if (_newOwnerIsSet)
  {
    hash = (hash * 31) ^ [_newOwner hash];
  }
  hash = (hash * 31) ^ _messageIsSet ? 2654435761 : 0;
  if (_messageIsSet)
  {
    hash = (hash * 31) ^ [_message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEvents_OwnerAdded class]]) {
    return NO;
  }
  AromaEvents_OwnerAdded *other = (AromaEvents_OwnerAdded *)anObject;
  if ((_userIdOfNewOwnerIsSet != other->_userIdOfNewOwnerIsSet) ||
      (_userIdOfNewOwnerIsSet && ((_userIdOfNewOwner || other->_userIdOfNewOwner) && ![_userIdOfNewOwner isEqual:other->_userIdOfNewOwner]))) {
    return NO;
  }
  if ((_newOwnerIsSet != other->_newOwnerIsSet) ||
      (_newOwnerIsSet && ((_newOwner || other->_newOwner) && ![_newOwner isEqual:other->_newOwner]))) {
    return NO;
  }
  if ((_messageIsSet != other->_messageIsSet) ||
      (_messageIsSet && ((_message || other->_message) && ![_message isEqual:other->_message]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaEvents_OwnerAdded * val = [AromaEvents_OwnerAdded new];
  if (_userIdOfNewOwnerIsSet)
  {
    val.userIdOfNewOwner = [self.userIdOfNewOwner copy];
  }
  if (_newOwnerIsSet)
  {
    val.newOwner = [self.newOwner copy];
  }
  if (_messageIsSet)
  {
    val.message = [self.message copy];
  }
  return val;
}

- (void) setUserIdOfNewOwner: (NSString *) userIdOfNewOwner {
  _userIdOfNewOwner = userIdOfNewOwner;
  _userIdOfNewOwnerIsSet = YES;
}

- (void) unsetUserIdOfNewOwner {
  _userIdOfNewOwner = nil;
  _userIdOfNewOwnerIsSet = NO;
}

- (void) setNewOwner: (Aroma_User *) newOwner {
  _newOwner = newOwner;
  _newOwnerIsSet = YES;
}

- (void) unsetNewOwner {
  _newOwner = nil;
  _newOwnerIsSet = NO;
}

- (void) setMessage: (NSString *) message {
  _message = message;
  _messageIsSet = YES;
}

- (void) unsetMessage {
  _message = nil;
  _messageIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.userIdOfNewOwner = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          Aroma_User *fieldValue = [[Aroma_User alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.newOwner = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.message = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"OwnerAdded" error: __thriftError]) return NO;
  if (_userIdOfNewOwnerIsSet) {
    if (_userIdOfNewOwner != nil) {
      if (![outProtocol writeFieldBeginWithName: @"userIdOfNewOwner" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _userIdOfNewOwner error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_newOwnerIsSet) {
    if (_newOwner != nil) {
      if (![outProtocol writeFieldBeginWithName: @"newOwner" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_newOwner write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_messageIsSet) {
    if (_message != nil) {
      if (![outProtocol writeFieldBeginWithName: @"message" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _message error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEvents_OwnerAdded("];
  [ms appendString: @"userIdOfNewOwner:"];
  [ms appendFormat: @"\"%@\"", _userIdOfNewOwner];
  [ms appendString: @",newOwner:"];
  [ms appendFormat: @"%@", _newOwner];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", _message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEvents_OwnerApprovedRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.message = @"Application Owner approved your request";

  }
  return self;
}

- (instancetype) initWithMessage: (NSString *) message
{
  self = [super init];
  if (self)  {
    _message = message;
    _messageIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"message"])
    {
      _message = [decoder decodeObjectForKey: @"message"];
      _messageIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_messageIsSet)
  {
    [encoder encodeObject: _message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _messageIsSet ? 2654435761 : 0;
  if (_messageIsSet)
  {
    hash = (hash * 31) ^ [_message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEvents_OwnerApprovedRequest class]]) {
    return NO;
  }
  AromaEvents_OwnerApprovedRequest *other = (AromaEvents_OwnerApprovedRequest *)anObject;
  if ((_messageIsSet != other->_messageIsSet) ||
      (_messageIsSet && ((_message || other->_message) && ![_message isEqual:other->_message]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaEvents_OwnerApprovedRequest * val = [AromaEvents_OwnerApprovedRequest new];
  if (_messageIsSet)
  {
    val.message = [self.message copy];
  }
  return val;
}

- (void) setMessage: (NSString *) message {
  _message = message;
  _messageIsSet = YES;
}

- (void) unsetMessage {
  _message = nil;
  _messageIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.message = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"OwnerApprovedRequest" error: __thriftError]) return NO;
  if (_messageIsSet) {
    if (_message != nil) {
      if (![outProtocol writeFieldBeginWithName: @"message" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _message error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEvents_OwnerApprovedRequest("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", _message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEvents_GeneralEvent

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithMessage: (NSString *) message
{
  self = [super init];
  if (self)  {
    _message = message;
    _messageIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"message"])
    {
      _message = [decoder decodeObjectForKey: @"message"];
      _messageIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_messageIsSet)
  {
    [encoder encodeObject: _message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _messageIsSet ? 2654435761 : 0;
  if (_messageIsSet)
  {
    hash = (hash * 31) ^ [_message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEvents_GeneralEvent class]]) {
    return NO;
  }
  AromaEvents_GeneralEvent *other = (AromaEvents_GeneralEvent *)anObject;
  if ((_messageIsSet != other->_messageIsSet) ||
      (_messageIsSet && ((_message || other->_message) && ![_message isEqual:other->_message]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaEvents_GeneralEvent * val = [AromaEvents_GeneralEvent new];
  if (_messageIsSet)
  {
    val.message = [self.message copy];
  }
  return val;
}

- (void) setMessage: (NSString *) message {
  _message = message;
  _messageIsSet = YES;
}

- (void) unsetMessage {
  _message = nil;
  _messageIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.message = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"GeneralEvent" error: __thriftError]) return NO;
  if (_messageIsSet) {
    if (_message != nil) {
      if (![outProtocol writeFieldBeginWithName: @"message" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _message error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEvents_GeneralEvent("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", _message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEvents_EventType

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithApplicationMessageDeleted: (AromaEvents_ApplicationMessagesDeleted *) applicationMessageDeleted healthCheckFailed: (AromaEvents_HealthCheckFailed *) healthCheckFailed healthCheckBackToNormal: (AromaEvents_HealthCheckBackToNormal *) healthCheckBackToNormal applicationFollowed: (AromaEvents_ApplicationFollowed *) applicationFollowed applicationDeleted: (AromaEvents_ApplicationDeleted *) applicationDeleted applicationReactionsUpdated: (AromaEvents_ApplicationReactionsUpdated *) applicationReactionsUpdated applicationTokenRenewed: (AromaEvents_ApplicationTokenRenewed *) applicationTokenRenewed applicationTokenRegenerated: (AromaEvents_ApplicationTokenRegenerated *) applicationTokenRegenerated applicationSentMessage: (AromaEvents_ApplicationSentMessage *) applicationSentMessage applicationUnfollowed: (AromaEvents_ApplicationUnfollowed *) applicationUnfollowed applicationUpdated: (AromaEvents_ApplicationUpdated *) applicationUpdated ownerApprovedRequest: (AromaEvents_OwnerApprovedRequest *) ownerApprovedRequest ownerAdded: (AromaEvents_OwnerAdded *) ownerAdded generalEvent: (AromaEvents_GeneralEvent *) generalEvent
{
  self = [super init];
  if (self)  {
    _applicationMessageDeleted = applicationMessageDeleted;
    _applicationMessageDeletedIsSet = YES;
    _healthCheckFailed = healthCheckFailed;
    _healthCheckFailedIsSet = YES;
    _healthCheckBackToNormal = healthCheckBackToNormal;
    _healthCheckBackToNormalIsSet = YES;
    _applicationFollowed = applicationFollowed;
    _applicationFollowedIsSet = YES;
    _applicationDeleted = applicationDeleted;
    _applicationDeletedIsSet = YES;
    _applicationReactionsUpdated = applicationReactionsUpdated;
    _applicationReactionsUpdatedIsSet = YES;
    _applicationTokenRenewed = applicationTokenRenewed;
    _applicationTokenRenewedIsSet = YES;
    _applicationTokenRegenerated = applicationTokenRegenerated;
    _applicationTokenRegeneratedIsSet = YES;
    _applicationSentMessage = applicationSentMessage;
    _applicationSentMessageIsSet = YES;
    _applicationUnfollowed = applicationUnfollowed;
    _applicationUnfollowedIsSet = YES;
    _applicationUpdated = applicationUpdated;
    _applicationUpdatedIsSet = YES;
    _ownerApprovedRequest = ownerApprovedRequest;
    _ownerApprovedRequestIsSet = YES;
    _ownerAdded = ownerAdded;
    _ownerAddedIsSet = YES;
    _generalEvent = generalEvent;
    _generalEventIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"applicationMessageDeleted"])
    {
      _applicationMessageDeleted = [decoder decodeObjectForKey: @"applicationMessageDeleted"];
      _applicationMessageDeletedIsSet = YES;
    }
    if ([decoder containsValueForKey: @"healthCheckFailed"])
    {
      _healthCheckFailed = [decoder decodeObjectForKey: @"healthCheckFailed"];
      _healthCheckFailedIsSet = YES;
    }
    if ([decoder containsValueForKey: @"healthCheckBackToNormal"])
    {
      _healthCheckBackToNormal = [decoder decodeObjectForKey: @"healthCheckBackToNormal"];
      _healthCheckBackToNormalIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationFollowed"])
    {
      _applicationFollowed = [decoder decodeObjectForKey: @"applicationFollowed"];
      _applicationFollowedIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationDeleted"])
    {
      _applicationDeleted = [decoder decodeObjectForKey: @"applicationDeleted"];
      _applicationDeletedIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationReactionsUpdated"])
    {
      _applicationReactionsUpdated = [decoder decodeObjectForKey: @"applicationReactionsUpdated"];
      _applicationReactionsUpdatedIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationTokenRenewed"])
    {
      _applicationTokenRenewed = [decoder decodeObjectForKey: @"applicationTokenRenewed"];
      _applicationTokenRenewedIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationTokenRegenerated"])
    {
      _applicationTokenRegenerated = [decoder decodeObjectForKey: @"applicationTokenRegenerated"];
      _applicationTokenRegeneratedIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationSentMessage"])
    {
      _applicationSentMessage = [decoder decodeObjectForKey: @"applicationSentMessage"];
      _applicationSentMessageIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationUnfollowed"])
    {
      _applicationUnfollowed = [decoder decodeObjectForKey: @"applicationUnfollowed"];
      _applicationUnfollowedIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationUpdated"])
    {
      _applicationUpdated = [decoder decodeObjectForKey: @"applicationUpdated"];
      _applicationUpdatedIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ownerApprovedRequest"])
    {
      _ownerApprovedRequest = [decoder decodeObjectForKey: @"ownerApprovedRequest"];
      _ownerApprovedRequestIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ownerAdded"])
    {
      _ownerAdded = [decoder decodeObjectForKey: @"ownerAdded"];
      _ownerAddedIsSet = YES;
    }
    if ([decoder containsValueForKey: @"generalEvent"])
    {
      _generalEvent = [decoder decodeObjectForKey: @"generalEvent"];
      _generalEventIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_applicationMessageDeletedIsSet)
  {
    [encoder encodeObject: _applicationMessageDeleted forKey: @"applicationMessageDeleted"];
  }
  if (_healthCheckFailedIsSet)
  {
    [encoder encodeObject: _healthCheckFailed forKey: @"healthCheckFailed"];
  }
  if (_healthCheckBackToNormalIsSet)
  {
    [encoder encodeObject: _healthCheckBackToNormal forKey: @"healthCheckBackToNormal"];
  }
  if (_applicationFollowedIsSet)
  {
    [encoder encodeObject: _applicationFollowed forKey: @"applicationFollowed"];
  }
  if (_applicationDeletedIsSet)
  {
    [encoder encodeObject: _applicationDeleted forKey: @"applicationDeleted"];
  }
  if (_applicationReactionsUpdatedIsSet)
  {
    [encoder encodeObject: _applicationReactionsUpdated forKey: @"applicationReactionsUpdated"];
  }
  if (_applicationTokenRenewedIsSet)
  {
    [encoder encodeObject: _applicationTokenRenewed forKey: @"applicationTokenRenewed"];
  }
  if (_applicationTokenRegeneratedIsSet)
  {
    [encoder encodeObject: _applicationTokenRegenerated forKey: @"applicationTokenRegenerated"];
  }
  if (_applicationSentMessageIsSet)
  {
    [encoder encodeObject: _applicationSentMessage forKey: @"applicationSentMessage"];
  }
  if (_applicationUnfollowedIsSet)
  {
    [encoder encodeObject: _applicationUnfollowed forKey: @"applicationUnfollowed"];
  }
  if (_applicationUpdatedIsSet)
  {
    [encoder encodeObject: _applicationUpdated forKey: @"applicationUpdated"];
  }
  if (_ownerApprovedRequestIsSet)
  {
    [encoder encodeObject: _ownerApprovedRequest forKey: @"ownerApprovedRequest"];
  }
  if (_ownerAddedIsSet)
  {
    [encoder encodeObject: _ownerAdded forKey: @"ownerAdded"];
  }
  if (_generalEventIsSet)
  {
    [encoder encodeObject: _generalEvent forKey: @"generalEvent"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _applicationMessageDeletedIsSet ? 2654435761 : 0;
  if (_applicationMessageDeletedIsSet)
  {
    hash = (hash * 31) ^ [_applicationMessageDeleted hash];
  }
  hash = (hash * 31) ^ _healthCheckFailedIsSet ? 2654435761 : 0;
  if (_healthCheckFailedIsSet)
  {
    hash = (hash * 31) ^ [_healthCheckFailed hash];
  }
  hash = (hash * 31) ^ _healthCheckBackToNormalIsSet ? 2654435761 : 0;
  if (_healthCheckBackToNormalIsSet)
  {
    hash = (hash * 31) ^ [_healthCheckBackToNormal hash];
  }
  hash = (hash * 31) ^ _applicationFollowedIsSet ? 2654435761 : 0;
  if (_applicationFollowedIsSet)
  {
    hash = (hash * 31) ^ [_applicationFollowed hash];
  }
  hash = (hash * 31) ^ _applicationDeletedIsSet ? 2654435761 : 0;
  if (_applicationDeletedIsSet)
  {
    hash = (hash * 31) ^ [_applicationDeleted hash];
  }
  hash = (hash * 31) ^ _applicationReactionsUpdatedIsSet ? 2654435761 : 0;
  if (_applicationReactionsUpdatedIsSet)
  {
    hash = (hash * 31) ^ [_applicationReactionsUpdated hash];
  }
  hash = (hash * 31) ^ _applicationTokenRenewedIsSet ? 2654435761 : 0;
  if (_applicationTokenRenewedIsSet)
  {
    hash = (hash * 31) ^ [_applicationTokenRenewed hash];
  }
  hash = (hash * 31) ^ _applicationTokenRegeneratedIsSet ? 2654435761 : 0;
  if (_applicationTokenRegeneratedIsSet)
  {
    hash = (hash * 31) ^ [_applicationTokenRegenerated hash];
  }
  hash = (hash * 31) ^ _applicationSentMessageIsSet ? 2654435761 : 0;
  if (_applicationSentMessageIsSet)
  {
    hash = (hash * 31) ^ [_applicationSentMessage hash];
  }
  hash = (hash * 31) ^ _applicationUnfollowedIsSet ? 2654435761 : 0;
  if (_applicationUnfollowedIsSet)
  {
    hash = (hash * 31) ^ [_applicationUnfollowed hash];
  }
  hash = (hash * 31) ^ _applicationUpdatedIsSet ? 2654435761 : 0;
  if (_applicationUpdatedIsSet)
  {
    hash = (hash * 31) ^ [_applicationUpdated hash];
  }
  hash = (hash * 31) ^ _ownerApprovedRequestIsSet ? 2654435761 : 0;
  if (_ownerApprovedRequestIsSet)
  {
    hash = (hash * 31) ^ [_ownerApprovedRequest hash];
  }
  hash = (hash * 31) ^ _ownerAddedIsSet ? 2654435761 : 0;
  if (_ownerAddedIsSet)
  {
    hash = (hash * 31) ^ [_ownerAdded hash];
  }
  hash = (hash * 31) ^ _generalEventIsSet ? 2654435761 : 0;
  if (_generalEventIsSet)
  {
    hash = (hash * 31) ^ [_generalEvent hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEvents_EventType class]]) {
    return NO;
  }
  AromaEvents_EventType *other = (AromaEvents_EventType *)anObject;
  if ((_applicationMessageDeletedIsSet != other->_applicationMessageDeletedIsSet) ||
      (_applicationMessageDeletedIsSet && ((_applicationMessageDeleted || other->_applicationMessageDeleted) && ![_applicationMessageDeleted isEqual:other->_applicationMessageDeleted]))) {
    return NO;
  }
  if ((_healthCheckFailedIsSet != other->_healthCheckFailedIsSet) ||
      (_healthCheckFailedIsSet && ((_healthCheckFailed || other->_healthCheckFailed) && ![_healthCheckFailed isEqual:other->_healthCheckFailed]))) {
    return NO;
  }
  if ((_healthCheckBackToNormalIsSet != other->_healthCheckBackToNormalIsSet) ||
      (_healthCheckBackToNormalIsSet && ((_healthCheckBackToNormal || other->_healthCheckBackToNormal) && ![_healthCheckBackToNormal isEqual:other->_healthCheckBackToNormal]))) {
    return NO;
  }
  if ((_applicationFollowedIsSet != other->_applicationFollowedIsSet) ||
      (_applicationFollowedIsSet && ((_applicationFollowed || other->_applicationFollowed) && ![_applicationFollowed isEqual:other->_applicationFollowed]))) {
    return NO;
  }
  if ((_applicationDeletedIsSet != other->_applicationDeletedIsSet) ||
      (_applicationDeletedIsSet && ((_applicationDeleted || other->_applicationDeleted) && ![_applicationDeleted isEqual:other->_applicationDeleted]))) {
    return NO;
  }
  if ((_applicationReactionsUpdatedIsSet != other->_applicationReactionsUpdatedIsSet) ||
      (_applicationReactionsUpdatedIsSet && ((_applicationReactionsUpdated || other->_applicationReactionsUpdated) && ![_applicationReactionsUpdated isEqual:other->_applicationReactionsUpdated]))) {
    return NO;
  }
  if ((_applicationTokenRenewedIsSet != other->_applicationTokenRenewedIsSet) ||
      (_applicationTokenRenewedIsSet && ((_applicationTokenRenewed || other->_applicationTokenRenewed) && ![_applicationTokenRenewed isEqual:other->_applicationTokenRenewed]))) {
    return NO;
  }
  if ((_applicationTokenRegeneratedIsSet != other->_applicationTokenRegeneratedIsSet) ||
      (_applicationTokenRegeneratedIsSet && ((_applicationTokenRegenerated || other->_applicationTokenRegenerated) && ![_applicationTokenRegenerated isEqual:other->_applicationTokenRegenerated]))) {
    return NO;
  }
  if ((_applicationSentMessageIsSet != other->_applicationSentMessageIsSet) ||
      (_applicationSentMessageIsSet && ((_applicationSentMessage || other->_applicationSentMessage) && ![_applicationSentMessage isEqual:other->_applicationSentMessage]))) {
    return NO;
  }
  if ((_applicationUnfollowedIsSet != other->_applicationUnfollowedIsSet) ||
      (_applicationUnfollowedIsSet && ((_applicationUnfollowed || other->_applicationUnfollowed) && ![_applicationUnfollowed isEqual:other->_applicationUnfollowed]))) {
    return NO;
  }
  if ((_applicationUpdatedIsSet != other->_applicationUpdatedIsSet) ||
      (_applicationUpdatedIsSet && ((_applicationUpdated || other->_applicationUpdated) && ![_applicationUpdated isEqual:other->_applicationUpdated]))) {
    return NO;
  }
  if ((_ownerApprovedRequestIsSet != other->_ownerApprovedRequestIsSet) ||
      (_ownerApprovedRequestIsSet && ((_ownerApprovedRequest || other->_ownerApprovedRequest) && ![_ownerApprovedRequest isEqual:other->_ownerApprovedRequest]))) {
    return NO;
  }
  if ((_ownerAddedIsSet != other->_ownerAddedIsSet) ||
      (_ownerAddedIsSet && ((_ownerAdded || other->_ownerAdded) && ![_ownerAdded isEqual:other->_ownerAdded]))) {
    return NO;
  }
  if ((_generalEventIsSet != other->_generalEventIsSet) ||
      (_generalEventIsSet && ((_generalEvent || other->_generalEvent) && ![_generalEvent isEqual:other->_generalEvent]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaEvents_EventType * val = [AromaEvents_EventType new];
  if (_applicationMessageDeletedIsSet)
  {
    val.applicationMessageDeleted = [self.applicationMessageDeleted copy];
  }
  if (_healthCheckFailedIsSet)
  {
    val.healthCheckFailed = [self.healthCheckFailed copy];
  }
  if (_healthCheckBackToNormalIsSet)
  {
    val.healthCheckBackToNormal = [self.healthCheckBackToNormal copy];
  }
  if (_applicationFollowedIsSet)
  {
    val.applicationFollowed = [self.applicationFollowed copy];
  }
  if (_applicationDeletedIsSet)
  {
    val.applicationDeleted = [self.applicationDeleted copy];
  }
  if (_applicationReactionsUpdatedIsSet)
  {
    val.applicationReactionsUpdated = [self.applicationReactionsUpdated copy];
  }
  if (_applicationTokenRenewedIsSet)
  {
    val.applicationTokenRenewed = [self.applicationTokenRenewed copy];
  }
  if (_applicationTokenRegeneratedIsSet)
  {
    val.applicationTokenRegenerated = [self.applicationTokenRegenerated copy];
  }
  if (_applicationSentMessageIsSet)
  {
    val.applicationSentMessage = [self.applicationSentMessage copy];
  }
  if (_applicationUnfollowedIsSet)
  {
    val.applicationUnfollowed = [self.applicationUnfollowed copy];
  }
  if (_applicationUpdatedIsSet)
  {
    val.applicationUpdated = [self.applicationUpdated copy];
  }
  if (_ownerApprovedRequestIsSet)
  {
    val.ownerApprovedRequest = [self.ownerApprovedRequest copy];
  }
  if (_ownerAddedIsSet)
  {
    val.ownerAdded = [self.ownerAdded copy];
  }
  if (_generalEventIsSet)
  {
    val.generalEvent = [self.generalEvent copy];
  }
  return val;
}

- (void) setApplicationMessageDeleted: (AromaEvents_ApplicationMessagesDeleted *) applicationMessageDeleted {
  _applicationMessageDeleted = applicationMessageDeleted;
  _applicationMessageDeletedIsSet = YES;
}

- (void) unsetApplicationMessageDeleted {
  _applicationMessageDeleted = nil;
  _applicationMessageDeletedIsSet = NO;
}

- (void) setHealthCheckFailed: (AromaEvents_HealthCheckFailed *) healthCheckFailed {
  _healthCheckFailed = healthCheckFailed;
  _healthCheckFailedIsSet = YES;
}

- (void) unsetHealthCheckFailed {
  _healthCheckFailed = nil;
  _healthCheckFailedIsSet = NO;
}

- (void) setHealthCheckBackToNormal: (AromaEvents_HealthCheckBackToNormal *) healthCheckBackToNormal {
  _healthCheckBackToNormal = healthCheckBackToNormal;
  _healthCheckBackToNormalIsSet = YES;
}

- (void) unsetHealthCheckBackToNormal {
  _healthCheckBackToNormal = nil;
  _healthCheckBackToNormalIsSet = NO;
}

- (void) setApplicationFollowed: (AromaEvents_ApplicationFollowed *) applicationFollowed {
  _applicationFollowed = applicationFollowed;
  _applicationFollowedIsSet = YES;
}

- (void) unsetApplicationFollowed {
  _applicationFollowed = nil;
  _applicationFollowedIsSet = NO;
}

- (void) setApplicationDeleted: (AromaEvents_ApplicationDeleted *) applicationDeleted {
  _applicationDeleted = applicationDeleted;
  _applicationDeletedIsSet = YES;
}

- (void) unsetApplicationDeleted {
  _applicationDeleted = nil;
  _applicationDeletedIsSet = NO;
}

- (void) setApplicationReactionsUpdated: (AromaEvents_ApplicationReactionsUpdated *) applicationReactionsUpdated {
  _applicationReactionsUpdated = applicationReactionsUpdated;
  _applicationReactionsUpdatedIsSet = YES;
}

- (void) unsetApplicationReactionsUpdated {
  _applicationReactionsUpdated = nil;
  _applicationReactionsUpdatedIsSet = NO;
}

- (void) setApplicationTokenRenewed: (AromaEvents_ApplicationTokenRenewed *) applicationTokenRenewed {
  _applicationTokenRenewed = applicationTokenRenewed;
  _applicationTokenRenewedIsSet = YES;
}

- (void) unsetApplicationTokenRenewed {
  _applicationTokenRenewed = nil;
  _applicationTokenRenewedIsSet = NO;
}

- (void) setApplicationTokenRegenerated: (AromaEvents_ApplicationTokenRegenerated *) applicationTokenRegenerated {
  _applicationTokenRegenerated = applicationTokenRegenerated;
  _applicationTokenRegeneratedIsSet = YES;
}

- (void) unsetApplicationTokenRegenerated {
  _applicationTokenRegenerated = nil;
  _applicationTokenRegeneratedIsSet = NO;
}

- (void) setApplicationSentMessage: (AromaEvents_ApplicationSentMessage *) applicationSentMessage {
  _applicationSentMessage = applicationSentMessage;
  _applicationSentMessageIsSet = YES;
}

- (void) unsetApplicationSentMessage {
  _applicationSentMessage = nil;
  _applicationSentMessageIsSet = NO;
}

- (void) setApplicationUnfollowed: (AromaEvents_ApplicationUnfollowed *) applicationUnfollowed {
  _applicationUnfollowed = applicationUnfollowed;
  _applicationUnfollowedIsSet = YES;
}

- (void) unsetApplicationUnfollowed {
  _applicationUnfollowed = nil;
  _applicationUnfollowedIsSet = NO;
}

- (void) setApplicationUpdated: (AromaEvents_ApplicationUpdated *) applicationUpdated {
  _applicationUpdated = applicationUpdated;
  _applicationUpdatedIsSet = YES;
}

- (void) unsetApplicationUpdated {
  _applicationUpdated = nil;
  _applicationUpdatedIsSet = NO;
}

- (void) setOwnerApprovedRequest: (AromaEvents_OwnerApprovedRequest *) ownerApprovedRequest {
  _ownerApprovedRequest = ownerApprovedRequest;
  _ownerApprovedRequestIsSet = YES;
}

- (void) unsetOwnerApprovedRequest {
  _ownerApprovedRequest = nil;
  _ownerApprovedRequestIsSet = NO;
}

- (void) setOwnerAdded: (AromaEvents_OwnerAdded *) ownerAdded {
  _ownerAdded = ownerAdded;
  _ownerAddedIsSet = YES;
}

- (void) unsetOwnerAdded {
  _ownerAdded = nil;
  _ownerAddedIsSet = NO;
}

- (void) setGeneralEvent: (AromaEvents_GeneralEvent *) generalEvent {
  _generalEvent = generalEvent;
  _generalEventIsSet = YES;
}

- (void) unsetGeneralEvent {
  _generalEvent = nil;
  _generalEventIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaEvents_ApplicationMessagesDeleted *fieldValue = [[AromaEvents_ApplicationMessagesDeleted alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.applicationMessageDeleted = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaEvents_HealthCheckFailed *fieldValue = [[AromaEvents_HealthCheckFailed alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.healthCheckFailed = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaEvents_HealthCheckBackToNormal *fieldValue = [[AromaEvents_HealthCheckBackToNormal alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.healthCheckBackToNormal = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          AromaEvents_ApplicationFollowed *fieldValue = [[AromaEvents_ApplicationFollowed alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.applicationFollowed = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          AromaEvents_ApplicationDeleted *fieldValue = [[AromaEvents_ApplicationDeleted alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.applicationDeleted = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 14:
        if (fieldType == TTypeSTRUCT) {
          AromaEvents_ApplicationReactionsUpdated *fieldValue = [[AromaEvents_ApplicationReactionsUpdated alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.applicationReactionsUpdated = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeSTRUCT) {
          AromaEvents_ApplicationTokenRenewed *fieldValue = [[AromaEvents_ApplicationTokenRenewed alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.applicationTokenRenewed = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 7:
        if (fieldType == TTypeSTRUCT) {
          AromaEvents_ApplicationTokenRegenerated *fieldValue = [[AromaEvents_ApplicationTokenRegenerated alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.applicationTokenRegenerated = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 8:
        if (fieldType == TTypeSTRUCT) {
          AromaEvents_ApplicationSentMessage *fieldValue = [[AromaEvents_ApplicationSentMessage alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.applicationSentMessage = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 12:
        if (fieldType == TTypeSTRUCT) {
          AromaEvents_ApplicationUnfollowed *fieldValue = [[AromaEvents_ApplicationUnfollowed alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.applicationUnfollowed = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 13:
        if (fieldType == TTypeSTRUCT) {
          AromaEvents_ApplicationUpdated *fieldValue = [[AromaEvents_ApplicationUpdated alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.applicationUpdated = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 9:
        if (fieldType == TTypeSTRUCT) {
          AromaEvents_OwnerApprovedRequest *fieldValue = [[AromaEvents_OwnerApprovedRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ownerApprovedRequest = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 10:
        if (fieldType == TTypeSTRUCT) {
          AromaEvents_OwnerAdded *fieldValue = [[AromaEvents_OwnerAdded alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ownerAdded = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 11:
        if (fieldType == TTypeSTRUCT) {
          AromaEvents_GeneralEvent *fieldValue = [[AromaEvents_GeneralEvent alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.generalEvent = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"EventType" error: __thriftError]) return NO;
  if (_applicationMessageDeletedIsSet) {
    if (_applicationMessageDeleted != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationMessageDeleted" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_applicationMessageDeleted write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_healthCheckFailedIsSet) {
    if (_healthCheckFailed != nil) {
      if (![outProtocol writeFieldBeginWithName: @"healthCheckFailed" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_healthCheckFailed write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_healthCheckBackToNormalIsSet) {
    if (_healthCheckBackToNormal != nil) {
      if (![outProtocol writeFieldBeginWithName: @"healthCheckBackToNormal" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_healthCheckBackToNormal write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationFollowedIsSet) {
    if (_applicationFollowed != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationFollowed" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_applicationFollowed write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationDeletedIsSet) {
    if (_applicationDeleted != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationDeleted" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_applicationDeleted write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationReactionsUpdatedIsSet) {
    if (_applicationReactionsUpdated != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationReactionsUpdated" type: TTypeSTRUCT fieldID: 14 error: __thriftError]) return NO;
      if (![_applicationReactionsUpdated write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationTokenRenewedIsSet) {
    if (_applicationTokenRenewed != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationTokenRenewed" type: TTypeSTRUCT fieldID: 6 error: __thriftError]) return NO;
      if (![_applicationTokenRenewed write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationTokenRegeneratedIsSet) {
    if (_applicationTokenRegenerated != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationTokenRegenerated" type: TTypeSTRUCT fieldID: 7 error: __thriftError]) return NO;
      if (![_applicationTokenRegenerated write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationSentMessageIsSet) {
    if (_applicationSentMessage != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationSentMessage" type: TTypeSTRUCT fieldID: 8 error: __thriftError]) return NO;
      if (![_applicationSentMessage write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationUnfollowedIsSet) {
    if (_applicationUnfollowed != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationUnfollowed" type: TTypeSTRUCT fieldID: 12 error: __thriftError]) return NO;
      if (![_applicationUnfollowed write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationUpdatedIsSet) {
    if (_applicationUpdated != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationUpdated" type: TTypeSTRUCT fieldID: 13 error: __thriftError]) return NO;
      if (![_applicationUpdated write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_ownerApprovedRequestIsSet) {
    if (_ownerApprovedRequest != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ownerApprovedRequest" type: TTypeSTRUCT fieldID: 9 error: __thriftError]) return NO;
      if (![_ownerApprovedRequest write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_ownerAddedIsSet) {
    if (_ownerAdded != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ownerAdded" type: TTypeSTRUCT fieldID: 10 error: __thriftError]) return NO;
      if (![_ownerAdded write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_generalEventIsSet) {
    if (_generalEvent != nil) {
      if (![outProtocol writeFieldBeginWithName: @"generalEvent" type: TTypeSTRUCT fieldID: 11 error: __thriftError]) return NO;
      if (![_generalEvent write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEvents_EventType("];
  [ms appendString: @"applicationMessageDeleted:"];
  [ms appendFormat: @"%@", _applicationMessageDeleted];
  [ms appendString: @",healthCheckFailed:"];
  [ms appendFormat: @"%@", _healthCheckFailed];
  [ms appendString: @",healthCheckBackToNormal:"];
  [ms appendFormat: @"%@", _healthCheckBackToNormal];
  [ms appendString: @",applicationFollowed:"];
  [ms appendFormat: @"%@", _applicationFollowed];
  [ms appendString: @",applicationDeleted:"];
  [ms appendFormat: @"%@", _applicationDeleted];
  [ms appendString: @",applicationReactionsUpdated:"];
  [ms appendFormat: @"%@", _applicationReactionsUpdated];
  [ms appendString: @",applicationTokenRenewed:"];
  [ms appendFormat: @"%@", _applicationTokenRenewed];
  [ms appendString: @",applicationTokenRegenerated:"];
  [ms appendFormat: @"%@", _applicationTokenRegenerated];
  [ms appendString: @",applicationSentMessage:"];
  [ms appendFormat: @"%@", _applicationSentMessage];
  [ms appendString: @",applicationUnfollowed:"];
  [ms appendFormat: @"%@", _applicationUnfollowed];
  [ms appendString: @",applicationUpdated:"];
  [ms appendFormat: @"%@", _applicationUpdated];
  [ms appendString: @",ownerApprovedRequest:"];
  [ms appendFormat: @"%@", _ownerApprovedRequest];
  [ms appendString: @",ownerAdded:"];
  [ms appendFormat: @"%@", _ownerAdded];
  [ms appendString: @",generalEvent:"];
  [ms appendFormat: @"%@", _generalEvent];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEvents_Event

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithEventId: (AromaEvents_uuid) eventId userIdOfActor: (AromaEvents_uuid) userIdOfActor actor: (AromaEvents_User) actor applicationId: (AromaEvents_uuid) applicationId application: (AromaEvents_Application) application eventType: (AromaEvents_EventType *) eventType timestamp: (AromaEvents_timestamp) timestamp
{
  self = [super init];
  if (self)  {
    _eventId = eventId;
    _eventIdIsSet = YES;
    _userIdOfActor = userIdOfActor;
    _userIdOfActorIsSet = YES;
    _actor = actor;
    _actorIsSet = YES;
    _applicationId = applicationId;
    _applicationIdIsSet = YES;
    _application = application;
    _applicationIsSet = YES;
    _eventType = eventType;
    _eventTypeIsSet = YES;
    _timestamp = timestamp;
    _timestampIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"eventId"])
    {
      _eventId = [decoder decodeObjectForKey: @"eventId"];
      _eventIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"userIdOfActor"])
    {
      _userIdOfActor = [decoder decodeObjectForKey: @"userIdOfActor"];
      _userIdOfActorIsSet = YES;
    }
    if ([decoder containsValueForKey: @"actor"])
    {
      _actor = [decoder decodeObjectForKey: @"actor"];
      _actorIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationId"])
    {
      _applicationId = [decoder decodeObjectForKey: @"applicationId"];
      _applicationIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"application"])
    {
      _application = [decoder decodeObjectForKey: @"application"];
      _applicationIsSet = YES;
    }
    if ([decoder containsValueForKey: @"eventType"])
    {
      _eventType = [decoder decodeObjectForKey: @"eventType"];
      _eventTypeIsSet = YES;
    }
    if ([decoder containsValueForKey: @"timestamp"])
    {
      _timestamp = [decoder decodeInt64ForKey: @"timestamp"];
      _timestampIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_eventIdIsSet)
  {
    [encoder encodeObject: _eventId forKey: @"eventId"];
  }
  if (_userIdOfActorIsSet)
  {
    [encoder encodeObject: _userIdOfActor forKey: @"userIdOfActor"];
  }
  if (_actorIsSet)
  {
    [encoder encodeObject: _actor forKey: @"actor"];
  }
  if (_applicationIdIsSet)
  {
    [encoder encodeObject: _applicationId forKey: @"applicationId"];
  }
  if (_applicationIsSet)
  {
    [encoder encodeObject: _application forKey: @"application"];
  }
  if (_eventTypeIsSet)
  {
    [encoder encodeObject: _eventType forKey: @"eventType"];
  }
  if (_timestampIsSet)
  {
    [encoder encodeInt64: _timestamp forKey: @"timestamp"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _eventIdIsSet ? 2654435761 : 0;
  if (_eventIdIsSet)
  {
    hash = (hash * 31) ^ [_eventId hash];
  }
  hash = (hash * 31) ^ _userIdOfActorIsSet ? 2654435761 : 0;
  if (_userIdOfActorIsSet)
  {
    hash = (hash * 31) ^ [_userIdOfActor hash];
  }
  hash = (hash * 31) ^ _actorIsSet ? 2654435761 : 0;
  if (_actorIsSet)
  {
    hash = (hash * 31) ^ [_actor hash];
  }
  hash = (hash * 31) ^ _applicationIdIsSet ? 2654435761 : 0;
  if (_applicationIdIsSet)
  {
    hash = (hash * 31) ^ [_applicationId hash];
  }
  hash = (hash * 31) ^ _applicationIsSet ? 2654435761 : 0;
  if (_applicationIsSet)
  {
    hash = (hash * 31) ^ [_application hash];
  }
  hash = (hash * 31) ^ _eventTypeIsSet ? 2654435761 : 0;
  if (_eventTypeIsSet)
  {
    hash = (hash * 31) ^ [_eventType hash];
  }
  hash = (hash * 31) ^ _timestampIsSet ? 2654435761 : 0;
  if (_timestampIsSet)
  {
    hash = (hash * 31) ^ [@(_timestamp) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEvents_Event class]]) {
    return NO;
  }
  AromaEvents_Event *other = (AromaEvents_Event *)anObject;
  if ((_eventIdIsSet != other->_eventIdIsSet) ||
      (_eventIdIsSet && ((_eventId || other->_eventId) && ![_eventId isEqual:other->_eventId]))) {
    return NO;
  }
  if ((_userIdOfActorIsSet != other->_userIdOfActorIsSet) ||
      (_userIdOfActorIsSet && ((_userIdOfActor || other->_userIdOfActor) && ![_userIdOfActor isEqual:other->_userIdOfActor]))) {
    return NO;
  }
  if ((_actorIsSet != other->_actorIsSet) ||
      (_actorIsSet && ((_actor || other->_actor) && ![_actor isEqual:other->_actor]))) {
    return NO;
  }
  if ((_applicationIdIsSet != other->_applicationIdIsSet) ||
      (_applicationIdIsSet && ((_applicationId || other->_applicationId) && ![_applicationId isEqual:other->_applicationId]))) {
    return NO;
  }
  if ((_applicationIsSet != other->_applicationIsSet) ||
      (_applicationIsSet && ((_application || other->_application) && ![_application isEqual:other->_application]))) {
    return NO;
  }
  if ((_eventTypeIsSet != other->_eventTypeIsSet) ||
      (_eventTypeIsSet && ((_eventType || other->_eventType) && ![_eventType isEqual:other->_eventType]))) {
    return NO;
  }
  if ((_timestampIsSet != other->_timestampIsSet) ||
      (_timestampIsSet && (_timestamp != other->_timestamp))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaEvents_Event * val = [AromaEvents_Event new];
  if (_eventIdIsSet)
  {
    val.eventId = [self.eventId copy];
  }
  if (_userIdOfActorIsSet)
  {
    val.userIdOfActor = [self.userIdOfActor copy];
  }
  if (_actorIsSet)
  {
    val.actor = [self.actor copy];
  }
  if (_applicationIdIsSet)
  {
    val.applicationId = [self.applicationId copy];
  }
  if (_applicationIsSet)
  {
    val.application = [self.application copy];
  }
  if (_eventTypeIsSet)
  {
    val.eventType = [self.eventType copy];
  }
  if (_timestampIsSet)
  {
    val.timestamp = self.timestamp;
  }
  return val;
}

- (void) setEventId: (NSString *) eventId {
  _eventId = eventId;
  _eventIdIsSet = YES;
}

- (void) unsetEventId {
  _eventId = nil;
  _eventIdIsSet = NO;
}

- (void) setUserIdOfActor: (NSString *) userIdOfActor {
  _userIdOfActor = userIdOfActor;
  _userIdOfActorIsSet = YES;
}

- (void) unsetUserIdOfActor {
  _userIdOfActor = nil;
  _userIdOfActorIsSet = NO;
}

- (void) setActor: (Aroma_User *) actor {
  _actor = actor;
  _actorIsSet = YES;
}

- (void) unsetActor {
  _actor = nil;
  _actorIsSet = NO;
}

- (void) setApplicationId: (NSString *) applicationId {
  _applicationId = applicationId;
  _applicationIdIsSet = YES;
}

- (void) unsetApplicationId {
  _applicationId = nil;
  _applicationIdIsSet = NO;
}

- (void) setApplication: (Aroma_Application *) application {
  _application = application;
  _applicationIsSet = YES;
}

- (void) unsetApplication {
  _application = nil;
  _applicationIsSet = NO;
}

- (void) setEventType: (AromaEvents_EventType *) eventType {
  _eventType = eventType;
  _eventTypeIsSet = YES;
}

- (void) unsetEventType {
  _eventType = nil;
  _eventTypeIsSet = NO;
}

- (void) setTimestamp: (SInt64) timestamp {
  _timestamp = timestamp;
  _timestampIsSet = YES;
}

- (void) unsetTimestamp {
  _timestampIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.eventId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.userIdOfActor = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          Aroma_User *fieldValue = [[Aroma_User alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.actor = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.applicationId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          Aroma_Application *fieldValue = [[Aroma_Application alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.application = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeSTRUCT) {
          AromaEvents_EventType *fieldValue = [[AromaEvents_EventType alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.eventType = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 7:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.timestamp = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Event" error: __thriftError]) return NO;
  if (_eventIdIsSet) {
    if (_eventId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"eventId" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _eventId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_userIdOfActorIsSet) {
    if (_userIdOfActor != nil) {
      if (![outProtocol writeFieldBeginWithName: @"userIdOfActor" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _userIdOfActor error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_actorIsSet) {
    if (_actor != nil) {
      if (![outProtocol writeFieldBeginWithName: @"actor" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_actor write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationIdIsSet) {
    if (_applicationId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationId" type: TTypeSTRING fieldID: 4 error: __thriftError]) return NO;
      if (![outProtocol writeString: _applicationId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationIsSet) {
    if (_application != nil) {
      if (![outProtocol writeFieldBeginWithName: @"application" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_application write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_eventTypeIsSet) {
    if (_eventType != nil) {
      if (![outProtocol writeFieldBeginWithName: @"eventType" type: TTypeSTRUCT fieldID: 6 error: __thriftError]) return NO;
      if (![_eventType write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_timestampIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"timestamp" type: TTypeI64 fieldID: 7 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _timestamp error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEvents_Event("];
  [ms appendString: @"eventId:"];
  [ms appendFormat: @"\"%@\"", _eventId];
  [ms appendString: @",userIdOfActor:"];
  [ms appendFormat: @"\"%@\"", _userIdOfActor];
  [ms appendString: @",actor:"];
  [ms appendFormat: @"%@", _actor];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", _applicationId];
  [ms appendString: @",application:"];
  [ms appendFormat: @"%@", _application];
  [ms appendString: @",eventType:"];
  [ms appendFormat: @"%@", _eventType];
  [ms appendString: @",timestamp:"];
  [ms appendFormat: @"%qi", _timestamp];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

NSString *AromaEvents_EventsErrorDomain = @"AromaEvents_EventsErrorDomain";


