/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TProtocolFactory.h"
#import "TApplicationError.h"
#import "TProtocolError.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TBaseClient.h"

#import "Aroma_Aroma.h"
#import "AromaEndpoint_Endpoint.h"
#import "AromaException_Exceptions.h"

#import "AromaChannels_Channels.h"

@implementation AromaChannels_IOSDevice

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithDeviceToken: (NSData *) deviceToken
{
  self = [super init];
  if (self)  {
    _deviceToken = deviceToken;
    _deviceTokenIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"deviceToken"])
    {
      _deviceToken = [decoder decodeObjectForKey: @"deviceToken"];
      _deviceTokenIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_deviceTokenIsSet)
  {
    [encoder encodeObject: _deviceToken forKey: @"deviceToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _deviceTokenIsSet ? 2654435761 : 0;
  if (_deviceTokenIsSet)
  {
    hash = (hash * 31) ^ [_deviceToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaChannels_IOSDevice class]]) {
    return NO;
  }
  AromaChannels_IOSDevice *other = (AromaChannels_IOSDevice *)anObject;
  if ((_deviceTokenIsSet != other->_deviceTokenIsSet) ||
      (_deviceTokenIsSet && ((_deviceToken || other->_deviceToken) && ![_deviceToken isEqual:other->_deviceToken]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaChannels_IOSDevice * val = [AromaChannels_IOSDevice new];
  if (_deviceTokenIsSet)
  {
    val.deviceToken = [self.deviceToken copy];
  }
  return val;
}

- (void) setDeviceToken: (NSData *) deviceToken {
  _deviceToken = deviceToken;
  _deviceTokenIsSet = YES;
}

- (void) unsetDeviceToken {
  _deviceToken = nil;
  _deviceTokenIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.deviceToken = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"IOSDevice" error: __thriftError]) return NO;
  if (_deviceTokenIsSet) {
    if (_deviceToken != nil) {
      if (![outProtocol writeFieldBeginWithName: @"deviceToken" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _deviceToken error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaChannels_IOSDevice("];
  [ms appendString: @"deviceToken:"];
  [ms appendFormat: @"\"%@\"", _deviceToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaChannels_AndroidDevice

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRegistrationId: (NSString *) registrationId
{
  self = [super init];
  if (self)  {
    _registrationId = registrationId;
    _registrationIdIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"registrationId"])
    {
      _registrationId = [decoder decodeObjectForKey: @"registrationId"];
      _registrationIdIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_registrationIdIsSet)
  {
    [encoder encodeObject: _registrationId forKey: @"registrationId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _registrationIdIsSet ? 2654435761 : 0;
  if (_registrationIdIsSet)
  {
    hash = (hash * 31) ^ [_registrationId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaChannels_AndroidDevice class]]) {
    return NO;
  }
  AromaChannels_AndroidDevice *other = (AromaChannels_AndroidDevice *)anObject;
  if ((_registrationIdIsSet != other->_registrationIdIsSet) ||
      (_registrationIdIsSet && ((_registrationId || other->_registrationId) && ![_registrationId isEqual:other->_registrationId]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaChannels_AndroidDevice * val = [AromaChannels_AndroidDevice new];
  if (_registrationIdIsSet)
  {
    val.registrationId = [self.registrationId copy];
  }
  return val;
}

- (void) setRegistrationId: (NSString *) registrationId {
  _registrationId = registrationId;
  _registrationIdIsSet = YES;
}

- (void) unsetRegistrationId {
  _registrationId = nil;
  _registrationIdIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.registrationId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AndroidDevice" error: __thriftError]) return NO;
  if (_registrationIdIsSet) {
    if (_registrationId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"registrationId" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _registrationId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaChannels_AndroidDevice("];
  [ms appendString: @"registrationId:"];
  [ms appendFormat: @"\"%@\"", _registrationId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaChannels_WindowsPhoneDevice

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaChannels_WindowsPhoneDevice class]]) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaChannels_WindowsPhoneDevice * val = [AromaChannels_WindowsPhoneDevice new];
  return val;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"WindowsPhoneDevice" error: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaChannels_WindowsPhoneDevice("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaChannels_MobileDevice

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithIosDevice: (AromaChannels_IOSDevice *) iosDevice androidDevice: (AromaChannels_AndroidDevice *) androidDevice windowsPhoneDevice: (AromaChannels_WindowsPhoneDevice *) windowsPhoneDevice
{
  self = [super init];
  if (self)  {
    _iosDevice = iosDevice;
    _iosDeviceIsSet = YES;
    _androidDevice = androidDevice;
    _androidDeviceIsSet = YES;
    _windowsPhoneDevice = windowsPhoneDevice;
    _windowsPhoneDeviceIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"iosDevice"])
    {
      _iosDevice = [decoder decodeObjectForKey: @"iosDevice"];
      _iosDeviceIsSet = YES;
    }
    if ([decoder containsValueForKey: @"androidDevice"])
    {
      _androidDevice = [decoder decodeObjectForKey: @"androidDevice"];
      _androidDeviceIsSet = YES;
    }
    if ([decoder containsValueForKey: @"windowsPhoneDevice"])
    {
      _windowsPhoneDevice = [decoder decodeObjectForKey: @"windowsPhoneDevice"];
      _windowsPhoneDeviceIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_iosDeviceIsSet)
  {
    [encoder encodeObject: _iosDevice forKey: @"iosDevice"];
  }
  if (_androidDeviceIsSet)
  {
    [encoder encodeObject: _androidDevice forKey: @"androidDevice"];
  }
  if (_windowsPhoneDeviceIsSet)
  {
    [encoder encodeObject: _windowsPhoneDevice forKey: @"windowsPhoneDevice"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _iosDeviceIsSet ? 2654435761 : 0;
  if (_iosDeviceIsSet)
  {
    hash = (hash * 31) ^ [_iosDevice hash];
  }
  hash = (hash * 31) ^ _androidDeviceIsSet ? 2654435761 : 0;
  if (_androidDeviceIsSet)
  {
    hash = (hash * 31) ^ [_androidDevice hash];
  }
  hash = (hash * 31) ^ _windowsPhoneDeviceIsSet ? 2654435761 : 0;
  if (_windowsPhoneDeviceIsSet)
  {
    hash = (hash * 31) ^ [_windowsPhoneDevice hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaChannels_MobileDevice class]]) {
    return NO;
  }
  AromaChannels_MobileDevice *other = (AromaChannels_MobileDevice *)anObject;
  if ((_iosDeviceIsSet != other->_iosDeviceIsSet) ||
      (_iosDeviceIsSet && ((_iosDevice || other->_iosDevice) && ![_iosDevice isEqual:other->_iosDevice]))) {
    return NO;
  }
  if ((_androidDeviceIsSet != other->_androidDeviceIsSet) ||
      (_androidDeviceIsSet && ((_androidDevice || other->_androidDevice) && ![_androidDevice isEqual:other->_androidDevice]))) {
    return NO;
  }
  if ((_windowsPhoneDeviceIsSet != other->_windowsPhoneDeviceIsSet) ||
      (_windowsPhoneDeviceIsSet && ((_windowsPhoneDevice || other->_windowsPhoneDevice) && ![_windowsPhoneDevice isEqual:other->_windowsPhoneDevice]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaChannels_MobileDevice * val = [AromaChannels_MobileDevice new];
  if (_iosDeviceIsSet)
  {
    val.iosDevice = [self.iosDevice copy];
  }
  if (_androidDeviceIsSet)
  {
    val.androidDevice = [self.androidDevice copy];
  }
  if (_windowsPhoneDeviceIsSet)
  {
    val.windowsPhoneDevice = [self.windowsPhoneDevice copy];
  }
  return val;
}

- (void) setIosDevice: (AromaChannels_IOSDevice *) iosDevice {
  _iosDevice = iosDevice;
  _iosDeviceIsSet = YES;
}

- (void) unsetIosDevice {
  _iosDevice = nil;
  _iosDeviceIsSet = NO;
}

- (void) setAndroidDevice: (AromaChannels_AndroidDevice *) androidDevice {
  _androidDevice = androidDevice;
  _androidDeviceIsSet = YES;
}

- (void) unsetAndroidDevice {
  _androidDevice = nil;
  _androidDeviceIsSet = NO;
}

- (void) setWindowsPhoneDevice: (AromaChannels_WindowsPhoneDevice *) windowsPhoneDevice {
  _windowsPhoneDevice = windowsPhoneDevice;
  _windowsPhoneDeviceIsSet = YES;
}

- (void) unsetWindowsPhoneDevice {
  _windowsPhoneDevice = nil;
  _windowsPhoneDeviceIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaChannels_IOSDevice *fieldValue = [[AromaChannels_IOSDevice alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.iosDevice = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaChannels_AndroidDevice *fieldValue = [[AromaChannels_AndroidDevice alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.androidDevice = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaChannels_WindowsPhoneDevice *fieldValue = [[AromaChannels_WindowsPhoneDevice alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.windowsPhoneDevice = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"MobileDevice" error: __thriftError]) return NO;
  if (_iosDeviceIsSet) {
    if (_iosDevice != nil) {
      if (![outProtocol writeFieldBeginWithName: @"iosDevice" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_iosDevice write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_androidDeviceIsSet) {
    if (_androidDevice != nil) {
      if (![outProtocol writeFieldBeginWithName: @"androidDevice" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_androidDevice write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_windowsPhoneDeviceIsSet) {
    if (_windowsPhoneDevice != nil) {
      if (![outProtocol writeFieldBeginWithName: @"windowsPhoneDevice" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_windowsPhoneDevice write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaChannels_MobileDevice("];
  [ms appendString: @"iosDevice:"];
  [ms appendFormat: @"%@", _iosDevice];
  [ms appendString: @",androidDevice:"];
  [ms appendFormat: @"%@", _androidDevice];
  [ms appendString: @",windowsPhoneDevice:"];
  [ms appendFormat: @"%@", _windowsPhoneDevice];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaChannels_PushNotificationPayload

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithMessageId: (AromaChannels_uuid) messageId applicationId: (AromaChannels_uuid) applicationId
{
  self = [super init];
  if (self)  {
    _messageId = messageId;
    _messageIdIsSet = YES;
    _applicationId = applicationId;
    _applicationIdIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"messageId"])
    {
      _messageId = [decoder decodeObjectForKey: @"messageId"];
      _messageIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationId"])
    {
      _applicationId = [decoder decodeObjectForKey: @"applicationId"];
      _applicationIdIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_messageIdIsSet)
  {
    [encoder encodeObject: _messageId forKey: @"messageId"];
  }
  if (_applicationIdIsSet)
  {
    [encoder encodeObject: _applicationId forKey: @"applicationId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _messageIdIsSet ? 2654435761 : 0;
  if (_messageIdIsSet)
  {
    hash = (hash * 31) ^ [_messageId hash];
  }
  hash = (hash * 31) ^ _applicationIdIsSet ? 2654435761 : 0;
  if (_applicationIdIsSet)
  {
    hash = (hash * 31) ^ [_applicationId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaChannels_PushNotificationPayload class]]) {
    return NO;
  }
  AromaChannels_PushNotificationPayload *other = (AromaChannels_PushNotificationPayload *)anObject;
  if ((_messageIdIsSet != other->_messageIdIsSet) ||
      (_messageIdIsSet && ((_messageId || other->_messageId) && ![_messageId isEqual:other->_messageId]))) {
    return NO;
  }
  if ((_applicationIdIsSet != other->_applicationIdIsSet) ||
      (_applicationIdIsSet && ((_applicationId || other->_applicationId) && ![_applicationId isEqual:other->_applicationId]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaChannels_PushNotificationPayload * val = [AromaChannels_PushNotificationPayload new];
  if (_messageIdIsSet)
  {
    val.messageId = [self.messageId copy];
  }
  if (_applicationIdIsSet)
  {
    val.applicationId = [self.applicationId copy];
  }
  return val;
}

- (void) setMessageId: (NSString *) messageId {
  _messageId = messageId;
  _messageIdIsSet = YES;
}

- (void) unsetMessageId {
  _messageId = nil;
  _messageIdIsSet = NO;
}

- (void) setApplicationId: (NSString *) applicationId {
  _applicationId = applicationId;
  _applicationIdIsSet = YES;
}

- (void) unsetApplicationId {
  _applicationId = nil;
  _applicationIdIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.messageId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.applicationId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PushNotificationPayload" error: __thriftError]) return NO;
  if (_messageIdIsSet) {
    if (_messageId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"messageId" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _messageId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationIdIsSet) {
    if (_applicationId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationId" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _applicationId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaChannels_PushNotificationPayload("];
  [ms appendString: @"messageId:"];
  [ms appendFormat: @"\"%@\"", _messageId];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", _applicationId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaChannels_SlackChannel

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithDomainName: (NSString *) domainName channelName: (NSString *) channelName slackToken: (NSString *) slackToken
{
  self = [super init];
  if (self)  {
    _domainName = domainName;
    _domainNameIsSet = YES;
    _channelName = channelName;
    _channelNameIsSet = YES;
    _slackToken = slackToken;
    _slackTokenIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"domainName"])
    {
      _domainName = [decoder decodeObjectForKey: @"domainName"];
      _domainNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"channelName"])
    {
      _channelName = [decoder decodeObjectForKey: @"channelName"];
      _channelNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"slackToken"])
    {
      _slackToken = [decoder decodeObjectForKey: @"slackToken"];
      _slackTokenIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_domainNameIsSet)
  {
    [encoder encodeObject: _domainName forKey: @"domainName"];
  }
  if (_channelNameIsSet)
  {
    [encoder encodeObject: _channelName forKey: @"channelName"];
  }
  if (_slackTokenIsSet)
  {
    [encoder encodeObject: _slackToken forKey: @"slackToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _domainNameIsSet ? 2654435761 : 0;
  if (_domainNameIsSet)
  {
    hash = (hash * 31) ^ [_domainName hash];
  }
  hash = (hash * 31) ^ _channelNameIsSet ? 2654435761 : 0;
  if (_channelNameIsSet)
  {
    hash = (hash * 31) ^ [_channelName hash];
  }
  hash = (hash * 31) ^ _slackTokenIsSet ? 2654435761 : 0;
  if (_slackTokenIsSet)
  {
    hash = (hash * 31) ^ [_slackToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaChannels_SlackChannel class]]) {
    return NO;
  }
  AromaChannels_SlackChannel *other = (AromaChannels_SlackChannel *)anObject;
  if ((_domainNameIsSet != other->_domainNameIsSet) ||
      (_domainNameIsSet && ((_domainName || other->_domainName) && ![_domainName isEqual:other->_domainName]))) {
    return NO;
  }
  if ((_channelNameIsSet != other->_channelNameIsSet) ||
      (_channelNameIsSet && ((_channelName || other->_channelName) && ![_channelName isEqual:other->_channelName]))) {
    return NO;
  }
  if ((_slackTokenIsSet != other->_slackTokenIsSet) ||
      (_slackTokenIsSet && ((_slackToken || other->_slackToken) && ![_slackToken isEqual:other->_slackToken]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaChannels_SlackChannel * val = [AromaChannels_SlackChannel new];
  if (_domainNameIsSet)
  {
    val.domainName = [self.domainName copy];
  }
  if (_channelNameIsSet)
  {
    val.channelName = [self.channelName copy];
  }
  if (_slackTokenIsSet)
  {
    val.slackToken = [self.slackToken copy];
  }
  return val;
}

- (void) setDomainName: (NSString *) domainName {
  _domainName = domainName;
  _domainNameIsSet = YES;
}

- (void) unsetDomainName {
  _domainName = nil;
  _domainNameIsSet = NO;
}

- (void) setChannelName: (NSString *) channelName {
  _channelName = channelName;
  _channelNameIsSet = YES;
}

- (void) unsetChannelName {
  _channelName = nil;
  _channelNameIsSet = NO;
}

- (void) setSlackToken: (NSString *) slackToken {
  _slackToken = slackToken;
  _slackTokenIsSet = YES;
}

- (void) unsetSlackToken {
  _slackToken = nil;
  _slackTokenIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.domainName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.channelName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.slackToken = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"SlackChannel" error: __thriftError]) return NO;
  if (_domainNameIsSet) {
    if (_domainName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"domainName" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _domainName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_channelNameIsSet) {
    if (_channelName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"channelName" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _channelName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_slackTokenIsSet) {
    if (_slackToken != nil) {
      if (![outProtocol writeFieldBeginWithName: @"slackToken" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _slackToken error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaChannels_SlackChannel("];
  [ms appendString: @"domainName:"];
  [ms appendFormat: @"\"%@\"", _domainName];
  [ms appendString: @",channelName:"];
  [ms appendFormat: @"\"%@\"", _channelName];
  [ms appendString: @",slackToken:"];
  [ms appendFormat: @"\"%@\"", _slackToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaChannels_SlackUsername

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithDomainName: (NSString *) domainName username: (NSString *) username slackToken: (NSString *) slackToken
{
  self = [super init];
  if (self)  {
    _domainName = domainName;
    _domainNameIsSet = YES;
    _username = username;
    _usernameIsSet = YES;
    _slackToken = slackToken;
    _slackTokenIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"domainName"])
    {
      _domainName = [decoder decodeObjectForKey: @"domainName"];
      _domainNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"username"])
    {
      _username = [decoder decodeObjectForKey: @"username"];
      _usernameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"slackToken"])
    {
      _slackToken = [decoder decodeObjectForKey: @"slackToken"];
      _slackTokenIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_domainNameIsSet)
  {
    [encoder encodeObject: _domainName forKey: @"domainName"];
  }
  if (_usernameIsSet)
  {
    [encoder encodeObject: _username forKey: @"username"];
  }
  if (_slackTokenIsSet)
  {
    [encoder encodeObject: _slackToken forKey: @"slackToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _domainNameIsSet ? 2654435761 : 0;
  if (_domainNameIsSet)
  {
    hash = (hash * 31) ^ [_domainName hash];
  }
  hash = (hash * 31) ^ _usernameIsSet ? 2654435761 : 0;
  if (_usernameIsSet)
  {
    hash = (hash * 31) ^ [_username hash];
  }
  hash = (hash * 31) ^ _slackTokenIsSet ? 2654435761 : 0;
  if (_slackTokenIsSet)
  {
    hash = (hash * 31) ^ [_slackToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaChannels_SlackUsername class]]) {
    return NO;
  }
  AromaChannels_SlackUsername *other = (AromaChannels_SlackUsername *)anObject;
  if ((_domainNameIsSet != other->_domainNameIsSet) ||
      (_domainNameIsSet && ((_domainName || other->_domainName) && ![_domainName isEqual:other->_domainName]))) {
    return NO;
  }
  if ((_usernameIsSet != other->_usernameIsSet) ||
      (_usernameIsSet && ((_username || other->_username) && ![_username isEqual:other->_username]))) {
    return NO;
  }
  if ((_slackTokenIsSet != other->_slackTokenIsSet) ||
      (_slackTokenIsSet && ((_slackToken || other->_slackToken) && ![_slackToken isEqual:other->_slackToken]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaChannels_SlackUsername * val = [AromaChannels_SlackUsername new];
  if (_domainNameIsSet)
  {
    val.domainName = [self.domainName copy];
  }
  if (_usernameIsSet)
  {
    val.username = [self.username copy];
  }
  if (_slackTokenIsSet)
  {
    val.slackToken = [self.slackToken copy];
  }
  return val;
}

- (void) setDomainName: (NSString *) domainName {
  _domainName = domainName;
  _domainNameIsSet = YES;
}

- (void) unsetDomainName {
  _domainName = nil;
  _domainNameIsSet = NO;
}

- (void) setUsername: (NSString *) username {
  _username = username;
  _usernameIsSet = YES;
}

- (void) unsetUsername {
  _username = nil;
  _usernameIsSet = NO;
}

- (void) setSlackToken: (NSString *) slackToken {
  _slackToken = slackToken;
  _slackTokenIsSet = YES;
}

- (void) unsetSlackToken {
  _slackToken = nil;
  _slackTokenIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.domainName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.username = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.slackToken = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"SlackUsername" error: __thriftError]) return NO;
  if (_domainNameIsSet) {
    if (_domainName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"domainName" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _domainName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_usernameIsSet) {
    if (_username != nil) {
      if (![outProtocol writeFieldBeginWithName: @"username" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _username error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_slackTokenIsSet) {
    if (_slackToken != nil) {
      if (![outProtocol writeFieldBeginWithName: @"slackToken" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _slackToken error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaChannels_SlackUsername("];
  [ms appendString: @"domainName:"];
  [ms appendFormat: @"\"%@\"", _domainName];
  [ms appendString: @",username:"];
  [ms appendFormat: @"\"%@\"", _username];
  [ms appendString: @",slackToken:"];
  [ms appendFormat: @"\"%@\"", _slackToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaChannels_Email

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.subject = @"Aroma - New Message";

  }
  return self;
}

- (instancetype) initWithEmailAddress: (NSString *) emailAddress subject: (NSString *) subject
{
  self = [super init];
  if (self)  {
    _emailAddress = emailAddress;
    _emailAddressIsSet = YES;
    _subject = subject;
    _subjectIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"emailAddress"])
    {
      _emailAddress = [decoder decodeObjectForKey: @"emailAddress"];
      _emailAddressIsSet = YES;
    }
    if ([decoder containsValueForKey: @"subject"])
    {
      _subject = [decoder decodeObjectForKey: @"subject"];
      _subjectIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_emailAddressIsSet)
  {
    [encoder encodeObject: _emailAddress forKey: @"emailAddress"];
  }
  if (_subjectIsSet)
  {
    [encoder encodeObject: _subject forKey: @"subject"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _emailAddressIsSet ? 2654435761 : 0;
  if (_emailAddressIsSet)
  {
    hash = (hash * 31) ^ [_emailAddress hash];
  }
  hash = (hash * 31) ^ _subjectIsSet ? 2654435761 : 0;
  if (_subjectIsSet)
  {
    hash = (hash * 31) ^ [_subject hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaChannels_Email class]]) {
    return NO;
  }
  AromaChannels_Email *other = (AromaChannels_Email *)anObject;
  if ((_emailAddressIsSet != other->_emailAddressIsSet) ||
      (_emailAddressIsSet && ((_emailAddress || other->_emailAddress) && ![_emailAddress isEqual:other->_emailAddress]))) {
    return NO;
  }
  if ((_subjectIsSet != other->_subjectIsSet) ||
      (_subjectIsSet && ((_subject || other->_subject) && ![_subject isEqual:other->_subject]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaChannels_Email * val = [AromaChannels_Email new];
  if (_emailAddressIsSet)
  {
    val.emailAddress = [self.emailAddress copy];
  }
  if (_subjectIsSet)
  {
    val.subject = [self.subject copy];
  }
  return val;
}

- (void) setEmailAddress: (NSString *) emailAddress {
  _emailAddress = emailAddress;
  _emailAddressIsSet = YES;
}

- (void) unsetEmailAddress {
  _emailAddress = nil;
  _emailAddressIsSet = NO;
}

- (void) setSubject: (NSString *) subject {
  _subject = subject;
  _subjectIsSet = YES;
}

- (void) unsetSubject {
  _subject = nil;
  _subjectIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.emailAddress = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.subject = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Email" error: __thriftError]) return NO;
  if (_emailAddressIsSet) {
    if (_emailAddress != nil) {
      if (![outProtocol writeFieldBeginWithName: @"emailAddress" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _emailAddress error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_subjectIsSet) {
    if (_subject != nil) {
      if (![outProtocol writeFieldBeginWithName: @"subject" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _subject error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaChannels_Email("];
  [ms appendString: @"emailAddress:"];
  [ms appendFormat: @"\"%@\"", _emailAddress];
  [ms appendString: @",subject:"];
  [ms appendFormat: @"\"%@\"", _subject];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaChannels_CustomChannel

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithEndpoint: (AromaEndpoint_Endpoint *) endpoint
{
  self = [super init];
  if (self)  {
    _endpoint = endpoint;
    _endpointIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"endpoint"])
    {
      _endpoint = [decoder decodeObjectForKey: @"endpoint"];
      _endpointIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_endpointIsSet)
  {
    [encoder encodeObject: _endpoint forKey: @"endpoint"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _endpointIsSet ? 2654435761 : 0;
  if (_endpointIsSet)
  {
    hash = (hash * 31) ^ [_endpoint hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaChannels_CustomChannel class]]) {
    return NO;
  }
  AromaChannels_CustomChannel *other = (AromaChannels_CustomChannel *)anObject;
  if ((_endpointIsSet != other->_endpointIsSet) ||
      (_endpointIsSet && ((_endpoint || other->_endpoint) && ![_endpoint isEqual:other->_endpoint]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaChannels_CustomChannel * val = [AromaChannels_CustomChannel new];
  if (_endpointIsSet)
  {
    val.endpoint = [self.endpoint copy];
  }
  return val;
}

- (void) setEndpoint: (AromaEndpoint_Endpoint *) endpoint {
  _endpoint = endpoint;
  _endpointIsSet = YES;
}

- (void) unsetEndpoint {
  _endpoint = nil;
  _endpointIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaEndpoint_Endpoint *fieldValue = [[AromaEndpoint_Endpoint alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.endpoint = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"CustomChannel" error: __thriftError]) return NO;
  if (_endpointIsSet) {
    if (_endpoint != nil) {
      if (![outProtocol writeFieldBeginWithName: @"endpoint" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_endpoint write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaChannels_CustomChannel("];
  [ms appendString: @"endpoint:"];
  [ms appendFormat: @"%@", _endpoint];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaChannels_AromaChannel

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSlackChannel: (AromaChannels_SlackChannel *) slackChannel slackUsername: (AromaChannels_SlackUsername *) slackUsername email: (AromaChannels_Email *) email customChannel: (AromaChannels_CustomChannel *) customChannel iosDevice: (AromaChannels_IOSDevice *) iosDevice androidDevice: (AromaChannels_AndroidDevice *) androidDevice windowsPhoneDevice: (AromaChannels_WindowsPhoneDevice *) windowsPhoneDevice
{
  self = [super init];
  if (self)  {
    _slackChannel = slackChannel;
    _slackChannelIsSet = YES;
    _slackUsername = slackUsername;
    _slackUsernameIsSet = YES;
    _email = email;
    _emailIsSet = YES;
    _customChannel = customChannel;
    _customChannelIsSet = YES;
    _iosDevice = iosDevice;
    _iosDeviceIsSet = YES;
    _androidDevice = androidDevice;
    _androidDeviceIsSet = YES;
    _windowsPhoneDevice = windowsPhoneDevice;
    _windowsPhoneDeviceIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"slackChannel"])
    {
      _slackChannel = [decoder decodeObjectForKey: @"slackChannel"];
      _slackChannelIsSet = YES;
    }
    if ([decoder containsValueForKey: @"slackUsername"])
    {
      _slackUsername = [decoder decodeObjectForKey: @"slackUsername"];
      _slackUsernameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"email"])
    {
      _email = [decoder decodeObjectForKey: @"email"];
      _emailIsSet = YES;
    }
    if ([decoder containsValueForKey: @"customChannel"])
    {
      _customChannel = [decoder decodeObjectForKey: @"customChannel"];
      _customChannelIsSet = YES;
    }
    if ([decoder containsValueForKey: @"iosDevice"])
    {
      _iosDevice = [decoder decodeObjectForKey: @"iosDevice"];
      _iosDeviceIsSet = YES;
    }
    if ([decoder containsValueForKey: @"androidDevice"])
    {
      _androidDevice = [decoder decodeObjectForKey: @"androidDevice"];
      _androidDeviceIsSet = YES;
    }
    if ([decoder containsValueForKey: @"windowsPhoneDevice"])
    {
      _windowsPhoneDevice = [decoder decodeObjectForKey: @"windowsPhoneDevice"];
      _windowsPhoneDeviceIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_slackChannelIsSet)
  {
    [encoder encodeObject: _slackChannel forKey: @"slackChannel"];
  }
  if (_slackUsernameIsSet)
  {
    [encoder encodeObject: _slackUsername forKey: @"slackUsername"];
  }
  if (_emailIsSet)
  {
    [encoder encodeObject: _email forKey: @"email"];
  }
  if (_customChannelIsSet)
  {
    [encoder encodeObject: _customChannel forKey: @"customChannel"];
  }
  if (_iosDeviceIsSet)
  {
    [encoder encodeObject: _iosDevice forKey: @"iosDevice"];
  }
  if (_androidDeviceIsSet)
  {
    [encoder encodeObject: _androidDevice forKey: @"androidDevice"];
  }
  if (_windowsPhoneDeviceIsSet)
  {
    [encoder encodeObject: _windowsPhoneDevice forKey: @"windowsPhoneDevice"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _slackChannelIsSet ? 2654435761 : 0;
  if (_slackChannelIsSet)
  {
    hash = (hash * 31) ^ [_slackChannel hash];
  }
  hash = (hash * 31) ^ _slackUsernameIsSet ? 2654435761 : 0;
  if (_slackUsernameIsSet)
  {
    hash = (hash * 31) ^ [_slackUsername hash];
  }
  hash = (hash * 31) ^ _emailIsSet ? 2654435761 : 0;
  if (_emailIsSet)
  {
    hash = (hash * 31) ^ [_email hash];
  }
  hash = (hash * 31) ^ _customChannelIsSet ? 2654435761 : 0;
  if (_customChannelIsSet)
  {
    hash = (hash * 31) ^ [_customChannel hash];
  }
  hash = (hash * 31) ^ _iosDeviceIsSet ? 2654435761 : 0;
  if (_iosDeviceIsSet)
  {
    hash = (hash * 31) ^ [_iosDevice hash];
  }
  hash = (hash * 31) ^ _androidDeviceIsSet ? 2654435761 : 0;
  if (_androidDeviceIsSet)
  {
    hash = (hash * 31) ^ [_androidDevice hash];
  }
  hash = (hash * 31) ^ _windowsPhoneDeviceIsSet ? 2654435761 : 0;
  if (_windowsPhoneDeviceIsSet)
  {
    hash = (hash * 31) ^ [_windowsPhoneDevice hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaChannels_AromaChannel class]]) {
    return NO;
  }
  AromaChannels_AromaChannel *other = (AromaChannels_AromaChannel *)anObject;
  if ((_slackChannelIsSet != other->_slackChannelIsSet) ||
      (_slackChannelIsSet && ((_slackChannel || other->_slackChannel) && ![_slackChannel isEqual:other->_slackChannel]))) {
    return NO;
  }
  if ((_slackUsernameIsSet != other->_slackUsernameIsSet) ||
      (_slackUsernameIsSet && ((_slackUsername || other->_slackUsername) && ![_slackUsername isEqual:other->_slackUsername]))) {
    return NO;
  }
  if ((_emailIsSet != other->_emailIsSet) ||
      (_emailIsSet && ((_email || other->_email) && ![_email isEqual:other->_email]))) {
    return NO;
  }
  if ((_customChannelIsSet != other->_customChannelIsSet) ||
      (_customChannelIsSet && ((_customChannel || other->_customChannel) && ![_customChannel isEqual:other->_customChannel]))) {
    return NO;
  }
  if ((_iosDeviceIsSet != other->_iosDeviceIsSet) ||
      (_iosDeviceIsSet && ((_iosDevice || other->_iosDevice) && ![_iosDevice isEqual:other->_iosDevice]))) {
    return NO;
  }
  if ((_androidDeviceIsSet != other->_androidDeviceIsSet) ||
      (_androidDeviceIsSet && ((_androidDevice || other->_androidDevice) && ![_androidDevice isEqual:other->_androidDevice]))) {
    return NO;
  }
  if ((_windowsPhoneDeviceIsSet != other->_windowsPhoneDeviceIsSet) ||
      (_windowsPhoneDeviceIsSet && ((_windowsPhoneDevice || other->_windowsPhoneDevice) && ![_windowsPhoneDevice isEqual:other->_windowsPhoneDevice]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaChannels_AromaChannel * val = [AromaChannels_AromaChannel new];
  if (_slackChannelIsSet)
  {
    val.slackChannel = [self.slackChannel copy];
  }
  if (_slackUsernameIsSet)
  {
    val.slackUsername = [self.slackUsername copy];
  }
  if (_emailIsSet)
  {
    val.email = [self.email copy];
  }
  if (_customChannelIsSet)
  {
    val.customChannel = [self.customChannel copy];
  }
  if (_iosDeviceIsSet)
  {
    val.iosDevice = [self.iosDevice copy];
  }
  if (_androidDeviceIsSet)
  {
    val.androidDevice = [self.androidDevice copy];
  }
  if (_windowsPhoneDeviceIsSet)
  {
    val.windowsPhoneDevice = [self.windowsPhoneDevice copy];
  }
  return val;
}

- (void) setSlackChannel: (AromaChannels_SlackChannel *) slackChannel {
  _slackChannel = slackChannel;
  _slackChannelIsSet = YES;
}

- (void) unsetSlackChannel {
  _slackChannel = nil;
  _slackChannelIsSet = NO;
}

- (void) setSlackUsername: (AromaChannels_SlackUsername *) slackUsername {
  _slackUsername = slackUsername;
  _slackUsernameIsSet = YES;
}

- (void) unsetSlackUsername {
  _slackUsername = nil;
  _slackUsernameIsSet = NO;
}

- (void) setEmail: (AromaChannels_Email *) email {
  _email = email;
  _emailIsSet = YES;
}

- (void) unsetEmail {
  _email = nil;
  _emailIsSet = NO;
}

- (void) setCustomChannel: (AromaChannels_CustomChannel *) customChannel {
  _customChannel = customChannel;
  _customChannelIsSet = YES;
}

- (void) unsetCustomChannel {
  _customChannel = nil;
  _customChannelIsSet = NO;
}

- (void) setIosDevice: (AromaChannels_IOSDevice *) iosDevice {
  _iosDevice = iosDevice;
  _iosDeviceIsSet = YES;
}

- (void) unsetIosDevice {
  _iosDevice = nil;
  _iosDeviceIsSet = NO;
}

- (void) setAndroidDevice: (AromaChannels_AndroidDevice *) androidDevice {
  _androidDevice = androidDevice;
  _androidDeviceIsSet = YES;
}

- (void) unsetAndroidDevice {
  _androidDevice = nil;
  _androidDeviceIsSet = NO;
}

- (void) setWindowsPhoneDevice: (AromaChannels_WindowsPhoneDevice *) windowsPhoneDevice {
  _windowsPhoneDevice = windowsPhoneDevice;
  _windowsPhoneDeviceIsSet = YES;
}

- (void) unsetWindowsPhoneDevice {
  _windowsPhoneDevice = nil;
  _windowsPhoneDeviceIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaChannels_SlackChannel *fieldValue = [[AromaChannels_SlackChannel alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.slackChannel = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaChannels_SlackUsername *fieldValue = [[AromaChannels_SlackUsername alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.slackUsername = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaChannels_Email *fieldValue = [[AromaChannels_Email alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.email = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          AromaChannels_CustomChannel *fieldValue = [[AromaChannels_CustomChannel alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.customChannel = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          AromaChannels_IOSDevice *fieldValue = [[AromaChannels_IOSDevice alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.iosDevice = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeSTRUCT) {
          AromaChannels_AndroidDevice *fieldValue = [[AromaChannels_AndroidDevice alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.androidDevice = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 7:
        if (fieldType == TTypeSTRUCT) {
          AromaChannels_WindowsPhoneDevice *fieldValue = [[AromaChannels_WindowsPhoneDevice alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.windowsPhoneDevice = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AromaChannel" error: __thriftError]) return NO;
  if (_slackChannelIsSet) {
    if (_slackChannel != nil) {
      if (![outProtocol writeFieldBeginWithName: @"slackChannel" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_slackChannel write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_slackUsernameIsSet) {
    if (_slackUsername != nil) {
      if (![outProtocol writeFieldBeginWithName: @"slackUsername" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_slackUsername write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_emailIsSet) {
    if (_email != nil) {
      if (![outProtocol writeFieldBeginWithName: @"email" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_email write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_customChannelIsSet) {
    if (_customChannel != nil) {
      if (![outProtocol writeFieldBeginWithName: @"customChannel" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_customChannel write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_iosDeviceIsSet) {
    if (_iosDevice != nil) {
      if (![outProtocol writeFieldBeginWithName: @"iosDevice" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_iosDevice write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_androidDeviceIsSet) {
    if (_androidDevice != nil) {
      if (![outProtocol writeFieldBeginWithName: @"androidDevice" type: TTypeSTRUCT fieldID: 6 error: __thriftError]) return NO;
      if (![_androidDevice write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_windowsPhoneDeviceIsSet) {
    if (_windowsPhoneDevice != nil) {
      if (![outProtocol writeFieldBeginWithName: @"windowsPhoneDevice" type: TTypeSTRUCT fieldID: 7 error: __thriftError]) return NO;
      if (![_windowsPhoneDevice write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaChannels_AromaChannel("];
  [ms appendString: @"slackChannel:"];
  [ms appendFormat: @"%@", _slackChannel];
  [ms appendString: @",slackUsername:"];
  [ms appendFormat: @"%@", _slackUsername];
  [ms appendString: @",email:"];
  [ms appendFormat: @"%@", _email];
  [ms appendString: @",customChannel:"];
  [ms appendFormat: @"%@", _customChannel];
  [ms appendString: @",iosDevice:"];
  [ms appendFormat: @"%@", _iosDevice];
  [ms appendString: @",androidDevice:"];
  [ms appendFormat: @"%@", _androidDevice];
  [ms appendString: @",windowsPhoneDevice:"];
  [ms appendFormat: @"%@", _windowsPhoneDevice];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaChannels_ChannelInfo

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithChannel: (AromaChannels_AromaChannel *) channel timeRegistered: (AromaChannels_timestamp) timeRegistered channelId: (AromaChannels_uuid) channelId
{
  self = [super init];
  if (self)  {
    _channel = channel;
    _channelIsSet = YES;
    _timeRegistered = timeRegistered;
    _timeRegisteredIsSet = YES;
    _channelId = channelId;
    _channelIdIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"channel"])
    {
      _channel = [decoder decodeObjectForKey: @"channel"];
      _channelIsSet = YES;
    }
    if ([decoder containsValueForKey: @"timeRegistered"])
    {
      _timeRegistered = [decoder decodeInt64ForKey: @"timeRegistered"];
      _timeRegisteredIsSet = YES;
    }
    if ([decoder containsValueForKey: @"channelId"])
    {
      _channelId = [decoder decodeObjectForKey: @"channelId"];
      _channelIdIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_channelIsSet)
  {
    [encoder encodeObject: _channel forKey: @"channel"];
  }
  if (_timeRegisteredIsSet)
  {
    [encoder encodeInt64: _timeRegistered forKey: @"timeRegistered"];
  }
  if (_channelIdIsSet)
  {
    [encoder encodeObject: _channelId forKey: @"channelId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _channelIsSet ? 2654435761 : 0;
  if (_channelIsSet)
  {
    hash = (hash * 31) ^ [_channel hash];
  }
  hash = (hash * 31) ^ _timeRegisteredIsSet ? 2654435761 : 0;
  if (_timeRegisteredIsSet)
  {
    hash = (hash * 31) ^ [@(_timeRegistered) hash];
  }
  hash = (hash * 31) ^ _channelIdIsSet ? 2654435761 : 0;
  if (_channelIdIsSet)
  {
    hash = (hash * 31) ^ [_channelId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaChannels_ChannelInfo class]]) {
    return NO;
  }
  AromaChannels_ChannelInfo *other = (AromaChannels_ChannelInfo *)anObject;
  if ((_channelIsSet != other->_channelIsSet) ||
      (_channelIsSet && ((_channel || other->_channel) && ![_channel isEqual:other->_channel]))) {
    return NO;
  }
  if ((_timeRegisteredIsSet != other->_timeRegisteredIsSet) ||
      (_timeRegisteredIsSet && (_timeRegistered != other->_timeRegistered))) {
    return NO;
  }
  if ((_channelIdIsSet != other->_channelIdIsSet) ||
      (_channelIdIsSet && ((_channelId || other->_channelId) && ![_channelId isEqual:other->_channelId]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaChannels_ChannelInfo * val = [AromaChannels_ChannelInfo new];
  if (_channelIsSet)
  {
    val.channel = [self.channel copy];
  }
  if (_timeRegisteredIsSet)
  {
    val.timeRegistered = self.timeRegistered;
  }
  if (_channelIdIsSet)
  {
    val.channelId = [self.channelId copy];
  }
  return val;
}

- (void) setChannel: (AromaChannels_AromaChannel *) channel {
  _channel = channel;
  _channelIsSet = YES;
}

- (void) unsetChannel {
  _channel = nil;
  _channelIsSet = NO;
}

- (void) setTimeRegistered: (SInt64) timeRegistered {
  _timeRegistered = timeRegistered;
  _timeRegisteredIsSet = YES;
}

- (void) unsetTimeRegistered {
  _timeRegisteredIsSet = NO;
}

- (void) setChannelId: (NSString *) channelId {
  _channelId = channelId;
  _channelIdIsSet = YES;
}

- (void) unsetChannelId {
  _channelId = nil;
  _channelIdIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaChannels_AromaChannel *fieldValue = [[AromaChannels_AromaChannel alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.channel = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.timeRegistered = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.channelId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ChannelInfo" error: __thriftError]) return NO;
  if (_channelIsSet) {
    if (_channel != nil) {
      if (![outProtocol writeFieldBeginWithName: @"channel" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_channel write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_timeRegisteredIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"timeRegistered" type: TTypeI64 fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _timeRegistered error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_channelIdIsSet) {
    if (_channelId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"channelId" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _channelId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaChannels_ChannelInfo("];
  [ms appendString: @"channel:"];
  [ms appendFormat: @"%@", _channel];
  [ms appendString: @",timeRegistered:"];
  [ms appendFormat: @"%qi", _timeRegistered];
  [ms appendString: @",channelId:"];
  [ms appendFormat: @"\"%@\"", _channelId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaChannels_ReceiveMessageRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithMessage: (Aroma_Message *) message
{
  self = [super init];
  if (self)  {
    _message = message;
    _messageIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"message"])
    {
      _message = [decoder decodeObjectForKey: @"message"];
      _messageIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_messageIsSet)
  {
    [encoder encodeObject: _message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _messageIsSet ? 2654435761 : 0;
  if (_messageIsSet)
  {
    hash = (hash * 31) ^ [_message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaChannels_ReceiveMessageRequest class]]) {
    return NO;
  }
  AromaChannels_ReceiveMessageRequest *other = (AromaChannels_ReceiveMessageRequest *)anObject;
  if ((_messageIsSet != other->_messageIsSet) ||
      (_messageIsSet && ((_message || other->_message) && ![_message isEqual:other->_message]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaChannels_ReceiveMessageRequest * val = [AromaChannels_ReceiveMessageRequest new];
  if (_messageIsSet)
  {
    val.message = [self.message copy];
  }
  return val;
}

- (void) setMessage: (Aroma_Message *) message {
  _message = message;
  _messageIsSet = YES;
}

- (void) unsetMessage {
  _message = nil;
  _messageIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          Aroma_Message *fieldValue = [[Aroma_Message alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.message = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ReceiveMessageRequest" error: __thriftError]) return NO;
  if (_messageIsSet) {
    if (_message != nil) {
      if (![outProtocol writeFieldBeginWithName: @"message" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_message write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaChannels_ReceiveMessageRequest("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"%@", _message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

NSString *AromaChannels_ChannelsErrorDomain = @"AromaChannels_ChannelsErrorDomain";

NSString * AromaChannels_PUSH_NOTIFICATION_KEY_FOR_PAYLOAD = @"aroma.notification.payload";

@interface AromaChannels_CustomAromaChannel_ping_args : NSObject <TBase, NSCoding, NSCopying> 



@end

@implementation AromaChannels_CustomAromaChannel_ping_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaChannels_CustomAromaChannel_ping_args class]]) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaChannels_CustomAromaChannel_ping_args * val = [AromaChannels_CustomAromaChannel_ping_args new];
  return val;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"CustomAromaChannel_ping_args" error: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaChannels_CustomAromaChannel_ping_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaChannels_CustomAromaChannel_ping_result : NSObject <TBase, NSCoding, NSCopying> 

@property (assign, nonatomic) AromaChannels_int success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;


- (instancetype) initWithSuccess: (AromaChannels_int) success;

@end

@implementation AromaChannels_CustomAromaChannel_ping_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (AromaChannels_int) success
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeInt32ForKey: @"success"];
      _successIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeInt32: _success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [@(_success) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaChannels_CustomAromaChannel_ping_result class]]) {
    return NO;
  }
  AromaChannels_CustomAromaChannel_ping_result *other = (AromaChannels_CustomAromaChannel_ping_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && (_success != other->_success))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaChannels_CustomAromaChannel_ping_result * val = [AromaChannels_CustomAromaChannel_ping_result new];
  if (_successIsSet)
  {
    val.success = self.success;
  }
  return val;
}

- (void) setSuccess: (SInt32) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _successIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeI32) {
          SInt32 fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"CustomAromaChannel_ping_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeI32 fieldID: 0 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _success error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaChannels_CustomAromaChannel_ping_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", (int)_success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaChannels_CustomAromaChannel_receiveMessage_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) AromaChannels_ReceiveMessageRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (AromaChannels_ReceiveMessageRequest *) request;

@end

@implementation AromaChannels_CustomAromaChannel_receiveMessage_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (AromaChannels_ReceiveMessageRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaChannels_CustomAromaChannel_receiveMessage_args class]]) {
    return NO;
  }
  AromaChannels_CustomAromaChannel_receiveMessage_args *other = (AromaChannels_CustomAromaChannel_receiveMessage_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  AromaChannels_CustomAromaChannel_receiveMessage_args * val = [AromaChannels_CustomAromaChannel_receiveMessage_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (AromaChannels_ReceiveMessageRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaChannels_ReceiveMessageRequest *fieldValue = [[AromaChannels_ReceiveMessageRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"CustomAromaChannel_receiveMessage_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaChannels_CustomAromaChannel_receiveMessage_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AromaChannels_CustomAromaChannelClient () {

  id<TProtocol> inProtocol;
  id<TProtocol> outProtocol;

}

@end

@implementation AromaChannels_CustomAromaChannelClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  if (self)   {
    inProtocol = anInProtocol;
    outProtocol = anOutProtocol;
  }
  return self;
}

- (BOOL) send_ping: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"ping" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"CustomAromaChannel_ping_args" error: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_ping: (AromaChannels_int *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  AromaChannels_CustomAromaChannel_ping_result * resulter = [AromaChannels_CustomAromaChannel_ping_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"ping"}];
  }
  return NO;
}

- (NSNumber *) ping: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_ping: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  AromaChannels_int __result;
  if (![self recv_ping: &__result error: __thriftError]) return nil;
  return @(__result);
}

- (BOOL) send_receiveMessage: (AromaChannels_ReceiveMessageRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"receiveMessage" type: TMessageTypeONEWAY sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"CustomAromaChannel_receiveMessage_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) receiveMessage: (AromaChannels_ReceiveMessageRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_receiveMessage : request error: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

@end

@interface AromaChannels_CustomAromaChannelProcessor () {
  id <AromaChannels_CustomAromaChannel> service;
  NSDictionary * methodMap;
}
@end

@implementation AromaChannels_CustomAromaChannelProcessor

- (id) initWithCustomAromaChannel: (id <AromaChannels_CustomAromaChannel>) aService
{
  self = [super init];
  if (self)   {
    service = aService;
    methodMap = [NSMutableDictionary dictionary];
    {
      SEL s = @selector(process_ping_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"ping"];
    }
    {
      SEL s = @selector(process_receiveMessage_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"receiveMessage"];
    }
  }
  return self;
}

- (id<AromaChannels_CustomAromaChannel>) service
{
  return service;
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
                          error: (NSError *__autoreleasing *)__thriftError
{
  NSString * messageName;
  SInt32 messageType;
  SInt32 seqID;
  if (![inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID
                                      error: __thriftError]) return NO;
  NSInvocation * invocation = [methodMap valueForKey: messageName];
  if (invocation == nil) {
    if (![TProtocolUtil skipType: TTypeSTRUCT onProtocol: inProtocol error: __thriftError]) return NO;
    if (![inProtocol readMessageEnd: __thriftError]) return NO;
    NSError * x = [NSError errorWithDomain: TApplicationErrorDomain
                                      code: TApplicationErrorUnknownMethod
                                  userInfo: @{TApplicationErrorMethodKey: messageName}];
    if (![outProtocol writeMessageBeginWithName: messageName
                                           type: TMessageTypeEXCEPTION
                                     sequenceID: seqID
                                          error: __thriftError]) return NO;
    if (![x write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeMessageEnd: __thriftError]) return NO;
    if (![[outProtocol transport] flush: __thriftError]) return NO;
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setArgument: &__thriftError atIndex: 5];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (BOOL) process_ping_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaChannels_CustomAromaChannel_ping_args * args = [AromaChannels_CustomAromaChannel_ping_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  AromaChannels_CustomAromaChannel_ping_result * result = [AromaChannels_CustomAromaChannel_ping_result new];
  NSNumber * serviceResult = [service ping: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: ((SInt32)[serviceResult longValue])];
  if (![outProtocol writeMessageBeginWithName: @"ping"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_receiveMessage_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  AromaChannels_CustomAromaChannel_receiveMessage_args * args = [AromaChannels_CustomAromaChannel_receiveMessage_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  BOOL serviceResult = [service receiveMessage: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  return YES;
}
@end

