/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"

#import "Aroma.h"
#import "Exceptions.h"

#import "Reactions.h"

@implementation AromaReactions_MatcherAll

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_MatcherAll class]]) {
    return NO;
  }
  AromaReactions_MatcherAll *other = (AromaReactions_MatcherAll *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MatcherAll"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_MatcherAll("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_MatcherTitleIs

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithExpectedTitle: (NSString *) expectedTitle
{
  self = [super init];
  __expectedTitle = [expectedTitle retain_stub];
  __expectedTitle_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"expectedTitle"])
  {
    __expectedTitle = [[decoder decodeObjectForKey: @"expectedTitle"] retain_stub];
    __expectedTitle_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__expectedTitle_isset)
  {
    [encoder encodeObject: __expectedTitle forKey: @"expectedTitle"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __expectedTitle_isset ? 2654435761 : 0;
  if (__expectedTitle_isset)
  {
    hash = (hash * 31) ^ [__expectedTitle hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_MatcherTitleIs class]]) {
    return NO;
  }
  AromaReactions_MatcherTitleIs *other = (AromaReactions_MatcherTitleIs *)anObject;
  if ((__expectedTitle_isset != other->__expectedTitle_isset) ||
      (__expectedTitle_isset && ((__expectedTitle || other->__expectedTitle) && ![__expectedTitle isEqual:other->__expectedTitle]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__expectedTitle release_stub];
  [super dealloc_stub];
}

- (NSString *) expectedTitle {
  return [[__expectedTitle retain_stub] autorelease_stub];
}

- (void) setExpectedTitle: (NSString *) expectedTitle {
  [expectedTitle retain_stub];
  [__expectedTitle release_stub];
  __expectedTitle = expectedTitle;
  __expectedTitle_isset = YES;
}

- (BOOL) expectedTitleIsSet {
  return __expectedTitle_isset;
}

- (void) unsetExpectedTitle {
  [__expectedTitle release_stub];
  __expectedTitle = nil;
  __expectedTitle_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExpectedTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MatcherTitleIs"];
  if (__expectedTitle_isset) {
    if (__expectedTitle != nil) {
      [outProtocol writeFieldBeginWithName: @"expectedTitle" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __expectedTitle];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_MatcherTitleIs("];
  [ms appendString: @"expectedTitle:"];
  [ms appendFormat: @"\"%@\"", __expectedTitle];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_MatcherTitleContains

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSubstring: (NSString *) substring
{
  self = [super init];
  __substring = [substring retain_stub];
  __substring_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"substring"])
  {
    __substring = [[decoder decodeObjectForKey: @"substring"] retain_stub];
    __substring_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__substring_isset)
  {
    [encoder encodeObject: __substring forKey: @"substring"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __substring_isset ? 2654435761 : 0;
  if (__substring_isset)
  {
    hash = (hash * 31) ^ [__substring hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_MatcherTitleContains class]]) {
    return NO;
  }
  AromaReactions_MatcherTitleContains *other = (AromaReactions_MatcherTitleContains *)anObject;
  if ((__substring_isset != other->__substring_isset) ||
      (__substring_isset && ((__substring || other->__substring) && ![__substring isEqual:other->__substring]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__substring release_stub];
  [super dealloc_stub];
}

- (NSString *) substring {
  return [[__substring retain_stub] autorelease_stub];
}

- (void) setSubstring: (NSString *) substring {
  [substring retain_stub];
  [__substring release_stub];
  __substring = substring;
  __substring_isset = YES;
}

- (BOOL) substringIsSet {
  return __substring_isset;
}

- (void) unsetSubstring {
  [__substring release_stub];
  __substring = nil;
  __substring_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSubstring: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MatcherTitleContains"];
  if (__substring_isset) {
    if (__substring != nil) {
      [outProtocol writeFieldBeginWithName: @"substring" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __substring];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_MatcherTitleContains("];
  [ms appendString: @"substring:"];
  [ms appendFormat: @"\"%@\"", __substring];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_MatcherBodyIs

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithExpectedBody: (NSString *) expectedBody
{
  self = [super init];
  __expectedBody = [expectedBody retain_stub];
  __expectedBody_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"expectedBody"])
  {
    __expectedBody = [[decoder decodeObjectForKey: @"expectedBody"] retain_stub];
    __expectedBody_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__expectedBody_isset)
  {
    [encoder encodeObject: __expectedBody forKey: @"expectedBody"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __expectedBody_isset ? 2654435761 : 0;
  if (__expectedBody_isset)
  {
    hash = (hash * 31) ^ [__expectedBody hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_MatcherBodyIs class]]) {
    return NO;
  }
  AromaReactions_MatcherBodyIs *other = (AromaReactions_MatcherBodyIs *)anObject;
  if ((__expectedBody_isset != other->__expectedBody_isset) ||
      (__expectedBody_isset && ((__expectedBody || other->__expectedBody) && ![__expectedBody isEqual:other->__expectedBody]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__expectedBody release_stub];
  [super dealloc_stub];
}

- (NSString *) expectedBody {
  return [[__expectedBody retain_stub] autorelease_stub];
}

- (void) setExpectedBody: (NSString *) expectedBody {
  [expectedBody retain_stub];
  [__expectedBody release_stub];
  __expectedBody = expectedBody;
  __expectedBody_isset = YES;
}

- (BOOL) expectedBodyIsSet {
  return __expectedBody_isset;
}

- (void) unsetExpectedBody {
  [__expectedBody release_stub];
  __expectedBody = nil;
  __expectedBody_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExpectedBody: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MatcherBodyIs"];
  if (__expectedBody_isset) {
    if (__expectedBody != nil) {
      [outProtocol writeFieldBeginWithName: @"expectedBody" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __expectedBody];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_MatcherBodyIs("];
  [ms appendString: @"expectedBody:"];
  [ms appendFormat: @"\"%@\"", __expectedBody];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_MatcherBodyContains

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSubstring: (NSString *) substring
{
  self = [super init];
  __substring = [substring retain_stub];
  __substring_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"substring"])
  {
    __substring = [[decoder decodeObjectForKey: @"substring"] retain_stub];
    __substring_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__substring_isset)
  {
    [encoder encodeObject: __substring forKey: @"substring"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __substring_isset ? 2654435761 : 0;
  if (__substring_isset)
  {
    hash = (hash * 31) ^ [__substring hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_MatcherBodyContains class]]) {
    return NO;
  }
  AromaReactions_MatcherBodyContains *other = (AromaReactions_MatcherBodyContains *)anObject;
  if ((__substring_isset != other->__substring_isset) ||
      (__substring_isset && ((__substring || other->__substring) && ![__substring isEqual:other->__substring]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__substring release_stub];
  [super dealloc_stub];
}

- (NSString *) substring {
  return [[__substring retain_stub] autorelease_stub];
}

- (void) setSubstring: (NSString *) substring {
  [substring retain_stub];
  [__substring release_stub];
  __substring = substring;
  __substring_isset = YES;
}

- (BOOL) substringIsSet {
  return __substring_isset;
}

- (void) unsetSubstring {
  [__substring release_stub];
  __substring = nil;
  __substring_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSubstring: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MatcherBodyContains"];
  if (__substring_isset) {
    if (__substring != nil) {
      [outProtocol writeFieldBeginWithName: @"substring" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __substring];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_MatcherBodyContains("];
  [ms appendString: @"substring:"];
  [ms appendFormat: @"\"%@\"", __substring];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_MatcherUrgencyEquals

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUrgency: (int) urgency
{
  self = [super init];
  __urgency = urgency;
  __urgency_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"urgency"])
  {
    __urgency = [decoder decodeIntForKey: @"urgency"];
    __urgency_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__urgency_isset)
  {
    [encoder encodeInt: __urgency forKey: @"urgency"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __urgency_isset ? 2654435761 : 0;
  if (__urgency_isset)
  {
    hash = (hash * 31) ^ [@(__urgency) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_MatcherUrgencyEquals class]]) {
    return NO;
  }
  AromaReactions_MatcherUrgencyEquals *other = (AromaReactions_MatcherUrgencyEquals *)anObject;
  if ((__urgency_isset != other->__urgency_isset) ||
      (__urgency_isset && (__urgency != other->__urgency))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int) urgency {
  return __urgency;
}

- (void) setUrgency: (int) urgency {
  __urgency = urgency;
  __urgency_isset = YES;
}

- (BOOL) urgencyIsSet {
  return __urgency_isset;
}

- (void) unsetUrgency {
  __urgency_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setUrgency: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MatcherUrgencyEquals"];
  if (__urgency_isset) {
    [outProtocol writeFieldBeginWithName: @"urgency" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __urgency];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_MatcherUrgencyEquals("];
  [ms appendString: @"urgency:"];
  [ms appendFormat: @"%i", __urgency];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_MatcherHostnameEquals

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithExpectedHostname: (NSString *) expectedHostname
{
  self = [super init];
  __expectedHostname = [expectedHostname retain_stub];
  __expectedHostname_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"expectedHostname"])
  {
    __expectedHostname = [[decoder decodeObjectForKey: @"expectedHostname"] retain_stub];
    __expectedHostname_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__expectedHostname_isset)
  {
    [encoder encodeObject: __expectedHostname forKey: @"expectedHostname"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __expectedHostname_isset ? 2654435761 : 0;
  if (__expectedHostname_isset)
  {
    hash = (hash * 31) ^ [__expectedHostname hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_MatcherHostnameEquals class]]) {
    return NO;
  }
  AromaReactions_MatcherHostnameEquals *other = (AromaReactions_MatcherHostnameEquals *)anObject;
  if ((__expectedHostname_isset != other->__expectedHostname_isset) ||
      (__expectedHostname_isset && ((__expectedHostname || other->__expectedHostname) && ![__expectedHostname isEqual:other->__expectedHostname]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__expectedHostname release_stub];
  [super dealloc_stub];
}

- (NSString *) expectedHostname {
  return [[__expectedHostname retain_stub] autorelease_stub];
}

- (void) setExpectedHostname: (NSString *) expectedHostname {
  [expectedHostname retain_stub];
  [__expectedHostname release_stub];
  __expectedHostname = expectedHostname;
  __expectedHostname_isset = YES;
}

- (BOOL) expectedHostnameIsSet {
  return __expectedHostname_isset;
}

- (void) unsetExpectedHostname {
  [__expectedHostname release_stub];
  __expectedHostname = nil;
  __expectedHostname_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExpectedHostname: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MatcherHostnameEquals"];
  if (__expectedHostname_isset) {
    if (__expectedHostname != nil) {
      [outProtocol writeFieldBeginWithName: @"expectedHostname" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __expectedHostname];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_MatcherHostnameEquals("];
  [ms appendString: @"expectedHostname:"];
  [ms appendFormat: @"\"%@\"", __expectedHostname];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_Matcher

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAll: (AromaReactions_MatcherAll *) all titleIs: (AromaReactions_MatcherTitleIs *) titleIs titleContains: (AromaReactions_MatcherTitleContains *) titleContains bodyIs: (AromaReactions_MatcherBodyIs *) bodyIs bodyContains: (AromaReactions_MatcherBodyContains *) bodyContains urgencyEquals: (AromaReactions_MatcherUrgencyEquals *) urgencyEquals hostnameEquals: (AromaReactions_MatcherHostnameEquals *) hostnameEquals
{
  self = [super init];
  __all = [all retain_stub];
  __all_isset = YES;
  __titleIs = [titleIs retain_stub];
  __titleIs_isset = YES;
  __titleContains = [titleContains retain_stub];
  __titleContains_isset = YES;
  __bodyIs = [bodyIs retain_stub];
  __bodyIs_isset = YES;
  __bodyContains = [bodyContains retain_stub];
  __bodyContains_isset = YES;
  __urgencyEquals = [urgencyEquals retain_stub];
  __urgencyEquals_isset = YES;
  __hostnameEquals = [hostnameEquals retain_stub];
  __hostnameEquals_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"all"])
  {
    __all = [[decoder decodeObjectForKey: @"all"] retain_stub];
    __all_isset = YES;
  }
  if ([decoder containsValueForKey: @"titleIs"])
  {
    __titleIs = [[decoder decodeObjectForKey: @"titleIs"] retain_stub];
    __titleIs_isset = YES;
  }
  if ([decoder containsValueForKey: @"titleContains"])
  {
    __titleContains = [[decoder decodeObjectForKey: @"titleContains"] retain_stub];
    __titleContains_isset = YES;
  }
  if ([decoder containsValueForKey: @"bodyIs"])
  {
    __bodyIs = [[decoder decodeObjectForKey: @"bodyIs"] retain_stub];
    __bodyIs_isset = YES;
  }
  if ([decoder containsValueForKey: @"bodyContains"])
  {
    __bodyContains = [[decoder decodeObjectForKey: @"bodyContains"] retain_stub];
    __bodyContains_isset = YES;
  }
  if ([decoder containsValueForKey: @"urgencyEquals"])
  {
    __urgencyEquals = [[decoder decodeObjectForKey: @"urgencyEquals"] retain_stub];
    __urgencyEquals_isset = YES;
  }
  if ([decoder containsValueForKey: @"hostnameEquals"])
  {
    __hostnameEquals = [[decoder decodeObjectForKey: @"hostnameEquals"] retain_stub];
    __hostnameEquals_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__all_isset)
  {
    [encoder encodeObject: __all forKey: @"all"];
  }
  if (__titleIs_isset)
  {
    [encoder encodeObject: __titleIs forKey: @"titleIs"];
  }
  if (__titleContains_isset)
  {
    [encoder encodeObject: __titleContains forKey: @"titleContains"];
  }
  if (__bodyIs_isset)
  {
    [encoder encodeObject: __bodyIs forKey: @"bodyIs"];
  }
  if (__bodyContains_isset)
  {
    [encoder encodeObject: __bodyContains forKey: @"bodyContains"];
  }
  if (__urgencyEquals_isset)
  {
    [encoder encodeObject: __urgencyEquals forKey: @"urgencyEquals"];
  }
  if (__hostnameEquals_isset)
  {
    [encoder encodeObject: __hostnameEquals forKey: @"hostnameEquals"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __all_isset ? 2654435761 : 0;
  if (__all_isset)
  {
    hash = (hash * 31) ^ [__all hash];
  }
  hash = (hash * 31) ^ __titleIs_isset ? 2654435761 : 0;
  if (__titleIs_isset)
  {
    hash = (hash * 31) ^ [__titleIs hash];
  }
  hash = (hash * 31) ^ __titleContains_isset ? 2654435761 : 0;
  if (__titleContains_isset)
  {
    hash = (hash * 31) ^ [__titleContains hash];
  }
  hash = (hash * 31) ^ __bodyIs_isset ? 2654435761 : 0;
  if (__bodyIs_isset)
  {
    hash = (hash * 31) ^ [__bodyIs hash];
  }
  hash = (hash * 31) ^ __bodyContains_isset ? 2654435761 : 0;
  if (__bodyContains_isset)
  {
    hash = (hash * 31) ^ [__bodyContains hash];
  }
  hash = (hash * 31) ^ __urgencyEquals_isset ? 2654435761 : 0;
  if (__urgencyEquals_isset)
  {
    hash = (hash * 31) ^ [__urgencyEquals hash];
  }
  hash = (hash * 31) ^ __hostnameEquals_isset ? 2654435761 : 0;
  if (__hostnameEquals_isset)
  {
    hash = (hash * 31) ^ [__hostnameEquals hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_Matcher class]]) {
    return NO;
  }
  AromaReactions_Matcher *other = (AromaReactions_Matcher *)anObject;
  if ((__all_isset != other->__all_isset) ||
      (__all_isset && ((__all || other->__all) && ![__all isEqual:other->__all]))) {
    return NO;
  }
  if ((__titleIs_isset != other->__titleIs_isset) ||
      (__titleIs_isset && ((__titleIs || other->__titleIs) && ![__titleIs isEqual:other->__titleIs]))) {
    return NO;
  }
  if ((__titleContains_isset != other->__titleContains_isset) ||
      (__titleContains_isset && ((__titleContains || other->__titleContains) && ![__titleContains isEqual:other->__titleContains]))) {
    return NO;
  }
  if ((__bodyIs_isset != other->__bodyIs_isset) ||
      (__bodyIs_isset && ((__bodyIs || other->__bodyIs) && ![__bodyIs isEqual:other->__bodyIs]))) {
    return NO;
  }
  if ((__bodyContains_isset != other->__bodyContains_isset) ||
      (__bodyContains_isset && ((__bodyContains || other->__bodyContains) && ![__bodyContains isEqual:other->__bodyContains]))) {
    return NO;
  }
  if ((__urgencyEquals_isset != other->__urgencyEquals_isset) ||
      (__urgencyEquals_isset && ((__urgencyEquals || other->__urgencyEquals) && ![__urgencyEquals isEqual:other->__urgencyEquals]))) {
    return NO;
  }
  if ((__hostnameEquals_isset != other->__hostnameEquals_isset) ||
      (__hostnameEquals_isset && ((__hostnameEquals || other->__hostnameEquals) && ![__hostnameEquals isEqual:other->__hostnameEquals]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__all release_stub];
  [__titleIs release_stub];
  [__titleContains release_stub];
  [__bodyIs release_stub];
  [__bodyContains release_stub];
  [__urgencyEquals release_stub];
  [__hostnameEquals release_stub];
  [super dealloc_stub];
}

- (AromaReactions_MatcherAll *) all {
  return [[__all retain_stub] autorelease_stub];
}

- (void) setAll: (AromaReactions_MatcherAll *) all {
  [all retain_stub];
  [__all release_stub];
  __all = all;
  __all_isset = YES;
}

- (BOOL) allIsSet {
  return __all_isset;
}

- (void) unsetAll {
  [__all release_stub];
  __all = nil;
  __all_isset = NO;
}

- (AromaReactions_MatcherTitleIs *) titleIs {
  return [[__titleIs retain_stub] autorelease_stub];
}

- (void) setTitleIs: (AromaReactions_MatcherTitleIs *) titleIs {
  [titleIs retain_stub];
  [__titleIs release_stub];
  __titleIs = titleIs;
  __titleIs_isset = YES;
}

- (BOOL) titleIsIsSet {
  return __titleIs_isset;
}

- (void) unsetTitleIs {
  [__titleIs release_stub];
  __titleIs = nil;
  __titleIs_isset = NO;
}

- (AromaReactions_MatcherTitleContains *) titleContains {
  return [[__titleContains retain_stub] autorelease_stub];
}

- (void) setTitleContains: (AromaReactions_MatcherTitleContains *) titleContains {
  [titleContains retain_stub];
  [__titleContains release_stub];
  __titleContains = titleContains;
  __titleContains_isset = YES;
}

- (BOOL) titleContainsIsSet {
  return __titleContains_isset;
}

- (void) unsetTitleContains {
  [__titleContains release_stub];
  __titleContains = nil;
  __titleContains_isset = NO;
}

- (AromaReactions_MatcherBodyIs *) bodyIs {
  return [[__bodyIs retain_stub] autorelease_stub];
}

- (void) setBodyIs: (AromaReactions_MatcherBodyIs *) bodyIs {
  [bodyIs retain_stub];
  [__bodyIs release_stub];
  __bodyIs = bodyIs;
  __bodyIs_isset = YES;
}

- (BOOL) bodyIsIsSet {
  return __bodyIs_isset;
}

- (void) unsetBodyIs {
  [__bodyIs release_stub];
  __bodyIs = nil;
  __bodyIs_isset = NO;
}

- (AromaReactions_MatcherBodyContains *) bodyContains {
  return [[__bodyContains retain_stub] autorelease_stub];
}

- (void) setBodyContains: (AromaReactions_MatcherBodyContains *) bodyContains {
  [bodyContains retain_stub];
  [__bodyContains release_stub];
  __bodyContains = bodyContains;
  __bodyContains_isset = YES;
}

- (BOOL) bodyContainsIsSet {
  return __bodyContains_isset;
}

- (void) unsetBodyContains {
  [__bodyContains release_stub];
  __bodyContains = nil;
  __bodyContains_isset = NO;
}

- (AromaReactions_MatcherUrgencyEquals *) urgencyEquals {
  return [[__urgencyEquals retain_stub] autorelease_stub];
}

- (void) setUrgencyEquals: (AromaReactions_MatcherUrgencyEquals *) urgencyEquals {
  [urgencyEquals retain_stub];
  [__urgencyEquals release_stub];
  __urgencyEquals = urgencyEquals;
  __urgencyEquals_isset = YES;
}

- (BOOL) urgencyEqualsIsSet {
  return __urgencyEquals_isset;
}

- (void) unsetUrgencyEquals {
  [__urgencyEquals release_stub];
  __urgencyEquals = nil;
  __urgencyEquals_isset = NO;
}

- (AromaReactions_MatcherHostnameEquals *) hostnameEquals {
  return [[__hostnameEquals retain_stub] autorelease_stub];
}

- (void) setHostnameEquals: (AromaReactions_MatcherHostnameEquals *) hostnameEquals {
  [hostnameEquals retain_stub];
  [__hostnameEquals release_stub];
  __hostnameEquals = hostnameEquals;
  __hostnameEquals_isset = YES;
}

- (BOOL) hostnameEqualsIsSet {
  return __hostnameEquals_isset;
}

- (void) unsetHostnameEquals {
  [__hostnameEquals release_stub];
  __hostnameEquals = nil;
  __hostnameEquals_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AromaReactions_MatcherAll *fieldValue = [[AromaReactions_MatcherAll alloc] init];
          [fieldValue read: inProtocol];
          [self setAll: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          AromaReactions_MatcherTitleIs *fieldValue = [[AromaReactions_MatcherTitleIs alloc] init];
          [fieldValue read: inProtocol];
          [self setTitleIs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          AromaReactions_MatcherTitleContains *fieldValue = [[AromaReactions_MatcherTitleContains alloc] init];
          [fieldValue read: inProtocol];
          [self setTitleContains: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          AromaReactions_MatcherBodyIs *fieldValue = [[AromaReactions_MatcherBodyIs alloc] init];
          [fieldValue read: inProtocol];
          [self setBodyIs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          AromaReactions_MatcherBodyContains *fieldValue = [[AromaReactions_MatcherBodyContains alloc] init];
          [fieldValue read: inProtocol];
          [self setBodyContains: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRUCT) {
          AromaReactions_MatcherUrgencyEquals *fieldValue = [[AromaReactions_MatcherUrgencyEquals alloc] init];
          [fieldValue read: inProtocol];
          [self setUrgencyEquals: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRUCT) {
          AromaReactions_MatcherHostnameEquals *fieldValue = [[AromaReactions_MatcherHostnameEquals alloc] init];
          [fieldValue read: inProtocol];
          [self setHostnameEquals: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Matcher"];
  if (__all_isset) {
    if (__all != nil) {
      [outProtocol writeFieldBeginWithName: @"all" type: TType_STRUCT fieldID: 1];
      [__all write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__titleIs_isset) {
    if (__titleIs != nil) {
      [outProtocol writeFieldBeginWithName: @"titleIs" type: TType_STRUCT fieldID: 2];
      [__titleIs write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__titleContains_isset) {
    if (__titleContains != nil) {
      [outProtocol writeFieldBeginWithName: @"titleContains" type: TType_STRUCT fieldID: 3];
      [__titleContains write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bodyIs_isset) {
    if (__bodyIs != nil) {
      [outProtocol writeFieldBeginWithName: @"bodyIs" type: TType_STRUCT fieldID: 4];
      [__bodyIs write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bodyContains_isset) {
    if (__bodyContains != nil) {
      [outProtocol writeFieldBeginWithName: @"bodyContains" type: TType_STRUCT fieldID: 5];
      [__bodyContains write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__urgencyEquals_isset) {
    if (__urgencyEquals != nil) {
      [outProtocol writeFieldBeginWithName: @"urgencyEquals" type: TType_STRUCT fieldID: 6];
      [__urgencyEquals write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hostnameEquals_isset) {
    if (__hostnameEquals != nil) {
      [outProtocol writeFieldBeginWithName: @"hostnameEquals" type: TType_STRUCT fieldID: 7];
      [__hostnameEquals write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_Matcher("];
  [ms appendString: @"all:"];
  [ms appendFormat: @"%@", __all];
  [ms appendString: @",titleIs:"];
  [ms appendFormat: @"%@", __titleIs];
  [ms appendString: @",titleContains:"];
  [ms appendFormat: @"%@", __titleContains];
  [ms appendString: @",bodyIs:"];
  [ms appendFormat: @"%@", __bodyIs];
  [ms appendString: @",bodyContains:"];
  [ms appendFormat: @"%@", __bodyContains];
  [ms appendString: @",urgencyEquals:"];
  [ms appendFormat: @"%@", __urgencyEquals];
  [ms appendString: @",hostnameEquals:"];
  [ms appendFormat: @"%@", __hostnameEquals];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation AromaReactions_ReactionsConstants
+ (void) initialize {
}
@end

