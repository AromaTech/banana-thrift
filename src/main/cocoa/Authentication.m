/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"

#import "Banana.h"

#import "Authentication.h"

@implementation BananaAuthentication_ApplicationToken

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTokenId: (NSString *) tokenId organization: (NSString *) organization timeOfExpiration: (BananaAuthentication_timestamp) timeOfExpiration applicationId: (NSString *) applicationId applicationName: (NSString *) applicationName
{
  self = [super init];
  __tokenId = [tokenId retain_stub];
  __tokenId_isset = YES;
  __organization = [organization retain_stub];
  __organization_isset = YES;
  __timeOfExpiration = timeOfExpiration;
  __timeOfExpiration_isset = YES;
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  __applicationName = [applicationName retain_stub];
  __applicationName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"tokenId"])
  {
    __tokenId = [[decoder decodeObjectForKey: @"tokenId"] retain_stub];
    __tokenId_isset = YES;
  }
  if ([decoder containsValueForKey: @"organization"])
  {
    __organization = [[decoder decodeObjectForKey: @"organization"] retain_stub];
    __organization_isset = YES;
  }
  if ([decoder containsValueForKey: @"timeOfExpiration"])
  {
    __timeOfExpiration = [decoder decodeInt64ForKey: @"timeOfExpiration"];
    __timeOfExpiration_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationName"])
  {
    __applicationName = [[decoder decodeObjectForKey: @"applicationName"] retain_stub];
    __applicationName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__tokenId_isset)
  {
    [encoder encodeObject: __tokenId forKey: @"tokenId"];
  }
  if (__organization_isset)
  {
    [encoder encodeObject: __organization forKey: @"organization"];
  }
  if (__timeOfExpiration_isset)
  {
    [encoder encodeInt64: __timeOfExpiration forKey: @"timeOfExpiration"];
  }
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
  if (__applicationName_isset)
  {
    [encoder encodeObject: __applicationName forKey: @"applicationName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __tokenId_isset ? 2654435761 : 0;
  if (__tokenId_isset)
  {
    hash = (hash * 31) ^ [__tokenId hash];
  }
  hash = (hash * 31) ^ __organization_isset ? 2654435761 : 0;
  if (__organization_isset)
  {
    hash = (hash * 31) ^ [__organization hash];
  }
  hash = (hash * 31) ^ __timeOfExpiration_isset ? 2654435761 : 0;
  if (__timeOfExpiration_isset)
  {
    hash = (hash * 31) ^ [@(__timeOfExpiration) hash];
  }
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  hash = (hash * 31) ^ __applicationName_isset ? 2654435761 : 0;
  if (__applicationName_isset)
  {
    hash = (hash * 31) ^ [__applicationName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaAuthentication_ApplicationToken class]]) {
    return NO;
  }
  BananaAuthentication_ApplicationToken *other = (BananaAuthentication_ApplicationToken *)anObject;
  if ((__tokenId_isset != other->__tokenId_isset) ||
      (__tokenId_isset && ((__tokenId || other->__tokenId) && ![__tokenId isEqual:other->__tokenId]))) {
    return NO;
  }
  if ((__organization_isset != other->__organization_isset) ||
      (__organization_isset && ((__organization || other->__organization) && ![__organization isEqual:other->__organization]))) {
    return NO;
  }
  if ((__timeOfExpiration_isset != other->__timeOfExpiration_isset) ||
      (__timeOfExpiration_isset && (__timeOfExpiration != other->__timeOfExpiration))) {
    return NO;
  }
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  if ((__applicationName_isset != other->__applicationName_isset) ||
      (__applicationName_isset && ((__applicationName || other->__applicationName) && ![__applicationName isEqual:other->__applicationName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__tokenId release_stub];
  [__organization release_stub];
  [__applicationId release_stub];
  [__applicationName release_stub];
  [super dealloc_stub];
}

- (NSString *) tokenId {
  return [[__tokenId retain_stub] autorelease_stub];
}

- (void) setTokenId: (NSString *) tokenId {
  [tokenId retain_stub];
  [__tokenId release_stub];
  __tokenId = tokenId;
  __tokenId_isset = YES;
}

- (BOOL) tokenIdIsSet {
  return __tokenId_isset;
}

- (void) unsetTokenId {
  [__tokenId release_stub];
  __tokenId = nil;
  __tokenId_isset = NO;
}

- (NSString *) organization {
  return [[__organization retain_stub] autorelease_stub];
}

- (void) setOrganization: (NSString *) organization {
  [organization retain_stub];
  [__organization release_stub];
  __organization = organization;
  __organization_isset = YES;
}

- (BOOL) organizationIsSet {
  return __organization_isset;
}

- (void) unsetOrganization {
  [__organization release_stub];
  __organization = nil;
  __organization_isset = NO;
}

- (int64_t) timeOfExpiration {
  return __timeOfExpiration;
}

- (void) setTimeOfExpiration: (int64_t) timeOfExpiration {
  __timeOfExpiration = timeOfExpiration;
  __timeOfExpiration_isset = YES;
}

- (BOOL) timeOfExpirationIsSet {
  return __timeOfExpiration_isset;
}

- (void) unsetTimeOfExpiration {
  __timeOfExpiration_isset = NO;
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (NSString *) applicationName {
  return [[__applicationName retain_stub] autorelease_stub];
}

- (void) setApplicationName: (NSString *) applicationName {
  [applicationName retain_stub];
  [__applicationName release_stub];
  __applicationName = applicationName;
  __applicationName_isset = YES;
}

- (BOOL) applicationNameIsSet {
  return __applicationName_isset;
}

- (void) unsetApplicationName {
  [__applicationName release_stub];
  __applicationName = nil;
  __applicationName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTokenId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrganization: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTimeOfExpiration: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ApplicationToken"];
  if (__tokenId_isset) {
    if (__tokenId != nil) {
      [outProtocol writeFieldBeginWithName: @"tokenId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __tokenId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__organization_isset) {
    if (__organization != nil) {
      [outProtocol writeFieldBeginWithName: @"organization" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __organization];
      [outProtocol writeFieldEnd];
    }
  }
  if (__timeOfExpiration_isset) {
    [outProtocol writeFieldBeginWithName: @"timeOfExpiration" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __timeOfExpiration];
    [outProtocol writeFieldEnd];
  }
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationName_isset) {
    if (__applicationName != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationName" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __applicationName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaAuthentication_ApplicationToken("];
  [ms appendString: @"tokenId:"];
  [ms appendFormat: @"\"%@\"", __tokenId];
  [ms appendString: @",organization:"];
  [ms appendFormat: @"\"%@\"", __organization];
  [ms appendString: @",timeOfExpiration:"];
  [ms appendFormat: @"%qi", __timeOfExpiration];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @",applicationName:"];
  [ms appendFormat: @"\"%@\"", __applicationName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaAuthentication_UserToken

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.isOauthToken = NO;

#endif
  return self;
}

- (id) initWithTokenId: (NSString *) tokenId timeOfExpiration: (BananaAuthentication_timestamp) timeOfExpiration organization: (NSString *) organization isOauthToken: (BOOL) isOauthToken oauthProvider: (NSString *) oauthProvider
{
  self = [super init];
  __tokenId = [tokenId retain_stub];
  __tokenId_isset = YES;
  __timeOfExpiration = timeOfExpiration;
  __timeOfExpiration_isset = YES;
  __organization = [organization retain_stub];
  __organization_isset = YES;
  __isOauthToken = isOauthToken;
  __isOauthToken_isset = YES;
  __oauthProvider = [oauthProvider retain_stub];
  __oauthProvider_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"tokenId"])
  {
    __tokenId = [[decoder decodeObjectForKey: @"tokenId"] retain_stub];
    __tokenId_isset = YES;
  }
  if ([decoder containsValueForKey: @"timeOfExpiration"])
  {
    __timeOfExpiration = [decoder decodeInt64ForKey: @"timeOfExpiration"];
    __timeOfExpiration_isset = YES;
  }
  if ([decoder containsValueForKey: @"organization"])
  {
    __organization = [[decoder decodeObjectForKey: @"organization"] retain_stub];
    __organization_isset = YES;
  }
  if ([decoder containsValueForKey: @"isOauthToken"])
  {
    __isOauthToken = [decoder decodeBoolForKey: @"isOauthToken"];
    __isOauthToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"oauthProvider"])
  {
    __oauthProvider = [[decoder decodeObjectForKey: @"oauthProvider"] retain_stub];
    __oauthProvider_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__tokenId_isset)
  {
    [encoder encodeObject: __tokenId forKey: @"tokenId"];
  }
  if (__timeOfExpiration_isset)
  {
    [encoder encodeInt64: __timeOfExpiration forKey: @"timeOfExpiration"];
  }
  if (__organization_isset)
  {
    [encoder encodeObject: __organization forKey: @"organization"];
  }
  if (__isOauthToken_isset)
  {
    [encoder encodeBool: __isOauthToken forKey: @"isOauthToken"];
  }
  if (__oauthProvider_isset)
  {
    [encoder encodeObject: __oauthProvider forKey: @"oauthProvider"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __tokenId_isset ? 2654435761 : 0;
  if (__tokenId_isset)
  {
    hash = (hash * 31) ^ [__tokenId hash];
  }
  hash = (hash * 31) ^ __timeOfExpiration_isset ? 2654435761 : 0;
  if (__timeOfExpiration_isset)
  {
    hash = (hash * 31) ^ [@(__timeOfExpiration) hash];
  }
  hash = (hash * 31) ^ __organization_isset ? 2654435761 : 0;
  if (__organization_isset)
  {
    hash = (hash * 31) ^ [__organization hash];
  }
  hash = (hash * 31) ^ __isOauthToken_isset ? 2654435761 : 0;
  if (__isOauthToken_isset)
  {
    hash = (hash * 31) ^ [@(__isOauthToken) hash];
  }
  hash = (hash * 31) ^ __oauthProvider_isset ? 2654435761 : 0;
  if (__oauthProvider_isset)
  {
    hash = (hash * 31) ^ [__oauthProvider hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaAuthentication_UserToken class]]) {
    return NO;
  }
  BananaAuthentication_UserToken *other = (BananaAuthentication_UserToken *)anObject;
  if ((__tokenId_isset != other->__tokenId_isset) ||
      (__tokenId_isset && ((__tokenId || other->__tokenId) && ![__tokenId isEqual:other->__tokenId]))) {
    return NO;
  }
  if ((__timeOfExpiration_isset != other->__timeOfExpiration_isset) ||
      (__timeOfExpiration_isset && (__timeOfExpiration != other->__timeOfExpiration))) {
    return NO;
  }
  if ((__organization_isset != other->__organization_isset) ||
      (__organization_isset && ((__organization || other->__organization) && ![__organization isEqual:other->__organization]))) {
    return NO;
  }
  if ((__isOauthToken_isset != other->__isOauthToken_isset) ||
      (__isOauthToken_isset && (__isOauthToken != other->__isOauthToken))) {
    return NO;
  }
  if ((__oauthProvider_isset != other->__oauthProvider_isset) ||
      (__oauthProvider_isset && ((__oauthProvider || other->__oauthProvider) && ![__oauthProvider isEqual:other->__oauthProvider]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__tokenId release_stub];
  [__organization release_stub];
  [__oauthProvider release_stub];
  [super dealloc_stub];
}

- (NSString *) tokenId {
  return [[__tokenId retain_stub] autorelease_stub];
}

- (void) setTokenId: (NSString *) tokenId {
  [tokenId retain_stub];
  [__tokenId release_stub];
  __tokenId = tokenId;
  __tokenId_isset = YES;
}

- (BOOL) tokenIdIsSet {
  return __tokenId_isset;
}

- (void) unsetTokenId {
  [__tokenId release_stub];
  __tokenId = nil;
  __tokenId_isset = NO;
}

- (int64_t) timeOfExpiration {
  return __timeOfExpiration;
}

- (void) setTimeOfExpiration: (int64_t) timeOfExpiration {
  __timeOfExpiration = timeOfExpiration;
  __timeOfExpiration_isset = YES;
}

- (BOOL) timeOfExpirationIsSet {
  return __timeOfExpiration_isset;
}

- (void) unsetTimeOfExpiration {
  __timeOfExpiration_isset = NO;
}

- (NSString *) organization {
  return [[__organization retain_stub] autorelease_stub];
}

- (void) setOrganization: (NSString *) organization {
  [organization retain_stub];
  [__organization release_stub];
  __organization = organization;
  __organization_isset = YES;
}

- (BOOL) organizationIsSet {
  return __organization_isset;
}

- (void) unsetOrganization {
  [__organization release_stub];
  __organization = nil;
  __organization_isset = NO;
}

- (BOOL) isOauthToken {
  return __isOauthToken;
}

- (void) setIsOauthToken: (BOOL) isOauthToken {
  __isOauthToken = isOauthToken;
  __isOauthToken_isset = YES;
}

- (BOOL) isOauthTokenIsSet {
  return __isOauthToken_isset;
}

- (void) unsetIsOauthToken {
  __isOauthToken_isset = NO;
}

- (NSString *) oauthProvider {
  return [[__oauthProvider retain_stub] autorelease_stub];
}

- (void) setOauthProvider: (NSString *) oauthProvider {
  [oauthProvider retain_stub];
  [__oauthProvider release_stub];
  __oauthProvider = oauthProvider;
  __oauthProvider_isset = YES;
}

- (BOOL) oauthProviderIsSet {
  return __oauthProvider_isset;
}

- (void) unsetOauthProvider {
  [__oauthProvider release_stub];
  __oauthProvider = nil;
  __oauthProvider_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTokenId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTimeOfExpiration: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrganization: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsOauthToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOauthProvider: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserToken"];
  if (__tokenId_isset) {
    if (__tokenId != nil) {
      [outProtocol writeFieldBeginWithName: @"tokenId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __tokenId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__timeOfExpiration_isset) {
    [outProtocol writeFieldBeginWithName: @"timeOfExpiration" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __timeOfExpiration];
    [outProtocol writeFieldEnd];
  }
  if (__organization_isset) {
    if (__organization != nil) {
      [outProtocol writeFieldBeginWithName: @"organization" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __organization];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isOauthToken_isset) {
    [outProtocol writeFieldBeginWithName: @"isOauthToken" type: TType_BOOL fieldID: 4];
    [outProtocol writeBool: __isOauthToken];
    [outProtocol writeFieldEnd];
  }
  if (__oauthProvider_isset) {
    if (__oauthProvider != nil) {
      [outProtocol writeFieldBeginWithName: @"oauthProvider" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __oauthProvider];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaAuthentication_UserToken("];
  [ms appendString: @"tokenId:"];
  [ms appendFormat: @"\"%@\"", __tokenId];
  [ms appendString: @",timeOfExpiration:"];
  [ms appendFormat: @"%qi", __timeOfExpiration];
  [ms appendString: @",organization:"];
  [ms appendFormat: @"\"%@\"", __organization];
  [ms appendString: @",isOauthToken:"];
  [ms appendFormat: @"%i", __isOauthToken];
  [ms appendString: @",oauthProvider:"];
  [ms appendFormat: @"\"%@\"", __oauthProvider];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaAuthentication_GithubToken

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUsername: (NSString *) username email: (NSString *) email oauthToken: (NSString *) oauthToken
{
  self = [super init];
  __username = [username retain_stub];
  __username_isset = YES;
  __email = [email retain_stub];
  __email_isset = YES;
  __oauthToken = [oauthToken retain_stub];
  __oauthToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"username"])
  {
    __username = [[decoder decodeObjectForKey: @"username"] retain_stub];
    __username_isset = YES;
  }
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"oauthToken"])
  {
    __oauthToken = [[decoder decodeObjectForKey: @"oauthToken"] retain_stub];
    __oauthToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__username_isset)
  {
    [encoder encodeObject: __username forKey: @"username"];
  }
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__oauthToken_isset)
  {
    [encoder encodeObject: __oauthToken forKey: @"oauthToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __username_isset ? 2654435761 : 0;
  if (__username_isset)
  {
    hash = (hash * 31) ^ [__username hash];
  }
  hash = (hash * 31) ^ __email_isset ? 2654435761 : 0;
  if (__email_isset)
  {
    hash = (hash * 31) ^ [__email hash];
  }
  hash = (hash * 31) ^ __oauthToken_isset ? 2654435761 : 0;
  if (__oauthToken_isset)
  {
    hash = (hash * 31) ^ [__oauthToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaAuthentication_GithubToken class]]) {
    return NO;
  }
  BananaAuthentication_GithubToken *other = (BananaAuthentication_GithubToken *)anObject;
  if ((__username_isset != other->__username_isset) ||
      (__username_isset && ((__username || other->__username) && ![__username isEqual:other->__username]))) {
    return NO;
  }
  if ((__email_isset != other->__email_isset) ||
      (__email_isset && ((__email || other->__email) && ![__email isEqual:other->__email]))) {
    return NO;
  }
  if ((__oauthToken_isset != other->__oauthToken_isset) ||
      (__oauthToken_isset && ((__oauthToken || other->__oauthToken) && ![__oauthToken isEqual:other->__oauthToken]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__username release_stub];
  [__email release_stub];
  [__oauthToken release_stub];
  [super dealloc_stub];
}

- (NSString *) username {
  return [[__username retain_stub] autorelease_stub];
}

- (void) setUsername: (NSString *) username {
  [username retain_stub];
  [__username release_stub];
  __username = username;
  __username_isset = YES;
}

- (BOOL) usernameIsSet {
  return __username_isset;
}

- (void) unsetUsername {
  [__username release_stub];
  __username = nil;
  __username_isset = NO;
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (NSString *) oauthToken {
  return [[__oauthToken retain_stub] autorelease_stub];
}

- (void) setOauthToken: (NSString *) oauthToken {
  [oauthToken retain_stub];
  [__oauthToken release_stub];
  __oauthToken = oauthToken;
  __oauthToken_isset = YES;
}

- (BOOL) oauthTokenIsSet {
  return __oauthToken_isset;
}

- (void) unsetOauthToken {
  [__oauthToken release_stub];
  __oauthToken = nil;
  __oauthToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUsername: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOauthToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GithubToken"];
  if (__username_isset) {
    if (__username != nil) {
      [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __username];
      [outProtocol writeFieldEnd];
    }
  }
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__oauthToken_isset) {
    if (__oauthToken != nil) {
      [outProtocol writeFieldBeginWithName: @"oauthToken" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __oauthToken];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__oauthToken_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'oauthToken' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaAuthentication_GithubToken("];
  [ms appendString: @"username:"];
  [ms appendFormat: @"\"%@\"", __username];
  [ms appendString: @",email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",oauthToken:"];
  [ms appendFormat: @"\"%@\"", __oauthToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaAuthentication_Password

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEncryptedPassword: (NSString *) encryptedPassword
{
  self = [super init];
  __encryptedPassword = [encryptedPassword retain_stub];
  __encryptedPassword_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"encryptedPassword"])
  {
    __encryptedPassword = [[decoder decodeObjectForKey: @"encryptedPassword"] retain_stub];
    __encryptedPassword_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__encryptedPassword_isset)
  {
    [encoder encodeObject: __encryptedPassword forKey: @"encryptedPassword"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __encryptedPassword_isset ? 2654435761 : 0;
  if (__encryptedPassword_isset)
  {
    hash = (hash * 31) ^ [__encryptedPassword hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaAuthentication_Password class]]) {
    return NO;
  }
  BananaAuthentication_Password *other = (BananaAuthentication_Password *)anObject;
  if ((__encryptedPassword_isset != other->__encryptedPassword_isset) ||
      (__encryptedPassword_isset && ((__encryptedPassword || other->__encryptedPassword) && ![__encryptedPassword isEqual:other->__encryptedPassword]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__encryptedPassword release_stub];
  [super dealloc_stub];
}

- (NSString *) encryptedPassword {
  return [[__encryptedPassword retain_stub] autorelease_stub];
}

- (void) setEncryptedPassword: (NSString *) encryptedPassword {
  [encryptedPassword retain_stub];
  [__encryptedPassword release_stub];
  __encryptedPassword = encryptedPassword;
  __encryptedPassword_isset = YES;
}

- (BOOL) encryptedPasswordIsSet {
  return __encryptedPassword_isset;
}

- (void) unsetEncryptedPassword {
  [__encryptedPassword release_stub];
  __encryptedPassword = nil;
  __encryptedPassword_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEncryptedPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Password"];
  if (__encryptedPassword_isset) {
    if (__encryptedPassword != nil) {
      [outProtocol writeFieldBeginWithName: @"encryptedPassword" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __encryptedPassword];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaAuthentication_Password("];
  [ms appendString: @"encryptedPassword:"];
  [ms appendFormat: @"\"%@\"", __encryptedPassword];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaAuthentication_AromaAccount

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEmail: (NSString *) email password: (BananaAuthentication_Password *) password name: (NSString *) name profileImage: (Banana_Image *) profileImage role: (int) role
{
  self = [super init];
  __email = [email retain_stub];
  __email_isset = YES;
  __password = [password retain_stub];
  __password_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __profileImage = [profileImage retain_stub];
  __profileImage_isset = YES;
  __role = role;
  __role_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain_stub];
    __password_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"profileImage"])
  {
    __profileImage = [[decoder decodeObjectForKey: @"profileImage"] retain_stub];
    __profileImage_isset = YES;
  }
  if ([decoder containsValueForKey: @"role"])
  {
    __role = [decoder decodeIntForKey: @"role"];
    __role_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__profileImage_isset)
  {
    [encoder encodeObject: __profileImage forKey: @"profileImage"];
  }
  if (__role_isset)
  {
    [encoder encodeInt: __role forKey: @"role"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __email_isset ? 2654435761 : 0;
  if (__email_isset)
  {
    hash = (hash * 31) ^ [__email hash];
  }
  hash = (hash * 31) ^ __password_isset ? 2654435761 : 0;
  if (__password_isset)
  {
    hash = (hash * 31) ^ [__password hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __profileImage_isset ? 2654435761 : 0;
  if (__profileImage_isset)
  {
    hash = (hash * 31) ^ [__profileImage hash];
  }
  hash = (hash * 31) ^ __role_isset ? 2654435761 : 0;
  if (__role_isset)
  {
    hash = (hash * 31) ^ [@(__role) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaAuthentication_AromaAccount class]]) {
    return NO;
  }
  BananaAuthentication_AromaAccount *other = (BananaAuthentication_AromaAccount *)anObject;
  if ((__email_isset != other->__email_isset) ||
      (__email_isset && ((__email || other->__email) && ![__email isEqual:other->__email]))) {
    return NO;
  }
  if ((__password_isset != other->__password_isset) ||
      (__password_isset && ((__password || other->__password) && ![__password isEqual:other->__password]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__profileImage_isset != other->__profileImage_isset) ||
      (__profileImage_isset && ((__profileImage || other->__profileImage) && ![__profileImage isEqual:other->__profileImage]))) {
    return NO;
  }
  if ((__role_isset != other->__role_isset) ||
      (__role_isset && (__role != other->__role))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__email release_stub];
  [__password release_stub];
  [__name release_stub];
  [__profileImage release_stub];
  [super dealloc_stub];
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (BananaAuthentication_Password *) password {
  return [[__password retain_stub] autorelease_stub];
}

- (void) setPassword: (BananaAuthentication_Password *) password {
  [password retain_stub];
  [__password release_stub];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release_stub];
  __password = nil;
  __password_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (Banana_Image *) profileImage {
  return [[__profileImage retain_stub] autorelease_stub];
}

- (void) setProfileImage: (Banana_Image *) profileImage {
  [profileImage retain_stub];
  [__profileImage release_stub];
  __profileImage = profileImage;
  __profileImage_isset = YES;
}

- (BOOL) profileImageIsSet {
  return __profileImage_isset;
}

- (void) unsetProfileImage {
  [__profileImage release_stub];
  __profileImage = nil;
  __profileImage_isset = NO;
}

- (int) role {
  return __role;
}

- (void) setRole: (int) role {
  __role = role;
  __role_isset = YES;
}

- (BOOL) roleIsSet {
  return __role_isset;
}

- (void) unsetRole {
  __role_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_Password *fieldValue = [[BananaAuthentication_Password alloc] init];
          [fieldValue read: inProtocol];
          [self setPassword: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          Banana_Image *fieldValue = [[Banana_Image alloc] init];
          [fieldValue read: inProtocol];
          [self setProfileImage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setRole: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AromaAccount"];
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRUCT fieldID: 2];
      [__password write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__profileImage_isset) {
    if (__profileImage != nil) {
      [outProtocol writeFieldBeginWithName: @"profileImage" type: TType_STRUCT fieldID: 4];
      [__profileImage write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__role_isset) {
    [outProtocol writeFieldBeginWithName: @"role" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __role];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaAuthentication_AromaAccount("];
  [ms appendString: @"email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",password:"];
  [ms appendFormat: @"%@", __password];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",profileImage:"];
  [ms appendFormat: @"%@", __profileImage];
  [ms appendString: @",role:"];
  [ms appendFormat: @"%i", __role];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaAuthentication_Credentials

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithGithubToken: (BananaAuthentication_GithubToken *) githubToken aromaPassword: (BananaAuthentication_Password *) aromaPassword
{
  self = [super init];
  __githubToken = [githubToken retain_stub];
  __githubToken_isset = YES;
  __aromaPassword = [aromaPassword retain_stub];
  __aromaPassword_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"githubToken"])
  {
    __githubToken = [[decoder decodeObjectForKey: @"githubToken"] retain_stub];
    __githubToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"aromaPassword"])
  {
    __aromaPassword = [[decoder decodeObjectForKey: @"aromaPassword"] retain_stub];
    __aromaPassword_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__githubToken_isset)
  {
    [encoder encodeObject: __githubToken forKey: @"githubToken"];
  }
  if (__aromaPassword_isset)
  {
    [encoder encodeObject: __aromaPassword forKey: @"aromaPassword"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __githubToken_isset ? 2654435761 : 0;
  if (__githubToken_isset)
  {
    hash = (hash * 31) ^ [__githubToken hash];
  }
  hash = (hash * 31) ^ __aromaPassword_isset ? 2654435761 : 0;
  if (__aromaPassword_isset)
  {
    hash = (hash * 31) ^ [__aromaPassword hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaAuthentication_Credentials class]]) {
    return NO;
  }
  BananaAuthentication_Credentials *other = (BananaAuthentication_Credentials *)anObject;
  if ((__githubToken_isset != other->__githubToken_isset) ||
      (__githubToken_isset && ((__githubToken || other->__githubToken) && ![__githubToken isEqual:other->__githubToken]))) {
    return NO;
  }
  if ((__aromaPassword_isset != other->__aromaPassword_isset) ||
      (__aromaPassword_isset && ((__aromaPassword || other->__aromaPassword) && ![__aromaPassword isEqual:other->__aromaPassword]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__githubToken release_stub];
  [__aromaPassword release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_GithubToken *) githubToken {
  return [[__githubToken retain_stub] autorelease_stub];
}

- (void) setGithubToken: (BananaAuthentication_GithubToken *) githubToken {
  [githubToken retain_stub];
  [__githubToken release_stub];
  __githubToken = githubToken;
  __githubToken_isset = YES;
}

- (BOOL) githubTokenIsSet {
  return __githubToken_isset;
}

- (void) unsetGithubToken {
  [__githubToken release_stub];
  __githubToken = nil;
  __githubToken_isset = NO;
}

- (BananaAuthentication_Password *) aromaPassword {
  return [[__aromaPassword retain_stub] autorelease_stub];
}

- (void) setAromaPassword: (BananaAuthentication_Password *) aromaPassword {
  [aromaPassword retain_stub];
  [__aromaPassword release_stub];
  __aromaPassword = aromaPassword;
  __aromaPassword_isset = YES;
}

- (BOOL) aromaPasswordIsSet {
  return __aromaPassword_isset;
}

- (void) unsetAromaPassword {
  [__aromaPassword release_stub];
  __aromaPassword = nil;
  __aromaPassword_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_GithubToken *fieldValue = [[BananaAuthentication_GithubToken alloc] init];
          [fieldValue read: inProtocol];
          [self setGithubToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_Password *fieldValue = [[BananaAuthentication_Password alloc] init];
          [fieldValue read: inProtocol];
          [self setAromaPassword: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Credentials"];
  if (__githubToken_isset) {
    if (__githubToken != nil) {
      [outProtocol writeFieldBeginWithName: @"githubToken" type: TType_STRUCT fieldID: 1];
      [__githubToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__aromaPassword_isset) {
    if (__aromaPassword != nil) {
      [outProtocol writeFieldBeginWithName: @"aromaPassword" type: TType_STRUCT fieldID: 2];
      [__aromaPassword write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaAuthentication_Credentials("];
  [ms appendString: @"githubToken:"];
  [ms appendFormat: @"%@", __githubToken];
  [ms appendString: @",aromaPassword:"];
  [ms appendFormat: @"%@", __aromaPassword];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaAuthentication_AuthenticationToken

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithApplicationToken: (BananaAuthentication_ApplicationToken *) applicationToken userToken: (BananaAuthentication_UserToken *) userToken
{
  self = [super init];
  __applicationToken = [applicationToken retain_stub];
  __applicationToken_isset = YES;
  __userToken = [userToken retain_stub];
  __userToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"applicationToken"])
  {
    __applicationToken = [[decoder decodeObjectForKey: @"applicationToken"] retain_stub];
    __applicationToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"userToken"])
  {
    __userToken = [[decoder decodeObjectForKey: @"userToken"] retain_stub];
    __userToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__applicationToken_isset)
  {
    [encoder encodeObject: __applicationToken forKey: @"applicationToken"];
  }
  if (__userToken_isset)
  {
    [encoder encodeObject: __userToken forKey: @"userToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __applicationToken_isset ? 2654435761 : 0;
  if (__applicationToken_isset)
  {
    hash = (hash * 31) ^ [__applicationToken hash];
  }
  hash = (hash * 31) ^ __userToken_isset ? 2654435761 : 0;
  if (__userToken_isset)
  {
    hash = (hash * 31) ^ [__userToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaAuthentication_AuthenticationToken class]]) {
    return NO;
  }
  BananaAuthentication_AuthenticationToken *other = (BananaAuthentication_AuthenticationToken *)anObject;
  if ((__applicationToken_isset != other->__applicationToken_isset) ||
      (__applicationToken_isset && ((__applicationToken || other->__applicationToken) && ![__applicationToken isEqual:other->__applicationToken]))) {
    return NO;
  }
  if ((__userToken_isset != other->__userToken_isset) ||
      (__userToken_isset && ((__userToken || other->__userToken) && ![__userToken isEqual:other->__userToken]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__applicationToken release_stub];
  [__userToken release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_ApplicationToken *) applicationToken {
  return [[__applicationToken retain_stub] autorelease_stub];
}

- (void) setApplicationToken: (BananaAuthentication_ApplicationToken *) applicationToken {
  [applicationToken retain_stub];
  [__applicationToken release_stub];
  __applicationToken = applicationToken;
  __applicationToken_isset = YES;
}

- (BOOL) applicationTokenIsSet {
  return __applicationToken_isset;
}

- (void) unsetApplicationToken {
  [__applicationToken release_stub];
  __applicationToken = nil;
  __applicationToken_isset = NO;
}

- (BananaAuthentication_UserToken *) userToken {
  return [[__userToken retain_stub] autorelease_stub];
}

- (void) setUserToken: (BananaAuthentication_UserToken *) userToken {
  [userToken retain_stub];
  [__userToken release_stub];
  __userToken = userToken;
  __userToken_isset = YES;
}

- (BOOL) userTokenIsSet {
  return __userToken_isset;
}

- (void) unsetUserToken {
  [__userToken release_stub];
  __userToken = nil;
  __userToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_ApplicationToken *fieldValue = [[BananaAuthentication_ApplicationToken alloc] init];
          [fieldValue read: inProtocol];
          [self setApplicationToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_UserToken *fieldValue = [[BananaAuthentication_UserToken alloc] init];
          [fieldValue read: inProtocol];
          [self setUserToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthenticationToken"];
  if (__applicationToken_isset) {
    if (__applicationToken != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationToken" type: TType_STRUCT fieldID: 1];
      [__applicationToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userToken_isset) {
    if (__userToken != nil) {
      [outProtocol writeFieldBeginWithName: @"userToken" type: TType_STRUCT fieldID: 2];
      [__userToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaAuthentication_AuthenticationToken("];
  [ms appendString: @"applicationToken:"];
  [ms appendFormat: @"%@", __applicationToken];
  [ms appendString: @",userToken:"];
  [ms appendFormat: @"%@", __userToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

static NSString * BananaAuthentication_OVER_THE_WIRE_PASSWORD_ENCRYPTION_KEY = @"fwlrhvskjhf3foiwjkvdslj3qovknkf jnvzsv h3lfjwlejfiofszdkjnk";

@implementation BananaAuthentication_AuthenticationConstants
+ (void) initialize {
}
+ (NSString *) OVER_THE_WIRE_PASSWORD_ENCRYPTION_KEY{
  return BananaAuthentication_OVER_THE_WIRE_PASSWORD_ENCRYPTION_KEY;
}
@end

