/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"

#import "Authentication.h"
#import "Banana.h"
#import "Channels.h"
#import "Endpoint.h"
#import "Events.h"
#import "Exceptions.h"

typedef Banana_int BananaService_int;

typedef Banana_long BananaService_long;

typedef Banana_timestamp BananaService_timestamp;

typedef Banana_uuid BananaService_uuid;

typedef BananaAuthentication_ApplicationToken * BananaService_ApplicationToken;

typedef BananaAuthentication_AuthenticationToken * BananaService_AuthenticationToken;

typedef BananaAuthentication_UserToken * BananaService_UserToken;

typedef Banana_Application * BananaService_Application;

typedef Banana_Image * BananaService_Image;

typedef int BananaService_Urgency;

typedef Banana_User * BananaService_User;

typedef BananaChannels_BananaChannel * BananaService_BananaChannel;

typedef BananaEndpoint_Endpoint * BananaService_Endpoint;

typedef BananaEvents_HealthCheckFailed * BananaService_HealthCheckFailed;

typedef BananaException_AccountAlreadyExistsException * BananaService_AccountAlreadyExistsException;

typedef BananaException_ApplicationAlreadyRegisteredException * BananaService_ApplicationAlreadyRegisteredException;

typedef BananaException_ApplicationDoesNotExistException * BananaService_ApplicationDoesNotExistException;

typedef BananaException_ChannelDoesNotExistException * BananaService_ChannelDoesNotExistException;

typedef BananaException_CustomChannelUnreachableException * BananaService_CustomChannelUnreachableException;

typedef BananaException_InvalidArgumentException * BananaService_InvalidArgumentException;

typedef BananaException_InvalidCredentialsException * BananaService_InvalidCredentialsException;

typedef BananaException_InvalidTokenException * BananaService_InvalidTokenException;

typedef BananaException_MessageDoesNotExistException * BananaService_MessageDoesNotExistException;

typedef BananaException_OperationFailedException * BananaService_OperationFailedException;

typedef BananaException_UnauthorizedException * BananaService_UnauthorizedException;

typedef BananaException_UserDoesNotExistException * BananaService_UserDoesNotExistException;

@interface BananaService_DeleteMessageRequest : NSObject <TBase, NSCoding> {
  BananaService_UserToken __token;
  BananaService_uuid __messageId;
  BananaService_uuid __applicationId;
  NSMutableArray * __messageIds;
  BOOL __deleteAll;

  BOOL __token_isset;
  BOOL __messageId_isset;
  BOOL __applicationId_isset;
  BOOL __messageIds_isset;
  BOOL __deleteAll_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) BananaService_UserToken token;
@property (nonatomic, retain, getter=messageId, setter=setMessageId:) BananaService_uuid messageId;
@property (nonatomic, retain, getter=applicationId, setter=setApplicationId:) BananaService_uuid applicationId;
@property (nonatomic, retain, getter=messageIds, setter=setMessageIds:) NSMutableArray * messageIds;
@property (nonatomic, getter=deleteAll, setter=setDeleteAll:) BOOL deleteAll;
#endif

- (id) init;
- (id) initWithToken: (BananaService_UserToken) token messageId: (BananaService_uuid) messageId applicationId: (BananaService_uuid) applicationId messageIds: (NSMutableArray *) messageIds deleteAll: (BOOL) deleteAll;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_UserToken) token;
- (void) setToken: (BananaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (BananaService_uuid) messageId;
- (void) setMessageId: (BananaService_uuid) messageId;
#endif
- (BOOL) messageIdIsSet;

#if !__has_feature(objc_arc)
- (BananaService_uuid) applicationId;
- (void) setApplicationId: (BananaService_uuid) applicationId;
#endif
- (BOOL) applicationIdIsSet;

#if !__has_feature(objc_arc)
- (NSMutableArray *) messageIds;
- (void) setMessageIds: (NSMutableArray *) messageIds;
#endif
- (BOOL) messageIdsIsSet;

#if !__has_feature(objc_arc)
- (BOOL) deleteAll;
- (void) setDeleteAll: (BOOL) deleteAll;
#endif
- (BOOL) deleteAllIsSet;

@end

@interface BananaService_DeleteMessageResponse : NSObject <TBase, NSCoding> {
  BananaService_int __messagesDeleted;

  BOOL __messagesDeleted_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=messagesDeleted, setter=setMessagesDeleted:) BananaService_int messagesDeleted;
#endif

- (id) init;
- (id) initWithMessagesDeleted: (BananaService_int) messagesDeleted;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_int) messagesDeleted;
- (void) setMessagesDeleted: (BananaService_int) messagesDeleted;
#endif
- (BOOL) messagesDeletedIsSet;

@end

@interface BananaService_DismissMessageRequest : NSObject <TBase, NSCoding> {
  BananaService_UserToken __token;
  BananaService_uuid __messageId;
  BananaService_uuid __applicationId;
  NSMutableArray * __messageIds;
  BOOL __dismissAll;

  BOOL __token_isset;
  BOOL __messageId_isset;
  BOOL __applicationId_isset;
  BOOL __messageIds_isset;
  BOOL __dismissAll_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) BananaService_UserToken token;
@property (nonatomic, retain, getter=messageId, setter=setMessageId:) BananaService_uuid messageId;
@property (nonatomic, retain, getter=applicationId, setter=setApplicationId:) BananaService_uuid applicationId;
@property (nonatomic, retain, getter=messageIds, setter=setMessageIds:) NSMutableArray * messageIds;
@property (nonatomic, getter=dismissAll, setter=setDismissAll:) BOOL dismissAll;
#endif

- (id) init;
- (id) initWithToken: (BananaService_UserToken) token messageId: (BananaService_uuid) messageId applicationId: (BananaService_uuid) applicationId messageIds: (NSMutableArray *) messageIds dismissAll: (BOOL) dismissAll;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_UserToken) token;
- (void) setToken: (BananaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (BananaService_uuid) messageId;
- (void) setMessageId: (BananaService_uuid) messageId;
#endif
- (BOOL) messageIdIsSet;

#if !__has_feature(objc_arc)
- (BananaService_uuid) applicationId;
- (void) setApplicationId: (BananaService_uuid) applicationId;
#endif
- (BOOL) applicationIdIsSet;

#if !__has_feature(objc_arc)
- (NSMutableArray *) messageIds;
- (void) setMessageIds: (NSMutableArray *) messageIds;
#endif
- (BOOL) messageIdsIsSet;

#if !__has_feature(objc_arc)
- (BOOL) dismissAll;
- (void) setDismissAll: (BOOL) dismissAll;
#endif
- (BOOL) dismissAllIsSet;

@end

@interface BananaService_DismissMessageResponse : NSObject <TBase, NSCoding> {
  BananaService_int __messagesDismissed;

  BOOL __messagesDismissed_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=messagesDismissed, setter=setMessagesDismissed:) BananaService_int messagesDismissed;
#endif

- (id) init;
- (id) initWithMessagesDismissed: (BananaService_int) messagesDismissed;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_int) messagesDismissed;
- (void) setMessagesDismissed: (BananaService_int) messagesDismissed;
#endif
- (BOOL) messagesDismissedIsSet;

@end

@interface BananaService_ProvisionApplicationRequest : NSObject <TBase, NSCoding> {
  BananaService_UserToken __token;
  NSString * __applicationName;
  int __programmingLanguage;
  BananaService_uuid __organizationId;
  BananaService_Image __icon;
  NSMutableSet * __owners;
  NSString * __applicationDescription;
  int __tier;

  BOOL __token_isset;
  BOOL __applicationName_isset;
  BOOL __programmingLanguage_isset;
  BOOL __organizationId_isset;
  BOOL __icon_isset;
  BOOL __owners_isset;
  BOOL __applicationDescription_isset;
  BOOL __tier_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) BananaService_UserToken token;
@property (nonatomic, retain, getter=applicationName, setter=setApplicationName:) NSString * applicationName;
@property (nonatomic, getter=programmingLanguage, setter=setProgrammingLanguage:) int programmingLanguage;
@property (nonatomic, retain, getter=organizationId, setter=setOrganizationId:) BananaService_uuid organizationId;
@property (nonatomic, retain, getter=icon, setter=setIcon:) BananaService_Image icon;
@property (nonatomic, retain, getter=owners, setter=setOwners:) NSMutableSet * owners;
@property (nonatomic, retain, getter=applicationDescription, setter=setApplicationDescription:) NSString * applicationDescription;
@property (nonatomic, getter=tier, setter=setTier:) int tier;
#endif

- (id) init;
- (id) initWithToken: (BananaService_UserToken) token applicationName: (NSString *) applicationName programmingLanguage: (int) programmingLanguage organizationId: (BananaService_uuid) organizationId icon: (BananaService_Image) icon owners: (NSMutableSet *) owners applicationDescription: (NSString *) applicationDescription tier: (int) tier;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_UserToken) token;
- (void) setToken: (BananaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (NSString *) applicationName;
- (void) setApplicationName: (NSString *) applicationName;
#endif
- (BOOL) applicationNameIsSet;

#if !__has_feature(objc_arc)
- (int) programmingLanguage;
- (void) setProgrammingLanguage: (int) programmingLanguage;
#endif
- (BOOL) programmingLanguageIsSet;

#if !__has_feature(objc_arc)
- (BananaService_uuid) organizationId;
- (void) setOrganizationId: (BananaService_uuid) organizationId;
#endif
- (BOOL) organizationIdIsSet;

#if !__has_feature(objc_arc)
- (BananaService_Image) icon;
- (void) setIcon: (BananaService_Image) icon;
#endif
- (BOOL) iconIsSet;

#if !__has_feature(objc_arc)
- (NSMutableSet *) owners;
- (void) setOwners: (NSMutableSet *) owners;
#endif
- (BOOL) ownersIsSet;

#if !__has_feature(objc_arc)
- (NSString *) applicationDescription;
- (void) setApplicationDescription: (NSString *) applicationDescription;
#endif
- (BOOL) applicationDescriptionIsSet;

#if !__has_feature(objc_arc)
- (int) tier;
- (void) setTier: (int) tier;
#endif
- (BOOL) tierIsSet;

@end

@interface BananaService_ProvisionApplicationResponse : NSObject <TBase, NSCoding> {
  BananaService_ApplicationToken __applicationToken;
  BananaService_Application __applicationInfo;

  BOOL __applicationToken_isset;
  BOOL __applicationInfo_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=applicationToken, setter=setApplicationToken:) BananaService_ApplicationToken applicationToken;
@property (nonatomic, retain, getter=applicationInfo, setter=setApplicationInfo:) BananaService_Application applicationInfo;
#endif

- (id) init;
- (id) initWithApplicationToken: (BananaService_ApplicationToken) applicationToken applicationInfo: (BananaService_Application) applicationInfo;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_ApplicationToken) applicationToken;
- (void) setApplicationToken: (BananaService_ApplicationToken) applicationToken;
#endif
- (BOOL) applicationTokenIsSet;

#if !__has_feature(objc_arc)
- (BananaService_Application) applicationInfo;
- (void) setApplicationInfo: (BananaService_Application) applicationInfo;
#endif
- (BOOL) applicationInfoIsSet;

@end

@interface BananaService_RegenerateApplicationTokenRequest : NSObject <TBase, NSCoding> {
  BananaService_UserToken __token;
  BananaService_uuid __applicationId;

  BOOL __token_isset;
  BOOL __applicationId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) BananaService_UserToken token;
@property (nonatomic, retain, getter=applicationId, setter=setApplicationId:) BananaService_uuid applicationId;
#endif

- (id) init;
- (id) initWithToken: (BananaService_UserToken) token applicationId: (BananaService_uuid) applicationId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_UserToken) token;
- (void) setToken: (BananaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (BananaService_uuid) applicationId;
- (void) setApplicationId: (BananaService_uuid) applicationId;
#endif
- (BOOL) applicationIdIsSet;

@end

@interface BananaService_RegenerateApplicationTokenResponse : NSObject <TBase, NSCoding> {
  BananaService_ApplicationToken __applicationToken;

  BOOL __applicationToken_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=applicationToken, setter=setApplicationToken:) BananaService_ApplicationToken applicationToken;
#endif

- (id) init;
- (id) initWithApplicationToken: (BananaService_ApplicationToken) applicationToken;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_ApplicationToken) applicationToken;
- (void) setApplicationToken: (BananaService_ApplicationToken) applicationToken;
#endif
- (BOOL) applicationTokenIsSet;

@end

@interface BananaService_RegisterHealthCheckRequest : NSObject <TBase, NSCoding> {
  BananaService_UserToken __token;
  BananaService_Endpoint __endpoint;

  BOOL __token_isset;
  BOOL __endpoint_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) BananaService_UserToken token;
@property (nonatomic, retain, getter=endpoint, setter=setEndpoint:) BananaService_Endpoint endpoint;
#endif

- (id) init;
- (id) initWithToken: (BananaService_UserToken) token endpoint: (BananaService_Endpoint) endpoint;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_UserToken) token;
- (void) setToken: (BananaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (BananaService_Endpoint) endpoint;
- (void) setEndpoint: (BananaService_Endpoint) endpoint;
#endif
- (BOOL) endpointIsSet;

@end

@interface BananaService_RegisterHealthCheckResponse : NSObject <TBase, NSCoding> {
  NSString * __message;
  NSString * __healthCheckToken;

  BOOL __message_isset;
  BOOL __healthCheckToken_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=message, setter=setMessage:) NSString * message;
@property (nonatomic, retain, getter=healthCheckToken, setter=setHealthCheckToken:) NSString * healthCheckToken;
#endif

- (id) init;
- (id) initWithMessage: (NSString *) message healthCheckToken: (NSString *) healthCheckToken;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) message;
- (void) setMessage: (NSString *) message;
#endif
- (BOOL) messageIsSet;

#if !__has_feature(objc_arc)
- (NSString *) healthCheckToken;
- (void) setHealthCheckToken: (NSString *) healthCheckToken;
#endif
- (BOOL) healthCheckTokenIsSet;

@end

@interface BananaService_RemoveSavedChannelRequest : NSObject <TBase, NSCoding> {
  BananaService_UserToken __token;
  BananaService_BananaChannel __channel;

  BOOL __token_isset;
  BOOL __channel_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) BananaService_UserToken token;
@property (nonatomic, retain, getter=channel, setter=setChannel:) BananaService_BananaChannel channel;
#endif

- (id) init;
- (id) initWithToken: (BananaService_UserToken) token channel: (BananaService_BananaChannel) channel;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_UserToken) token;
- (void) setToken: (BananaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (BananaService_BananaChannel) channel;
- (void) setChannel: (BananaService_BananaChannel) channel;
#endif
- (BOOL) channelIsSet;

@end

@interface BananaService_RemoveSavedChannelResponse : NSObject <TBase, NSCoding> {
  NSString * __message;
  BananaService_BananaChannel __channel;

  BOOL __message_isset;
  BOOL __channel_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=message, setter=setMessage:) NSString * message;
@property (nonatomic, retain, getter=channel, setter=setChannel:) BananaService_BananaChannel channel;
#endif

- (id) init;
- (id) initWithMessage: (NSString *) message channel: (BananaService_BananaChannel) channel;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) message;
- (void) setMessage: (NSString *) message;
#endif
- (BOOL) messageIsSet;

#if !__has_feature(objc_arc)
- (BananaService_BananaChannel) channel;
- (void) setChannel: (BananaService_BananaChannel) channel;
#endif
- (BOOL) channelIsSet;

@end

@interface BananaService_RenewApplicationTokenRequest : NSObject <TBase, NSCoding> {
  BananaService_UserToken __token;
  BananaService_ApplicationToken __applicationToken;
  Banana_LengthOfTime * __newLifetime;
  BananaService_uuid __applicationId;

  BOOL __token_isset;
  BOOL __applicationToken_isset;
  BOOL __newLifetime_isset;
  BOOL __applicationId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) BananaService_UserToken token;
@property (nonatomic, retain, getter=applicationToken, setter=setApplicationToken:) BananaService_ApplicationToken applicationToken;
@property (nonatomic, retain, getter=newLifetime, setter=setNewLifetime:) Banana_LengthOfTime * newLifetime;
@property (nonatomic, retain, getter=applicationId, setter=setApplicationId:) BananaService_uuid applicationId;
#endif

- (id) init;
- (id) initWithToken: (BananaService_UserToken) token applicationToken: (BananaService_ApplicationToken) applicationToken newLifetime: (Banana_LengthOfTime *) newLifetime applicationId: (BananaService_uuid) applicationId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_UserToken) token;
- (void) setToken: (BananaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (BananaService_ApplicationToken) applicationToken;
- (void) setApplicationToken: (BananaService_ApplicationToken) applicationToken;
#endif
- (BOOL) applicationTokenIsSet;

#if !__has_feature(objc_arc)
- (Banana_LengthOfTime *) newLifetime;
- (void) setNewLifetime: (Banana_LengthOfTime *) newLifetime;
#endif
- (BOOL) newLifetimeIsSet;

#if !__has_feature(objc_arc)
- (BananaService_uuid) applicationId;
- (void) setApplicationId: (BananaService_uuid) applicationId;
#endif
- (BOOL) applicationIdIsSet;

@end

@interface BananaService_RenewApplicationTokenResponse : NSObject <TBase, NSCoding> {
  BananaService_ApplicationToken __serviceToken;

  BOOL __serviceToken_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=serviceToken, setter=setServiceToken:) BananaService_ApplicationToken serviceToken;
#endif

- (id) init;
- (id) initWithServiceToken: (BananaService_ApplicationToken) serviceToken;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_ApplicationToken) serviceToken;
- (void) setServiceToken: (BananaService_ApplicationToken) serviceToken;
#endif
- (BOOL) serviceTokenIsSet;

@end

@interface BananaService_SaveChannelRequest : NSObject <TBase, NSCoding> {
  BananaService_UserToken __token;
  BananaService_BananaChannel __channel;

  BOOL __token_isset;
  BOOL __channel_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) BananaService_UserToken token;
@property (nonatomic, retain, getter=channel, setter=setChannel:) BananaService_BananaChannel channel;
#endif

- (id) init;
- (id) initWithToken: (BananaService_UserToken) token channel: (BananaService_BananaChannel) channel;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_UserToken) token;
- (void) setToken: (BananaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (BananaService_BananaChannel) channel;
- (void) setChannel: (BananaService_BananaChannel) channel;
#endif
- (BOOL) channelIsSet;

@end

@interface BananaService_SaveChannelResponse : NSObject <TBase, NSCoding> {
  NSString * __message;
  BananaService_BananaChannel __channel;

  BOOL __message_isset;
  BOOL __channel_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=message, setter=setMessage:) NSString * message;
@property (nonatomic, retain, getter=channel, setter=setChannel:) BananaService_BananaChannel channel;
#endif

- (id) init;
- (id) initWithMessage: (NSString *) message channel: (BananaService_BananaChannel) channel;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) message;
- (void) setMessage: (NSString *) message;
#endif
- (BOOL) messageIsSet;

#if !__has_feature(objc_arc)
- (BananaService_BananaChannel) channel;
- (void) setChannel: (BananaService_BananaChannel) channel;
#endif
- (BOOL) channelIsSet;

@end

@interface BananaService_SignInRequest : NSObject <TBase, NSCoding> {
  BananaAuthentication_Credentials * __credentials;
  NSString * __emailAddress;

  BOOL __credentials_isset;
  BOOL __emailAddress_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=credentials, setter=setCredentials:) BananaAuthentication_Credentials * credentials;
@property (nonatomic, retain, getter=emailAddress, setter=setEmailAddress:) NSString * emailAddress;
#endif

- (id) init;
- (id) initWithCredentials: (BananaAuthentication_Credentials *) credentials emailAddress: (NSString *) emailAddress;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaAuthentication_Credentials *) credentials;
- (void) setCredentials: (BananaAuthentication_Credentials *) credentials;
#endif
- (BOOL) credentialsIsSet;

#if !__has_feature(objc_arc)
- (NSString *) emailAddress;
- (void) setEmailAddress: (NSString *) emailAddress;
#endif
- (BOOL) emailAddressIsSet;

@end

@interface BananaService_SignInResponse : NSObject <TBase, NSCoding> {
  BananaService_UserToken __userToken;

  BOOL __userToken_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=userToken, setter=setUserToken:) BananaService_UserToken userToken;
#endif

- (id) init;
- (id) initWithUserToken: (BananaService_UserToken) userToken;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_UserToken) userToken;
- (void) setUserToken: (BananaService_UserToken) userToken;
#endif
- (BOOL) userTokenIsSet;

@end

@interface BananaService_SignUpRequest : NSObject <TBase, NSCoding> {
  NSString * __email;
  NSString * __name;
  NSString * __firstName;
  NSString * __middleName;
  NSString * __lastName;
  NSString * __username;
  BananaService_uuid __organizationId;
  BananaAuthentication_Credentials * __credentials;
  int __mainRole;
  BananaService_timestamp __birthDate;
  NSString * __githubProfile;
  BananaService_Image __profileImage;

  BOOL __email_isset;
  BOOL __name_isset;
  BOOL __firstName_isset;
  BOOL __middleName_isset;
  BOOL __lastName_isset;
  BOOL __username_isset;
  BOOL __organizationId_isset;
  BOOL __credentials_isset;
  BOOL __mainRole_isset;
  BOOL __birthDate_isset;
  BOOL __githubProfile_isset;
  BOOL __profileImage_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=email, setter=setEmail:) NSString * email;
@property (nonatomic, retain, getter=name, setter=setName:) NSString * name;
@property (nonatomic, retain, getter=firstName, setter=setFirstName:) NSString * firstName;
@property (nonatomic, retain, getter=middleName, setter=setMiddleName:) NSString * middleName;
@property (nonatomic, retain, getter=lastName, setter=setLastName:) NSString * lastName;
@property (nonatomic, retain, getter=username, setter=setUsername:) NSString * username;
@property (nonatomic, retain, getter=organizationId, setter=setOrganizationId:) BananaService_uuid organizationId;
@property (nonatomic, retain, getter=credentials, setter=setCredentials:) BananaAuthentication_Credentials * credentials;
@property (nonatomic, getter=mainRole, setter=setMainRole:) int mainRole;
@property (nonatomic, getter=birthDate, setter=setBirthDate:) BananaService_timestamp birthDate;
@property (nonatomic, retain, getter=githubProfile, setter=setGithubProfile:) NSString * githubProfile;
@property (nonatomic, retain, getter=profileImage, setter=setProfileImage:) BananaService_Image profileImage;
#endif

- (id) init;
- (id) initWithEmail: (NSString *) email name: (NSString *) name firstName: (NSString *) firstName middleName: (NSString *) middleName lastName: (NSString *) lastName username: (NSString *) username organizationId: (BananaService_uuid) organizationId credentials: (BananaAuthentication_Credentials *) credentials mainRole: (int) mainRole birthDate: (BananaService_timestamp) birthDate githubProfile: (NSString *) githubProfile profileImage: (BananaService_Image) profileImage;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) email;
- (void) setEmail: (NSString *) email;
#endif
- (BOOL) emailIsSet;

#if !__has_feature(objc_arc)
- (NSString *) name;
- (void) setName: (NSString *) name;
#endif
- (BOOL) nameIsSet;

#if !__has_feature(objc_arc)
- (NSString *) firstName;
- (void) setFirstName: (NSString *) firstName;
#endif
- (BOOL) firstNameIsSet;

#if !__has_feature(objc_arc)
- (NSString *) middleName;
- (void) setMiddleName: (NSString *) middleName;
#endif
- (BOOL) middleNameIsSet;

#if !__has_feature(objc_arc)
- (NSString *) lastName;
- (void) setLastName: (NSString *) lastName;
#endif
- (BOOL) lastNameIsSet;

#if !__has_feature(objc_arc)
- (NSString *) username;
- (void) setUsername: (NSString *) username;
#endif
- (BOOL) usernameIsSet;

#if !__has_feature(objc_arc)
- (BananaService_uuid) organizationId;
- (void) setOrganizationId: (BananaService_uuid) organizationId;
#endif
- (BOOL) organizationIdIsSet;

#if !__has_feature(objc_arc)
- (BananaAuthentication_Credentials *) credentials;
- (void) setCredentials: (BananaAuthentication_Credentials *) credentials;
#endif
- (BOOL) credentialsIsSet;

#if !__has_feature(objc_arc)
- (int) mainRole;
- (void) setMainRole: (int) mainRole;
#endif
- (BOOL) mainRoleIsSet;

#if !__has_feature(objc_arc)
- (BananaService_timestamp) birthDate;
- (void) setBirthDate: (BananaService_timestamp) birthDate;
#endif
- (BOOL) birthDateIsSet;

#if !__has_feature(objc_arc)
- (NSString *) githubProfile;
- (void) setGithubProfile: (NSString *) githubProfile;
#endif
- (BOOL) githubProfileIsSet;

#if !__has_feature(objc_arc)
- (BananaService_Image) profileImage;
- (void) setProfileImage: (BananaService_Image) profileImage;
#endif
- (BOOL) profileImageIsSet;

@end

@interface BananaService_SignUpResponse : NSObject <TBase, NSCoding> {
  BananaService_UserToken __userToken;
  BananaAuthentication_AromaAccount * __account;
  BananaService_uuid __userId;

  BOOL __userToken_isset;
  BOOL __account_isset;
  BOOL __userId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=userToken, setter=setUserToken:) BananaService_UserToken userToken;
@property (nonatomic, retain, getter=account, setter=setAccount:) BananaAuthentication_AromaAccount * account;
@property (nonatomic, retain, getter=userId, setter=setUserId:) BananaService_uuid userId;
#endif

- (id) init;
- (id) initWithUserToken: (BananaService_UserToken) userToken account: (BananaAuthentication_AromaAccount *) account userId: (BananaService_uuid) userId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_UserToken) userToken;
- (void) setUserToken: (BananaService_UserToken) userToken;
#endif
- (BOOL) userTokenIsSet;

#if !__has_feature(objc_arc)
- (BananaAuthentication_AromaAccount *) account;
- (void) setAccount: (BananaAuthentication_AromaAccount *) account;
#endif
- (BOOL) accountIsSet;

#if !__has_feature(objc_arc)
- (BananaService_uuid) userId;
- (void) setUserId: (BananaService_uuid) userId;
#endif
- (BOOL) userIdIsSet;

@end

@interface BananaService_SnoozeChannelRequest : NSObject <TBase, NSCoding> {
  BananaService_UserToken __token;
  BananaService_BananaChannel __channel;
  BananaService_uuid __applicationId;
  Banana_LengthOfTime * __lengthOfTime;

  BOOL __token_isset;
  BOOL __channel_isset;
  BOOL __applicationId_isset;
  BOOL __lengthOfTime_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) BananaService_UserToken token;
@property (nonatomic, retain, getter=channel, setter=setChannel:) BananaService_BananaChannel channel;
@property (nonatomic, retain, getter=applicationId, setter=setApplicationId:) BananaService_uuid applicationId;
@property (nonatomic, retain, getter=lengthOfTime, setter=setLengthOfTime:) Banana_LengthOfTime * lengthOfTime;
#endif

- (id) init;
- (id) initWithToken: (BananaService_UserToken) token channel: (BananaService_BananaChannel) channel applicationId: (BananaService_uuid) applicationId lengthOfTime: (Banana_LengthOfTime *) lengthOfTime;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_UserToken) token;
- (void) setToken: (BananaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (BananaService_BananaChannel) channel;
- (void) setChannel: (BananaService_BananaChannel) channel;
#endif
- (BOOL) channelIsSet;

#if !__has_feature(objc_arc)
- (BananaService_uuid) applicationId;
- (void) setApplicationId: (BananaService_uuid) applicationId;
#endif
- (BOOL) applicationIdIsSet;

#if !__has_feature(objc_arc)
- (Banana_LengthOfTime *) lengthOfTime;
- (void) setLengthOfTime: (Banana_LengthOfTime *) lengthOfTime;
#endif
- (BOOL) lengthOfTimeIsSet;

@end

@interface BananaService_SnoozeChannelResponse : NSObject <TBase, NSCoding> {
  NSString * __message;

  BOOL __message_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=message, setter=setMessage:) NSString * message;
#endif

- (id) init;
- (id) initWithMessage: (NSString *) message;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) message;
- (void) setMessage: (NSString *) message;
#endif
- (BOOL) messageIsSet;

@end

@interface BananaService_FollowApplicationRequest : NSObject <TBase, NSCoding> {
  BananaService_UserToken __token;
  NSString * __applicationName;
  BananaService_uuid __applicationId;
  BananaService_uuid __organizationId;
  BOOL __shared;

  BOOL __token_isset;
  BOOL __applicationName_isset;
  BOOL __applicationId_isset;
  BOOL __organizationId_isset;
  BOOL __shared_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) BananaService_UserToken token;
@property (nonatomic, retain, getter=applicationName, setter=setApplicationName:) NSString * applicationName;
@property (nonatomic, retain, getter=applicationId, setter=setApplicationId:) BananaService_uuid applicationId;
@property (nonatomic, retain, getter=organizationId, setter=setOrganizationId:) BananaService_uuid organizationId;
@property (nonatomic, getter=shared, setter=setShared:) BOOL shared;
#endif

- (id) init;
- (id) initWithToken: (BananaService_UserToken) token applicationName: (NSString *) applicationName applicationId: (BananaService_uuid) applicationId organizationId: (BananaService_uuid) organizationId shared: (BOOL) shared;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_UserToken) token;
- (void) setToken: (BananaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (NSString *) applicationName;
- (void) setApplicationName: (NSString *) applicationName;
#endif
- (BOOL) applicationNameIsSet;

#if !__has_feature(objc_arc)
- (BananaService_uuid) applicationId;
- (void) setApplicationId: (BananaService_uuid) applicationId;
#endif
- (BOOL) applicationIdIsSet;

#if !__has_feature(objc_arc)
- (BananaService_uuid) organizationId;
- (void) setOrganizationId: (BananaService_uuid) organizationId;
#endif
- (BOOL) organizationIdIsSet;

#if !__has_feature(objc_arc)
- (BOOL) shared;
- (void) setShared: (BOOL) shared;
#endif
- (BOOL) sharedIsSet;

@end

@interface BananaService_FollowApplicationResponse : NSObject <TBase, NSCoding> {
  NSString * __message;

  BOOL __message_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=message, setter=setMessage:) NSString * message;
#endif

- (id) init;
- (id) initWithMessage: (NSString *) message;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) message;
- (void) setMessage: (NSString *) message;
#endif
- (BOOL) messageIsSet;

@end

@interface BananaService_GetApplicationInfoRequest : NSObject <TBase, NSCoding> {
  BananaService_AuthenticationToken __token;
  BananaService_uuid __applicationId;

  BOOL __token_isset;
  BOOL __applicationId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) BananaService_AuthenticationToken token;
@property (nonatomic, retain, getter=applicationId, setter=setApplicationId:) BananaService_uuid applicationId;
#endif

- (id) init;
- (id) initWithToken: (BananaService_AuthenticationToken) token applicationId: (BananaService_uuid) applicationId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_AuthenticationToken) token;
- (void) setToken: (BananaService_AuthenticationToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (BananaService_uuid) applicationId;
- (void) setApplicationId: (BananaService_uuid) applicationId;
#endif
- (BOOL) applicationIdIsSet;

@end

@interface BananaService_GetApplicationInfoResponse : NSObject <TBase, NSCoding> {
  BananaService_Application __applicationInfo;
  NSMutableArray * __registeredChannels;

  BOOL __applicationInfo_isset;
  BOOL __registeredChannels_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=applicationInfo, setter=setApplicationInfo:) BananaService_Application applicationInfo;
@property (nonatomic, retain, getter=registeredChannels, setter=setRegisteredChannels:) NSMutableArray * registeredChannels;
#endif

- (id) init;
- (id) initWithApplicationInfo: (BananaService_Application) applicationInfo registeredChannels: (NSMutableArray *) registeredChannels;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_Application) applicationInfo;
- (void) setApplicationInfo: (BananaService_Application) applicationInfo;
#endif
- (BOOL) applicationInfoIsSet;

#if !__has_feature(objc_arc)
- (NSMutableArray *) registeredChannels;
- (void) setRegisteredChannels: (NSMutableArray *) registeredChannels;
#endif
- (BOOL) registeredChannelsIsSet;

@end

@interface BananaService_GetBuzzRequest : NSObject <TBase, NSCoding> {
  BananaService_UserToken __token;

  BOOL __token_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) BananaService_UserToken token;
#endif

- (id) init;
- (id) initWithToken: (BananaService_UserToken) token;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_UserToken) token;
- (void) setToken: (BananaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

@end

@interface BananaService_GetBuzzResponse : NSObject <TBase, NSCoding> {
  NSMutableArray * __freshUsers;
  NSMutableArray * __freshApplications;
  NSMutableArray * __failedHealthChecks;
  NSMutableArray * __generalEvents;

  BOOL __freshUsers_isset;
  BOOL __freshApplications_isset;
  BOOL __failedHealthChecks_isset;
  BOOL __generalEvents_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=freshUsers, setter=setFreshUsers:) NSMutableArray * freshUsers;
@property (nonatomic, retain, getter=freshApplications, setter=setFreshApplications:) NSMutableArray * freshApplications;
@property (nonatomic, retain, getter=failedHealthChecks, setter=setFailedHealthChecks:) NSMutableArray * failedHealthChecks;
@property (nonatomic, retain, getter=generalEvents, setter=setGeneralEvents:) NSMutableArray * generalEvents;
#endif

- (id) init;
- (id) initWithFreshUsers: (NSMutableArray *) freshUsers freshApplications: (NSMutableArray *) freshApplications failedHealthChecks: (NSMutableArray *) failedHealthChecks generalEvents: (NSMutableArray *) generalEvents;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) freshUsers;
- (void) setFreshUsers: (NSMutableArray *) freshUsers;
#endif
- (BOOL) freshUsersIsSet;

#if !__has_feature(objc_arc)
- (NSMutableArray *) freshApplications;
- (void) setFreshApplications: (NSMutableArray *) freshApplications;
#endif
- (BOOL) freshApplicationsIsSet;

#if !__has_feature(objc_arc)
- (NSMutableArray *) failedHealthChecks;
- (void) setFailedHealthChecks: (NSMutableArray *) failedHealthChecks;
#endif
- (BOOL) failedHealthChecksIsSet;

#if !__has_feature(objc_arc)
- (NSMutableArray *) generalEvents;
- (void) setGeneralEvents: (NSMutableArray *) generalEvents;
#endif
- (BOOL) generalEventsIsSet;

@end

@interface BananaService_GetDashboardRequest : NSObject <TBase, NSCoding> {
  BananaService_UserToken __token;

  BOOL __token_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) BananaService_UserToken token;
#endif

- (id) init;
- (id) initWithToken: (BananaService_UserToken) token;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_UserToken) token;
- (void) setToken: (BananaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

@end

@interface BananaService_GetDashboardResponse : NSObject <TBase, NSCoding> {
  BananaService_int __unreadMessageCount;
  BananaService_int __totalMessagesLastHour;
  BananaService_int __totalMessagesLast24hrs;
  NSMutableArray * __recentMessages;
  BananaService_int __numberOfLowUrgencyMessages;
  BananaService_int __numberOfMediumUrgencyMessages;
  BananaService_int __numberOfHighUrgencyMessages;

  BOOL __unreadMessageCount_isset;
  BOOL __totalMessagesLastHour_isset;
  BOOL __totalMessagesLast24hrs_isset;
  BOOL __recentMessages_isset;
  BOOL __numberOfLowUrgencyMessages_isset;
  BOOL __numberOfMediumUrgencyMessages_isset;
  BOOL __numberOfHighUrgencyMessages_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=unreadMessageCount, setter=setUnreadMessageCount:) BananaService_int unreadMessageCount;
@property (nonatomic, getter=totalMessagesLastHour, setter=setTotalMessagesLastHour:) BananaService_int totalMessagesLastHour;
@property (nonatomic, getter=totalMessagesLast24hrs, setter=setTotalMessagesLast24hrs:) BananaService_int totalMessagesLast24hrs;
@property (nonatomic, retain, getter=recentMessages, setter=setRecentMessages:) NSMutableArray * recentMessages;
@property (nonatomic, getter=numberOfLowUrgencyMessages, setter=setNumberOfLowUrgencyMessages:) BananaService_int numberOfLowUrgencyMessages;
@property (nonatomic, getter=numberOfMediumUrgencyMessages, setter=setNumberOfMediumUrgencyMessages:) BananaService_int numberOfMediumUrgencyMessages;
@property (nonatomic, getter=numberOfHighUrgencyMessages, setter=setNumberOfHighUrgencyMessages:) BananaService_int numberOfHighUrgencyMessages;
#endif

- (id) init;
- (id) initWithUnreadMessageCount: (BananaService_int) unreadMessageCount totalMessagesLastHour: (BananaService_int) totalMessagesLastHour totalMessagesLast24hrs: (BananaService_int) totalMessagesLast24hrs recentMessages: (NSMutableArray *) recentMessages numberOfLowUrgencyMessages: (BananaService_int) numberOfLowUrgencyMessages numberOfMediumUrgencyMessages: (BananaService_int) numberOfMediumUrgencyMessages numberOfHighUrgencyMessages: (BananaService_int) numberOfHighUrgencyMessages;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_int) unreadMessageCount;
- (void) setUnreadMessageCount: (BananaService_int) unreadMessageCount;
#endif
- (BOOL) unreadMessageCountIsSet;

#if !__has_feature(objc_arc)
- (BananaService_int) totalMessagesLastHour;
- (void) setTotalMessagesLastHour: (BananaService_int) totalMessagesLastHour;
#endif
- (BOOL) totalMessagesLastHourIsSet;

#if !__has_feature(objc_arc)
- (BananaService_int) totalMessagesLast24hrs;
- (void) setTotalMessagesLast24hrs: (BananaService_int) totalMessagesLast24hrs;
#endif
- (BOOL) totalMessagesLast24hrsIsSet;

#if !__has_feature(objc_arc)
- (NSMutableArray *) recentMessages;
- (void) setRecentMessages: (NSMutableArray *) recentMessages;
#endif
- (BOOL) recentMessagesIsSet;

#if !__has_feature(objc_arc)
- (BananaService_int) numberOfLowUrgencyMessages;
- (void) setNumberOfLowUrgencyMessages: (BananaService_int) numberOfLowUrgencyMessages;
#endif
- (BOOL) numberOfLowUrgencyMessagesIsSet;

#if !__has_feature(objc_arc)
- (BananaService_int) numberOfMediumUrgencyMessages;
- (void) setNumberOfMediumUrgencyMessages: (BananaService_int) numberOfMediumUrgencyMessages;
#endif
- (BOOL) numberOfMediumUrgencyMessagesIsSet;

#if !__has_feature(objc_arc)
- (BananaService_int) numberOfHighUrgencyMessages;
- (void) setNumberOfHighUrgencyMessages: (BananaService_int) numberOfHighUrgencyMessages;
#endif
- (BOOL) numberOfHighUrgencyMessagesIsSet;

@end

@interface BananaService_GetMessagesRequest : NSObject <TBase, NSCoding> {
  BananaService_UserToken __token;
  BananaService_uuid __applicationId;
  BananaService_int __limit;

  BOOL __token_isset;
  BOOL __applicationId_isset;
  BOOL __limit_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) BananaService_UserToken token;
@property (nonatomic, retain, getter=applicationId, setter=setApplicationId:) BananaService_uuid applicationId;
@property (nonatomic, getter=limit, setter=setLimit:) BananaService_int limit;
#endif

- (id) init;
- (id) initWithToken: (BananaService_UserToken) token applicationId: (BananaService_uuid) applicationId limit: (BananaService_int) limit;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_UserToken) token;
- (void) setToken: (BananaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (BananaService_uuid) applicationId;
- (void) setApplicationId: (BananaService_uuid) applicationId;
#endif
- (BOOL) applicationIdIsSet;

#if !__has_feature(objc_arc)
- (BananaService_int) limit;
- (void) setLimit: (BananaService_int) limit;
#endif
- (BOOL) limitIsSet;

@end

@interface BananaService_GetMessagesResponse : NSObject <TBase, NSCoding> {
  NSMutableArray * __messages;
  BananaService_int __totalMessagesMatching;

  BOOL __messages_isset;
  BOOL __totalMessagesMatching_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=messages, setter=setMessages:) NSMutableArray * messages;
@property (nonatomic, getter=totalMessagesMatching, setter=setTotalMessagesMatching:) BananaService_int totalMessagesMatching;
#endif

- (id) init;
- (id) initWithMessages: (NSMutableArray *) messages totalMessagesMatching: (BananaService_int) totalMessagesMatching;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) messages;
- (void) setMessages: (NSMutableArray *) messages;
#endif
- (BOOL) messagesIsSet;

#if !__has_feature(objc_arc)
- (BananaService_int) totalMessagesMatching;
- (void) setTotalMessagesMatching: (BananaService_int) totalMessagesMatching;
#endif
- (BOOL) totalMessagesMatchingIsSet;

@end

@interface BananaService_GetFullMessageRequest : NSObject <TBase, NSCoding> {
  BananaService_UserToken __token;
  BananaService_uuid __messageId;
  BananaService_uuid __applicationId;

  BOOL __token_isset;
  BOOL __messageId_isset;
  BOOL __applicationId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) BananaService_UserToken token;
@property (nonatomic, retain, getter=messageId, setter=setMessageId:) BananaService_uuid messageId;
@property (nonatomic, retain, getter=applicationId, setter=setApplicationId:) BananaService_uuid applicationId;
#endif

- (id) init;
- (id) initWithToken: (BananaService_UserToken) token messageId: (BananaService_uuid) messageId applicationId: (BananaService_uuid) applicationId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_UserToken) token;
- (void) setToken: (BananaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (BananaService_uuid) messageId;
- (void) setMessageId: (BananaService_uuid) messageId;
#endif
- (BOOL) messageIdIsSet;

#if !__has_feature(objc_arc)
- (BananaService_uuid) applicationId;
- (void) setApplicationId: (BananaService_uuid) applicationId;
#endif
- (BOOL) applicationIdIsSet;

@end

@interface BananaService_GetFullMessageResponse : NSObject <TBase, NSCoding> {
  NSString * __fullBody;

  BOOL __fullBody_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=fullBody, setter=setFullBody:) NSString * fullBody;
#endif

- (id) init;
- (id) initWithFullBody: (NSString *) fullBody;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) fullBody;
- (void) setFullBody: (NSString *) fullBody;
#endif
- (BOOL) fullBodyIsSet;

@end

@interface BananaService_GetMyApplicationsRequest : NSObject <TBase, NSCoding> {
  BananaService_UserToken __token;

  BOOL __token_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) BananaService_UserToken token;
#endif

- (id) init;
- (id) initWithToken: (BananaService_UserToken) token;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_UserToken) token;
- (void) setToken: (BananaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

@end

@interface BananaService_GetMyApplicationsResponse : NSObject <TBase, NSCoding> {
  NSMutableArray * __applications;

  BOOL __applications_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=applications, setter=setApplications:) NSMutableArray * applications;
#endif

- (id) init;
- (id) initWithApplications: (NSMutableArray *) applications;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) applications;
- (void) setApplications: (NSMutableArray *) applications;
#endif
- (BOOL) applicationsIsSet;

@end

@interface BananaService_GetMySavedChannelsRequest : NSObject <TBase, NSCoding> {
  BananaService_UserToken __token;

  BOOL __token_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) BananaService_UserToken token;
#endif

- (id) init;
- (id) initWithToken: (BananaService_UserToken) token;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_UserToken) token;
- (void) setToken: (BananaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

@end

@interface BananaService_GetMySavedChannelsResponse : NSObject <TBase, NSCoding> {
  NSMutableArray * __channels;

  BOOL __channels_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=channels, setter=setChannels:) NSMutableArray * channels;
#endif

- (id) init;
- (id) initWithChannels: (NSMutableArray *) channels;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) channels;
- (void) setChannels: (NSMutableArray *) channels;
#endif
- (BOOL) channelsIsSet;

@end

@interface BananaService_GetActivityRequest : NSObject <TBase, NSCoding> {
  BananaService_UserToken __token;
  BananaService_int __limit;

  BOOL __token_isset;
  BOOL __limit_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) BananaService_UserToken token;
@property (nonatomic, getter=limit, setter=setLimit:) BananaService_int limit;
#endif

- (id) init;
- (id) initWithToken: (BananaService_UserToken) token limit: (BananaService_int) limit;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_UserToken) token;
- (void) setToken: (BananaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (BananaService_int) limit;
- (void) setLimit: (BananaService_int) limit;
#endif
- (BOOL) limitIsSet;

@end

@interface BananaService_GetActivityResponse : NSObject <TBase, NSCoding> {
  NSMutableArray * __events;

  BOOL __events_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=events, setter=setEvents:) NSMutableArray * events;
#endif

- (id) init;
- (id) initWithEvents: (NSMutableArray *) events;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) events;
- (void) setEvents: (NSMutableArray *) events;
#endif
- (BOOL) eventsIsSet;

@end

@interface BananaService_GetServiceAnnouncementsRequest : NSObject <TBase, NSCoding> {
  BananaService_UserToken __token;

  BOOL __token_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) BananaService_UserToken token;
#endif

- (id) init;
- (id) initWithToken: (BananaService_UserToken) token;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_UserToken) token;
- (void) setToken: (BananaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

@end

@interface BananaService_GetServiceAnnouncementsResponse : NSObject <TBase, NSCoding> {
  NSMutableArray * __serviceAnnouncements;

  BOOL __serviceAnnouncements_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=serviceAnnouncements, setter=setServiceAnnouncements:) NSMutableArray * serviceAnnouncements;
#endif

- (id) init;
- (id) initWithServiceAnnouncements: (NSMutableArray *) serviceAnnouncements;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) serviceAnnouncements;
- (void) setServiceAnnouncements: (NSMutableArray *) serviceAnnouncements;
#endif
- (BOOL) serviceAnnouncementsIsSet;

@end

@interface BananaService_GetUserInfoRequest : NSObject <TBase, NSCoding> {
  BananaService_UserToken __token;
  BananaService_uuid __userId;

  BOOL __token_isset;
  BOOL __userId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) BananaService_UserToken token;
@property (nonatomic, retain, getter=userId, setter=setUserId:) BananaService_uuid userId;
#endif

- (id) init;
- (id) initWithToken: (BananaService_UserToken) token userId: (BananaService_uuid) userId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_UserToken) token;
- (void) setToken: (BananaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (BananaService_uuid) userId;
- (void) setUserId: (BananaService_uuid) userId;
#endif
- (BOOL) userIdIsSet;

@end

@interface BananaService_GetUserInfoResponse : NSObject <TBase, NSCoding> {
  BananaService_User __userInfo;

  BOOL __userInfo_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=userInfo, setter=setUserInfo:) BananaService_User userInfo;
#endif

- (id) init;
- (id) initWithUserInfo: (BananaService_User) userInfo;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_User) userInfo;
- (void) setUserInfo: (BananaService_User) userInfo;
#endif
- (BOOL) userInfoIsSet;

@end

@interface BananaService_SearchForApplicationsRequest : NSObject <TBase, NSCoding> {
  BananaService_UserToken __token;
  NSString * __applicationName;
  BananaService_uuid __organizationId;

  BOOL __token_isset;
  BOOL __applicationName_isset;
  BOOL __organizationId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) BananaService_UserToken token;
@property (nonatomic, retain, getter=applicationName, setter=setApplicationName:) NSString * applicationName;
@property (nonatomic, retain, getter=organizationId, setter=setOrganizationId:) BananaService_uuid organizationId;
#endif

- (id) init;
- (id) initWithToken: (BananaService_UserToken) token applicationName: (NSString *) applicationName organizationId: (BananaService_uuid) organizationId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_UserToken) token;
- (void) setToken: (BananaService_UserToken) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (NSString *) applicationName;
- (void) setApplicationName: (NSString *) applicationName;
#endif
- (BOOL) applicationNameIsSet;

#if !__has_feature(objc_arc)
- (BananaService_uuid) organizationId;
- (void) setOrganizationId: (BananaService_uuid) organizationId;
#endif
- (BOOL) organizationIdIsSet;

@end

@interface BananaService_SearchForApplicationsResponse : NSObject <TBase, NSCoding> {
  NSMutableArray * __applications;

  BOOL __applications_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=applications, setter=setApplications:) NSMutableArray * applications;
#endif

- (id) init;
- (id) initWithApplications: (NSMutableArray *) applications;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) applications;
- (void) setApplications: (NSMutableArray *) applications;
#endif
- (BOOL) applicationsIsSet;

@end

@protocol BananaService_BananaService <NSObject>
- (double) getApiVersion;  // throws TException
- (BananaService_DeleteMessageResponse *) deleteMessage: (BananaService_DeleteMessageRequest *) request;  // throws BananaService_OperationFailedException, BananaService_InvalidArgumentException, BananaService_InvalidTokenException, BananaService_MessageDoesNotExistException, BananaService_UnauthorizedException, TException
- (BananaService_DismissMessageResponse *) dismissMessage: (BananaService_DismissMessageRequest *) request;  // throws BananaService_OperationFailedException, BananaService_InvalidArgumentException, BananaService_InvalidTokenException, BananaService_MessageDoesNotExistException, BananaService_UnauthorizedException, TException
- (BananaService_ProvisionApplicationResponse *) provisionApplication: (BananaService_ProvisionApplicationRequest *) request;  // throws BananaService_OperationFailedException, BananaService_InvalidArgumentException, BananaService_InvalidTokenException, BananaService_ApplicationDoesNotExistException, BananaService_UnauthorizedException, TException
- (BananaService_RegenerateApplicationTokenResponse *) regenerateToken: (BananaService_RegenerateApplicationTokenRequest *) request;  // throws BananaService_OperationFailedException, BananaService_InvalidArgumentException, BananaService_InvalidTokenException, BananaService_ApplicationDoesNotExistException, BananaService_UnauthorizedException, TException
- (BananaService_RegisterHealthCheckResponse *) registerHealthCheck: (BananaService_RegisterHealthCheckRequest *) request;  // throws BananaService_OperationFailedException, BananaService_InvalidArgumentException, BananaService_InvalidTokenException, BananaService_ApplicationDoesNotExistException, BananaService_UnauthorizedException, TException
- (BananaService_RemoveSavedChannelResponse *) removeSavedChannel: (BananaService_RemoveSavedChannelRequest *) request;  // throws BananaService_OperationFailedException, BananaService_InvalidArgumentException, BananaService_InvalidTokenException, BananaService_UnauthorizedException, BananaService_ChannelDoesNotExistException, TException
- (BananaService_RenewApplicationTokenResponse *) renewApplicationToken: (BananaService_RenewApplicationTokenRequest *) request;  // throws BananaService_OperationFailedException, BananaService_InvalidArgumentException, BananaService_InvalidTokenException, BananaService_ApplicationDoesNotExistException, BananaService_UnauthorizedException, TException
- (BananaService_SaveChannelResponse *) saveChannel: (BananaService_SaveChannelRequest *) request;  // throws BananaService_OperationFailedException, BananaService_InvalidArgumentException, BananaService_InvalidTokenException, BananaService_UnauthorizedException, TException
- (BananaService_SignInResponse *) signIn: (BananaService_SignInRequest *) request;  // throws BananaService_OperationFailedException, BananaService_InvalidArgumentException, BananaService_InvalidCredentialsException, BananaService_UserDoesNotExistException, TException
- (BananaService_SignUpResponse *) signUp: (BananaService_SignUpRequest *) request;  // throws BananaService_OperationFailedException, BananaService_InvalidArgumentException, BananaService_InvalidCredentialsException, BananaService_AccountAlreadyExistsException, TException
- (BananaService_SnoozeChannelResponse *) snoozeChannel: (BananaService_SnoozeChannelRequest *) request;  // throws BananaService_OperationFailedException, BananaService_InvalidArgumentException, BananaService_InvalidTokenException, BananaService_UnauthorizedException, BananaService_ChannelDoesNotExistException, TException
- (BananaService_FollowApplicationResponse *) followApplication: (BananaService_FollowApplicationRequest *) request;  // throws BananaService_OperationFailedException, BananaService_InvalidArgumentException, BananaService_InvalidTokenException, BananaService_ApplicationDoesNotExistException, BananaService_ApplicationAlreadyRegisteredException, BananaService_CustomChannelUnreachableException, TException
- (BananaService_GetActivityResponse *) getActivity: (BananaService_GetActivityRequest *) request;  // throws BananaService_OperationFailedException, BananaService_InvalidArgumentException, BananaService_InvalidTokenException, TException
- (BananaService_GetApplicationInfoResponse *) getApplicationInfo: (BananaService_GetApplicationInfoRequest *) request;  // throws BananaService_OperationFailedException, BananaService_InvalidArgumentException, BananaService_InvalidTokenException, BananaService_ApplicationDoesNotExistException, BananaService_UnauthorizedException, TException
- (BananaService_GetBuzzResponse *) getBuzz: (BananaService_GetBuzzRequest *) request;  // throws BananaService_OperationFailedException, BananaService_InvalidArgumentException, BananaService_InvalidTokenException, BananaService_ApplicationDoesNotExistException, BananaService_UnauthorizedException, TException
- (BananaService_GetDashboardResponse *) getDashboard: (BananaService_GetDashboardRequest *) request;  // throws BananaService_OperationFailedException, BananaService_InvalidArgumentException, BananaService_InvalidTokenException, TException
- (BananaService_GetMessagesResponse *) getMessages: (BananaService_GetMessagesRequest *) request;  // throws BananaService_OperationFailedException, BananaService_InvalidArgumentException, BananaService_InvalidTokenException, TException
- (BananaService_GetFullMessageResponse *) getFullMessage: (BananaService_GetFullMessageRequest *) request;  // throws BananaService_OperationFailedException, BananaService_InvalidArgumentException, BananaService_InvalidTokenException, TException
- (BananaService_GetMyApplicationsResponse *) getMyApplications: (BananaService_GetMyApplicationsRequest *) request;  // throws BananaService_OperationFailedException, BananaService_InvalidArgumentException, BananaService_InvalidTokenException, TException
- (BananaService_GetMySavedChannelsResponse *) getMySavedChannels: (BananaService_GetMySavedChannelsRequest *) request;  // throws BananaService_OperationFailedException, BananaService_InvalidArgumentException, BananaService_InvalidTokenException, TException
- (BananaService_GetUserInfoResponse *) getUserInfo: (BananaService_GetUserInfoRequest *) request;  // throws BananaService_OperationFailedException, BananaService_InvalidArgumentException, BananaService_InvalidTokenException, BananaService_UnauthorizedException, BananaService_UserDoesNotExistException, TException
- (BananaService_SearchForApplicationsResponse *) searchForApplications: (BananaService_SearchForApplicationsRequest *) request;  // throws BananaService_OperationFailedException, BananaService_InvalidArgumentException, BananaService_InvalidTokenException, BananaService_UnauthorizedException, TException
@end

@interface BananaService_BananaServiceClient : TBaseClient <BananaService_BananaService> - (id) initWithProtocol: (id <TProtocol>) protocol;
- (id) initWithInProtocol: (id <TProtocol>) inProtocol outProtocol: (id <TProtocol>) outProtocol;
@end

@interface BananaService_BananaServiceProcessor : NSObject <TProcessor> {
  id <BananaService_BananaService> mService;
  NSDictionary * mMethodMap;
}
- (id) initWithBananaService: (id <BananaService_BananaService>) service;
- (id<BananaService_BananaService>) service;
@end

@interface BananaService_BananaServiceConstants : NSObject {
}
+ (double) API_VERSION;
+ (BananaService_int) SERVICE_PORT;
+ (BananaEndpoint_TcpEndpoint *) PRODUCTION_ENDPOINT;
+ (BananaEndpoint_TcpEndpoint *) BETA_ENDPOINT;
+ (Banana_Dimension *) MAX_APPLICATION_ICON_DIMENSION;
+ (Banana_Dimension *) MAX_PROFILE_IMAGE_DIMENSION;
+ (BananaService_int) MAX_APPLICATION_ICON_SIZE_IN_KILOBYTES;
+ (BananaService_int) MAX_PROFILE_PICTURE_SIZE_IN_KILOBYTES;
+ (BananaService_int) MAX_MESSAGE_LENGTH;
@end
