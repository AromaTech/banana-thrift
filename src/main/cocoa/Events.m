/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"

#import "Authentication.h"
#import "Banana.h"

#import "Events.h"

@implementation BananaNotifications_ApplicationTokenRenewed

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.message = @"Application Token has been renewed";

#endif
  return self;
}

- (id) initWithMessage: (NSString *) message user: (BananaNotifications_User) user applicationToken: (BananaNotifications_ApplicationToken) applicationToken applicationId: (NSString *) applicationId applicationName: (NSString *) applicationName
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  __user = [user retain_stub];
  __user_isset = YES;
  __applicationToken = [applicationToken retain_stub];
  __applicationToken_isset = YES;
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  __applicationName = [applicationName retain_stub];
  __applicationName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"user"])
  {
    __user = [[decoder decodeObjectForKey: @"user"] retain_stub];
    __user_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationToken"])
  {
    __applicationToken = [[decoder decodeObjectForKey: @"applicationToken"] retain_stub];
    __applicationToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationName"])
  {
    __applicationName = [[decoder decodeObjectForKey: @"applicationName"] retain_stub];
    __applicationName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__user_isset)
  {
    [encoder encodeObject: __user forKey: @"user"];
  }
  if (__applicationToken_isset)
  {
    [encoder encodeObject: __applicationToken forKey: @"applicationToken"];
  }
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
  if (__applicationName_isset)
  {
    [encoder encodeObject: __applicationName forKey: @"applicationName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __user_isset ? 2654435761 : 0;
  if (__user_isset)
  {
    hash = (hash * 31) ^ [__user hash];
  }
  hash = (hash * 31) ^ __applicationToken_isset ? 2654435761 : 0;
  if (__applicationToken_isset)
  {
    hash = (hash * 31) ^ [__applicationToken hash];
  }
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  hash = (hash * 31) ^ __applicationName_isset ? 2654435761 : 0;
  if (__applicationName_isset)
  {
    hash = (hash * 31) ^ [__applicationName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaNotifications_ApplicationTokenRenewed class]]) {
    return NO;
  }
  BananaNotifications_ApplicationTokenRenewed *other = (BananaNotifications_ApplicationTokenRenewed *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__user_isset != other->__user_isset) ||
      (__user_isset && ((__user || other->__user) && ![__user isEqual:other->__user]))) {
    return NO;
  }
  if ((__applicationToken_isset != other->__applicationToken_isset) ||
      (__applicationToken_isset && ((__applicationToken || other->__applicationToken) && ![__applicationToken isEqual:other->__applicationToken]))) {
    return NO;
  }
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  if ((__applicationName_isset != other->__applicationName_isset) ||
      (__applicationName_isset && ((__applicationName || other->__applicationName) && ![__applicationName isEqual:other->__applicationName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [__user release_stub];
  [__applicationToken release_stub];
  [__applicationId release_stub];
  [__applicationName release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (Banana_User *) user {
  return [[__user retain_stub] autorelease_stub];
}

- (void) setUser: (Banana_User *) user {
  [user retain_stub];
  [__user release_stub];
  __user = user;
  __user_isset = YES;
}

- (BOOL) userIsSet {
  return __user_isset;
}

- (void) unsetUser {
  [__user release_stub];
  __user = nil;
  __user_isset = NO;
}

- (BananaAuthentication_ApplicationToken *) applicationToken {
  return [[__applicationToken retain_stub] autorelease_stub];
}

- (void) setApplicationToken: (BananaAuthentication_ApplicationToken *) applicationToken {
  [applicationToken retain_stub];
  [__applicationToken release_stub];
  __applicationToken = applicationToken;
  __applicationToken_isset = YES;
}

- (BOOL) applicationTokenIsSet {
  return __applicationToken_isset;
}

- (void) unsetApplicationToken {
  [__applicationToken release_stub];
  __applicationToken = nil;
  __applicationToken_isset = NO;
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (NSString *) applicationName {
  return [[__applicationName retain_stub] autorelease_stub];
}

- (void) setApplicationName: (NSString *) applicationName {
  [applicationName retain_stub];
  [__applicationName release_stub];
  __applicationName = applicationName;
  __applicationName_isset = YES;
}

- (BOOL) applicationNameIsSet {
  return __applicationName_isset;
}

- (void) unsetApplicationName {
  [__applicationName release_stub];
  __applicationName = nil;
  __applicationName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Banana_User *fieldValue = [[Banana_User alloc] init];
          [fieldValue read: inProtocol];
          [self setUser: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_ApplicationToken *fieldValue = [[BananaAuthentication_ApplicationToken alloc] init];
          [fieldValue read: inProtocol];
          [self setApplicationToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ApplicationTokenRenewed"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_isset) {
    if (__user != nil) {
      [outProtocol writeFieldBeginWithName: @"user" type: TType_STRUCT fieldID: 2];
      [__user write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationToken_isset) {
    if (__applicationToken != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationToken" type: TType_STRUCT fieldID: 3];
      [__applicationToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationName_isset) {
    if (__applicationName != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationName" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __applicationName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaNotifications_ApplicationTokenRenewed("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",user:"];
  [ms appendFormat: @"%@", __user];
  [ms appendString: @",applicationToken:"];
  [ms appendFormat: @"%@", __applicationToken];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @",applicationName:"];
  [ms appendFormat: @"\"%@\"", __applicationName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaNotifications_ApplicationTokenRegenerated

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.message = @"Application Token has been re-created";

#endif
  return self;
}

- (id) initWithMessage: (NSString *) message user: (BananaNotifications_User) user applicationToken: (BananaNotifications_ApplicationToken) applicationToken applicationId: (NSString *) applicationId applicationName: (NSString *) applicationName
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  __user = [user retain_stub];
  __user_isset = YES;
  __applicationToken = [applicationToken retain_stub];
  __applicationToken_isset = YES;
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  __applicationName = [applicationName retain_stub];
  __applicationName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"user"])
  {
    __user = [[decoder decodeObjectForKey: @"user"] retain_stub];
    __user_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationToken"])
  {
    __applicationToken = [[decoder decodeObjectForKey: @"applicationToken"] retain_stub];
    __applicationToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationName"])
  {
    __applicationName = [[decoder decodeObjectForKey: @"applicationName"] retain_stub];
    __applicationName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__user_isset)
  {
    [encoder encodeObject: __user forKey: @"user"];
  }
  if (__applicationToken_isset)
  {
    [encoder encodeObject: __applicationToken forKey: @"applicationToken"];
  }
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
  if (__applicationName_isset)
  {
    [encoder encodeObject: __applicationName forKey: @"applicationName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __user_isset ? 2654435761 : 0;
  if (__user_isset)
  {
    hash = (hash * 31) ^ [__user hash];
  }
  hash = (hash * 31) ^ __applicationToken_isset ? 2654435761 : 0;
  if (__applicationToken_isset)
  {
    hash = (hash * 31) ^ [__applicationToken hash];
  }
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  hash = (hash * 31) ^ __applicationName_isset ? 2654435761 : 0;
  if (__applicationName_isset)
  {
    hash = (hash * 31) ^ [__applicationName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaNotifications_ApplicationTokenRegenerated class]]) {
    return NO;
  }
  BananaNotifications_ApplicationTokenRegenerated *other = (BananaNotifications_ApplicationTokenRegenerated *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__user_isset != other->__user_isset) ||
      (__user_isset && ((__user || other->__user) && ![__user isEqual:other->__user]))) {
    return NO;
  }
  if ((__applicationToken_isset != other->__applicationToken_isset) ||
      (__applicationToken_isset && ((__applicationToken || other->__applicationToken) && ![__applicationToken isEqual:other->__applicationToken]))) {
    return NO;
  }
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  if ((__applicationName_isset != other->__applicationName_isset) ||
      (__applicationName_isset && ((__applicationName || other->__applicationName) && ![__applicationName isEqual:other->__applicationName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [__user release_stub];
  [__applicationToken release_stub];
  [__applicationId release_stub];
  [__applicationName release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (Banana_User *) user {
  return [[__user retain_stub] autorelease_stub];
}

- (void) setUser: (Banana_User *) user {
  [user retain_stub];
  [__user release_stub];
  __user = user;
  __user_isset = YES;
}

- (BOOL) userIsSet {
  return __user_isset;
}

- (void) unsetUser {
  [__user release_stub];
  __user = nil;
  __user_isset = NO;
}

- (BananaAuthentication_ApplicationToken *) applicationToken {
  return [[__applicationToken retain_stub] autorelease_stub];
}

- (void) setApplicationToken: (BananaAuthentication_ApplicationToken *) applicationToken {
  [applicationToken retain_stub];
  [__applicationToken release_stub];
  __applicationToken = applicationToken;
  __applicationToken_isset = YES;
}

- (BOOL) applicationTokenIsSet {
  return __applicationToken_isset;
}

- (void) unsetApplicationToken {
  [__applicationToken release_stub];
  __applicationToken = nil;
  __applicationToken_isset = NO;
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (NSString *) applicationName {
  return [[__applicationName retain_stub] autorelease_stub];
}

- (void) setApplicationName: (NSString *) applicationName {
  [applicationName retain_stub];
  [__applicationName release_stub];
  __applicationName = applicationName;
  __applicationName_isset = YES;
}

- (BOOL) applicationNameIsSet {
  return __applicationName_isset;
}

- (void) unsetApplicationName {
  [__applicationName release_stub];
  __applicationName = nil;
  __applicationName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Banana_User *fieldValue = [[Banana_User alloc] init];
          [fieldValue read: inProtocol];
          [self setUser: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_ApplicationToken *fieldValue = [[BananaAuthentication_ApplicationToken alloc] init];
          [fieldValue read: inProtocol];
          [self setApplicationToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ApplicationTokenRegenerated"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_isset) {
    if (__user != nil) {
      [outProtocol writeFieldBeginWithName: @"user" type: TType_STRUCT fieldID: 2];
      [__user write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationToken_isset) {
    if (__applicationToken != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationToken" type: TType_STRUCT fieldID: 3];
      [__applicationToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationName_isset) {
    if (__applicationName != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationName" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __applicationName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaNotifications_ApplicationTokenRegenerated("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",user:"];
  [ms appendFormat: @"%@", __user];
  [ms appendString: @",applicationToken:"];
  [ms appendFormat: @"%@", __applicationToken];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @",applicationName:"];
  [ms appendFormat: @"\"%@\"", __applicationName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaNotifications_ApplicationSentMessage

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.message = @"Application has sent an Alert";

#endif
  return self;
}

- (id) initWithMessage: (NSString *) message messageSentByApplication: (Banana_Message *) messageSentByApplication applicationId: (NSString *) applicationId applicationName: (NSString *) applicationName
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  __messageSentByApplication = [messageSentByApplication retain_stub];
  __messageSentByApplication_isset = YES;
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  __applicationName = [applicationName retain_stub];
  __applicationName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"messageSentByApplication"])
  {
    __messageSentByApplication = [[decoder decodeObjectForKey: @"messageSentByApplication"] retain_stub];
    __messageSentByApplication_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationName"])
  {
    __applicationName = [[decoder decodeObjectForKey: @"applicationName"] retain_stub];
    __applicationName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__messageSentByApplication_isset)
  {
    [encoder encodeObject: __messageSentByApplication forKey: @"messageSentByApplication"];
  }
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
  if (__applicationName_isset)
  {
    [encoder encodeObject: __applicationName forKey: @"applicationName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __messageSentByApplication_isset ? 2654435761 : 0;
  if (__messageSentByApplication_isset)
  {
    hash = (hash * 31) ^ [__messageSentByApplication hash];
  }
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  hash = (hash * 31) ^ __applicationName_isset ? 2654435761 : 0;
  if (__applicationName_isset)
  {
    hash = (hash * 31) ^ [__applicationName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaNotifications_ApplicationSentMessage class]]) {
    return NO;
  }
  BananaNotifications_ApplicationSentMessage *other = (BananaNotifications_ApplicationSentMessage *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__messageSentByApplication_isset != other->__messageSentByApplication_isset) ||
      (__messageSentByApplication_isset && ((__messageSentByApplication || other->__messageSentByApplication) && ![__messageSentByApplication isEqual:other->__messageSentByApplication]))) {
    return NO;
  }
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  if ((__applicationName_isset != other->__applicationName_isset) ||
      (__applicationName_isset && ((__applicationName || other->__applicationName) && ![__applicationName isEqual:other->__applicationName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [__messageSentByApplication release_stub];
  [__applicationId release_stub];
  [__applicationName release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (Banana_Message *) messageSentByApplication {
  return [[__messageSentByApplication retain_stub] autorelease_stub];
}

- (void) setMessageSentByApplication: (Banana_Message *) messageSentByApplication {
  [messageSentByApplication retain_stub];
  [__messageSentByApplication release_stub];
  __messageSentByApplication = messageSentByApplication;
  __messageSentByApplication_isset = YES;
}

- (BOOL) messageSentByApplicationIsSet {
  return __messageSentByApplication_isset;
}

- (void) unsetMessageSentByApplication {
  [__messageSentByApplication release_stub];
  __messageSentByApplication = nil;
  __messageSentByApplication_isset = NO;
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (NSString *) applicationName {
  return [[__applicationName retain_stub] autorelease_stub];
}

- (void) setApplicationName: (NSString *) applicationName {
  [applicationName retain_stub];
  [__applicationName release_stub];
  __applicationName = applicationName;
  __applicationName_isset = YES;
}

- (BOOL) applicationNameIsSet {
  return __applicationName_isset;
}

- (void) unsetApplicationName {
  [__applicationName release_stub];
  __applicationName = nil;
  __applicationName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Banana_Message *fieldValue = [[Banana_Message alloc] init];
          [fieldValue read: inProtocol];
          [self setMessageSentByApplication: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ApplicationSentMessage"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__messageSentByApplication_isset) {
    if (__messageSentByApplication != nil) {
      [outProtocol writeFieldBeginWithName: @"messageSentByApplication" type: TType_STRUCT fieldID: 2];
      [__messageSentByApplication write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationName_isset) {
    if (__applicationName != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __applicationName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaNotifications_ApplicationSentMessage("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",messageSentByApplication:"];
  [ms appendFormat: @"%@", __messageSentByApplication];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @",applicationName:"];
  [ms appendFormat: @"\"%@\"", __applicationName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaNotifications_HealthCheckFailed

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.message = @"Application failed a Health Check";

#endif
  return self;
}

- (id) initWithMessage: (NSString *) message hostname: (NSString *) hostname applicationId: (NSString *) applicationId applicationName: (NSString *) applicationName
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  __hostname = [hostname retain_stub];
  __hostname_isset = YES;
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  __applicationName = [applicationName retain_stub];
  __applicationName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"hostname"])
  {
    __hostname = [[decoder decodeObjectForKey: @"hostname"] retain_stub];
    __hostname_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationName"])
  {
    __applicationName = [[decoder decodeObjectForKey: @"applicationName"] retain_stub];
    __applicationName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__hostname_isset)
  {
    [encoder encodeObject: __hostname forKey: @"hostname"];
  }
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
  if (__applicationName_isset)
  {
    [encoder encodeObject: __applicationName forKey: @"applicationName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __hostname_isset ? 2654435761 : 0;
  if (__hostname_isset)
  {
    hash = (hash * 31) ^ [__hostname hash];
  }
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  hash = (hash * 31) ^ __applicationName_isset ? 2654435761 : 0;
  if (__applicationName_isset)
  {
    hash = (hash * 31) ^ [__applicationName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaNotifications_HealthCheckFailed class]]) {
    return NO;
  }
  BananaNotifications_HealthCheckFailed *other = (BananaNotifications_HealthCheckFailed *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__hostname_isset != other->__hostname_isset) ||
      (__hostname_isset && ((__hostname || other->__hostname) && ![__hostname isEqual:other->__hostname]))) {
    return NO;
  }
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  if ((__applicationName_isset != other->__applicationName_isset) ||
      (__applicationName_isset && ((__applicationName || other->__applicationName) && ![__applicationName isEqual:other->__applicationName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [__hostname release_stub];
  [__applicationId release_stub];
  [__applicationName release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (NSString *) hostname {
  return [[__hostname retain_stub] autorelease_stub];
}

- (void) setHostname: (NSString *) hostname {
  [hostname retain_stub];
  [__hostname release_stub];
  __hostname = hostname;
  __hostname_isset = YES;
}

- (BOOL) hostnameIsSet {
  return __hostname_isset;
}

- (void) unsetHostname {
  [__hostname release_stub];
  __hostname = nil;
  __hostname_isset = NO;
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (NSString *) applicationName {
  return [[__applicationName retain_stub] autorelease_stub];
}

- (void) setApplicationName: (NSString *) applicationName {
  [applicationName retain_stub];
  [__applicationName release_stub];
  __applicationName = applicationName;
  __applicationName_isset = YES;
}

- (BOOL) applicationNameIsSet {
  return __applicationName_isset;
}

- (void) unsetApplicationName {
  [__applicationName release_stub];
  __applicationName = nil;
  __applicationName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHostname: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HealthCheckFailed"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hostname_isset) {
    if (__hostname != nil) {
      [outProtocol writeFieldBeginWithName: @"hostname" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __hostname];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationName_isset) {
    if (__applicationName != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __applicationName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaNotifications_HealthCheckFailed("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",hostname:"];
  [ms appendFormat: @"\"%@\"", __hostname];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @",applicationName:"];
  [ms appendFormat: @"\"%@\"", __applicationName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaNotifications_HealthCheckBackToNormal

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.message = @"Application's Health is back to normal";

#endif
  return self;
}

- (id) initWithMessage: (NSString *) message applicationId: (NSString *) applicationId applicationName: (NSString *) applicationName
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  __applicationName = [applicationName retain_stub];
  __applicationName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationName"])
  {
    __applicationName = [[decoder decodeObjectForKey: @"applicationName"] retain_stub];
    __applicationName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
  if (__applicationName_isset)
  {
    [encoder encodeObject: __applicationName forKey: @"applicationName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  hash = (hash * 31) ^ __applicationName_isset ? 2654435761 : 0;
  if (__applicationName_isset)
  {
    hash = (hash * 31) ^ [__applicationName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaNotifications_HealthCheckBackToNormal class]]) {
    return NO;
  }
  BananaNotifications_HealthCheckBackToNormal *other = (BananaNotifications_HealthCheckBackToNormal *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  if ((__applicationName_isset != other->__applicationName_isset) ||
      (__applicationName_isset && ((__applicationName || other->__applicationName) && ![__applicationName isEqual:other->__applicationName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [__applicationId release_stub];
  [__applicationName release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (NSString *) applicationName {
  return [[__applicationName retain_stub] autorelease_stub];
}

- (void) setApplicationName: (NSString *) applicationName {
  [applicationName retain_stub];
  [__applicationName release_stub];
  __applicationName = applicationName;
  __applicationName_isset = YES;
}

- (BOOL) applicationNameIsSet {
  return __applicationName_isset;
}

- (void) unsetApplicationName {
  [__applicationName release_stub];
  __applicationName = nil;
  __applicationName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HealthCheckBackToNormal"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationName_isset) {
    if (__applicationName != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __applicationName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaNotifications_HealthCheckBackToNormal("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @",applicationName:"];
  [ms appendFormat: @"\"%@\"", __applicationName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaNotifications_OwnerApprovedRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.message = @"Application Owner approved your request";

#endif
  return self;
}

- (id) initWithMessage: (NSString *) message applicationId: (NSString *) applicationId applicationName: (NSString *) applicationName ownerId: (NSString *) ownerId
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  __applicationName = [applicationName retain_stub];
  __applicationName_isset = YES;
  __ownerId = [ownerId retain_stub];
  __ownerId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationName"])
  {
    __applicationName = [[decoder decodeObjectForKey: @"applicationName"] retain_stub];
    __applicationName_isset = YES;
  }
  if ([decoder containsValueForKey: @"ownerId"])
  {
    __ownerId = [[decoder decodeObjectForKey: @"ownerId"] retain_stub];
    __ownerId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
  if (__applicationName_isset)
  {
    [encoder encodeObject: __applicationName forKey: @"applicationName"];
  }
  if (__ownerId_isset)
  {
    [encoder encodeObject: __ownerId forKey: @"ownerId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  hash = (hash * 31) ^ __applicationName_isset ? 2654435761 : 0;
  if (__applicationName_isset)
  {
    hash = (hash * 31) ^ [__applicationName hash];
  }
  hash = (hash * 31) ^ __ownerId_isset ? 2654435761 : 0;
  if (__ownerId_isset)
  {
    hash = (hash * 31) ^ [__ownerId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaNotifications_OwnerApprovedRequest class]]) {
    return NO;
  }
  BananaNotifications_OwnerApprovedRequest *other = (BananaNotifications_OwnerApprovedRequest *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  if ((__applicationName_isset != other->__applicationName_isset) ||
      (__applicationName_isset && ((__applicationName || other->__applicationName) && ![__applicationName isEqual:other->__applicationName]))) {
    return NO;
  }
  if ((__ownerId_isset != other->__ownerId_isset) ||
      (__ownerId_isset && ((__ownerId || other->__ownerId) && ![__ownerId isEqual:other->__ownerId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [__applicationId release_stub];
  [__applicationName release_stub];
  [__ownerId release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (NSString *) applicationName {
  return [[__applicationName retain_stub] autorelease_stub];
}

- (void) setApplicationName: (NSString *) applicationName {
  [applicationName retain_stub];
  [__applicationName release_stub];
  __applicationName = applicationName;
  __applicationName_isset = YES;
}

- (BOOL) applicationNameIsSet {
  return __applicationName_isset;
}

- (void) unsetApplicationName {
  [__applicationName release_stub];
  __applicationName = nil;
  __applicationName_isset = NO;
}

- (NSString *) ownerId {
  return [[__ownerId retain_stub] autorelease_stub];
}

- (void) setOwnerId: (NSString *) ownerId {
  [ownerId retain_stub];
  [__ownerId release_stub];
  __ownerId = ownerId;
  __ownerId_isset = YES;
}

- (BOOL) ownerIdIsSet {
  return __ownerId_isset;
}

- (void) unsetOwnerId {
  [__ownerId release_stub];
  __ownerId = nil;
  __ownerId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOwnerId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"OwnerApprovedRequest"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationName_isset) {
    if (__applicationName != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __applicationName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ownerId_isset) {
    if (__ownerId != nil) {
      [outProtocol writeFieldBeginWithName: @"ownerId" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __ownerId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaNotifications_OwnerApprovedRequest("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @",applicationName:"];
  [ms appendFormat: @"\"%@\"", __applicationName];
  [ms appendString: @",ownerId:"];
  [ms appendFormat: @"\"%@\"", __ownerId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaNotifications_EventType

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHealthCheckFailed: (BananaNotifications_HealthCheckFailed *) healthCheckFailed healthCheckBackToNormal: (BananaNotifications_HealthCheckBackToNormal *) healthCheckBackToNormal applicationTokenRenewed: (BananaNotifications_ApplicationTokenRenewed *) applicationTokenRenewed applicationTokenRegenerated: (BananaNotifications_ApplicationTokenRegenerated *) applicationTokenRegenerated applicationSentMessage: (BananaNotifications_ApplicationSentMessage *) applicationSentMessage ownerApprovedRequest: (BananaNotifications_OwnerApprovedRequest *) ownerApprovedRequest
{
  self = [super init];
  __healthCheckFailed = [healthCheckFailed retain_stub];
  __healthCheckFailed_isset = YES;
  __healthCheckBackToNormal = [healthCheckBackToNormal retain_stub];
  __healthCheckBackToNormal_isset = YES;
  __applicationTokenRenewed = [applicationTokenRenewed retain_stub];
  __applicationTokenRenewed_isset = YES;
  __applicationTokenRegenerated = [applicationTokenRegenerated retain_stub];
  __applicationTokenRegenerated_isset = YES;
  __applicationSentMessage = [applicationSentMessage retain_stub];
  __applicationSentMessage_isset = YES;
  __ownerApprovedRequest = [ownerApprovedRequest retain_stub];
  __ownerApprovedRequest_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"healthCheckFailed"])
  {
    __healthCheckFailed = [[decoder decodeObjectForKey: @"healthCheckFailed"] retain_stub];
    __healthCheckFailed_isset = YES;
  }
  if ([decoder containsValueForKey: @"healthCheckBackToNormal"])
  {
    __healthCheckBackToNormal = [[decoder decodeObjectForKey: @"healthCheckBackToNormal"] retain_stub];
    __healthCheckBackToNormal_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationTokenRenewed"])
  {
    __applicationTokenRenewed = [[decoder decodeObjectForKey: @"applicationTokenRenewed"] retain_stub];
    __applicationTokenRenewed_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationTokenRegenerated"])
  {
    __applicationTokenRegenerated = [[decoder decodeObjectForKey: @"applicationTokenRegenerated"] retain_stub];
    __applicationTokenRegenerated_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationSentMessage"])
  {
    __applicationSentMessage = [[decoder decodeObjectForKey: @"applicationSentMessage"] retain_stub];
    __applicationSentMessage_isset = YES;
  }
  if ([decoder containsValueForKey: @"ownerApprovedRequest"])
  {
    __ownerApprovedRequest = [[decoder decodeObjectForKey: @"ownerApprovedRequest"] retain_stub];
    __ownerApprovedRequest_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__healthCheckFailed_isset)
  {
    [encoder encodeObject: __healthCheckFailed forKey: @"healthCheckFailed"];
  }
  if (__healthCheckBackToNormal_isset)
  {
    [encoder encodeObject: __healthCheckBackToNormal forKey: @"healthCheckBackToNormal"];
  }
  if (__applicationTokenRenewed_isset)
  {
    [encoder encodeObject: __applicationTokenRenewed forKey: @"applicationTokenRenewed"];
  }
  if (__applicationTokenRegenerated_isset)
  {
    [encoder encodeObject: __applicationTokenRegenerated forKey: @"applicationTokenRegenerated"];
  }
  if (__applicationSentMessage_isset)
  {
    [encoder encodeObject: __applicationSentMessage forKey: @"applicationSentMessage"];
  }
  if (__ownerApprovedRequest_isset)
  {
    [encoder encodeObject: __ownerApprovedRequest forKey: @"ownerApprovedRequest"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __healthCheckFailed_isset ? 2654435761 : 0;
  if (__healthCheckFailed_isset)
  {
    hash = (hash * 31) ^ [__healthCheckFailed hash];
  }
  hash = (hash * 31) ^ __healthCheckBackToNormal_isset ? 2654435761 : 0;
  if (__healthCheckBackToNormal_isset)
  {
    hash = (hash * 31) ^ [__healthCheckBackToNormal hash];
  }
  hash = (hash * 31) ^ __applicationTokenRenewed_isset ? 2654435761 : 0;
  if (__applicationTokenRenewed_isset)
  {
    hash = (hash * 31) ^ [__applicationTokenRenewed hash];
  }
  hash = (hash * 31) ^ __applicationTokenRegenerated_isset ? 2654435761 : 0;
  if (__applicationTokenRegenerated_isset)
  {
    hash = (hash * 31) ^ [__applicationTokenRegenerated hash];
  }
  hash = (hash * 31) ^ __applicationSentMessage_isset ? 2654435761 : 0;
  if (__applicationSentMessage_isset)
  {
    hash = (hash * 31) ^ [__applicationSentMessage hash];
  }
  hash = (hash * 31) ^ __ownerApprovedRequest_isset ? 2654435761 : 0;
  if (__ownerApprovedRequest_isset)
  {
    hash = (hash * 31) ^ [__ownerApprovedRequest hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaNotifications_EventType class]]) {
    return NO;
  }
  BananaNotifications_EventType *other = (BananaNotifications_EventType *)anObject;
  if ((__healthCheckFailed_isset != other->__healthCheckFailed_isset) ||
      (__healthCheckFailed_isset && ((__healthCheckFailed || other->__healthCheckFailed) && ![__healthCheckFailed isEqual:other->__healthCheckFailed]))) {
    return NO;
  }
  if ((__healthCheckBackToNormal_isset != other->__healthCheckBackToNormal_isset) ||
      (__healthCheckBackToNormal_isset && ((__healthCheckBackToNormal || other->__healthCheckBackToNormal) && ![__healthCheckBackToNormal isEqual:other->__healthCheckBackToNormal]))) {
    return NO;
  }
  if ((__applicationTokenRenewed_isset != other->__applicationTokenRenewed_isset) ||
      (__applicationTokenRenewed_isset && ((__applicationTokenRenewed || other->__applicationTokenRenewed) && ![__applicationTokenRenewed isEqual:other->__applicationTokenRenewed]))) {
    return NO;
  }
  if ((__applicationTokenRegenerated_isset != other->__applicationTokenRegenerated_isset) ||
      (__applicationTokenRegenerated_isset && ((__applicationTokenRegenerated || other->__applicationTokenRegenerated) && ![__applicationTokenRegenerated isEqual:other->__applicationTokenRegenerated]))) {
    return NO;
  }
  if ((__applicationSentMessage_isset != other->__applicationSentMessage_isset) ||
      (__applicationSentMessage_isset && ((__applicationSentMessage || other->__applicationSentMessage) && ![__applicationSentMessage isEqual:other->__applicationSentMessage]))) {
    return NO;
  }
  if ((__ownerApprovedRequest_isset != other->__ownerApprovedRequest_isset) ||
      (__ownerApprovedRequest_isset && ((__ownerApprovedRequest || other->__ownerApprovedRequest) && ![__ownerApprovedRequest isEqual:other->__ownerApprovedRequest]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__healthCheckFailed release_stub];
  [__healthCheckBackToNormal release_stub];
  [__applicationTokenRenewed release_stub];
  [__applicationTokenRegenerated release_stub];
  [__applicationSentMessage release_stub];
  [__ownerApprovedRequest release_stub];
  [super dealloc_stub];
}

- (BananaNotifications_HealthCheckFailed *) healthCheckFailed {
  return [[__healthCheckFailed retain_stub] autorelease_stub];
}

- (void) setHealthCheckFailed: (BananaNotifications_HealthCheckFailed *) healthCheckFailed {
  [healthCheckFailed retain_stub];
  [__healthCheckFailed release_stub];
  __healthCheckFailed = healthCheckFailed;
  __healthCheckFailed_isset = YES;
}

- (BOOL) healthCheckFailedIsSet {
  return __healthCheckFailed_isset;
}

- (void) unsetHealthCheckFailed {
  [__healthCheckFailed release_stub];
  __healthCheckFailed = nil;
  __healthCheckFailed_isset = NO;
}

- (BananaNotifications_HealthCheckBackToNormal *) healthCheckBackToNormal {
  return [[__healthCheckBackToNormal retain_stub] autorelease_stub];
}

- (void) setHealthCheckBackToNormal: (BananaNotifications_HealthCheckBackToNormal *) healthCheckBackToNormal {
  [healthCheckBackToNormal retain_stub];
  [__healthCheckBackToNormal release_stub];
  __healthCheckBackToNormal = healthCheckBackToNormal;
  __healthCheckBackToNormal_isset = YES;
}

- (BOOL) healthCheckBackToNormalIsSet {
  return __healthCheckBackToNormal_isset;
}

- (void) unsetHealthCheckBackToNormal {
  [__healthCheckBackToNormal release_stub];
  __healthCheckBackToNormal = nil;
  __healthCheckBackToNormal_isset = NO;
}

- (BananaNotifications_ApplicationTokenRenewed *) applicationTokenRenewed {
  return [[__applicationTokenRenewed retain_stub] autorelease_stub];
}

- (void) setApplicationTokenRenewed: (BananaNotifications_ApplicationTokenRenewed *) applicationTokenRenewed {
  [applicationTokenRenewed retain_stub];
  [__applicationTokenRenewed release_stub];
  __applicationTokenRenewed = applicationTokenRenewed;
  __applicationTokenRenewed_isset = YES;
}

- (BOOL) applicationTokenRenewedIsSet {
  return __applicationTokenRenewed_isset;
}

- (void) unsetApplicationTokenRenewed {
  [__applicationTokenRenewed release_stub];
  __applicationTokenRenewed = nil;
  __applicationTokenRenewed_isset = NO;
}

- (BananaNotifications_ApplicationTokenRegenerated *) applicationTokenRegenerated {
  return [[__applicationTokenRegenerated retain_stub] autorelease_stub];
}

- (void) setApplicationTokenRegenerated: (BananaNotifications_ApplicationTokenRegenerated *) applicationTokenRegenerated {
  [applicationTokenRegenerated retain_stub];
  [__applicationTokenRegenerated release_stub];
  __applicationTokenRegenerated = applicationTokenRegenerated;
  __applicationTokenRegenerated_isset = YES;
}

- (BOOL) applicationTokenRegeneratedIsSet {
  return __applicationTokenRegenerated_isset;
}

- (void) unsetApplicationTokenRegenerated {
  [__applicationTokenRegenerated release_stub];
  __applicationTokenRegenerated = nil;
  __applicationTokenRegenerated_isset = NO;
}

- (BananaNotifications_ApplicationSentMessage *) applicationSentMessage {
  return [[__applicationSentMessage retain_stub] autorelease_stub];
}

- (void) setApplicationSentMessage: (BananaNotifications_ApplicationSentMessage *) applicationSentMessage {
  [applicationSentMessage retain_stub];
  [__applicationSentMessage release_stub];
  __applicationSentMessage = applicationSentMessage;
  __applicationSentMessage_isset = YES;
}

- (BOOL) applicationSentMessageIsSet {
  return __applicationSentMessage_isset;
}

- (void) unsetApplicationSentMessage {
  [__applicationSentMessage release_stub];
  __applicationSentMessage = nil;
  __applicationSentMessage_isset = NO;
}

- (BananaNotifications_OwnerApprovedRequest *) ownerApprovedRequest {
  return [[__ownerApprovedRequest retain_stub] autorelease_stub];
}

- (void) setOwnerApprovedRequest: (BananaNotifications_OwnerApprovedRequest *) ownerApprovedRequest {
  [ownerApprovedRequest retain_stub];
  [__ownerApprovedRequest release_stub];
  __ownerApprovedRequest = ownerApprovedRequest;
  __ownerApprovedRequest_isset = YES;
}

- (BOOL) ownerApprovedRequestIsSet {
  return __ownerApprovedRequest_isset;
}

- (void) unsetOwnerApprovedRequest {
  [__ownerApprovedRequest release_stub];
  __ownerApprovedRequest = nil;
  __ownerApprovedRequest_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaNotifications_HealthCheckFailed *fieldValue = [[BananaNotifications_HealthCheckFailed alloc] init];
          [fieldValue read: inProtocol];
          [self setHealthCheckFailed: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaNotifications_HealthCheckBackToNormal *fieldValue = [[BananaNotifications_HealthCheckBackToNormal alloc] init];
          [fieldValue read: inProtocol];
          [self setHealthCheckBackToNormal: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaNotifications_ApplicationTokenRenewed *fieldValue = [[BananaNotifications_ApplicationTokenRenewed alloc] init];
          [fieldValue read: inProtocol];
          [self setApplicationTokenRenewed: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          BananaNotifications_ApplicationTokenRegenerated *fieldValue = [[BananaNotifications_ApplicationTokenRegenerated alloc] init];
          [fieldValue read: inProtocol];
          [self setApplicationTokenRegenerated: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          BananaNotifications_ApplicationSentMessage *fieldValue = [[BananaNotifications_ApplicationSentMessage alloc] init];
          [fieldValue read: inProtocol];
          [self setApplicationSentMessage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRUCT) {
          BananaNotifications_OwnerApprovedRequest *fieldValue = [[BananaNotifications_OwnerApprovedRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setOwnerApprovedRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EventType"];
  if (__healthCheckFailed_isset) {
    if (__healthCheckFailed != nil) {
      [outProtocol writeFieldBeginWithName: @"healthCheckFailed" type: TType_STRUCT fieldID: 1];
      [__healthCheckFailed write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__healthCheckBackToNormal_isset) {
    if (__healthCheckBackToNormal != nil) {
      [outProtocol writeFieldBeginWithName: @"healthCheckBackToNormal" type: TType_STRUCT fieldID: 2];
      [__healthCheckBackToNormal write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationTokenRenewed_isset) {
    if (__applicationTokenRenewed != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationTokenRenewed" type: TType_STRUCT fieldID: 3];
      [__applicationTokenRenewed write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationTokenRegenerated_isset) {
    if (__applicationTokenRegenerated != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationTokenRegenerated" type: TType_STRUCT fieldID: 4];
      [__applicationTokenRegenerated write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationSentMessage_isset) {
    if (__applicationSentMessage != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationSentMessage" type: TType_STRUCT fieldID: 5];
      [__applicationSentMessage write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ownerApprovedRequest_isset) {
    if (__ownerApprovedRequest != nil) {
      [outProtocol writeFieldBeginWithName: @"ownerApprovedRequest" type: TType_STRUCT fieldID: 6];
      [__ownerApprovedRequest write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaNotifications_EventType("];
  [ms appendString: @"healthCheckFailed:"];
  [ms appendFormat: @"%@", __healthCheckFailed];
  [ms appendString: @",healthCheckBackToNormal:"];
  [ms appendFormat: @"%@", __healthCheckBackToNormal];
  [ms appendString: @",applicationTokenRenewed:"];
  [ms appendFormat: @"%@", __applicationTokenRenewed];
  [ms appendString: @",applicationTokenRegenerated:"];
  [ms appendFormat: @"%@", __applicationTokenRegenerated];
  [ms appendString: @",applicationSentMessage:"];
  [ms appendFormat: @"%@", __applicationSentMessage];
  [ms appendString: @",ownerApprovedRequest:"];
  [ms appendFormat: @"%@", __ownerApprovedRequest];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaNotifications_Event

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEventType: (BananaNotifications_EventType *) eventType timestamp: (BananaNotifications_timestamp) timestamp
{
  self = [super init];
  __eventType = [eventType retain_stub];
  __eventType_isset = YES;
  __timestamp = timestamp;
  __timestamp_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"eventType"])
  {
    __eventType = [[decoder decodeObjectForKey: @"eventType"] retain_stub];
    __eventType_isset = YES;
  }
  if ([decoder containsValueForKey: @"timestamp"])
  {
    __timestamp = [decoder decodeInt64ForKey: @"timestamp"];
    __timestamp_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__eventType_isset)
  {
    [encoder encodeObject: __eventType forKey: @"eventType"];
  }
  if (__timestamp_isset)
  {
    [encoder encodeInt64: __timestamp forKey: @"timestamp"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __eventType_isset ? 2654435761 : 0;
  if (__eventType_isset)
  {
    hash = (hash * 31) ^ [__eventType hash];
  }
  hash = (hash * 31) ^ __timestamp_isset ? 2654435761 : 0;
  if (__timestamp_isset)
  {
    hash = (hash * 31) ^ [@(__timestamp) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaNotifications_Event class]]) {
    return NO;
  }
  BananaNotifications_Event *other = (BananaNotifications_Event *)anObject;
  if ((__eventType_isset != other->__eventType_isset) ||
      (__eventType_isset && ((__eventType || other->__eventType) && ![__eventType isEqual:other->__eventType]))) {
    return NO;
  }
  if ((__timestamp_isset != other->__timestamp_isset) ||
      (__timestamp_isset && (__timestamp != other->__timestamp))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__eventType release_stub];
  [super dealloc_stub];
}

- (BananaNotifications_EventType *) eventType {
  return [[__eventType retain_stub] autorelease_stub];
}

- (void) setEventType: (BananaNotifications_EventType *) eventType {
  [eventType retain_stub];
  [__eventType release_stub];
  __eventType = eventType;
  __eventType_isset = YES;
}

- (BOOL) eventTypeIsSet {
  return __eventType_isset;
}

- (void) unsetEventType {
  [__eventType release_stub];
  __eventType = nil;
  __eventType_isset = NO;
}

- (int64_t) timestamp {
  return __timestamp;
}

- (void) setTimestamp: (int64_t) timestamp {
  __timestamp = timestamp;
  __timestamp_isset = YES;
}

- (BOOL) timestampIsSet {
  return __timestamp_isset;
}

- (void) unsetTimestamp {
  __timestamp_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaNotifications_EventType *fieldValue = [[BananaNotifications_EventType alloc] init];
          [fieldValue read: inProtocol];
          [self setEventType: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Event"];
  if (__eventType_isset) {
    if (__eventType != nil) {
      [outProtocol writeFieldBeginWithName: @"eventType" type: TType_STRUCT fieldID: 1];
      [__eventType write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__timestamp_isset) {
    [outProtocol writeFieldBeginWithName: @"timestamp" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __timestamp];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaNotifications_Event("];
  [ms appendString: @"eventType:"];
  [ms appendFormat: @"%@", __eventType];
  [ms appendString: @",timestamp:"];
  [ms appendFormat: @"%qi", __timestamp];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation BananaNotifications_EventsConstants
+ (void) initialize {
}
@end

