/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"

#import "Authentication.h"
#import "Aroma.h"

#import "Events.h"

@implementation AromaEvents_ApplicationMessagesDeleted

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.message = @"Application's messages have been deleted";

#endif
  return self;
}

- (id) initWithApplicationId: (AromaEvents_uuid) applicationId message: (NSString *) message app: (AromaEvents_Application) app userIdOfActor: (AromaEvents_uuid) userIdOfActor actor: (AromaEvents_User) actor
{
  self = [super init];
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  __message = [message retain_stub];
  __message_isset = YES;
  __app = [app retain_stub];
  __app_isset = YES;
  __userIdOfActor = [userIdOfActor retain_stub];
  __userIdOfActor_isset = YES;
  __actor = [actor retain_stub];
  __actor_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"app"])
  {
    __app = [[decoder decodeObjectForKey: @"app"] retain_stub];
    __app_isset = YES;
  }
  if ([decoder containsValueForKey: @"userIdOfActor"])
  {
    __userIdOfActor = [[decoder decodeObjectForKey: @"userIdOfActor"] retain_stub];
    __userIdOfActor_isset = YES;
  }
  if ([decoder containsValueForKey: @"actor"])
  {
    __actor = [[decoder decodeObjectForKey: @"actor"] retain_stub];
    __actor_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__app_isset)
  {
    [encoder encodeObject: __app forKey: @"app"];
  }
  if (__userIdOfActor_isset)
  {
    [encoder encodeObject: __userIdOfActor forKey: @"userIdOfActor"];
  }
  if (__actor_isset)
  {
    [encoder encodeObject: __actor forKey: @"actor"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __app_isset ? 2654435761 : 0;
  if (__app_isset)
  {
    hash = (hash * 31) ^ [__app hash];
  }
  hash = (hash * 31) ^ __userIdOfActor_isset ? 2654435761 : 0;
  if (__userIdOfActor_isset)
  {
    hash = (hash * 31) ^ [__userIdOfActor hash];
  }
  hash = (hash * 31) ^ __actor_isset ? 2654435761 : 0;
  if (__actor_isset)
  {
    hash = (hash * 31) ^ [__actor hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEvents_ApplicationMessagesDeleted class]]) {
    return NO;
  }
  AromaEvents_ApplicationMessagesDeleted *other = (AromaEvents_ApplicationMessagesDeleted *)anObject;
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__app_isset != other->__app_isset) ||
      (__app_isset && ((__app || other->__app) && ![__app isEqual:other->__app]))) {
    return NO;
  }
  if ((__userIdOfActor_isset != other->__userIdOfActor_isset) ||
      (__userIdOfActor_isset && ((__userIdOfActor || other->__userIdOfActor) && ![__userIdOfActor isEqual:other->__userIdOfActor]))) {
    return NO;
  }
  if ((__actor_isset != other->__actor_isset) ||
      (__actor_isset && ((__actor || other->__actor) && ![__actor isEqual:other->__actor]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__applicationId release_stub];
  [__message release_stub];
  [__app release_stub];
  [__userIdOfActor release_stub];
  [__actor release_stub];
  [super dealloc_stub];
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (Aroma_Application *) app {
  return [[__app retain_stub] autorelease_stub];
}

- (void) setApp: (Aroma_Application *) app {
  [app retain_stub];
  [__app release_stub];
  __app = app;
  __app_isset = YES;
}

- (BOOL) appIsSet {
  return __app_isset;
}

- (void) unsetApp {
  [__app release_stub];
  __app = nil;
  __app_isset = NO;
}

- (NSString *) userIdOfActor {
  return [[__userIdOfActor retain_stub] autorelease_stub];
}

- (void) setUserIdOfActor: (NSString *) userIdOfActor {
  [userIdOfActor retain_stub];
  [__userIdOfActor release_stub];
  __userIdOfActor = userIdOfActor;
  __userIdOfActor_isset = YES;
}

- (BOOL) userIdOfActorIsSet {
  return __userIdOfActor_isset;
}

- (void) unsetUserIdOfActor {
  [__userIdOfActor release_stub];
  __userIdOfActor = nil;
  __userIdOfActor_isset = NO;
}

- (Aroma_User *) actor {
  return [[__actor retain_stub] autorelease_stub];
}

- (void) setActor: (Aroma_User *) actor {
  [actor retain_stub];
  [__actor release_stub];
  __actor = actor;
  __actor_isset = YES;
}

- (BOOL) actorIsSet {
  return __actor_isset;
}

- (void) unsetActor {
  [__actor release_stub];
  __actor = nil;
  __actor_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          Aroma_Application *fieldValue = [[Aroma_Application alloc] init];
          [fieldValue read: inProtocol];
          [self setApp: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserIdOfActor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          Aroma_User *fieldValue = [[Aroma_User alloc] init];
          [fieldValue read: inProtocol];
          [self setActor: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ApplicationMessagesDeleted"];
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__app_isset) {
    if (__app != nil) {
      [outProtocol writeFieldBeginWithName: @"app" type: TType_STRUCT fieldID: 3];
      [__app write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userIdOfActor_isset) {
    if (__userIdOfActor != nil) {
      [outProtocol writeFieldBeginWithName: @"userIdOfActor" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __userIdOfActor];
      [outProtocol writeFieldEnd];
    }
  }
  if (__actor_isset) {
    if (__actor != nil) {
      [outProtocol writeFieldBeginWithName: @"actor" type: TType_STRUCT fieldID: 5];
      [__actor write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEvents_ApplicationMessagesDeleted("];
  [ms appendString: @"applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",app:"];
  [ms appendFormat: @"%@", __app];
  [ms appendString: @",userIdOfActor:"];
  [ms appendFormat: @"\"%@\"", __userIdOfActor];
  [ms appendString: @",actor:"];
  [ms appendFormat: @"%@", __actor];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEvents_ApplicationTokenRenewed

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.message = @"Application Token has been renewed";

#endif
  return self;
}

- (id) initWithMessage: (NSString *) message applicationId: (AromaEvents_uuid) applicationId userIdOfActor: (AromaEvents_uuid) userIdOfActor applicationToken: (AromaEvents_ApplicationToken) applicationToken application: (AromaEvents_Application) application actor: (AromaEvents_User) actor
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  __userIdOfActor = [userIdOfActor retain_stub];
  __userIdOfActor_isset = YES;
  __applicationToken = [applicationToken retain_stub];
  __applicationToken_isset = YES;
  __application = [application retain_stub];
  __application_isset = YES;
  __actor = [actor retain_stub];
  __actor_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"userIdOfActor"])
  {
    __userIdOfActor = [[decoder decodeObjectForKey: @"userIdOfActor"] retain_stub];
    __userIdOfActor_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationToken"])
  {
    __applicationToken = [[decoder decodeObjectForKey: @"applicationToken"] retain_stub];
    __applicationToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"application"])
  {
    __application = [[decoder decodeObjectForKey: @"application"] retain_stub];
    __application_isset = YES;
  }
  if ([decoder containsValueForKey: @"actor"])
  {
    __actor = [[decoder decodeObjectForKey: @"actor"] retain_stub];
    __actor_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
  if (__userIdOfActor_isset)
  {
    [encoder encodeObject: __userIdOfActor forKey: @"userIdOfActor"];
  }
  if (__applicationToken_isset)
  {
    [encoder encodeObject: __applicationToken forKey: @"applicationToken"];
  }
  if (__application_isset)
  {
    [encoder encodeObject: __application forKey: @"application"];
  }
  if (__actor_isset)
  {
    [encoder encodeObject: __actor forKey: @"actor"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  hash = (hash * 31) ^ __userIdOfActor_isset ? 2654435761 : 0;
  if (__userIdOfActor_isset)
  {
    hash = (hash * 31) ^ [__userIdOfActor hash];
  }
  hash = (hash * 31) ^ __applicationToken_isset ? 2654435761 : 0;
  if (__applicationToken_isset)
  {
    hash = (hash * 31) ^ [__applicationToken hash];
  }
  hash = (hash * 31) ^ __application_isset ? 2654435761 : 0;
  if (__application_isset)
  {
    hash = (hash * 31) ^ [__application hash];
  }
  hash = (hash * 31) ^ __actor_isset ? 2654435761 : 0;
  if (__actor_isset)
  {
    hash = (hash * 31) ^ [__actor hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEvents_ApplicationTokenRenewed class]]) {
    return NO;
  }
  AromaEvents_ApplicationTokenRenewed *other = (AromaEvents_ApplicationTokenRenewed *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  if ((__userIdOfActor_isset != other->__userIdOfActor_isset) ||
      (__userIdOfActor_isset && ((__userIdOfActor || other->__userIdOfActor) && ![__userIdOfActor isEqual:other->__userIdOfActor]))) {
    return NO;
  }
  if ((__applicationToken_isset != other->__applicationToken_isset) ||
      (__applicationToken_isset && ((__applicationToken || other->__applicationToken) && ![__applicationToken isEqual:other->__applicationToken]))) {
    return NO;
  }
  if ((__application_isset != other->__application_isset) ||
      (__application_isset && ((__application || other->__application) && ![__application isEqual:other->__application]))) {
    return NO;
  }
  if ((__actor_isset != other->__actor_isset) ||
      (__actor_isset && ((__actor || other->__actor) && ![__actor isEqual:other->__actor]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [__applicationId release_stub];
  [__userIdOfActor release_stub];
  [__applicationToken release_stub];
  [__application release_stub];
  [__actor release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (NSString *) userIdOfActor {
  return [[__userIdOfActor retain_stub] autorelease_stub];
}

- (void) setUserIdOfActor: (NSString *) userIdOfActor {
  [userIdOfActor retain_stub];
  [__userIdOfActor release_stub];
  __userIdOfActor = userIdOfActor;
  __userIdOfActor_isset = YES;
}

- (BOOL) userIdOfActorIsSet {
  return __userIdOfActor_isset;
}

- (void) unsetUserIdOfActor {
  [__userIdOfActor release_stub];
  __userIdOfActor = nil;
  __userIdOfActor_isset = NO;
}

- (BananaAuthentication_ApplicationToken *) applicationToken {
  return [[__applicationToken retain_stub] autorelease_stub];
}

- (void) setApplicationToken: (BananaAuthentication_ApplicationToken *) applicationToken {
  [applicationToken retain_stub];
  [__applicationToken release_stub];
  __applicationToken = applicationToken;
  __applicationToken_isset = YES;
}

- (BOOL) applicationTokenIsSet {
  return __applicationToken_isset;
}

- (void) unsetApplicationToken {
  [__applicationToken release_stub];
  __applicationToken = nil;
  __applicationToken_isset = NO;
}

- (Aroma_Application *) application {
  return [[__application retain_stub] autorelease_stub];
}

- (void) setApplication: (Aroma_Application *) application {
  [application retain_stub];
  [__application release_stub];
  __application = application;
  __application_isset = YES;
}

- (BOOL) applicationIsSet {
  return __application_isset;
}

- (void) unsetApplication {
  [__application release_stub];
  __application = nil;
  __application_isset = NO;
}

- (Aroma_User *) actor {
  return [[__actor retain_stub] autorelease_stub];
}

- (void) setActor: (Aroma_User *) actor {
  [actor retain_stub];
  [__actor release_stub];
  __actor = actor;
  __actor_isset = YES;
}

- (BOOL) actorIsSet {
  return __actor_isset;
}

- (void) unsetActor {
  [__actor release_stub];
  __actor = nil;
  __actor_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserIdOfActor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_ApplicationToken *fieldValue = [[BananaAuthentication_ApplicationToken alloc] init];
          [fieldValue read: inProtocol];
          [self setApplicationToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          Aroma_Application *fieldValue = [[Aroma_Application alloc] init];
          [fieldValue read: inProtocol];
          [self setApplication: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRUCT) {
          Aroma_User *fieldValue = [[Aroma_User alloc] init];
          [fieldValue read: inProtocol];
          [self setActor: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ApplicationTokenRenewed"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userIdOfActor_isset) {
    if (__userIdOfActor != nil) {
      [outProtocol writeFieldBeginWithName: @"userIdOfActor" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __userIdOfActor];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationToken_isset) {
    if (__applicationToken != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationToken" type: TType_STRUCT fieldID: 4];
      [__applicationToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__application_isset) {
    if (__application != nil) {
      [outProtocol writeFieldBeginWithName: @"application" type: TType_STRUCT fieldID: 5];
      [__application write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__actor_isset) {
    if (__actor != nil) {
      [outProtocol writeFieldBeginWithName: @"actor" type: TType_STRUCT fieldID: 6];
      [__actor write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEvents_ApplicationTokenRenewed("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @",userIdOfActor:"];
  [ms appendFormat: @"\"%@\"", __userIdOfActor];
  [ms appendString: @",applicationToken:"];
  [ms appendFormat: @"%@", __applicationToken];
  [ms appendString: @",application:"];
  [ms appendFormat: @"%@", __application];
  [ms appendString: @",actor:"];
  [ms appendFormat: @"%@", __actor];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEvents_ApplicationTokenRegenerated

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.message = @"Application Token has been re-created";

#endif
  return self;
}

- (id) initWithMessage: (NSString *) message userIdOfActor: (AromaEvents_uuid) userIdOfActor applicationId: (AromaEvents_uuid) applicationId applicationToken: (AromaEvents_ApplicationToken) applicationToken application: (AromaEvents_Application) application actor: (AromaEvents_User) actor
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  __userIdOfActor = [userIdOfActor retain_stub];
  __userIdOfActor_isset = YES;
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  __applicationToken = [applicationToken retain_stub];
  __applicationToken_isset = YES;
  __application = [application retain_stub];
  __application_isset = YES;
  __actor = [actor retain_stub];
  __actor_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"userIdOfActor"])
  {
    __userIdOfActor = [[decoder decodeObjectForKey: @"userIdOfActor"] retain_stub];
    __userIdOfActor_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationToken"])
  {
    __applicationToken = [[decoder decodeObjectForKey: @"applicationToken"] retain_stub];
    __applicationToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"application"])
  {
    __application = [[decoder decodeObjectForKey: @"application"] retain_stub];
    __application_isset = YES;
  }
  if ([decoder containsValueForKey: @"actor"])
  {
    __actor = [[decoder decodeObjectForKey: @"actor"] retain_stub];
    __actor_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__userIdOfActor_isset)
  {
    [encoder encodeObject: __userIdOfActor forKey: @"userIdOfActor"];
  }
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
  if (__applicationToken_isset)
  {
    [encoder encodeObject: __applicationToken forKey: @"applicationToken"];
  }
  if (__application_isset)
  {
    [encoder encodeObject: __application forKey: @"application"];
  }
  if (__actor_isset)
  {
    [encoder encodeObject: __actor forKey: @"actor"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __userIdOfActor_isset ? 2654435761 : 0;
  if (__userIdOfActor_isset)
  {
    hash = (hash * 31) ^ [__userIdOfActor hash];
  }
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  hash = (hash * 31) ^ __applicationToken_isset ? 2654435761 : 0;
  if (__applicationToken_isset)
  {
    hash = (hash * 31) ^ [__applicationToken hash];
  }
  hash = (hash * 31) ^ __application_isset ? 2654435761 : 0;
  if (__application_isset)
  {
    hash = (hash * 31) ^ [__application hash];
  }
  hash = (hash * 31) ^ __actor_isset ? 2654435761 : 0;
  if (__actor_isset)
  {
    hash = (hash * 31) ^ [__actor hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEvents_ApplicationTokenRegenerated class]]) {
    return NO;
  }
  AromaEvents_ApplicationTokenRegenerated *other = (AromaEvents_ApplicationTokenRegenerated *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__userIdOfActor_isset != other->__userIdOfActor_isset) ||
      (__userIdOfActor_isset && ((__userIdOfActor || other->__userIdOfActor) && ![__userIdOfActor isEqual:other->__userIdOfActor]))) {
    return NO;
  }
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  if ((__applicationToken_isset != other->__applicationToken_isset) ||
      (__applicationToken_isset && ((__applicationToken || other->__applicationToken) && ![__applicationToken isEqual:other->__applicationToken]))) {
    return NO;
  }
  if ((__application_isset != other->__application_isset) ||
      (__application_isset && ((__application || other->__application) && ![__application isEqual:other->__application]))) {
    return NO;
  }
  if ((__actor_isset != other->__actor_isset) ||
      (__actor_isset && ((__actor || other->__actor) && ![__actor isEqual:other->__actor]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [__userIdOfActor release_stub];
  [__applicationId release_stub];
  [__applicationToken release_stub];
  [__application release_stub];
  [__actor release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (NSString *) userIdOfActor {
  return [[__userIdOfActor retain_stub] autorelease_stub];
}

- (void) setUserIdOfActor: (NSString *) userIdOfActor {
  [userIdOfActor retain_stub];
  [__userIdOfActor release_stub];
  __userIdOfActor = userIdOfActor;
  __userIdOfActor_isset = YES;
}

- (BOOL) userIdOfActorIsSet {
  return __userIdOfActor_isset;
}

- (void) unsetUserIdOfActor {
  [__userIdOfActor release_stub];
  __userIdOfActor = nil;
  __userIdOfActor_isset = NO;
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (BananaAuthentication_ApplicationToken *) applicationToken {
  return [[__applicationToken retain_stub] autorelease_stub];
}

- (void) setApplicationToken: (BananaAuthentication_ApplicationToken *) applicationToken {
  [applicationToken retain_stub];
  [__applicationToken release_stub];
  __applicationToken = applicationToken;
  __applicationToken_isset = YES;
}

- (BOOL) applicationTokenIsSet {
  return __applicationToken_isset;
}

- (void) unsetApplicationToken {
  [__applicationToken release_stub];
  __applicationToken = nil;
  __applicationToken_isset = NO;
}

- (Aroma_Application *) application {
  return [[__application retain_stub] autorelease_stub];
}

- (void) setApplication: (Aroma_Application *) application {
  [application retain_stub];
  [__application release_stub];
  __application = application;
  __application_isset = YES;
}

- (BOOL) applicationIsSet {
  return __application_isset;
}

- (void) unsetApplication {
  [__application release_stub];
  __application = nil;
  __application_isset = NO;
}

- (Aroma_User *) actor {
  return [[__actor retain_stub] autorelease_stub];
}

- (void) setActor: (Aroma_User *) actor {
  [actor retain_stub];
  [__actor release_stub];
  __actor = actor;
  __actor_isset = YES;
}

- (BOOL) actorIsSet {
  return __actor_isset;
}

- (void) unsetActor {
  [__actor release_stub];
  __actor = nil;
  __actor_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserIdOfActor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_ApplicationToken *fieldValue = [[BananaAuthentication_ApplicationToken alloc] init];
          [fieldValue read: inProtocol];
          [self setApplicationToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          Aroma_Application *fieldValue = [[Aroma_Application alloc] init];
          [fieldValue read: inProtocol];
          [self setApplication: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRUCT) {
          Aroma_User *fieldValue = [[Aroma_User alloc] init];
          [fieldValue read: inProtocol];
          [self setActor: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ApplicationTokenRegenerated"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userIdOfActor_isset) {
    if (__userIdOfActor != nil) {
      [outProtocol writeFieldBeginWithName: @"userIdOfActor" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __userIdOfActor];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationToken_isset) {
    if (__applicationToken != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationToken" type: TType_STRUCT fieldID: 4];
      [__applicationToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__application_isset) {
    if (__application != nil) {
      [outProtocol writeFieldBeginWithName: @"application" type: TType_STRUCT fieldID: 5];
      [__application write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__actor_isset) {
    if (__actor != nil) {
      [outProtocol writeFieldBeginWithName: @"actor" type: TType_STRUCT fieldID: 6];
      [__actor write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEvents_ApplicationTokenRegenerated("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",userIdOfActor:"];
  [ms appendFormat: @"\"%@\"", __userIdOfActor];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @",applicationToken:"];
  [ms appendFormat: @"%@", __applicationToken];
  [ms appendString: @",application:"];
  [ms appendFormat: @"%@", __application];
  [ms appendString: @",actor:"];
  [ms appendFormat: @"%@", __actor];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEvents_ApplicationSentMessage

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.message = @"Application has sent an Alert";

#endif
  return self;
}

- (id) initWithMessage: (NSString *) message messageSentByApplication: (Aroma_Message *) messageSentByApplication applicationId: (AromaEvents_uuid) applicationId application: (AromaEvents_Application) application
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  __messageSentByApplication = [messageSentByApplication retain_stub];
  __messageSentByApplication_isset = YES;
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  __application = [application retain_stub];
  __application_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"messageSentByApplication"])
  {
    __messageSentByApplication = [[decoder decodeObjectForKey: @"messageSentByApplication"] retain_stub];
    __messageSentByApplication_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"application"])
  {
    __application = [[decoder decodeObjectForKey: @"application"] retain_stub];
    __application_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__messageSentByApplication_isset)
  {
    [encoder encodeObject: __messageSentByApplication forKey: @"messageSentByApplication"];
  }
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
  if (__application_isset)
  {
    [encoder encodeObject: __application forKey: @"application"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __messageSentByApplication_isset ? 2654435761 : 0;
  if (__messageSentByApplication_isset)
  {
    hash = (hash * 31) ^ [__messageSentByApplication hash];
  }
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  hash = (hash * 31) ^ __application_isset ? 2654435761 : 0;
  if (__application_isset)
  {
    hash = (hash * 31) ^ [__application hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEvents_ApplicationSentMessage class]]) {
    return NO;
  }
  AromaEvents_ApplicationSentMessage *other = (AromaEvents_ApplicationSentMessage *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__messageSentByApplication_isset != other->__messageSentByApplication_isset) ||
      (__messageSentByApplication_isset && ((__messageSentByApplication || other->__messageSentByApplication) && ![__messageSentByApplication isEqual:other->__messageSentByApplication]))) {
    return NO;
  }
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  if ((__application_isset != other->__application_isset) ||
      (__application_isset && ((__application || other->__application) && ![__application isEqual:other->__application]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [__messageSentByApplication release_stub];
  [__applicationId release_stub];
  [__application release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (Aroma_Message *) messageSentByApplication {
  return [[__messageSentByApplication retain_stub] autorelease_stub];
}

- (void) setMessageSentByApplication: (Aroma_Message *) messageSentByApplication {
  [messageSentByApplication retain_stub];
  [__messageSentByApplication release_stub];
  __messageSentByApplication = messageSentByApplication;
  __messageSentByApplication_isset = YES;
}

- (BOOL) messageSentByApplicationIsSet {
  return __messageSentByApplication_isset;
}

- (void) unsetMessageSentByApplication {
  [__messageSentByApplication release_stub];
  __messageSentByApplication = nil;
  __messageSentByApplication_isset = NO;
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (Aroma_Application *) application {
  return [[__application retain_stub] autorelease_stub];
}

- (void) setApplication: (Aroma_Application *) application {
  [application retain_stub];
  [__application release_stub];
  __application = application;
  __application_isset = YES;
}

- (BOOL) applicationIsSet {
  return __application_isset;
}

- (void) unsetApplication {
  [__application release_stub];
  __application = nil;
  __application_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Aroma_Message *fieldValue = [[Aroma_Message alloc] init];
          [fieldValue read: inProtocol];
          [self setMessageSentByApplication: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          Aroma_Application *fieldValue = [[Aroma_Application alloc] init];
          [fieldValue read: inProtocol];
          [self setApplication: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ApplicationSentMessage"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__messageSentByApplication_isset) {
    if (__messageSentByApplication != nil) {
      [outProtocol writeFieldBeginWithName: @"messageSentByApplication" type: TType_STRUCT fieldID: 2];
      [__messageSentByApplication write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__application_isset) {
    if (__application != nil) {
      [outProtocol writeFieldBeginWithName: @"application" type: TType_STRUCT fieldID: 4];
      [__application write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEvents_ApplicationSentMessage("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",messageSentByApplication:"];
  [ms appendFormat: @"%@", __messageSentByApplication];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @",application:"];
  [ms appendFormat: @"%@", __application];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEvents_ApplicationDeleted

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.message = @"Application has been deleted";

#endif
  return self;
}

- (id) initWithUserId: (AromaEvents_uuid) userId user: (AromaEvents_User) user applicationId: (AromaEvents_uuid) applicationId application: (AromaEvents_Application) application message: (NSString *) message
{
  self = [super init];
  __userId = [userId retain_stub];
  __userId_isset = YES;
  __user = [user retain_stub];
  __user_isset = YES;
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  __application = [application retain_stub];
  __application_isset = YES;
  __message = [message retain_stub];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [[decoder decodeObjectForKey: @"userId"] retain_stub];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"user"])
  {
    __user = [[decoder decodeObjectForKey: @"user"] retain_stub];
    __user_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"application"])
  {
    __application = [[decoder decodeObjectForKey: @"application"] retain_stub];
    __application_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__userId_isset)
  {
    [encoder encodeObject: __userId forKey: @"userId"];
  }
  if (__user_isset)
  {
    [encoder encodeObject: __user forKey: @"user"];
  }
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
  if (__application_isset)
  {
    [encoder encodeObject: __application forKey: @"application"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __userId_isset ? 2654435761 : 0;
  if (__userId_isset)
  {
    hash = (hash * 31) ^ [__userId hash];
  }
  hash = (hash * 31) ^ __user_isset ? 2654435761 : 0;
  if (__user_isset)
  {
    hash = (hash * 31) ^ [__user hash];
  }
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  hash = (hash * 31) ^ __application_isset ? 2654435761 : 0;
  if (__application_isset)
  {
    hash = (hash * 31) ^ [__application hash];
  }
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEvents_ApplicationDeleted class]]) {
    return NO;
  }
  AromaEvents_ApplicationDeleted *other = (AromaEvents_ApplicationDeleted *)anObject;
  if ((__userId_isset != other->__userId_isset) ||
      (__userId_isset && ((__userId || other->__userId) && ![__userId isEqual:other->__userId]))) {
    return NO;
  }
  if ((__user_isset != other->__user_isset) ||
      (__user_isset && ((__user || other->__user) && ![__user isEqual:other->__user]))) {
    return NO;
  }
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  if ((__application_isset != other->__application_isset) ||
      (__application_isset && ((__application || other->__application) && ![__application isEqual:other->__application]))) {
    return NO;
  }
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__userId release_stub];
  [__user release_stub];
  [__applicationId release_stub];
  [__application release_stub];
  [__message release_stub];
  [super dealloc_stub];
}

- (NSString *) userId {
  return [[__userId retain_stub] autorelease_stub];
}

- (void) setUserId: (NSString *) userId {
  [userId retain_stub];
  [__userId release_stub];
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  [__userId release_stub];
  __userId = nil;
  __userId_isset = NO;
}

- (Aroma_User *) user {
  return [[__user retain_stub] autorelease_stub];
}

- (void) setUser: (Aroma_User *) user {
  [user retain_stub];
  [__user release_stub];
  __user = user;
  __user_isset = YES;
}

- (BOOL) userIsSet {
  return __user_isset;
}

- (void) unsetUser {
  [__user release_stub];
  __user = nil;
  __user_isset = NO;
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (Aroma_Application *) application {
  return [[__application retain_stub] autorelease_stub];
}

- (void) setApplication: (Aroma_Application *) application {
  [application retain_stub];
  [__application release_stub];
  __application = application;
  __application_isset = YES;
}

- (BOOL) applicationIsSet {
  return __application_isset;
}

- (void) unsetApplication {
  [__application release_stub];
  __application = nil;
  __application_isset = NO;
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Aroma_User *fieldValue = [[Aroma_User alloc] init];
          [fieldValue read: inProtocol];
          [self setUser: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          Aroma_Application *fieldValue = [[Aroma_Application alloc] init];
          [fieldValue read: inProtocol];
          [self setApplication: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ApplicationDeleted"];
  if (__userId_isset) {
    if (__userId != nil) {
      [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __userId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_isset) {
    if (__user != nil) {
      [outProtocol writeFieldBeginWithName: @"user" type: TType_STRUCT fieldID: 2];
      [__user write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__application_isset) {
    if (__application != nil) {
      [outProtocol writeFieldBeginWithName: @"application" type: TType_STRUCT fieldID: 4];
      [__application write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEvents_ApplicationDeleted("];
  [ms appendString: @"userId:"];
  [ms appendFormat: @"\"%@\"", __userId];
  [ms appendString: @",user:"];
  [ms appendFormat: @"%@", __user];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @",application:"];
  [ms appendFormat: @"%@", __application];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEvents_ApplicationFollowed

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.message = @"Application Followed";

#endif
  return self;
}

- (id) initWithUserId: (AromaEvents_uuid) userId applicationId: (AromaEvents_uuid) applicationId user: (AromaEvents_User) user application: (AromaEvents_Application) application message: (NSString *) message
{
  self = [super init];
  __userId = [userId retain_stub];
  __userId_isset = YES;
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  __user = [user retain_stub];
  __user_isset = YES;
  __application = [application retain_stub];
  __application_isset = YES;
  __message = [message retain_stub];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [[decoder decodeObjectForKey: @"userId"] retain_stub];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"user"])
  {
    __user = [[decoder decodeObjectForKey: @"user"] retain_stub];
    __user_isset = YES;
  }
  if ([decoder containsValueForKey: @"application"])
  {
    __application = [[decoder decodeObjectForKey: @"application"] retain_stub];
    __application_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__userId_isset)
  {
    [encoder encodeObject: __userId forKey: @"userId"];
  }
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
  if (__user_isset)
  {
    [encoder encodeObject: __user forKey: @"user"];
  }
  if (__application_isset)
  {
    [encoder encodeObject: __application forKey: @"application"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __userId_isset ? 2654435761 : 0;
  if (__userId_isset)
  {
    hash = (hash * 31) ^ [__userId hash];
  }
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  hash = (hash * 31) ^ __user_isset ? 2654435761 : 0;
  if (__user_isset)
  {
    hash = (hash * 31) ^ [__user hash];
  }
  hash = (hash * 31) ^ __application_isset ? 2654435761 : 0;
  if (__application_isset)
  {
    hash = (hash * 31) ^ [__application hash];
  }
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEvents_ApplicationFollowed class]]) {
    return NO;
  }
  AromaEvents_ApplicationFollowed *other = (AromaEvents_ApplicationFollowed *)anObject;
  if ((__userId_isset != other->__userId_isset) ||
      (__userId_isset && ((__userId || other->__userId) && ![__userId isEqual:other->__userId]))) {
    return NO;
  }
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  if ((__user_isset != other->__user_isset) ||
      (__user_isset && ((__user || other->__user) && ![__user isEqual:other->__user]))) {
    return NO;
  }
  if ((__application_isset != other->__application_isset) ||
      (__application_isset && ((__application || other->__application) && ![__application isEqual:other->__application]))) {
    return NO;
  }
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__userId release_stub];
  [__applicationId release_stub];
  [__user release_stub];
  [__application release_stub];
  [__message release_stub];
  [super dealloc_stub];
}

- (NSString *) userId {
  return [[__userId retain_stub] autorelease_stub];
}

- (void) setUserId: (NSString *) userId {
  [userId retain_stub];
  [__userId release_stub];
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  [__userId release_stub];
  __userId = nil;
  __userId_isset = NO;
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (Aroma_User *) user {
  return [[__user retain_stub] autorelease_stub];
}

- (void) setUser: (Aroma_User *) user {
  [user retain_stub];
  [__user release_stub];
  __user = user;
  __user_isset = YES;
}

- (BOOL) userIsSet {
  return __user_isset;
}

- (void) unsetUser {
  [__user release_stub];
  __user = nil;
  __user_isset = NO;
}

- (Aroma_Application *) application {
  return [[__application retain_stub] autorelease_stub];
}

- (void) setApplication: (Aroma_Application *) application {
  [application retain_stub];
  [__application release_stub];
  __application = application;
  __application_isset = YES;
}

- (BOOL) applicationIsSet {
  return __application_isset;
}

- (void) unsetApplication {
  [__application release_stub];
  __application = nil;
  __application_isset = NO;
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          Aroma_User *fieldValue = [[Aroma_User alloc] init];
          [fieldValue read: inProtocol];
          [self setUser: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          Aroma_Application *fieldValue = [[Aroma_Application alloc] init];
          [fieldValue read: inProtocol];
          [self setApplication: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ApplicationFollowed"];
  if (__userId_isset) {
    if (__userId != nil) {
      [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __userId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_isset) {
    if (__user != nil) {
      [outProtocol writeFieldBeginWithName: @"user" type: TType_STRUCT fieldID: 3];
      [__user write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__application_isset) {
    if (__application != nil) {
      [outProtocol writeFieldBeginWithName: @"application" type: TType_STRUCT fieldID: 4];
      [__application write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEvents_ApplicationFollowed("];
  [ms appendString: @"userId:"];
  [ms appendFormat: @"\"%@\"", __userId];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @",user:"];
  [ms appendFormat: @"%@", __user];
  [ms appendString: @",application:"];
  [ms appendFormat: @"%@", __application];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEvents_HealthCheckFailed

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.message = @"Application failed a Health Check";

#endif
  return self;
}

- (id) initWithMessage: (NSString *) message hostname: (NSString *) hostname applicationId: (AromaEvents_uuid) applicationId applicationName: (NSString *) applicationName
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  __hostname = [hostname retain_stub];
  __hostname_isset = YES;
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  __applicationName = [applicationName retain_stub];
  __applicationName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"hostname"])
  {
    __hostname = [[decoder decodeObjectForKey: @"hostname"] retain_stub];
    __hostname_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationName"])
  {
    __applicationName = [[decoder decodeObjectForKey: @"applicationName"] retain_stub];
    __applicationName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__hostname_isset)
  {
    [encoder encodeObject: __hostname forKey: @"hostname"];
  }
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
  if (__applicationName_isset)
  {
    [encoder encodeObject: __applicationName forKey: @"applicationName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __hostname_isset ? 2654435761 : 0;
  if (__hostname_isset)
  {
    hash = (hash * 31) ^ [__hostname hash];
  }
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  hash = (hash * 31) ^ __applicationName_isset ? 2654435761 : 0;
  if (__applicationName_isset)
  {
    hash = (hash * 31) ^ [__applicationName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEvents_HealthCheckFailed class]]) {
    return NO;
  }
  AromaEvents_HealthCheckFailed *other = (AromaEvents_HealthCheckFailed *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__hostname_isset != other->__hostname_isset) ||
      (__hostname_isset && ((__hostname || other->__hostname) && ![__hostname isEqual:other->__hostname]))) {
    return NO;
  }
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  if ((__applicationName_isset != other->__applicationName_isset) ||
      (__applicationName_isset && ((__applicationName || other->__applicationName) && ![__applicationName isEqual:other->__applicationName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [__hostname release_stub];
  [__applicationId release_stub];
  [__applicationName release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (NSString *) hostname {
  return [[__hostname retain_stub] autorelease_stub];
}

- (void) setHostname: (NSString *) hostname {
  [hostname retain_stub];
  [__hostname release_stub];
  __hostname = hostname;
  __hostname_isset = YES;
}

- (BOOL) hostnameIsSet {
  return __hostname_isset;
}

- (void) unsetHostname {
  [__hostname release_stub];
  __hostname = nil;
  __hostname_isset = NO;
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (NSString *) applicationName {
  return [[__applicationName retain_stub] autorelease_stub];
}

- (void) setApplicationName: (NSString *) applicationName {
  [applicationName retain_stub];
  [__applicationName release_stub];
  __applicationName = applicationName;
  __applicationName_isset = YES;
}

- (BOOL) applicationNameIsSet {
  return __applicationName_isset;
}

- (void) unsetApplicationName {
  [__applicationName release_stub];
  __applicationName = nil;
  __applicationName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHostname: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HealthCheckFailed"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hostname_isset) {
    if (__hostname != nil) {
      [outProtocol writeFieldBeginWithName: @"hostname" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __hostname];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationName_isset) {
    if (__applicationName != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __applicationName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEvents_HealthCheckFailed("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",hostname:"];
  [ms appendFormat: @"\"%@\"", __hostname];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @",applicationName:"];
  [ms appendFormat: @"\"%@\"", __applicationName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEvents_HealthCheckBackToNormal

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.message = @"Application's Health is back to normal";

#endif
  return self;
}

- (id) initWithMessage: (NSString *) message applicationId: (AromaEvents_uuid) applicationId applicationName: (NSString *) applicationName
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  __applicationName = [applicationName retain_stub];
  __applicationName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationName"])
  {
    __applicationName = [[decoder decodeObjectForKey: @"applicationName"] retain_stub];
    __applicationName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
  if (__applicationName_isset)
  {
    [encoder encodeObject: __applicationName forKey: @"applicationName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  hash = (hash * 31) ^ __applicationName_isset ? 2654435761 : 0;
  if (__applicationName_isset)
  {
    hash = (hash * 31) ^ [__applicationName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEvents_HealthCheckBackToNormal class]]) {
    return NO;
  }
  AromaEvents_HealthCheckBackToNormal *other = (AromaEvents_HealthCheckBackToNormal *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  if ((__applicationName_isset != other->__applicationName_isset) ||
      (__applicationName_isset && ((__applicationName || other->__applicationName) && ![__applicationName isEqual:other->__applicationName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [__applicationId release_stub];
  [__applicationName release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (NSString *) applicationName {
  return [[__applicationName retain_stub] autorelease_stub];
}

- (void) setApplicationName: (NSString *) applicationName {
  [applicationName retain_stub];
  [__applicationName release_stub];
  __applicationName = applicationName;
  __applicationName_isset = YES;
}

- (BOOL) applicationNameIsSet {
  return __applicationName_isset;
}

- (void) unsetApplicationName {
  [__applicationName release_stub];
  __applicationName = nil;
  __applicationName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HealthCheckBackToNormal"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationName_isset) {
    if (__applicationName != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __applicationName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEvents_HealthCheckBackToNormal("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @",applicationName:"];
  [ms appendFormat: @"\"%@\"", __applicationName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEvents_OwnerAdded

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithExistingOwnerId: (AromaEvents_uuid) existingOwnerId newOwnerId: (AromaEvents_uuid) newOwnerId existingOwner: (AromaEvents_User) existingOwner newOwner: (AromaEvents_User) newOwner
{
  self = [super init];
  __existingOwnerId = [existingOwnerId retain_stub];
  __existingOwnerId_isset = YES;
  __newOwnerId = [newOwnerId retain_stub];
  __newOwnerId_isset = YES;
  __existingOwner = [existingOwner retain_stub];
  __existingOwner_isset = YES;
  __newOwner = [newOwner retain_stub];
  __newOwner_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"existingOwnerId"])
  {
    __existingOwnerId = [[decoder decodeObjectForKey: @"existingOwnerId"] retain_stub];
    __existingOwnerId_isset = YES;
  }
  if ([decoder containsValueForKey: @"newOwnerId"])
  {
    __newOwnerId = [[decoder decodeObjectForKey: @"newOwnerId"] retain_stub];
    __newOwnerId_isset = YES;
  }
  if ([decoder containsValueForKey: @"existingOwner"])
  {
    __existingOwner = [[decoder decodeObjectForKey: @"existingOwner"] retain_stub];
    __existingOwner_isset = YES;
  }
  if ([decoder containsValueForKey: @"newOwner"])
  {
    __newOwner = [[decoder decodeObjectForKey: @"newOwner"] retain_stub];
    __newOwner_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__existingOwnerId_isset)
  {
    [encoder encodeObject: __existingOwnerId forKey: @"existingOwnerId"];
  }
  if (__newOwnerId_isset)
  {
    [encoder encodeObject: __newOwnerId forKey: @"newOwnerId"];
  }
  if (__existingOwner_isset)
  {
    [encoder encodeObject: __existingOwner forKey: @"existingOwner"];
  }
  if (__newOwner_isset)
  {
    [encoder encodeObject: __newOwner forKey: @"newOwner"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __existingOwnerId_isset ? 2654435761 : 0;
  if (__existingOwnerId_isset)
  {
    hash = (hash * 31) ^ [__existingOwnerId hash];
  }
  hash = (hash * 31) ^ __newOwnerId_isset ? 2654435761 : 0;
  if (__newOwnerId_isset)
  {
    hash = (hash * 31) ^ [__newOwnerId hash];
  }
  hash = (hash * 31) ^ __existingOwner_isset ? 2654435761 : 0;
  if (__existingOwner_isset)
  {
    hash = (hash * 31) ^ [__existingOwner hash];
  }
  hash = (hash * 31) ^ __newOwner_isset ? 2654435761 : 0;
  if (__newOwner_isset)
  {
    hash = (hash * 31) ^ [__newOwner hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEvents_OwnerAdded class]]) {
    return NO;
  }
  AromaEvents_OwnerAdded *other = (AromaEvents_OwnerAdded *)anObject;
  if ((__existingOwnerId_isset != other->__existingOwnerId_isset) ||
      (__existingOwnerId_isset && ((__existingOwnerId || other->__existingOwnerId) && ![__existingOwnerId isEqual:other->__existingOwnerId]))) {
    return NO;
  }
  if ((__newOwnerId_isset != other->__newOwnerId_isset) ||
      (__newOwnerId_isset && ((__newOwnerId || other->__newOwnerId) && ![__newOwnerId isEqual:other->__newOwnerId]))) {
    return NO;
  }
  if ((__existingOwner_isset != other->__existingOwner_isset) ||
      (__existingOwner_isset && ((__existingOwner || other->__existingOwner) && ![__existingOwner isEqual:other->__existingOwner]))) {
    return NO;
  }
  if ((__newOwner_isset != other->__newOwner_isset) ||
      (__newOwner_isset && ((__newOwner || other->__newOwner) && ![__newOwner isEqual:other->__newOwner]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__existingOwnerId release_stub];
  [__newOwnerId release_stub];
  [__existingOwner release_stub];
  [__newOwner release_stub];
  [super dealloc_stub];
}

- (NSString *) existingOwnerId {
  return [[__existingOwnerId retain_stub] autorelease_stub];
}

- (void) setExistingOwnerId: (NSString *) existingOwnerId {
  [existingOwnerId retain_stub];
  [__existingOwnerId release_stub];
  __existingOwnerId = existingOwnerId;
  __existingOwnerId_isset = YES;
}

- (BOOL) existingOwnerIdIsSet {
  return __existingOwnerId_isset;
}

- (void) unsetExistingOwnerId {
  [__existingOwnerId release_stub];
  __existingOwnerId = nil;
  __existingOwnerId_isset = NO;
}

- (NSString *) newOwnerId {
  return [[__newOwnerId retain_stub] autorelease_stub];
}

- (void) setNewOwnerId: (NSString *) newOwnerId {
  [newOwnerId retain_stub];
  [__newOwnerId release_stub];
  __newOwnerId = newOwnerId;
  __newOwnerId_isset = YES;
}

- (BOOL) newOwnerIdIsSet {
  return __newOwnerId_isset;
}

- (void) unsetNewOwnerId {
  [__newOwnerId release_stub];
  __newOwnerId = nil;
  __newOwnerId_isset = NO;
}

- (Aroma_User *) existingOwner {
  return [[__existingOwner retain_stub] autorelease_stub];
}

- (void) setExistingOwner: (Aroma_User *) existingOwner {
  [existingOwner retain_stub];
  [__existingOwner release_stub];
  __existingOwner = existingOwner;
  __existingOwner_isset = YES;
}

- (BOOL) existingOwnerIsSet {
  return __existingOwner_isset;
}

- (void) unsetExistingOwner {
  [__existingOwner release_stub];
  __existingOwner = nil;
  __existingOwner_isset = NO;
}

- (Aroma_User *) newOwner {
  return [[__newOwner retain_stub] autorelease_stub];
}

- (void) setNewOwner: (Aroma_User *) newOwner {
  [newOwner retain_stub];
  [__newOwner release_stub];
  __newOwner = newOwner;
  __newOwner_isset = YES;
}

- (BOOL) newOwnerIsSet {
  return __newOwner_isset;
}

- (void) unsetNewOwner {
  [__newOwner release_stub];
  __newOwner = nil;
  __newOwner_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExistingOwnerId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNewOwnerId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          Aroma_User *fieldValue = [[Aroma_User alloc] init];
          [fieldValue read: inProtocol];
          [self setExistingOwner: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          Aroma_User *fieldValue = [[Aroma_User alloc] init];
          [fieldValue read: inProtocol];
          [self setNewOwner: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"OwnerAdded"];
  if (__existingOwnerId_isset) {
    if (__existingOwnerId != nil) {
      [outProtocol writeFieldBeginWithName: @"existingOwnerId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __existingOwnerId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__newOwnerId_isset) {
    if (__newOwnerId != nil) {
      [outProtocol writeFieldBeginWithName: @"newOwnerId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __newOwnerId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__existingOwner_isset) {
    if (__existingOwner != nil) {
      [outProtocol writeFieldBeginWithName: @"existingOwner" type: TType_STRUCT fieldID: 3];
      [__existingOwner write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__newOwner_isset) {
    if (__newOwner != nil) {
      [outProtocol writeFieldBeginWithName: @"newOwner" type: TType_STRUCT fieldID: 4];
      [__newOwner write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEvents_OwnerAdded("];
  [ms appendString: @"existingOwnerId:"];
  [ms appendFormat: @"\"%@\"", __existingOwnerId];
  [ms appendString: @",newOwnerId:"];
  [ms appendFormat: @"\"%@\"", __newOwnerId];
  [ms appendString: @",existingOwner:"];
  [ms appendFormat: @"%@", __existingOwner];
  [ms appendString: @",newOwner:"];
  [ms appendFormat: @"%@", __newOwner];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEvents_OwnerApprovedRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.message = @"Application Owner approved your request";

#endif
  return self;
}

- (id) initWithMessage: (NSString *) message applicationId: (AromaEvents_uuid) applicationId applicationName: (NSString *) applicationName owner: (AromaEvents_User) owner
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  __applicationName = [applicationName retain_stub];
  __applicationName_isset = YES;
  __owner = [owner retain_stub];
  __owner_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationName"])
  {
    __applicationName = [[decoder decodeObjectForKey: @"applicationName"] retain_stub];
    __applicationName_isset = YES;
  }
  if ([decoder containsValueForKey: @"owner"])
  {
    __owner = [[decoder decodeObjectForKey: @"owner"] retain_stub];
    __owner_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
  if (__applicationName_isset)
  {
    [encoder encodeObject: __applicationName forKey: @"applicationName"];
  }
  if (__owner_isset)
  {
    [encoder encodeObject: __owner forKey: @"owner"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  hash = (hash * 31) ^ __applicationName_isset ? 2654435761 : 0;
  if (__applicationName_isset)
  {
    hash = (hash * 31) ^ [__applicationName hash];
  }
  hash = (hash * 31) ^ __owner_isset ? 2654435761 : 0;
  if (__owner_isset)
  {
    hash = (hash * 31) ^ [__owner hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEvents_OwnerApprovedRequest class]]) {
    return NO;
  }
  AromaEvents_OwnerApprovedRequest *other = (AromaEvents_OwnerApprovedRequest *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  if ((__applicationName_isset != other->__applicationName_isset) ||
      (__applicationName_isset && ((__applicationName || other->__applicationName) && ![__applicationName isEqual:other->__applicationName]))) {
    return NO;
  }
  if ((__owner_isset != other->__owner_isset) ||
      (__owner_isset && ((__owner || other->__owner) && ![__owner isEqual:other->__owner]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [__applicationId release_stub];
  [__applicationName release_stub];
  [__owner release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (NSString *) applicationName {
  return [[__applicationName retain_stub] autorelease_stub];
}

- (void) setApplicationName: (NSString *) applicationName {
  [applicationName retain_stub];
  [__applicationName release_stub];
  __applicationName = applicationName;
  __applicationName_isset = YES;
}

- (BOOL) applicationNameIsSet {
  return __applicationName_isset;
}

- (void) unsetApplicationName {
  [__applicationName release_stub];
  __applicationName = nil;
  __applicationName_isset = NO;
}

- (Aroma_User *) owner {
  return [[__owner retain_stub] autorelease_stub];
}

- (void) setOwner: (Aroma_User *) owner {
  [owner retain_stub];
  [__owner release_stub];
  __owner = owner;
  __owner_isset = YES;
}

- (BOOL) ownerIsSet {
  return __owner_isset;
}

- (void) unsetOwner {
  [__owner release_stub];
  __owner = nil;
  __owner_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          Aroma_User *fieldValue = [[Aroma_User alloc] init];
          [fieldValue read: inProtocol];
          [self setOwner: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"OwnerApprovedRequest"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationName_isset) {
    if (__applicationName != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __applicationName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__owner_isset) {
    if (__owner != nil) {
      [outProtocol writeFieldBeginWithName: @"owner" type: TType_STRUCT fieldID: 4];
      [__owner write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEvents_OwnerApprovedRequest("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @",applicationName:"];
  [ms appendFormat: @"\"%@\"", __applicationName];
  [ms appendString: @",owner:"];
  [ms appendFormat: @"%@", __owner];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEvents_UserFollowedApplication

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.message = @"Someone followed your Application";

#endif
  return self;
}

- (id) initWithMessage: (NSString *) message applicationId: (AromaEvents_uuid) applicationId follower: (AromaEvents_User) follower owner: (AromaEvents_User) owner
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  __follower = [follower retain_stub];
  __follower_isset = YES;
  __owner = [owner retain_stub];
  __owner_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"follower"])
  {
    __follower = [[decoder decodeObjectForKey: @"follower"] retain_stub];
    __follower_isset = YES;
  }
  if ([decoder containsValueForKey: @"owner"])
  {
    __owner = [[decoder decodeObjectForKey: @"owner"] retain_stub];
    __owner_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
  if (__follower_isset)
  {
    [encoder encodeObject: __follower forKey: @"follower"];
  }
  if (__owner_isset)
  {
    [encoder encodeObject: __owner forKey: @"owner"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  hash = (hash * 31) ^ __follower_isset ? 2654435761 : 0;
  if (__follower_isset)
  {
    hash = (hash * 31) ^ [__follower hash];
  }
  hash = (hash * 31) ^ __owner_isset ? 2654435761 : 0;
  if (__owner_isset)
  {
    hash = (hash * 31) ^ [__owner hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEvents_UserFollowedApplication class]]) {
    return NO;
  }
  AromaEvents_UserFollowedApplication *other = (AromaEvents_UserFollowedApplication *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  if ((__follower_isset != other->__follower_isset) ||
      (__follower_isset && ((__follower || other->__follower) && ![__follower isEqual:other->__follower]))) {
    return NO;
  }
  if ((__owner_isset != other->__owner_isset) ||
      (__owner_isset && ((__owner || other->__owner) && ![__owner isEqual:other->__owner]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [__applicationId release_stub];
  [__follower release_stub];
  [__owner release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (Aroma_User *) follower {
  return [[__follower retain_stub] autorelease_stub];
}

- (void) setFollower: (Aroma_User *) follower {
  [follower retain_stub];
  [__follower release_stub];
  __follower = follower;
  __follower_isset = YES;
}

- (BOOL) followerIsSet {
  return __follower_isset;
}

- (void) unsetFollower {
  [__follower release_stub];
  __follower = nil;
  __follower_isset = NO;
}

- (Aroma_User *) owner {
  return [[__owner retain_stub] autorelease_stub];
}

- (void) setOwner: (Aroma_User *) owner {
  [owner retain_stub];
  [__owner release_stub];
  __owner = owner;
  __owner_isset = YES;
}

- (BOOL) ownerIsSet {
  return __owner_isset;
}

- (void) unsetOwner {
  [__owner release_stub];
  __owner = nil;
  __owner_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          Aroma_User *fieldValue = [[Aroma_User alloc] init];
          [fieldValue read: inProtocol];
          [self setFollower: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          Aroma_User *fieldValue = [[Aroma_User alloc] init];
          [fieldValue read: inProtocol];
          [self setOwner: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserFollowedApplication"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__follower_isset) {
    if (__follower != nil) {
      [outProtocol writeFieldBeginWithName: @"follower" type: TType_STRUCT fieldID: 3];
      [__follower write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__owner_isset) {
    if (__owner != nil) {
      [outProtocol writeFieldBeginWithName: @"owner" type: TType_STRUCT fieldID: 4];
      [__owner write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEvents_UserFollowedApplication("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @",follower:"];
  [ms appendFormat: @"%@", __follower];
  [ms appendString: @",owner:"];
  [ms appendFormat: @"%@", __owner];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEvents_GeneralEvent

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithApplicationId: (AromaEvents_uuid) applicationId applicationName: (NSString *) applicationName message: (NSString *) message timestamp: (AromaEvents_timestamp) timestamp
{
  self = [super init];
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  __applicationName = [applicationName retain_stub];
  __applicationName_isset = YES;
  __message = [message retain_stub];
  __message_isset = YES;
  __timestamp = timestamp;
  __timestamp_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationName"])
  {
    __applicationName = [[decoder decodeObjectForKey: @"applicationName"] retain_stub];
    __applicationName_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"timestamp"])
  {
    __timestamp = [decoder decodeInt64ForKey: @"timestamp"];
    __timestamp_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
  if (__applicationName_isset)
  {
    [encoder encodeObject: __applicationName forKey: @"applicationName"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__timestamp_isset)
  {
    [encoder encodeInt64: __timestamp forKey: @"timestamp"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  hash = (hash * 31) ^ __applicationName_isset ? 2654435761 : 0;
  if (__applicationName_isset)
  {
    hash = (hash * 31) ^ [__applicationName hash];
  }
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __timestamp_isset ? 2654435761 : 0;
  if (__timestamp_isset)
  {
    hash = (hash * 31) ^ [@(__timestamp) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEvents_GeneralEvent class]]) {
    return NO;
  }
  AromaEvents_GeneralEvent *other = (AromaEvents_GeneralEvent *)anObject;
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  if ((__applicationName_isset != other->__applicationName_isset) ||
      (__applicationName_isset && ((__applicationName || other->__applicationName) && ![__applicationName isEqual:other->__applicationName]))) {
    return NO;
  }
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__timestamp_isset != other->__timestamp_isset) ||
      (__timestamp_isset && (__timestamp != other->__timestamp))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__applicationId release_stub];
  [__applicationName release_stub];
  [__message release_stub];
  [super dealloc_stub];
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (NSString *) applicationName {
  return [[__applicationName retain_stub] autorelease_stub];
}

- (void) setApplicationName: (NSString *) applicationName {
  [applicationName retain_stub];
  [__applicationName release_stub];
  __applicationName = applicationName;
  __applicationName_isset = YES;
}

- (BOOL) applicationNameIsSet {
  return __applicationName_isset;
}

- (void) unsetApplicationName {
  [__applicationName release_stub];
  __applicationName = nil;
  __applicationName_isset = NO;
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (int64_t) timestamp {
  return __timestamp;
}

- (void) setTimestamp: (int64_t) timestamp {
  __timestamp = timestamp;
  __timestamp_isset = YES;
}

- (BOOL) timestampIsSet {
  return __timestamp_isset;
}

- (void) unsetTimestamp {
  __timestamp_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GeneralEvent"];
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationName_isset) {
    if (__applicationName != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __applicationName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__timestamp_isset) {
    [outProtocol writeFieldBeginWithName: @"timestamp" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __timestamp];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEvents_GeneralEvent("];
  [ms appendString: @"applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @",applicationName:"];
  [ms appendFormat: @"\"%@\"", __applicationName];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",timestamp:"];
  [ms appendFormat: @"%qi", __timestamp];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEvents_EventType

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithApplicationMessageDeleted: (AromaEvents_ApplicationMessagesDeleted *) applicationMessageDeleted healthCheckFailed: (AromaEvents_HealthCheckFailed *) healthCheckFailed healthCheckBackToNormal: (AromaEvents_HealthCheckBackToNormal *) healthCheckBackToNormal applicationFollowed: (AromaEvents_ApplicationFollowed *) applicationFollowed applicationDeleted: (AromaEvents_ApplicationDeleted *) applicationDeleted applicationTokenRenewed: (AromaEvents_ApplicationTokenRenewed *) applicationTokenRenewed applicationTokenRegenerated: (AromaEvents_ApplicationTokenRegenerated *) applicationTokenRegenerated applicationSentMessage: (AromaEvents_ApplicationSentMessage *) applicationSentMessage ownerApprovedRequest: (AromaEvents_OwnerApprovedRequest *) ownerApprovedRequest ownerAdded: (AromaEvents_OwnerAdded *) ownerAdded generalEvent: (AromaEvents_GeneralEvent *) generalEvent userFollowedApplication: (AromaEvents_UserFollowedApplication *) userFollowedApplication
{
  self = [super init];
  __applicationMessageDeleted = [applicationMessageDeleted retain_stub];
  __applicationMessageDeleted_isset = YES;
  __healthCheckFailed = [healthCheckFailed retain_stub];
  __healthCheckFailed_isset = YES;
  __healthCheckBackToNormal = [healthCheckBackToNormal retain_stub];
  __healthCheckBackToNormal_isset = YES;
  __applicationFollowed = [applicationFollowed retain_stub];
  __applicationFollowed_isset = YES;
  __applicationDeleted = [applicationDeleted retain_stub];
  __applicationDeleted_isset = YES;
  __applicationTokenRenewed = [applicationTokenRenewed retain_stub];
  __applicationTokenRenewed_isset = YES;
  __applicationTokenRegenerated = [applicationTokenRegenerated retain_stub];
  __applicationTokenRegenerated_isset = YES;
  __applicationSentMessage = [applicationSentMessage retain_stub];
  __applicationSentMessage_isset = YES;
  __ownerApprovedRequest = [ownerApprovedRequest retain_stub];
  __ownerApprovedRequest_isset = YES;
  __ownerAdded = [ownerAdded retain_stub];
  __ownerAdded_isset = YES;
  __generalEvent = [generalEvent retain_stub];
  __generalEvent_isset = YES;
  __userFollowedApplication = [userFollowedApplication retain_stub];
  __userFollowedApplication_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"applicationMessageDeleted"])
  {
    __applicationMessageDeleted = [[decoder decodeObjectForKey: @"applicationMessageDeleted"] retain_stub];
    __applicationMessageDeleted_isset = YES;
  }
  if ([decoder containsValueForKey: @"healthCheckFailed"])
  {
    __healthCheckFailed = [[decoder decodeObjectForKey: @"healthCheckFailed"] retain_stub];
    __healthCheckFailed_isset = YES;
  }
  if ([decoder containsValueForKey: @"healthCheckBackToNormal"])
  {
    __healthCheckBackToNormal = [[decoder decodeObjectForKey: @"healthCheckBackToNormal"] retain_stub];
    __healthCheckBackToNormal_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationFollowed"])
  {
    __applicationFollowed = [[decoder decodeObjectForKey: @"applicationFollowed"] retain_stub];
    __applicationFollowed_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationDeleted"])
  {
    __applicationDeleted = [[decoder decodeObjectForKey: @"applicationDeleted"] retain_stub];
    __applicationDeleted_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationTokenRenewed"])
  {
    __applicationTokenRenewed = [[decoder decodeObjectForKey: @"applicationTokenRenewed"] retain_stub];
    __applicationTokenRenewed_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationTokenRegenerated"])
  {
    __applicationTokenRegenerated = [[decoder decodeObjectForKey: @"applicationTokenRegenerated"] retain_stub];
    __applicationTokenRegenerated_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationSentMessage"])
  {
    __applicationSentMessage = [[decoder decodeObjectForKey: @"applicationSentMessage"] retain_stub];
    __applicationSentMessage_isset = YES;
  }
  if ([decoder containsValueForKey: @"ownerApprovedRequest"])
  {
    __ownerApprovedRequest = [[decoder decodeObjectForKey: @"ownerApprovedRequest"] retain_stub];
    __ownerApprovedRequest_isset = YES;
  }
  if ([decoder containsValueForKey: @"ownerAdded"])
  {
    __ownerAdded = [[decoder decodeObjectForKey: @"ownerAdded"] retain_stub];
    __ownerAdded_isset = YES;
  }
  if ([decoder containsValueForKey: @"generalEvent"])
  {
    __generalEvent = [[decoder decodeObjectForKey: @"generalEvent"] retain_stub];
    __generalEvent_isset = YES;
  }
  if ([decoder containsValueForKey: @"userFollowedApplication"])
  {
    __userFollowedApplication = [[decoder decodeObjectForKey: @"userFollowedApplication"] retain_stub];
    __userFollowedApplication_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__applicationMessageDeleted_isset)
  {
    [encoder encodeObject: __applicationMessageDeleted forKey: @"applicationMessageDeleted"];
  }
  if (__healthCheckFailed_isset)
  {
    [encoder encodeObject: __healthCheckFailed forKey: @"healthCheckFailed"];
  }
  if (__healthCheckBackToNormal_isset)
  {
    [encoder encodeObject: __healthCheckBackToNormal forKey: @"healthCheckBackToNormal"];
  }
  if (__applicationFollowed_isset)
  {
    [encoder encodeObject: __applicationFollowed forKey: @"applicationFollowed"];
  }
  if (__applicationDeleted_isset)
  {
    [encoder encodeObject: __applicationDeleted forKey: @"applicationDeleted"];
  }
  if (__applicationTokenRenewed_isset)
  {
    [encoder encodeObject: __applicationTokenRenewed forKey: @"applicationTokenRenewed"];
  }
  if (__applicationTokenRegenerated_isset)
  {
    [encoder encodeObject: __applicationTokenRegenerated forKey: @"applicationTokenRegenerated"];
  }
  if (__applicationSentMessage_isset)
  {
    [encoder encodeObject: __applicationSentMessage forKey: @"applicationSentMessage"];
  }
  if (__ownerApprovedRequest_isset)
  {
    [encoder encodeObject: __ownerApprovedRequest forKey: @"ownerApprovedRequest"];
  }
  if (__ownerAdded_isset)
  {
    [encoder encodeObject: __ownerAdded forKey: @"ownerAdded"];
  }
  if (__generalEvent_isset)
  {
    [encoder encodeObject: __generalEvent forKey: @"generalEvent"];
  }
  if (__userFollowedApplication_isset)
  {
    [encoder encodeObject: __userFollowedApplication forKey: @"userFollowedApplication"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __applicationMessageDeleted_isset ? 2654435761 : 0;
  if (__applicationMessageDeleted_isset)
  {
    hash = (hash * 31) ^ [__applicationMessageDeleted hash];
  }
  hash = (hash * 31) ^ __healthCheckFailed_isset ? 2654435761 : 0;
  if (__healthCheckFailed_isset)
  {
    hash = (hash * 31) ^ [__healthCheckFailed hash];
  }
  hash = (hash * 31) ^ __healthCheckBackToNormal_isset ? 2654435761 : 0;
  if (__healthCheckBackToNormal_isset)
  {
    hash = (hash * 31) ^ [__healthCheckBackToNormal hash];
  }
  hash = (hash * 31) ^ __applicationFollowed_isset ? 2654435761 : 0;
  if (__applicationFollowed_isset)
  {
    hash = (hash * 31) ^ [__applicationFollowed hash];
  }
  hash = (hash * 31) ^ __applicationDeleted_isset ? 2654435761 : 0;
  if (__applicationDeleted_isset)
  {
    hash = (hash * 31) ^ [__applicationDeleted hash];
  }
  hash = (hash * 31) ^ __applicationTokenRenewed_isset ? 2654435761 : 0;
  if (__applicationTokenRenewed_isset)
  {
    hash = (hash * 31) ^ [__applicationTokenRenewed hash];
  }
  hash = (hash * 31) ^ __applicationTokenRegenerated_isset ? 2654435761 : 0;
  if (__applicationTokenRegenerated_isset)
  {
    hash = (hash * 31) ^ [__applicationTokenRegenerated hash];
  }
  hash = (hash * 31) ^ __applicationSentMessage_isset ? 2654435761 : 0;
  if (__applicationSentMessage_isset)
  {
    hash = (hash * 31) ^ [__applicationSentMessage hash];
  }
  hash = (hash * 31) ^ __ownerApprovedRequest_isset ? 2654435761 : 0;
  if (__ownerApprovedRequest_isset)
  {
    hash = (hash * 31) ^ [__ownerApprovedRequest hash];
  }
  hash = (hash * 31) ^ __ownerAdded_isset ? 2654435761 : 0;
  if (__ownerAdded_isset)
  {
    hash = (hash * 31) ^ [__ownerAdded hash];
  }
  hash = (hash * 31) ^ __generalEvent_isset ? 2654435761 : 0;
  if (__generalEvent_isset)
  {
    hash = (hash * 31) ^ [__generalEvent hash];
  }
  hash = (hash * 31) ^ __userFollowedApplication_isset ? 2654435761 : 0;
  if (__userFollowedApplication_isset)
  {
    hash = (hash * 31) ^ [__userFollowedApplication hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEvents_EventType class]]) {
    return NO;
  }
  AromaEvents_EventType *other = (AromaEvents_EventType *)anObject;
  if ((__applicationMessageDeleted_isset != other->__applicationMessageDeleted_isset) ||
      (__applicationMessageDeleted_isset && ((__applicationMessageDeleted || other->__applicationMessageDeleted) && ![__applicationMessageDeleted isEqual:other->__applicationMessageDeleted]))) {
    return NO;
  }
  if ((__healthCheckFailed_isset != other->__healthCheckFailed_isset) ||
      (__healthCheckFailed_isset && ((__healthCheckFailed || other->__healthCheckFailed) && ![__healthCheckFailed isEqual:other->__healthCheckFailed]))) {
    return NO;
  }
  if ((__healthCheckBackToNormal_isset != other->__healthCheckBackToNormal_isset) ||
      (__healthCheckBackToNormal_isset && ((__healthCheckBackToNormal || other->__healthCheckBackToNormal) && ![__healthCheckBackToNormal isEqual:other->__healthCheckBackToNormal]))) {
    return NO;
  }
  if ((__applicationFollowed_isset != other->__applicationFollowed_isset) ||
      (__applicationFollowed_isset && ((__applicationFollowed || other->__applicationFollowed) && ![__applicationFollowed isEqual:other->__applicationFollowed]))) {
    return NO;
  }
  if ((__applicationDeleted_isset != other->__applicationDeleted_isset) ||
      (__applicationDeleted_isset && ((__applicationDeleted || other->__applicationDeleted) && ![__applicationDeleted isEqual:other->__applicationDeleted]))) {
    return NO;
  }
  if ((__applicationTokenRenewed_isset != other->__applicationTokenRenewed_isset) ||
      (__applicationTokenRenewed_isset && ((__applicationTokenRenewed || other->__applicationTokenRenewed) && ![__applicationTokenRenewed isEqual:other->__applicationTokenRenewed]))) {
    return NO;
  }
  if ((__applicationTokenRegenerated_isset != other->__applicationTokenRegenerated_isset) ||
      (__applicationTokenRegenerated_isset && ((__applicationTokenRegenerated || other->__applicationTokenRegenerated) && ![__applicationTokenRegenerated isEqual:other->__applicationTokenRegenerated]))) {
    return NO;
  }
  if ((__applicationSentMessage_isset != other->__applicationSentMessage_isset) ||
      (__applicationSentMessage_isset && ((__applicationSentMessage || other->__applicationSentMessage) && ![__applicationSentMessage isEqual:other->__applicationSentMessage]))) {
    return NO;
  }
  if ((__ownerApprovedRequest_isset != other->__ownerApprovedRequest_isset) ||
      (__ownerApprovedRequest_isset && ((__ownerApprovedRequest || other->__ownerApprovedRequest) && ![__ownerApprovedRequest isEqual:other->__ownerApprovedRequest]))) {
    return NO;
  }
  if ((__ownerAdded_isset != other->__ownerAdded_isset) ||
      (__ownerAdded_isset && ((__ownerAdded || other->__ownerAdded) && ![__ownerAdded isEqual:other->__ownerAdded]))) {
    return NO;
  }
  if ((__generalEvent_isset != other->__generalEvent_isset) ||
      (__generalEvent_isset && ((__generalEvent || other->__generalEvent) && ![__generalEvent isEqual:other->__generalEvent]))) {
    return NO;
  }
  if ((__userFollowedApplication_isset != other->__userFollowedApplication_isset) ||
      (__userFollowedApplication_isset && ((__userFollowedApplication || other->__userFollowedApplication) && ![__userFollowedApplication isEqual:other->__userFollowedApplication]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__applicationMessageDeleted release_stub];
  [__healthCheckFailed release_stub];
  [__healthCheckBackToNormal release_stub];
  [__applicationFollowed release_stub];
  [__applicationDeleted release_stub];
  [__applicationTokenRenewed release_stub];
  [__applicationTokenRegenerated release_stub];
  [__applicationSentMessage release_stub];
  [__ownerApprovedRequest release_stub];
  [__ownerAdded release_stub];
  [__generalEvent release_stub];
  [__userFollowedApplication release_stub];
  [super dealloc_stub];
}

- (AromaEvents_ApplicationMessagesDeleted *) applicationMessageDeleted {
  return [[__applicationMessageDeleted retain_stub] autorelease_stub];
}

- (void) setApplicationMessageDeleted: (AromaEvents_ApplicationMessagesDeleted *) applicationMessageDeleted {
  [applicationMessageDeleted retain_stub];
  [__applicationMessageDeleted release_stub];
  __applicationMessageDeleted = applicationMessageDeleted;
  __applicationMessageDeleted_isset = YES;
}

- (BOOL) applicationMessageDeletedIsSet {
  return __applicationMessageDeleted_isset;
}

- (void) unsetApplicationMessageDeleted {
  [__applicationMessageDeleted release_stub];
  __applicationMessageDeleted = nil;
  __applicationMessageDeleted_isset = NO;
}

- (AromaEvents_HealthCheckFailed *) healthCheckFailed {
  return [[__healthCheckFailed retain_stub] autorelease_stub];
}

- (void) setHealthCheckFailed: (AromaEvents_HealthCheckFailed *) healthCheckFailed {
  [healthCheckFailed retain_stub];
  [__healthCheckFailed release_stub];
  __healthCheckFailed = healthCheckFailed;
  __healthCheckFailed_isset = YES;
}

- (BOOL) healthCheckFailedIsSet {
  return __healthCheckFailed_isset;
}

- (void) unsetHealthCheckFailed {
  [__healthCheckFailed release_stub];
  __healthCheckFailed = nil;
  __healthCheckFailed_isset = NO;
}

- (AromaEvents_HealthCheckBackToNormal *) healthCheckBackToNormal {
  return [[__healthCheckBackToNormal retain_stub] autorelease_stub];
}

- (void) setHealthCheckBackToNormal: (AromaEvents_HealthCheckBackToNormal *) healthCheckBackToNormal {
  [healthCheckBackToNormal retain_stub];
  [__healthCheckBackToNormal release_stub];
  __healthCheckBackToNormal = healthCheckBackToNormal;
  __healthCheckBackToNormal_isset = YES;
}

- (BOOL) healthCheckBackToNormalIsSet {
  return __healthCheckBackToNormal_isset;
}

- (void) unsetHealthCheckBackToNormal {
  [__healthCheckBackToNormal release_stub];
  __healthCheckBackToNormal = nil;
  __healthCheckBackToNormal_isset = NO;
}

- (AromaEvents_ApplicationFollowed *) applicationFollowed {
  return [[__applicationFollowed retain_stub] autorelease_stub];
}

- (void) setApplicationFollowed: (AromaEvents_ApplicationFollowed *) applicationFollowed {
  [applicationFollowed retain_stub];
  [__applicationFollowed release_stub];
  __applicationFollowed = applicationFollowed;
  __applicationFollowed_isset = YES;
}

- (BOOL) applicationFollowedIsSet {
  return __applicationFollowed_isset;
}

- (void) unsetApplicationFollowed {
  [__applicationFollowed release_stub];
  __applicationFollowed = nil;
  __applicationFollowed_isset = NO;
}

- (AromaEvents_ApplicationDeleted *) applicationDeleted {
  return [[__applicationDeleted retain_stub] autorelease_stub];
}

- (void) setApplicationDeleted: (AromaEvents_ApplicationDeleted *) applicationDeleted {
  [applicationDeleted retain_stub];
  [__applicationDeleted release_stub];
  __applicationDeleted = applicationDeleted;
  __applicationDeleted_isset = YES;
}

- (BOOL) applicationDeletedIsSet {
  return __applicationDeleted_isset;
}

- (void) unsetApplicationDeleted {
  [__applicationDeleted release_stub];
  __applicationDeleted = nil;
  __applicationDeleted_isset = NO;
}

- (AromaEvents_ApplicationTokenRenewed *) applicationTokenRenewed {
  return [[__applicationTokenRenewed retain_stub] autorelease_stub];
}

- (void) setApplicationTokenRenewed: (AromaEvents_ApplicationTokenRenewed *) applicationTokenRenewed {
  [applicationTokenRenewed retain_stub];
  [__applicationTokenRenewed release_stub];
  __applicationTokenRenewed = applicationTokenRenewed;
  __applicationTokenRenewed_isset = YES;
}

- (BOOL) applicationTokenRenewedIsSet {
  return __applicationTokenRenewed_isset;
}

- (void) unsetApplicationTokenRenewed {
  [__applicationTokenRenewed release_stub];
  __applicationTokenRenewed = nil;
  __applicationTokenRenewed_isset = NO;
}

- (AromaEvents_ApplicationTokenRegenerated *) applicationTokenRegenerated {
  return [[__applicationTokenRegenerated retain_stub] autorelease_stub];
}

- (void) setApplicationTokenRegenerated: (AromaEvents_ApplicationTokenRegenerated *) applicationTokenRegenerated {
  [applicationTokenRegenerated retain_stub];
  [__applicationTokenRegenerated release_stub];
  __applicationTokenRegenerated = applicationTokenRegenerated;
  __applicationTokenRegenerated_isset = YES;
}

- (BOOL) applicationTokenRegeneratedIsSet {
  return __applicationTokenRegenerated_isset;
}

- (void) unsetApplicationTokenRegenerated {
  [__applicationTokenRegenerated release_stub];
  __applicationTokenRegenerated = nil;
  __applicationTokenRegenerated_isset = NO;
}

- (AromaEvents_ApplicationSentMessage *) applicationSentMessage {
  return [[__applicationSentMessage retain_stub] autorelease_stub];
}

- (void) setApplicationSentMessage: (AromaEvents_ApplicationSentMessage *) applicationSentMessage {
  [applicationSentMessage retain_stub];
  [__applicationSentMessage release_stub];
  __applicationSentMessage = applicationSentMessage;
  __applicationSentMessage_isset = YES;
}

- (BOOL) applicationSentMessageIsSet {
  return __applicationSentMessage_isset;
}

- (void) unsetApplicationSentMessage {
  [__applicationSentMessage release_stub];
  __applicationSentMessage = nil;
  __applicationSentMessage_isset = NO;
}

- (AromaEvents_OwnerApprovedRequest *) ownerApprovedRequest {
  return [[__ownerApprovedRequest retain_stub] autorelease_stub];
}

- (void) setOwnerApprovedRequest: (AromaEvents_OwnerApprovedRequest *) ownerApprovedRequest {
  [ownerApprovedRequest retain_stub];
  [__ownerApprovedRequest release_stub];
  __ownerApprovedRequest = ownerApprovedRequest;
  __ownerApprovedRequest_isset = YES;
}

- (BOOL) ownerApprovedRequestIsSet {
  return __ownerApprovedRequest_isset;
}

- (void) unsetOwnerApprovedRequest {
  [__ownerApprovedRequest release_stub];
  __ownerApprovedRequest = nil;
  __ownerApprovedRequest_isset = NO;
}

- (AromaEvents_OwnerAdded *) ownerAdded {
  return [[__ownerAdded retain_stub] autorelease_stub];
}

- (void) setOwnerAdded: (AromaEvents_OwnerAdded *) ownerAdded {
  [ownerAdded retain_stub];
  [__ownerAdded release_stub];
  __ownerAdded = ownerAdded;
  __ownerAdded_isset = YES;
}

- (BOOL) ownerAddedIsSet {
  return __ownerAdded_isset;
}

- (void) unsetOwnerAdded {
  [__ownerAdded release_stub];
  __ownerAdded = nil;
  __ownerAdded_isset = NO;
}

- (AromaEvents_GeneralEvent *) generalEvent {
  return [[__generalEvent retain_stub] autorelease_stub];
}

- (void) setGeneralEvent: (AromaEvents_GeneralEvent *) generalEvent {
  [generalEvent retain_stub];
  [__generalEvent release_stub];
  __generalEvent = generalEvent;
  __generalEvent_isset = YES;
}

- (BOOL) generalEventIsSet {
  return __generalEvent_isset;
}

- (void) unsetGeneralEvent {
  [__generalEvent release_stub];
  __generalEvent = nil;
  __generalEvent_isset = NO;
}

- (AromaEvents_UserFollowedApplication *) userFollowedApplication {
  return [[__userFollowedApplication retain_stub] autorelease_stub];
}

- (void) setUserFollowedApplication: (AromaEvents_UserFollowedApplication *) userFollowedApplication {
  [userFollowedApplication retain_stub];
  [__userFollowedApplication release_stub];
  __userFollowedApplication = userFollowedApplication;
  __userFollowedApplication_isset = YES;
}

- (BOOL) userFollowedApplicationIsSet {
  return __userFollowedApplication_isset;
}

- (void) unsetUserFollowedApplication {
  [__userFollowedApplication release_stub];
  __userFollowedApplication = nil;
  __userFollowedApplication_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AromaEvents_ApplicationMessagesDeleted *fieldValue = [[AromaEvents_ApplicationMessagesDeleted alloc] init];
          [fieldValue read: inProtocol];
          [self setApplicationMessageDeleted: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          AromaEvents_HealthCheckFailed *fieldValue = [[AromaEvents_HealthCheckFailed alloc] init];
          [fieldValue read: inProtocol];
          [self setHealthCheckFailed: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          AromaEvents_HealthCheckBackToNormal *fieldValue = [[AromaEvents_HealthCheckBackToNormal alloc] init];
          [fieldValue read: inProtocol];
          [self setHealthCheckBackToNormal: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          AromaEvents_ApplicationFollowed *fieldValue = [[AromaEvents_ApplicationFollowed alloc] init];
          [fieldValue read: inProtocol];
          [self setApplicationFollowed: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          AromaEvents_ApplicationDeleted *fieldValue = [[AromaEvents_ApplicationDeleted alloc] init];
          [fieldValue read: inProtocol];
          [self setApplicationDeleted: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRUCT) {
          AromaEvents_ApplicationTokenRenewed *fieldValue = [[AromaEvents_ApplicationTokenRenewed alloc] init];
          [fieldValue read: inProtocol];
          [self setApplicationTokenRenewed: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRUCT) {
          AromaEvents_ApplicationTokenRegenerated *fieldValue = [[AromaEvents_ApplicationTokenRegenerated alloc] init];
          [fieldValue read: inProtocol];
          [self setApplicationTokenRegenerated: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRUCT) {
          AromaEvents_ApplicationSentMessage *fieldValue = [[AromaEvents_ApplicationSentMessage alloc] init];
          [fieldValue read: inProtocol];
          [self setApplicationSentMessage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRUCT) {
          AromaEvents_OwnerApprovedRequest *fieldValue = [[AromaEvents_OwnerApprovedRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setOwnerApprovedRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRUCT) {
          AromaEvents_OwnerAdded *fieldValue = [[AromaEvents_OwnerAdded alloc] init];
          [fieldValue read: inProtocol];
          [self setOwnerAdded: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRUCT) {
          AromaEvents_GeneralEvent *fieldValue = [[AromaEvents_GeneralEvent alloc] init];
          [fieldValue read: inProtocol];
          [self setGeneralEvent: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRUCT) {
          AromaEvents_UserFollowedApplication *fieldValue = [[AromaEvents_UserFollowedApplication alloc] init];
          [fieldValue read: inProtocol];
          [self setUserFollowedApplication: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EventType"];
  if (__applicationMessageDeleted_isset) {
    if (__applicationMessageDeleted != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationMessageDeleted" type: TType_STRUCT fieldID: 1];
      [__applicationMessageDeleted write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__healthCheckFailed_isset) {
    if (__healthCheckFailed != nil) {
      [outProtocol writeFieldBeginWithName: @"healthCheckFailed" type: TType_STRUCT fieldID: 2];
      [__healthCheckFailed write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__healthCheckBackToNormal_isset) {
    if (__healthCheckBackToNormal != nil) {
      [outProtocol writeFieldBeginWithName: @"healthCheckBackToNormal" type: TType_STRUCT fieldID: 3];
      [__healthCheckBackToNormal write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationFollowed_isset) {
    if (__applicationFollowed != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationFollowed" type: TType_STRUCT fieldID: 4];
      [__applicationFollowed write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationDeleted_isset) {
    if (__applicationDeleted != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationDeleted" type: TType_STRUCT fieldID: 5];
      [__applicationDeleted write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationTokenRenewed_isset) {
    if (__applicationTokenRenewed != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationTokenRenewed" type: TType_STRUCT fieldID: 6];
      [__applicationTokenRenewed write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationTokenRegenerated_isset) {
    if (__applicationTokenRegenerated != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationTokenRegenerated" type: TType_STRUCT fieldID: 7];
      [__applicationTokenRegenerated write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationSentMessage_isset) {
    if (__applicationSentMessage != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationSentMessage" type: TType_STRUCT fieldID: 8];
      [__applicationSentMessage write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ownerApprovedRequest_isset) {
    if (__ownerApprovedRequest != nil) {
      [outProtocol writeFieldBeginWithName: @"ownerApprovedRequest" type: TType_STRUCT fieldID: 9];
      [__ownerApprovedRequest write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ownerAdded_isset) {
    if (__ownerAdded != nil) {
      [outProtocol writeFieldBeginWithName: @"ownerAdded" type: TType_STRUCT fieldID: 10];
      [__ownerAdded write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__generalEvent_isset) {
    if (__generalEvent != nil) {
      [outProtocol writeFieldBeginWithName: @"generalEvent" type: TType_STRUCT fieldID: 11];
      [__generalEvent write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userFollowedApplication_isset) {
    if (__userFollowedApplication != nil) {
      [outProtocol writeFieldBeginWithName: @"userFollowedApplication" type: TType_STRUCT fieldID: 12];
      [__userFollowedApplication write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEvents_EventType("];
  [ms appendString: @"applicationMessageDeleted:"];
  [ms appendFormat: @"%@", __applicationMessageDeleted];
  [ms appendString: @",healthCheckFailed:"];
  [ms appendFormat: @"%@", __healthCheckFailed];
  [ms appendString: @",healthCheckBackToNormal:"];
  [ms appendFormat: @"%@", __healthCheckBackToNormal];
  [ms appendString: @",applicationFollowed:"];
  [ms appendFormat: @"%@", __applicationFollowed];
  [ms appendString: @",applicationDeleted:"];
  [ms appendFormat: @"%@", __applicationDeleted];
  [ms appendString: @",applicationTokenRenewed:"];
  [ms appendFormat: @"%@", __applicationTokenRenewed];
  [ms appendString: @",applicationTokenRegenerated:"];
  [ms appendFormat: @"%@", __applicationTokenRegenerated];
  [ms appendString: @",applicationSentMessage:"];
  [ms appendFormat: @"%@", __applicationSentMessage];
  [ms appendString: @",ownerApprovedRequest:"];
  [ms appendFormat: @"%@", __ownerApprovedRequest];
  [ms appendString: @",ownerAdded:"];
  [ms appendFormat: @"%@", __ownerAdded];
  [ms appendString: @",generalEvent:"];
  [ms appendFormat: @"%@", __generalEvent];
  [ms appendString: @",userFollowedApplication:"];
  [ms appendFormat: @"%@", __userFollowedApplication];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaEvents_Event

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEventType: (AromaEvents_EventType *) eventType timestamp: (AromaEvents_timestamp) timestamp eventId: (AromaEvents_uuid) eventId
{
  self = [super init];
  __eventType = [eventType retain_stub];
  __eventType_isset = YES;
  __timestamp = timestamp;
  __timestamp_isset = YES;
  __eventId = [eventId retain_stub];
  __eventId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"eventType"])
  {
    __eventType = [[decoder decodeObjectForKey: @"eventType"] retain_stub];
    __eventType_isset = YES;
  }
  if ([decoder containsValueForKey: @"timestamp"])
  {
    __timestamp = [decoder decodeInt64ForKey: @"timestamp"];
    __timestamp_isset = YES;
  }
  if ([decoder containsValueForKey: @"eventId"])
  {
    __eventId = [[decoder decodeObjectForKey: @"eventId"] retain_stub];
    __eventId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__eventType_isset)
  {
    [encoder encodeObject: __eventType forKey: @"eventType"];
  }
  if (__timestamp_isset)
  {
    [encoder encodeInt64: __timestamp forKey: @"timestamp"];
  }
  if (__eventId_isset)
  {
    [encoder encodeObject: __eventId forKey: @"eventId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __eventType_isset ? 2654435761 : 0;
  if (__eventType_isset)
  {
    hash = (hash * 31) ^ [__eventType hash];
  }
  hash = (hash * 31) ^ __timestamp_isset ? 2654435761 : 0;
  if (__timestamp_isset)
  {
    hash = (hash * 31) ^ [@(__timestamp) hash];
  }
  hash = (hash * 31) ^ __eventId_isset ? 2654435761 : 0;
  if (__eventId_isset)
  {
    hash = (hash * 31) ^ [__eventId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaEvents_Event class]]) {
    return NO;
  }
  AromaEvents_Event *other = (AromaEvents_Event *)anObject;
  if ((__eventType_isset != other->__eventType_isset) ||
      (__eventType_isset && ((__eventType || other->__eventType) && ![__eventType isEqual:other->__eventType]))) {
    return NO;
  }
  if ((__timestamp_isset != other->__timestamp_isset) ||
      (__timestamp_isset && (__timestamp != other->__timestamp))) {
    return NO;
  }
  if ((__eventId_isset != other->__eventId_isset) ||
      (__eventId_isset && ((__eventId || other->__eventId) && ![__eventId isEqual:other->__eventId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__eventType release_stub];
  [__eventId release_stub];
  [super dealloc_stub];
}

- (AromaEvents_EventType *) eventType {
  return [[__eventType retain_stub] autorelease_stub];
}

- (void) setEventType: (AromaEvents_EventType *) eventType {
  [eventType retain_stub];
  [__eventType release_stub];
  __eventType = eventType;
  __eventType_isset = YES;
}

- (BOOL) eventTypeIsSet {
  return __eventType_isset;
}

- (void) unsetEventType {
  [__eventType release_stub];
  __eventType = nil;
  __eventType_isset = NO;
}

- (int64_t) timestamp {
  return __timestamp;
}

- (void) setTimestamp: (int64_t) timestamp {
  __timestamp = timestamp;
  __timestamp_isset = YES;
}

- (BOOL) timestampIsSet {
  return __timestamp_isset;
}

- (void) unsetTimestamp {
  __timestamp_isset = NO;
}

- (NSString *) eventId {
  return [[__eventId retain_stub] autorelease_stub];
}

- (void) setEventId: (NSString *) eventId {
  [eventId retain_stub];
  [__eventId release_stub];
  __eventId = eventId;
  __eventId_isset = YES;
}

- (BOOL) eventIdIsSet {
  return __eventId_isset;
}

- (void) unsetEventId {
  [__eventId release_stub];
  __eventId = nil;
  __eventId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AromaEvents_EventType *fieldValue = [[AromaEvents_EventType alloc] init];
          [fieldValue read: inProtocol];
          [self setEventType: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEventId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Event"];
  if (__eventType_isset) {
    if (__eventType != nil) {
      [outProtocol writeFieldBeginWithName: @"eventType" type: TType_STRUCT fieldID: 1];
      [__eventType write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__timestamp_isset) {
    [outProtocol writeFieldBeginWithName: @"timestamp" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __timestamp];
    [outProtocol writeFieldEnd];
  }
  if (__eventId_isset) {
    if (__eventId != nil) {
      [outProtocol writeFieldBeginWithName: @"eventId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __eventId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaEvents_Event("];
  [ms appendString: @"eventType:"];
  [ms appendFormat: @"%@", __eventType];
  [ms appendString: @",timestamp:"];
  [ms appendFormat: @"%qi", __timestamp];
  [ms appendString: @",eventId:"];
  [ms appendFormat: @"\"%@\"", __eventId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation AromaEvents_EventsConstants
+ (void) initialize {
}
@end

