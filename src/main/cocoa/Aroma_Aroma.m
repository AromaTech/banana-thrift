/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TProtocolFactory.h"
#import "TApplicationError.h"
#import "TProtocolError.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TBaseClient.h"


#import "Aroma_Aroma.h"

@implementation Aroma_LengthOfTime

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithUnit: (Aroma_TimeUnit) unit value: (Aroma_long) value
{
  self = [super init];
  if (self)  {
    _unit = unit;
    _unitIsSet = YES;
    _value = value;
    _valueIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"unit"])
    {
      _unit = [decoder decodeIntForKey: @"unit"];
      _unitIsSet = YES;
    }
    if ([decoder containsValueForKey: @"value"])
    {
      _value = [decoder decodeInt64ForKey: @"value"];
      _valueIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_unitIsSet)
  {
    [encoder encodeInt: _unit forKey: @"unit"];
  }
  if (_valueIsSet)
  {
    [encoder encodeInt64: _value forKey: @"value"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _unitIsSet ? 2654435761 : 0;
  if (_unitIsSet)
  {
    hash = (hash * 31) ^ [@(_unit) hash];
  }
  hash = (hash * 31) ^ _valueIsSet ? 2654435761 : 0;
  if (_valueIsSet)
  {
    hash = (hash * 31) ^ [@(_value) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Aroma_LengthOfTime class]]) {
    return NO;
  }
  Aroma_LengthOfTime *other = (Aroma_LengthOfTime *)anObject;
  if ((_unitIsSet != other->_unitIsSet) ||
      (_unitIsSet && (_unit != other->_unit))) {
    return NO;
  }
  if ((_valueIsSet != other->_valueIsSet) ||
      (_valueIsSet && (_value != other->_value))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  Aroma_LengthOfTime * val = [Aroma_LengthOfTime new];
  if (_unitIsSet)
  {
    val.unit = self.unit;
  }
  if (_valueIsSet)
  {
    val.value = self.value;
  }
  return val;
}

- (void) setUnit: (Aroma_TimeUnit) unit {
  _unit = unit;
  _unitIsSet = YES;
}

- (void) unsetUnit {
  _unitIsSet = NO;
}

- (void) setValue: (SInt64) value {
  _value = value;
  _valueIsSet = YES;
}

- (void) unsetValue {
  _valueIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeI32) {
          Aroma_TimeUnit fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.unit = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.value = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"LengthOfTime" error: __thriftError]) return NO;
  if (_unitIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"unit" type: TTypeI32 fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _unit error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_valueIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"value" type: TTypeI64 fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _value error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_unitIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"unit"}];
    }
  }
  if (!_valueIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"value"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Aroma_LengthOfTime("];
  [ms appendString: @"unit:"];
  [ms appendFormat: @"%i", (int)_unit];
  [ms appendString: @",value:"];
  [ms appendFormat: @"%qi", _value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Aroma_Dimension

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithWidth: (Aroma_int) width height: (Aroma_int) height
{
  self = [super init];
  if (self)  {
    _width = width;
    _widthIsSet = YES;
    _height = height;
    _heightIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"width"])
    {
      _width = [decoder decodeInt32ForKey: @"width"];
      _widthIsSet = YES;
    }
    if ([decoder containsValueForKey: @"height"])
    {
      _height = [decoder decodeInt32ForKey: @"height"];
      _heightIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_widthIsSet)
  {
    [encoder encodeInt32: _width forKey: @"width"];
  }
  if (_heightIsSet)
  {
    [encoder encodeInt32: _height forKey: @"height"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _widthIsSet ? 2654435761 : 0;
  if (_widthIsSet)
  {
    hash = (hash * 31) ^ [@(_width) hash];
  }
  hash = (hash * 31) ^ _heightIsSet ? 2654435761 : 0;
  if (_heightIsSet)
  {
    hash = (hash * 31) ^ [@(_height) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Aroma_Dimension class]]) {
    return NO;
  }
  Aroma_Dimension *other = (Aroma_Dimension *)anObject;
  if ((_widthIsSet != other->_widthIsSet) ||
      (_widthIsSet && (_width != other->_width))) {
    return NO;
  }
  if ((_heightIsSet != other->_heightIsSet) ||
      (_heightIsSet && (_height != other->_height))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  Aroma_Dimension * val = [Aroma_Dimension new];
  if (_widthIsSet)
  {
    val.width = self.width;
  }
  if (_heightIsSet)
  {
    val.height = self.height;
  }
  return val;
}

- (void) setWidth: (SInt32) width {
  _width = width;
  _widthIsSet = YES;
}

- (void) unsetWidth {
  _widthIsSet = NO;
}

- (void) setHeight: (SInt32) height {
  _height = height;
  _heightIsSet = YES;
}

- (void) unsetHeight {
  _heightIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeI32) {
          SInt32 fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.width = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeI32) {
          SInt32 fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.height = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Dimension" error: __thriftError]) return NO;
  if (_widthIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"width" type: TTypeI32 fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _width error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_heightIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"height" type: TTypeI32 fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _height error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_widthIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"width"}];
    }
  }
  if (!_heightIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"height"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Aroma_Dimension("];
  [ms appendString: @"width:"];
  [ms appendFormat: @"%i", (int)_width];
  [ms appendString: @",height:"];
  [ms appendFormat: @"%i", (int)_height];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Aroma_Image

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithImageType: (Aroma_ImageType) imageType data: (NSData *) data dimension: (Aroma_Dimension *) dimension
{
  self = [super init];
  if (self)  {
    _imageType = imageType;
    _imageTypeIsSet = YES;
    _data = data;
    _dataIsSet = YES;
    _dimension = dimension;
    _dimensionIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"imageType"])
    {
      _imageType = [decoder decodeIntForKey: @"imageType"];
      _imageTypeIsSet = YES;
    }
    if ([decoder containsValueForKey: @"data"])
    {
      _data = [decoder decodeObjectForKey: @"data"];
      _dataIsSet = YES;
    }
    if ([decoder containsValueForKey: @"dimension"])
    {
      _dimension = [decoder decodeObjectForKey: @"dimension"];
      _dimensionIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_imageTypeIsSet)
  {
    [encoder encodeInt: _imageType forKey: @"imageType"];
  }
  if (_dataIsSet)
  {
    [encoder encodeObject: _data forKey: @"data"];
  }
  if (_dimensionIsSet)
  {
    [encoder encodeObject: _dimension forKey: @"dimension"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _imageTypeIsSet ? 2654435761 : 0;
  if (_imageTypeIsSet)
  {
    hash = (hash * 31) ^ [@(_imageType) hash];
  }
  hash = (hash * 31) ^ _dataIsSet ? 2654435761 : 0;
  if (_dataIsSet)
  {
    hash = (hash * 31) ^ [_data hash];
  }
  hash = (hash * 31) ^ _dimensionIsSet ? 2654435761 : 0;
  if (_dimensionIsSet)
  {
    hash = (hash * 31) ^ [_dimension hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Aroma_Image class]]) {
    return NO;
  }
  Aroma_Image *other = (Aroma_Image *)anObject;
  if ((_imageTypeIsSet != other->_imageTypeIsSet) ||
      (_imageTypeIsSet && (_imageType != other->_imageType))) {
    return NO;
  }
  if ((_dataIsSet != other->_dataIsSet) ||
      (_dataIsSet && ((_data || other->_data) && ![_data isEqual:other->_data]))) {
    return NO;
  }
  if ((_dimensionIsSet != other->_dimensionIsSet) ||
      (_dimensionIsSet && ((_dimension || other->_dimension) && ![_dimension isEqual:other->_dimension]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  Aroma_Image * val = [Aroma_Image new];
  if (_imageTypeIsSet)
  {
    val.imageType = self.imageType;
  }
  if (_dataIsSet)
  {
    val.data = [self.data copy];
  }
  if (_dimensionIsSet)
  {
    val.dimension = [self.dimension copy];
  }
  return val;
}

- (void) setImageType: (Aroma_ImageType) imageType {
  _imageType = imageType;
  _imageTypeIsSet = YES;
}

- (void) unsetImageType {
  _imageTypeIsSet = NO;
}

- (void) setData: (NSData *) data {
  _data = data;
  _dataIsSet = YES;
}

- (void) unsetData {
  _data = nil;
  _dataIsSet = NO;
}

- (void) setDimension: (Aroma_Dimension *) dimension {
  _dimension = dimension;
  _dimensionIsSet = YES;
}

- (void) unsetDimension {
  _dimension = nil;
  _dimensionIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeI32) {
          Aroma_ImageType fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.imageType = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.data = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          Aroma_Dimension *fieldValue = [[Aroma_Dimension alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.dimension = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Image" error: __thriftError]) return NO;
  if (_imageTypeIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"imageType" type: TTypeI32 fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _imageType error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_dataIsSet) {
    if (_data != nil) {
      if (![outProtocol writeFieldBeginWithName: @"data" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _data error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_dimensionIsSet) {
    if (_dimension != nil) {
      if (![outProtocol writeFieldBeginWithName: @"dimension" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_dimension write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Aroma_Image("];
  [ms appendString: @"imageType:"];
  [ms appendFormat: @"%i", (int)_imageType];
  [ms appendString: @",data:"];
  [ms appendFormat: @"\"%@\"", _data];
  [ms appendString: @",dimension:"];
  [ms appendFormat: @"%@", _dimension];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Aroma_Message

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.urgency = 1;

    self.isTruncated = NO;

  }
  return self;
}

- (instancetype) initWithMessageId: (Aroma_uuid) messageId body: (NSString *) body urgency: (Aroma_Urgency) urgency timeOfCreation: (Aroma_timestamp) timeOfCreation timeMessageReceived: (Aroma_timestamp) timeMessageReceived applicationName: (NSString *) applicationName hostname: (NSString *) hostname macAddress: (NSString *) macAddress isTruncated: (BOOL) isTruncated title: (NSString *) title applicationId: (Aroma_uuid) applicationId deviceName: (NSString *) deviceName
{
  self = [super init];
  if (self)  {
    _messageId = messageId;
    _messageIdIsSet = YES;
    _body = body;
    _bodyIsSet = YES;
    _urgency = urgency;
    _urgencyIsSet = YES;
    _timeOfCreation = timeOfCreation;
    _timeOfCreationIsSet = YES;
    _timeMessageReceived = timeMessageReceived;
    _timeMessageReceivedIsSet = YES;
    _applicationName = applicationName;
    _applicationNameIsSet = YES;
    _hostname = hostname;
    _hostnameIsSet = YES;
    _macAddress = macAddress;
    _macAddressIsSet = YES;
    _isTruncated = isTruncated;
    _isTruncatedIsSet = YES;
    _title = title;
    _titleIsSet = YES;
    _applicationId = applicationId;
    _applicationIdIsSet = YES;
    _deviceName = deviceName;
    _deviceNameIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"messageId"])
    {
      _messageId = [decoder decodeObjectForKey: @"messageId"];
      _messageIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"body"])
    {
      _body = [decoder decodeObjectForKey: @"body"];
      _bodyIsSet = YES;
    }
    if ([decoder containsValueForKey: @"urgency"])
    {
      _urgency = [decoder decodeIntForKey: @"urgency"];
      _urgencyIsSet = YES;
    }
    if ([decoder containsValueForKey: @"timeOfCreation"])
    {
      _timeOfCreation = [decoder decodeInt64ForKey: @"timeOfCreation"];
      _timeOfCreationIsSet = YES;
    }
    if ([decoder containsValueForKey: @"timeMessageReceived"])
    {
      _timeMessageReceived = [decoder decodeInt64ForKey: @"timeMessageReceived"];
      _timeMessageReceivedIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationName"])
    {
      _applicationName = [decoder decodeObjectForKey: @"applicationName"];
      _applicationNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"hostname"])
    {
      _hostname = [decoder decodeObjectForKey: @"hostname"];
      _hostnameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"macAddress"])
    {
      _macAddress = [decoder decodeObjectForKey: @"macAddress"];
      _macAddressIsSet = YES;
    }
    if ([decoder containsValueForKey: @"isTruncated"])
    {
      _isTruncated = [decoder decodeBoolForKey: @"isTruncated"];
      _isTruncatedIsSet = YES;
    }
    if ([decoder containsValueForKey: @"title"])
    {
      _title = [decoder decodeObjectForKey: @"title"];
      _titleIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationId"])
    {
      _applicationId = [decoder decodeObjectForKey: @"applicationId"];
      _applicationIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"deviceName"])
    {
      _deviceName = [decoder decodeObjectForKey: @"deviceName"];
      _deviceNameIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_messageIdIsSet)
  {
    [encoder encodeObject: _messageId forKey: @"messageId"];
  }
  if (_bodyIsSet)
  {
    [encoder encodeObject: _body forKey: @"body"];
  }
  if (_urgencyIsSet)
  {
    [encoder encodeInt: _urgency forKey: @"urgency"];
  }
  if (_timeOfCreationIsSet)
  {
    [encoder encodeInt64: _timeOfCreation forKey: @"timeOfCreation"];
  }
  if (_timeMessageReceivedIsSet)
  {
    [encoder encodeInt64: _timeMessageReceived forKey: @"timeMessageReceived"];
  }
  if (_applicationNameIsSet)
  {
    [encoder encodeObject: _applicationName forKey: @"applicationName"];
  }
  if (_hostnameIsSet)
  {
    [encoder encodeObject: _hostname forKey: @"hostname"];
  }
  if (_macAddressIsSet)
  {
    [encoder encodeObject: _macAddress forKey: @"macAddress"];
  }
  if (_isTruncatedIsSet)
  {
    [encoder encodeBool: _isTruncated forKey: @"isTruncated"];
  }
  if (_titleIsSet)
  {
    [encoder encodeObject: _title forKey: @"title"];
  }
  if (_applicationIdIsSet)
  {
    [encoder encodeObject: _applicationId forKey: @"applicationId"];
  }
  if (_deviceNameIsSet)
  {
    [encoder encodeObject: _deviceName forKey: @"deviceName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _messageIdIsSet ? 2654435761 : 0;
  if (_messageIdIsSet)
  {
    hash = (hash * 31) ^ [_messageId hash];
  }
  hash = (hash * 31) ^ _bodyIsSet ? 2654435761 : 0;
  if (_bodyIsSet)
  {
    hash = (hash * 31) ^ [_body hash];
  }
  hash = (hash * 31) ^ _urgencyIsSet ? 2654435761 : 0;
  if (_urgencyIsSet)
  {
    hash = (hash * 31) ^ [@(_urgency) hash];
  }
  hash = (hash * 31) ^ _timeOfCreationIsSet ? 2654435761 : 0;
  if (_timeOfCreationIsSet)
  {
    hash = (hash * 31) ^ [@(_timeOfCreation) hash];
  }
  hash = (hash * 31) ^ _timeMessageReceivedIsSet ? 2654435761 : 0;
  if (_timeMessageReceivedIsSet)
  {
    hash = (hash * 31) ^ [@(_timeMessageReceived) hash];
  }
  hash = (hash * 31) ^ _applicationNameIsSet ? 2654435761 : 0;
  if (_applicationNameIsSet)
  {
    hash = (hash * 31) ^ [_applicationName hash];
  }
  hash = (hash * 31) ^ _hostnameIsSet ? 2654435761 : 0;
  if (_hostnameIsSet)
  {
    hash = (hash * 31) ^ [_hostname hash];
  }
  hash = (hash * 31) ^ _macAddressIsSet ? 2654435761 : 0;
  if (_macAddressIsSet)
  {
    hash = (hash * 31) ^ [_macAddress hash];
  }
  hash = (hash * 31) ^ _isTruncatedIsSet ? 2654435761 : 0;
  if (_isTruncatedIsSet)
  {
    hash = (hash * 31) ^ [@(_isTruncated) hash];
  }
  hash = (hash * 31) ^ _titleIsSet ? 2654435761 : 0;
  if (_titleIsSet)
  {
    hash = (hash * 31) ^ [_title hash];
  }
  hash = (hash * 31) ^ _applicationIdIsSet ? 2654435761 : 0;
  if (_applicationIdIsSet)
  {
    hash = (hash * 31) ^ [_applicationId hash];
  }
  hash = (hash * 31) ^ _deviceNameIsSet ? 2654435761 : 0;
  if (_deviceNameIsSet)
  {
    hash = (hash * 31) ^ [_deviceName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Aroma_Message class]]) {
    return NO;
  }
  Aroma_Message *other = (Aroma_Message *)anObject;
  if ((_messageIdIsSet != other->_messageIdIsSet) ||
      (_messageIdIsSet && ((_messageId || other->_messageId) && ![_messageId isEqual:other->_messageId]))) {
    return NO;
  }
  if ((_bodyIsSet != other->_bodyIsSet) ||
      (_bodyIsSet && ((_body || other->_body) && ![_body isEqual:other->_body]))) {
    return NO;
  }
  if ((_urgencyIsSet != other->_urgencyIsSet) ||
      (_urgencyIsSet && (_urgency != other->_urgency))) {
    return NO;
  }
  if ((_timeOfCreationIsSet != other->_timeOfCreationIsSet) ||
      (_timeOfCreationIsSet && (_timeOfCreation != other->_timeOfCreation))) {
    return NO;
  }
  if ((_timeMessageReceivedIsSet != other->_timeMessageReceivedIsSet) ||
      (_timeMessageReceivedIsSet && (_timeMessageReceived != other->_timeMessageReceived))) {
    return NO;
  }
  if ((_applicationNameIsSet != other->_applicationNameIsSet) ||
      (_applicationNameIsSet && ((_applicationName || other->_applicationName) && ![_applicationName isEqual:other->_applicationName]))) {
    return NO;
  }
  if ((_hostnameIsSet != other->_hostnameIsSet) ||
      (_hostnameIsSet && ((_hostname || other->_hostname) && ![_hostname isEqual:other->_hostname]))) {
    return NO;
  }
  if ((_macAddressIsSet != other->_macAddressIsSet) ||
      (_macAddressIsSet && ((_macAddress || other->_macAddress) && ![_macAddress isEqual:other->_macAddress]))) {
    return NO;
  }
  if ((_isTruncatedIsSet != other->_isTruncatedIsSet) ||
      (_isTruncatedIsSet && (_isTruncated != other->_isTruncated))) {
    return NO;
  }
  if ((_titleIsSet != other->_titleIsSet) ||
      (_titleIsSet && ((_title || other->_title) && ![_title isEqual:other->_title]))) {
    return NO;
  }
  if ((_applicationIdIsSet != other->_applicationIdIsSet) ||
      (_applicationIdIsSet && ((_applicationId || other->_applicationId) && ![_applicationId isEqual:other->_applicationId]))) {
    return NO;
  }
  if ((_deviceNameIsSet != other->_deviceNameIsSet) ||
      (_deviceNameIsSet && ((_deviceName || other->_deviceName) && ![_deviceName isEqual:other->_deviceName]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  Aroma_Message * val = [Aroma_Message new];
  if (_messageIdIsSet)
  {
    val.messageId = [self.messageId copy];
  }
  if (_bodyIsSet)
  {
    val.body = [self.body copy];
  }
  if (_urgencyIsSet)
  {
    val.urgency = self.urgency;
  }
  if (_timeOfCreationIsSet)
  {
    val.timeOfCreation = self.timeOfCreation;
  }
  if (_timeMessageReceivedIsSet)
  {
    val.timeMessageReceived = self.timeMessageReceived;
  }
  if (_applicationNameIsSet)
  {
    val.applicationName = [self.applicationName copy];
  }
  if (_hostnameIsSet)
  {
    val.hostname = [self.hostname copy];
  }
  if (_macAddressIsSet)
  {
    val.macAddress = [self.macAddress copy];
  }
  if (_isTruncatedIsSet)
  {
    val.isTruncated = self.isTruncated;
  }
  if (_titleIsSet)
  {
    val.title = [self.title copy];
  }
  if (_applicationIdIsSet)
  {
    val.applicationId = [self.applicationId copy];
  }
  if (_deviceNameIsSet)
  {
    val.deviceName = [self.deviceName copy];
  }
  return val;
}

- (void) setMessageId: (NSString *) messageId {
  _messageId = messageId;
  _messageIdIsSet = YES;
}

- (void) unsetMessageId {
  _messageId = nil;
  _messageIdIsSet = NO;
}

- (void) setBody: (NSString *) body {
  _body = body;
  _bodyIsSet = YES;
}

- (void) unsetBody {
  _body = nil;
  _bodyIsSet = NO;
}

- (void) setUrgency: (Aroma_Urgency) urgency {
  _urgency = urgency;
  _urgencyIsSet = YES;
}

- (void) unsetUrgency {
  _urgencyIsSet = NO;
}

- (void) setTimeOfCreation: (SInt64) timeOfCreation {
  _timeOfCreation = timeOfCreation;
  _timeOfCreationIsSet = YES;
}

- (void) unsetTimeOfCreation {
  _timeOfCreationIsSet = NO;
}

- (void) setTimeMessageReceived: (SInt64) timeMessageReceived {
  _timeMessageReceived = timeMessageReceived;
  _timeMessageReceivedIsSet = YES;
}

- (void) unsetTimeMessageReceived {
  _timeMessageReceivedIsSet = NO;
}

- (void) setApplicationName: (NSString *) applicationName {
  _applicationName = applicationName;
  _applicationNameIsSet = YES;
}

- (void) unsetApplicationName {
  _applicationName = nil;
  _applicationNameIsSet = NO;
}

- (void) setHostname: (NSString *) hostname {
  _hostname = hostname;
  _hostnameIsSet = YES;
}

- (void) unsetHostname {
  _hostname = nil;
  _hostnameIsSet = NO;
}

- (void) setMacAddress: (NSString *) macAddress {
  _macAddress = macAddress;
  _macAddressIsSet = YES;
}

- (void) unsetMacAddress {
  _macAddress = nil;
  _macAddressIsSet = NO;
}

- (void) setIsTruncated: (BOOL) isTruncated {
  _isTruncated = isTruncated;
  _isTruncatedIsSet = YES;
}

- (void) unsetIsTruncated {
  _isTruncatedIsSet = NO;
}

- (void) setTitle: (NSString *) title {
  _title = title;
  _titleIsSet = YES;
}

- (void) unsetTitle {
  _title = nil;
  _titleIsSet = NO;
}

- (void) setApplicationId: (NSString *) applicationId {
  _applicationId = applicationId;
  _applicationIdIsSet = YES;
}

- (void) unsetApplicationId {
  _applicationId = nil;
  _applicationIdIsSet = NO;
}

- (void) setDeviceName: (NSString *) deviceName {
  _deviceName = deviceName;
  _deviceNameIsSet = YES;
}

- (void) unsetDeviceName {
  _deviceName = nil;
  _deviceNameIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.messageId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.body = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeI32) {
          Aroma_Urgency fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.urgency = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.timeOfCreation = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.timeMessageReceived = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.applicationName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 7:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.hostname = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 8:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.macAddress = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 9:
        if (fieldType == TTypeBOOL) {
          BOOL fieldValue;
          if (![inProtocol readBool:&fieldValue error: __thriftError]) return NO;
          self.isTruncated = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 10:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.title = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 11:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.applicationId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 12:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.deviceName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Message" error: __thriftError]) return NO;
  if (_messageIdIsSet) {
    if (_messageId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"messageId" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _messageId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_bodyIsSet) {
    if (_body != nil) {
      if (![outProtocol writeFieldBeginWithName: @"body" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _body error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_urgencyIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"urgency" type: TTypeI32 fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _urgency error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_timeOfCreationIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"timeOfCreation" type: TTypeI64 fieldID: 4 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _timeOfCreation error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_timeMessageReceivedIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"timeMessageReceived" type: TTypeI64 fieldID: 5 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _timeMessageReceived error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_applicationNameIsSet) {
    if (_applicationName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationName" type: TTypeSTRING fieldID: 6 error: __thriftError]) return NO;
      if (![outProtocol writeString: _applicationName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_hostnameIsSet) {
    if (_hostname != nil) {
      if (![outProtocol writeFieldBeginWithName: @"hostname" type: TTypeSTRING fieldID: 7 error: __thriftError]) return NO;
      if (![outProtocol writeString: _hostname error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_macAddressIsSet) {
    if (_macAddress != nil) {
      if (![outProtocol writeFieldBeginWithName: @"macAddress" type: TTypeSTRING fieldID: 8 error: __thriftError]) return NO;
      if (![outProtocol writeString: _macAddress error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_isTruncatedIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"isTruncated" type: TTypeBOOL fieldID: 9 error: __thriftError]) return NO;
    if (![outProtocol writeBool: _isTruncated error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_titleIsSet) {
    if (_title != nil) {
      if (![outProtocol writeFieldBeginWithName: @"title" type: TTypeSTRING fieldID: 10 error: __thriftError]) return NO;
      if (![outProtocol writeString: _title error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationIdIsSet) {
    if (_applicationId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationId" type: TTypeSTRING fieldID: 11 error: __thriftError]) return NO;
      if (![outProtocol writeString: _applicationId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_deviceNameIsSet) {
    if (_deviceName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"deviceName" type: TTypeSTRING fieldID: 12 error: __thriftError]) return NO;
      if (![outProtocol writeString: _deviceName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Aroma_Message("];
  [ms appendString: @"messageId:"];
  [ms appendFormat: @"\"%@\"", _messageId];
  [ms appendString: @",body:"];
  [ms appendFormat: @"\"%@\"", _body];
  [ms appendString: @",urgency:"];
  [ms appendFormat: @"%i", (int)_urgency];
  [ms appendString: @",timeOfCreation:"];
  [ms appendFormat: @"%qi", _timeOfCreation];
  [ms appendString: @",timeMessageReceived:"];
  [ms appendFormat: @"%qi", _timeMessageReceived];
  [ms appendString: @",applicationName:"];
  [ms appendFormat: @"\"%@\"", _applicationName];
  [ms appendString: @",hostname:"];
  [ms appendFormat: @"\"%@\"", _hostname];
  [ms appendString: @",macAddress:"];
  [ms appendFormat: @"\"%@\"", _macAddress];
  [ms appendString: @",isTruncated:"];
  [ms appendFormat: @"%i", _isTruncated];
  [ms appendString: @",title:"];
  [ms appendFormat: @"\"%@\"", _title];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", _applicationId];
  [ms appendString: @",deviceName:"];
  [ms appendFormat: @"\"%@\"", _deviceName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Aroma_Organization

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.tier = 1;

  }
  return self;
}

- (instancetype) initWithOrganizationId: (Aroma_uuid) organizationId organizationName: (NSString *) organizationName website: (NSString *) website logo: (Aroma_Image *) logo techStack: (NSString *) techStack owners: (NSArray<NSString *> *) owners organizationEmail: (NSString *) organizationEmail stockMarketSymbol: (NSString *) stockMarketSymbol logoLink: (NSString *) logoLink industry: (Aroma_Industry) industry tier: (Aroma_Tier) tier organizationDescription: (NSString *) organizationDescription githubProfile: (NSString *) githubProfile
{
  self = [super init];
  if (self)  {
    _organizationId = organizationId;
    _organizationIdIsSet = YES;
    _organizationName = organizationName;
    _organizationNameIsSet = YES;
    _website = website;
    _websiteIsSet = YES;
    _logo = logo;
    _logoIsSet = YES;
    _techStack = techStack;
    _techStackIsSet = YES;
    _owners = [owners mutableCopy];
    _ownersIsSet = YES;
    _organizationEmail = organizationEmail;
    _organizationEmailIsSet = YES;
    _stockMarketSymbol = stockMarketSymbol;
    _stockMarketSymbolIsSet = YES;
    _logoLink = logoLink;
    _logoLinkIsSet = YES;
    _industry = industry;
    _industryIsSet = YES;
    _tier = tier;
    _tierIsSet = YES;
    _organizationDescription = organizationDescription;
    _organizationDescriptionIsSet = YES;
    _githubProfile = githubProfile;
    _githubProfileIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"organizationId"])
    {
      _organizationId = [decoder decodeObjectForKey: @"organizationId"];
      _organizationIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"organizationName"])
    {
      _organizationName = [decoder decodeObjectForKey: @"organizationName"];
      _organizationNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"website"])
    {
      _website = [decoder decodeObjectForKey: @"website"];
      _websiteIsSet = YES;
    }
    if ([decoder containsValueForKey: @"logo"])
    {
      _logo = [decoder decodeObjectForKey: @"logo"];
      _logoIsSet = YES;
    }
    if ([decoder containsValueForKey: @"techStack"])
    {
      _techStack = [decoder decodeObjectForKey: @"techStack"];
      _techStackIsSet = YES;
    }
    if ([decoder containsValueForKey: @"owners"])
    {
      _owners = [decoder decodeObjectForKey: @"owners"];
      _ownersIsSet = YES;
    }
    if ([decoder containsValueForKey: @"organizationEmail"])
    {
      _organizationEmail = [decoder decodeObjectForKey: @"organizationEmail"];
      _organizationEmailIsSet = YES;
    }
    if ([decoder containsValueForKey: @"stockMarketSymbol"])
    {
      _stockMarketSymbol = [decoder decodeObjectForKey: @"stockMarketSymbol"];
      _stockMarketSymbolIsSet = YES;
    }
    if ([decoder containsValueForKey: @"logoLink"])
    {
      _logoLink = [decoder decodeObjectForKey: @"logoLink"];
      _logoLinkIsSet = YES;
    }
    if ([decoder containsValueForKey: @"industry"])
    {
      _industry = [decoder decodeIntForKey: @"industry"];
      _industryIsSet = YES;
    }
    if ([decoder containsValueForKey: @"tier"])
    {
      _tier = [decoder decodeIntForKey: @"tier"];
      _tierIsSet = YES;
    }
    if ([decoder containsValueForKey: @"organizationDescription"])
    {
      _organizationDescription = [decoder decodeObjectForKey: @"organizationDescription"];
      _organizationDescriptionIsSet = YES;
    }
    if ([decoder containsValueForKey: @"githubProfile"])
    {
      _githubProfile = [decoder decodeObjectForKey: @"githubProfile"];
      _githubProfileIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_organizationIdIsSet)
  {
    [encoder encodeObject: _organizationId forKey: @"organizationId"];
  }
  if (_organizationNameIsSet)
  {
    [encoder encodeObject: _organizationName forKey: @"organizationName"];
  }
  if (_websiteIsSet)
  {
    [encoder encodeObject: _website forKey: @"website"];
  }
  if (_logoIsSet)
  {
    [encoder encodeObject: _logo forKey: @"logo"];
  }
  if (_techStackIsSet)
  {
    [encoder encodeObject: _techStack forKey: @"techStack"];
  }
  if (_ownersIsSet)
  {
    [encoder encodeObject: _owners forKey: @"owners"];
  }
  if (_organizationEmailIsSet)
  {
    [encoder encodeObject: _organizationEmail forKey: @"organizationEmail"];
  }
  if (_stockMarketSymbolIsSet)
  {
    [encoder encodeObject: _stockMarketSymbol forKey: @"stockMarketSymbol"];
  }
  if (_logoLinkIsSet)
  {
    [encoder encodeObject: _logoLink forKey: @"logoLink"];
  }
  if (_industryIsSet)
  {
    [encoder encodeInt: _industry forKey: @"industry"];
  }
  if (_tierIsSet)
  {
    [encoder encodeInt: _tier forKey: @"tier"];
  }
  if (_organizationDescriptionIsSet)
  {
    [encoder encodeObject: _organizationDescription forKey: @"organizationDescription"];
  }
  if (_githubProfileIsSet)
  {
    [encoder encodeObject: _githubProfile forKey: @"githubProfile"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _organizationIdIsSet ? 2654435761 : 0;
  if (_organizationIdIsSet)
  {
    hash = (hash * 31) ^ [_organizationId hash];
  }
  hash = (hash * 31) ^ _organizationNameIsSet ? 2654435761 : 0;
  if (_organizationNameIsSet)
  {
    hash = (hash * 31) ^ [_organizationName hash];
  }
  hash = (hash * 31) ^ _websiteIsSet ? 2654435761 : 0;
  if (_websiteIsSet)
  {
    hash = (hash * 31) ^ [_website hash];
  }
  hash = (hash * 31) ^ _logoIsSet ? 2654435761 : 0;
  if (_logoIsSet)
  {
    hash = (hash * 31) ^ [_logo hash];
  }
  hash = (hash * 31) ^ _techStackIsSet ? 2654435761 : 0;
  if (_techStackIsSet)
  {
    hash = (hash * 31) ^ [_techStack hash];
  }
  hash = (hash * 31) ^ _ownersIsSet ? 2654435761 : 0;
  if (_ownersIsSet)
  {
    hash = (hash * 31) ^ [_owners hash];
  }
  hash = (hash * 31) ^ _organizationEmailIsSet ? 2654435761 : 0;
  if (_organizationEmailIsSet)
  {
    hash = (hash * 31) ^ [_organizationEmail hash];
  }
  hash = (hash * 31) ^ _stockMarketSymbolIsSet ? 2654435761 : 0;
  if (_stockMarketSymbolIsSet)
  {
    hash = (hash * 31) ^ [_stockMarketSymbol hash];
  }
  hash = (hash * 31) ^ _logoLinkIsSet ? 2654435761 : 0;
  if (_logoLinkIsSet)
  {
    hash = (hash * 31) ^ [_logoLink hash];
  }
  hash = (hash * 31) ^ _industryIsSet ? 2654435761 : 0;
  if (_industryIsSet)
  {
    hash = (hash * 31) ^ [@(_industry) hash];
  }
  hash = (hash * 31) ^ _tierIsSet ? 2654435761 : 0;
  if (_tierIsSet)
  {
    hash = (hash * 31) ^ [@(_tier) hash];
  }
  hash = (hash * 31) ^ _organizationDescriptionIsSet ? 2654435761 : 0;
  if (_organizationDescriptionIsSet)
  {
    hash = (hash * 31) ^ [_organizationDescription hash];
  }
  hash = (hash * 31) ^ _githubProfileIsSet ? 2654435761 : 0;
  if (_githubProfileIsSet)
  {
    hash = (hash * 31) ^ [_githubProfile hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Aroma_Organization class]]) {
    return NO;
  }
  Aroma_Organization *other = (Aroma_Organization *)anObject;
  if ((_organizationIdIsSet != other->_organizationIdIsSet) ||
      (_organizationIdIsSet && ((_organizationId || other->_organizationId) && ![_organizationId isEqual:other->_organizationId]))) {
    return NO;
  }
  if ((_organizationNameIsSet != other->_organizationNameIsSet) ||
      (_organizationNameIsSet && ((_organizationName || other->_organizationName) && ![_organizationName isEqual:other->_organizationName]))) {
    return NO;
  }
  if ((_websiteIsSet != other->_websiteIsSet) ||
      (_websiteIsSet && ((_website || other->_website) && ![_website isEqual:other->_website]))) {
    return NO;
  }
  if ((_logoIsSet != other->_logoIsSet) ||
      (_logoIsSet && ((_logo || other->_logo) && ![_logo isEqual:other->_logo]))) {
    return NO;
  }
  if ((_techStackIsSet != other->_techStackIsSet) ||
      (_techStackIsSet && ((_techStack || other->_techStack) && ![_techStack isEqual:other->_techStack]))) {
    return NO;
  }
  if ((_ownersIsSet != other->_ownersIsSet) ||
      (_ownersIsSet && ((_owners || other->_owners) && ![_owners isEqual:other->_owners]))) {
    return NO;
  }
  if ((_organizationEmailIsSet != other->_organizationEmailIsSet) ||
      (_organizationEmailIsSet && ((_organizationEmail || other->_organizationEmail) && ![_organizationEmail isEqual:other->_organizationEmail]))) {
    return NO;
  }
  if ((_stockMarketSymbolIsSet != other->_stockMarketSymbolIsSet) ||
      (_stockMarketSymbolIsSet && ((_stockMarketSymbol || other->_stockMarketSymbol) && ![_stockMarketSymbol isEqual:other->_stockMarketSymbol]))) {
    return NO;
  }
  if ((_logoLinkIsSet != other->_logoLinkIsSet) ||
      (_logoLinkIsSet && ((_logoLink || other->_logoLink) && ![_logoLink isEqual:other->_logoLink]))) {
    return NO;
  }
  if ((_industryIsSet != other->_industryIsSet) ||
      (_industryIsSet && (_industry != other->_industry))) {
    return NO;
  }
  if ((_tierIsSet != other->_tierIsSet) ||
      (_tierIsSet && (_tier != other->_tier))) {
    return NO;
  }
  if ((_organizationDescriptionIsSet != other->_organizationDescriptionIsSet) ||
      (_organizationDescriptionIsSet && ((_organizationDescription || other->_organizationDescription) && ![_organizationDescription isEqual:other->_organizationDescription]))) {
    return NO;
  }
  if ((_githubProfileIsSet != other->_githubProfileIsSet) ||
      (_githubProfileIsSet && ((_githubProfile || other->_githubProfile) && ![_githubProfile isEqual:other->_githubProfile]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  Aroma_Organization * val = [Aroma_Organization new];
  if (_organizationIdIsSet)
  {
    val.organizationId = [self.organizationId copy];
  }
  if (_organizationNameIsSet)
  {
    val.organizationName = [self.organizationName copy];
  }
  if (_websiteIsSet)
  {
    val.website = [self.website copy];
  }
  if (_logoIsSet)
  {
    val.logo = [self.logo copy];
  }
  if (_techStackIsSet)
  {
    val.techStack = [self.techStack copy];
  }
  if (_ownersIsSet)
  {
    val.owners = [self.owners copy];
  }
  if (_organizationEmailIsSet)
  {
    val.organizationEmail = [self.organizationEmail copy];
  }
  if (_stockMarketSymbolIsSet)
  {
    val.stockMarketSymbol = [self.stockMarketSymbol copy];
  }
  if (_logoLinkIsSet)
  {
    val.logoLink = [self.logoLink copy];
  }
  if (_industryIsSet)
  {
    val.industry = self.industry;
  }
  if (_tierIsSet)
  {
    val.tier = self.tier;
  }
  if (_organizationDescriptionIsSet)
  {
    val.organizationDescription = [self.organizationDescription copy];
  }
  if (_githubProfileIsSet)
  {
    val.githubProfile = [self.githubProfile copy];
  }
  return val;
}

- (void) setOrganizationId: (NSString *) organizationId {
  _organizationId = organizationId;
  _organizationIdIsSet = YES;
}

- (void) unsetOrganizationId {
  _organizationId = nil;
  _organizationIdIsSet = NO;
}

- (void) setOrganizationName: (NSString *) organizationName {
  _organizationName = organizationName;
  _organizationNameIsSet = YES;
}

- (void) unsetOrganizationName {
  _organizationName = nil;
  _organizationNameIsSet = NO;
}

- (void) setWebsite: (NSString *) website {
  _website = website;
  _websiteIsSet = YES;
}

- (void) unsetWebsite {
  _website = nil;
  _websiteIsSet = NO;
}

- (void) setLogo: (Aroma_Image *) logo {
  _logo = logo;
  _logoIsSet = YES;
}

- (void) unsetLogo {
  _logo = nil;
  _logoIsSet = NO;
}

- (void) setTechStack: (NSString *) techStack {
  _techStack = techStack;
  _techStackIsSet = YES;
}

- (void) unsetTechStack {
  _techStack = nil;
  _techStackIsSet = NO;
}

- (void) setOwners: (NSMutableArray<NSString *> *) owners {
  _owners = owners;
  _ownersIsSet = YES;
}

- (void) unsetOwners {
  _owners = nil;
  _ownersIsSet = NO;
}

- (void) setOrganizationEmail: (NSString *) organizationEmail {
  _organizationEmail = organizationEmail;
  _organizationEmailIsSet = YES;
}

- (void) unsetOrganizationEmail {
  _organizationEmail = nil;
  _organizationEmailIsSet = NO;
}

- (void) setStockMarketSymbol: (NSString *) stockMarketSymbol {
  _stockMarketSymbol = stockMarketSymbol;
  _stockMarketSymbolIsSet = YES;
}

- (void) unsetStockMarketSymbol {
  _stockMarketSymbol = nil;
  _stockMarketSymbolIsSet = NO;
}

- (void) setLogoLink: (NSString *) logoLink {
  _logoLink = logoLink;
  _logoLinkIsSet = YES;
}

- (void) unsetLogoLink {
  _logoLink = nil;
  _logoLinkIsSet = NO;
}

- (void) setIndustry: (Aroma_Industry) industry {
  _industry = industry;
  _industryIsSet = YES;
}

- (void) unsetIndustry {
  _industryIsSet = NO;
}

- (void) setTier: (Aroma_Tier) tier {
  _tier = tier;
  _tierIsSet = YES;
}

- (void) unsetTier {
  _tierIsSet = NO;
}

- (void) setOrganizationDescription: (NSString *) organizationDescription {
  _organizationDescription = organizationDescription;
  _organizationDescriptionIsSet = YES;
}

- (void) unsetOrganizationDescription {
  _organizationDescription = nil;
  _organizationDescriptionIsSet = NO;
}

- (void) setGithubProfile: (NSString *) githubProfile {
  _githubProfile = githubProfile;
  _githubProfileIsSet = YES;
}

- (void) unsetGithubProfile {
  _githubProfile = nil;
  _githubProfileIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.organizationId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.organizationName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.website = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          Aroma_Image *fieldValue = [[Aroma_Image alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.logo = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.techStack = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeLIST) {
          SInt32 _size0;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size0 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2;
            if (![inProtocol readString:&_elem2 error: __thriftError]) return NO;
            [fieldValue addObject: _elem2];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.owners = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 7:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.organizationEmail = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 8:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.stockMarketSymbol = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 9:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.logoLink = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 10:
        if (fieldType == TTypeI32) {
          Aroma_Industry fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.industry = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 11:
        if (fieldType == TTypeI32) {
          Aroma_Tier fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.tier = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 12:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.organizationDescription = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 13:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.githubProfile = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Organization" error: __thriftError]) return NO;
  if (_organizationIdIsSet) {
    if (_organizationId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"organizationId" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _organizationId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_organizationNameIsSet) {
    if (_organizationName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"organizationName" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _organizationName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_websiteIsSet) {
    if (_website != nil) {
      if (![outProtocol writeFieldBeginWithName: @"website" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _website error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_logoIsSet) {
    if (_logo != nil) {
      if (![outProtocol writeFieldBeginWithName: @"logo" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_logo write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_techStackIsSet) {
    if (_techStack != nil) {
      if (![outProtocol writeFieldBeginWithName: @"techStack" type: TTypeSTRING fieldID: 5 error: __thriftError]) return NO;
      if (![outProtocol writeString: _techStack error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_ownersIsSet) {
    if (_owners != nil) {
      if (![outProtocol writeFieldBeginWithName: @"owners" type: TTypeLIST fieldID: 6 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRING size: (SInt32)[_owners count] error: __thriftError]) return NO;
        int idx4;
        for (idx4 = 0; idx4 < [_owners count]; idx4++)
        {
          if (![outProtocol writeString: [_owners objectAtIndex: idx4] error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_organizationEmailIsSet) {
    if (_organizationEmail != nil) {
      if (![outProtocol writeFieldBeginWithName: @"organizationEmail" type: TTypeSTRING fieldID: 7 error: __thriftError]) return NO;
      if (![outProtocol writeString: _organizationEmail error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_stockMarketSymbolIsSet) {
    if (_stockMarketSymbol != nil) {
      if (![outProtocol writeFieldBeginWithName: @"stockMarketSymbol" type: TTypeSTRING fieldID: 8 error: __thriftError]) return NO;
      if (![outProtocol writeString: _stockMarketSymbol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_logoLinkIsSet) {
    if (_logoLink != nil) {
      if (![outProtocol writeFieldBeginWithName: @"logoLink" type: TTypeSTRING fieldID: 9 error: __thriftError]) return NO;
      if (![outProtocol writeString: _logoLink error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_industryIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"industry" type: TTypeI32 fieldID: 10 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _industry error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_tierIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"tier" type: TTypeI32 fieldID: 11 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _tier error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_organizationDescriptionIsSet) {
    if (_organizationDescription != nil) {
      if (![outProtocol writeFieldBeginWithName: @"organizationDescription" type: TTypeSTRING fieldID: 12 error: __thriftError]) return NO;
      if (![outProtocol writeString: _organizationDescription error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_githubProfileIsSet) {
    if (_githubProfile != nil) {
      if (![outProtocol writeFieldBeginWithName: @"githubProfile" type: TTypeSTRING fieldID: 13 error: __thriftError]) return NO;
      if (![outProtocol writeString: _githubProfile error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Aroma_Organization("];
  [ms appendString: @"organizationId:"];
  [ms appendFormat: @"\"%@\"", _organizationId];
  [ms appendString: @",organizationName:"];
  [ms appendFormat: @"\"%@\"", _organizationName];
  [ms appendString: @",website:"];
  [ms appendFormat: @"\"%@\"", _website];
  [ms appendString: @",logo:"];
  [ms appendFormat: @"%@", _logo];
  [ms appendString: @",techStack:"];
  [ms appendFormat: @"\"%@\"", _techStack];
  [ms appendString: @",owners:"];
  [ms appendFormat: @"%@", _owners];
  [ms appendString: @",organizationEmail:"];
  [ms appendFormat: @"\"%@\"", _organizationEmail];
  [ms appendString: @",stockMarketSymbol:"];
  [ms appendFormat: @"\"%@\"", _stockMarketSymbol];
  [ms appendString: @",logoLink:"];
  [ms appendFormat: @"\"%@\"", _logoLink];
  [ms appendString: @",industry:"];
  [ms appendFormat: @"%i", (int)_industry];
  [ms appendString: @",tier:"];
  [ms appendFormat: @"%i", (int)_tier];
  [ms appendString: @",organizationDescription:"];
  [ms appendFormat: @"\"%@\"", _organizationDescription];
  [ms appendString: @",githubProfile:"];
  [ms appendFormat: @"\"%@\"", _githubProfile];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Aroma_User

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.roles = [NSSet setWithArray:@[@(1)]]  }
  return self;
}

- (instancetype) initWithEmail: (NSString *) email userId: (Aroma_uuid) userId name: (NSString *) name roles: (NSSet<NSNumber *> *) roles profileImage: (Aroma_Image *) profileImage profileImageLink: (Aroma_uuid) profileImageLink githubProfile: (NSString *) githubProfile firstName: (NSString *) firstName middleName: (NSString *) middleName lastName: (NSString *) lastName birthdate: (Aroma_timestamp) birthdate timeUserJoined: (Aroma_timestamp) timeUserJoined
{
  self = [super init];
  if (self)  {
    _email = email;
    _emailIsSet = YES;
    _userId = userId;
    _userIdIsSet = YES;
    _name = name;
    _nameIsSet = YES;
    _roles = [roles mutableCopy];
    _rolesIsSet = YES;
    _profileImage = profileImage;
    _profileImageIsSet = YES;
    _profileImageLink = profileImageLink;
    _profileImageLinkIsSet = YES;
    _githubProfile = githubProfile;
    _githubProfileIsSet = YES;
    _firstName = firstName;
    _firstNameIsSet = YES;
    _middleName = middleName;
    _middleNameIsSet = YES;
    _lastName = lastName;
    _lastNameIsSet = YES;
    _birthdate = birthdate;
    _birthdateIsSet = YES;
    _timeUserJoined = timeUserJoined;
    _timeUserJoinedIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"email"])
    {
      _email = [decoder decodeObjectForKey: @"email"];
      _emailIsSet = YES;
    }
    if ([decoder containsValueForKey: @"userId"])
    {
      _userId = [decoder decodeObjectForKey: @"userId"];
      _userIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"name"])
    {
      _name = [decoder decodeObjectForKey: @"name"];
      _nameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"roles"])
    {
      _roles = [decoder decodeObjectForKey: @"roles"];
      _rolesIsSet = YES;
    }
    if ([decoder containsValueForKey: @"profileImage"])
    {
      _profileImage = [decoder decodeObjectForKey: @"profileImage"];
      _profileImageIsSet = YES;
    }
    if ([decoder containsValueForKey: @"profileImageLink"])
    {
      _profileImageLink = [decoder decodeObjectForKey: @"profileImageLink"];
      _profileImageLinkIsSet = YES;
    }
    if ([decoder containsValueForKey: @"githubProfile"])
    {
      _githubProfile = [decoder decodeObjectForKey: @"githubProfile"];
      _githubProfileIsSet = YES;
    }
    if ([decoder containsValueForKey: @"firstName"])
    {
      _firstName = [decoder decodeObjectForKey: @"firstName"];
      _firstNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"middleName"])
    {
      _middleName = [decoder decodeObjectForKey: @"middleName"];
      _middleNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"lastName"])
    {
      _lastName = [decoder decodeObjectForKey: @"lastName"];
      _lastNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"birthdate"])
    {
      _birthdate = [decoder decodeInt64ForKey: @"birthdate"];
      _birthdateIsSet = YES;
    }
    if ([decoder containsValueForKey: @"timeUserJoined"])
    {
      _timeUserJoined = [decoder decodeInt64ForKey: @"timeUserJoined"];
      _timeUserJoinedIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_emailIsSet)
  {
    [encoder encodeObject: _email forKey: @"email"];
  }
  if (_userIdIsSet)
  {
    [encoder encodeObject: _userId forKey: @"userId"];
  }
  if (_nameIsSet)
  {
    [encoder encodeObject: _name forKey: @"name"];
  }
  if (_rolesIsSet)
  {
    [encoder encodeObject: _roles forKey: @"roles"];
  }
  if (_profileImageIsSet)
  {
    [encoder encodeObject: _profileImage forKey: @"profileImage"];
  }
  if (_profileImageLinkIsSet)
  {
    [encoder encodeObject: _profileImageLink forKey: @"profileImageLink"];
  }
  if (_githubProfileIsSet)
  {
    [encoder encodeObject: _githubProfile forKey: @"githubProfile"];
  }
  if (_firstNameIsSet)
  {
    [encoder encodeObject: _firstName forKey: @"firstName"];
  }
  if (_middleNameIsSet)
  {
    [encoder encodeObject: _middleName forKey: @"middleName"];
  }
  if (_lastNameIsSet)
  {
    [encoder encodeObject: _lastName forKey: @"lastName"];
  }
  if (_birthdateIsSet)
  {
    [encoder encodeInt64: _birthdate forKey: @"birthdate"];
  }
  if (_timeUserJoinedIsSet)
  {
    [encoder encodeInt64: _timeUserJoined forKey: @"timeUserJoined"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _emailIsSet ? 2654435761 : 0;
  if (_emailIsSet)
  {
    hash = (hash * 31) ^ [_email hash];
  }
  hash = (hash * 31) ^ _userIdIsSet ? 2654435761 : 0;
  if (_userIdIsSet)
  {
    hash = (hash * 31) ^ [_userId hash];
  }
  hash = (hash * 31) ^ _nameIsSet ? 2654435761 : 0;
  if (_nameIsSet)
  {
    hash = (hash * 31) ^ [_name hash];
  }
  hash = (hash * 31) ^ _rolesIsSet ? 2654435761 : 0;
  if (_rolesIsSet)
  {
    hash = (hash * 31) ^ [_roles hash];
  }
  hash = (hash * 31) ^ _profileImageIsSet ? 2654435761 : 0;
  if (_profileImageIsSet)
  {
    hash = (hash * 31) ^ [_profileImage hash];
  }
  hash = (hash * 31) ^ _profileImageLinkIsSet ? 2654435761 : 0;
  if (_profileImageLinkIsSet)
  {
    hash = (hash * 31) ^ [_profileImageLink hash];
  }
  hash = (hash * 31) ^ _githubProfileIsSet ? 2654435761 : 0;
  if (_githubProfileIsSet)
  {
    hash = (hash * 31) ^ [_githubProfile hash];
  }
  hash = (hash * 31) ^ _firstNameIsSet ? 2654435761 : 0;
  if (_firstNameIsSet)
  {
    hash = (hash * 31) ^ [_firstName hash];
  }
  hash = (hash * 31) ^ _middleNameIsSet ? 2654435761 : 0;
  if (_middleNameIsSet)
  {
    hash = (hash * 31) ^ [_middleName hash];
  }
  hash = (hash * 31) ^ _lastNameIsSet ? 2654435761 : 0;
  if (_lastNameIsSet)
  {
    hash = (hash * 31) ^ [_lastName hash];
  }
  hash = (hash * 31) ^ _birthdateIsSet ? 2654435761 : 0;
  if (_birthdateIsSet)
  {
    hash = (hash * 31) ^ [@(_birthdate) hash];
  }
  hash = (hash * 31) ^ _timeUserJoinedIsSet ? 2654435761 : 0;
  if (_timeUserJoinedIsSet)
  {
    hash = (hash * 31) ^ [@(_timeUserJoined) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Aroma_User class]]) {
    return NO;
  }
  Aroma_User *other = (Aroma_User *)anObject;
  if ((_emailIsSet != other->_emailIsSet) ||
      (_emailIsSet && ((_email || other->_email) && ![_email isEqual:other->_email]))) {
    return NO;
  }
  if ((_userIdIsSet != other->_userIdIsSet) ||
      (_userIdIsSet && ((_userId || other->_userId) && ![_userId isEqual:other->_userId]))) {
    return NO;
  }
  if ((_nameIsSet != other->_nameIsSet) ||
      (_nameIsSet && ((_name || other->_name) && ![_name isEqual:other->_name]))) {
    return NO;
  }
  if ((_rolesIsSet != other->_rolesIsSet) ||
      (_rolesIsSet && ((_roles || other->_roles) && ![_roles isEqual:other->_roles]))) {
    return NO;
  }
  if ((_profileImageIsSet != other->_profileImageIsSet) ||
      (_profileImageIsSet && ((_profileImage || other->_profileImage) && ![_profileImage isEqual:other->_profileImage]))) {
    return NO;
  }
  if ((_profileImageLinkIsSet != other->_profileImageLinkIsSet) ||
      (_profileImageLinkIsSet && ((_profileImageLink || other->_profileImageLink) && ![_profileImageLink isEqual:other->_profileImageLink]))) {
    return NO;
  }
  if ((_githubProfileIsSet != other->_githubProfileIsSet) ||
      (_githubProfileIsSet && ((_githubProfile || other->_githubProfile) && ![_githubProfile isEqual:other->_githubProfile]))) {
    return NO;
  }
  if ((_firstNameIsSet != other->_firstNameIsSet) ||
      (_firstNameIsSet && ((_firstName || other->_firstName) && ![_firstName isEqual:other->_firstName]))) {
    return NO;
  }
  if ((_middleNameIsSet != other->_middleNameIsSet) ||
      (_middleNameIsSet && ((_middleName || other->_middleName) && ![_middleName isEqual:other->_middleName]))) {
    return NO;
  }
  if ((_lastNameIsSet != other->_lastNameIsSet) ||
      (_lastNameIsSet && ((_lastName || other->_lastName) && ![_lastName isEqual:other->_lastName]))) {
    return NO;
  }
  if ((_birthdateIsSet != other->_birthdateIsSet) ||
      (_birthdateIsSet && (_birthdate != other->_birthdate))) {
    return NO;
  }
  if ((_timeUserJoinedIsSet != other->_timeUserJoinedIsSet) ||
      (_timeUserJoinedIsSet && (_timeUserJoined != other->_timeUserJoined))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  Aroma_User * val = [Aroma_User new];
  if (_emailIsSet)
  {
    val.email = [self.email copy];
  }
  if (_userIdIsSet)
  {
    val.userId = [self.userId copy];
  }
  if (_nameIsSet)
  {
    val.name = [self.name copy];
  }
  if (_rolesIsSet)
  {
    val.roles = [self.roles copy];
  }
  if (_profileImageIsSet)
  {
    val.profileImage = [self.profileImage copy];
  }
  if (_profileImageLinkIsSet)
  {
    val.profileImageLink = [self.profileImageLink copy];
  }
  if (_githubProfileIsSet)
  {
    val.githubProfile = [self.githubProfile copy];
  }
  if (_firstNameIsSet)
  {
    val.firstName = [self.firstName copy];
  }
  if (_middleNameIsSet)
  {
    val.middleName = [self.middleName copy];
  }
  if (_lastNameIsSet)
  {
    val.lastName = [self.lastName copy];
  }
  if (_birthdateIsSet)
  {
    val.birthdate = self.birthdate;
  }
  if (_timeUserJoinedIsSet)
  {
    val.timeUserJoined = self.timeUserJoined;
  }
  return val;
}

- (void) setEmail: (NSString *) email {
  _email = email;
  _emailIsSet = YES;
}

- (void) unsetEmail {
  _email = nil;
  _emailIsSet = NO;
}

- (void) setUserId: (NSString *) userId {
  _userId = userId;
  _userIdIsSet = YES;
}

- (void) unsetUserId {
  _userId = nil;
  _userIdIsSet = NO;
}

- (void) setName: (NSString *) name {
  _name = name;
  _nameIsSet = YES;
}

- (void) unsetName {
  _name = nil;
  _nameIsSet = NO;
}

- (void) setRoles: (NSMutableSet<NSNumber *> *) roles {
  _roles = roles;
  _rolesIsSet = YES;
}

- (void) unsetRoles {
  _roles = nil;
  _rolesIsSet = NO;
}

- (void) setProfileImage: (Aroma_Image *) profileImage {
  _profileImage = profileImage;
  _profileImageIsSet = YES;
}

- (void) unsetProfileImage {
  _profileImage = nil;
  _profileImageIsSet = NO;
}

- (void) setProfileImageLink: (NSString *) profileImageLink {
  _profileImageLink = profileImageLink;
  _profileImageLinkIsSet = YES;
}

- (void) unsetProfileImageLink {
  _profileImageLink = nil;
  _profileImageLinkIsSet = NO;
}

- (void) setGithubProfile: (NSString *) githubProfile {
  _githubProfile = githubProfile;
  _githubProfileIsSet = YES;
}

- (void) unsetGithubProfile {
  _githubProfile = nil;
  _githubProfileIsSet = NO;
}

- (void) setFirstName: (NSString *) firstName {
  _firstName = firstName;
  _firstNameIsSet = YES;
}

- (void) unsetFirstName {
  _firstName = nil;
  _firstNameIsSet = NO;
}

- (void) setMiddleName: (NSString *) middleName {
  _middleName = middleName;
  _middleNameIsSet = YES;
}

- (void) unsetMiddleName {
  _middleName = nil;
  _middleNameIsSet = NO;
}

- (void) setLastName: (NSString *) lastName {
  _lastName = lastName;
  _lastNameIsSet = YES;
}

- (void) unsetLastName {
  _lastName = nil;
  _lastNameIsSet = NO;
}

- (void) setBirthdate: (SInt64) birthdate {
  _birthdate = birthdate;
  _birthdateIsSet = YES;
}

- (void) unsetBirthdate {
  _birthdateIsSet = NO;
}

- (void) setTimeUserJoined: (SInt64) timeUserJoined {
  _timeUserJoined = timeUserJoined;
  _timeUserJoinedIsSet = YES;
}

- (void) unsetTimeUserJoined {
  _timeUserJoinedIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.email = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.userId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.name = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSET) {
          SInt32 _size5;
          if (![inProtocol readSetBeginReturningElementType: NULL size: &_size5 error: __thriftError]) return NO;
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            Aroma_Role _elem7;
            if (![inProtocol readI32:&_elem7 error: __thriftError]) return NO;
            [fieldValue addObject: @(_elem7)];
          }
          if (![inProtocol readSetEnd: __thriftError]) return NO;
          self.roles = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          Aroma_Image *fieldValue = [[Aroma_Image alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.profileImage = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.profileImageLink = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 7:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.githubProfile = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 8:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.firstName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 9:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.middleName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 10:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.lastName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 11:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.birthdate = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 12:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.timeUserJoined = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"User" error: __thriftError]) return NO;
  if (_emailIsSet) {
    if (_email != nil) {
      if (![outProtocol writeFieldBeginWithName: @"email" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _email error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_userIdIsSet) {
    if (_userId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _userId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_nameIsSet) {
    if (_name != nil) {
      if (![outProtocol writeFieldBeginWithName: @"name" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _name error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_rolesIsSet) {
    if (_roles != nil) {
      if (![outProtocol writeFieldBeginWithName: @"roles" type: TTypeSET fieldID: 4 error: __thriftError]) return NO;
      {
        if (![outProtocol writeSetBeginWithElementType: TTypeI32 size: (SInt32)[_roles count] error: __thriftError]) return NO;
        NSEnumerator * _iter8 = [_roles objectEnumerator];
        id obj9;
        while ((obj9 = [_iter8 nextObject]))
        {
          if (![outProtocol writeI32: [obj9 intValue] error: __thriftError]) return NO;
        }
        if (![outProtocol writeSetEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_profileImageIsSet) {
    if (_profileImage != nil) {
      if (![outProtocol writeFieldBeginWithName: @"profileImage" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_profileImage write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_profileImageLinkIsSet) {
    if (_profileImageLink != nil) {
      if (![outProtocol writeFieldBeginWithName: @"profileImageLink" type: TTypeSTRING fieldID: 6 error: __thriftError]) return NO;
      if (![outProtocol writeString: _profileImageLink error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_githubProfileIsSet) {
    if (_githubProfile != nil) {
      if (![outProtocol writeFieldBeginWithName: @"githubProfile" type: TTypeSTRING fieldID: 7 error: __thriftError]) return NO;
      if (![outProtocol writeString: _githubProfile error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_firstNameIsSet) {
    if (_firstName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"firstName" type: TTypeSTRING fieldID: 8 error: __thriftError]) return NO;
      if (![outProtocol writeString: _firstName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_middleNameIsSet) {
    if (_middleName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"middleName" type: TTypeSTRING fieldID: 9 error: __thriftError]) return NO;
      if (![outProtocol writeString: _middleName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_lastNameIsSet) {
    if (_lastName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"lastName" type: TTypeSTRING fieldID: 10 error: __thriftError]) return NO;
      if (![outProtocol writeString: _lastName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_birthdateIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"birthdate" type: TTypeI64 fieldID: 11 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _birthdate error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_timeUserJoinedIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"timeUserJoined" type: TTypeI64 fieldID: 12 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _timeUserJoined error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Aroma_User("];
  [ms appendString: @"email:"];
  [ms appendFormat: @"\"%@\"", _email];
  [ms appendString: @",userId:"];
  [ms appendFormat: @"\"%@\"", _userId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", _name];
  [ms appendString: @",roles:"];
  [ms appendFormat: @"%@", _roles];
  [ms appendString: @",profileImage:"];
  [ms appendFormat: @"%@", _profileImage];
  [ms appendString: @",profileImageLink:"];
  [ms appendFormat: @"\"%@\"", _profileImageLink];
  [ms appendString: @",githubProfile:"];
  [ms appendFormat: @"\"%@\"", _githubProfile];
  [ms appendString: @",firstName:"];
  [ms appendFormat: @"\"%@\"", _firstName];
  [ms appendString: @",middleName:"];
  [ms appendFormat: @"\"%@\"", _middleName];
  [ms appendString: @",lastName:"];
  [ms appendFormat: @"\"%@\"", _lastName];
  [ms appendString: @",birthdate:"];
  [ms appendFormat: @"%qi", _birthdate];
  [ms appendString: @",timeUserJoined:"];
  [ms appendFormat: @"%qi", _timeUserJoined];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Aroma_Application

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.followers = [NSSet setWithArray:@[]]    self.tier = 1;

  }
  return self;
}

- (instancetype) initWithOwners: (NSSet<Aroma_uuid> *) owners timeOfProvisioning: (Aroma_timestamp) timeOfProvisioning name: (NSString *) name applicationId: (Aroma_uuid) applicationId totalMessagesSent: (Aroma_long) totalMessagesSent icon: (Aroma_Image *) icon programmingLanguage: (Aroma_ProgrammingLanguage) programmingLanguage followers: (NSSet<Aroma_uuid> *) followers applicationDescription: (NSString *) applicationDescription organizationId: (Aroma_uuid) organizationId tier: (Aroma_Tier) tier timeOfTokenExpiration: (Aroma_timestamp) timeOfTokenExpiration applicationIconMediaId: (Aroma_uuid) applicationIconMediaId isFollowing: (BOOL) isFollowing
{
  self = [super init];
  if (self)  {
    _owners = [owners mutableCopy];
    _ownersIsSet = YES;
    _timeOfProvisioning = timeOfProvisioning;
    _timeOfProvisioningIsSet = YES;
    _name = name;
    _nameIsSet = YES;
    _applicationId = applicationId;
    _applicationIdIsSet = YES;
    _totalMessagesSent = totalMessagesSent;
    _totalMessagesSentIsSet = YES;
    _icon = icon;
    _iconIsSet = YES;
    _programmingLanguage = programmingLanguage;
    _programmingLanguageIsSet = YES;
    _followers = [followers mutableCopy];
    _followersIsSet = YES;
    _applicationDescription = applicationDescription;
    _applicationDescriptionIsSet = YES;
    _organizationId = organizationId;
    _organizationIdIsSet = YES;
    _tier = tier;
    _tierIsSet = YES;
    _timeOfTokenExpiration = timeOfTokenExpiration;
    _timeOfTokenExpirationIsSet = YES;
    _applicationIconMediaId = applicationIconMediaId;
    _applicationIconMediaIdIsSet = YES;
    _isFollowing = isFollowing;
    _isFollowingIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"owners"])
    {
      _owners = [decoder decodeObjectForKey: @"owners"];
      _ownersIsSet = YES;
    }
    if ([decoder containsValueForKey: @"timeOfProvisioning"])
    {
      _timeOfProvisioning = [decoder decodeInt64ForKey: @"timeOfProvisioning"];
      _timeOfProvisioningIsSet = YES;
    }
    if ([decoder containsValueForKey: @"name"])
    {
      _name = [decoder decodeObjectForKey: @"name"];
      _nameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationId"])
    {
      _applicationId = [decoder decodeObjectForKey: @"applicationId"];
      _applicationIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"totalMessagesSent"])
    {
      _totalMessagesSent = [decoder decodeInt64ForKey: @"totalMessagesSent"];
      _totalMessagesSentIsSet = YES;
    }
    if ([decoder containsValueForKey: @"icon"])
    {
      _icon = [decoder decodeObjectForKey: @"icon"];
      _iconIsSet = YES;
    }
    if ([decoder containsValueForKey: @"programmingLanguage"])
    {
      _programmingLanguage = [decoder decodeIntForKey: @"programmingLanguage"];
      _programmingLanguageIsSet = YES;
    }
    if ([decoder containsValueForKey: @"followers"])
    {
      _followers = [decoder decodeObjectForKey: @"followers"];
      _followersIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationDescription"])
    {
      _applicationDescription = [decoder decodeObjectForKey: @"applicationDescription"];
      _applicationDescriptionIsSet = YES;
    }
    if ([decoder containsValueForKey: @"organizationId"])
    {
      _organizationId = [decoder decodeObjectForKey: @"organizationId"];
      _organizationIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"tier"])
    {
      _tier = [decoder decodeIntForKey: @"tier"];
      _tierIsSet = YES;
    }
    if ([decoder containsValueForKey: @"timeOfTokenExpiration"])
    {
      _timeOfTokenExpiration = [decoder decodeInt64ForKey: @"timeOfTokenExpiration"];
      _timeOfTokenExpirationIsSet = YES;
    }
    if ([decoder containsValueForKey: @"applicationIconMediaId"])
    {
      _applicationIconMediaId = [decoder decodeObjectForKey: @"applicationIconMediaId"];
      _applicationIconMediaIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"isFollowing"])
    {
      _isFollowing = [decoder decodeBoolForKey: @"isFollowing"];
      _isFollowingIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_ownersIsSet)
  {
    [encoder encodeObject: _owners forKey: @"owners"];
  }
  if (_timeOfProvisioningIsSet)
  {
    [encoder encodeInt64: _timeOfProvisioning forKey: @"timeOfProvisioning"];
  }
  if (_nameIsSet)
  {
    [encoder encodeObject: _name forKey: @"name"];
  }
  if (_applicationIdIsSet)
  {
    [encoder encodeObject: _applicationId forKey: @"applicationId"];
  }
  if (_totalMessagesSentIsSet)
  {
    [encoder encodeInt64: _totalMessagesSent forKey: @"totalMessagesSent"];
  }
  if (_iconIsSet)
  {
    [encoder encodeObject: _icon forKey: @"icon"];
  }
  if (_programmingLanguageIsSet)
  {
    [encoder encodeInt: _programmingLanguage forKey: @"programmingLanguage"];
  }
  if (_followersIsSet)
  {
    [encoder encodeObject: _followers forKey: @"followers"];
  }
  if (_applicationDescriptionIsSet)
  {
    [encoder encodeObject: _applicationDescription forKey: @"applicationDescription"];
  }
  if (_organizationIdIsSet)
  {
    [encoder encodeObject: _organizationId forKey: @"organizationId"];
  }
  if (_tierIsSet)
  {
    [encoder encodeInt: _tier forKey: @"tier"];
  }
  if (_timeOfTokenExpirationIsSet)
  {
    [encoder encodeInt64: _timeOfTokenExpiration forKey: @"timeOfTokenExpiration"];
  }
  if (_applicationIconMediaIdIsSet)
  {
    [encoder encodeObject: _applicationIconMediaId forKey: @"applicationIconMediaId"];
  }
  if (_isFollowingIsSet)
  {
    [encoder encodeBool: _isFollowing forKey: @"isFollowing"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _ownersIsSet ? 2654435761 : 0;
  if (_ownersIsSet)
  {
    hash = (hash * 31) ^ [_owners hash];
  }
  hash = (hash * 31) ^ _timeOfProvisioningIsSet ? 2654435761 : 0;
  if (_timeOfProvisioningIsSet)
  {
    hash = (hash * 31) ^ [@(_timeOfProvisioning) hash];
  }
  hash = (hash * 31) ^ _nameIsSet ? 2654435761 : 0;
  if (_nameIsSet)
  {
    hash = (hash * 31) ^ [_name hash];
  }
  hash = (hash * 31) ^ _applicationIdIsSet ? 2654435761 : 0;
  if (_applicationIdIsSet)
  {
    hash = (hash * 31) ^ [_applicationId hash];
  }
  hash = (hash * 31) ^ _totalMessagesSentIsSet ? 2654435761 : 0;
  if (_totalMessagesSentIsSet)
  {
    hash = (hash * 31) ^ [@(_totalMessagesSent) hash];
  }
  hash = (hash * 31) ^ _iconIsSet ? 2654435761 : 0;
  if (_iconIsSet)
  {
    hash = (hash * 31) ^ [_icon hash];
  }
  hash = (hash * 31) ^ _programmingLanguageIsSet ? 2654435761 : 0;
  if (_programmingLanguageIsSet)
  {
    hash = (hash * 31) ^ [@(_programmingLanguage) hash];
  }
  hash = (hash * 31) ^ _followersIsSet ? 2654435761 : 0;
  if (_followersIsSet)
  {
    hash = (hash * 31) ^ [_followers hash];
  }
  hash = (hash * 31) ^ _applicationDescriptionIsSet ? 2654435761 : 0;
  if (_applicationDescriptionIsSet)
  {
    hash = (hash * 31) ^ [_applicationDescription hash];
  }
  hash = (hash * 31) ^ _organizationIdIsSet ? 2654435761 : 0;
  if (_organizationIdIsSet)
  {
    hash = (hash * 31) ^ [_organizationId hash];
  }
  hash = (hash * 31) ^ _tierIsSet ? 2654435761 : 0;
  if (_tierIsSet)
  {
    hash = (hash * 31) ^ [@(_tier) hash];
  }
  hash = (hash * 31) ^ _timeOfTokenExpirationIsSet ? 2654435761 : 0;
  if (_timeOfTokenExpirationIsSet)
  {
    hash = (hash * 31) ^ [@(_timeOfTokenExpiration) hash];
  }
  hash = (hash * 31) ^ _applicationIconMediaIdIsSet ? 2654435761 : 0;
  if (_applicationIconMediaIdIsSet)
  {
    hash = (hash * 31) ^ [_applicationIconMediaId hash];
  }
  hash = (hash * 31) ^ _isFollowingIsSet ? 2654435761 : 0;
  if (_isFollowingIsSet)
  {
    hash = (hash * 31) ^ [@(_isFollowing) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Aroma_Application class]]) {
    return NO;
  }
  Aroma_Application *other = (Aroma_Application *)anObject;
  if ((_ownersIsSet != other->_ownersIsSet) ||
      (_ownersIsSet && ((_owners || other->_owners) && ![_owners isEqual:other->_owners]))) {
    return NO;
  }
  if ((_timeOfProvisioningIsSet != other->_timeOfProvisioningIsSet) ||
      (_timeOfProvisioningIsSet && (_timeOfProvisioning != other->_timeOfProvisioning))) {
    return NO;
  }
  if ((_nameIsSet != other->_nameIsSet) ||
      (_nameIsSet && ((_name || other->_name) && ![_name isEqual:other->_name]))) {
    return NO;
  }
  if ((_applicationIdIsSet != other->_applicationIdIsSet) ||
      (_applicationIdIsSet && ((_applicationId || other->_applicationId) && ![_applicationId isEqual:other->_applicationId]))) {
    return NO;
  }
  if ((_totalMessagesSentIsSet != other->_totalMessagesSentIsSet) ||
      (_totalMessagesSentIsSet && (_totalMessagesSent != other->_totalMessagesSent))) {
    return NO;
  }
  if ((_iconIsSet != other->_iconIsSet) ||
      (_iconIsSet && ((_icon || other->_icon) && ![_icon isEqual:other->_icon]))) {
    return NO;
  }
  if ((_programmingLanguageIsSet != other->_programmingLanguageIsSet) ||
      (_programmingLanguageIsSet && (_programmingLanguage != other->_programmingLanguage))) {
    return NO;
  }
  if ((_followersIsSet != other->_followersIsSet) ||
      (_followersIsSet && ((_followers || other->_followers) && ![_followers isEqual:other->_followers]))) {
    return NO;
  }
  if ((_applicationDescriptionIsSet != other->_applicationDescriptionIsSet) ||
      (_applicationDescriptionIsSet && ((_applicationDescription || other->_applicationDescription) && ![_applicationDescription isEqual:other->_applicationDescription]))) {
    return NO;
  }
  if ((_organizationIdIsSet != other->_organizationIdIsSet) ||
      (_organizationIdIsSet && ((_organizationId || other->_organizationId) && ![_organizationId isEqual:other->_organizationId]))) {
    return NO;
  }
  if ((_tierIsSet != other->_tierIsSet) ||
      (_tierIsSet && (_tier != other->_tier))) {
    return NO;
  }
  if ((_timeOfTokenExpirationIsSet != other->_timeOfTokenExpirationIsSet) ||
      (_timeOfTokenExpirationIsSet && (_timeOfTokenExpiration != other->_timeOfTokenExpiration))) {
    return NO;
  }
  if ((_applicationIconMediaIdIsSet != other->_applicationIconMediaIdIsSet) ||
      (_applicationIconMediaIdIsSet && ((_applicationIconMediaId || other->_applicationIconMediaId) && ![_applicationIconMediaId isEqual:other->_applicationIconMediaId]))) {
    return NO;
  }
  if ((_isFollowingIsSet != other->_isFollowingIsSet) ||
      (_isFollowingIsSet && (_isFollowing != other->_isFollowing))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  Aroma_Application * val = [Aroma_Application new];
  if (_ownersIsSet)
  {
    val.owners = [self.owners copy];
  }
  if (_timeOfProvisioningIsSet)
  {
    val.timeOfProvisioning = self.timeOfProvisioning;
  }
  if (_nameIsSet)
  {
    val.name = [self.name copy];
  }
  if (_applicationIdIsSet)
  {
    val.applicationId = [self.applicationId copy];
  }
  if (_totalMessagesSentIsSet)
  {
    val.totalMessagesSent = self.totalMessagesSent;
  }
  if (_iconIsSet)
  {
    val.icon = [self.icon copy];
  }
  if (_programmingLanguageIsSet)
  {
    val.programmingLanguage = self.programmingLanguage;
  }
  if (_followersIsSet)
  {
    val.followers = [self.followers copy];
  }
  if (_applicationDescriptionIsSet)
  {
    val.applicationDescription = [self.applicationDescription copy];
  }
  if (_organizationIdIsSet)
  {
    val.organizationId = [self.organizationId copy];
  }
  if (_tierIsSet)
  {
    val.tier = self.tier;
  }
  if (_timeOfTokenExpirationIsSet)
  {
    val.timeOfTokenExpiration = self.timeOfTokenExpiration;
  }
  if (_applicationIconMediaIdIsSet)
  {
    val.applicationIconMediaId = [self.applicationIconMediaId copy];
  }
  if (_isFollowingIsSet)
  {
    val.isFollowing = self.isFollowing;
  }
  return val;
}

- (void) setOwners: (NSMutableSet<Aroma_uuid> *) owners {
  _owners = owners;
  _ownersIsSet = YES;
}

- (void) unsetOwners {
  _owners = nil;
  _ownersIsSet = NO;
}

- (void) setTimeOfProvisioning: (SInt64) timeOfProvisioning {
  _timeOfProvisioning = timeOfProvisioning;
  _timeOfProvisioningIsSet = YES;
}

- (void) unsetTimeOfProvisioning {
  _timeOfProvisioningIsSet = NO;
}

- (void) setName: (NSString *) name {
  _name = name;
  _nameIsSet = YES;
}

- (void) unsetName {
  _name = nil;
  _nameIsSet = NO;
}

- (void) setApplicationId: (NSString *) applicationId {
  _applicationId = applicationId;
  _applicationIdIsSet = YES;
}

- (void) unsetApplicationId {
  _applicationId = nil;
  _applicationIdIsSet = NO;
}

- (void) setTotalMessagesSent: (SInt64) totalMessagesSent {
  _totalMessagesSent = totalMessagesSent;
  _totalMessagesSentIsSet = YES;
}

- (void) unsetTotalMessagesSent {
  _totalMessagesSentIsSet = NO;
}

- (void) setIcon: (Aroma_Image *) icon {
  _icon = icon;
  _iconIsSet = YES;
}

- (void) unsetIcon {
  _icon = nil;
  _iconIsSet = NO;
}

- (void) setProgrammingLanguage: (Aroma_ProgrammingLanguage) programmingLanguage {
  _programmingLanguage = programmingLanguage;
  _programmingLanguageIsSet = YES;
}

- (void) unsetProgrammingLanguage {
  _programmingLanguageIsSet = NO;
}

- (void) setFollowers: (NSMutableSet<Aroma_uuid> *) followers {
  _followers = followers;
  _followersIsSet = YES;
}

- (void) unsetFollowers {
  _followers = nil;
  _followersIsSet = NO;
}

- (void) setApplicationDescription: (NSString *) applicationDescription {
  _applicationDescription = applicationDescription;
  _applicationDescriptionIsSet = YES;
}

- (void) unsetApplicationDescription {
  _applicationDescription = nil;
  _applicationDescriptionIsSet = NO;
}

- (void) setOrganizationId: (NSString *) organizationId {
  _organizationId = organizationId;
  _organizationIdIsSet = YES;
}

- (void) unsetOrganizationId {
  _organizationId = nil;
  _organizationIdIsSet = NO;
}

- (void) setTier: (Aroma_Tier) tier {
  _tier = tier;
  _tierIsSet = YES;
}

- (void) unsetTier {
  _tierIsSet = NO;
}

- (void) setTimeOfTokenExpiration: (SInt64) timeOfTokenExpiration {
  _timeOfTokenExpiration = timeOfTokenExpiration;
  _timeOfTokenExpirationIsSet = YES;
}

- (void) unsetTimeOfTokenExpiration {
  _timeOfTokenExpirationIsSet = NO;
}

- (void) setApplicationIconMediaId: (NSString *) applicationIconMediaId {
  _applicationIconMediaId = applicationIconMediaId;
  _applicationIconMediaIdIsSet = YES;
}

- (void) unsetApplicationIconMediaId {
  _applicationIconMediaId = nil;
  _applicationIconMediaIdIsSet = NO;
}

- (void) setIsFollowing: (BOOL) isFollowing {
  _isFollowing = isFollowing;
  _isFollowingIsSet = YES;
}

- (void) unsetIsFollowing {
  _isFollowingIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSET) {
          SInt32 _size10;
          if (![inProtocol readSetBeginReturningElementType: NULL size: &_size10 error: __thriftError]) return NO;
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            NSString * _elem12;
            if (![inProtocol readString:&_elem12 error: __thriftError]) return NO;
            [fieldValue addObject: _elem12];
          }
          if (![inProtocol readSetEnd: __thriftError]) return NO;
          self.owners = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.timeOfProvisioning = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.name = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.applicationId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.totalMessagesSent = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeSTRUCT) {
          Aroma_Image *fieldValue = [[Aroma_Image alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.icon = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 7:
        if (fieldType == TTypeI32) {
          Aroma_ProgrammingLanguage fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.programmingLanguage = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 8:
        if (fieldType == TTypeSET) {
          SInt32 _size13;
          if (![inProtocol readSetBeginReturningElementType: NULL size: &_size13 error: __thriftError]) return NO;
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size13];
          int _i14;
          for (_i14 = 0; _i14 < _size13; ++_i14)
          {
            NSString * _elem15;
            if (![inProtocol readString:&_elem15 error: __thriftError]) return NO;
            [fieldValue addObject: _elem15];
          }
          if (![inProtocol readSetEnd: __thriftError]) return NO;
          self.followers = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 9:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.applicationDescription = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 10:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.organizationId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 11:
        if (fieldType == TTypeI32) {
          Aroma_Tier fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.tier = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 12:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.timeOfTokenExpiration = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 13:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.applicationIconMediaId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 14:
        if (fieldType == TTypeBOOL) {
          BOOL fieldValue;
          if (![inProtocol readBool:&fieldValue error: __thriftError]) return NO;
          self.isFollowing = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Application" error: __thriftError]) return NO;
  if (_ownersIsSet) {
    if (_owners != nil) {
      if (![outProtocol writeFieldBeginWithName: @"owners" type: TTypeSET fieldID: 1 error: __thriftError]) return NO;
      {
        if (![outProtocol writeSetBeginWithElementType: TTypeSTRING size: (SInt32)[_owners count] error: __thriftError]) return NO;
        NSEnumerator * _iter16 = [_owners objectEnumerator];
        id obj17;
        while ((obj17 = [_iter16 nextObject]))
        {
          if (![outProtocol writeString: obj17 error: __thriftError]) return NO;
        }
        if (![outProtocol writeSetEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_timeOfProvisioningIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"timeOfProvisioning" type: TTypeI64 fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _timeOfProvisioning error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_nameIsSet) {
    if (_name != nil) {
      if (![outProtocol writeFieldBeginWithName: @"name" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _name error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationIdIsSet) {
    if (_applicationId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationId" type: TTypeSTRING fieldID: 4 error: __thriftError]) return NO;
      if (![outProtocol writeString: _applicationId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_totalMessagesSentIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"totalMessagesSent" type: TTypeI64 fieldID: 5 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _totalMessagesSent error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_iconIsSet) {
    if (_icon != nil) {
      if (![outProtocol writeFieldBeginWithName: @"icon" type: TTypeSTRUCT fieldID: 6 error: __thriftError]) return NO;
      if (![_icon write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_programmingLanguageIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"programmingLanguage" type: TTypeI32 fieldID: 7 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _programmingLanguage error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_followersIsSet) {
    if (_followers != nil) {
      if (![outProtocol writeFieldBeginWithName: @"followers" type: TTypeSET fieldID: 8 error: __thriftError]) return NO;
      {
        if (![outProtocol writeSetBeginWithElementType: TTypeSTRING size: (SInt32)[_followers count] error: __thriftError]) return NO;
        NSEnumerator * _iter18 = [_followers objectEnumerator];
        id obj19;
        while ((obj19 = [_iter18 nextObject]))
        {
          if (![outProtocol writeString: obj19 error: __thriftError]) return NO;
        }
        if (![outProtocol writeSetEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_applicationDescriptionIsSet) {
    if (_applicationDescription != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationDescription" type: TTypeSTRING fieldID: 9 error: __thriftError]) return NO;
      if (![outProtocol writeString: _applicationDescription error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_organizationIdIsSet) {
    if (_organizationId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"organizationId" type: TTypeSTRING fieldID: 10 error: __thriftError]) return NO;
      if (![outProtocol writeString: _organizationId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_tierIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"tier" type: TTypeI32 fieldID: 11 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _tier error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_timeOfTokenExpirationIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"timeOfTokenExpiration" type: TTypeI64 fieldID: 12 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _timeOfTokenExpiration error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_applicationIconMediaIdIsSet) {
    if (_applicationIconMediaId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationIconMediaId" type: TTypeSTRING fieldID: 13 error: __thriftError]) return NO;
      if (![outProtocol writeString: _applicationIconMediaId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_isFollowingIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"isFollowing" type: TTypeBOOL fieldID: 14 error: __thriftError]) return NO;
    if (![outProtocol writeBool: _isFollowing error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Aroma_Application("];
  [ms appendString: @"owners:"];
  [ms appendFormat: @"%@", _owners];
  [ms appendString: @",timeOfProvisioning:"];
  [ms appendFormat: @"%qi", _timeOfProvisioning];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", _name];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", _applicationId];
  [ms appendString: @",totalMessagesSent:"];
  [ms appendFormat: @"%qi", _totalMessagesSent];
  [ms appendString: @",icon:"];
  [ms appendFormat: @"%@", _icon];
  [ms appendString: @",programmingLanguage:"];
  [ms appendFormat: @"%i", (int)_programmingLanguage];
  [ms appendString: @",followers:"];
  [ms appendFormat: @"%@", _followers];
  [ms appendString: @",applicationDescription:"];
  [ms appendFormat: @"\"%@\"", _applicationDescription];
  [ms appendString: @",organizationId:"];
  [ms appendFormat: @"\"%@\"", _organizationId];
  [ms appendString: @",tier:"];
  [ms appendFormat: @"%i", (int)_tier];
  [ms appendString: @",timeOfTokenExpiration:"];
  [ms appendFormat: @"%qi", _timeOfTokenExpiration];
  [ms appendString: @",applicationIconMediaId:"];
  [ms appendFormat: @"\"%@\"", _applicationIconMediaId];
  [ms appendString: @",isFollowing:"];
  [ms appendFormat: @"%i", _isFollowing];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Aroma_ServiceAnnouncement

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithMessage: (NSString *) message importance: (Aroma_Urgency) importance id: (Aroma_uuid) id timeOfExpiration: (Aroma_timestamp) timeOfExpiration
{
  self = [super init];
  if (self)  {
    _message = message;
    _messageIsSet = YES;
    _importance = importance;
    _importanceIsSet = YES;
    _id = id;
    _idIsSet = YES;
    _timeOfExpiration = timeOfExpiration;
    _timeOfExpirationIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"message"])
    {
      _message = [decoder decodeObjectForKey: @"message"];
      _messageIsSet = YES;
    }
    if ([decoder containsValueForKey: @"importance"])
    {
      _importance = [decoder decodeIntForKey: @"importance"];
      _importanceIsSet = YES;
    }
    if ([decoder containsValueForKey: @"id"])
    {
      _id = [decoder decodeObjectForKey: @"id"];
      _idIsSet = YES;
    }
    if ([decoder containsValueForKey: @"timeOfExpiration"])
    {
      _timeOfExpiration = [decoder decodeInt64ForKey: @"timeOfExpiration"];
      _timeOfExpirationIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_messageIsSet)
  {
    [encoder encodeObject: _message forKey: @"message"];
  }
  if (_importanceIsSet)
  {
    [encoder encodeInt: _importance forKey: @"importance"];
  }
  if (_idIsSet)
  {
    [encoder encodeObject: _id forKey: @"id"];
  }
  if (_timeOfExpirationIsSet)
  {
    [encoder encodeInt64: _timeOfExpiration forKey: @"timeOfExpiration"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _messageIsSet ? 2654435761 : 0;
  if (_messageIsSet)
  {
    hash = (hash * 31) ^ [_message hash];
  }
  hash = (hash * 31) ^ _importanceIsSet ? 2654435761 : 0;
  if (_importanceIsSet)
  {
    hash = (hash * 31) ^ [@(_importance) hash];
  }
  hash = (hash * 31) ^ _idIsSet ? 2654435761 : 0;
  if (_idIsSet)
  {
    hash = (hash * 31) ^ [_id hash];
  }
  hash = (hash * 31) ^ _timeOfExpirationIsSet ? 2654435761 : 0;
  if (_timeOfExpirationIsSet)
  {
    hash = (hash * 31) ^ [@(_timeOfExpiration) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Aroma_ServiceAnnouncement class]]) {
    return NO;
  }
  Aroma_ServiceAnnouncement *other = (Aroma_ServiceAnnouncement *)anObject;
  if ((_messageIsSet != other->_messageIsSet) ||
      (_messageIsSet && ((_message || other->_message) && ![_message isEqual:other->_message]))) {
    return NO;
  }
  if ((_importanceIsSet != other->_importanceIsSet) ||
      (_importanceIsSet && (_importance != other->_importance))) {
    return NO;
  }
  if ((_idIsSet != other->_idIsSet) ||
      (_idIsSet && ((_id || other->_id) && ![_id isEqual:other->_id]))) {
    return NO;
  }
  if ((_timeOfExpirationIsSet != other->_timeOfExpirationIsSet) ||
      (_timeOfExpirationIsSet && (_timeOfExpiration != other->_timeOfExpiration))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  Aroma_ServiceAnnouncement * val = [Aroma_ServiceAnnouncement new];
  if (_messageIsSet)
  {
    val.message = [self.message copy];
  }
  if (_importanceIsSet)
  {
    val.importance = self.importance;
  }
  if (_idIsSet)
  {
    val.id = [self.id copy];
  }
  if (_timeOfExpirationIsSet)
  {
    val.timeOfExpiration = self.timeOfExpiration;
  }
  return val;
}

- (void) setMessage: (NSString *) message {
  _message = message;
  _messageIsSet = YES;
}

- (void) unsetMessage {
  _message = nil;
  _messageIsSet = NO;
}

- (void) setImportance: (Aroma_Urgency) importance {
  _importance = importance;
  _importanceIsSet = YES;
}

- (void) unsetImportance {
  _importanceIsSet = NO;
}

- (void) setId: (NSString *) id {
  _id = id;
  _idIsSet = YES;
}

- (void) unsetId {
  _id = nil;
  _idIsSet = NO;
}

- (void) setTimeOfExpiration: (SInt64) timeOfExpiration {
  _timeOfExpiration = timeOfExpiration;
  _timeOfExpirationIsSet = YES;
}

- (void) unsetTimeOfExpiration {
  _timeOfExpirationIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.message = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeI32) {
          Aroma_Urgency fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.importance = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.id = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.timeOfExpiration = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ServiceAnnouncement" error: __thriftError]) return NO;
  if (_messageIsSet) {
    if (_message != nil) {
      if (![outProtocol writeFieldBeginWithName: @"message" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _message error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_importanceIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"importance" type: TTypeI32 fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _importance error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_idIsSet) {
    if (_id != nil) {
      if (![outProtocol writeFieldBeginWithName: @"id" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _id error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_timeOfExpirationIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"timeOfExpiration" type: TTypeI64 fieldID: 4 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _timeOfExpiration error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Aroma_ServiceAnnouncement("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", _message];
  [ms appendString: @",importance:"];
  [ms appendFormat: @"%i", (int)_importance];
  [ms appendString: @",id:"];
  [ms appendFormat: @"\"%@\"", _id];
  [ms appendString: @",timeOfExpiration:"];
  [ms appendFormat: @"%qi", _timeOfExpiration];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

NSString *Aroma_AromaErrorDomain = @"Aroma_AromaErrorDomain";

double Aroma_API_VERSION = 2.01;

