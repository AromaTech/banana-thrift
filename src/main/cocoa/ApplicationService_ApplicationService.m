/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TProtocolFactory.h"
#import "TApplicationError.h"
#import "TProtocolError.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TBaseClient.h"

#import "AromaAuthentication_Authentication.h"
#import "Aroma_Aroma.h"
#import "AromaEndpoint_Endpoint.h"
#import "AromaException_Exceptions.h"

#import "ApplicationService_ApplicationService.h"

@implementation ApplicationService_SendMessageRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
    self.urgency = 1;

  }
  return self;
}

- (instancetype) initWithApplicationToken: (ApplicationService_ApplicationToken) applicationToken body: (NSString *) body urgency: (ApplicationService_Urgency) urgency timeOfMessage: (ApplicationService_timestamp) timeOfMessage title: (NSString *) title hostname: (NSString *) hostname macAddress: (NSString *) macAddress ipv4Address: (NSString *) ipv4Address deviceName: (NSString *) deviceName operatingSystemName: (NSString *) operatingSystemName
{
  self = [super init];
  if (self)  {
    _applicationToken = applicationToken;
    _applicationTokenIsSet = YES;
    _body = body;
    _bodyIsSet = YES;
    _urgency = urgency;
    _urgencyIsSet = YES;
    _timeOfMessage = timeOfMessage;
    _timeOfMessageIsSet = YES;
    _title = title;
    _titleIsSet = YES;
    _hostname = hostname;
    _hostnameIsSet = YES;
    _macAddress = macAddress;
    _macAddressIsSet = YES;
    _ipv4Address = ipv4Address;
    _ipv4AddressIsSet = YES;
    _deviceName = deviceName;
    _deviceNameIsSet = YES;
    _operatingSystemName = operatingSystemName;
    _operatingSystemNameIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"applicationToken"])
    {
      _applicationToken = [decoder decodeObjectForKey: @"applicationToken"];
      _applicationTokenIsSet = YES;
    }
    if ([decoder containsValueForKey: @"body"])
    {
      _body = [decoder decodeObjectForKey: @"body"];
      _bodyIsSet = YES;
    }
    if ([decoder containsValueForKey: @"urgency"])
    {
      _urgency = [decoder decodeIntForKey: @"urgency"];
      _urgencyIsSet = YES;
    }
    if ([decoder containsValueForKey: @"timeOfMessage"])
    {
      _timeOfMessage = [decoder decodeInt64ForKey: @"timeOfMessage"];
      _timeOfMessageIsSet = YES;
    }
    if ([decoder containsValueForKey: @"title"])
    {
      _title = [decoder decodeObjectForKey: @"title"];
      _titleIsSet = YES;
    }
    if ([decoder containsValueForKey: @"hostname"])
    {
      _hostname = [decoder decodeObjectForKey: @"hostname"];
      _hostnameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"macAddress"])
    {
      _macAddress = [decoder decodeObjectForKey: @"macAddress"];
      _macAddressIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ipv4Address"])
    {
      _ipv4Address = [decoder decodeObjectForKey: @"ipv4Address"];
      _ipv4AddressIsSet = YES;
    }
    if ([decoder containsValueForKey: @"deviceName"])
    {
      _deviceName = [decoder decodeObjectForKey: @"deviceName"];
      _deviceNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"operatingSystemName"])
    {
      _operatingSystemName = [decoder decodeObjectForKey: @"operatingSystemName"];
      _operatingSystemNameIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_applicationTokenIsSet)
  {
    [encoder encodeObject: _applicationToken forKey: @"applicationToken"];
  }
  if (_bodyIsSet)
  {
    [encoder encodeObject: _body forKey: @"body"];
  }
  if (_urgencyIsSet)
  {
    [encoder encodeInt: _urgency forKey: @"urgency"];
  }
  if (_timeOfMessageIsSet)
  {
    [encoder encodeInt64: _timeOfMessage forKey: @"timeOfMessage"];
  }
  if (_titleIsSet)
  {
    [encoder encodeObject: _title forKey: @"title"];
  }
  if (_hostnameIsSet)
  {
    [encoder encodeObject: _hostname forKey: @"hostname"];
  }
  if (_macAddressIsSet)
  {
    [encoder encodeObject: _macAddress forKey: @"macAddress"];
  }
  if (_ipv4AddressIsSet)
  {
    [encoder encodeObject: _ipv4Address forKey: @"ipv4Address"];
  }
  if (_deviceNameIsSet)
  {
    [encoder encodeObject: _deviceName forKey: @"deviceName"];
  }
  if (_operatingSystemNameIsSet)
  {
    [encoder encodeObject: _operatingSystemName forKey: @"operatingSystemName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _applicationTokenIsSet ? 2654435761 : 0;
  if (_applicationTokenIsSet)
  {
    hash = (hash * 31) ^ [_applicationToken hash];
  }
  hash = (hash * 31) ^ _bodyIsSet ? 2654435761 : 0;
  if (_bodyIsSet)
  {
    hash = (hash * 31) ^ [_body hash];
  }
  hash = (hash * 31) ^ _urgencyIsSet ? 2654435761 : 0;
  if (_urgencyIsSet)
  {
    hash = (hash * 31) ^ [@(_urgency) hash];
  }
  hash = (hash * 31) ^ _timeOfMessageIsSet ? 2654435761 : 0;
  if (_timeOfMessageIsSet)
  {
    hash = (hash * 31) ^ [@(_timeOfMessage) hash];
  }
  hash = (hash * 31) ^ _titleIsSet ? 2654435761 : 0;
  if (_titleIsSet)
  {
    hash = (hash * 31) ^ [_title hash];
  }
  hash = (hash * 31) ^ _hostnameIsSet ? 2654435761 : 0;
  if (_hostnameIsSet)
  {
    hash = (hash * 31) ^ [_hostname hash];
  }
  hash = (hash * 31) ^ _macAddressIsSet ? 2654435761 : 0;
  if (_macAddressIsSet)
  {
    hash = (hash * 31) ^ [_macAddress hash];
  }
  hash = (hash * 31) ^ _ipv4AddressIsSet ? 2654435761 : 0;
  if (_ipv4AddressIsSet)
  {
    hash = (hash * 31) ^ [_ipv4Address hash];
  }
  hash = (hash * 31) ^ _deviceNameIsSet ? 2654435761 : 0;
  if (_deviceNameIsSet)
  {
    hash = (hash * 31) ^ [_deviceName hash];
  }
  hash = (hash * 31) ^ _operatingSystemNameIsSet ? 2654435761 : 0;
  if (_operatingSystemNameIsSet)
  {
    hash = (hash * 31) ^ [_operatingSystemName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ApplicationService_SendMessageRequest class]]) {
    return NO;
  }
  ApplicationService_SendMessageRequest *other = (ApplicationService_SendMessageRequest *)anObject;
  if ((_applicationTokenIsSet != other->_applicationTokenIsSet) ||
      (_applicationTokenIsSet && ((_applicationToken || other->_applicationToken) && ![_applicationToken isEqual:other->_applicationToken]))) {
    return NO;
  }
  if ((_bodyIsSet != other->_bodyIsSet) ||
      (_bodyIsSet && ((_body || other->_body) && ![_body isEqual:other->_body]))) {
    return NO;
  }
  if ((_urgencyIsSet != other->_urgencyIsSet) ||
      (_urgencyIsSet && (_urgency != other->_urgency))) {
    return NO;
  }
  if ((_timeOfMessageIsSet != other->_timeOfMessageIsSet) ||
      (_timeOfMessageIsSet && (_timeOfMessage != other->_timeOfMessage))) {
    return NO;
  }
  if ((_titleIsSet != other->_titleIsSet) ||
      (_titleIsSet && ((_title || other->_title) && ![_title isEqual:other->_title]))) {
    return NO;
  }
  if ((_hostnameIsSet != other->_hostnameIsSet) ||
      (_hostnameIsSet && ((_hostname || other->_hostname) && ![_hostname isEqual:other->_hostname]))) {
    return NO;
  }
  if ((_macAddressIsSet != other->_macAddressIsSet) ||
      (_macAddressIsSet && ((_macAddress || other->_macAddress) && ![_macAddress isEqual:other->_macAddress]))) {
    return NO;
  }
  if ((_ipv4AddressIsSet != other->_ipv4AddressIsSet) ||
      (_ipv4AddressIsSet && ((_ipv4Address || other->_ipv4Address) && ![_ipv4Address isEqual:other->_ipv4Address]))) {
    return NO;
  }
  if ((_deviceNameIsSet != other->_deviceNameIsSet) ||
      (_deviceNameIsSet && ((_deviceName || other->_deviceName) && ![_deviceName isEqual:other->_deviceName]))) {
    return NO;
  }
  if ((_operatingSystemNameIsSet != other->_operatingSystemNameIsSet) ||
      (_operatingSystemNameIsSet && ((_operatingSystemName || other->_operatingSystemName) && ![_operatingSystemName isEqual:other->_operatingSystemName]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  ApplicationService_SendMessageRequest * val = [ApplicationService_SendMessageRequest new];
  if (_applicationTokenIsSet)
  {
    val.applicationToken = [self.applicationToken copy];
  }
  if (_bodyIsSet)
  {
    val.body = [self.body copy];
  }
  if (_urgencyIsSet)
  {
    val.urgency = self.urgency;
  }
  if (_timeOfMessageIsSet)
  {
    val.timeOfMessage = self.timeOfMessage;
  }
  if (_titleIsSet)
  {
    val.title = [self.title copy];
  }
  if (_hostnameIsSet)
  {
    val.hostname = [self.hostname copy];
  }
  if (_macAddressIsSet)
  {
    val.macAddress = [self.macAddress copy];
  }
  if (_ipv4AddressIsSet)
  {
    val.ipv4Address = [self.ipv4Address copy];
  }
  if (_deviceNameIsSet)
  {
    val.deviceName = [self.deviceName copy];
  }
  if (_operatingSystemNameIsSet)
  {
    val.operatingSystemName = [self.operatingSystemName copy];
  }
  return val;
}

- (void) setApplicationToken: (AromaAuthentication_ApplicationToken *) applicationToken {
  _applicationToken = applicationToken;
  _applicationTokenIsSet = YES;
}

- (void) unsetApplicationToken {
  _applicationToken = nil;
  _applicationTokenIsSet = NO;
}

- (void) setBody: (NSString *) body {
  _body = body;
  _bodyIsSet = YES;
}

- (void) unsetBody {
  _body = nil;
  _bodyIsSet = NO;
}

- (void) setUrgency: (ApplicationService_Urgency) urgency {
  _urgency = urgency;
  _urgencyIsSet = YES;
}

- (void) unsetUrgency {
  _urgencyIsSet = NO;
}

- (void) setTimeOfMessage: (SInt64) timeOfMessage {
  _timeOfMessage = timeOfMessage;
  _timeOfMessageIsSet = YES;
}

- (void) unsetTimeOfMessage {
  _timeOfMessageIsSet = NO;
}

- (void) setTitle: (NSString *) title {
  _title = title;
  _titleIsSet = YES;
}

- (void) unsetTitle {
  _title = nil;
  _titleIsSet = NO;
}

- (void) setHostname: (NSString *) hostname {
  _hostname = hostname;
  _hostnameIsSet = YES;
}

- (void) unsetHostname {
  _hostname = nil;
  _hostnameIsSet = NO;
}

- (void) setMacAddress: (NSString *) macAddress {
  _macAddress = macAddress;
  _macAddressIsSet = YES;
}

- (void) unsetMacAddress {
  _macAddress = nil;
  _macAddressIsSet = NO;
}

- (void) setIpv4Address: (NSString *) ipv4Address {
  _ipv4Address = ipv4Address;
  _ipv4AddressIsSet = YES;
}

- (void) unsetIpv4Address {
  _ipv4Address = nil;
  _ipv4AddressIsSet = NO;
}

- (void) setDeviceName: (NSString *) deviceName {
  _deviceName = deviceName;
  _deviceNameIsSet = YES;
}

- (void) unsetDeviceName {
  _deviceName = nil;
  _deviceNameIsSet = NO;
}

- (void) setOperatingSystemName: (NSString *) operatingSystemName {
  _operatingSystemName = operatingSystemName;
  _operatingSystemNameIsSet = YES;
}

- (void) unsetOperatingSystemName {
  _operatingSystemName = nil;
  _operatingSystemNameIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaAuthentication_ApplicationToken *fieldValue = [[AromaAuthentication_ApplicationToken alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.applicationToken = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.body = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeI32) {
          ApplicationService_Urgency fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.urgency = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.timeOfMessage = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.title = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.hostname = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 7:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.macAddress = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 8:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.ipv4Address = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 9:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.deviceName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 10:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.operatingSystemName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"SendMessageRequest" error: __thriftError]) return NO;
  if (_applicationTokenIsSet) {
    if (_applicationToken != nil) {
      if (![outProtocol writeFieldBeginWithName: @"applicationToken" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_applicationToken write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_bodyIsSet) {
    if (_body != nil) {
      if (![outProtocol writeFieldBeginWithName: @"body" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _body error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_urgencyIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"urgency" type: TTypeI32 fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _urgency error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_timeOfMessageIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"timeOfMessage" type: TTypeI64 fieldID: 4 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _timeOfMessage error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_titleIsSet) {
    if (_title != nil) {
      if (![outProtocol writeFieldBeginWithName: @"title" type: TTypeSTRING fieldID: 5 error: __thriftError]) return NO;
      if (![outProtocol writeString: _title error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_hostnameIsSet) {
    if (_hostname != nil) {
      if (![outProtocol writeFieldBeginWithName: @"hostname" type: TTypeSTRING fieldID: 6 error: __thriftError]) return NO;
      if (![outProtocol writeString: _hostname error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_macAddressIsSet) {
    if (_macAddress != nil) {
      if (![outProtocol writeFieldBeginWithName: @"macAddress" type: TTypeSTRING fieldID: 7 error: __thriftError]) return NO;
      if (![outProtocol writeString: _macAddress error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_ipv4AddressIsSet) {
    if (_ipv4Address != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ipv4Address" type: TTypeSTRING fieldID: 8 error: __thriftError]) return NO;
      if (![outProtocol writeString: _ipv4Address error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_deviceNameIsSet) {
    if (_deviceName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"deviceName" type: TTypeSTRING fieldID: 9 error: __thriftError]) return NO;
      if (![outProtocol writeString: _deviceName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_operatingSystemNameIsSet) {
    if (_operatingSystemName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"operatingSystemName" type: TTypeSTRING fieldID: 10 error: __thriftError]) return NO;
      if (![outProtocol writeString: _operatingSystemName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ApplicationService_SendMessageRequest("];
  [ms appendString: @"applicationToken:"];
  [ms appendFormat: @"%@", _applicationToken];
  [ms appendString: @",body:"];
  [ms appendFormat: @"\"%@\"", _body];
  [ms appendString: @",urgency:"];
  [ms appendFormat: @"%i", (int)_urgency];
  [ms appendString: @",timeOfMessage:"];
  [ms appendFormat: @"%qi", _timeOfMessage];
  [ms appendString: @",title:"];
  [ms appendFormat: @"\"%@\"", _title];
  [ms appendString: @",hostname:"];
  [ms appendFormat: @"\"%@\"", _hostname];
  [ms appendString: @",macAddress:"];
  [ms appendFormat: @"\"%@\"", _macAddress];
  [ms appendString: @",ipv4Address:"];
  [ms appendFormat: @"\"%@\"", _ipv4Address];
  [ms appendString: @",deviceName:"];
  [ms appendFormat: @"\"%@\"", _deviceName];
  [ms appendString: @",operatingSystemName:"];
  [ms appendFormat: @"\"%@\"", _operatingSystemName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ApplicationService_SendMessageResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithMessageId: (NSString *) messageId
{
  self = [super init];
  if (self)  {
    _messageId = messageId;
    _messageIdIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"messageId"])
    {
      _messageId = [decoder decodeObjectForKey: @"messageId"];
      _messageIdIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_messageIdIsSet)
  {
    [encoder encodeObject: _messageId forKey: @"messageId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _messageIdIsSet ? 2654435761 : 0;
  if (_messageIdIsSet)
  {
    hash = (hash * 31) ^ [_messageId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ApplicationService_SendMessageResponse class]]) {
    return NO;
  }
  ApplicationService_SendMessageResponse *other = (ApplicationService_SendMessageResponse *)anObject;
  if ((_messageIdIsSet != other->_messageIdIsSet) ||
      (_messageIdIsSet && ((_messageId || other->_messageId) && ![_messageId isEqual:other->_messageId]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  ApplicationService_SendMessageResponse * val = [ApplicationService_SendMessageResponse new];
  if (_messageIdIsSet)
  {
    val.messageId = [self.messageId copy];
  }
  return val;
}

- (void) setMessageId: (NSString *) messageId {
  _messageId = messageId;
  _messageIdIsSet = YES;
}

- (void) unsetMessageId {
  _messageId = nil;
  _messageIdIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.messageId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"SendMessageResponse" error: __thriftError]) return NO;
  if (_messageIdIsSet) {
    if (_messageId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"messageId" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _messageId error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ApplicationService_SendMessageResponse("];
  [ms appendString: @"messageId:"];
  [ms appendFormat: @"\"%@\"", _messageId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

NSString *ApplicationService_ApplicationServiceErrorDomain = @"ApplicationService_ApplicationServiceErrorDomain";

ApplicationService_int ApplicationService_SERVICE_PORT = 7002;
AromaEndpoint_TcpEndpoint * ApplicationService_PRODUCTION_ENDPOINT;
AromaEndpoint_TcpEndpoint * ApplicationService_BETA_ENDPOINT;
ApplicationService_int ApplicationService_MAX_TITLE_LENGTH = 40;
ApplicationService_int ApplicationService_MAX_CHARACTERS_IN_BODY = 15000;

@implementation ApplicationService_ApplicationServiceConstants

+ (void) initialize {

  ApplicationService_PRODUCTION_ENDPOINT = [AromaEndpoint_TcpEndpoint new];
  [ApplicationService_PRODUCTION_ENDPOINT setHostname:@"application-srv.aroma.tech"];
  [ApplicationService_PRODUCTION_ENDPOINT setPort:80];
;

  ApplicationService_BETA_ENDPOINT = [AromaEndpoint_TcpEndpoint new];
  [ApplicationService_BETA_ENDPOINT setHostname:@"application-srv.beta.aroma.tech"];
  [ApplicationService_BETA_ENDPOINT setPort:7002];
;
}

+ (AromaEndpoint_TcpEndpoint *) PRODUCTION_ENDPOINT {
  return ApplicationService_PRODUCTION_ENDPOINT;
}

+ (AromaEndpoint_TcpEndpoint *) BETA_ENDPOINT {
  return ApplicationService_BETA_ENDPOINT;
}
@end

@interface ApplicationService_ApplicationService_getApiVersion_args : NSObject <TBase, NSCoding, NSCopying> 



@end

@implementation ApplicationService_ApplicationService_getApiVersion_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ApplicationService_ApplicationService_getApiVersion_args class]]) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  ApplicationService_ApplicationService_getApiVersion_args * val = [ApplicationService_ApplicationService_getApiVersion_args new];
  return val;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ApplicationService_getApiVersion_args" error: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ApplicationService_ApplicationService_getApiVersion_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ApplicationService_ApplicationService_getApiVersion_result : NSObject <TBase, NSCoding, NSCopying> 

@property (assign, nonatomic) double success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;


- (instancetype) initWithSuccess: (double) success;

@end

@implementation ApplicationService_ApplicationService_getApiVersion_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (double) success
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeDoubleForKey: @"success"];
      _successIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeDouble: _success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [@(_success) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ApplicationService_ApplicationService_getApiVersion_result class]]) {
    return NO;
  }
  ApplicationService_ApplicationService_getApiVersion_result *other = (ApplicationService_ApplicationService_getApiVersion_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && (_success != other->_success))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  ApplicationService_ApplicationService_getApiVersion_result * val = [ApplicationService_ApplicationService_getApiVersion_result new];
  if (_successIsSet)
  {
    val.success = self.success;
  }
  return val;
}

- (void) setSuccess: (double) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _successIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeDOUBLE) {
          double fieldValue;
          if (![inProtocol readDouble:&fieldValue error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ApplicationService_getApiVersion_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeDOUBLE fieldID: 0 error: __thriftError]) return NO;
    if (![outProtocol writeDouble: _success error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ApplicationService_ApplicationService_getApiVersion_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%f", _success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ApplicationService_ApplicationService_sendMessage_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) ApplicationService_SendMessageRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (ApplicationService_SendMessageRequest *) request;

@end

@implementation ApplicationService_ApplicationService_sendMessage_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (ApplicationService_SendMessageRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ApplicationService_ApplicationService_sendMessage_args class]]) {
    return NO;
  }
  ApplicationService_ApplicationService_sendMessage_args *other = (ApplicationService_ApplicationService_sendMessage_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  ApplicationService_ApplicationService_sendMessage_args * val = [ApplicationService_ApplicationService_sendMessage_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (ApplicationService_SendMessageRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          ApplicationService_SendMessageRequest *fieldValue = [[ApplicationService_SendMessageRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ApplicationService_sendMessage_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ApplicationService_ApplicationService_sendMessage_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ApplicationService_ApplicationService_sendMessage_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) ApplicationService_SendMessageResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) ApplicationService_OperationFailedException ex1;
@property (assign, nonatomic) BOOL ex1IsSet;
- (void) unsetEx1;

@property (strong, nonatomic) ApplicationService_InvalidArgumentException ex2;
@property (assign, nonatomic) BOOL ex2IsSet;
- (void) unsetEx2;

@property (strong, nonatomic) ApplicationService_InvalidTokenException ex3;
@property (assign, nonatomic) BOOL ex3IsSet;
- (void) unsetEx3;


- (instancetype) initWithSuccess: (ApplicationService_SendMessageResponse *) success ex1: (ApplicationService_OperationFailedException) ex1 ex2: (ApplicationService_InvalidArgumentException) ex2 ex3: (ApplicationService_InvalidTokenException) ex3;

@end

@implementation ApplicationService_ApplicationService_sendMessage_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (ApplicationService_SendMessageResponse *) success ex1: (ApplicationService_OperationFailedException) ex1 ex2: (ApplicationService_InvalidArgumentException) ex2 ex3: (ApplicationService_InvalidTokenException) ex3
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _ex1 = ex1;
    _ex1IsSet = YES;
    _ex2 = ex2;
    _ex2IsSet = YES;
    _ex3 = ex3;
    _ex3IsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex1"])
    {
      _ex1 = [decoder decodeObjectForKey: @"ex1"];
      _ex1IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex2"])
    {
      _ex2 = [decoder decodeObjectForKey: @"ex2"];
      _ex2IsSet = YES;
    }
    if ([decoder containsValueForKey: @"ex3"])
    {
      _ex3 = [decoder decodeObjectForKey: @"ex3"];
      _ex3IsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_ex1IsSet)
  {
    [encoder encodeObject: _ex1 forKey: @"ex1"];
  }
  if (_ex2IsSet)
  {
    [encoder encodeObject: _ex2 forKey: @"ex2"];
  }
  if (_ex3IsSet)
  {
    [encoder encodeObject: _ex3 forKey: @"ex3"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _ex1IsSet ? 2654435761 : 0;
  if (_ex1IsSet)
  {
    hash = (hash * 31) ^ [_ex1 hash];
  }
  hash = (hash * 31) ^ _ex2IsSet ? 2654435761 : 0;
  if (_ex2IsSet)
  {
    hash = (hash * 31) ^ [_ex2 hash];
  }
  hash = (hash * 31) ^ _ex3IsSet ? 2654435761 : 0;
  if (_ex3IsSet)
  {
    hash = (hash * 31) ^ [_ex3 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ApplicationService_ApplicationService_sendMessage_result class]]) {
    return NO;
  }
  ApplicationService_ApplicationService_sendMessage_result *other = (ApplicationService_ApplicationService_sendMessage_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_ex1IsSet != other->_ex1IsSet) ||
      (_ex1IsSet && ((_ex1 || other->_ex1) && ![_ex1 isEqual:other->_ex1]))) {
    return NO;
  }
  if ((_ex2IsSet != other->_ex2IsSet) ||
      (_ex2IsSet && ((_ex2 || other->_ex2) && ![_ex2 isEqual:other->_ex2]))) {
    return NO;
  }
  if ((_ex3IsSet != other->_ex3IsSet) ||
      (_ex3IsSet && ((_ex3 || other->_ex3) && ![_ex3 isEqual:other->_ex3]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  ApplicationService_ApplicationService_sendMessage_result * val = [ApplicationService_ApplicationService_sendMessage_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  if (_ex1IsSet)
  {
    val.ex1 = [self.ex1 copy];
  }
  if (_ex2IsSet)
  {
    val.ex2 = [self.ex2 copy];
  }
  if (_ex3IsSet)
  {
    val.ex3 = [self.ex3 copy];
  }
  return val;
}

- (void) setSuccess: (ApplicationService_SendMessageResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setEx1: (AromaException_OperationFailedException *) ex1 {
  _ex1 = ex1;
  _ex1IsSet = YES;
}

- (void) unsetEx1 {
  _ex1 = nil;
  _ex1IsSet = NO;
}

- (void) setEx2: (AromaException_InvalidArgumentException *) ex2 {
  _ex2 = ex2;
  _ex2IsSet = YES;
}

- (void) unsetEx2 {
  _ex2 = nil;
  _ex2IsSet = NO;
}

- (void) setEx3: (AromaException_InvalidTokenException *) ex3 {
  _ex3 = ex3;
  _ex3IsSet = YES;
}

- (void) unsetEx3 {
  _ex3 = nil;
  _ex3IsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          ApplicationService_SendMessageResponse *fieldValue = [[ApplicationService_SendMessageResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 1:
        if (fieldType == TTypeSTRUCT) {
          AromaException_OperationFailedException *fieldValue = [[AromaException_OperationFailedException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex1 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidArgumentException *fieldValue = [[AromaException_InvalidArgumentException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex2 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          AromaException_InvalidTokenException *fieldValue = [[AromaException_InvalidTokenException alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.ex3 = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ApplicationService_sendMessage_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex1IsSet) {
    if (_ex1 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex1" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_ex1 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex2IsSet) {
    if (_ex2 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex2" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_ex2 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_ex3IsSet) {
    if (_ex3 != nil) {
      if (![outProtocol writeFieldBeginWithName: @"ex3" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_ex3 write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ApplicationService_ApplicationService_sendMessage_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", _ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", _ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", _ex3];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ApplicationService_ApplicationService_sendMessageAsync_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) ApplicationService_SendMessageRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithRequest: (ApplicationService_SendMessageRequest *) request;

@end

@implementation ApplicationService_ApplicationService_sendMessageAsync_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRequest: (ApplicationService_SendMessageRequest *) request
{
  self = [super init];
  if (self)  {
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ApplicationService_ApplicationService_sendMessageAsync_args class]]) {
    return NO;
  }
  ApplicationService_ApplicationService_sendMessageAsync_args *other = (ApplicationService_ApplicationService_sendMessageAsync_args *)anObject;
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  ApplicationService_ApplicationService_sendMessageAsync_args * val = [ApplicationService_ApplicationService_sendMessageAsync_args new];
  if (_requestIsSet)
  {
    val.request = [self.request copy];
  }
  return val;
}

- (void) setRequest: (ApplicationService_SendMessageRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          ApplicationService_SendMessageRequest *fieldValue = [[ApplicationService_SendMessageRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ApplicationService_sendMessageAsync_args" error: __thriftError]) return NO;
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ApplicationService_ApplicationService_sendMessageAsync_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ApplicationService_ApplicationServiceClient () {

  id<TProtocol> inProtocol;
  id<TProtocol> outProtocol;

}

@end

@implementation ApplicationService_ApplicationServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  if (self)   {
    inProtocol = anInProtocol;
    outProtocol = anOutProtocol;
  }
  return self;
}

- (BOOL) send_getApiVersion: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"getApiVersion" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"ApplicationService_getApiVersion_args" error: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_getApiVersion: (double *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  ApplicationService_ApplicationService_getApiVersion_result * resulter = [ApplicationService_ApplicationService_getApiVersion_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"getApiVersion"}];
  }
  return NO;
}

- (NSNumber *) getApiVersion: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_getApiVersion: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  double __result;
  if (![self recv_getApiVersion: &__result error: __thriftError]) return nil;
  return @(__result);
}

- (BOOL) send_sendMessage: (ApplicationService_SendMessageRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"sendMessage" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"ApplicationService_sendMessage_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_sendMessage: (ApplicationService_SendMessageResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  ApplicationService_ApplicationService_sendMessage_result * resulter = [ApplicationService_ApplicationService_sendMessage_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.ex1IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex1];
    }
    return NO;
  }
  if (resulter.ex2IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex2];
    }
    return NO;
  }
  if (resulter.ex3IsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter ex3];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"sendMessage"}];
  }
  return NO;
}

- (ApplicationService_SendMessageResponse *) sendMessage: (ApplicationService_SendMessageRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_sendMessage : request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  ApplicationService_SendMessageResponse * __result;
  if (![self recv_sendMessage: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_sendMessageAsync: (ApplicationService_SendMessageRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"sendMessageAsync" type: TMessageTypeONEWAY sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"ApplicationService_sendMessageAsync_args" error: __thriftError]) return NO;
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) sendMessageAsync: (ApplicationService_SendMessageRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_sendMessageAsync : request error: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

@end

@interface ApplicationService_ApplicationServiceProcessor () {
  id <ApplicationService_ApplicationService> service;
  NSDictionary * methodMap;
}
@end

@implementation ApplicationService_ApplicationServiceProcessor

- (id) initWithApplicationService: (id <ApplicationService_ApplicationService>) aService
{
  self = [super init];
  if (self)   {
    service = aService;
    methodMap = [NSMutableDictionary dictionary];
    {
      SEL s = @selector(process_getApiVersion_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"getApiVersion"];
    }
    {
      SEL s = @selector(process_sendMessage_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"sendMessage"];
    }
    {
      SEL s = @selector(process_sendMessageAsync_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"sendMessageAsync"];
    }
  }
  return self;
}

- (id<ApplicationService_ApplicationService>) service
{
  return service;
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
                          error: (NSError *__autoreleasing *)__thriftError
{
  NSString * messageName;
  SInt32 messageType;
  SInt32 seqID;
  if (![inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID
                                      error: __thriftError]) return NO;
  NSInvocation * invocation = [methodMap valueForKey: messageName];
  if (invocation == nil) {
    if (![TProtocolUtil skipType: TTypeSTRUCT onProtocol: inProtocol error: __thriftError]) return NO;
    if (![inProtocol readMessageEnd: __thriftError]) return NO;
    NSError * x = [NSError errorWithDomain: TApplicationErrorDomain
                                      code: TApplicationErrorUnknownMethod
                                  userInfo: @{TApplicationErrorMethodKey: messageName}];
    if (![outProtocol writeMessageBeginWithName: messageName
                                           type: TMessageTypeEXCEPTION
                                     sequenceID: seqID
                                          error: __thriftError]) return NO;
    if (![x write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeMessageEnd: __thriftError]) return NO;
    if (![[outProtocol transport] flush: __thriftError]) return NO;
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setArgument: &__thriftError atIndex: 5];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (BOOL) process_getApiVersion_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  ApplicationService_ApplicationService_getApiVersion_args * args = [ApplicationService_ApplicationService_getApiVersion_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  ApplicationService_ApplicationService_getApiVersion_result * result = [ApplicationService_ApplicationService_getApiVersion_result new];
  NSNumber * serviceResult = [service getApiVersion: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: [serviceResult doubleValue]];
  if (![outProtocol writeMessageBeginWithName: @"getApiVersion"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_sendMessage_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  ApplicationService_ApplicationService_sendMessage_args * args = [ApplicationService_ApplicationService_sendMessage_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  ApplicationService_ApplicationService_sendMessage_result * result = [ApplicationService_ApplicationService_sendMessage_result new];
  ApplicationService_SendMessageResponse * serviceResult = [service sendMessage: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"sendMessage"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_sendMessageAsync_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  ApplicationService_ApplicationService_sendMessageAsync_args * args = [ApplicationService_ApplicationService_sendMessageAsync_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  BOOL serviceResult = [service sendMessageAsync: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  return YES;
}
@end

