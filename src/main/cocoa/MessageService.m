/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"

#import "Authentication.h"
#import "Banana.h"
#import "Channels.h"
#import "Endpoint.h"
#import "Events.h"
#import "Exceptions.h"

#import "MessageService.h"

@implementation MessageService_DeleteMessageRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.messageIds = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithToken: (MessageService_UserToken) token messageId: (NSString *) messageId applicationId: (NSString *) applicationId messageIds: (NSMutableArray *) messageIds
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __messageId = [messageId retain_stub];
  __messageId_isset = YES;
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  __messageIds = [messageIds retain_stub];
  __messageIds_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"messageId"])
  {
    __messageId = [[decoder decodeObjectForKey: @"messageId"] retain_stub];
    __messageId_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"messageIds"])
  {
    __messageIds = [[decoder decodeObjectForKey: @"messageIds"] retain_stub];
    __messageIds_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__messageId_isset)
  {
    [encoder encodeObject: __messageId forKey: @"messageId"];
  }
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
  if (__messageIds_isset)
  {
    [encoder encodeObject: __messageIds forKey: @"messageIds"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __messageId_isset ? 2654435761 : 0;
  if (__messageId_isset)
  {
    hash = (hash * 31) ^ [__messageId hash];
  }
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  hash = (hash * 31) ^ __messageIds_isset ? 2654435761 : 0;
  if (__messageIds_isset)
  {
    hash = (hash * 31) ^ [__messageIds hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[MessageService_DeleteMessageRequest class]]) {
    return NO;
  }
  MessageService_DeleteMessageRequest *other = (MessageService_DeleteMessageRequest *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__messageId_isset != other->__messageId_isset) ||
      (__messageId_isset && ((__messageId || other->__messageId) && ![__messageId isEqual:other->__messageId]))) {
    return NO;
  }
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  if ((__messageIds_isset != other->__messageIds_isset) ||
      (__messageIds_isset && ((__messageIds || other->__messageIds) && ![__messageIds isEqual:other->__messageIds]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__messageId release_stub];
  [__applicationId release_stub];
  [__messageIds release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_UserToken *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (BananaAuthentication_UserToken *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) messageId {
  return [[__messageId retain_stub] autorelease_stub];
}

- (void) setMessageId: (NSString *) messageId {
  [messageId retain_stub];
  [__messageId release_stub];
  __messageId = messageId;
  __messageId_isset = YES;
}

- (BOOL) messageIdIsSet {
  return __messageId_isset;
}

- (void) unsetMessageId {
  [__messageId release_stub];
  __messageId = nil;
  __messageId_isset = NO;
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (NSMutableArray *) messageIds {
  return [[__messageIds retain_stub] autorelease_stub];
}

- (void) setMessageIds: (NSMutableArray *) messageIds {
  [messageIds retain_stub];
  [__messageIds release_stub];
  __messageIds = messageIds;
  __messageIds_isset = YES;
}

- (BOOL) messageIdsIsSet {
  return __messageIds_isset;
}

- (void) unsetMessageIds {
  [__messageIds release_stub];
  __messageIds = nil;
  __messageIds_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_UserToken *fieldValue = [[BananaAuthentication_UserToken alloc] init];
          [fieldValue read: inProtocol];
          [self setToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessageId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2 = [inProtocol readString];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readListEnd];
          [self setMessageIds: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DeleteMessageRequest"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRUCT fieldID: 1];
      [__token write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__messageId_isset) {
    if (__messageId != nil) {
      [outProtocol writeFieldBeginWithName: @"messageId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __messageId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__messageIds_isset) {
    if (__messageIds != nil) {
      [outProtocol writeFieldBeginWithName: @"messageIds" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__messageIds count]];
        int idx4;
        for (idx4 = 0; idx4 < [__messageIds count]; idx4++)
        {
          [outProtocol writeString: [__messageIds objectAtIndex: idx4]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MessageService_DeleteMessageRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", __token];
  [ms appendString: @",messageId:"];
  [ms appendFormat: @"\"%@\"", __messageId];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @",messageIds:"];
  [ms appendFormat: @"%@", __messageIds];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MessageService_DeleteMessageResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.messagesDeleted = 0;

#endif
  return self;
}

- (id) initWithMessagesDeleted: (MessageService_int) messagesDeleted
{
  self = [super init];
  __messagesDeleted = messagesDeleted;
  __messagesDeleted_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"messagesDeleted"])
  {
    __messagesDeleted = [decoder decodeInt32ForKey: @"messagesDeleted"];
    __messagesDeleted_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__messagesDeleted_isset)
  {
    [encoder encodeInt32: __messagesDeleted forKey: @"messagesDeleted"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __messagesDeleted_isset ? 2654435761 : 0;
  if (__messagesDeleted_isset)
  {
    hash = (hash * 31) ^ [@(__messagesDeleted) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[MessageService_DeleteMessageResponse class]]) {
    return NO;
  }
  MessageService_DeleteMessageResponse *other = (MessageService_DeleteMessageResponse *)anObject;
  if ((__messagesDeleted_isset != other->__messagesDeleted_isset) ||
      (__messagesDeleted_isset && (__messagesDeleted != other->__messagesDeleted))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) messagesDeleted {
  return __messagesDeleted;
}

- (void) setMessagesDeleted: (int32_t) messagesDeleted {
  __messagesDeleted = messagesDeleted;
  __messagesDeleted_isset = YES;
}

- (BOOL) messagesDeletedIsSet {
  return __messagesDeleted_isset;
}

- (void) unsetMessagesDeleted {
  __messagesDeleted_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMessagesDeleted: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DeleteMessageResponse"];
  if (__messagesDeleted_isset) {
    [outProtocol writeFieldBeginWithName: @"messagesDeleted" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __messagesDeleted];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MessageService_DeleteMessageResponse("];
  [ms appendString: @"messagesDeleted:"];
  [ms appendFormat: @"%i", __messagesDeleted];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MessageService_DismissMessageRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.messageIds = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithToken: (MessageService_UserToken) token messageId: (NSString *) messageId applicationId: (NSString *) applicationId messageIds: (NSMutableArray *) messageIds
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __messageId = [messageId retain_stub];
  __messageId_isset = YES;
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  __messageIds = [messageIds retain_stub];
  __messageIds_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"messageId"])
  {
    __messageId = [[decoder decodeObjectForKey: @"messageId"] retain_stub];
    __messageId_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"messageIds"])
  {
    __messageIds = [[decoder decodeObjectForKey: @"messageIds"] retain_stub];
    __messageIds_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__messageId_isset)
  {
    [encoder encodeObject: __messageId forKey: @"messageId"];
  }
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
  if (__messageIds_isset)
  {
    [encoder encodeObject: __messageIds forKey: @"messageIds"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __messageId_isset ? 2654435761 : 0;
  if (__messageId_isset)
  {
    hash = (hash * 31) ^ [__messageId hash];
  }
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  hash = (hash * 31) ^ __messageIds_isset ? 2654435761 : 0;
  if (__messageIds_isset)
  {
    hash = (hash * 31) ^ [__messageIds hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[MessageService_DismissMessageRequest class]]) {
    return NO;
  }
  MessageService_DismissMessageRequest *other = (MessageService_DismissMessageRequest *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__messageId_isset != other->__messageId_isset) ||
      (__messageId_isset && ((__messageId || other->__messageId) && ![__messageId isEqual:other->__messageId]))) {
    return NO;
  }
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  if ((__messageIds_isset != other->__messageIds_isset) ||
      (__messageIds_isset && ((__messageIds || other->__messageIds) && ![__messageIds isEqual:other->__messageIds]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__messageId release_stub];
  [__applicationId release_stub];
  [__messageIds release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_UserToken *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (BananaAuthentication_UserToken *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) messageId {
  return [[__messageId retain_stub] autorelease_stub];
}

- (void) setMessageId: (NSString *) messageId {
  [messageId retain_stub];
  [__messageId release_stub];
  __messageId = messageId;
  __messageId_isset = YES;
}

- (BOOL) messageIdIsSet {
  return __messageId_isset;
}

- (void) unsetMessageId {
  [__messageId release_stub];
  __messageId = nil;
  __messageId_isset = NO;
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (NSMutableArray *) messageIds {
  return [[__messageIds retain_stub] autorelease_stub];
}

- (void) setMessageIds: (NSMutableArray *) messageIds {
  [messageIds retain_stub];
  [__messageIds release_stub];
  __messageIds = messageIds;
  __messageIds_isset = YES;
}

- (BOOL) messageIdsIsSet {
  return __messageIds_isset;
}

- (void) unsetMessageIds {
  [__messageIds release_stub];
  __messageIds = nil;
  __messageIds_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_UserToken *fieldValue = [[BananaAuthentication_UserToken alloc] init];
          [fieldValue read: inProtocol];
          [self setToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessageId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            NSString * _elem7 = [inProtocol readString];
            [fieldValue addObject: _elem7];
          }
          [inProtocol readListEnd];
          [self setMessageIds: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DismissMessageRequest"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRUCT fieldID: 1];
      [__token write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__messageId_isset) {
    if (__messageId != nil) {
      [outProtocol writeFieldBeginWithName: @"messageId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __messageId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__messageIds_isset) {
    if (__messageIds != nil) {
      [outProtocol writeFieldBeginWithName: @"messageIds" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__messageIds count]];
        int idx9;
        for (idx9 = 0; idx9 < [__messageIds count]; idx9++)
        {
          [outProtocol writeString: [__messageIds objectAtIndex: idx9]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MessageService_DismissMessageRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", __token];
  [ms appendString: @",messageId:"];
  [ms appendFormat: @"\"%@\"", __messageId];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @",messageIds:"];
  [ms appendFormat: @"%@", __messageIds];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MessageService_DismissMessageResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.messagesDismissed = 0;

#endif
  return self;
}

- (id) initWithMessagesDismissed: (MessageService_int) messagesDismissed
{
  self = [super init];
  __messagesDismissed = messagesDismissed;
  __messagesDismissed_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"messagesDismissed"])
  {
    __messagesDismissed = [decoder decodeInt32ForKey: @"messagesDismissed"];
    __messagesDismissed_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__messagesDismissed_isset)
  {
    [encoder encodeInt32: __messagesDismissed forKey: @"messagesDismissed"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __messagesDismissed_isset ? 2654435761 : 0;
  if (__messagesDismissed_isset)
  {
    hash = (hash * 31) ^ [@(__messagesDismissed) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[MessageService_DismissMessageResponse class]]) {
    return NO;
  }
  MessageService_DismissMessageResponse *other = (MessageService_DismissMessageResponse *)anObject;
  if ((__messagesDismissed_isset != other->__messagesDismissed_isset) ||
      (__messagesDismissed_isset && (__messagesDismissed != other->__messagesDismissed))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) messagesDismissed {
  return __messagesDismissed;
}

- (void) setMessagesDismissed: (int32_t) messagesDismissed {
  __messagesDismissed = messagesDismissed;
  __messagesDismissed_isset = YES;
}

- (BOOL) messagesDismissedIsSet {
  return __messagesDismissed_isset;
}

- (void) unsetMessagesDismissed {
  __messagesDismissed_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMessagesDismissed: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DismissMessageResponse"];
  if (__messagesDismissed_isset) {
    [outProtocol writeFieldBeginWithName: @"messagesDismissed" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __messagesDismissed];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MessageService_DismissMessageResponse("];
  [ms appendString: @"messagesDismissed:"];
  [ms appendFormat: @"%i", __messagesDismissed];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MessageService_GetMessagesRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.limit = 0;

#endif
  return self;
}

- (id) initWithToken: (MessageService_UserToken) token applicationId: (NSString *) applicationId limit: (MessageService_int) limit
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  __limit = limit;
  __limit_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"limit"])
  {
    __limit = [decoder decodeInt32ForKey: @"limit"];
    __limit_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
  if (__limit_isset)
  {
    [encoder encodeInt32: __limit forKey: @"limit"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  hash = (hash * 31) ^ __limit_isset ? 2654435761 : 0;
  if (__limit_isset)
  {
    hash = (hash * 31) ^ [@(__limit) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[MessageService_GetMessagesRequest class]]) {
    return NO;
  }
  MessageService_GetMessagesRequest *other = (MessageService_GetMessagesRequest *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  if ((__limit_isset != other->__limit_isset) ||
      (__limit_isset && (__limit != other->__limit))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__applicationId release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_UserToken *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (BananaAuthentication_UserToken *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (int32_t) limit {
  return __limit;
}

- (void) setLimit: (int32_t) limit {
  __limit = limit;
  __limit_isset = YES;
}

- (BOOL) limitIsSet {
  return __limit_isset;
}

- (void) unsetLimit {
  __limit_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_UserToken *fieldValue = [[BananaAuthentication_UserToken alloc] init];
          [fieldValue read: inProtocol];
          [self setToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLimit: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMessagesRequest"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRUCT fieldID: 1];
      [__token write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__limit_isset) {
    [outProtocol writeFieldBeginWithName: @"limit" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __limit];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MessageService_GetMessagesRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", __token];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @",limit:"];
  [ms appendFormat: @"%i", __limit];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MessageService_GetMessagesResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.messages = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

  self.totalMessagesMatching = 0;

#endif
  return self;
}

- (id) initWithMessages: (NSMutableArray *) messages totalMessagesMatching: (MessageService_int) totalMessagesMatching
{
  self = [super init];
  __messages = [messages retain_stub];
  __messages_isset = YES;
  __totalMessagesMatching = totalMessagesMatching;
  __totalMessagesMatching_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"messages"])
  {
    __messages = [[decoder decodeObjectForKey: @"messages"] retain_stub];
    __messages_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalMessagesMatching"])
  {
    __totalMessagesMatching = [decoder decodeInt32ForKey: @"totalMessagesMatching"];
    __totalMessagesMatching_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__messages_isset)
  {
    [encoder encodeObject: __messages forKey: @"messages"];
  }
  if (__totalMessagesMatching_isset)
  {
    [encoder encodeInt32: __totalMessagesMatching forKey: @"totalMessagesMatching"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __messages_isset ? 2654435761 : 0;
  if (__messages_isset)
  {
    hash = (hash * 31) ^ [__messages hash];
  }
  hash = (hash * 31) ^ __totalMessagesMatching_isset ? 2654435761 : 0;
  if (__totalMessagesMatching_isset)
  {
    hash = (hash * 31) ^ [@(__totalMessagesMatching) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[MessageService_GetMessagesResponse class]]) {
    return NO;
  }
  MessageService_GetMessagesResponse *other = (MessageService_GetMessagesResponse *)anObject;
  if ((__messages_isset != other->__messages_isset) ||
      (__messages_isset && ((__messages || other->__messages) && ![__messages isEqual:other->__messages]))) {
    return NO;
  }
  if ((__totalMessagesMatching_isset != other->__totalMessagesMatching_isset) ||
      (__totalMessagesMatching_isset && (__totalMessagesMatching != other->__totalMessagesMatching))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__messages release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) messages {
  return [[__messages retain_stub] autorelease_stub];
}

- (void) setMessages: (NSMutableArray *) messages {
  [messages retain_stub];
  [__messages release_stub];
  __messages = messages;
  __messages_isset = YES;
}

- (BOOL) messagesIsSet {
  return __messages_isset;
}

- (void) unsetMessages {
  [__messages release_stub];
  __messages = nil;
  __messages_isset = NO;
}

- (int32_t) totalMessagesMatching {
  return __totalMessagesMatching;
}

- (void) setTotalMessagesMatching: (int32_t) totalMessagesMatching {
  __totalMessagesMatching = totalMessagesMatching;
  __totalMessagesMatching_isset = YES;
}

- (BOOL) totalMessagesMatchingIsSet {
  return __totalMessagesMatching_isset;
}

- (void) unsetTotalMessagesMatching {
  __totalMessagesMatching_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            Banana_Message *_elem12 = [[Banana_Message alloc] init];
            [_elem12 read: inProtocol];
            [fieldValue addObject: _elem12];
            [_elem12 release_stub];
          }
          [inProtocol readListEnd];
          [self setMessages: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTotalMessagesMatching: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMessagesResponse"];
  if (__messages_isset) {
    if (__messages != nil) {
      [outProtocol writeFieldBeginWithName: @"messages" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__messages count]];
        int idx14;
        for (idx14 = 0; idx14 < [__messages count]; idx14++)
        {
          [[__messages objectAtIndex: idx14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__totalMessagesMatching_isset) {
    [outProtocol writeFieldBeginWithName: @"totalMessagesMatching" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __totalMessagesMatching];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MessageService_GetMessagesResponse("];
  [ms appendString: @"messages:"];
  [ms appendFormat: @"%@", __messages];
  [ms appendString: @",totalMessagesMatching:"];
  [ms appendFormat: @"%i", __totalMessagesMatching];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MessageService_GetFullMessageRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (MessageService_UserToken) token messageId: (NSString *) messageId
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __messageId = [messageId retain_stub];
  __messageId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"messageId"])
  {
    __messageId = [[decoder decodeObjectForKey: @"messageId"] retain_stub];
    __messageId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__messageId_isset)
  {
    [encoder encodeObject: __messageId forKey: @"messageId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __messageId_isset ? 2654435761 : 0;
  if (__messageId_isset)
  {
    hash = (hash * 31) ^ [__messageId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[MessageService_GetFullMessageRequest class]]) {
    return NO;
  }
  MessageService_GetFullMessageRequest *other = (MessageService_GetFullMessageRequest *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__messageId_isset != other->__messageId_isset) ||
      (__messageId_isset && ((__messageId || other->__messageId) && ![__messageId isEqual:other->__messageId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__messageId release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_UserToken *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (BananaAuthentication_UserToken *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) messageId {
  return [[__messageId retain_stub] autorelease_stub];
}

- (void) setMessageId: (NSString *) messageId {
  [messageId retain_stub];
  [__messageId release_stub];
  __messageId = messageId;
  __messageId_isset = YES;
}

- (BOOL) messageIdIsSet {
  return __messageId_isset;
}

- (void) unsetMessageId {
  [__messageId release_stub];
  __messageId = nil;
  __messageId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_UserToken *fieldValue = [[BananaAuthentication_UserToken alloc] init];
          [fieldValue read: inProtocol];
          [self setToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessageId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetFullMessageRequest"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRUCT fieldID: 1];
      [__token write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__messageId_isset) {
    if (__messageId != nil) {
      [outProtocol writeFieldBeginWithName: @"messageId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __messageId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MessageService_GetFullMessageRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", __token];
  [ms appendString: @",messageId:"];
  [ms appendFormat: @"\"%@\"", __messageId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MessageService_GetFullMessageResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithFullBody: (NSString *) fullBody
{
  self = [super init];
  __fullBody = [fullBody retain_stub];
  __fullBody_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"fullBody"])
  {
    __fullBody = [[decoder decodeObjectForKey: @"fullBody"] retain_stub];
    __fullBody_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__fullBody_isset)
  {
    [encoder encodeObject: __fullBody forKey: @"fullBody"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __fullBody_isset ? 2654435761 : 0;
  if (__fullBody_isset)
  {
    hash = (hash * 31) ^ [__fullBody hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[MessageService_GetFullMessageResponse class]]) {
    return NO;
  }
  MessageService_GetFullMessageResponse *other = (MessageService_GetFullMessageResponse *)anObject;
  if ((__fullBody_isset != other->__fullBody_isset) ||
      (__fullBody_isset && ((__fullBody || other->__fullBody) && ![__fullBody isEqual:other->__fullBody]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__fullBody release_stub];
  [super dealloc_stub];
}

- (NSString *) fullBody {
  return [[__fullBody retain_stub] autorelease_stub];
}

- (void) setFullBody: (NSString *) fullBody {
  [fullBody retain_stub];
  [__fullBody release_stub];
  __fullBody = fullBody;
  __fullBody_isset = YES;
}

- (BOOL) fullBodyIsSet {
  return __fullBody_isset;
}

- (void) unsetFullBody {
  [__fullBody release_stub];
  __fullBody = nil;
  __fullBody_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFullBody: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetFullMessageResponse"];
  if (__fullBody_isset) {
    if (__fullBody != nil) {
      [outProtocol writeFieldBeginWithName: @"fullBody" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __fullBody];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MessageService_GetFullMessageResponse("];
  [ms appendString: @"fullBody:"];
  [ms appendFormat: @"\"%@\"", __fullBody];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

static MessageService_int MessageService_SERVICE_PORT = 7011;
static BananaEndpoint_TcpEndpoint * MessageService_PRODUCTION_ENDPOINT;
static BananaEndpoint_TcpEndpoint * MessageService_BETA_ENDPOINT;

@implementation MessageService_MessageServiceConstants
+ (void) initialize {
  MessageService_PRODUCTION_ENDPOINT = [[BananaEndpoint_TcpEndpoint alloc] init];
  [MessageService_PRODUCTION_ENDPOINT setHostname:@"message-srv.banana.aroma.tech"];
  [MessageService_PRODUCTION_ENDPOINT setPort:7011];

;
  MessageService_BETA_ENDPOINT = [[BananaEndpoint_TcpEndpoint alloc] init];
  [MessageService_BETA_ENDPOINT setHostname:@"message-srv.beta.banana.aroma.tech"];
  [MessageService_BETA_ENDPOINT setPort:7011];

;
}
+ (MessageService_int) SERVICE_PORT{
  return MessageService_SERVICE_PORT;
}
+ (BananaEndpoint_TcpEndpoint *) PRODUCTION_ENDPOINT{
  return MessageService_PRODUCTION_ENDPOINT;
}
+ (BananaEndpoint_TcpEndpoint *) BETA_ENDPOINT{
  return MessageService_BETA_ENDPOINT;
}
@end

@interface MessageService_getApiVersion_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation MessageService_getApiVersion_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[MessageService_getApiVersion_args class]]) {
    return NO;
  }
  MessageService_getApiVersion_args *other = (MessageService_getApiVersion_args *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getApiVersion_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MessageService_getApiVersion_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface MessageService_GetApiVersion_result : NSObject <TBase, NSCoding> {
  double __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) double success;
#endif

- (id) init;
- (id) initWithSuccess: (double) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (double) success;
- (void) setSuccess: (double) success;
#endif
- (BOOL) successIsSet;

@end

@implementation MessageService_GetApiVersion_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (double) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeDoubleForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeDouble: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [@(__success) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[MessageService_GetApiVersion_result class]]) {
    return NO;
  }
  MessageService_GetApiVersion_result *other = (MessageService_GetApiVersion_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && (__success != other->__success))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (double) success {
  return __success;
}

- (void) setSuccess: (double) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetApiVersion_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_DOUBLE fieldID: 0];
    [outProtocol writeDouble: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MessageService_GetApiVersion_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%f", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MessageService_MessageServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) send_getApiVersion
{
  [outProtocol writeMessageBeginWithName: @"getApiVersion" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getApiVersion_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (double) recv_getApiVersion
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  MessageService_GetApiVersion_result * result = [[[MessageService_GetApiVersion_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getApiVersion failed: unknown result"];
}

- (double) getApiVersion
{
  [self send_getApiVersion];
  [[outProtocol transport] flush];
  return [self recv_getApiVersion];
}

@end

@implementation MessageService_MessageServiceProcessor

- (id) initWithMessageService: (id <MessageService_MessageService>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
  SEL s = @selector(process_getApiVersion_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getApiVersion"];
}
return self;
}

- (id<MessageService_MessageService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getApiVersion_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
MessageService_getApiVersion_args * args = [[MessageService_getApiVersion_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
MessageService_GetApiVersion_result * result = [[MessageService_GetApiVersion_result alloc] init];
[result setSuccess: [mService getApiVersion]];
[outProtocol writeMessageBeginWithName: @"getApiVersion"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

