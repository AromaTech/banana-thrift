/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"

#import "Authentication.h"
#import "Banana.h"
#import "Endpoint.h"
#import "Exceptions.h"

#import "BananaService.h"

@implementation BananaService_ProvisionServiceRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (NSString *) token serviceName: (NSString *) serviceName programmingLanguage: (NSString *) programmingLanguage organization: (NSString *) organization
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __serviceName = [serviceName retain_stub];
  __serviceName_isset = YES;
  __programmingLanguage = [programmingLanguage retain_stub];
  __programmingLanguage_isset = YES;
  __organization = [organization retain_stub];
  __organization_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceName"])
  {
    __serviceName = [[decoder decodeObjectForKey: @"serviceName"] retain_stub];
    __serviceName_isset = YES;
  }
  if ([decoder containsValueForKey: @"programmingLanguage"])
  {
    __programmingLanguage = [[decoder decodeObjectForKey: @"programmingLanguage"] retain_stub];
    __programmingLanguage_isset = YES;
  }
  if ([decoder containsValueForKey: @"organization"])
  {
    __organization = [[decoder decodeObjectForKey: @"organization"] retain_stub];
    __organization_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__serviceName_isset)
  {
    [encoder encodeObject: __serviceName forKey: @"serviceName"];
  }
  if (__programmingLanguage_isset)
  {
    [encoder encodeObject: __programmingLanguage forKey: @"programmingLanguage"];
  }
  if (__organization_isset)
  {
    [encoder encodeObject: __organization forKey: @"organization"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __serviceName_isset ? 2654435761 : 0;
  if (__serviceName_isset)
  {
    hash = (hash * 31) ^ [__serviceName hash];
  }
  hash = (hash * 31) ^ __programmingLanguage_isset ? 2654435761 : 0;
  if (__programmingLanguage_isset)
  {
    hash = (hash * 31) ^ [__programmingLanguage hash];
  }
  hash = (hash * 31) ^ __organization_isset ? 2654435761 : 0;
  if (__organization_isset)
  {
    hash = (hash * 31) ^ [__organization hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_ProvisionServiceRequest class]]) {
    return NO;
  }
  BananaService_ProvisionServiceRequest *other = (BananaService_ProvisionServiceRequest *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__serviceName_isset != other->__serviceName_isset) ||
      (__serviceName_isset && ((__serviceName || other->__serviceName) && ![__serviceName isEqual:other->__serviceName]))) {
    return NO;
  }
  if ((__programmingLanguage_isset != other->__programmingLanguage_isset) ||
      (__programmingLanguage_isset && ((__programmingLanguage || other->__programmingLanguage) && ![__programmingLanguage isEqual:other->__programmingLanguage]))) {
    return NO;
  }
  if ((__organization_isset != other->__organization_isset) ||
      (__organization_isset && ((__organization || other->__organization) && ![__organization isEqual:other->__organization]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__serviceName release_stub];
  [__programmingLanguage release_stub];
  [__organization release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) serviceName {
  return [[__serviceName retain_stub] autorelease_stub];
}

- (void) setServiceName: (NSString *) serviceName {
  [serviceName retain_stub];
  [__serviceName release_stub];
  __serviceName = serviceName;
  __serviceName_isset = YES;
}

- (BOOL) serviceNameIsSet {
  return __serviceName_isset;
}

- (void) unsetServiceName {
  [__serviceName release_stub];
  __serviceName = nil;
  __serviceName_isset = NO;
}

- (NSString *) programmingLanguage {
  return [[__programmingLanguage retain_stub] autorelease_stub];
}

- (void) setProgrammingLanguage: (NSString *) programmingLanguage {
  [programmingLanguage retain_stub];
  [__programmingLanguage release_stub];
  __programmingLanguage = programmingLanguage;
  __programmingLanguage_isset = YES;
}

- (BOOL) programmingLanguageIsSet {
  return __programmingLanguage_isset;
}

- (void) unsetProgrammingLanguage {
  [__programmingLanguage release_stub];
  __programmingLanguage = nil;
  __programmingLanguage_isset = NO;
}

- (NSString *) organization {
  return [[__organization retain_stub] autorelease_stub];
}

- (void) setOrganization: (NSString *) organization {
  [organization retain_stub];
  [__organization release_stub];
  __organization = organization;
  __organization_isset = YES;
}

- (BOOL) organizationIsSet {
  return __organization_isset;
}

- (void) unsetOrganization {
  [__organization release_stub];
  __organization = nil;
  __organization_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setServiceName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setProgrammingLanguage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrganization: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ProvisionServiceRequest"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serviceName_isset) {
    if (__serviceName != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __serviceName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__programmingLanguage_isset) {
    if (__programmingLanguage != nil) {
      [outProtocol writeFieldBeginWithName: @"programmingLanguage" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __programmingLanguage];
      [outProtocol writeFieldEnd];
    }
  }
  if (__organization_isset) {
    if (__organization != nil) {
      [outProtocol writeFieldBeginWithName: @"organization" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __organization];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_ProvisionServiceRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",serviceName:"];
  [ms appendFormat: @"\"%@\"", __serviceName];
  [ms appendString: @",programmingLanguage:"];
  [ms appendFormat: @"\"%@\"", __programmingLanguage];
  [ms appendString: @",organization:"];
  [ms appendFormat: @"\"%@\"", __organization];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_ProvisionServiceResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithBananaToken: (NSString *) bananaToken serviceName: (NSString *) serviceName
{
  self = [super init];
  __bananaToken = [bananaToken retain_stub];
  __bananaToken_isset = YES;
  __serviceName = [serviceName retain_stub];
  __serviceName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"bananaToken"])
  {
    __bananaToken = [[decoder decodeObjectForKey: @"bananaToken"] retain_stub];
    __bananaToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceName"])
  {
    __serviceName = [[decoder decodeObjectForKey: @"serviceName"] retain_stub];
    __serviceName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__bananaToken_isset)
  {
    [encoder encodeObject: __bananaToken forKey: @"bananaToken"];
  }
  if (__serviceName_isset)
  {
    [encoder encodeObject: __serviceName forKey: @"serviceName"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __bananaToken_isset ? 2654435761 : 0;
  if (__bananaToken_isset)
  {
    hash = (hash * 31) ^ [__bananaToken hash];
  }
  hash = (hash * 31) ^ __serviceName_isset ? 2654435761 : 0;
  if (__serviceName_isset)
  {
    hash = (hash * 31) ^ [__serviceName hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_ProvisionServiceResponse class]]) {
    return NO;
  }
  BananaService_ProvisionServiceResponse *other = (BananaService_ProvisionServiceResponse *)anObject;
  if ((__bananaToken_isset != other->__bananaToken_isset) ||
      (__bananaToken_isset && ((__bananaToken || other->__bananaToken) && ![__bananaToken isEqual:other->__bananaToken]))) {
    return NO;
  }
  if ((__serviceName_isset != other->__serviceName_isset) ||
      (__serviceName_isset && ((__serviceName || other->__serviceName) && ![__serviceName isEqual:other->__serviceName]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__bananaToken release_stub];
  [__serviceName release_stub];
  [super dealloc_stub];
}

- (NSString *) bananaToken {
  return [[__bananaToken retain_stub] autorelease_stub];
}

- (void) setBananaToken: (NSString *) bananaToken {
  [bananaToken retain_stub];
  [__bananaToken release_stub];
  __bananaToken = bananaToken;
  __bananaToken_isset = YES;
}

- (BOOL) bananaTokenIsSet {
  return __bananaToken_isset;
}

- (void) unsetBananaToken {
  [__bananaToken release_stub];
  __bananaToken = nil;
  __bananaToken_isset = NO;
}

- (NSString *) serviceName {
  return [[__serviceName retain_stub] autorelease_stub];
}

- (void) setServiceName: (NSString *) serviceName {
  [serviceName retain_stub];
  [__serviceName release_stub];
  __serviceName = serviceName;
  __serviceName_isset = YES;
}

- (BOOL) serviceNameIsSet {
  return __serviceName_isset;
}

- (void) unsetServiceName {
  [__serviceName release_stub];
  __serviceName = nil;
  __serviceName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBananaToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setServiceName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ProvisionServiceResponse"];
  if (__bananaToken_isset) {
    if (__bananaToken != nil) {
      [outProtocol writeFieldBeginWithName: @"bananaToken" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __bananaToken];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serviceName_isset) {
    if (__serviceName != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __serviceName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_ProvisionServiceResponse("];
  [ms appendString: @"bananaToken:"];
  [ms appendFormat: @"\"%@\"", __bananaToken];
  [ms appendString: @",serviceName:"];
  [ms appendFormat: @"\"%@\"", __serviceName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_RegisterHealthCheckRequest

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_RegisterHealthCheckRequest class]]) {
    return NO;
  }
  BananaService_RegisterHealthCheckRequest *other = (BananaService_RegisterHealthCheckRequest *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegisterHealthCheckRequest"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_RegisterHealthCheckRequest("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_RegisterHealthCheckResponse

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_RegisterHealthCheckResponse class]]) {
    return NO;
  }
  BananaService_RegisterHealthCheckResponse *other = (BananaService_RegisterHealthCheckResponse *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegisterHealthCheckResponse"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_RegisterHealthCheckResponse("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation BananaService_BananaServiceConstants
+ (void) initialize {
}
@end

@interface BananaService_provisionService_args : NSObject <TBase, NSCoding> {
  BananaService_ProvisionServiceRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_ProvisionServiceRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_ProvisionServiceRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_ProvisionServiceRequest *) request;
- (void) setRequest: (BananaService_ProvisionServiceRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_provisionService_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_ProvisionServiceRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_provisionService_args class]]) {
    return NO;
  }
  BananaService_provisionService_args *other = (BananaService_provisionService_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_ProvisionServiceRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_ProvisionServiceRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case -1:
        if (fieldType == TType_STRUCT) {
          BananaService_ProvisionServiceRequest *fieldValue = [[BananaService_ProvisionServiceRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"provisionService_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: -1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_provisionService_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_ProvisionService_result : NSObject <TBase, NSCoding> {
  BananaService_ProvisionServiceResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidCredentialsException __ex3;
  BananaService_ServiceDoesNotExistException __ex4;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
  BOOL __ex4_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_ProvisionServiceResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidCredentialsException ex3;
@property (nonatomic, retain, getter=ex4, setter=setEx4:) BananaService_ServiceDoesNotExistException ex4;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_ProvisionServiceResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3 ex4: (BananaService_ServiceDoesNotExistException) ex4;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_ProvisionServiceResponse *) success;
- (void) setSuccess: (BananaService_ProvisionServiceResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidCredentialsException) ex3;
- (void) setEx3: (BananaService_InvalidCredentialsException) ex3;
#endif
- (BOOL) ex3IsSet;

#if !__has_feature(objc_arc)
- (BananaService_ServiceDoesNotExistException) ex4;
- (void) setEx4: (BananaService_ServiceDoesNotExistException) ex4;
#endif
- (BOOL) ex4IsSet;

@end

@implementation BananaService_ProvisionService_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_ProvisionServiceResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3 ex4: (BananaService_ServiceDoesNotExistException) ex4
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  __ex4 = [ex4 retain_stub];
  __ex4_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex4"])
  {
    __ex4 = [[decoder decodeObjectForKey: @"ex4"] retain_stub];
    __ex4_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
  if (__ex4_isset)
  {
    [encoder encodeObject: __ex4 forKey: @"ex4"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  hash = (hash * 31) ^ __ex4_isset ? 2654435761 : 0;
  if (__ex4_isset)
  {
    hash = (hash * 31) ^ [__ex4 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_ProvisionService_result class]]) {
    return NO;
  }
  BananaService_ProvisionService_result *other = (BananaService_ProvisionService_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  if ((__ex4_isset != other->__ex4_isset) ||
      (__ex4_isset && ((__ex4 || other->__ex4) && ![__ex4 isEqual:other->__ex4]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [__ex4 release_stub];
  [super dealloc_stub];
}

- (BananaService_ProvisionServiceResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_ProvisionServiceResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidCredentialsException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidCredentialsException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (BananaException_ServiceDoesNotExistException *) ex4 {
  return [[__ex4 retain_stub] autorelease_stub];
}

- (void) setEx4: (BananaException_ServiceDoesNotExistException *) ex4 {
  [ex4 retain_stub];
  [__ex4 release_stub];
  __ex4 = ex4;
  __ex4_isset = YES;
}

- (BOOL) ex4IsSet {
  return __ex4_isset;
}

- (void) unsetEx4 {
  [__ex4 release_stub];
  __ex4 = nil;
  __ex4_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_ProvisionServiceResponse *fieldValue = [[BananaService_ProvisionServiceResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidCredentialsException *fieldValue = [[BananaException_InvalidCredentialsException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          BananaException_ServiceDoesNotExistException *fieldValue = [[BananaException_ServiceDoesNotExistException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx4: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ProvisionService_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex4_isset) {
    if (__ex4 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex4" type: TType_STRUCT fieldID: 4];
      [__ex4 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_ProvisionService_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", __ex4];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_registerHealthCheck_args : NSObject <TBase, NSCoding> {
  BananaService_RegisterHealthCheckRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_RegisterHealthCheckRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_RegisterHealthCheckRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_RegisterHealthCheckRequest *) request;
- (void) setRequest: (BananaService_RegisterHealthCheckRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_registerHealthCheck_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_RegisterHealthCheckRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_registerHealthCheck_args class]]) {
    return NO;
  }
  BananaService_registerHealthCheck_args *other = (BananaService_registerHealthCheck_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_RegisterHealthCheckRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_RegisterHealthCheckRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case -1:
        if (fieldType == TType_STRUCT) {
          BananaService_RegisterHealthCheckRequest *fieldValue = [[BananaService_RegisterHealthCheckRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"registerHealthCheck_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: -1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_registerHealthCheck_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_RegisterHealthCheck_result : NSObject <TBase, NSCoding> {
  BananaService_RegisterHealthCheckResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidCredentialsException __ex3;
  BananaService_ServiceDoesNotExistException __ex4;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
  BOOL __ex4_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_RegisterHealthCheckResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidCredentialsException ex3;
@property (nonatomic, retain, getter=ex4, setter=setEx4:) BananaService_ServiceDoesNotExistException ex4;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_RegisterHealthCheckResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3 ex4: (BananaService_ServiceDoesNotExistException) ex4;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_RegisterHealthCheckResponse *) success;
- (void) setSuccess: (BananaService_RegisterHealthCheckResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidCredentialsException) ex3;
- (void) setEx3: (BananaService_InvalidCredentialsException) ex3;
#endif
- (BOOL) ex3IsSet;

#if !__has_feature(objc_arc)
- (BananaService_ServiceDoesNotExistException) ex4;
- (void) setEx4: (BananaService_ServiceDoesNotExistException) ex4;
#endif
- (BOOL) ex4IsSet;

@end

@implementation BananaService_RegisterHealthCheck_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_RegisterHealthCheckResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3 ex4: (BananaService_ServiceDoesNotExistException) ex4
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  __ex4 = [ex4 retain_stub];
  __ex4_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex4"])
  {
    __ex4 = [[decoder decodeObjectForKey: @"ex4"] retain_stub];
    __ex4_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
  if (__ex4_isset)
  {
    [encoder encodeObject: __ex4 forKey: @"ex4"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  hash = (hash * 31) ^ __ex4_isset ? 2654435761 : 0;
  if (__ex4_isset)
  {
    hash = (hash * 31) ^ [__ex4 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_RegisterHealthCheck_result class]]) {
    return NO;
  }
  BananaService_RegisterHealthCheck_result *other = (BananaService_RegisterHealthCheck_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  if ((__ex4_isset != other->__ex4_isset) ||
      (__ex4_isset && ((__ex4 || other->__ex4) && ![__ex4 isEqual:other->__ex4]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [__ex4 release_stub];
  [super dealloc_stub];
}

- (BananaService_RegisterHealthCheckResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_RegisterHealthCheckResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidCredentialsException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidCredentialsException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (BananaException_ServiceDoesNotExistException *) ex4 {
  return [[__ex4 retain_stub] autorelease_stub];
}

- (void) setEx4: (BananaException_ServiceDoesNotExistException *) ex4 {
  [ex4 retain_stub];
  [__ex4 release_stub];
  __ex4 = ex4;
  __ex4_isset = YES;
}

- (BOOL) ex4IsSet {
  return __ex4_isset;
}

- (void) unsetEx4 {
  [__ex4 release_stub];
  __ex4 = nil;
  __ex4_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_RegisterHealthCheckResponse *fieldValue = [[BananaService_RegisterHealthCheckResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidCredentialsException *fieldValue = [[BananaException_InvalidCredentialsException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          BananaException_ServiceDoesNotExistException *fieldValue = [[BananaException_ServiceDoesNotExistException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx4: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegisterHealthCheck_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex4_isset) {
    if (__ex4 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex4" type: TType_STRUCT fieldID: 4];
      [__ex4 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_RegisterHealthCheck_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", __ex4];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_BananaServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) send_provisionService: (BananaService_ProvisionServiceRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"provisionService" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"provisionService_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: -1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_ProvisionServiceResponse *) recv_provisionService
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_ProvisionService_result * result = [[[BananaService_ProvisionService_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  if ([result ex4IsSet]) {
    @throw [result ex4];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"provisionService failed: unknown result"];
}

- (BananaService_ProvisionServiceResponse *) provisionService: (BananaService_ProvisionServiceRequest *) request
{
  [self send_provisionService : request];
  [[outProtocol transport] flush];
  return [self recv_provisionService];
}

- (void) send_registerHealthCheck: (BananaService_RegisterHealthCheckRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"registerHealthCheck" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"registerHealthCheck_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: -1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_RegisterHealthCheckResponse *) recv_registerHealthCheck
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_RegisterHealthCheck_result * result = [[[BananaService_RegisterHealthCheck_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  if ([result ex4IsSet]) {
    @throw [result ex4];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"registerHealthCheck failed: unknown result"];
}

- (BananaService_RegisterHealthCheckResponse *) registerHealthCheck: (BananaService_RegisterHealthCheckRequest *) request
{
  [self send_registerHealthCheck : request];
  [[outProtocol transport] flush];
  return [self recv_registerHealthCheck];
}

@end

@implementation BananaService_BananaServiceProcessor

- (id) initWithBananaService: (id <BananaService_BananaService>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
  SEL s = @selector(process_provisionService_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"provisionService"];
}
{
  SEL s = @selector(process_registerHealthCheck_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"registerHealthCheck"];
}
return self;
}

- (id<BananaService_BananaService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_provisionService_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_provisionService_args * args = [[BananaService_provisionService_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_ProvisionService_result * result = [[BananaService_ProvisionService_result alloc] init];
[result setSuccess: [mService provisionService: [args request]]];
[outProtocol writeMessageBeginWithName: @"provisionService"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_registerHealthCheck_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_registerHealthCheck_args * args = [[BananaService_registerHealthCheck_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_RegisterHealthCheck_result * result = [[BananaService_RegisterHealthCheck_result alloc] init];
[result setSuccess: [mService registerHealthCheck: [args request]]];
[outProtocol writeMessageBeginWithName: @"registerHealthCheck"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

