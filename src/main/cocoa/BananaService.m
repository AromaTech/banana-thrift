/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"

#import "Authentication.h"
#import "Banana.h"
#import "Channels.h"
#import "Endpoint.h"
#import "Events.h"
#import "Exceptions.h"

#import "BananaService.h"

@implementation BananaService_DeleteMessageRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.messageIds = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithToken: (BananaService_UserToken) token messageId: (BananaService_uuid) messageId applicationId: (BananaService_uuid) applicationId messageIds: (NSMutableArray *) messageIds
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __messageId = [messageId retain_stub];
  __messageId_isset = YES;
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  __messageIds = [messageIds retain_stub];
  __messageIds_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"messageId"])
  {
    __messageId = [[decoder decodeObjectForKey: @"messageId"] retain_stub];
    __messageId_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"messageIds"])
  {
    __messageIds = [[decoder decodeObjectForKey: @"messageIds"] retain_stub];
    __messageIds_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__messageId_isset)
  {
    [encoder encodeObject: __messageId forKey: @"messageId"];
  }
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
  if (__messageIds_isset)
  {
    [encoder encodeObject: __messageIds forKey: @"messageIds"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __messageId_isset ? 2654435761 : 0;
  if (__messageId_isset)
  {
    hash = (hash * 31) ^ [__messageId hash];
  }
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  hash = (hash * 31) ^ __messageIds_isset ? 2654435761 : 0;
  if (__messageIds_isset)
  {
    hash = (hash * 31) ^ [__messageIds hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_DeleteMessageRequest class]]) {
    return NO;
  }
  BananaService_DeleteMessageRequest *other = (BananaService_DeleteMessageRequest *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__messageId_isset != other->__messageId_isset) ||
      (__messageId_isset && ((__messageId || other->__messageId) && ![__messageId isEqual:other->__messageId]))) {
    return NO;
  }
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  if ((__messageIds_isset != other->__messageIds_isset) ||
      (__messageIds_isset && ((__messageIds || other->__messageIds) && ![__messageIds isEqual:other->__messageIds]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__messageId release_stub];
  [__applicationId release_stub];
  [__messageIds release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_UserToken *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (BananaAuthentication_UserToken *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) messageId {
  return [[__messageId retain_stub] autorelease_stub];
}

- (void) setMessageId: (NSString *) messageId {
  [messageId retain_stub];
  [__messageId release_stub];
  __messageId = messageId;
  __messageId_isset = YES;
}

- (BOOL) messageIdIsSet {
  return __messageId_isset;
}

- (void) unsetMessageId {
  [__messageId release_stub];
  __messageId = nil;
  __messageId_isset = NO;
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (NSMutableArray *) messageIds {
  return [[__messageIds retain_stub] autorelease_stub];
}

- (void) setMessageIds: (NSMutableArray *) messageIds {
  [messageIds retain_stub];
  [__messageIds release_stub];
  __messageIds = messageIds;
  __messageIds_isset = YES;
}

- (BOOL) messageIdsIsSet {
  return __messageIds_isset;
}

- (void) unsetMessageIds {
  [__messageIds release_stub];
  __messageIds = nil;
  __messageIds_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_UserToken *fieldValue = [[BananaAuthentication_UserToken alloc] init];
          [fieldValue read: inProtocol];
          [self setToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessageId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2 = [inProtocol readString];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readListEnd];
          [self setMessageIds: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DeleteMessageRequest"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRUCT fieldID: 1];
      [__token write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__messageId_isset) {
    if (__messageId != nil) {
      [outProtocol writeFieldBeginWithName: @"messageId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __messageId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__messageIds_isset) {
    if (__messageIds != nil) {
      [outProtocol writeFieldBeginWithName: @"messageIds" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__messageIds count]];
        int idx4;
        for (idx4 = 0; idx4 < [__messageIds count]; idx4++)
        {
          [outProtocol writeString: [__messageIds objectAtIndex: idx4]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_DeleteMessageRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", __token];
  [ms appendString: @",messageId:"];
  [ms appendFormat: @"\"%@\"", __messageId];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @",messageIds:"];
  [ms appendFormat: @"%@", __messageIds];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_DeleteMessageResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.messagesDeleted = 0;

#endif
  return self;
}

- (id) initWithMessagesDeleted: (BananaService_int) messagesDeleted
{
  self = [super init];
  __messagesDeleted = messagesDeleted;
  __messagesDeleted_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"messagesDeleted"])
  {
    __messagesDeleted = [decoder decodeInt32ForKey: @"messagesDeleted"];
    __messagesDeleted_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__messagesDeleted_isset)
  {
    [encoder encodeInt32: __messagesDeleted forKey: @"messagesDeleted"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __messagesDeleted_isset ? 2654435761 : 0;
  if (__messagesDeleted_isset)
  {
    hash = (hash * 31) ^ [@(__messagesDeleted) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_DeleteMessageResponse class]]) {
    return NO;
  }
  BananaService_DeleteMessageResponse *other = (BananaService_DeleteMessageResponse *)anObject;
  if ((__messagesDeleted_isset != other->__messagesDeleted_isset) ||
      (__messagesDeleted_isset && (__messagesDeleted != other->__messagesDeleted))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) messagesDeleted {
  return __messagesDeleted;
}

- (void) setMessagesDeleted: (int32_t) messagesDeleted {
  __messagesDeleted = messagesDeleted;
  __messagesDeleted_isset = YES;
}

- (BOOL) messagesDeletedIsSet {
  return __messagesDeleted_isset;
}

- (void) unsetMessagesDeleted {
  __messagesDeleted_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMessagesDeleted: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DeleteMessageResponse"];
  if (__messagesDeleted_isset) {
    [outProtocol writeFieldBeginWithName: @"messagesDeleted" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __messagesDeleted];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_DeleteMessageResponse("];
  [ms appendString: @"messagesDeleted:"];
  [ms appendFormat: @"%i", __messagesDeleted];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_DismissMessageRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.messageIds = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithToken: (BananaService_UserToken) token messageId: (BananaService_uuid) messageId applicationId: (BananaService_uuid) applicationId messageIds: (NSMutableArray *) messageIds
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __messageId = [messageId retain_stub];
  __messageId_isset = YES;
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  __messageIds = [messageIds retain_stub];
  __messageIds_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"messageId"])
  {
    __messageId = [[decoder decodeObjectForKey: @"messageId"] retain_stub];
    __messageId_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"messageIds"])
  {
    __messageIds = [[decoder decodeObjectForKey: @"messageIds"] retain_stub];
    __messageIds_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__messageId_isset)
  {
    [encoder encodeObject: __messageId forKey: @"messageId"];
  }
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
  if (__messageIds_isset)
  {
    [encoder encodeObject: __messageIds forKey: @"messageIds"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __messageId_isset ? 2654435761 : 0;
  if (__messageId_isset)
  {
    hash = (hash * 31) ^ [__messageId hash];
  }
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  hash = (hash * 31) ^ __messageIds_isset ? 2654435761 : 0;
  if (__messageIds_isset)
  {
    hash = (hash * 31) ^ [__messageIds hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_DismissMessageRequest class]]) {
    return NO;
  }
  BananaService_DismissMessageRequest *other = (BananaService_DismissMessageRequest *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__messageId_isset != other->__messageId_isset) ||
      (__messageId_isset && ((__messageId || other->__messageId) && ![__messageId isEqual:other->__messageId]))) {
    return NO;
  }
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  if ((__messageIds_isset != other->__messageIds_isset) ||
      (__messageIds_isset && ((__messageIds || other->__messageIds) && ![__messageIds isEqual:other->__messageIds]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__messageId release_stub];
  [__applicationId release_stub];
  [__messageIds release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_UserToken *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (BananaAuthentication_UserToken *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) messageId {
  return [[__messageId retain_stub] autorelease_stub];
}

- (void) setMessageId: (NSString *) messageId {
  [messageId retain_stub];
  [__messageId release_stub];
  __messageId = messageId;
  __messageId_isset = YES;
}

- (BOOL) messageIdIsSet {
  return __messageId_isset;
}

- (void) unsetMessageId {
  [__messageId release_stub];
  __messageId = nil;
  __messageId_isset = NO;
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (NSMutableArray *) messageIds {
  return [[__messageIds retain_stub] autorelease_stub];
}

- (void) setMessageIds: (NSMutableArray *) messageIds {
  [messageIds retain_stub];
  [__messageIds release_stub];
  __messageIds = messageIds;
  __messageIds_isset = YES;
}

- (BOOL) messageIdsIsSet {
  return __messageIds_isset;
}

- (void) unsetMessageIds {
  [__messageIds release_stub];
  __messageIds = nil;
  __messageIds_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_UserToken *fieldValue = [[BananaAuthentication_UserToken alloc] init];
          [fieldValue read: inProtocol];
          [self setToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessageId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            NSString * _elem7 = [inProtocol readString];
            [fieldValue addObject: _elem7];
          }
          [inProtocol readListEnd];
          [self setMessageIds: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DismissMessageRequest"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRUCT fieldID: 1];
      [__token write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__messageId_isset) {
    if (__messageId != nil) {
      [outProtocol writeFieldBeginWithName: @"messageId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __messageId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__messageIds_isset) {
    if (__messageIds != nil) {
      [outProtocol writeFieldBeginWithName: @"messageIds" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__messageIds count]];
        int idx9;
        for (idx9 = 0; idx9 < [__messageIds count]; idx9++)
        {
          [outProtocol writeString: [__messageIds objectAtIndex: idx9]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_DismissMessageRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", __token];
  [ms appendString: @",messageId:"];
  [ms appendFormat: @"\"%@\"", __messageId];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @",messageIds:"];
  [ms appendFormat: @"%@", __messageIds];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_DismissMessageResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.messagesDismissed = 0;

#endif
  return self;
}

- (id) initWithMessagesDismissed: (BananaService_int) messagesDismissed
{
  self = [super init];
  __messagesDismissed = messagesDismissed;
  __messagesDismissed_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"messagesDismissed"])
  {
    __messagesDismissed = [decoder decodeInt32ForKey: @"messagesDismissed"];
    __messagesDismissed_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__messagesDismissed_isset)
  {
    [encoder encodeInt32: __messagesDismissed forKey: @"messagesDismissed"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __messagesDismissed_isset ? 2654435761 : 0;
  if (__messagesDismissed_isset)
  {
    hash = (hash * 31) ^ [@(__messagesDismissed) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_DismissMessageResponse class]]) {
    return NO;
  }
  BananaService_DismissMessageResponse *other = (BananaService_DismissMessageResponse *)anObject;
  if ((__messagesDismissed_isset != other->__messagesDismissed_isset) ||
      (__messagesDismissed_isset && (__messagesDismissed != other->__messagesDismissed))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) messagesDismissed {
  return __messagesDismissed;
}

- (void) setMessagesDismissed: (int32_t) messagesDismissed {
  __messagesDismissed = messagesDismissed;
  __messagesDismissed_isset = YES;
}

- (BOOL) messagesDismissedIsSet {
  return __messagesDismissed_isset;
}

- (void) unsetMessagesDismissed {
  __messagesDismissed_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMessagesDismissed: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DismissMessageResponse"];
  if (__messagesDismissed_isset) {
    [outProtocol writeFieldBeginWithName: @"messagesDismissed" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __messagesDismissed];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_DismissMessageResponse("];
  [ms appendString: @"messagesDismissed:"];
  [ms appendFormat: @"%i", __messagesDismissed];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_ProvisionApplicationRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.applicationDescription = @"";

  self.tier = 0;

#endif
  return self;
}

- (id) initWithToken: (BananaService_UserToken) token applicationName: (NSString *) applicationName programmingLanguage: (int) programmingLanguage organizationId: (BananaService_uuid) organizationId icon: (BananaService_Image) icon owners: (NSMutableSet *) owners applicationDescription: (NSString *) applicationDescription tier: (int) tier
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __applicationName = [applicationName retain_stub];
  __applicationName_isset = YES;
  __programmingLanguage = programmingLanguage;
  __programmingLanguage_isset = YES;
  __organizationId = [organizationId retain_stub];
  __organizationId_isset = YES;
  __icon = [icon retain_stub];
  __icon_isset = YES;
  __owners = [owners retain_stub];
  __owners_isset = YES;
  __applicationDescription = [applicationDescription retain_stub];
  __applicationDescription_isset = YES;
  __tier = tier;
  __tier_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationName"])
  {
    __applicationName = [[decoder decodeObjectForKey: @"applicationName"] retain_stub];
    __applicationName_isset = YES;
  }
  if ([decoder containsValueForKey: @"programmingLanguage"])
  {
    __programmingLanguage = [decoder decodeIntForKey: @"programmingLanguage"];
    __programmingLanguage_isset = YES;
  }
  if ([decoder containsValueForKey: @"organizationId"])
  {
    __organizationId = [[decoder decodeObjectForKey: @"organizationId"] retain_stub];
    __organizationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"icon"])
  {
    __icon = [[decoder decodeObjectForKey: @"icon"] retain_stub];
    __icon_isset = YES;
  }
  if ([decoder containsValueForKey: @"owners"])
  {
    __owners = [[decoder decodeObjectForKey: @"owners"] retain_stub];
    __owners_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationDescription"])
  {
    __applicationDescription = [[decoder decodeObjectForKey: @"applicationDescription"] retain_stub];
    __applicationDescription_isset = YES;
  }
  if ([decoder containsValueForKey: @"tier"])
  {
    __tier = [decoder decodeIntForKey: @"tier"];
    __tier_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__applicationName_isset)
  {
    [encoder encodeObject: __applicationName forKey: @"applicationName"];
  }
  if (__programmingLanguage_isset)
  {
    [encoder encodeInt: __programmingLanguage forKey: @"programmingLanguage"];
  }
  if (__organizationId_isset)
  {
    [encoder encodeObject: __organizationId forKey: @"organizationId"];
  }
  if (__icon_isset)
  {
    [encoder encodeObject: __icon forKey: @"icon"];
  }
  if (__owners_isset)
  {
    [encoder encodeObject: __owners forKey: @"owners"];
  }
  if (__applicationDescription_isset)
  {
    [encoder encodeObject: __applicationDescription forKey: @"applicationDescription"];
  }
  if (__tier_isset)
  {
    [encoder encodeInt: __tier forKey: @"tier"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __applicationName_isset ? 2654435761 : 0;
  if (__applicationName_isset)
  {
    hash = (hash * 31) ^ [__applicationName hash];
  }
  hash = (hash * 31) ^ __programmingLanguage_isset ? 2654435761 : 0;
  if (__programmingLanguage_isset)
  {
    hash = (hash * 31) ^ [@(__programmingLanguage) hash];
  }
  hash = (hash * 31) ^ __organizationId_isset ? 2654435761 : 0;
  if (__organizationId_isset)
  {
    hash = (hash * 31) ^ [__organizationId hash];
  }
  hash = (hash * 31) ^ __icon_isset ? 2654435761 : 0;
  if (__icon_isset)
  {
    hash = (hash * 31) ^ [__icon hash];
  }
  hash = (hash * 31) ^ __owners_isset ? 2654435761 : 0;
  if (__owners_isset)
  {
    hash = (hash * 31) ^ [__owners hash];
  }
  hash = (hash * 31) ^ __applicationDescription_isset ? 2654435761 : 0;
  if (__applicationDescription_isset)
  {
    hash = (hash * 31) ^ [__applicationDescription hash];
  }
  hash = (hash * 31) ^ __tier_isset ? 2654435761 : 0;
  if (__tier_isset)
  {
    hash = (hash * 31) ^ [@(__tier) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_ProvisionApplicationRequest class]]) {
    return NO;
  }
  BananaService_ProvisionApplicationRequest *other = (BananaService_ProvisionApplicationRequest *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__applicationName_isset != other->__applicationName_isset) ||
      (__applicationName_isset && ((__applicationName || other->__applicationName) && ![__applicationName isEqual:other->__applicationName]))) {
    return NO;
  }
  if ((__programmingLanguage_isset != other->__programmingLanguage_isset) ||
      (__programmingLanguage_isset && (__programmingLanguage != other->__programmingLanguage))) {
    return NO;
  }
  if ((__organizationId_isset != other->__organizationId_isset) ||
      (__organizationId_isset && ((__organizationId || other->__organizationId) && ![__organizationId isEqual:other->__organizationId]))) {
    return NO;
  }
  if ((__icon_isset != other->__icon_isset) ||
      (__icon_isset && ((__icon || other->__icon) && ![__icon isEqual:other->__icon]))) {
    return NO;
  }
  if ((__owners_isset != other->__owners_isset) ||
      (__owners_isset && ((__owners || other->__owners) && ![__owners isEqual:other->__owners]))) {
    return NO;
  }
  if ((__applicationDescription_isset != other->__applicationDescription_isset) ||
      (__applicationDescription_isset && ((__applicationDescription || other->__applicationDescription) && ![__applicationDescription isEqual:other->__applicationDescription]))) {
    return NO;
  }
  if ((__tier_isset != other->__tier_isset) ||
      (__tier_isset && (__tier != other->__tier))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__applicationName release_stub];
  [__organizationId release_stub];
  [__icon release_stub];
  [__owners release_stub];
  [__applicationDescription release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_UserToken *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (BananaAuthentication_UserToken *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) applicationName {
  return [[__applicationName retain_stub] autorelease_stub];
}

- (void) setApplicationName: (NSString *) applicationName {
  [applicationName retain_stub];
  [__applicationName release_stub];
  __applicationName = applicationName;
  __applicationName_isset = YES;
}

- (BOOL) applicationNameIsSet {
  return __applicationName_isset;
}

- (void) unsetApplicationName {
  [__applicationName release_stub];
  __applicationName = nil;
  __applicationName_isset = NO;
}

- (int) programmingLanguage {
  return __programmingLanguage;
}

- (void) setProgrammingLanguage: (int) programmingLanguage {
  __programmingLanguage = programmingLanguage;
  __programmingLanguage_isset = YES;
}

- (BOOL) programmingLanguageIsSet {
  return __programmingLanguage_isset;
}

- (void) unsetProgrammingLanguage {
  __programmingLanguage_isset = NO;
}

- (NSString *) organizationId {
  return [[__organizationId retain_stub] autorelease_stub];
}

- (void) setOrganizationId: (NSString *) organizationId {
  [organizationId retain_stub];
  [__organizationId release_stub];
  __organizationId = organizationId;
  __organizationId_isset = YES;
}

- (BOOL) organizationIdIsSet {
  return __organizationId_isset;
}

- (void) unsetOrganizationId {
  [__organizationId release_stub];
  __organizationId = nil;
  __organizationId_isset = NO;
}

- (Banana_Image *) icon {
  return [[__icon retain_stub] autorelease_stub];
}

- (void) setIcon: (Banana_Image *) icon {
  [icon retain_stub];
  [__icon release_stub];
  __icon = icon;
  __icon_isset = YES;
}

- (BOOL) iconIsSet {
  return __icon_isset;
}

- (void) unsetIcon {
  [__icon release_stub];
  __icon = nil;
  __icon_isset = NO;
}

- (NSMutableSet *) owners {
  return [[__owners retain_stub] autorelease_stub];
}

- (void) setOwners: (NSMutableSet *) owners {
  [owners retain_stub];
  [__owners release_stub];
  __owners = owners;
  __owners_isset = YES;
}

- (BOOL) ownersIsSet {
  return __owners_isset;
}

- (void) unsetOwners {
  [__owners release_stub];
  __owners = nil;
  __owners_isset = NO;
}

- (NSString *) applicationDescription {
  return [[__applicationDescription retain_stub] autorelease_stub];
}

- (void) setApplicationDescription: (NSString *) applicationDescription {
  [applicationDescription retain_stub];
  [__applicationDescription release_stub];
  __applicationDescription = applicationDescription;
  __applicationDescription_isset = YES;
}

- (BOOL) applicationDescriptionIsSet {
  return __applicationDescription_isset;
}

- (void) unsetApplicationDescription {
  [__applicationDescription release_stub];
  __applicationDescription = nil;
  __applicationDescription_isset = NO;
}

- (int) tier {
  return __tier;
}

- (void) setTier: (int) tier {
  __tier = tier;
  __tier_isset = YES;
}

- (BOOL) tierIsSet {
  return __tier_isset;
}

- (void) unsetTier {
  __tier_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_UserToken *fieldValue = [[BananaAuthentication_UserToken alloc] init];
          [fieldValue read: inProtocol];
          [self setToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setProgrammingLanguage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrganizationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          Banana_Image *fieldValue = [[Banana_Image alloc] init];
          [fieldValue read: inProtocol];
          [self setIcon: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_SET) {
          int _size10;
          [inProtocol readSetBeginReturningElementType: NULL size: &_size10];
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            NSString * _elem12 = [inProtocol readString];
            [fieldValue addObject: _elem12];
          }
          [inProtocol readSetEnd];
          [self setOwners: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationDescription: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setTier: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ProvisionApplicationRequest"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRUCT fieldID: 1];
      [__token write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationName_isset) {
    if (__applicationName != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __applicationName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__programmingLanguage_isset) {
    [outProtocol writeFieldBeginWithName: @"programmingLanguage" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __programmingLanguage];
    [outProtocol writeFieldEnd];
  }
  if (__organizationId_isset) {
    if (__organizationId != nil) {
      [outProtocol writeFieldBeginWithName: @"organizationId" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __organizationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__icon_isset) {
    if (__icon != nil) {
      [outProtocol writeFieldBeginWithName: @"icon" type: TType_STRUCT fieldID: 5];
      [__icon write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__owners_isset) {
    if (__owners != nil) {
      [outProtocol writeFieldBeginWithName: @"owners" type: TType_SET fieldID: 6];
      {
        [outProtocol writeSetBeginWithElementType: TType_STRING size: [__owners count]];
        NSEnumerator * _iter13 = [__owners objectEnumerator];
        id obj14;
        while ((obj14 = [_iter13 nextObject]))
        {
          [outProtocol writeString: obj14];
        }
        [outProtocol writeSetEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationDescription_isset) {
    if (__applicationDescription != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationDescription" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __applicationDescription];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tier_isset) {
    [outProtocol writeFieldBeginWithName: @"tier" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __tier];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_ProvisionApplicationRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", __token];
  [ms appendString: @",applicationName:"];
  [ms appendFormat: @"\"%@\"", __applicationName];
  [ms appendString: @",programmingLanguage:"];
  [ms appendFormat: @"%i", __programmingLanguage];
  [ms appendString: @",organizationId:"];
  [ms appendFormat: @"\"%@\"", __organizationId];
  [ms appendString: @",icon:"];
  [ms appendFormat: @"%@", __icon];
  [ms appendString: @",owners:"];
  [ms appendFormat: @"%@", __owners];
  [ms appendString: @",applicationDescription:"];
  [ms appendFormat: @"\"%@\"", __applicationDescription];
  [ms appendString: @",tier:"];
  [ms appendFormat: @"%i", __tier];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_ProvisionApplicationResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithApplicationToken: (BananaService_ApplicationToken) applicationToken applicationInfo: (BananaService_Application) applicationInfo
{
  self = [super init];
  __applicationToken = [applicationToken retain_stub];
  __applicationToken_isset = YES;
  __applicationInfo = [applicationInfo retain_stub];
  __applicationInfo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"applicationToken"])
  {
    __applicationToken = [[decoder decodeObjectForKey: @"applicationToken"] retain_stub];
    __applicationToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationInfo"])
  {
    __applicationInfo = [[decoder decodeObjectForKey: @"applicationInfo"] retain_stub];
    __applicationInfo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__applicationToken_isset)
  {
    [encoder encodeObject: __applicationToken forKey: @"applicationToken"];
  }
  if (__applicationInfo_isset)
  {
    [encoder encodeObject: __applicationInfo forKey: @"applicationInfo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __applicationToken_isset ? 2654435761 : 0;
  if (__applicationToken_isset)
  {
    hash = (hash * 31) ^ [__applicationToken hash];
  }
  hash = (hash * 31) ^ __applicationInfo_isset ? 2654435761 : 0;
  if (__applicationInfo_isset)
  {
    hash = (hash * 31) ^ [__applicationInfo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_ProvisionApplicationResponse class]]) {
    return NO;
  }
  BananaService_ProvisionApplicationResponse *other = (BananaService_ProvisionApplicationResponse *)anObject;
  if ((__applicationToken_isset != other->__applicationToken_isset) ||
      (__applicationToken_isset && ((__applicationToken || other->__applicationToken) && ![__applicationToken isEqual:other->__applicationToken]))) {
    return NO;
  }
  if ((__applicationInfo_isset != other->__applicationInfo_isset) ||
      (__applicationInfo_isset && ((__applicationInfo || other->__applicationInfo) && ![__applicationInfo isEqual:other->__applicationInfo]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__applicationToken release_stub];
  [__applicationInfo release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_ApplicationToken *) applicationToken {
  return [[__applicationToken retain_stub] autorelease_stub];
}

- (void) setApplicationToken: (BananaAuthentication_ApplicationToken *) applicationToken {
  [applicationToken retain_stub];
  [__applicationToken release_stub];
  __applicationToken = applicationToken;
  __applicationToken_isset = YES;
}

- (BOOL) applicationTokenIsSet {
  return __applicationToken_isset;
}

- (void) unsetApplicationToken {
  [__applicationToken release_stub];
  __applicationToken = nil;
  __applicationToken_isset = NO;
}

- (Banana_Application *) applicationInfo {
  return [[__applicationInfo retain_stub] autorelease_stub];
}

- (void) setApplicationInfo: (Banana_Application *) applicationInfo {
  [applicationInfo retain_stub];
  [__applicationInfo release_stub];
  __applicationInfo = applicationInfo;
  __applicationInfo_isset = YES;
}

- (BOOL) applicationInfoIsSet {
  return __applicationInfo_isset;
}

- (void) unsetApplicationInfo {
  [__applicationInfo release_stub];
  __applicationInfo = nil;
  __applicationInfo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_ApplicationToken *fieldValue = [[BananaAuthentication_ApplicationToken alloc] init];
          [fieldValue read: inProtocol];
          [self setApplicationToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Banana_Application *fieldValue = [[Banana_Application alloc] init];
          [fieldValue read: inProtocol];
          [self setApplicationInfo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ProvisionApplicationResponse"];
  if (__applicationToken_isset) {
    if (__applicationToken != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationToken" type: TType_STRUCT fieldID: 1];
      [__applicationToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationInfo_isset) {
    if (__applicationInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationInfo" type: TType_STRUCT fieldID: 2];
      [__applicationInfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_ProvisionApplicationResponse("];
  [ms appendString: @"applicationToken:"];
  [ms appendFormat: @"%@", __applicationToken];
  [ms appendString: @",applicationInfo:"];
  [ms appendFormat: @"%@", __applicationInfo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_RegenerateApplicationTokenRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (BananaService_UserToken) token applicationId: (BananaService_uuid) applicationId
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_RegenerateApplicationTokenRequest class]]) {
    return NO;
  }
  BananaService_RegenerateApplicationTokenRequest *other = (BananaService_RegenerateApplicationTokenRequest *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__applicationId release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_UserToken *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (BananaAuthentication_UserToken *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_UserToken *fieldValue = [[BananaAuthentication_UserToken alloc] init];
          [fieldValue read: inProtocol];
          [self setToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegenerateApplicationTokenRequest"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRUCT fieldID: 1];
      [__token write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_RegenerateApplicationTokenRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", __token];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_RegenerateApplicationTokenResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithServiceToken: (BananaService_ApplicationToken) serviceToken
{
  self = [super init];
  __serviceToken = [serviceToken retain_stub];
  __serviceToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"serviceToken"])
  {
    __serviceToken = [[decoder decodeObjectForKey: @"serviceToken"] retain_stub];
    __serviceToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__serviceToken_isset)
  {
    [encoder encodeObject: __serviceToken forKey: @"serviceToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __serviceToken_isset ? 2654435761 : 0;
  if (__serviceToken_isset)
  {
    hash = (hash * 31) ^ [__serviceToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_RegenerateApplicationTokenResponse class]]) {
    return NO;
  }
  BananaService_RegenerateApplicationTokenResponse *other = (BananaService_RegenerateApplicationTokenResponse *)anObject;
  if ((__serviceToken_isset != other->__serviceToken_isset) ||
      (__serviceToken_isset && ((__serviceToken || other->__serviceToken) && ![__serviceToken isEqual:other->__serviceToken]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__serviceToken release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_ApplicationToken *) serviceToken {
  return [[__serviceToken retain_stub] autorelease_stub];
}

- (void) setServiceToken: (BananaAuthentication_ApplicationToken *) serviceToken {
  [serviceToken retain_stub];
  [__serviceToken release_stub];
  __serviceToken = serviceToken;
  __serviceToken_isset = YES;
}

- (BOOL) serviceTokenIsSet {
  return __serviceToken_isset;
}

- (void) unsetServiceToken {
  [__serviceToken release_stub];
  __serviceToken = nil;
  __serviceToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_ApplicationToken *fieldValue = [[BananaAuthentication_ApplicationToken alloc] init];
          [fieldValue read: inProtocol];
          [self setServiceToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegenerateApplicationTokenResponse"];
  if (__serviceToken_isset) {
    if (__serviceToken != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceToken" type: TType_STRUCT fieldID: 1];
      [__serviceToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_RegenerateApplicationTokenResponse("];
  [ms appendString: @"serviceToken:"];
  [ms appendFormat: @"%@", __serviceToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_RegisterHealthCheckRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (BananaService_UserToken) token endpoint: (BananaService_Endpoint) endpoint
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __endpoint = [endpoint retain_stub];
  __endpoint_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"endpoint"])
  {
    __endpoint = [[decoder decodeObjectForKey: @"endpoint"] retain_stub];
    __endpoint_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__endpoint_isset)
  {
    [encoder encodeObject: __endpoint forKey: @"endpoint"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __endpoint_isset ? 2654435761 : 0;
  if (__endpoint_isset)
  {
    hash = (hash * 31) ^ [__endpoint hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_RegisterHealthCheckRequest class]]) {
    return NO;
  }
  BananaService_RegisterHealthCheckRequest *other = (BananaService_RegisterHealthCheckRequest *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__endpoint_isset != other->__endpoint_isset) ||
      (__endpoint_isset && ((__endpoint || other->__endpoint) && ![__endpoint isEqual:other->__endpoint]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__endpoint release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_UserToken *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (BananaAuthentication_UserToken *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (BananaEndpoint_Endpoint *) endpoint {
  return [[__endpoint retain_stub] autorelease_stub];
}

- (void) setEndpoint: (BananaEndpoint_Endpoint *) endpoint {
  [endpoint retain_stub];
  [__endpoint release_stub];
  __endpoint = endpoint;
  __endpoint_isset = YES;
}

- (BOOL) endpointIsSet {
  return __endpoint_isset;
}

- (void) unsetEndpoint {
  [__endpoint release_stub];
  __endpoint = nil;
  __endpoint_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_UserToken *fieldValue = [[BananaAuthentication_UserToken alloc] init];
          [fieldValue read: inProtocol];
          [self setToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaEndpoint_Endpoint *fieldValue = [[BananaEndpoint_Endpoint alloc] init];
          [fieldValue read: inProtocol];
          [self setEndpoint: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegisterHealthCheckRequest"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRUCT fieldID: 1];
      [__token write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__endpoint_isset) {
    if (__endpoint != nil) {
      [outProtocol writeFieldBeginWithName: @"endpoint" type: TType_STRUCT fieldID: 2];
      [__endpoint write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_RegisterHealthCheckRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", __token];
  [ms appendString: @",endpoint:"];
  [ms appendFormat: @"%@", __endpoint];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_RegisterHealthCheckResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMessage: (NSString *) message healthCheckToken: (NSString *) healthCheckToken
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  __healthCheckToken = [healthCheckToken retain_stub];
  __healthCheckToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"healthCheckToken"])
  {
    __healthCheckToken = [[decoder decodeObjectForKey: @"healthCheckToken"] retain_stub];
    __healthCheckToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__healthCheckToken_isset)
  {
    [encoder encodeObject: __healthCheckToken forKey: @"healthCheckToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __healthCheckToken_isset ? 2654435761 : 0;
  if (__healthCheckToken_isset)
  {
    hash = (hash * 31) ^ [__healthCheckToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_RegisterHealthCheckResponse class]]) {
    return NO;
  }
  BananaService_RegisterHealthCheckResponse *other = (BananaService_RegisterHealthCheckResponse *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__healthCheckToken_isset != other->__healthCheckToken_isset) ||
      (__healthCheckToken_isset && ((__healthCheckToken || other->__healthCheckToken) && ![__healthCheckToken isEqual:other->__healthCheckToken]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [__healthCheckToken release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (NSString *) healthCheckToken {
  return [[__healthCheckToken retain_stub] autorelease_stub];
}

- (void) setHealthCheckToken: (NSString *) healthCheckToken {
  [healthCheckToken retain_stub];
  [__healthCheckToken release_stub];
  __healthCheckToken = healthCheckToken;
  __healthCheckToken_isset = YES;
}

- (BOOL) healthCheckTokenIsSet {
  return __healthCheckToken_isset;
}

- (void) unsetHealthCheckToken {
  [__healthCheckToken release_stub];
  __healthCheckToken = nil;
  __healthCheckToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHealthCheckToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegisterHealthCheckResponse"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__healthCheckToken_isset) {
    if (__healthCheckToken != nil) {
      [outProtocol writeFieldBeginWithName: @"healthCheckToken" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __healthCheckToken];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_RegisterHealthCheckResponse("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",healthCheckToken:"];
  [ms appendFormat: @"\"%@\"", __healthCheckToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_RemoveSavedChannelRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (BananaService_UserToken) token channel: (BananaService_BananaChannel) channel
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __channel = [channel retain_stub];
  __channel_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"channel"])
  {
    __channel = [[decoder decodeObjectForKey: @"channel"] retain_stub];
    __channel_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__channel_isset)
  {
    [encoder encodeObject: __channel forKey: @"channel"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __channel_isset ? 2654435761 : 0;
  if (__channel_isset)
  {
    hash = (hash * 31) ^ [__channel hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_RemoveSavedChannelRequest class]]) {
    return NO;
  }
  BananaService_RemoveSavedChannelRequest *other = (BananaService_RemoveSavedChannelRequest *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__channel_isset != other->__channel_isset) ||
      (__channel_isset && ((__channel || other->__channel) && ![__channel isEqual:other->__channel]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__channel release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_UserToken *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (BananaAuthentication_UserToken *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (BananaChannels_BananaChannel *) channel {
  return [[__channel retain_stub] autorelease_stub];
}

- (void) setChannel: (BananaChannels_BananaChannel *) channel {
  [channel retain_stub];
  [__channel release_stub];
  __channel = channel;
  __channel_isset = YES;
}

- (BOOL) channelIsSet {
  return __channel_isset;
}

- (void) unsetChannel {
  [__channel release_stub];
  __channel = nil;
  __channel_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_UserToken *fieldValue = [[BananaAuthentication_UserToken alloc] init];
          [fieldValue read: inProtocol];
          [self setToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaChannels_BananaChannel *fieldValue = [[BananaChannels_BananaChannel alloc] init];
          [fieldValue read: inProtocol];
          [self setChannel: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RemoveSavedChannelRequest"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRUCT fieldID: 1];
      [__token write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__channel_isset) {
    if (__channel != nil) {
      [outProtocol writeFieldBeginWithName: @"channel" type: TType_STRUCT fieldID: 2];
      [__channel write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_RemoveSavedChannelRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", __token];
  [ms appendString: @",channel:"];
  [ms appendFormat: @"%@", __channel];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_RemoveSavedChannelResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMessage: (NSString *) message channel: (BananaService_BananaChannel) channel
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  __channel = [channel retain_stub];
  __channel_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"channel"])
  {
    __channel = [[decoder decodeObjectForKey: @"channel"] retain_stub];
    __channel_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__channel_isset)
  {
    [encoder encodeObject: __channel forKey: @"channel"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __channel_isset ? 2654435761 : 0;
  if (__channel_isset)
  {
    hash = (hash * 31) ^ [__channel hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_RemoveSavedChannelResponse class]]) {
    return NO;
  }
  BananaService_RemoveSavedChannelResponse *other = (BananaService_RemoveSavedChannelResponse *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__channel_isset != other->__channel_isset) ||
      (__channel_isset && ((__channel || other->__channel) && ![__channel isEqual:other->__channel]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [__channel release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (BananaChannels_BananaChannel *) channel {
  return [[__channel retain_stub] autorelease_stub];
}

- (void) setChannel: (BananaChannels_BananaChannel *) channel {
  [channel retain_stub];
  [__channel release_stub];
  __channel = channel;
  __channel_isset = YES;
}

- (BOOL) channelIsSet {
  return __channel_isset;
}

- (void) unsetChannel {
  [__channel release_stub];
  __channel = nil;
  __channel_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaChannels_BananaChannel *fieldValue = [[BananaChannels_BananaChannel alloc] init];
          [fieldValue read: inProtocol];
          [self setChannel: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RemoveSavedChannelResponse"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__channel_isset) {
    if (__channel != nil) {
      [outProtocol writeFieldBeginWithName: @"channel" type: TType_STRUCT fieldID: 2];
      [__channel write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_RemoveSavedChannelResponse("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",channel:"];
  [ms appendFormat: @"%@", __channel];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_RenewApplicationTokenRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (BananaService_UserToken) token applicationToken: (BananaService_ApplicationToken) applicationToken newLifetime: (Banana_LengthOfTime *) newLifetime applicationId: (BananaService_uuid) applicationId
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __applicationToken = [applicationToken retain_stub];
  __applicationToken_isset = YES;
  __newLifetime = [newLifetime retain_stub];
  __newLifetime_isset = YES;
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationToken"])
  {
    __applicationToken = [[decoder decodeObjectForKey: @"applicationToken"] retain_stub];
    __applicationToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"newLifetime"])
  {
    __newLifetime = [[decoder decodeObjectForKey: @"newLifetime"] retain_stub];
    __newLifetime_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__applicationToken_isset)
  {
    [encoder encodeObject: __applicationToken forKey: @"applicationToken"];
  }
  if (__newLifetime_isset)
  {
    [encoder encodeObject: __newLifetime forKey: @"newLifetime"];
  }
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __applicationToken_isset ? 2654435761 : 0;
  if (__applicationToken_isset)
  {
    hash = (hash * 31) ^ [__applicationToken hash];
  }
  hash = (hash * 31) ^ __newLifetime_isset ? 2654435761 : 0;
  if (__newLifetime_isset)
  {
    hash = (hash * 31) ^ [__newLifetime hash];
  }
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_RenewApplicationTokenRequest class]]) {
    return NO;
  }
  BananaService_RenewApplicationTokenRequest *other = (BananaService_RenewApplicationTokenRequest *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__applicationToken_isset != other->__applicationToken_isset) ||
      (__applicationToken_isset && ((__applicationToken || other->__applicationToken) && ![__applicationToken isEqual:other->__applicationToken]))) {
    return NO;
  }
  if ((__newLifetime_isset != other->__newLifetime_isset) ||
      (__newLifetime_isset && ((__newLifetime || other->__newLifetime) && ![__newLifetime isEqual:other->__newLifetime]))) {
    return NO;
  }
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__applicationToken release_stub];
  [__newLifetime release_stub];
  [__applicationId release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_UserToken *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (BananaAuthentication_UserToken *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (BananaAuthentication_ApplicationToken *) applicationToken {
  return [[__applicationToken retain_stub] autorelease_stub];
}

- (void) setApplicationToken: (BananaAuthentication_ApplicationToken *) applicationToken {
  [applicationToken retain_stub];
  [__applicationToken release_stub];
  __applicationToken = applicationToken;
  __applicationToken_isset = YES;
}

- (BOOL) applicationTokenIsSet {
  return __applicationToken_isset;
}

- (void) unsetApplicationToken {
  [__applicationToken release_stub];
  __applicationToken = nil;
  __applicationToken_isset = NO;
}

- (Banana_LengthOfTime *) newLifetime {
  return [[__newLifetime retain_stub] autorelease_stub];
}

- (void) setNewLifetime: (Banana_LengthOfTime *) newLifetime {
  [newLifetime retain_stub];
  [__newLifetime release_stub];
  __newLifetime = newLifetime;
  __newLifetime_isset = YES;
}

- (BOOL) newLifetimeIsSet {
  return __newLifetime_isset;
}

- (void) unsetNewLifetime {
  [__newLifetime release_stub];
  __newLifetime = nil;
  __newLifetime_isset = NO;
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_UserToken *fieldValue = [[BananaAuthentication_UserToken alloc] init];
          [fieldValue read: inProtocol];
          [self setToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_ApplicationToken *fieldValue = [[BananaAuthentication_ApplicationToken alloc] init];
          [fieldValue read: inProtocol];
          [self setApplicationToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          Banana_LengthOfTime *fieldValue = [[Banana_LengthOfTime alloc] init];
          [fieldValue read: inProtocol];
          [self setNewLifetime: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RenewApplicationTokenRequest"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRUCT fieldID: 1];
      [__token write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationToken_isset) {
    if (__applicationToken != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationToken" type: TType_STRUCT fieldID: 2];
      [__applicationToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__newLifetime_isset) {
    if (__newLifetime != nil) {
      [outProtocol writeFieldBeginWithName: @"newLifetime" type: TType_STRUCT fieldID: 3];
      [__newLifetime write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_RenewApplicationTokenRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", __token];
  [ms appendString: @",applicationToken:"];
  [ms appendFormat: @"%@", __applicationToken];
  [ms appendString: @",newLifetime:"];
  [ms appendFormat: @"%@", __newLifetime];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_RenewApplicationTokenResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithServiceToken: (BananaService_ApplicationToken) serviceToken
{
  self = [super init];
  __serviceToken = [serviceToken retain_stub];
  __serviceToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"serviceToken"])
  {
    __serviceToken = [[decoder decodeObjectForKey: @"serviceToken"] retain_stub];
    __serviceToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__serviceToken_isset)
  {
    [encoder encodeObject: __serviceToken forKey: @"serviceToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __serviceToken_isset ? 2654435761 : 0;
  if (__serviceToken_isset)
  {
    hash = (hash * 31) ^ [__serviceToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_RenewApplicationTokenResponse class]]) {
    return NO;
  }
  BananaService_RenewApplicationTokenResponse *other = (BananaService_RenewApplicationTokenResponse *)anObject;
  if ((__serviceToken_isset != other->__serviceToken_isset) ||
      (__serviceToken_isset && ((__serviceToken || other->__serviceToken) && ![__serviceToken isEqual:other->__serviceToken]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__serviceToken release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_ApplicationToken *) serviceToken {
  return [[__serviceToken retain_stub] autorelease_stub];
}

- (void) setServiceToken: (BananaAuthentication_ApplicationToken *) serviceToken {
  [serviceToken retain_stub];
  [__serviceToken release_stub];
  __serviceToken = serviceToken;
  __serviceToken_isset = YES;
}

- (BOOL) serviceTokenIsSet {
  return __serviceToken_isset;
}

- (void) unsetServiceToken {
  [__serviceToken release_stub];
  __serviceToken = nil;
  __serviceToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_ApplicationToken *fieldValue = [[BananaAuthentication_ApplicationToken alloc] init];
          [fieldValue read: inProtocol];
          [self setServiceToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RenewApplicationTokenResponse"];
  if (__serviceToken_isset) {
    if (__serviceToken != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceToken" type: TType_STRUCT fieldID: 1];
      [__serviceToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_RenewApplicationTokenResponse("];
  [ms appendString: @"serviceToken:"];
  [ms appendFormat: @"%@", __serviceToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_SaveChannelRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (BananaService_UserToken) token channel: (BananaService_BananaChannel) channel
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __channel = [channel retain_stub];
  __channel_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"channel"])
  {
    __channel = [[decoder decodeObjectForKey: @"channel"] retain_stub];
    __channel_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__channel_isset)
  {
    [encoder encodeObject: __channel forKey: @"channel"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __channel_isset ? 2654435761 : 0;
  if (__channel_isset)
  {
    hash = (hash * 31) ^ [__channel hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SaveChannelRequest class]]) {
    return NO;
  }
  BananaService_SaveChannelRequest *other = (BananaService_SaveChannelRequest *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__channel_isset != other->__channel_isset) ||
      (__channel_isset && ((__channel || other->__channel) && ![__channel isEqual:other->__channel]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__channel release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_UserToken *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (BananaAuthentication_UserToken *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (BananaChannels_BananaChannel *) channel {
  return [[__channel retain_stub] autorelease_stub];
}

- (void) setChannel: (BananaChannels_BananaChannel *) channel {
  [channel retain_stub];
  [__channel release_stub];
  __channel = channel;
  __channel_isset = YES;
}

- (BOOL) channelIsSet {
  return __channel_isset;
}

- (void) unsetChannel {
  [__channel release_stub];
  __channel = nil;
  __channel_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_UserToken *fieldValue = [[BananaAuthentication_UserToken alloc] init];
          [fieldValue read: inProtocol];
          [self setToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaChannels_BananaChannel *fieldValue = [[BananaChannels_BananaChannel alloc] init];
          [fieldValue read: inProtocol];
          [self setChannel: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SaveChannelRequest"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRUCT fieldID: 1];
      [__token write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__channel_isset) {
    if (__channel != nil) {
      [outProtocol writeFieldBeginWithName: @"channel" type: TType_STRUCT fieldID: 2];
      [__channel write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SaveChannelRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", __token];
  [ms appendString: @",channel:"];
  [ms appendFormat: @"%@", __channel];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_SaveChannelResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMessage: (NSString *) message channel: (BananaService_BananaChannel) channel
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  __channel = [channel retain_stub];
  __channel_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"channel"])
  {
    __channel = [[decoder decodeObjectForKey: @"channel"] retain_stub];
    __channel_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__channel_isset)
  {
    [encoder encodeObject: __channel forKey: @"channel"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __channel_isset ? 2654435761 : 0;
  if (__channel_isset)
  {
    hash = (hash * 31) ^ [__channel hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SaveChannelResponse class]]) {
    return NO;
  }
  BananaService_SaveChannelResponse *other = (BananaService_SaveChannelResponse *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__channel_isset != other->__channel_isset) ||
      (__channel_isset && ((__channel || other->__channel) && ![__channel isEqual:other->__channel]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [__channel release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (BananaChannels_BananaChannel *) channel {
  return [[__channel retain_stub] autorelease_stub];
}

- (void) setChannel: (BananaChannels_BananaChannel *) channel {
  [channel retain_stub];
  [__channel release_stub];
  __channel = channel;
  __channel_isset = YES;
}

- (BOOL) channelIsSet {
  return __channel_isset;
}

- (void) unsetChannel {
  [__channel release_stub];
  __channel = nil;
  __channel_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaChannels_BananaChannel *fieldValue = [[BananaChannels_BananaChannel alloc] init];
          [fieldValue read: inProtocol];
          [self setChannel: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SaveChannelResponse"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__channel_isset) {
    if (__channel != nil) {
      [outProtocol writeFieldBeginWithName: @"channel" type: TType_STRUCT fieldID: 2];
      [__channel write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SaveChannelResponse("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",channel:"];
  [ms appendFormat: @"%@", __channel];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_SignInRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCredentials: (BananaAuthentication_Credentials *) credentials emailAddress: (NSString *) emailAddress
{
  self = [super init];
  __credentials = [credentials retain_stub];
  __credentials_isset = YES;
  __emailAddress = [emailAddress retain_stub];
  __emailAddress_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"credentials"])
  {
    __credentials = [[decoder decodeObjectForKey: @"credentials"] retain_stub];
    __credentials_isset = YES;
  }
  if ([decoder containsValueForKey: @"emailAddress"])
  {
    __emailAddress = [[decoder decodeObjectForKey: @"emailAddress"] retain_stub];
    __emailAddress_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__credentials_isset)
  {
    [encoder encodeObject: __credentials forKey: @"credentials"];
  }
  if (__emailAddress_isset)
  {
    [encoder encodeObject: __emailAddress forKey: @"emailAddress"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __credentials_isset ? 2654435761 : 0;
  if (__credentials_isset)
  {
    hash = (hash * 31) ^ [__credentials hash];
  }
  hash = (hash * 31) ^ __emailAddress_isset ? 2654435761 : 0;
  if (__emailAddress_isset)
  {
    hash = (hash * 31) ^ [__emailAddress hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SignInRequest class]]) {
    return NO;
  }
  BananaService_SignInRequest *other = (BananaService_SignInRequest *)anObject;
  if ((__credentials_isset != other->__credentials_isset) ||
      (__credentials_isset && ((__credentials || other->__credentials) && ![__credentials isEqual:other->__credentials]))) {
    return NO;
  }
  if ((__emailAddress_isset != other->__emailAddress_isset) ||
      (__emailAddress_isset && ((__emailAddress || other->__emailAddress) && ![__emailAddress isEqual:other->__emailAddress]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__credentials release_stub];
  [__emailAddress release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_Credentials *) credentials {
  return [[__credentials retain_stub] autorelease_stub];
}

- (void) setCredentials: (BananaAuthentication_Credentials *) credentials {
  [credentials retain_stub];
  [__credentials release_stub];
  __credentials = credentials;
  __credentials_isset = YES;
}

- (BOOL) credentialsIsSet {
  return __credentials_isset;
}

- (void) unsetCredentials {
  [__credentials release_stub];
  __credentials = nil;
  __credentials_isset = NO;
}

- (NSString *) emailAddress {
  return [[__emailAddress retain_stub] autorelease_stub];
}

- (void) setEmailAddress: (NSString *) emailAddress {
  [emailAddress retain_stub];
  [__emailAddress release_stub];
  __emailAddress = emailAddress;
  __emailAddress_isset = YES;
}

- (BOOL) emailAddressIsSet {
  return __emailAddress_isset;
}

- (void) unsetEmailAddress {
  [__emailAddress release_stub];
  __emailAddress = nil;
  __emailAddress_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_Credentials *fieldValue = [[BananaAuthentication_Credentials alloc] init];
          [fieldValue read: inProtocol];
          [self setCredentials: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmailAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SignInRequest"];
  if (__credentials_isset) {
    if (__credentials != nil) {
      [outProtocol writeFieldBeginWithName: @"credentials" type: TType_STRUCT fieldID: 1];
      [__credentials write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__emailAddress_isset) {
    if (__emailAddress != nil) {
      [outProtocol writeFieldBeginWithName: @"emailAddress" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __emailAddress];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SignInRequest("];
  [ms appendString: @"credentials:"];
  [ms appendFormat: @"%@", __credentials];
  [ms appendString: @",emailAddress:"];
  [ms appendFormat: @"\"%@\"", __emailAddress];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_SignInResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUserToken: (BananaService_UserToken) userToken
{
  self = [super init];
  __userToken = [userToken retain_stub];
  __userToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"userToken"])
  {
    __userToken = [[decoder decodeObjectForKey: @"userToken"] retain_stub];
    __userToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__userToken_isset)
  {
    [encoder encodeObject: __userToken forKey: @"userToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __userToken_isset ? 2654435761 : 0;
  if (__userToken_isset)
  {
    hash = (hash * 31) ^ [__userToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SignInResponse class]]) {
    return NO;
  }
  BananaService_SignInResponse *other = (BananaService_SignInResponse *)anObject;
  if ((__userToken_isset != other->__userToken_isset) ||
      (__userToken_isset && ((__userToken || other->__userToken) && ![__userToken isEqual:other->__userToken]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__userToken release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_UserToken *) userToken {
  return [[__userToken retain_stub] autorelease_stub];
}

- (void) setUserToken: (BananaAuthentication_UserToken *) userToken {
  [userToken retain_stub];
  [__userToken release_stub];
  __userToken = userToken;
  __userToken_isset = YES;
}

- (BOOL) userTokenIsSet {
  return __userToken_isset;
}

- (void) unsetUserToken {
  [__userToken release_stub];
  __userToken = nil;
  __userToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_UserToken *fieldValue = [[BananaAuthentication_UserToken alloc] init];
          [fieldValue read: inProtocol];
          [self setUserToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SignInResponse"];
  if (__userToken_isset) {
    if (__userToken != nil) {
      [outProtocol writeFieldBeginWithName: @"userToken" type: TType_STRUCT fieldID: 1];
      [__userToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SignInResponse("];
  [ms appendString: @"userToken:"];
  [ms appendFormat: @"%@", __userToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_SignUpRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEmail: (NSString *) email name: (NSString *) name firstName: (NSString *) firstName middleName: (NSString *) middleName lastName: (NSString *) lastName username: (NSString *) username organizationId: (BananaService_uuid) organizationId credentials: (BananaAuthentication_Credentials *) credentials mainRole: (int) mainRole birthDate: (BananaService_timestamp) birthDate githubProfile: (NSString *) githubProfile profileImage: (BananaService_Image) profileImage
{
  self = [super init];
  __email = [email retain_stub];
  __email_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __firstName = [firstName retain_stub];
  __firstName_isset = YES;
  __middleName = [middleName retain_stub];
  __middleName_isset = YES;
  __lastName = [lastName retain_stub];
  __lastName_isset = YES;
  __username = [username retain_stub];
  __username_isset = YES;
  __organizationId = [organizationId retain_stub];
  __organizationId_isset = YES;
  __credentials = [credentials retain_stub];
  __credentials_isset = YES;
  __mainRole = mainRole;
  __mainRole_isset = YES;
  __birthDate = birthDate;
  __birthDate_isset = YES;
  __githubProfile = [githubProfile retain_stub];
  __githubProfile_isset = YES;
  __profileImage = [profileImage retain_stub];
  __profileImage_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"firstName"])
  {
    __firstName = [[decoder decodeObjectForKey: @"firstName"] retain_stub];
    __firstName_isset = YES;
  }
  if ([decoder containsValueForKey: @"middleName"])
  {
    __middleName = [[decoder decodeObjectForKey: @"middleName"] retain_stub];
    __middleName_isset = YES;
  }
  if ([decoder containsValueForKey: @"lastName"])
  {
    __lastName = [[decoder decodeObjectForKey: @"lastName"] retain_stub];
    __lastName_isset = YES;
  }
  if ([decoder containsValueForKey: @"username"])
  {
    __username = [[decoder decodeObjectForKey: @"username"] retain_stub];
    __username_isset = YES;
  }
  if ([decoder containsValueForKey: @"organizationId"])
  {
    __organizationId = [[decoder decodeObjectForKey: @"organizationId"] retain_stub];
    __organizationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"credentials"])
  {
    __credentials = [[decoder decodeObjectForKey: @"credentials"] retain_stub];
    __credentials_isset = YES;
  }
  if ([decoder containsValueForKey: @"mainRole"])
  {
    __mainRole = [decoder decodeIntForKey: @"mainRole"];
    __mainRole_isset = YES;
  }
  if ([decoder containsValueForKey: @"birthDate"])
  {
    __birthDate = [decoder decodeInt64ForKey: @"birthDate"];
    __birthDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"githubProfile"])
  {
    __githubProfile = [[decoder decodeObjectForKey: @"githubProfile"] retain_stub];
    __githubProfile_isset = YES;
  }
  if ([decoder containsValueForKey: @"profileImage"])
  {
    __profileImage = [[decoder decodeObjectForKey: @"profileImage"] retain_stub];
    __profileImage_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__firstName_isset)
  {
    [encoder encodeObject: __firstName forKey: @"firstName"];
  }
  if (__middleName_isset)
  {
    [encoder encodeObject: __middleName forKey: @"middleName"];
  }
  if (__lastName_isset)
  {
    [encoder encodeObject: __lastName forKey: @"lastName"];
  }
  if (__username_isset)
  {
    [encoder encodeObject: __username forKey: @"username"];
  }
  if (__organizationId_isset)
  {
    [encoder encodeObject: __organizationId forKey: @"organizationId"];
  }
  if (__credentials_isset)
  {
    [encoder encodeObject: __credentials forKey: @"credentials"];
  }
  if (__mainRole_isset)
  {
    [encoder encodeInt: __mainRole forKey: @"mainRole"];
  }
  if (__birthDate_isset)
  {
    [encoder encodeInt64: __birthDate forKey: @"birthDate"];
  }
  if (__githubProfile_isset)
  {
    [encoder encodeObject: __githubProfile forKey: @"githubProfile"];
  }
  if (__profileImage_isset)
  {
    [encoder encodeObject: __profileImage forKey: @"profileImage"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __email_isset ? 2654435761 : 0;
  if (__email_isset)
  {
    hash = (hash * 31) ^ [__email hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __firstName_isset ? 2654435761 : 0;
  if (__firstName_isset)
  {
    hash = (hash * 31) ^ [__firstName hash];
  }
  hash = (hash * 31) ^ __middleName_isset ? 2654435761 : 0;
  if (__middleName_isset)
  {
    hash = (hash * 31) ^ [__middleName hash];
  }
  hash = (hash * 31) ^ __lastName_isset ? 2654435761 : 0;
  if (__lastName_isset)
  {
    hash = (hash * 31) ^ [__lastName hash];
  }
  hash = (hash * 31) ^ __username_isset ? 2654435761 : 0;
  if (__username_isset)
  {
    hash = (hash * 31) ^ [__username hash];
  }
  hash = (hash * 31) ^ __organizationId_isset ? 2654435761 : 0;
  if (__organizationId_isset)
  {
    hash = (hash * 31) ^ [__organizationId hash];
  }
  hash = (hash * 31) ^ __credentials_isset ? 2654435761 : 0;
  if (__credentials_isset)
  {
    hash = (hash * 31) ^ [__credentials hash];
  }
  hash = (hash * 31) ^ __mainRole_isset ? 2654435761 : 0;
  if (__mainRole_isset)
  {
    hash = (hash * 31) ^ [@(__mainRole) hash];
  }
  hash = (hash * 31) ^ __birthDate_isset ? 2654435761 : 0;
  if (__birthDate_isset)
  {
    hash = (hash * 31) ^ [@(__birthDate) hash];
  }
  hash = (hash * 31) ^ __githubProfile_isset ? 2654435761 : 0;
  if (__githubProfile_isset)
  {
    hash = (hash * 31) ^ [__githubProfile hash];
  }
  hash = (hash * 31) ^ __profileImage_isset ? 2654435761 : 0;
  if (__profileImage_isset)
  {
    hash = (hash * 31) ^ [__profileImage hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SignUpRequest class]]) {
    return NO;
  }
  BananaService_SignUpRequest *other = (BananaService_SignUpRequest *)anObject;
  if ((__email_isset != other->__email_isset) ||
      (__email_isset && ((__email || other->__email) && ![__email isEqual:other->__email]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__firstName_isset != other->__firstName_isset) ||
      (__firstName_isset && ((__firstName || other->__firstName) && ![__firstName isEqual:other->__firstName]))) {
    return NO;
  }
  if ((__middleName_isset != other->__middleName_isset) ||
      (__middleName_isset && ((__middleName || other->__middleName) && ![__middleName isEqual:other->__middleName]))) {
    return NO;
  }
  if ((__lastName_isset != other->__lastName_isset) ||
      (__lastName_isset && ((__lastName || other->__lastName) && ![__lastName isEqual:other->__lastName]))) {
    return NO;
  }
  if ((__username_isset != other->__username_isset) ||
      (__username_isset && ((__username || other->__username) && ![__username isEqual:other->__username]))) {
    return NO;
  }
  if ((__organizationId_isset != other->__organizationId_isset) ||
      (__organizationId_isset && ((__organizationId || other->__organizationId) && ![__organizationId isEqual:other->__organizationId]))) {
    return NO;
  }
  if ((__credentials_isset != other->__credentials_isset) ||
      (__credentials_isset && ((__credentials || other->__credentials) && ![__credentials isEqual:other->__credentials]))) {
    return NO;
  }
  if ((__mainRole_isset != other->__mainRole_isset) ||
      (__mainRole_isset && (__mainRole != other->__mainRole))) {
    return NO;
  }
  if ((__birthDate_isset != other->__birthDate_isset) ||
      (__birthDate_isset && (__birthDate != other->__birthDate))) {
    return NO;
  }
  if ((__githubProfile_isset != other->__githubProfile_isset) ||
      (__githubProfile_isset && ((__githubProfile || other->__githubProfile) && ![__githubProfile isEqual:other->__githubProfile]))) {
    return NO;
  }
  if ((__profileImage_isset != other->__profileImage_isset) ||
      (__profileImage_isset && ((__profileImage || other->__profileImage) && ![__profileImage isEqual:other->__profileImage]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__email release_stub];
  [__name release_stub];
  [__firstName release_stub];
  [__middleName release_stub];
  [__lastName release_stub];
  [__username release_stub];
  [__organizationId release_stub];
  [__credentials release_stub];
  [__githubProfile release_stub];
  [__profileImage release_stub];
  [super dealloc_stub];
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) firstName {
  return [[__firstName retain_stub] autorelease_stub];
}

- (void) setFirstName: (NSString *) firstName {
  [firstName retain_stub];
  [__firstName release_stub];
  __firstName = firstName;
  __firstName_isset = YES;
}

- (BOOL) firstNameIsSet {
  return __firstName_isset;
}

- (void) unsetFirstName {
  [__firstName release_stub];
  __firstName = nil;
  __firstName_isset = NO;
}

- (NSString *) middleName {
  return [[__middleName retain_stub] autorelease_stub];
}

- (void) setMiddleName: (NSString *) middleName {
  [middleName retain_stub];
  [__middleName release_stub];
  __middleName = middleName;
  __middleName_isset = YES;
}

- (BOOL) middleNameIsSet {
  return __middleName_isset;
}

- (void) unsetMiddleName {
  [__middleName release_stub];
  __middleName = nil;
  __middleName_isset = NO;
}

- (NSString *) lastName {
  return [[__lastName retain_stub] autorelease_stub];
}

- (void) setLastName: (NSString *) lastName {
  [lastName retain_stub];
  [__lastName release_stub];
  __lastName = lastName;
  __lastName_isset = YES;
}

- (BOOL) lastNameIsSet {
  return __lastName_isset;
}

- (void) unsetLastName {
  [__lastName release_stub];
  __lastName = nil;
  __lastName_isset = NO;
}

- (NSString *) username {
  return [[__username retain_stub] autorelease_stub];
}

- (void) setUsername: (NSString *) username {
  [username retain_stub];
  [__username release_stub];
  __username = username;
  __username_isset = YES;
}

- (BOOL) usernameIsSet {
  return __username_isset;
}

- (void) unsetUsername {
  [__username release_stub];
  __username = nil;
  __username_isset = NO;
}

- (NSString *) organizationId {
  return [[__organizationId retain_stub] autorelease_stub];
}

- (void) setOrganizationId: (NSString *) organizationId {
  [organizationId retain_stub];
  [__organizationId release_stub];
  __organizationId = organizationId;
  __organizationId_isset = YES;
}

- (BOOL) organizationIdIsSet {
  return __organizationId_isset;
}

- (void) unsetOrganizationId {
  [__organizationId release_stub];
  __organizationId = nil;
  __organizationId_isset = NO;
}

- (BananaAuthentication_Credentials *) credentials {
  return [[__credentials retain_stub] autorelease_stub];
}

- (void) setCredentials: (BananaAuthentication_Credentials *) credentials {
  [credentials retain_stub];
  [__credentials release_stub];
  __credentials = credentials;
  __credentials_isset = YES;
}

- (BOOL) credentialsIsSet {
  return __credentials_isset;
}

- (void) unsetCredentials {
  [__credentials release_stub];
  __credentials = nil;
  __credentials_isset = NO;
}

- (int) mainRole {
  return __mainRole;
}

- (void) setMainRole: (int) mainRole {
  __mainRole = mainRole;
  __mainRole_isset = YES;
}

- (BOOL) mainRoleIsSet {
  return __mainRole_isset;
}

- (void) unsetMainRole {
  __mainRole_isset = NO;
}

- (int64_t) birthDate {
  return __birthDate;
}

- (void) setBirthDate: (int64_t) birthDate {
  __birthDate = birthDate;
  __birthDate_isset = YES;
}

- (BOOL) birthDateIsSet {
  return __birthDate_isset;
}

- (void) unsetBirthDate {
  __birthDate_isset = NO;
}

- (NSString *) githubProfile {
  return [[__githubProfile retain_stub] autorelease_stub];
}

- (void) setGithubProfile: (NSString *) githubProfile {
  [githubProfile retain_stub];
  [__githubProfile release_stub];
  __githubProfile = githubProfile;
  __githubProfile_isset = YES;
}

- (BOOL) githubProfileIsSet {
  return __githubProfile_isset;
}

- (void) unsetGithubProfile {
  [__githubProfile release_stub];
  __githubProfile = nil;
  __githubProfile_isset = NO;
}

- (Banana_Image *) profileImage {
  return [[__profileImage retain_stub] autorelease_stub];
}

- (void) setProfileImage: (Banana_Image *) profileImage {
  [profileImage retain_stub];
  [__profileImage release_stub];
  __profileImage = profileImage;
  __profileImage_isset = YES;
}

- (BOOL) profileImageIsSet {
  return __profileImage_isset;
}

- (void) unsetProfileImage {
  [__profileImage release_stub];
  __profileImage = nil;
  __profileImage_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFirstName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMiddleName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLastName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUsername: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrganizationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_Credentials *fieldValue = [[BananaAuthentication_Credentials alloc] init];
          [fieldValue read: inProtocol];
          [self setCredentials: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setMainRole: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setBirthDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGithubProfile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRUCT) {
          Banana_Image *fieldValue = [[Banana_Image alloc] init];
          [fieldValue read: inProtocol];
          [self setProfileImage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SignUpRequest"];
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__firstName_isset) {
    if (__firstName != nil) {
      [outProtocol writeFieldBeginWithName: @"firstName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __firstName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__middleName_isset) {
    if (__middleName != nil) {
      [outProtocol writeFieldBeginWithName: @"middleName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __middleName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lastName_isset) {
    if (__lastName != nil) {
      [outProtocol writeFieldBeginWithName: @"lastName" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __lastName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__username_isset) {
    if (__username != nil) {
      [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __username];
      [outProtocol writeFieldEnd];
    }
  }
  if (__organizationId_isset) {
    if (__organizationId != nil) {
      [outProtocol writeFieldBeginWithName: @"organizationId" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __organizationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__credentials_isset) {
    if (__credentials != nil) {
      [outProtocol writeFieldBeginWithName: @"credentials" type: TType_STRUCT fieldID: 8];
      [__credentials write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mainRole_isset) {
    [outProtocol writeFieldBeginWithName: @"mainRole" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __mainRole];
    [outProtocol writeFieldEnd];
  }
  if (__birthDate_isset) {
    [outProtocol writeFieldBeginWithName: @"birthDate" type: TType_I64 fieldID: 10];
    [outProtocol writeI64: __birthDate];
    [outProtocol writeFieldEnd];
  }
  if (__githubProfile_isset) {
    if (__githubProfile != nil) {
      [outProtocol writeFieldBeginWithName: @"githubProfile" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __githubProfile];
      [outProtocol writeFieldEnd];
    }
  }
  if (__profileImage_isset) {
    if (__profileImage != nil) {
      [outProtocol writeFieldBeginWithName: @"profileImage" type: TType_STRUCT fieldID: 12];
      [__profileImage write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SignUpRequest("];
  [ms appendString: @"email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",firstName:"];
  [ms appendFormat: @"\"%@\"", __firstName];
  [ms appendString: @",middleName:"];
  [ms appendFormat: @"\"%@\"", __middleName];
  [ms appendString: @",lastName:"];
  [ms appendFormat: @"\"%@\"", __lastName];
  [ms appendString: @",username:"];
  [ms appendFormat: @"\"%@\"", __username];
  [ms appendString: @",organizationId:"];
  [ms appendFormat: @"\"%@\"", __organizationId];
  [ms appendString: @",credentials:"];
  [ms appendFormat: @"%@", __credentials];
  [ms appendString: @",mainRole:"];
  [ms appendFormat: @"%i", __mainRole];
  [ms appendString: @",birthDate:"];
  [ms appendFormat: @"%qi", __birthDate];
  [ms appendString: @",githubProfile:"];
  [ms appendFormat: @"\"%@\"", __githubProfile];
  [ms appendString: @",profileImage:"];
  [ms appendFormat: @"%@", __profileImage];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_SignUpResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUserToken: (BananaService_UserToken) userToken account: (BananaAuthentication_AromaAccount *) account userId: (BananaService_uuid) userId
{
  self = [super init];
  __userToken = [userToken retain_stub];
  __userToken_isset = YES;
  __account = [account retain_stub];
  __account_isset = YES;
  __userId = [userId retain_stub];
  __userId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"userToken"])
  {
    __userToken = [[decoder decodeObjectForKey: @"userToken"] retain_stub];
    __userToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"account"])
  {
    __account = [[decoder decodeObjectForKey: @"account"] retain_stub];
    __account_isset = YES;
  }
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [[decoder decodeObjectForKey: @"userId"] retain_stub];
    __userId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__userToken_isset)
  {
    [encoder encodeObject: __userToken forKey: @"userToken"];
  }
  if (__account_isset)
  {
    [encoder encodeObject: __account forKey: @"account"];
  }
  if (__userId_isset)
  {
    [encoder encodeObject: __userId forKey: @"userId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __userToken_isset ? 2654435761 : 0;
  if (__userToken_isset)
  {
    hash = (hash * 31) ^ [__userToken hash];
  }
  hash = (hash * 31) ^ __account_isset ? 2654435761 : 0;
  if (__account_isset)
  {
    hash = (hash * 31) ^ [__account hash];
  }
  hash = (hash * 31) ^ __userId_isset ? 2654435761 : 0;
  if (__userId_isset)
  {
    hash = (hash * 31) ^ [__userId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SignUpResponse class]]) {
    return NO;
  }
  BananaService_SignUpResponse *other = (BananaService_SignUpResponse *)anObject;
  if ((__userToken_isset != other->__userToken_isset) ||
      (__userToken_isset && ((__userToken || other->__userToken) && ![__userToken isEqual:other->__userToken]))) {
    return NO;
  }
  if ((__account_isset != other->__account_isset) ||
      (__account_isset && ((__account || other->__account) && ![__account isEqual:other->__account]))) {
    return NO;
  }
  if ((__userId_isset != other->__userId_isset) ||
      (__userId_isset && ((__userId || other->__userId) && ![__userId isEqual:other->__userId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__userToken release_stub];
  [__account release_stub];
  [__userId release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_UserToken *) userToken {
  return [[__userToken retain_stub] autorelease_stub];
}

- (void) setUserToken: (BananaAuthentication_UserToken *) userToken {
  [userToken retain_stub];
  [__userToken release_stub];
  __userToken = userToken;
  __userToken_isset = YES;
}

- (BOOL) userTokenIsSet {
  return __userToken_isset;
}

- (void) unsetUserToken {
  [__userToken release_stub];
  __userToken = nil;
  __userToken_isset = NO;
}

- (BananaAuthentication_AromaAccount *) account {
  return [[__account retain_stub] autorelease_stub];
}

- (void) setAccount: (BananaAuthentication_AromaAccount *) account {
  [account retain_stub];
  [__account release_stub];
  __account = account;
  __account_isset = YES;
}

- (BOOL) accountIsSet {
  return __account_isset;
}

- (void) unsetAccount {
  [__account release_stub];
  __account = nil;
  __account_isset = NO;
}

- (NSString *) userId {
  return [[__userId retain_stub] autorelease_stub];
}

- (void) setUserId: (NSString *) userId {
  [userId retain_stub];
  [__userId release_stub];
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  [__userId release_stub];
  __userId = nil;
  __userId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_UserToken *fieldValue = [[BananaAuthentication_UserToken alloc] init];
          [fieldValue read: inProtocol];
          [self setUserToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_AromaAccount *fieldValue = [[BananaAuthentication_AromaAccount alloc] init];
          [fieldValue read: inProtocol];
          [self setAccount: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SignUpResponse"];
  if (__userToken_isset) {
    if (__userToken != nil) {
      [outProtocol writeFieldBeginWithName: @"userToken" type: TType_STRUCT fieldID: 1];
      [__userToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__account_isset) {
    if (__account != nil) {
      [outProtocol writeFieldBeginWithName: @"account" type: TType_STRUCT fieldID: 2];
      [__account write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userId_isset) {
    if (__userId != nil) {
      [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __userId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SignUpResponse("];
  [ms appendString: @"userToken:"];
  [ms appendFormat: @"%@", __userToken];
  [ms appendString: @",account:"];
  [ms appendFormat: @"%@", __account];
  [ms appendString: @",userId:"];
  [ms appendFormat: @"\"%@\"", __userId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_SnoozeChannelRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.lengthOfTime = [[[Banana_LengthOfTime alloc] init] autorelease_stub];
  [self.lengthOfTime setValue:4];
  [self.lengthOfTime setUnit:3];

#endif
  return self;
}

- (id) initWithToken: (BananaService_UserToken) token channel: (BananaService_BananaChannel) channel applicationId: (BananaService_uuid) applicationId lengthOfTime: (Banana_LengthOfTime *) lengthOfTime
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __channel = [channel retain_stub];
  __channel_isset = YES;
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  __lengthOfTime = [lengthOfTime retain_stub];
  __lengthOfTime_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"channel"])
  {
    __channel = [[decoder decodeObjectForKey: @"channel"] retain_stub];
    __channel_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"lengthOfTime"])
  {
    __lengthOfTime = [[decoder decodeObjectForKey: @"lengthOfTime"] retain_stub];
    __lengthOfTime_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__channel_isset)
  {
    [encoder encodeObject: __channel forKey: @"channel"];
  }
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
  if (__lengthOfTime_isset)
  {
    [encoder encodeObject: __lengthOfTime forKey: @"lengthOfTime"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __channel_isset ? 2654435761 : 0;
  if (__channel_isset)
  {
    hash = (hash * 31) ^ [__channel hash];
  }
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  hash = (hash * 31) ^ __lengthOfTime_isset ? 2654435761 : 0;
  if (__lengthOfTime_isset)
  {
    hash = (hash * 31) ^ [__lengthOfTime hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SnoozeChannelRequest class]]) {
    return NO;
  }
  BananaService_SnoozeChannelRequest *other = (BananaService_SnoozeChannelRequest *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__channel_isset != other->__channel_isset) ||
      (__channel_isset && ((__channel || other->__channel) && ![__channel isEqual:other->__channel]))) {
    return NO;
  }
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  if ((__lengthOfTime_isset != other->__lengthOfTime_isset) ||
      (__lengthOfTime_isset && ((__lengthOfTime || other->__lengthOfTime) && ![__lengthOfTime isEqual:other->__lengthOfTime]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__channel release_stub];
  [__applicationId release_stub];
  [__lengthOfTime release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_UserToken *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (BananaAuthentication_UserToken *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (BananaChannels_BananaChannel *) channel {
  return [[__channel retain_stub] autorelease_stub];
}

- (void) setChannel: (BananaChannels_BananaChannel *) channel {
  [channel retain_stub];
  [__channel release_stub];
  __channel = channel;
  __channel_isset = YES;
}

- (BOOL) channelIsSet {
  return __channel_isset;
}

- (void) unsetChannel {
  [__channel release_stub];
  __channel = nil;
  __channel_isset = NO;
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (Banana_LengthOfTime *) lengthOfTime {
  return [[__lengthOfTime retain_stub] autorelease_stub];
}

- (void) setLengthOfTime: (Banana_LengthOfTime *) lengthOfTime {
  [lengthOfTime retain_stub];
  [__lengthOfTime release_stub];
  __lengthOfTime = lengthOfTime;
  __lengthOfTime_isset = YES;
}

- (BOOL) lengthOfTimeIsSet {
  return __lengthOfTime_isset;
}

- (void) unsetLengthOfTime {
  [__lengthOfTime release_stub];
  __lengthOfTime = nil;
  __lengthOfTime_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_UserToken *fieldValue = [[BananaAuthentication_UserToken alloc] init];
          [fieldValue read: inProtocol];
          [self setToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaChannels_BananaChannel *fieldValue = [[BananaChannels_BananaChannel alloc] init];
          [fieldValue read: inProtocol];
          [self setChannel: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          Banana_LengthOfTime *fieldValue = [[Banana_LengthOfTime alloc] init];
          [fieldValue read: inProtocol];
          [self setLengthOfTime: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SnoozeChannelRequest"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRUCT fieldID: 1];
      [__token write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__channel_isset) {
    if (__channel != nil) {
      [outProtocol writeFieldBeginWithName: @"channel" type: TType_STRUCT fieldID: 2];
      [__channel write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lengthOfTime_isset) {
    if (__lengthOfTime != nil) {
      [outProtocol writeFieldBeginWithName: @"lengthOfTime" type: TType_STRUCT fieldID: 4];
      [__lengthOfTime write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SnoozeChannelRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", __token];
  [ms appendString: @",channel:"];
  [ms appendFormat: @"%@", __channel];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @",lengthOfTime:"];
  [ms appendFormat: @"%@", __lengthOfTime];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_SnoozeChannelResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMessage: (NSString *) message
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SnoozeChannelResponse class]]) {
    return NO;
  }
  BananaService_SnoozeChannelResponse *other = (BananaService_SnoozeChannelResponse *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SnoozeChannelResponse"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SnoozeChannelResponse("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_SubscribeToApplicationRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.shared = NO;

#endif
  return self;
}

- (id) initWithToken: (BananaService_UserToken) token applicationName: (NSString *) applicationName applicationId: (BananaService_uuid) applicationId organizationId: (BananaService_uuid) organizationId shared: (BOOL) shared
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __applicationName = [applicationName retain_stub];
  __applicationName_isset = YES;
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  __organizationId = [organizationId retain_stub];
  __organizationId_isset = YES;
  __shared = shared;
  __shared_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationName"])
  {
    __applicationName = [[decoder decodeObjectForKey: @"applicationName"] retain_stub];
    __applicationName_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"organizationId"])
  {
    __organizationId = [[decoder decodeObjectForKey: @"organizationId"] retain_stub];
    __organizationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"shared"])
  {
    __shared = [decoder decodeBoolForKey: @"shared"];
    __shared_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__applicationName_isset)
  {
    [encoder encodeObject: __applicationName forKey: @"applicationName"];
  }
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
  if (__organizationId_isset)
  {
    [encoder encodeObject: __organizationId forKey: @"organizationId"];
  }
  if (__shared_isset)
  {
    [encoder encodeBool: __shared forKey: @"shared"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __applicationName_isset ? 2654435761 : 0;
  if (__applicationName_isset)
  {
    hash = (hash * 31) ^ [__applicationName hash];
  }
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  hash = (hash * 31) ^ __organizationId_isset ? 2654435761 : 0;
  if (__organizationId_isset)
  {
    hash = (hash * 31) ^ [__organizationId hash];
  }
  hash = (hash * 31) ^ __shared_isset ? 2654435761 : 0;
  if (__shared_isset)
  {
    hash = (hash * 31) ^ [@(__shared) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SubscribeToApplicationRequest class]]) {
    return NO;
  }
  BananaService_SubscribeToApplicationRequest *other = (BananaService_SubscribeToApplicationRequest *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__applicationName_isset != other->__applicationName_isset) ||
      (__applicationName_isset && ((__applicationName || other->__applicationName) && ![__applicationName isEqual:other->__applicationName]))) {
    return NO;
  }
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  if ((__organizationId_isset != other->__organizationId_isset) ||
      (__organizationId_isset && ((__organizationId || other->__organizationId) && ![__organizationId isEqual:other->__organizationId]))) {
    return NO;
  }
  if ((__shared_isset != other->__shared_isset) ||
      (__shared_isset && (__shared != other->__shared))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__applicationName release_stub];
  [__applicationId release_stub];
  [__organizationId release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_UserToken *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (BananaAuthentication_UserToken *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) applicationName {
  return [[__applicationName retain_stub] autorelease_stub];
}

- (void) setApplicationName: (NSString *) applicationName {
  [applicationName retain_stub];
  [__applicationName release_stub];
  __applicationName = applicationName;
  __applicationName_isset = YES;
}

- (BOOL) applicationNameIsSet {
  return __applicationName_isset;
}

- (void) unsetApplicationName {
  [__applicationName release_stub];
  __applicationName = nil;
  __applicationName_isset = NO;
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (NSString *) organizationId {
  return [[__organizationId retain_stub] autorelease_stub];
}

- (void) setOrganizationId: (NSString *) organizationId {
  [organizationId retain_stub];
  [__organizationId release_stub];
  __organizationId = organizationId;
  __organizationId_isset = YES;
}

- (BOOL) organizationIdIsSet {
  return __organizationId_isset;
}

- (void) unsetOrganizationId {
  [__organizationId release_stub];
  __organizationId = nil;
  __organizationId_isset = NO;
}

- (BOOL) shared {
  return __shared;
}

- (void) setShared: (BOOL) shared {
  __shared = shared;
  __shared_isset = YES;
}

- (BOOL) sharedIsSet {
  return __shared_isset;
}

- (void) unsetShared {
  __shared_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_UserToken *fieldValue = [[BananaAuthentication_UserToken alloc] init];
          [fieldValue read: inProtocol];
          [self setToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrganizationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setShared: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SubscribeToApplicationRequest"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRUCT fieldID: 1];
      [__token write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationName_isset) {
    if (__applicationName != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __applicationName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__organizationId_isset) {
    if (__organizationId != nil) {
      [outProtocol writeFieldBeginWithName: @"organizationId" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __organizationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__shared_isset) {
    [outProtocol writeFieldBeginWithName: @"shared" type: TType_BOOL fieldID: 5];
    [outProtocol writeBool: __shared];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SubscribeToApplicationRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", __token];
  [ms appendString: @",applicationName:"];
  [ms appendFormat: @"\"%@\"", __applicationName];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @",organizationId:"];
  [ms appendFormat: @"\"%@\"", __organizationId];
  [ms appendString: @",shared:"];
  [ms appendFormat: @"%i", __shared];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_SubscribeToApplicationResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMessage: (NSString *) message channel: (BananaService_BananaChannel) channel
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  __channel = [channel retain_stub];
  __channel_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"channel"])
  {
    __channel = [[decoder decodeObjectForKey: @"channel"] retain_stub];
    __channel_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__channel_isset)
  {
    [encoder encodeObject: __channel forKey: @"channel"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __channel_isset ? 2654435761 : 0;
  if (__channel_isset)
  {
    hash = (hash * 31) ^ [__channel hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SubscribeToApplicationResponse class]]) {
    return NO;
  }
  BananaService_SubscribeToApplicationResponse *other = (BananaService_SubscribeToApplicationResponse *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__channel_isset != other->__channel_isset) ||
      (__channel_isset && ((__channel || other->__channel) && ![__channel isEqual:other->__channel]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [__channel release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (BananaChannels_BananaChannel *) channel {
  return [[__channel retain_stub] autorelease_stub];
}

- (void) setChannel: (BananaChannels_BananaChannel *) channel {
  [channel retain_stub];
  [__channel release_stub];
  __channel = channel;
  __channel_isset = YES;
}

- (BOOL) channelIsSet {
  return __channel_isset;
}

- (void) unsetChannel {
  [__channel release_stub];
  __channel = nil;
  __channel_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaChannels_BananaChannel *fieldValue = [[BananaChannels_BananaChannel alloc] init];
          [fieldValue read: inProtocol];
          [self setChannel: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SubscribeToApplicationResponse"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__channel_isset) {
    if (__channel != nil) {
      [outProtocol writeFieldBeginWithName: @"channel" type: TType_STRUCT fieldID: 2];
      [__channel write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SubscribeToApplicationResponse("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",channel:"];
  [ms appendFormat: @"%@", __channel];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_GetApplicationInfoRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (BananaService_AuthenticationToken) token applicationId: (BananaService_uuid) applicationId
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetApplicationInfoRequest class]]) {
    return NO;
  }
  BananaService_GetApplicationInfoRequest *other = (BananaService_GetApplicationInfoRequest *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__applicationId release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_AuthenticationToken *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (BananaAuthentication_AuthenticationToken *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_AuthenticationToken *fieldValue = [[BananaAuthentication_AuthenticationToken alloc] init];
          [fieldValue read: inProtocol];
          [self setToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetApplicationInfoRequest"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRUCT fieldID: 1];
      [__token write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetApplicationInfoRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", __token];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_GetApplicationInfoResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithApplicationInfo: (BananaService_Application) applicationInfo registeredChannels: (NSMutableArray *) registeredChannels
{
  self = [super init];
  __applicationInfo = [applicationInfo retain_stub];
  __applicationInfo_isset = YES;
  __registeredChannels = [registeredChannels retain_stub];
  __registeredChannels_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"applicationInfo"])
  {
    __applicationInfo = [[decoder decodeObjectForKey: @"applicationInfo"] retain_stub];
    __applicationInfo_isset = YES;
  }
  if ([decoder containsValueForKey: @"registeredChannels"])
  {
    __registeredChannels = [[decoder decodeObjectForKey: @"registeredChannels"] retain_stub];
    __registeredChannels_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__applicationInfo_isset)
  {
    [encoder encodeObject: __applicationInfo forKey: @"applicationInfo"];
  }
  if (__registeredChannels_isset)
  {
    [encoder encodeObject: __registeredChannels forKey: @"registeredChannels"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __applicationInfo_isset ? 2654435761 : 0;
  if (__applicationInfo_isset)
  {
    hash = (hash * 31) ^ [__applicationInfo hash];
  }
  hash = (hash * 31) ^ __registeredChannels_isset ? 2654435761 : 0;
  if (__registeredChannels_isset)
  {
    hash = (hash * 31) ^ [__registeredChannels hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetApplicationInfoResponse class]]) {
    return NO;
  }
  BananaService_GetApplicationInfoResponse *other = (BananaService_GetApplicationInfoResponse *)anObject;
  if ((__applicationInfo_isset != other->__applicationInfo_isset) ||
      (__applicationInfo_isset && ((__applicationInfo || other->__applicationInfo) && ![__applicationInfo isEqual:other->__applicationInfo]))) {
    return NO;
  }
  if ((__registeredChannels_isset != other->__registeredChannels_isset) ||
      (__registeredChannels_isset && ((__registeredChannels || other->__registeredChannels) && ![__registeredChannels isEqual:other->__registeredChannels]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__applicationInfo release_stub];
  [__registeredChannels release_stub];
  [super dealloc_stub];
}

- (Banana_Application *) applicationInfo {
  return [[__applicationInfo retain_stub] autorelease_stub];
}

- (void) setApplicationInfo: (Banana_Application *) applicationInfo {
  [applicationInfo retain_stub];
  [__applicationInfo release_stub];
  __applicationInfo = applicationInfo;
  __applicationInfo_isset = YES;
}

- (BOOL) applicationInfoIsSet {
  return __applicationInfo_isset;
}

- (void) unsetApplicationInfo {
  [__applicationInfo release_stub];
  __applicationInfo = nil;
  __applicationInfo_isset = NO;
}

- (NSMutableArray *) registeredChannels {
  return [[__registeredChannels retain_stub] autorelease_stub];
}

- (void) setRegisteredChannels: (NSMutableArray *) registeredChannels {
  [registeredChannels retain_stub];
  [__registeredChannels release_stub];
  __registeredChannels = registeredChannels;
  __registeredChannels_isset = YES;
}

- (BOOL) registeredChannelsIsSet {
  return __registeredChannels_isset;
}

- (void) unsetRegisteredChannels {
  [__registeredChannels release_stub];
  __registeredChannels = nil;
  __registeredChannels_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Banana_Application *fieldValue = [[Banana_Application alloc] init];
          [fieldValue read: inProtocol];
          [self setApplicationInfo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            BananaChannels_BananaChannel *_elem17 = [[BananaChannels_BananaChannel alloc] init];
            [_elem17 read: inProtocol];
            [fieldValue addObject: _elem17];
            [_elem17 release_stub];
          }
          [inProtocol readListEnd];
          [self setRegisteredChannels: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetApplicationInfoResponse"];
  if (__applicationInfo_isset) {
    if (__applicationInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationInfo" type: TType_STRUCT fieldID: 1];
      [__applicationInfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__registeredChannels_isset) {
    if (__registeredChannels != nil) {
      [outProtocol writeFieldBeginWithName: @"registeredChannels" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__registeredChannels count]];
        int idx19;
        for (idx19 = 0; idx19 < [__registeredChannels count]; idx19++)
        {
          [[__registeredChannels objectAtIndex: idx19] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetApplicationInfoResponse("];
  [ms appendString: @"applicationInfo:"];
  [ms appendFormat: @"%@", __applicationInfo];
  [ms appendString: @",registeredChannels:"];
  [ms appendFormat: @"%@", __registeredChannels];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_GetBuzzRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (BananaService_UserToken) token
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetBuzzRequest class]]) {
    return NO;
  }
  BananaService_GetBuzzRequest *other = (BananaService_GetBuzzRequest *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_UserToken *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (BananaAuthentication_UserToken *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_UserToken *fieldValue = [[BananaAuthentication_UserToken alloc] init];
          [fieldValue read: inProtocol];
          [self setToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetBuzzRequest"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRUCT fieldID: 1];
      [__token write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetBuzzRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", __token];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_GetBuzzResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.freshUsers = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

  self.freshApplications = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

  self.failedHealthChecks = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

  self.generalEvents = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithFreshUsers: (NSMutableArray *) freshUsers freshApplications: (NSMutableArray *) freshApplications failedHealthChecks: (NSMutableArray *) failedHealthChecks generalEvents: (NSMutableArray *) generalEvents
{
  self = [super init];
  __freshUsers = [freshUsers retain_stub];
  __freshUsers_isset = YES;
  __freshApplications = [freshApplications retain_stub];
  __freshApplications_isset = YES;
  __failedHealthChecks = [failedHealthChecks retain_stub];
  __failedHealthChecks_isset = YES;
  __generalEvents = [generalEvents retain_stub];
  __generalEvents_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"freshUsers"])
  {
    __freshUsers = [[decoder decodeObjectForKey: @"freshUsers"] retain_stub];
    __freshUsers_isset = YES;
  }
  if ([decoder containsValueForKey: @"freshApplications"])
  {
    __freshApplications = [[decoder decodeObjectForKey: @"freshApplications"] retain_stub];
    __freshApplications_isset = YES;
  }
  if ([decoder containsValueForKey: @"failedHealthChecks"])
  {
    __failedHealthChecks = [[decoder decodeObjectForKey: @"failedHealthChecks"] retain_stub];
    __failedHealthChecks_isset = YES;
  }
  if ([decoder containsValueForKey: @"generalEvents"])
  {
    __generalEvents = [[decoder decodeObjectForKey: @"generalEvents"] retain_stub];
    __generalEvents_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__freshUsers_isset)
  {
    [encoder encodeObject: __freshUsers forKey: @"freshUsers"];
  }
  if (__freshApplications_isset)
  {
    [encoder encodeObject: __freshApplications forKey: @"freshApplications"];
  }
  if (__failedHealthChecks_isset)
  {
    [encoder encodeObject: __failedHealthChecks forKey: @"failedHealthChecks"];
  }
  if (__generalEvents_isset)
  {
    [encoder encodeObject: __generalEvents forKey: @"generalEvents"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __freshUsers_isset ? 2654435761 : 0;
  if (__freshUsers_isset)
  {
    hash = (hash * 31) ^ [__freshUsers hash];
  }
  hash = (hash * 31) ^ __freshApplications_isset ? 2654435761 : 0;
  if (__freshApplications_isset)
  {
    hash = (hash * 31) ^ [__freshApplications hash];
  }
  hash = (hash * 31) ^ __failedHealthChecks_isset ? 2654435761 : 0;
  if (__failedHealthChecks_isset)
  {
    hash = (hash * 31) ^ [__failedHealthChecks hash];
  }
  hash = (hash * 31) ^ __generalEvents_isset ? 2654435761 : 0;
  if (__generalEvents_isset)
  {
    hash = (hash * 31) ^ [__generalEvents hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetBuzzResponse class]]) {
    return NO;
  }
  BananaService_GetBuzzResponse *other = (BananaService_GetBuzzResponse *)anObject;
  if ((__freshUsers_isset != other->__freshUsers_isset) ||
      (__freshUsers_isset && ((__freshUsers || other->__freshUsers) && ![__freshUsers isEqual:other->__freshUsers]))) {
    return NO;
  }
  if ((__freshApplications_isset != other->__freshApplications_isset) ||
      (__freshApplications_isset && ((__freshApplications || other->__freshApplications) && ![__freshApplications isEqual:other->__freshApplications]))) {
    return NO;
  }
  if ((__failedHealthChecks_isset != other->__failedHealthChecks_isset) ||
      (__failedHealthChecks_isset && ((__failedHealthChecks || other->__failedHealthChecks) && ![__failedHealthChecks isEqual:other->__failedHealthChecks]))) {
    return NO;
  }
  if ((__generalEvents_isset != other->__generalEvents_isset) ||
      (__generalEvents_isset && ((__generalEvents || other->__generalEvents) && ![__generalEvents isEqual:other->__generalEvents]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__freshUsers release_stub];
  [__freshApplications release_stub];
  [__failedHealthChecks release_stub];
  [__generalEvents release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) freshUsers {
  return [[__freshUsers retain_stub] autorelease_stub];
}

- (void) setFreshUsers: (NSMutableArray *) freshUsers {
  [freshUsers retain_stub];
  [__freshUsers release_stub];
  __freshUsers = freshUsers;
  __freshUsers_isset = YES;
}

- (BOOL) freshUsersIsSet {
  return __freshUsers_isset;
}

- (void) unsetFreshUsers {
  [__freshUsers release_stub];
  __freshUsers = nil;
  __freshUsers_isset = NO;
}

- (NSMutableArray *) freshApplications {
  return [[__freshApplications retain_stub] autorelease_stub];
}

- (void) setFreshApplications: (NSMutableArray *) freshApplications {
  [freshApplications retain_stub];
  [__freshApplications release_stub];
  __freshApplications = freshApplications;
  __freshApplications_isset = YES;
}

- (BOOL) freshApplicationsIsSet {
  return __freshApplications_isset;
}

- (void) unsetFreshApplications {
  [__freshApplications release_stub];
  __freshApplications = nil;
  __freshApplications_isset = NO;
}

- (NSMutableArray *) failedHealthChecks {
  return [[__failedHealthChecks retain_stub] autorelease_stub];
}

- (void) setFailedHealthChecks: (NSMutableArray *) failedHealthChecks {
  [failedHealthChecks retain_stub];
  [__failedHealthChecks release_stub];
  __failedHealthChecks = failedHealthChecks;
  __failedHealthChecks_isset = YES;
}

- (BOOL) failedHealthChecksIsSet {
  return __failedHealthChecks_isset;
}

- (void) unsetFailedHealthChecks {
  [__failedHealthChecks release_stub];
  __failedHealthChecks = nil;
  __failedHealthChecks_isset = NO;
}

- (NSMutableArray *) generalEvents {
  return [[__generalEvents retain_stub] autorelease_stub];
}

- (void) setGeneralEvents: (NSMutableArray *) generalEvents {
  [generalEvents retain_stub];
  [__generalEvents release_stub];
  __generalEvents = generalEvents;
  __generalEvents_isset = YES;
}

- (BOOL) generalEventsIsSet {
  return __generalEvents_isset;
}

- (void) unsetGeneralEvents {
  [__generalEvents release_stub];
  __generalEvents = nil;
  __generalEvents_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size20;
          [inProtocol readListBeginReturningElementType: NULL size: &_size20];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size20];
          int _i21;
          for (_i21 = 0; _i21 < _size20; ++_i21)
          {
            Banana_User *_elem22 = [[Banana_User alloc] init];
            [_elem22 read: inProtocol];
            [fieldValue addObject: _elem22];
            [_elem22 release_stub];
          }
          [inProtocol readListEnd];
          [self setFreshUsers: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size23;
          [inProtocol readListBeginReturningElementType: NULL size: &_size23];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size23];
          int _i24;
          for (_i24 = 0; _i24 < _size23; ++_i24)
          {
            Banana_Application *_elem25 = [[Banana_Application alloc] init];
            [_elem25 read: inProtocol];
            [fieldValue addObject: _elem25];
            [_elem25 release_stub];
          }
          [inProtocol readListEnd];
          [self setFreshApplications: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size26;
          [inProtocol readListBeginReturningElementType: NULL size: &_size26];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size26];
          int _i27;
          for (_i27 = 0; _i27 < _size26; ++_i27)
          {
            BananaEvents_HealthCheckFailed *_elem28 = [[BananaEvents_HealthCheckFailed alloc] init];
            [_elem28 read: inProtocol];
            [fieldValue addObject: _elem28];
            [_elem28 release_stub];
          }
          [inProtocol readListEnd];
          [self setFailedHealthChecks: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size29;
          [inProtocol readListBeginReturningElementType: NULL size: &_size29];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size29];
          int _i30;
          for (_i30 = 0; _i30 < _size29; ++_i30)
          {
            BananaEvents_GeneralEvent *_elem31 = [[BananaEvents_GeneralEvent alloc] init];
            [_elem31 read: inProtocol];
            [fieldValue addObject: _elem31];
            [_elem31 release_stub];
          }
          [inProtocol readListEnd];
          [self setGeneralEvents: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetBuzzResponse"];
  if (__freshUsers_isset) {
    if (__freshUsers != nil) {
      [outProtocol writeFieldBeginWithName: @"freshUsers" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__freshUsers count]];
        int idx33;
        for (idx33 = 0; idx33 < [__freshUsers count]; idx33++)
        {
          [[__freshUsers objectAtIndex: idx33] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__freshApplications_isset) {
    if (__freshApplications != nil) {
      [outProtocol writeFieldBeginWithName: @"freshApplications" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__freshApplications count]];
        int idx35;
        for (idx35 = 0; idx35 < [__freshApplications count]; idx35++)
        {
          [[__freshApplications objectAtIndex: idx35] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__failedHealthChecks_isset) {
    if (__failedHealthChecks != nil) {
      [outProtocol writeFieldBeginWithName: @"failedHealthChecks" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__failedHealthChecks count]];
        int idx37;
        for (idx37 = 0; idx37 < [__failedHealthChecks count]; idx37++)
        {
          [[__failedHealthChecks objectAtIndex: idx37] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__generalEvents_isset) {
    if (__generalEvents != nil) {
      [outProtocol writeFieldBeginWithName: @"generalEvents" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__generalEvents count]];
        int idx39;
        for (idx39 = 0; idx39 < [__generalEvents count]; idx39++)
        {
          [[__generalEvents objectAtIndex: idx39] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetBuzzResponse("];
  [ms appendString: @"freshUsers:"];
  [ms appendFormat: @"%@", __freshUsers];
  [ms appendString: @",freshApplications:"];
  [ms appendFormat: @"%@", __freshApplications];
  [ms appendString: @",failedHealthChecks:"];
  [ms appendFormat: @"%@", __failedHealthChecks];
  [ms appendString: @",generalEvents:"];
  [ms appendFormat: @"%@", __generalEvents];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_GetDashboardRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (BananaService_UserToken) token
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetDashboardRequest class]]) {
    return NO;
  }
  BananaService_GetDashboardRequest *other = (BananaService_GetDashboardRequest *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_UserToken *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (BananaAuthentication_UserToken *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_UserToken *fieldValue = [[BananaAuthentication_UserToken alloc] init];
          [fieldValue read: inProtocol];
          [self setToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDashboardRequest"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRUCT fieldID: 1];
      [__token write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetDashboardRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", __token];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_GetDashboardResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.unreadMessageCount = 0;

  self.totalMessagesLastHour = 0;

  self.totalMessagesLast24hrs = 0;

  self.recentMessages = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

  self.numberOfLowUrgencyMessages = 0;

  self.numberOfMediumUrgencyMessages = 0;

  self.numberOfHighUrgencyMessages = 0;

#endif
  return self;
}

- (id) initWithUnreadMessageCount: (BananaService_int) unreadMessageCount totalMessagesLastHour: (BananaService_int) totalMessagesLastHour totalMessagesLast24hrs: (BananaService_int) totalMessagesLast24hrs recentMessages: (NSMutableArray *) recentMessages numberOfLowUrgencyMessages: (BananaService_int) numberOfLowUrgencyMessages numberOfMediumUrgencyMessages: (BananaService_int) numberOfMediumUrgencyMessages numberOfHighUrgencyMessages: (BananaService_int) numberOfHighUrgencyMessages
{
  self = [super init];
  __unreadMessageCount = unreadMessageCount;
  __unreadMessageCount_isset = YES;
  __totalMessagesLastHour = totalMessagesLastHour;
  __totalMessagesLastHour_isset = YES;
  __totalMessagesLast24hrs = totalMessagesLast24hrs;
  __totalMessagesLast24hrs_isset = YES;
  __recentMessages = [recentMessages retain_stub];
  __recentMessages_isset = YES;
  __numberOfLowUrgencyMessages = numberOfLowUrgencyMessages;
  __numberOfLowUrgencyMessages_isset = YES;
  __numberOfMediumUrgencyMessages = numberOfMediumUrgencyMessages;
  __numberOfMediumUrgencyMessages_isset = YES;
  __numberOfHighUrgencyMessages = numberOfHighUrgencyMessages;
  __numberOfHighUrgencyMessages_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"unreadMessageCount"])
  {
    __unreadMessageCount = [decoder decodeInt32ForKey: @"unreadMessageCount"];
    __unreadMessageCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalMessagesLastHour"])
  {
    __totalMessagesLastHour = [decoder decodeInt32ForKey: @"totalMessagesLastHour"];
    __totalMessagesLastHour_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalMessagesLast24hrs"])
  {
    __totalMessagesLast24hrs = [decoder decodeInt32ForKey: @"totalMessagesLast24hrs"];
    __totalMessagesLast24hrs_isset = YES;
  }
  if ([decoder containsValueForKey: @"recentMessages"])
  {
    __recentMessages = [[decoder decodeObjectForKey: @"recentMessages"] retain_stub];
    __recentMessages_isset = YES;
  }
  if ([decoder containsValueForKey: @"numberOfLowUrgencyMessages"])
  {
    __numberOfLowUrgencyMessages = [decoder decodeInt32ForKey: @"numberOfLowUrgencyMessages"];
    __numberOfLowUrgencyMessages_isset = YES;
  }
  if ([decoder containsValueForKey: @"numberOfMediumUrgencyMessages"])
  {
    __numberOfMediumUrgencyMessages = [decoder decodeInt32ForKey: @"numberOfMediumUrgencyMessages"];
    __numberOfMediumUrgencyMessages_isset = YES;
  }
  if ([decoder containsValueForKey: @"numberOfHighUrgencyMessages"])
  {
    __numberOfHighUrgencyMessages = [decoder decodeInt32ForKey: @"numberOfHighUrgencyMessages"];
    __numberOfHighUrgencyMessages_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__unreadMessageCount_isset)
  {
    [encoder encodeInt32: __unreadMessageCount forKey: @"unreadMessageCount"];
  }
  if (__totalMessagesLastHour_isset)
  {
    [encoder encodeInt32: __totalMessagesLastHour forKey: @"totalMessagesLastHour"];
  }
  if (__totalMessagesLast24hrs_isset)
  {
    [encoder encodeInt32: __totalMessagesLast24hrs forKey: @"totalMessagesLast24hrs"];
  }
  if (__recentMessages_isset)
  {
    [encoder encodeObject: __recentMessages forKey: @"recentMessages"];
  }
  if (__numberOfLowUrgencyMessages_isset)
  {
    [encoder encodeInt32: __numberOfLowUrgencyMessages forKey: @"numberOfLowUrgencyMessages"];
  }
  if (__numberOfMediumUrgencyMessages_isset)
  {
    [encoder encodeInt32: __numberOfMediumUrgencyMessages forKey: @"numberOfMediumUrgencyMessages"];
  }
  if (__numberOfHighUrgencyMessages_isset)
  {
    [encoder encodeInt32: __numberOfHighUrgencyMessages forKey: @"numberOfHighUrgencyMessages"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __unreadMessageCount_isset ? 2654435761 : 0;
  if (__unreadMessageCount_isset)
  {
    hash = (hash * 31) ^ [@(__unreadMessageCount) hash];
  }
  hash = (hash * 31) ^ __totalMessagesLastHour_isset ? 2654435761 : 0;
  if (__totalMessagesLastHour_isset)
  {
    hash = (hash * 31) ^ [@(__totalMessagesLastHour) hash];
  }
  hash = (hash * 31) ^ __totalMessagesLast24hrs_isset ? 2654435761 : 0;
  if (__totalMessagesLast24hrs_isset)
  {
    hash = (hash * 31) ^ [@(__totalMessagesLast24hrs) hash];
  }
  hash = (hash * 31) ^ __recentMessages_isset ? 2654435761 : 0;
  if (__recentMessages_isset)
  {
    hash = (hash * 31) ^ [__recentMessages hash];
  }
  hash = (hash * 31) ^ __numberOfLowUrgencyMessages_isset ? 2654435761 : 0;
  if (__numberOfLowUrgencyMessages_isset)
  {
    hash = (hash * 31) ^ [@(__numberOfLowUrgencyMessages) hash];
  }
  hash = (hash * 31) ^ __numberOfMediumUrgencyMessages_isset ? 2654435761 : 0;
  if (__numberOfMediumUrgencyMessages_isset)
  {
    hash = (hash * 31) ^ [@(__numberOfMediumUrgencyMessages) hash];
  }
  hash = (hash * 31) ^ __numberOfHighUrgencyMessages_isset ? 2654435761 : 0;
  if (__numberOfHighUrgencyMessages_isset)
  {
    hash = (hash * 31) ^ [@(__numberOfHighUrgencyMessages) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetDashboardResponse class]]) {
    return NO;
  }
  BananaService_GetDashboardResponse *other = (BananaService_GetDashboardResponse *)anObject;
  if ((__unreadMessageCount_isset != other->__unreadMessageCount_isset) ||
      (__unreadMessageCount_isset && (__unreadMessageCount != other->__unreadMessageCount))) {
    return NO;
  }
  if ((__totalMessagesLastHour_isset != other->__totalMessagesLastHour_isset) ||
      (__totalMessagesLastHour_isset && (__totalMessagesLastHour != other->__totalMessagesLastHour))) {
    return NO;
  }
  if ((__totalMessagesLast24hrs_isset != other->__totalMessagesLast24hrs_isset) ||
      (__totalMessagesLast24hrs_isset && (__totalMessagesLast24hrs != other->__totalMessagesLast24hrs))) {
    return NO;
  }
  if ((__recentMessages_isset != other->__recentMessages_isset) ||
      (__recentMessages_isset && ((__recentMessages || other->__recentMessages) && ![__recentMessages isEqual:other->__recentMessages]))) {
    return NO;
  }
  if ((__numberOfLowUrgencyMessages_isset != other->__numberOfLowUrgencyMessages_isset) ||
      (__numberOfLowUrgencyMessages_isset && (__numberOfLowUrgencyMessages != other->__numberOfLowUrgencyMessages))) {
    return NO;
  }
  if ((__numberOfMediumUrgencyMessages_isset != other->__numberOfMediumUrgencyMessages_isset) ||
      (__numberOfMediumUrgencyMessages_isset && (__numberOfMediumUrgencyMessages != other->__numberOfMediumUrgencyMessages))) {
    return NO;
  }
  if ((__numberOfHighUrgencyMessages_isset != other->__numberOfHighUrgencyMessages_isset) ||
      (__numberOfHighUrgencyMessages_isset && (__numberOfHighUrgencyMessages != other->__numberOfHighUrgencyMessages))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__recentMessages release_stub];
  [super dealloc_stub];
}

- (int32_t) unreadMessageCount {
  return __unreadMessageCount;
}

- (void) setUnreadMessageCount: (int32_t) unreadMessageCount {
  __unreadMessageCount = unreadMessageCount;
  __unreadMessageCount_isset = YES;
}

- (BOOL) unreadMessageCountIsSet {
  return __unreadMessageCount_isset;
}

- (void) unsetUnreadMessageCount {
  __unreadMessageCount_isset = NO;
}

- (int32_t) totalMessagesLastHour {
  return __totalMessagesLastHour;
}

- (void) setTotalMessagesLastHour: (int32_t) totalMessagesLastHour {
  __totalMessagesLastHour = totalMessagesLastHour;
  __totalMessagesLastHour_isset = YES;
}

- (BOOL) totalMessagesLastHourIsSet {
  return __totalMessagesLastHour_isset;
}

- (void) unsetTotalMessagesLastHour {
  __totalMessagesLastHour_isset = NO;
}

- (int32_t) totalMessagesLast24hrs {
  return __totalMessagesLast24hrs;
}

- (void) setTotalMessagesLast24hrs: (int32_t) totalMessagesLast24hrs {
  __totalMessagesLast24hrs = totalMessagesLast24hrs;
  __totalMessagesLast24hrs_isset = YES;
}

- (BOOL) totalMessagesLast24hrsIsSet {
  return __totalMessagesLast24hrs_isset;
}

- (void) unsetTotalMessagesLast24hrs {
  __totalMessagesLast24hrs_isset = NO;
}

- (NSMutableArray *) recentMessages {
  return [[__recentMessages retain_stub] autorelease_stub];
}

- (void) setRecentMessages: (NSMutableArray *) recentMessages {
  [recentMessages retain_stub];
  [__recentMessages release_stub];
  __recentMessages = recentMessages;
  __recentMessages_isset = YES;
}

- (BOOL) recentMessagesIsSet {
  return __recentMessages_isset;
}

- (void) unsetRecentMessages {
  [__recentMessages release_stub];
  __recentMessages = nil;
  __recentMessages_isset = NO;
}

- (int32_t) numberOfLowUrgencyMessages {
  return __numberOfLowUrgencyMessages;
}

- (void) setNumberOfLowUrgencyMessages: (int32_t) numberOfLowUrgencyMessages {
  __numberOfLowUrgencyMessages = numberOfLowUrgencyMessages;
  __numberOfLowUrgencyMessages_isset = YES;
}

- (BOOL) numberOfLowUrgencyMessagesIsSet {
  return __numberOfLowUrgencyMessages_isset;
}

- (void) unsetNumberOfLowUrgencyMessages {
  __numberOfLowUrgencyMessages_isset = NO;
}

- (int32_t) numberOfMediumUrgencyMessages {
  return __numberOfMediumUrgencyMessages;
}

- (void) setNumberOfMediumUrgencyMessages: (int32_t) numberOfMediumUrgencyMessages {
  __numberOfMediumUrgencyMessages = numberOfMediumUrgencyMessages;
  __numberOfMediumUrgencyMessages_isset = YES;
}

- (BOOL) numberOfMediumUrgencyMessagesIsSet {
  return __numberOfMediumUrgencyMessages_isset;
}

- (void) unsetNumberOfMediumUrgencyMessages {
  __numberOfMediumUrgencyMessages_isset = NO;
}

- (int32_t) numberOfHighUrgencyMessages {
  return __numberOfHighUrgencyMessages;
}

- (void) setNumberOfHighUrgencyMessages: (int32_t) numberOfHighUrgencyMessages {
  __numberOfHighUrgencyMessages = numberOfHighUrgencyMessages;
  __numberOfHighUrgencyMessages_isset = YES;
}

- (BOOL) numberOfHighUrgencyMessagesIsSet {
  return __numberOfHighUrgencyMessages_isset;
}

- (void) unsetNumberOfHighUrgencyMessages {
  __numberOfHighUrgencyMessages_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setUnreadMessageCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTotalMessagesLastHour: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTotalMessagesLast24hrs: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size40;
          [inProtocol readListBeginReturningElementType: NULL size: &_size40];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size40];
          int _i41;
          for (_i41 = 0; _i41 < _size40; ++_i41)
          {
            Banana_Message *_elem42 = [[Banana_Message alloc] init];
            [_elem42 read: inProtocol];
            [fieldValue addObject: _elem42];
            [_elem42 release_stub];
          }
          [inProtocol readListEnd];
          [self setRecentMessages: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setNumberOfLowUrgencyMessages: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setNumberOfMediumUrgencyMessages: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setNumberOfHighUrgencyMessages: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDashboardResponse"];
  if (__unreadMessageCount_isset) {
    [outProtocol writeFieldBeginWithName: @"unreadMessageCount" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __unreadMessageCount];
    [outProtocol writeFieldEnd];
  }
  if (__totalMessagesLastHour_isset) {
    [outProtocol writeFieldBeginWithName: @"totalMessagesLastHour" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __totalMessagesLastHour];
    [outProtocol writeFieldEnd];
  }
  if (__totalMessagesLast24hrs_isset) {
    [outProtocol writeFieldBeginWithName: @"totalMessagesLast24hrs" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __totalMessagesLast24hrs];
    [outProtocol writeFieldEnd];
  }
  if (__recentMessages_isset) {
    if (__recentMessages != nil) {
      [outProtocol writeFieldBeginWithName: @"recentMessages" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__recentMessages count]];
        int idx44;
        for (idx44 = 0; idx44 < [__recentMessages count]; idx44++)
        {
          [[__recentMessages objectAtIndex: idx44] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__numberOfLowUrgencyMessages_isset) {
    [outProtocol writeFieldBeginWithName: @"numberOfLowUrgencyMessages" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __numberOfLowUrgencyMessages];
    [outProtocol writeFieldEnd];
  }
  if (__numberOfMediumUrgencyMessages_isset) {
    [outProtocol writeFieldBeginWithName: @"numberOfMediumUrgencyMessages" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __numberOfMediumUrgencyMessages];
    [outProtocol writeFieldEnd];
  }
  if (__numberOfHighUrgencyMessages_isset) {
    [outProtocol writeFieldBeginWithName: @"numberOfHighUrgencyMessages" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __numberOfHighUrgencyMessages];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetDashboardResponse("];
  [ms appendString: @"unreadMessageCount:"];
  [ms appendFormat: @"%i", __unreadMessageCount];
  [ms appendString: @",totalMessagesLastHour:"];
  [ms appendFormat: @"%i", __totalMessagesLastHour];
  [ms appendString: @",totalMessagesLast24hrs:"];
  [ms appendFormat: @"%i", __totalMessagesLast24hrs];
  [ms appendString: @",recentMessages:"];
  [ms appendFormat: @"%@", __recentMessages];
  [ms appendString: @",numberOfLowUrgencyMessages:"];
  [ms appendFormat: @"%i", __numberOfLowUrgencyMessages];
  [ms appendString: @",numberOfMediumUrgencyMessages:"];
  [ms appendFormat: @"%i", __numberOfMediumUrgencyMessages];
  [ms appendString: @",numberOfHighUrgencyMessages:"];
  [ms appendFormat: @"%i", __numberOfHighUrgencyMessages];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_GetMessagesRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.limit = 0;

#endif
  return self;
}

- (id) initWithToken: (BananaService_UserToken) token applicationId: (BananaService_uuid) applicationId limit: (BananaService_int) limit
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __applicationId = [applicationId retain_stub];
  __applicationId_isset = YES;
  __limit = limit;
  __limit_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationId"])
  {
    __applicationId = [[decoder decodeObjectForKey: @"applicationId"] retain_stub];
    __applicationId_isset = YES;
  }
  if ([decoder containsValueForKey: @"limit"])
  {
    __limit = [decoder decodeInt32ForKey: @"limit"];
    __limit_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__applicationId_isset)
  {
    [encoder encodeObject: __applicationId forKey: @"applicationId"];
  }
  if (__limit_isset)
  {
    [encoder encodeInt32: __limit forKey: @"limit"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __applicationId_isset ? 2654435761 : 0;
  if (__applicationId_isset)
  {
    hash = (hash * 31) ^ [__applicationId hash];
  }
  hash = (hash * 31) ^ __limit_isset ? 2654435761 : 0;
  if (__limit_isset)
  {
    hash = (hash * 31) ^ [@(__limit) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetMessagesRequest class]]) {
    return NO;
  }
  BananaService_GetMessagesRequest *other = (BananaService_GetMessagesRequest *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__applicationId_isset != other->__applicationId_isset) ||
      (__applicationId_isset && ((__applicationId || other->__applicationId) && ![__applicationId isEqual:other->__applicationId]))) {
    return NO;
  }
  if ((__limit_isset != other->__limit_isset) ||
      (__limit_isset && (__limit != other->__limit))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__applicationId release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_UserToken *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (BananaAuthentication_UserToken *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) applicationId {
  return [[__applicationId retain_stub] autorelease_stub];
}

- (void) setApplicationId: (NSString *) applicationId {
  [applicationId retain_stub];
  [__applicationId release_stub];
  __applicationId = applicationId;
  __applicationId_isset = YES;
}

- (BOOL) applicationIdIsSet {
  return __applicationId_isset;
}

- (void) unsetApplicationId {
  [__applicationId release_stub];
  __applicationId = nil;
  __applicationId_isset = NO;
}

- (int32_t) limit {
  return __limit;
}

- (void) setLimit: (int32_t) limit {
  __limit = limit;
  __limit_isset = YES;
}

- (BOOL) limitIsSet {
  return __limit_isset;
}

- (void) unsetLimit {
  __limit_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_UserToken *fieldValue = [[BananaAuthentication_UserToken alloc] init];
          [fieldValue read: inProtocol];
          [self setToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLimit: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMessagesRequest"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRUCT fieldID: 1];
      [__token write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationId_isset) {
    if (__applicationId != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __applicationId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__limit_isset) {
    [outProtocol writeFieldBeginWithName: @"limit" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __limit];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetMessagesRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", __token];
  [ms appendString: @",applicationId:"];
  [ms appendFormat: @"\"%@\"", __applicationId];
  [ms appendString: @",limit:"];
  [ms appendFormat: @"%i", __limit];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_GetMessagesResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.messages = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

  self.totalMessagesMatching = 0;

#endif
  return self;
}

- (id) initWithMessages: (NSMutableArray *) messages totalMessagesMatching: (BananaService_int) totalMessagesMatching
{
  self = [super init];
  __messages = [messages retain_stub];
  __messages_isset = YES;
  __totalMessagesMatching = totalMessagesMatching;
  __totalMessagesMatching_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"messages"])
  {
    __messages = [[decoder decodeObjectForKey: @"messages"] retain_stub];
    __messages_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalMessagesMatching"])
  {
    __totalMessagesMatching = [decoder decodeInt32ForKey: @"totalMessagesMatching"];
    __totalMessagesMatching_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__messages_isset)
  {
    [encoder encodeObject: __messages forKey: @"messages"];
  }
  if (__totalMessagesMatching_isset)
  {
    [encoder encodeInt32: __totalMessagesMatching forKey: @"totalMessagesMatching"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __messages_isset ? 2654435761 : 0;
  if (__messages_isset)
  {
    hash = (hash * 31) ^ [__messages hash];
  }
  hash = (hash * 31) ^ __totalMessagesMatching_isset ? 2654435761 : 0;
  if (__totalMessagesMatching_isset)
  {
    hash = (hash * 31) ^ [@(__totalMessagesMatching) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetMessagesResponse class]]) {
    return NO;
  }
  BananaService_GetMessagesResponse *other = (BananaService_GetMessagesResponse *)anObject;
  if ((__messages_isset != other->__messages_isset) ||
      (__messages_isset && ((__messages || other->__messages) && ![__messages isEqual:other->__messages]))) {
    return NO;
  }
  if ((__totalMessagesMatching_isset != other->__totalMessagesMatching_isset) ||
      (__totalMessagesMatching_isset && (__totalMessagesMatching != other->__totalMessagesMatching))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__messages release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) messages {
  return [[__messages retain_stub] autorelease_stub];
}

- (void) setMessages: (NSMutableArray *) messages {
  [messages retain_stub];
  [__messages release_stub];
  __messages = messages;
  __messages_isset = YES;
}

- (BOOL) messagesIsSet {
  return __messages_isset;
}

- (void) unsetMessages {
  [__messages release_stub];
  __messages = nil;
  __messages_isset = NO;
}

- (int32_t) totalMessagesMatching {
  return __totalMessagesMatching;
}

- (void) setTotalMessagesMatching: (int32_t) totalMessagesMatching {
  __totalMessagesMatching = totalMessagesMatching;
  __totalMessagesMatching_isset = YES;
}

- (BOOL) totalMessagesMatchingIsSet {
  return __totalMessagesMatching_isset;
}

- (void) unsetTotalMessagesMatching {
  __totalMessagesMatching_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size45;
          [inProtocol readListBeginReturningElementType: NULL size: &_size45];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size45];
          int _i46;
          for (_i46 = 0; _i46 < _size45; ++_i46)
          {
            Banana_Message *_elem47 = [[Banana_Message alloc] init];
            [_elem47 read: inProtocol];
            [fieldValue addObject: _elem47];
            [_elem47 release_stub];
          }
          [inProtocol readListEnd];
          [self setMessages: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTotalMessagesMatching: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMessagesResponse"];
  if (__messages_isset) {
    if (__messages != nil) {
      [outProtocol writeFieldBeginWithName: @"messages" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__messages count]];
        int idx49;
        for (idx49 = 0; idx49 < [__messages count]; idx49++)
        {
          [[__messages objectAtIndex: idx49] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__totalMessagesMatching_isset) {
    [outProtocol writeFieldBeginWithName: @"totalMessagesMatching" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __totalMessagesMatching];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetMessagesResponse("];
  [ms appendString: @"messages:"];
  [ms appendFormat: @"%@", __messages];
  [ms appendString: @",totalMessagesMatching:"];
  [ms appendFormat: @"%i", __totalMessagesMatching];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_GetFullMessageRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (BananaService_UserToken) token messageId: (BananaService_uuid) messageId
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __messageId = [messageId retain_stub];
  __messageId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"messageId"])
  {
    __messageId = [[decoder decodeObjectForKey: @"messageId"] retain_stub];
    __messageId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__messageId_isset)
  {
    [encoder encodeObject: __messageId forKey: @"messageId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __messageId_isset ? 2654435761 : 0;
  if (__messageId_isset)
  {
    hash = (hash * 31) ^ [__messageId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetFullMessageRequest class]]) {
    return NO;
  }
  BananaService_GetFullMessageRequest *other = (BananaService_GetFullMessageRequest *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__messageId_isset != other->__messageId_isset) ||
      (__messageId_isset && ((__messageId || other->__messageId) && ![__messageId isEqual:other->__messageId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__messageId release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_UserToken *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (BananaAuthentication_UserToken *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) messageId {
  return [[__messageId retain_stub] autorelease_stub];
}

- (void) setMessageId: (NSString *) messageId {
  [messageId retain_stub];
  [__messageId release_stub];
  __messageId = messageId;
  __messageId_isset = YES;
}

- (BOOL) messageIdIsSet {
  return __messageId_isset;
}

- (void) unsetMessageId {
  [__messageId release_stub];
  __messageId = nil;
  __messageId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_UserToken *fieldValue = [[BananaAuthentication_UserToken alloc] init];
          [fieldValue read: inProtocol];
          [self setToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessageId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetFullMessageRequest"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRUCT fieldID: 1];
      [__token write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__messageId_isset) {
    if (__messageId != nil) {
      [outProtocol writeFieldBeginWithName: @"messageId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __messageId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetFullMessageRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", __token];
  [ms appendString: @",messageId:"];
  [ms appendFormat: @"\"%@\"", __messageId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_GetFullMessageResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithFullBody: (NSString *) fullBody
{
  self = [super init];
  __fullBody = [fullBody retain_stub];
  __fullBody_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"fullBody"])
  {
    __fullBody = [[decoder decodeObjectForKey: @"fullBody"] retain_stub];
    __fullBody_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__fullBody_isset)
  {
    [encoder encodeObject: __fullBody forKey: @"fullBody"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __fullBody_isset ? 2654435761 : 0;
  if (__fullBody_isset)
  {
    hash = (hash * 31) ^ [__fullBody hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetFullMessageResponse class]]) {
    return NO;
  }
  BananaService_GetFullMessageResponse *other = (BananaService_GetFullMessageResponse *)anObject;
  if ((__fullBody_isset != other->__fullBody_isset) ||
      (__fullBody_isset && ((__fullBody || other->__fullBody) && ![__fullBody isEqual:other->__fullBody]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__fullBody release_stub];
  [super dealloc_stub];
}

- (NSString *) fullBody {
  return [[__fullBody retain_stub] autorelease_stub];
}

- (void) setFullBody: (NSString *) fullBody {
  [fullBody retain_stub];
  [__fullBody release_stub];
  __fullBody = fullBody;
  __fullBody_isset = YES;
}

- (BOOL) fullBodyIsSet {
  return __fullBody_isset;
}

- (void) unsetFullBody {
  [__fullBody release_stub];
  __fullBody = nil;
  __fullBody_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFullBody: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetFullMessageResponse"];
  if (__fullBody_isset) {
    if (__fullBody != nil) {
      [outProtocol writeFieldBeginWithName: @"fullBody" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __fullBody];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetFullMessageResponse("];
  [ms appendString: @"fullBody:"];
  [ms appendFormat: @"\"%@\"", __fullBody];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_GetMyApplicationsRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (BananaService_UserToken) token
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetMyApplicationsRequest class]]) {
    return NO;
  }
  BananaService_GetMyApplicationsRequest *other = (BananaService_GetMyApplicationsRequest *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_UserToken *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (BananaAuthentication_UserToken *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_UserToken *fieldValue = [[BananaAuthentication_UserToken alloc] init];
          [fieldValue read: inProtocol];
          [self setToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMyApplicationsRequest"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRUCT fieldID: 1];
      [__token write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetMyApplicationsRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", __token];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_GetMyApplicationsResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithApplications: (NSMutableArray *) applications
{
  self = [super init];
  __applications = [applications retain_stub];
  __applications_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"applications"])
  {
    __applications = [[decoder decodeObjectForKey: @"applications"] retain_stub];
    __applications_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__applications_isset)
  {
    [encoder encodeObject: __applications forKey: @"applications"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __applications_isset ? 2654435761 : 0;
  if (__applications_isset)
  {
    hash = (hash * 31) ^ [__applications hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetMyApplicationsResponse class]]) {
    return NO;
  }
  BananaService_GetMyApplicationsResponse *other = (BananaService_GetMyApplicationsResponse *)anObject;
  if ((__applications_isset != other->__applications_isset) ||
      (__applications_isset && ((__applications || other->__applications) && ![__applications isEqual:other->__applications]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__applications release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) applications {
  return [[__applications retain_stub] autorelease_stub];
}

- (void) setApplications: (NSMutableArray *) applications {
  [applications retain_stub];
  [__applications release_stub];
  __applications = applications;
  __applications_isset = YES;
}

- (BOOL) applicationsIsSet {
  return __applications_isset;
}

- (void) unsetApplications {
  [__applications release_stub];
  __applications = nil;
  __applications_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size50;
          [inProtocol readListBeginReturningElementType: NULL size: &_size50];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size50];
          int _i51;
          for (_i51 = 0; _i51 < _size50; ++_i51)
          {
            Banana_Application *_elem52 = [[Banana_Application alloc] init];
            [_elem52 read: inProtocol];
            [fieldValue addObject: _elem52];
            [_elem52 release_stub];
          }
          [inProtocol readListEnd];
          [self setApplications: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMyApplicationsResponse"];
  if (__applications_isset) {
    if (__applications != nil) {
      [outProtocol writeFieldBeginWithName: @"applications" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__applications count]];
        int idx54;
        for (idx54 = 0; idx54 < [__applications count]; idx54++)
        {
          [[__applications objectAtIndex: idx54] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetMyApplicationsResponse("];
  [ms appendString: @"applications:"];
  [ms appendFormat: @"%@", __applications];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_GetMySavedChannelsRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (BananaService_UserToken) token
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetMySavedChannelsRequest class]]) {
    return NO;
  }
  BananaService_GetMySavedChannelsRequest *other = (BananaService_GetMySavedChannelsRequest *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_UserToken *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (BananaAuthentication_UserToken *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_UserToken *fieldValue = [[BananaAuthentication_UserToken alloc] init];
          [fieldValue read: inProtocol];
          [self setToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMySavedChannelsRequest"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRUCT fieldID: 1];
      [__token write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetMySavedChannelsRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", __token];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_GetMySavedChannelsResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithChannels: (NSMutableArray *) channels
{
  self = [super init];
  __channels = [channels retain_stub];
  __channels_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"channels"])
  {
    __channels = [[decoder decodeObjectForKey: @"channels"] retain_stub];
    __channels_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__channels_isset)
  {
    [encoder encodeObject: __channels forKey: @"channels"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __channels_isset ? 2654435761 : 0;
  if (__channels_isset)
  {
    hash = (hash * 31) ^ [__channels hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetMySavedChannelsResponse class]]) {
    return NO;
  }
  BananaService_GetMySavedChannelsResponse *other = (BananaService_GetMySavedChannelsResponse *)anObject;
  if ((__channels_isset != other->__channels_isset) ||
      (__channels_isset && ((__channels || other->__channels) && ![__channels isEqual:other->__channels]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__channels release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) channels {
  return [[__channels retain_stub] autorelease_stub];
}

- (void) setChannels: (NSMutableArray *) channels {
  [channels retain_stub];
  [__channels release_stub];
  __channels = channels;
  __channels_isset = YES;
}

- (BOOL) channelsIsSet {
  return __channels_isset;
}

- (void) unsetChannels {
  [__channels release_stub];
  __channels = nil;
  __channels_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size55;
          [inProtocol readListBeginReturningElementType: NULL size: &_size55];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size55];
          int _i56;
          for (_i56 = 0; _i56 < _size55; ++_i56)
          {
            BananaChannels_BananaChannel *_elem57 = [[BananaChannels_BananaChannel alloc] init];
            [_elem57 read: inProtocol];
            [fieldValue addObject: _elem57];
            [_elem57 release_stub];
          }
          [inProtocol readListEnd];
          [self setChannels: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMySavedChannelsResponse"];
  if (__channels_isset) {
    if (__channels != nil) {
      [outProtocol writeFieldBeginWithName: @"channels" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__channels count]];
        int idx59;
        for (idx59 = 0; idx59 < [__channels count]; idx59++)
        {
          [[__channels objectAtIndex: idx59] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetMySavedChannelsResponse("];
  [ms appendString: @"channels:"];
  [ms appendFormat: @"%@", __channels];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_GetActivityRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.limit = 0;

#endif
  return self;
}

- (id) initWithToken: (BananaService_UserToken) token limit: (BananaService_int) limit
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __limit = limit;
  __limit_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"limit"])
  {
    __limit = [decoder decodeInt32ForKey: @"limit"];
    __limit_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__limit_isset)
  {
    [encoder encodeInt32: __limit forKey: @"limit"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __limit_isset ? 2654435761 : 0;
  if (__limit_isset)
  {
    hash = (hash * 31) ^ [@(__limit) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetActivityRequest class]]) {
    return NO;
  }
  BananaService_GetActivityRequest *other = (BananaService_GetActivityRequest *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__limit_isset != other->__limit_isset) ||
      (__limit_isset && (__limit != other->__limit))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_UserToken *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (BananaAuthentication_UserToken *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (int32_t) limit {
  return __limit;
}

- (void) setLimit: (int32_t) limit {
  __limit = limit;
  __limit_isset = YES;
}

- (BOOL) limitIsSet {
  return __limit_isset;
}

- (void) unsetLimit {
  __limit_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_UserToken *fieldValue = [[BananaAuthentication_UserToken alloc] init];
          [fieldValue read: inProtocol];
          [self setToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLimit: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetActivityRequest"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRUCT fieldID: 1];
      [__token write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__limit_isset) {
    [outProtocol writeFieldBeginWithName: @"limit" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __limit];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetActivityRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", __token];
  [ms appendString: @",limit:"];
  [ms appendFormat: @"%i", __limit];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_GetActivityResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.events = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithEvents: (NSMutableArray *) events
{
  self = [super init];
  __events = [events retain_stub];
  __events_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"events"])
  {
    __events = [[decoder decodeObjectForKey: @"events"] retain_stub];
    __events_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__events_isset)
  {
    [encoder encodeObject: __events forKey: @"events"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __events_isset ? 2654435761 : 0;
  if (__events_isset)
  {
    hash = (hash * 31) ^ [__events hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetActivityResponse class]]) {
    return NO;
  }
  BananaService_GetActivityResponse *other = (BananaService_GetActivityResponse *)anObject;
  if ((__events_isset != other->__events_isset) ||
      (__events_isset && ((__events || other->__events) && ![__events isEqual:other->__events]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__events release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) events {
  return [[__events retain_stub] autorelease_stub];
}

- (void) setEvents: (NSMutableArray *) events {
  [events retain_stub];
  [__events release_stub];
  __events = events;
  __events_isset = YES;
}

- (BOOL) eventsIsSet {
  return __events_isset;
}

- (void) unsetEvents {
  [__events release_stub];
  __events = nil;
  __events_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size60;
          [inProtocol readListBeginReturningElementType: NULL size: &_size60];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size60];
          int _i61;
          for (_i61 = 0; _i61 < _size60; ++_i61)
          {
            BananaEvents_Event *_elem62 = [[BananaEvents_Event alloc] init];
            [_elem62 read: inProtocol];
            [fieldValue addObject: _elem62];
            [_elem62 release_stub];
          }
          [inProtocol readListEnd];
          [self setEvents: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetActivityResponse"];
  if (__events_isset) {
    if (__events != nil) {
      [outProtocol writeFieldBeginWithName: @"events" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__events count]];
        int idx64;
        for (idx64 = 0; idx64 < [__events count]; idx64++)
        {
          [[__events objectAtIndex: idx64] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetActivityResponse("];
  [ms appendString: @"events:"];
  [ms appendFormat: @"%@", __events];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_GetServiceAnnouncementsRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (BananaService_UserToken) token
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetServiceAnnouncementsRequest class]]) {
    return NO;
  }
  BananaService_GetServiceAnnouncementsRequest *other = (BananaService_GetServiceAnnouncementsRequest *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_UserToken *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (BananaAuthentication_UserToken *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_UserToken *fieldValue = [[BananaAuthentication_UserToken alloc] init];
          [fieldValue read: inProtocol];
          [self setToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetServiceAnnouncementsRequest"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRUCT fieldID: 1];
      [__token write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetServiceAnnouncementsRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", __token];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_GetServiceAnnouncementsResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.serviceAnnouncements = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithServiceAnnouncements: (NSMutableArray *) serviceAnnouncements
{
  self = [super init];
  __serviceAnnouncements = [serviceAnnouncements retain_stub];
  __serviceAnnouncements_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"serviceAnnouncements"])
  {
    __serviceAnnouncements = [[decoder decodeObjectForKey: @"serviceAnnouncements"] retain_stub];
    __serviceAnnouncements_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__serviceAnnouncements_isset)
  {
    [encoder encodeObject: __serviceAnnouncements forKey: @"serviceAnnouncements"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __serviceAnnouncements_isset ? 2654435761 : 0;
  if (__serviceAnnouncements_isset)
  {
    hash = (hash * 31) ^ [__serviceAnnouncements hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetServiceAnnouncementsResponse class]]) {
    return NO;
  }
  BananaService_GetServiceAnnouncementsResponse *other = (BananaService_GetServiceAnnouncementsResponse *)anObject;
  if ((__serviceAnnouncements_isset != other->__serviceAnnouncements_isset) ||
      (__serviceAnnouncements_isset && ((__serviceAnnouncements || other->__serviceAnnouncements) && ![__serviceAnnouncements isEqual:other->__serviceAnnouncements]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__serviceAnnouncements release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) serviceAnnouncements {
  return [[__serviceAnnouncements retain_stub] autorelease_stub];
}

- (void) setServiceAnnouncements: (NSMutableArray *) serviceAnnouncements {
  [serviceAnnouncements retain_stub];
  [__serviceAnnouncements release_stub];
  __serviceAnnouncements = serviceAnnouncements;
  __serviceAnnouncements_isset = YES;
}

- (BOOL) serviceAnnouncementsIsSet {
  return __serviceAnnouncements_isset;
}

- (void) unsetServiceAnnouncements {
  [__serviceAnnouncements release_stub];
  __serviceAnnouncements = nil;
  __serviceAnnouncements_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size65;
          [inProtocol readListBeginReturningElementType: NULL size: &_size65];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size65];
          int _i66;
          for (_i66 = 0; _i66 < _size65; ++_i66)
          {
            Banana_ServiceAnnouncement *_elem67 = [[Banana_ServiceAnnouncement alloc] init];
            [_elem67 read: inProtocol];
            [fieldValue addObject: _elem67];
            [_elem67 release_stub];
          }
          [inProtocol readListEnd];
          [self setServiceAnnouncements: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetServiceAnnouncementsResponse"];
  if (__serviceAnnouncements_isset) {
    if (__serviceAnnouncements != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceAnnouncements" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__serviceAnnouncements count]];
        int idx69;
        for (idx69 = 0; idx69 < [__serviceAnnouncements count]; idx69++)
        {
          [[__serviceAnnouncements objectAtIndex: idx69] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetServiceAnnouncementsResponse("];
  [ms appendString: @"serviceAnnouncements:"];
  [ms appendFormat: @"%@", __serviceAnnouncements];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_GetUserInfoRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (BananaService_UserToken) token userId: (BananaService_uuid) userId
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __userId = [userId retain_stub];
  __userId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [[decoder decodeObjectForKey: @"userId"] retain_stub];
    __userId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__userId_isset)
  {
    [encoder encodeObject: __userId forKey: @"userId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __userId_isset ? 2654435761 : 0;
  if (__userId_isset)
  {
    hash = (hash * 31) ^ [__userId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetUserInfoRequest class]]) {
    return NO;
  }
  BananaService_GetUserInfoRequest *other = (BananaService_GetUserInfoRequest *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__userId_isset != other->__userId_isset) ||
      (__userId_isset && ((__userId || other->__userId) && ![__userId isEqual:other->__userId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__userId release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_UserToken *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (BananaAuthentication_UserToken *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) userId {
  return [[__userId retain_stub] autorelease_stub];
}

- (void) setUserId: (NSString *) userId {
  [userId retain_stub];
  [__userId release_stub];
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  [__userId release_stub];
  __userId = nil;
  __userId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_UserToken *fieldValue = [[BananaAuthentication_UserToken alloc] init];
          [fieldValue read: inProtocol];
          [self setToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetUserInfoRequest"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRUCT fieldID: 1];
      [__token write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userId_isset) {
    if (__userId != nil) {
      [outProtocol writeFieldBeginWithName: @"userId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __userId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetUserInfoRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", __token];
  [ms appendString: @",userId:"];
  [ms appendFormat: @"\"%@\"", __userId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_GetUserInfoResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUserInfo: (BananaService_User) userInfo
{
  self = [super init];
  __userInfo = [userInfo retain_stub];
  __userInfo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"userInfo"])
  {
    __userInfo = [[decoder decodeObjectForKey: @"userInfo"] retain_stub];
    __userInfo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__userInfo_isset)
  {
    [encoder encodeObject: __userInfo forKey: @"userInfo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __userInfo_isset ? 2654435761 : 0;
  if (__userInfo_isset)
  {
    hash = (hash * 31) ^ [__userInfo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetUserInfoResponse class]]) {
    return NO;
  }
  BananaService_GetUserInfoResponse *other = (BananaService_GetUserInfoResponse *)anObject;
  if ((__userInfo_isset != other->__userInfo_isset) ||
      (__userInfo_isset && ((__userInfo || other->__userInfo) && ![__userInfo isEqual:other->__userInfo]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__userInfo release_stub];
  [super dealloc_stub];
}

- (Banana_User *) userInfo {
  return [[__userInfo retain_stub] autorelease_stub];
}

- (void) setUserInfo: (Banana_User *) userInfo {
  [userInfo retain_stub];
  [__userInfo release_stub];
  __userInfo = userInfo;
  __userInfo_isset = YES;
}

- (BOOL) userInfoIsSet {
  return __userInfo_isset;
}

- (void) unsetUserInfo {
  [__userInfo release_stub];
  __userInfo = nil;
  __userInfo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Banana_User *fieldValue = [[Banana_User alloc] init];
          [fieldValue read: inProtocol];
          [self setUserInfo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetUserInfoResponse"];
  if (__userInfo_isset) {
    if (__userInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"userInfo" type: TType_STRUCT fieldID: 1];
      [__userInfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetUserInfoResponse("];
  [ms appendString: @"userInfo:"];
  [ms appendFormat: @"%@", __userInfo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_SearchForApplicationsRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (BananaService_UserToken) token applicationName: (NSString *) applicationName organizationId: (BananaService_uuid) organizationId
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __applicationName = [applicationName retain_stub];
  __applicationName_isset = YES;
  __organizationId = [organizationId retain_stub];
  __organizationId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationName"])
  {
    __applicationName = [[decoder decodeObjectForKey: @"applicationName"] retain_stub];
    __applicationName_isset = YES;
  }
  if ([decoder containsValueForKey: @"organizationId"])
  {
    __organizationId = [[decoder decodeObjectForKey: @"organizationId"] retain_stub];
    __organizationId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__applicationName_isset)
  {
    [encoder encodeObject: __applicationName forKey: @"applicationName"];
  }
  if (__organizationId_isset)
  {
    [encoder encodeObject: __organizationId forKey: @"organizationId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __applicationName_isset ? 2654435761 : 0;
  if (__applicationName_isset)
  {
    hash = (hash * 31) ^ [__applicationName hash];
  }
  hash = (hash * 31) ^ __organizationId_isset ? 2654435761 : 0;
  if (__organizationId_isset)
  {
    hash = (hash * 31) ^ [__organizationId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SearchForApplicationsRequest class]]) {
    return NO;
  }
  BananaService_SearchForApplicationsRequest *other = (BananaService_SearchForApplicationsRequest *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__applicationName_isset != other->__applicationName_isset) ||
      (__applicationName_isset && ((__applicationName || other->__applicationName) && ![__applicationName isEqual:other->__applicationName]))) {
    return NO;
  }
  if ((__organizationId_isset != other->__organizationId_isset) ||
      (__organizationId_isset && ((__organizationId || other->__organizationId) && ![__organizationId isEqual:other->__organizationId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__applicationName release_stub];
  [__organizationId release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_UserToken *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (BananaAuthentication_UserToken *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) applicationName {
  return [[__applicationName retain_stub] autorelease_stub];
}

- (void) setApplicationName: (NSString *) applicationName {
  [applicationName retain_stub];
  [__applicationName release_stub];
  __applicationName = applicationName;
  __applicationName_isset = YES;
}

- (BOOL) applicationNameIsSet {
  return __applicationName_isset;
}

- (void) unsetApplicationName {
  [__applicationName release_stub];
  __applicationName = nil;
  __applicationName_isset = NO;
}

- (NSString *) organizationId {
  return [[__organizationId retain_stub] autorelease_stub];
}

- (void) setOrganizationId: (NSString *) organizationId {
  [organizationId retain_stub];
  [__organizationId release_stub];
  __organizationId = organizationId;
  __organizationId_isset = YES;
}

- (BOOL) organizationIdIsSet {
  return __organizationId_isset;
}

- (void) unsetOrganizationId {
  [__organizationId release_stub];
  __organizationId = nil;
  __organizationId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_UserToken *fieldValue = [[BananaAuthentication_UserToken alloc] init];
          [fieldValue read: inProtocol];
          [self setToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrganizationId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SearchForApplicationsRequest"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRUCT fieldID: 1];
      [__token write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationName_isset) {
    if (__applicationName != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __applicationName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__organizationId_isset) {
    if (__organizationId != nil) {
      [outProtocol writeFieldBeginWithName: @"organizationId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __organizationId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SearchForApplicationsRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"%@", __token];
  [ms appendString: @",applicationName:"];
  [ms appendFormat: @"\"%@\"", __applicationName];
  [ms appendString: @",organizationId:"];
  [ms appendFormat: @"\"%@\"", __organizationId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_SearchForApplicationsResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.applications = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithApplications: (NSMutableArray *) applications
{
  self = [super init];
  __applications = [applications retain_stub];
  __applications_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"applications"])
  {
    __applications = [[decoder decodeObjectForKey: @"applications"] retain_stub];
    __applications_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__applications_isset)
  {
    [encoder encodeObject: __applications forKey: @"applications"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __applications_isset ? 2654435761 : 0;
  if (__applications_isset)
  {
    hash = (hash * 31) ^ [__applications hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SearchForApplicationsResponse class]]) {
    return NO;
  }
  BananaService_SearchForApplicationsResponse *other = (BananaService_SearchForApplicationsResponse *)anObject;
  if ((__applications_isset != other->__applications_isset) ||
      (__applications_isset && ((__applications || other->__applications) && ![__applications isEqual:other->__applications]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__applications release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) applications {
  return [[__applications retain_stub] autorelease_stub];
}

- (void) setApplications: (NSMutableArray *) applications {
  [applications retain_stub];
  [__applications release_stub];
  __applications = applications;
  __applications_isset = YES;
}

- (BOOL) applicationsIsSet {
  return __applications_isset;
}

- (void) unsetApplications {
  [__applications release_stub];
  __applications = nil;
  __applications_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size70;
          [inProtocol readListBeginReturningElementType: NULL size: &_size70];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size70];
          int _i71;
          for (_i71 = 0; _i71 < _size70; ++_i71)
          {
            Banana_Application *_elem72 = [[Banana_Application alloc] init];
            [_elem72 read: inProtocol];
            [fieldValue addObject: _elem72];
            [_elem72 release_stub];
          }
          [inProtocol readListEnd];
          [self setApplications: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SearchForApplicationsResponse"];
  if (__applications_isset) {
    if (__applications != nil) {
      [outProtocol writeFieldBeginWithName: @"applications" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__applications count]];
        int idx74;
        for (idx74 = 0; idx74 < [__applications count]; idx74++)
        {
          [[__applications objectAtIndex: idx74] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SearchForApplicationsResponse("];
  [ms appendString: @"applications:"];
  [ms appendFormat: @"%@", __applications];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

static double BananaService_API_VERSION = 1.6;
static BananaService_int BananaService_SERVICE_PORT = 7000;
static BananaEndpoint_TcpEndpoint * BananaService_PRODUCTION_ENDPOINT;
static BananaEndpoint_TcpEndpoint * BananaService_BETA_ENDPOINT;
static Banana_Dimension * BananaService_MAX_APPLICATION_ICON_DIMENSION;
static Banana_Dimension * BananaService_MAX_PROFILE_IMAGE_DIMENSION;
static BananaService_int BananaService_MAX_APPLICATION_ICON_SIZE_IN_KILOBYTES = 100;
static BananaService_int BananaService_MAX_PROFILE_PICTURE_SIZE_IN_KILOBYTES = 100;
static BananaService_int BananaService_MAX_MESSAGE_LENGTH = 5000;

@implementation BananaService_BananaServiceConstants
+ (void) initialize {
  BananaService_PRODUCTION_ENDPOINT = [[BananaEndpoint_TcpEndpoint alloc] init];
  [BananaService_PRODUCTION_ENDPOINT setHostname:@"banana-srv.banana.aroma.tech"];
  [BananaService_PRODUCTION_ENDPOINT setPort:7000];

;
  BananaService_BETA_ENDPOINT = [[BananaEndpoint_TcpEndpoint alloc] init];
  [BananaService_BETA_ENDPOINT setHostname:@"banana-srv.beta.banana.aroma.tech"];
  [BananaService_BETA_ENDPOINT setPort:7000];

;
  BananaService_MAX_APPLICATION_ICON_DIMENSION = [[Banana_Dimension alloc] init];
  [BananaService_MAX_APPLICATION_ICON_DIMENSION setWidth:1024];
  [BananaService_MAX_APPLICATION_ICON_DIMENSION setHeight:1024];

;
  BananaService_MAX_PROFILE_IMAGE_DIMENSION = [[Banana_Dimension alloc] init];
  [BananaService_MAX_PROFILE_IMAGE_DIMENSION setWidth:1024];
  [BananaService_MAX_PROFILE_IMAGE_DIMENSION setHeight:1024];

;
}
+ (double) API_VERSION{
  return BananaService_API_VERSION;
}
+ (BananaService_int) SERVICE_PORT{
  return BananaService_SERVICE_PORT;
}
+ (BananaEndpoint_TcpEndpoint *) PRODUCTION_ENDPOINT{
  return BananaService_PRODUCTION_ENDPOINT;
}
+ (BananaEndpoint_TcpEndpoint *) BETA_ENDPOINT{
  return BananaService_BETA_ENDPOINT;
}
+ (Banana_Dimension *) MAX_APPLICATION_ICON_DIMENSION{
  return BananaService_MAX_APPLICATION_ICON_DIMENSION;
}
+ (Banana_Dimension *) MAX_PROFILE_IMAGE_DIMENSION{
  return BananaService_MAX_PROFILE_IMAGE_DIMENSION;
}
+ (BananaService_int) MAX_APPLICATION_ICON_SIZE_IN_KILOBYTES{
  return BananaService_MAX_APPLICATION_ICON_SIZE_IN_KILOBYTES;
}
+ (BananaService_int) MAX_PROFILE_PICTURE_SIZE_IN_KILOBYTES{
  return BananaService_MAX_PROFILE_PICTURE_SIZE_IN_KILOBYTES;
}
+ (BananaService_int) MAX_MESSAGE_LENGTH{
  return BananaService_MAX_MESSAGE_LENGTH;
}
@end

@interface BananaService_getApiVersion_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation BananaService_getApiVersion_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_getApiVersion_args class]]) {
    return NO;
  }
  BananaService_getApiVersion_args *other = (BananaService_getApiVersion_args *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getApiVersion_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_getApiVersion_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_GetApiVersion_result : NSObject <TBase, NSCoding> {
  double __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) double success;
#endif

- (id) init;
- (id) initWithSuccess: (double) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (double) success;
- (void) setSuccess: (double) success;
#endif
- (BOOL) successIsSet;

@end

@implementation BananaService_GetApiVersion_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (double) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeDoubleForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeDouble: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [@(__success) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetApiVersion_result class]]) {
    return NO;
  }
  BananaService_GetApiVersion_result *other = (BananaService_GetApiVersion_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && (__success != other->__success))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (double) success {
  return __success;
}

- (void) setSuccess: (double) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetApiVersion_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_DOUBLE fieldID: 0];
    [outProtocol writeDouble: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetApiVersion_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%f", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_provisionApplication_args : NSObject <TBase, NSCoding> {
  BananaService_ProvisionApplicationRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_ProvisionApplicationRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_ProvisionApplicationRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_ProvisionApplicationRequest *) request;
- (void) setRequest: (BananaService_ProvisionApplicationRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_provisionApplication_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_ProvisionApplicationRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_provisionApplication_args class]]) {
    return NO;
  }
  BananaService_provisionApplication_args *other = (BananaService_provisionApplication_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_ProvisionApplicationRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_ProvisionApplicationRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_ProvisionApplicationRequest *fieldValue = [[BananaService_ProvisionApplicationRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"provisionApplication_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_provisionApplication_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_ProvisionApplication_result : NSObject <TBase, NSCoding> {
  BananaService_ProvisionApplicationResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidTokenException __ex3;
  BananaService_ApplicationDoesNotExistException __ex4;
  BananaService_UnauthorizedException __ex5;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
  BOOL __ex4_isset;
  BOOL __ex5_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_ProvisionApplicationResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidTokenException ex3;
@property (nonatomic, retain, getter=ex4, setter=setEx4:) BananaService_ApplicationDoesNotExistException ex4;
@property (nonatomic, retain, getter=ex5, setter=setEx5:) BananaService_UnauthorizedException ex5;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_ProvisionApplicationResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3 ex4: (BananaService_ApplicationDoesNotExistException) ex4 ex5: (BananaService_UnauthorizedException) ex5;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_ProvisionApplicationResponse *) success;
- (void) setSuccess: (BananaService_ProvisionApplicationResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidTokenException) ex3;
- (void) setEx3: (BananaService_InvalidTokenException) ex3;
#endif
- (BOOL) ex3IsSet;

#if !__has_feature(objc_arc)
- (BananaService_ApplicationDoesNotExistException) ex4;
- (void) setEx4: (BananaService_ApplicationDoesNotExistException) ex4;
#endif
- (BOOL) ex4IsSet;

#if !__has_feature(objc_arc)
- (BananaService_UnauthorizedException) ex5;
- (void) setEx5: (BananaService_UnauthorizedException) ex5;
#endif
- (BOOL) ex5IsSet;

@end

@implementation BananaService_ProvisionApplication_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_ProvisionApplicationResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3 ex4: (BananaService_ApplicationDoesNotExistException) ex4 ex5: (BananaService_UnauthorizedException) ex5
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  __ex4 = [ex4 retain_stub];
  __ex4_isset = YES;
  __ex5 = [ex5 retain_stub];
  __ex5_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex4"])
  {
    __ex4 = [[decoder decodeObjectForKey: @"ex4"] retain_stub];
    __ex4_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex5"])
  {
    __ex5 = [[decoder decodeObjectForKey: @"ex5"] retain_stub];
    __ex5_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
  if (__ex4_isset)
  {
    [encoder encodeObject: __ex4 forKey: @"ex4"];
  }
  if (__ex5_isset)
  {
    [encoder encodeObject: __ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  hash = (hash * 31) ^ __ex4_isset ? 2654435761 : 0;
  if (__ex4_isset)
  {
    hash = (hash * 31) ^ [__ex4 hash];
  }
  hash = (hash * 31) ^ __ex5_isset ? 2654435761 : 0;
  if (__ex5_isset)
  {
    hash = (hash * 31) ^ [__ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_ProvisionApplication_result class]]) {
    return NO;
  }
  BananaService_ProvisionApplication_result *other = (BananaService_ProvisionApplication_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  if ((__ex4_isset != other->__ex4_isset) ||
      (__ex4_isset && ((__ex4 || other->__ex4) && ![__ex4 isEqual:other->__ex4]))) {
    return NO;
  }
  if ((__ex5_isset != other->__ex5_isset) ||
      (__ex5_isset && ((__ex5 || other->__ex5) && ![__ex5 isEqual:other->__ex5]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [__ex4 release_stub];
  [__ex5 release_stub];
  [super dealloc_stub];
}

- (BananaService_ProvisionApplicationResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_ProvisionApplicationResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidTokenException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidTokenException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (BananaException_ApplicationDoesNotExistException *) ex4 {
  return [[__ex4 retain_stub] autorelease_stub];
}

- (void) setEx4: (BananaException_ApplicationDoesNotExistException *) ex4 {
  [ex4 retain_stub];
  [__ex4 release_stub];
  __ex4 = ex4;
  __ex4_isset = YES;
}

- (BOOL) ex4IsSet {
  return __ex4_isset;
}

- (void) unsetEx4 {
  [__ex4 release_stub];
  __ex4 = nil;
  __ex4_isset = NO;
}

- (BananaException_UnauthorizedException *) ex5 {
  return [[__ex5 retain_stub] autorelease_stub];
}

- (void) setEx5: (BananaException_UnauthorizedException *) ex5 {
  [ex5 retain_stub];
  [__ex5 release_stub];
  __ex5 = ex5;
  __ex5_isset = YES;
}

- (BOOL) ex5IsSet {
  return __ex5_isset;
}

- (void) unsetEx5 {
  [__ex5 release_stub];
  __ex5 = nil;
  __ex5_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_ProvisionApplicationResponse *fieldValue = [[BananaService_ProvisionApplicationResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidTokenException *fieldValue = [[BananaException_InvalidTokenException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          BananaException_ApplicationDoesNotExistException *fieldValue = [[BananaException_ApplicationDoesNotExistException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx4: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          BananaException_UnauthorizedException *fieldValue = [[BananaException_UnauthorizedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx5: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ProvisionApplication_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex4_isset) {
    if (__ex4 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex4" type: TType_STRUCT fieldID: 4];
      [__ex4 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex5_isset) {
    if (__ex5 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex5" type: TType_STRUCT fieldID: 5];
      [__ex5 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_ProvisionApplication_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", __ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", __ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_regenerateToken_args : NSObject <TBase, NSCoding> {
  BananaService_RegenerateApplicationTokenRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_RegenerateApplicationTokenRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_RegenerateApplicationTokenRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_RegenerateApplicationTokenRequest *) request;
- (void) setRequest: (BananaService_RegenerateApplicationTokenRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_regenerateToken_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_RegenerateApplicationTokenRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_regenerateToken_args class]]) {
    return NO;
  }
  BananaService_regenerateToken_args *other = (BananaService_regenerateToken_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_RegenerateApplicationTokenRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_RegenerateApplicationTokenRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_RegenerateApplicationTokenRequest *fieldValue = [[BananaService_RegenerateApplicationTokenRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"regenerateToken_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_regenerateToken_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_RegenerateToken_result : NSObject <TBase, NSCoding> {
  BananaService_RegenerateApplicationTokenResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidTokenException __ex3;
  BananaService_ApplicationDoesNotExistException __ex4;
  BananaService_UnauthorizedException __ex5;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
  BOOL __ex4_isset;
  BOOL __ex5_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_RegenerateApplicationTokenResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidTokenException ex3;
@property (nonatomic, retain, getter=ex4, setter=setEx4:) BananaService_ApplicationDoesNotExistException ex4;
@property (nonatomic, retain, getter=ex5, setter=setEx5:) BananaService_UnauthorizedException ex5;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_RegenerateApplicationTokenResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3 ex4: (BananaService_ApplicationDoesNotExistException) ex4 ex5: (BananaService_UnauthorizedException) ex5;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_RegenerateApplicationTokenResponse *) success;
- (void) setSuccess: (BananaService_RegenerateApplicationTokenResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidTokenException) ex3;
- (void) setEx3: (BananaService_InvalidTokenException) ex3;
#endif
- (BOOL) ex3IsSet;

#if !__has_feature(objc_arc)
- (BananaService_ApplicationDoesNotExistException) ex4;
- (void) setEx4: (BananaService_ApplicationDoesNotExistException) ex4;
#endif
- (BOOL) ex4IsSet;

#if !__has_feature(objc_arc)
- (BananaService_UnauthorizedException) ex5;
- (void) setEx5: (BananaService_UnauthorizedException) ex5;
#endif
- (BOOL) ex5IsSet;

@end

@implementation BananaService_RegenerateToken_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_RegenerateApplicationTokenResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3 ex4: (BananaService_ApplicationDoesNotExistException) ex4 ex5: (BananaService_UnauthorizedException) ex5
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  __ex4 = [ex4 retain_stub];
  __ex4_isset = YES;
  __ex5 = [ex5 retain_stub];
  __ex5_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex4"])
  {
    __ex4 = [[decoder decodeObjectForKey: @"ex4"] retain_stub];
    __ex4_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex5"])
  {
    __ex5 = [[decoder decodeObjectForKey: @"ex5"] retain_stub];
    __ex5_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
  if (__ex4_isset)
  {
    [encoder encodeObject: __ex4 forKey: @"ex4"];
  }
  if (__ex5_isset)
  {
    [encoder encodeObject: __ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  hash = (hash * 31) ^ __ex4_isset ? 2654435761 : 0;
  if (__ex4_isset)
  {
    hash = (hash * 31) ^ [__ex4 hash];
  }
  hash = (hash * 31) ^ __ex5_isset ? 2654435761 : 0;
  if (__ex5_isset)
  {
    hash = (hash * 31) ^ [__ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_RegenerateToken_result class]]) {
    return NO;
  }
  BananaService_RegenerateToken_result *other = (BananaService_RegenerateToken_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  if ((__ex4_isset != other->__ex4_isset) ||
      (__ex4_isset && ((__ex4 || other->__ex4) && ![__ex4 isEqual:other->__ex4]))) {
    return NO;
  }
  if ((__ex5_isset != other->__ex5_isset) ||
      (__ex5_isset && ((__ex5 || other->__ex5) && ![__ex5 isEqual:other->__ex5]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [__ex4 release_stub];
  [__ex5 release_stub];
  [super dealloc_stub];
}

- (BananaService_RegenerateApplicationTokenResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_RegenerateApplicationTokenResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidTokenException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidTokenException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (BananaException_ApplicationDoesNotExistException *) ex4 {
  return [[__ex4 retain_stub] autorelease_stub];
}

- (void) setEx4: (BananaException_ApplicationDoesNotExistException *) ex4 {
  [ex4 retain_stub];
  [__ex4 release_stub];
  __ex4 = ex4;
  __ex4_isset = YES;
}

- (BOOL) ex4IsSet {
  return __ex4_isset;
}

- (void) unsetEx4 {
  [__ex4 release_stub];
  __ex4 = nil;
  __ex4_isset = NO;
}

- (BananaException_UnauthorizedException *) ex5 {
  return [[__ex5 retain_stub] autorelease_stub];
}

- (void) setEx5: (BananaException_UnauthorizedException *) ex5 {
  [ex5 retain_stub];
  [__ex5 release_stub];
  __ex5 = ex5;
  __ex5_isset = YES;
}

- (BOOL) ex5IsSet {
  return __ex5_isset;
}

- (void) unsetEx5 {
  [__ex5 release_stub];
  __ex5 = nil;
  __ex5_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_RegenerateApplicationTokenResponse *fieldValue = [[BananaService_RegenerateApplicationTokenResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidTokenException *fieldValue = [[BananaException_InvalidTokenException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          BananaException_ApplicationDoesNotExistException *fieldValue = [[BananaException_ApplicationDoesNotExistException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx4: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          BananaException_UnauthorizedException *fieldValue = [[BananaException_UnauthorizedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx5: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegenerateToken_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex4_isset) {
    if (__ex4 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex4" type: TType_STRUCT fieldID: 4];
      [__ex4 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex5_isset) {
    if (__ex5 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex5" type: TType_STRUCT fieldID: 5];
      [__ex5 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_RegenerateToken_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", __ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", __ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_registerHealthCheck_args : NSObject <TBase, NSCoding> {
  BananaService_RegisterHealthCheckRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_RegisterHealthCheckRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_RegisterHealthCheckRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_RegisterHealthCheckRequest *) request;
- (void) setRequest: (BananaService_RegisterHealthCheckRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_registerHealthCheck_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_RegisterHealthCheckRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_registerHealthCheck_args class]]) {
    return NO;
  }
  BananaService_registerHealthCheck_args *other = (BananaService_registerHealthCheck_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_RegisterHealthCheckRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_RegisterHealthCheckRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_RegisterHealthCheckRequest *fieldValue = [[BananaService_RegisterHealthCheckRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"registerHealthCheck_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_registerHealthCheck_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_RegisterHealthCheck_result : NSObject <TBase, NSCoding> {
  BananaService_RegisterHealthCheckResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidTokenException __ex3;
  BananaService_ApplicationDoesNotExistException __ex4;
  BananaService_UnauthorizedException __ex5;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
  BOOL __ex4_isset;
  BOOL __ex5_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_RegisterHealthCheckResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidTokenException ex3;
@property (nonatomic, retain, getter=ex4, setter=setEx4:) BananaService_ApplicationDoesNotExistException ex4;
@property (nonatomic, retain, getter=ex5, setter=setEx5:) BananaService_UnauthorizedException ex5;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_RegisterHealthCheckResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3 ex4: (BananaService_ApplicationDoesNotExistException) ex4 ex5: (BananaService_UnauthorizedException) ex5;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_RegisterHealthCheckResponse *) success;
- (void) setSuccess: (BananaService_RegisterHealthCheckResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidTokenException) ex3;
- (void) setEx3: (BananaService_InvalidTokenException) ex3;
#endif
- (BOOL) ex3IsSet;

#if !__has_feature(objc_arc)
- (BananaService_ApplicationDoesNotExistException) ex4;
- (void) setEx4: (BananaService_ApplicationDoesNotExistException) ex4;
#endif
- (BOOL) ex4IsSet;

#if !__has_feature(objc_arc)
- (BananaService_UnauthorizedException) ex5;
- (void) setEx5: (BananaService_UnauthorizedException) ex5;
#endif
- (BOOL) ex5IsSet;

@end

@implementation BananaService_RegisterHealthCheck_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_RegisterHealthCheckResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3 ex4: (BananaService_ApplicationDoesNotExistException) ex4 ex5: (BananaService_UnauthorizedException) ex5
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  __ex4 = [ex4 retain_stub];
  __ex4_isset = YES;
  __ex5 = [ex5 retain_stub];
  __ex5_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex4"])
  {
    __ex4 = [[decoder decodeObjectForKey: @"ex4"] retain_stub];
    __ex4_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex5"])
  {
    __ex5 = [[decoder decodeObjectForKey: @"ex5"] retain_stub];
    __ex5_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
  if (__ex4_isset)
  {
    [encoder encodeObject: __ex4 forKey: @"ex4"];
  }
  if (__ex5_isset)
  {
    [encoder encodeObject: __ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  hash = (hash * 31) ^ __ex4_isset ? 2654435761 : 0;
  if (__ex4_isset)
  {
    hash = (hash * 31) ^ [__ex4 hash];
  }
  hash = (hash * 31) ^ __ex5_isset ? 2654435761 : 0;
  if (__ex5_isset)
  {
    hash = (hash * 31) ^ [__ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_RegisterHealthCheck_result class]]) {
    return NO;
  }
  BananaService_RegisterHealthCheck_result *other = (BananaService_RegisterHealthCheck_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  if ((__ex4_isset != other->__ex4_isset) ||
      (__ex4_isset && ((__ex4 || other->__ex4) && ![__ex4 isEqual:other->__ex4]))) {
    return NO;
  }
  if ((__ex5_isset != other->__ex5_isset) ||
      (__ex5_isset && ((__ex5 || other->__ex5) && ![__ex5 isEqual:other->__ex5]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [__ex4 release_stub];
  [__ex5 release_stub];
  [super dealloc_stub];
}

- (BananaService_RegisterHealthCheckResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_RegisterHealthCheckResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidTokenException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidTokenException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (BananaException_ApplicationDoesNotExistException *) ex4 {
  return [[__ex4 retain_stub] autorelease_stub];
}

- (void) setEx4: (BananaException_ApplicationDoesNotExistException *) ex4 {
  [ex4 retain_stub];
  [__ex4 release_stub];
  __ex4 = ex4;
  __ex4_isset = YES;
}

- (BOOL) ex4IsSet {
  return __ex4_isset;
}

- (void) unsetEx4 {
  [__ex4 release_stub];
  __ex4 = nil;
  __ex4_isset = NO;
}

- (BananaException_UnauthorizedException *) ex5 {
  return [[__ex5 retain_stub] autorelease_stub];
}

- (void) setEx5: (BananaException_UnauthorizedException *) ex5 {
  [ex5 retain_stub];
  [__ex5 release_stub];
  __ex5 = ex5;
  __ex5_isset = YES;
}

- (BOOL) ex5IsSet {
  return __ex5_isset;
}

- (void) unsetEx5 {
  [__ex5 release_stub];
  __ex5 = nil;
  __ex5_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_RegisterHealthCheckResponse *fieldValue = [[BananaService_RegisterHealthCheckResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidTokenException *fieldValue = [[BananaException_InvalidTokenException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          BananaException_ApplicationDoesNotExistException *fieldValue = [[BananaException_ApplicationDoesNotExistException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx4: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          BananaException_UnauthorizedException *fieldValue = [[BananaException_UnauthorizedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx5: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegisterHealthCheck_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex4_isset) {
    if (__ex4 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex4" type: TType_STRUCT fieldID: 4];
      [__ex4 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex5_isset) {
    if (__ex5 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex5" type: TType_STRUCT fieldID: 5];
      [__ex5 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_RegisterHealthCheck_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", __ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", __ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_removeSavedChannel_args : NSObject <TBase, NSCoding> {
  BananaService_RemoveSavedChannelRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_RemoveSavedChannelRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_RemoveSavedChannelRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_RemoveSavedChannelRequest *) request;
- (void) setRequest: (BananaService_RemoveSavedChannelRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_removeSavedChannel_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_RemoveSavedChannelRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_removeSavedChannel_args class]]) {
    return NO;
  }
  BananaService_removeSavedChannel_args *other = (BananaService_removeSavedChannel_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_RemoveSavedChannelRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_RemoveSavedChannelRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_RemoveSavedChannelRequest *fieldValue = [[BananaService_RemoveSavedChannelRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"removeSavedChannel_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_removeSavedChannel_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_RemoveSavedChannel_result : NSObject <TBase, NSCoding> {
  BananaService_RemoveSavedChannelResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidTokenException __ex3;
  BananaService_UnauthorizedException __ex4;
  BananaService_ChannelDoesNotExistException __ex5;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
  BOOL __ex4_isset;
  BOOL __ex5_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_RemoveSavedChannelResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidTokenException ex3;
@property (nonatomic, retain, getter=ex4, setter=setEx4:) BananaService_UnauthorizedException ex4;
@property (nonatomic, retain, getter=ex5, setter=setEx5:) BananaService_ChannelDoesNotExistException ex5;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_RemoveSavedChannelResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3 ex4: (BananaService_UnauthorizedException) ex4 ex5: (BananaService_ChannelDoesNotExistException) ex5;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_RemoveSavedChannelResponse *) success;
- (void) setSuccess: (BananaService_RemoveSavedChannelResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidTokenException) ex3;
- (void) setEx3: (BananaService_InvalidTokenException) ex3;
#endif
- (BOOL) ex3IsSet;

#if !__has_feature(objc_arc)
- (BananaService_UnauthorizedException) ex4;
- (void) setEx4: (BananaService_UnauthorizedException) ex4;
#endif
- (BOOL) ex4IsSet;

#if !__has_feature(objc_arc)
- (BananaService_ChannelDoesNotExistException) ex5;
- (void) setEx5: (BananaService_ChannelDoesNotExistException) ex5;
#endif
- (BOOL) ex5IsSet;

@end

@implementation BananaService_RemoveSavedChannel_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_RemoveSavedChannelResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3 ex4: (BananaService_UnauthorizedException) ex4 ex5: (BananaService_ChannelDoesNotExistException) ex5
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  __ex4 = [ex4 retain_stub];
  __ex4_isset = YES;
  __ex5 = [ex5 retain_stub];
  __ex5_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex4"])
  {
    __ex4 = [[decoder decodeObjectForKey: @"ex4"] retain_stub];
    __ex4_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex5"])
  {
    __ex5 = [[decoder decodeObjectForKey: @"ex5"] retain_stub];
    __ex5_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
  if (__ex4_isset)
  {
    [encoder encodeObject: __ex4 forKey: @"ex4"];
  }
  if (__ex5_isset)
  {
    [encoder encodeObject: __ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  hash = (hash * 31) ^ __ex4_isset ? 2654435761 : 0;
  if (__ex4_isset)
  {
    hash = (hash * 31) ^ [__ex4 hash];
  }
  hash = (hash * 31) ^ __ex5_isset ? 2654435761 : 0;
  if (__ex5_isset)
  {
    hash = (hash * 31) ^ [__ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_RemoveSavedChannel_result class]]) {
    return NO;
  }
  BananaService_RemoveSavedChannel_result *other = (BananaService_RemoveSavedChannel_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  if ((__ex4_isset != other->__ex4_isset) ||
      (__ex4_isset && ((__ex4 || other->__ex4) && ![__ex4 isEqual:other->__ex4]))) {
    return NO;
  }
  if ((__ex5_isset != other->__ex5_isset) ||
      (__ex5_isset && ((__ex5 || other->__ex5) && ![__ex5 isEqual:other->__ex5]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [__ex4 release_stub];
  [__ex5 release_stub];
  [super dealloc_stub];
}

- (BananaService_RemoveSavedChannelResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_RemoveSavedChannelResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidTokenException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidTokenException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (BananaException_UnauthorizedException *) ex4 {
  return [[__ex4 retain_stub] autorelease_stub];
}

- (void) setEx4: (BananaException_UnauthorizedException *) ex4 {
  [ex4 retain_stub];
  [__ex4 release_stub];
  __ex4 = ex4;
  __ex4_isset = YES;
}

- (BOOL) ex4IsSet {
  return __ex4_isset;
}

- (void) unsetEx4 {
  [__ex4 release_stub];
  __ex4 = nil;
  __ex4_isset = NO;
}

- (BananaException_ChannelDoesNotExistException *) ex5 {
  return [[__ex5 retain_stub] autorelease_stub];
}

- (void) setEx5: (BananaException_ChannelDoesNotExistException *) ex5 {
  [ex5 retain_stub];
  [__ex5 release_stub];
  __ex5 = ex5;
  __ex5_isset = YES;
}

- (BOOL) ex5IsSet {
  return __ex5_isset;
}

- (void) unsetEx5 {
  [__ex5 release_stub];
  __ex5 = nil;
  __ex5_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_RemoveSavedChannelResponse *fieldValue = [[BananaService_RemoveSavedChannelResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidTokenException *fieldValue = [[BananaException_InvalidTokenException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          BananaException_UnauthorizedException *fieldValue = [[BananaException_UnauthorizedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx4: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          BananaException_ChannelDoesNotExistException *fieldValue = [[BananaException_ChannelDoesNotExistException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx5: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RemoveSavedChannel_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex4_isset) {
    if (__ex4 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex4" type: TType_STRUCT fieldID: 4];
      [__ex4 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex5_isset) {
    if (__ex5 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex5" type: TType_STRUCT fieldID: 5];
      [__ex5 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_RemoveSavedChannel_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", __ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", __ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_renewApplicationToken_args : NSObject <TBase, NSCoding> {
  BananaService_RenewApplicationTokenRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_RenewApplicationTokenRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_RenewApplicationTokenRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_RenewApplicationTokenRequest *) request;
- (void) setRequest: (BananaService_RenewApplicationTokenRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_renewApplicationToken_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_RenewApplicationTokenRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_renewApplicationToken_args class]]) {
    return NO;
  }
  BananaService_renewApplicationToken_args *other = (BananaService_renewApplicationToken_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_RenewApplicationTokenRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_RenewApplicationTokenRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_RenewApplicationTokenRequest *fieldValue = [[BananaService_RenewApplicationTokenRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"renewApplicationToken_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_renewApplicationToken_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_RenewApplicationToken_result : NSObject <TBase, NSCoding> {
  BananaService_RenewApplicationTokenResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidTokenException __ex3;
  BananaService_ApplicationDoesNotExistException __ex4;
  BananaService_UnauthorizedException __ex5;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
  BOOL __ex4_isset;
  BOOL __ex5_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_RenewApplicationTokenResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidTokenException ex3;
@property (nonatomic, retain, getter=ex4, setter=setEx4:) BananaService_ApplicationDoesNotExistException ex4;
@property (nonatomic, retain, getter=ex5, setter=setEx5:) BananaService_UnauthorizedException ex5;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_RenewApplicationTokenResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3 ex4: (BananaService_ApplicationDoesNotExistException) ex4 ex5: (BananaService_UnauthorizedException) ex5;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_RenewApplicationTokenResponse *) success;
- (void) setSuccess: (BananaService_RenewApplicationTokenResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidTokenException) ex3;
- (void) setEx3: (BananaService_InvalidTokenException) ex3;
#endif
- (BOOL) ex3IsSet;

#if !__has_feature(objc_arc)
- (BananaService_ApplicationDoesNotExistException) ex4;
- (void) setEx4: (BananaService_ApplicationDoesNotExistException) ex4;
#endif
- (BOOL) ex4IsSet;

#if !__has_feature(objc_arc)
- (BananaService_UnauthorizedException) ex5;
- (void) setEx5: (BananaService_UnauthorizedException) ex5;
#endif
- (BOOL) ex5IsSet;

@end

@implementation BananaService_RenewApplicationToken_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_RenewApplicationTokenResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3 ex4: (BananaService_ApplicationDoesNotExistException) ex4 ex5: (BananaService_UnauthorizedException) ex5
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  __ex4 = [ex4 retain_stub];
  __ex4_isset = YES;
  __ex5 = [ex5 retain_stub];
  __ex5_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex4"])
  {
    __ex4 = [[decoder decodeObjectForKey: @"ex4"] retain_stub];
    __ex4_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex5"])
  {
    __ex5 = [[decoder decodeObjectForKey: @"ex5"] retain_stub];
    __ex5_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
  if (__ex4_isset)
  {
    [encoder encodeObject: __ex4 forKey: @"ex4"];
  }
  if (__ex5_isset)
  {
    [encoder encodeObject: __ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  hash = (hash * 31) ^ __ex4_isset ? 2654435761 : 0;
  if (__ex4_isset)
  {
    hash = (hash * 31) ^ [__ex4 hash];
  }
  hash = (hash * 31) ^ __ex5_isset ? 2654435761 : 0;
  if (__ex5_isset)
  {
    hash = (hash * 31) ^ [__ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_RenewApplicationToken_result class]]) {
    return NO;
  }
  BananaService_RenewApplicationToken_result *other = (BananaService_RenewApplicationToken_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  if ((__ex4_isset != other->__ex4_isset) ||
      (__ex4_isset && ((__ex4 || other->__ex4) && ![__ex4 isEqual:other->__ex4]))) {
    return NO;
  }
  if ((__ex5_isset != other->__ex5_isset) ||
      (__ex5_isset && ((__ex5 || other->__ex5) && ![__ex5 isEqual:other->__ex5]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [__ex4 release_stub];
  [__ex5 release_stub];
  [super dealloc_stub];
}

- (BananaService_RenewApplicationTokenResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_RenewApplicationTokenResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidTokenException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidTokenException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (BananaException_ApplicationDoesNotExistException *) ex4 {
  return [[__ex4 retain_stub] autorelease_stub];
}

- (void) setEx4: (BananaException_ApplicationDoesNotExistException *) ex4 {
  [ex4 retain_stub];
  [__ex4 release_stub];
  __ex4 = ex4;
  __ex4_isset = YES;
}

- (BOOL) ex4IsSet {
  return __ex4_isset;
}

- (void) unsetEx4 {
  [__ex4 release_stub];
  __ex4 = nil;
  __ex4_isset = NO;
}

- (BananaException_UnauthorizedException *) ex5 {
  return [[__ex5 retain_stub] autorelease_stub];
}

- (void) setEx5: (BananaException_UnauthorizedException *) ex5 {
  [ex5 retain_stub];
  [__ex5 release_stub];
  __ex5 = ex5;
  __ex5_isset = YES;
}

- (BOOL) ex5IsSet {
  return __ex5_isset;
}

- (void) unsetEx5 {
  [__ex5 release_stub];
  __ex5 = nil;
  __ex5_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_RenewApplicationTokenResponse *fieldValue = [[BananaService_RenewApplicationTokenResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidTokenException *fieldValue = [[BananaException_InvalidTokenException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          BananaException_ApplicationDoesNotExistException *fieldValue = [[BananaException_ApplicationDoesNotExistException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx4: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          BananaException_UnauthorizedException *fieldValue = [[BananaException_UnauthorizedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx5: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RenewApplicationToken_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex4_isset) {
    if (__ex4 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex4" type: TType_STRUCT fieldID: 4];
      [__ex4 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex5_isset) {
    if (__ex5 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex5" type: TType_STRUCT fieldID: 5];
      [__ex5 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_RenewApplicationToken_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", __ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", __ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_saveChannel_args : NSObject <TBase, NSCoding> {
  BananaService_SaveChannelRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_SaveChannelRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_SaveChannelRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_SaveChannelRequest *) request;
- (void) setRequest: (BananaService_SaveChannelRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_saveChannel_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_SaveChannelRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_saveChannel_args class]]) {
    return NO;
  }
  BananaService_saveChannel_args *other = (BananaService_saveChannel_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_SaveChannelRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_SaveChannelRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_SaveChannelRequest *fieldValue = [[BananaService_SaveChannelRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"saveChannel_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_saveChannel_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_SaveChannel_result : NSObject <TBase, NSCoding> {
  BananaService_SaveChannelResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidTokenException __ex3;
  BananaService_UnauthorizedException __ex4;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
  BOOL __ex4_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_SaveChannelResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidTokenException ex3;
@property (nonatomic, retain, getter=ex4, setter=setEx4:) BananaService_UnauthorizedException ex4;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_SaveChannelResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3 ex4: (BananaService_UnauthorizedException) ex4;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_SaveChannelResponse *) success;
- (void) setSuccess: (BananaService_SaveChannelResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidTokenException) ex3;
- (void) setEx3: (BananaService_InvalidTokenException) ex3;
#endif
- (BOOL) ex3IsSet;

#if !__has_feature(objc_arc)
- (BananaService_UnauthorizedException) ex4;
- (void) setEx4: (BananaService_UnauthorizedException) ex4;
#endif
- (BOOL) ex4IsSet;

@end

@implementation BananaService_SaveChannel_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_SaveChannelResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3 ex4: (BananaService_UnauthorizedException) ex4
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  __ex4 = [ex4 retain_stub];
  __ex4_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex4"])
  {
    __ex4 = [[decoder decodeObjectForKey: @"ex4"] retain_stub];
    __ex4_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
  if (__ex4_isset)
  {
    [encoder encodeObject: __ex4 forKey: @"ex4"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  hash = (hash * 31) ^ __ex4_isset ? 2654435761 : 0;
  if (__ex4_isset)
  {
    hash = (hash * 31) ^ [__ex4 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SaveChannel_result class]]) {
    return NO;
  }
  BananaService_SaveChannel_result *other = (BananaService_SaveChannel_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  if ((__ex4_isset != other->__ex4_isset) ||
      (__ex4_isset && ((__ex4 || other->__ex4) && ![__ex4 isEqual:other->__ex4]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [__ex4 release_stub];
  [super dealloc_stub];
}

- (BananaService_SaveChannelResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_SaveChannelResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidTokenException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidTokenException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (BananaException_UnauthorizedException *) ex4 {
  return [[__ex4 retain_stub] autorelease_stub];
}

- (void) setEx4: (BananaException_UnauthorizedException *) ex4 {
  [ex4 retain_stub];
  [__ex4 release_stub];
  __ex4 = ex4;
  __ex4_isset = YES;
}

- (BOOL) ex4IsSet {
  return __ex4_isset;
}

- (void) unsetEx4 {
  [__ex4 release_stub];
  __ex4 = nil;
  __ex4_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_SaveChannelResponse *fieldValue = [[BananaService_SaveChannelResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidTokenException *fieldValue = [[BananaException_InvalidTokenException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          BananaException_UnauthorizedException *fieldValue = [[BananaException_UnauthorizedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx4: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SaveChannel_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex4_isset) {
    if (__ex4 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex4" type: TType_STRUCT fieldID: 4];
      [__ex4 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SaveChannel_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", __ex4];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_signIn_args : NSObject <TBase, NSCoding> {
  BananaService_SignInRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_SignInRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_SignInRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_SignInRequest *) request;
- (void) setRequest: (BananaService_SignInRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_signIn_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_SignInRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_signIn_args class]]) {
    return NO;
  }
  BananaService_signIn_args *other = (BananaService_signIn_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_SignInRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_SignInRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_SignInRequest *fieldValue = [[BananaService_SignInRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"signIn_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_signIn_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_SignIn_result : NSObject <TBase, NSCoding> {
  BananaService_SignInResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidCredentialsException __ex3;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_SignInResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidCredentialsException ex3;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_SignInResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_SignInResponse *) success;
- (void) setSuccess: (BananaService_SignInResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidCredentialsException) ex3;
- (void) setEx3: (BananaService_InvalidCredentialsException) ex3;
#endif
- (BOOL) ex3IsSet;

@end

@implementation BananaService_SignIn_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_SignInResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SignIn_result class]]) {
    return NO;
  }
  BananaService_SignIn_result *other = (BananaService_SignIn_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [super dealloc_stub];
}

- (BananaService_SignInResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_SignInResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidCredentialsException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidCredentialsException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_SignInResponse *fieldValue = [[BananaService_SignInResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidCredentialsException *fieldValue = [[BananaException_InvalidCredentialsException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SignIn_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SignIn_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_signUp_args : NSObject <TBase, NSCoding> {
  BananaService_SignUpRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_SignUpRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_SignUpRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_SignUpRequest *) request;
- (void) setRequest: (BananaService_SignUpRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_signUp_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_SignUpRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_signUp_args class]]) {
    return NO;
  }
  BananaService_signUp_args *other = (BananaService_signUp_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_SignUpRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_SignUpRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_SignUpRequest *fieldValue = [[BananaService_SignUpRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"signUp_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_signUp_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_SignUp_result : NSObject <TBase, NSCoding> {
  BananaService_SignUpResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidCredentialsException __ex3;
  BananaService_AccountAlreadyExistsException __ex4;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
  BOOL __ex4_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_SignUpResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidCredentialsException ex3;
@property (nonatomic, retain, getter=ex4, setter=setEx4:) BananaService_AccountAlreadyExistsException ex4;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_SignUpResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3 ex4: (BananaService_AccountAlreadyExistsException) ex4;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_SignUpResponse *) success;
- (void) setSuccess: (BananaService_SignUpResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidCredentialsException) ex3;
- (void) setEx3: (BananaService_InvalidCredentialsException) ex3;
#endif
- (BOOL) ex3IsSet;

#if !__has_feature(objc_arc)
- (BananaService_AccountAlreadyExistsException) ex4;
- (void) setEx4: (BananaService_AccountAlreadyExistsException) ex4;
#endif
- (BOOL) ex4IsSet;

@end

@implementation BananaService_SignUp_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_SignUpResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3 ex4: (BananaService_AccountAlreadyExistsException) ex4
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  __ex4 = [ex4 retain_stub];
  __ex4_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex4"])
  {
    __ex4 = [[decoder decodeObjectForKey: @"ex4"] retain_stub];
    __ex4_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
  if (__ex4_isset)
  {
    [encoder encodeObject: __ex4 forKey: @"ex4"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  hash = (hash * 31) ^ __ex4_isset ? 2654435761 : 0;
  if (__ex4_isset)
  {
    hash = (hash * 31) ^ [__ex4 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SignUp_result class]]) {
    return NO;
  }
  BananaService_SignUp_result *other = (BananaService_SignUp_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  if ((__ex4_isset != other->__ex4_isset) ||
      (__ex4_isset && ((__ex4 || other->__ex4) && ![__ex4 isEqual:other->__ex4]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [__ex4 release_stub];
  [super dealloc_stub];
}

- (BananaService_SignUpResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_SignUpResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidCredentialsException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidCredentialsException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (BananaException_AccountAlreadyExistsException *) ex4 {
  return [[__ex4 retain_stub] autorelease_stub];
}

- (void) setEx4: (BananaException_AccountAlreadyExistsException *) ex4 {
  [ex4 retain_stub];
  [__ex4 release_stub];
  __ex4 = ex4;
  __ex4_isset = YES;
}

- (BOOL) ex4IsSet {
  return __ex4_isset;
}

- (void) unsetEx4 {
  [__ex4 release_stub];
  __ex4 = nil;
  __ex4_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_SignUpResponse *fieldValue = [[BananaService_SignUpResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidCredentialsException *fieldValue = [[BananaException_InvalidCredentialsException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          BananaException_AccountAlreadyExistsException *fieldValue = [[BananaException_AccountAlreadyExistsException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx4: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SignUp_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex4_isset) {
    if (__ex4 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex4" type: TType_STRUCT fieldID: 4];
      [__ex4 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SignUp_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", __ex4];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_snoozeChannel_args : NSObject <TBase, NSCoding> {
  BananaService_SnoozeChannelRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_SnoozeChannelRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_SnoozeChannelRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_SnoozeChannelRequest *) request;
- (void) setRequest: (BananaService_SnoozeChannelRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_snoozeChannel_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_SnoozeChannelRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_snoozeChannel_args class]]) {
    return NO;
  }
  BananaService_snoozeChannel_args *other = (BananaService_snoozeChannel_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_SnoozeChannelRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_SnoozeChannelRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_SnoozeChannelRequest *fieldValue = [[BananaService_SnoozeChannelRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"snoozeChannel_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_snoozeChannel_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_SnoozeChannel_result : NSObject <TBase, NSCoding> {
  BananaService_SnoozeChannelResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidTokenException __ex3;
  BananaService_UnauthorizedException __ex4;
  BananaService_ChannelDoesNotExistException __ex5;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
  BOOL __ex4_isset;
  BOOL __ex5_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_SnoozeChannelResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidTokenException ex3;
@property (nonatomic, retain, getter=ex4, setter=setEx4:) BananaService_UnauthorizedException ex4;
@property (nonatomic, retain, getter=ex5, setter=setEx5:) BananaService_ChannelDoesNotExistException ex5;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_SnoozeChannelResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3 ex4: (BananaService_UnauthorizedException) ex4 ex5: (BananaService_ChannelDoesNotExistException) ex5;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_SnoozeChannelResponse *) success;
- (void) setSuccess: (BananaService_SnoozeChannelResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidTokenException) ex3;
- (void) setEx3: (BananaService_InvalidTokenException) ex3;
#endif
- (BOOL) ex3IsSet;

#if !__has_feature(objc_arc)
- (BananaService_UnauthorizedException) ex4;
- (void) setEx4: (BananaService_UnauthorizedException) ex4;
#endif
- (BOOL) ex4IsSet;

#if !__has_feature(objc_arc)
- (BananaService_ChannelDoesNotExistException) ex5;
- (void) setEx5: (BananaService_ChannelDoesNotExistException) ex5;
#endif
- (BOOL) ex5IsSet;

@end

@implementation BananaService_SnoozeChannel_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_SnoozeChannelResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3 ex4: (BananaService_UnauthorizedException) ex4 ex5: (BananaService_ChannelDoesNotExistException) ex5
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  __ex4 = [ex4 retain_stub];
  __ex4_isset = YES;
  __ex5 = [ex5 retain_stub];
  __ex5_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex4"])
  {
    __ex4 = [[decoder decodeObjectForKey: @"ex4"] retain_stub];
    __ex4_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex5"])
  {
    __ex5 = [[decoder decodeObjectForKey: @"ex5"] retain_stub];
    __ex5_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
  if (__ex4_isset)
  {
    [encoder encodeObject: __ex4 forKey: @"ex4"];
  }
  if (__ex5_isset)
  {
    [encoder encodeObject: __ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  hash = (hash * 31) ^ __ex4_isset ? 2654435761 : 0;
  if (__ex4_isset)
  {
    hash = (hash * 31) ^ [__ex4 hash];
  }
  hash = (hash * 31) ^ __ex5_isset ? 2654435761 : 0;
  if (__ex5_isset)
  {
    hash = (hash * 31) ^ [__ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SnoozeChannel_result class]]) {
    return NO;
  }
  BananaService_SnoozeChannel_result *other = (BananaService_SnoozeChannel_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  if ((__ex4_isset != other->__ex4_isset) ||
      (__ex4_isset && ((__ex4 || other->__ex4) && ![__ex4 isEqual:other->__ex4]))) {
    return NO;
  }
  if ((__ex5_isset != other->__ex5_isset) ||
      (__ex5_isset && ((__ex5 || other->__ex5) && ![__ex5 isEqual:other->__ex5]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [__ex4 release_stub];
  [__ex5 release_stub];
  [super dealloc_stub];
}

- (BananaService_SnoozeChannelResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_SnoozeChannelResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidTokenException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidTokenException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (BananaException_UnauthorizedException *) ex4 {
  return [[__ex4 retain_stub] autorelease_stub];
}

- (void) setEx4: (BananaException_UnauthorizedException *) ex4 {
  [ex4 retain_stub];
  [__ex4 release_stub];
  __ex4 = ex4;
  __ex4_isset = YES;
}

- (BOOL) ex4IsSet {
  return __ex4_isset;
}

- (void) unsetEx4 {
  [__ex4 release_stub];
  __ex4 = nil;
  __ex4_isset = NO;
}

- (BananaException_ChannelDoesNotExistException *) ex5 {
  return [[__ex5 retain_stub] autorelease_stub];
}

- (void) setEx5: (BananaException_ChannelDoesNotExistException *) ex5 {
  [ex5 retain_stub];
  [__ex5 release_stub];
  __ex5 = ex5;
  __ex5_isset = YES;
}

- (BOOL) ex5IsSet {
  return __ex5_isset;
}

- (void) unsetEx5 {
  [__ex5 release_stub];
  __ex5 = nil;
  __ex5_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_SnoozeChannelResponse *fieldValue = [[BananaService_SnoozeChannelResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidTokenException *fieldValue = [[BananaException_InvalidTokenException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          BananaException_UnauthorizedException *fieldValue = [[BananaException_UnauthorizedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx4: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          BananaException_ChannelDoesNotExistException *fieldValue = [[BananaException_ChannelDoesNotExistException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx5: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SnoozeChannel_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex4_isset) {
    if (__ex4 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex4" type: TType_STRUCT fieldID: 4];
      [__ex4 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex5_isset) {
    if (__ex5 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex5" type: TType_STRUCT fieldID: 5];
      [__ex5 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SnoozeChannel_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", __ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", __ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_subscribeToApplication_args : NSObject <TBase, NSCoding> {
  BananaService_SubscribeToApplicationRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_SubscribeToApplicationRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_SubscribeToApplicationRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_SubscribeToApplicationRequest *) request;
- (void) setRequest: (BananaService_SubscribeToApplicationRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_subscribeToApplication_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_SubscribeToApplicationRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_subscribeToApplication_args class]]) {
    return NO;
  }
  BananaService_subscribeToApplication_args *other = (BananaService_subscribeToApplication_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_SubscribeToApplicationRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_SubscribeToApplicationRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_SubscribeToApplicationRequest *fieldValue = [[BananaService_SubscribeToApplicationRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"subscribeToApplication_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_subscribeToApplication_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_SubscribeToApplication_result : NSObject <TBase, NSCoding> {
  BananaService_SubscribeToApplicationResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidTokenException __ex3;
  BananaService_ApplicationDoesNotExistException __ex4;
  BananaService_ApplicationAlreadyRegisteredException __ex5;
  BananaService_CustomChannelUnreachableException __ex6;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
  BOOL __ex4_isset;
  BOOL __ex5_isset;
  BOOL __ex6_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_SubscribeToApplicationResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidTokenException ex3;
@property (nonatomic, retain, getter=ex4, setter=setEx4:) BananaService_ApplicationDoesNotExistException ex4;
@property (nonatomic, retain, getter=ex5, setter=setEx5:) BananaService_ApplicationAlreadyRegisteredException ex5;
@property (nonatomic, retain, getter=ex6, setter=setEx6:) BananaService_CustomChannelUnreachableException ex6;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_SubscribeToApplicationResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3 ex4: (BananaService_ApplicationDoesNotExistException) ex4 ex5: (BananaService_ApplicationAlreadyRegisteredException) ex5 ex6: (BananaService_CustomChannelUnreachableException) ex6;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_SubscribeToApplicationResponse *) success;
- (void) setSuccess: (BananaService_SubscribeToApplicationResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidTokenException) ex3;
- (void) setEx3: (BananaService_InvalidTokenException) ex3;
#endif
- (BOOL) ex3IsSet;

#if !__has_feature(objc_arc)
- (BananaService_ApplicationDoesNotExistException) ex4;
- (void) setEx4: (BananaService_ApplicationDoesNotExistException) ex4;
#endif
- (BOOL) ex4IsSet;

#if !__has_feature(objc_arc)
- (BananaService_ApplicationAlreadyRegisteredException) ex5;
- (void) setEx5: (BananaService_ApplicationAlreadyRegisteredException) ex5;
#endif
- (BOOL) ex5IsSet;

#if !__has_feature(objc_arc)
- (BananaService_CustomChannelUnreachableException) ex6;
- (void) setEx6: (BananaService_CustomChannelUnreachableException) ex6;
#endif
- (BOOL) ex6IsSet;

@end

@implementation BananaService_SubscribeToApplication_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_SubscribeToApplicationResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3 ex4: (BananaService_ApplicationDoesNotExistException) ex4 ex5: (BananaService_ApplicationAlreadyRegisteredException) ex5 ex6: (BananaService_CustomChannelUnreachableException) ex6
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  __ex4 = [ex4 retain_stub];
  __ex4_isset = YES;
  __ex5 = [ex5 retain_stub];
  __ex5_isset = YES;
  __ex6 = [ex6 retain_stub];
  __ex6_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex4"])
  {
    __ex4 = [[decoder decodeObjectForKey: @"ex4"] retain_stub];
    __ex4_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex5"])
  {
    __ex5 = [[decoder decodeObjectForKey: @"ex5"] retain_stub];
    __ex5_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex6"])
  {
    __ex6 = [[decoder decodeObjectForKey: @"ex6"] retain_stub];
    __ex6_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
  if (__ex4_isset)
  {
    [encoder encodeObject: __ex4 forKey: @"ex4"];
  }
  if (__ex5_isset)
  {
    [encoder encodeObject: __ex5 forKey: @"ex5"];
  }
  if (__ex6_isset)
  {
    [encoder encodeObject: __ex6 forKey: @"ex6"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  hash = (hash * 31) ^ __ex4_isset ? 2654435761 : 0;
  if (__ex4_isset)
  {
    hash = (hash * 31) ^ [__ex4 hash];
  }
  hash = (hash * 31) ^ __ex5_isset ? 2654435761 : 0;
  if (__ex5_isset)
  {
    hash = (hash * 31) ^ [__ex5 hash];
  }
  hash = (hash * 31) ^ __ex6_isset ? 2654435761 : 0;
  if (__ex6_isset)
  {
    hash = (hash * 31) ^ [__ex6 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SubscribeToApplication_result class]]) {
    return NO;
  }
  BananaService_SubscribeToApplication_result *other = (BananaService_SubscribeToApplication_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  if ((__ex4_isset != other->__ex4_isset) ||
      (__ex4_isset && ((__ex4 || other->__ex4) && ![__ex4 isEqual:other->__ex4]))) {
    return NO;
  }
  if ((__ex5_isset != other->__ex5_isset) ||
      (__ex5_isset && ((__ex5 || other->__ex5) && ![__ex5 isEqual:other->__ex5]))) {
    return NO;
  }
  if ((__ex6_isset != other->__ex6_isset) ||
      (__ex6_isset && ((__ex6 || other->__ex6) && ![__ex6 isEqual:other->__ex6]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [__ex4 release_stub];
  [__ex5 release_stub];
  [__ex6 release_stub];
  [super dealloc_stub];
}

- (BananaService_SubscribeToApplicationResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_SubscribeToApplicationResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidTokenException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidTokenException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (BananaException_ApplicationDoesNotExistException *) ex4 {
  return [[__ex4 retain_stub] autorelease_stub];
}

- (void) setEx4: (BananaException_ApplicationDoesNotExistException *) ex4 {
  [ex4 retain_stub];
  [__ex4 release_stub];
  __ex4 = ex4;
  __ex4_isset = YES;
}

- (BOOL) ex4IsSet {
  return __ex4_isset;
}

- (void) unsetEx4 {
  [__ex4 release_stub];
  __ex4 = nil;
  __ex4_isset = NO;
}

- (BananaException_ApplicationAlreadyRegisteredException *) ex5 {
  return [[__ex5 retain_stub] autorelease_stub];
}

- (void) setEx5: (BananaException_ApplicationAlreadyRegisteredException *) ex5 {
  [ex5 retain_stub];
  [__ex5 release_stub];
  __ex5 = ex5;
  __ex5_isset = YES;
}

- (BOOL) ex5IsSet {
  return __ex5_isset;
}

- (void) unsetEx5 {
  [__ex5 release_stub];
  __ex5 = nil;
  __ex5_isset = NO;
}

- (BananaException_CustomChannelUnreachableException *) ex6 {
  return [[__ex6 retain_stub] autorelease_stub];
}

- (void) setEx6: (BananaException_CustomChannelUnreachableException *) ex6 {
  [ex6 retain_stub];
  [__ex6 release_stub];
  __ex6 = ex6;
  __ex6_isset = YES;
}

- (BOOL) ex6IsSet {
  return __ex6_isset;
}

- (void) unsetEx6 {
  [__ex6 release_stub];
  __ex6 = nil;
  __ex6_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_SubscribeToApplicationResponse *fieldValue = [[BananaService_SubscribeToApplicationResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidTokenException *fieldValue = [[BananaException_InvalidTokenException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          BananaException_ApplicationDoesNotExistException *fieldValue = [[BananaException_ApplicationDoesNotExistException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx4: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          BananaException_ApplicationAlreadyRegisteredException *fieldValue = [[BananaException_ApplicationAlreadyRegisteredException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx5: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRUCT) {
          BananaException_CustomChannelUnreachableException *fieldValue = [[BananaException_CustomChannelUnreachableException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx6: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SubscribeToApplication_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex4_isset) {
    if (__ex4 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex4" type: TType_STRUCT fieldID: 4];
      [__ex4 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex5_isset) {
    if (__ex5 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex5" type: TType_STRUCT fieldID: 5];
      [__ex5 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex6_isset) {
    if (__ex6 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex6" type: TType_STRUCT fieldID: 6];
      [__ex6 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SubscribeToApplication_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", __ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", __ex5];
  [ms appendString: @",ex6:"];
  [ms appendFormat: @"%@", __ex6];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_getActivity_args : NSObject <TBase, NSCoding> {
  BananaService_GetActivityRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_GetActivityRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_GetActivityRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_GetActivityRequest *) request;
- (void) setRequest: (BananaService_GetActivityRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_getActivity_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_GetActivityRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_getActivity_args class]]) {
    return NO;
  }
  BananaService_getActivity_args *other = (BananaService_getActivity_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_GetActivityRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_GetActivityRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_GetActivityRequest *fieldValue = [[BananaService_GetActivityRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getActivity_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_getActivity_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_GetActivity_result : NSObject <TBase, NSCoding> {
  BananaService_GetActivityResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidTokenException __ex3;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_GetActivityResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidTokenException ex3;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_GetActivityResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_GetActivityResponse *) success;
- (void) setSuccess: (BananaService_GetActivityResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidTokenException) ex3;
- (void) setEx3: (BananaService_InvalidTokenException) ex3;
#endif
- (BOOL) ex3IsSet;

@end

@implementation BananaService_GetActivity_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_GetActivityResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetActivity_result class]]) {
    return NO;
  }
  BananaService_GetActivity_result *other = (BananaService_GetActivity_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [super dealloc_stub];
}

- (BananaService_GetActivityResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_GetActivityResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidTokenException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidTokenException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_GetActivityResponse *fieldValue = [[BananaService_GetActivityResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidTokenException *fieldValue = [[BananaException_InvalidTokenException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetActivity_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetActivity_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_getApplicationInfo_args : NSObject <TBase, NSCoding> {
  BananaService_GetApplicationInfoRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_GetApplicationInfoRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_GetApplicationInfoRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_GetApplicationInfoRequest *) request;
- (void) setRequest: (BananaService_GetApplicationInfoRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_getApplicationInfo_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_GetApplicationInfoRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_getApplicationInfo_args class]]) {
    return NO;
  }
  BananaService_getApplicationInfo_args *other = (BananaService_getApplicationInfo_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_GetApplicationInfoRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_GetApplicationInfoRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_GetApplicationInfoRequest *fieldValue = [[BananaService_GetApplicationInfoRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getApplicationInfo_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_getApplicationInfo_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_GetApplicationInfo_result : NSObject <TBase, NSCoding> {
  BananaService_GetApplicationInfoResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidTokenException __ex3;
  BananaService_ApplicationDoesNotExistException __ex4;
  BananaService_UnauthorizedException __ex5;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
  BOOL __ex4_isset;
  BOOL __ex5_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_GetApplicationInfoResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidTokenException ex3;
@property (nonatomic, retain, getter=ex4, setter=setEx4:) BananaService_ApplicationDoesNotExistException ex4;
@property (nonatomic, retain, getter=ex5, setter=setEx5:) BananaService_UnauthorizedException ex5;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_GetApplicationInfoResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3 ex4: (BananaService_ApplicationDoesNotExistException) ex4 ex5: (BananaService_UnauthorizedException) ex5;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_GetApplicationInfoResponse *) success;
- (void) setSuccess: (BananaService_GetApplicationInfoResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidTokenException) ex3;
- (void) setEx3: (BananaService_InvalidTokenException) ex3;
#endif
- (BOOL) ex3IsSet;

#if !__has_feature(objc_arc)
- (BananaService_ApplicationDoesNotExistException) ex4;
- (void) setEx4: (BananaService_ApplicationDoesNotExistException) ex4;
#endif
- (BOOL) ex4IsSet;

#if !__has_feature(objc_arc)
- (BananaService_UnauthorizedException) ex5;
- (void) setEx5: (BananaService_UnauthorizedException) ex5;
#endif
- (BOOL) ex5IsSet;

@end

@implementation BananaService_GetApplicationInfo_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_GetApplicationInfoResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3 ex4: (BananaService_ApplicationDoesNotExistException) ex4 ex5: (BananaService_UnauthorizedException) ex5
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  __ex4 = [ex4 retain_stub];
  __ex4_isset = YES;
  __ex5 = [ex5 retain_stub];
  __ex5_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex4"])
  {
    __ex4 = [[decoder decodeObjectForKey: @"ex4"] retain_stub];
    __ex4_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex5"])
  {
    __ex5 = [[decoder decodeObjectForKey: @"ex5"] retain_stub];
    __ex5_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
  if (__ex4_isset)
  {
    [encoder encodeObject: __ex4 forKey: @"ex4"];
  }
  if (__ex5_isset)
  {
    [encoder encodeObject: __ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  hash = (hash * 31) ^ __ex4_isset ? 2654435761 : 0;
  if (__ex4_isset)
  {
    hash = (hash * 31) ^ [__ex4 hash];
  }
  hash = (hash * 31) ^ __ex5_isset ? 2654435761 : 0;
  if (__ex5_isset)
  {
    hash = (hash * 31) ^ [__ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetApplicationInfo_result class]]) {
    return NO;
  }
  BananaService_GetApplicationInfo_result *other = (BananaService_GetApplicationInfo_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  if ((__ex4_isset != other->__ex4_isset) ||
      (__ex4_isset && ((__ex4 || other->__ex4) && ![__ex4 isEqual:other->__ex4]))) {
    return NO;
  }
  if ((__ex5_isset != other->__ex5_isset) ||
      (__ex5_isset && ((__ex5 || other->__ex5) && ![__ex5 isEqual:other->__ex5]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [__ex4 release_stub];
  [__ex5 release_stub];
  [super dealloc_stub];
}

- (BananaService_GetApplicationInfoResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_GetApplicationInfoResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidTokenException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidTokenException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (BananaException_ApplicationDoesNotExistException *) ex4 {
  return [[__ex4 retain_stub] autorelease_stub];
}

- (void) setEx4: (BananaException_ApplicationDoesNotExistException *) ex4 {
  [ex4 retain_stub];
  [__ex4 release_stub];
  __ex4 = ex4;
  __ex4_isset = YES;
}

- (BOOL) ex4IsSet {
  return __ex4_isset;
}

- (void) unsetEx4 {
  [__ex4 release_stub];
  __ex4 = nil;
  __ex4_isset = NO;
}

- (BananaException_UnauthorizedException *) ex5 {
  return [[__ex5 retain_stub] autorelease_stub];
}

- (void) setEx5: (BananaException_UnauthorizedException *) ex5 {
  [ex5 retain_stub];
  [__ex5 release_stub];
  __ex5 = ex5;
  __ex5_isset = YES;
}

- (BOOL) ex5IsSet {
  return __ex5_isset;
}

- (void) unsetEx5 {
  [__ex5 release_stub];
  __ex5 = nil;
  __ex5_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_GetApplicationInfoResponse *fieldValue = [[BananaService_GetApplicationInfoResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidTokenException *fieldValue = [[BananaException_InvalidTokenException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          BananaException_ApplicationDoesNotExistException *fieldValue = [[BananaException_ApplicationDoesNotExistException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx4: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          BananaException_UnauthorizedException *fieldValue = [[BananaException_UnauthorizedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx5: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetApplicationInfo_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex4_isset) {
    if (__ex4 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex4" type: TType_STRUCT fieldID: 4];
      [__ex4 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex5_isset) {
    if (__ex5 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex5" type: TType_STRUCT fieldID: 5];
      [__ex5 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetApplicationInfo_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", __ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", __ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_getBuzz_args : NSObject <TBase, NSCoding> {
  BananaService_GetBuzzRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_GetBuzzRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_GetBuzzRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_GetBuzzRequest *) request;
- (void) setRequest: (BananaService_GetBuzzRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_getBuzz_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_GetBuzzRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_getBuzz_args class]]) {
    return NO;
  }
  BananaService_getBuzz_args *other = (BananaService_getBuzz_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_GetBuzzRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_GetBuzzRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_GetBuzzRequest *fieldValue = [[BananaService_GetBuzzRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getBuzz_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_getBuzz_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_GetBuzz_result : NSObject <TBase, NSCoding> {
  BananaService_GetBuzzResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidTokenException __ex3;
  BananaService_ApplicationDoesNotExistException __ex4;
  BananaService_UnauthorizedException __ex5;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
  BOOL __ex4_isset;
  BOOL __ex5_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_GetBuzzResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidTokenException ex3;
@property (nonatomic, retain, getter=ex4, setter=setEx4:) BananaService_ApplicationDoesNotExistException ex4;
@property (nonatomic, retain, getter=ex5, setter=setEx5:) BananaService_UnauthorizedException ex5;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_GetBuzzResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3 ex4: (BananaService_ApplicationDoesNotExistException) ex4 ex5: (BananaService_UnauthorizedException) ex5;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_GetBuzzResponse *) success;
- (void) setSuccess: (BananaService_GetBuzzResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidTokenException) ex3;
- (void) setEx3: (BananaService_InvalidTokenException) ex3;
#endif
- (BOOL) ex3IsSet;

#if !__has_feature(objc_arc)
- (BananaService_ApplicationDoesNotExistException) ex4;
- (void) setEx4: (BananaService_ApplicationDoesNotExistException) ex4;
#endif
- (BOOL) ex4IsSet;

#if !__has_feature(objc_arc)
- (BananaService_UnauthorizedException) ex5;
- (void) setEx5: (BananaService_UnauthorizedException) ex5;
#endif
- (BOOL) ex5IsSet;

@end

@implementation BananaService_GetBuzz_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_GetBuzzResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3 ex4: (BananaService_ApplicationDoesNotExistException) ex4 ex5: (BananaService_UnauthorizedException) ex5
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  __ex4 = [ex4 retain_stub];
  __ex4_isset = YES;
  __ex5 = [ex5 retain_stub];
  __ex5_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex4"])
  {
    __ex4 = [[decoder decodeObjectForKey: @"ex4"] retain_stub];
    __ex4_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex5"])
  {
    __ex5 = [[decoder decodeObjectForKey: @"ex5"] retain_stub];
    __ex5_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
  if (__ex4_isset)
  {
    [encoder encodeObject: __ex4 forKey: @"ex4"];
  }
  if (__ex5_isset)
  {
    [encoder encodeObject: __ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  hash = (hash * 31) ^ __ex4_isset ? 2654435761 : 0;
  if (__ex4_isset)
  {
    hash = (hash * 31) ^ [__ex4 hash];
  }
  hash = (hash * 31) ^ __ex5_isset ? 2654435761 : 0;
  if (__ex5_isset)
  {
    hash = (hash * 31) ^ [__ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetBuzz_result class]]) {
    return NO;
  }
  BananaService_GetBuzz_result *other = (BananaService_GetBuzz_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  if ((__ex4_isset != other->__ex4_isset) ||
      (__ex4_isset && ((__ex4 || other->__ex4) && ![__ex4 isEqual:other->__ex4]))) {
    return NO;
  }
  if ((__ex5_isset != other->__ex5_isset) ||
      (__ex5_isset && ((__ex5 || other->__ex5) && ![__ex5 isEqual:other->__ex5]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [__ex4 release_stub];
  [__ex5 release_stub];
  [super dealloc_stub];
}

- (BananaService_GetBuzzResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_GetBuzzResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidTokenException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidTokenException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (BananaException_ApplicationDoesNotExistException *) ex4 {
  return [[__ex4 retain_stub] autorelease_stub];
}

- (void) setEx4: (BananaException_ApplicationDoesNotExistException *) ex4 {
  [ex4 retain_stub];
  [__ex4 release_stub];
  __ex4 = ex4;
  __ex4_isset = YES;
}

- (BOOL) ex4IsSet {
  return __ex4_isset;
}

- (void) unsetEx4 {
  [__ex4 release_stub];
  __ex4 = nil;
  __ex4_isset = NO;
}

- (BananaException_UnauthorizedException *) ex5 {
  return [[__ex5 retain_stub] autorelease_stub];
}

- (void) setEx5: (BananaException_UnauthorizedException *) ex5 {
  [ex5 retain_stub];
  [__ex5 release_stub];
  __ex5 = ex5;
  __ex5_isset = YES;
}

- (BOOL) ex5IsSet {
  return __ex5_isset;
}

- (void) unsetEx5 {
  [__ex5 release_stub];
  __ex5 = nil;
  __ex5_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_GetBuzzResponse *fieldValue = [[BananaService_GetBuzzResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidTokenException *fieldValue = [[BananaException_InvalidTokenException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          BananaException_ApplicationDoesNotExistException *fieldValue = [[BananaException_ApplicationDoesNotExistException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx4: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          BananaException_UnauthorizedException *fieldValue = [[BananaException_UnauthorizedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx5: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetBuzz_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex4_isset) {
    if (__ex4 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex4" type: TType_STRUCT fieldID: 4];
      [__ex4 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex5_isset) {
    if (__ex5 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex5" type: TType_STRUCT fieldID: 5];
      [__ex5 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetBuzz_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", __ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", __ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_getDashboard_args : NSObject <TBase, NSCoding> {
  BananaService_GetDashboardRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_GetDashboardRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_GetDashboardRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_GetDashboardRequest *) request;
- (void) setRequest: (BananaService_GetDashboardRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_getDashboard_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_GetDashboardRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_getDashboard_args class]]) {
    return NO;
  }
  BananaService_getDashboard_args *other = (BananaService_getDashboard_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_GetDashboardRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_GetDashboardRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_GetDashboardRequest *fieldValue = [[BananaService_GetDashboardRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getDashboard_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_getDashboard_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_GetDashboard_result : NSObject <TBase, NSCoding> {
  BananaService_GetDashboardResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidTokenException __ex3;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_GetDashboardResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidTokenException ex3;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_GetDashboardResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_GetDashboardResponse *) success;
- (void) setSuccess: (BananaService_GetDashboardResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidTokenException) ex3;
- (void) setEx3: (BananaService_InvalidTokenException) ex3;
#endif
- (BOOL) ex3IsSet;

@end

@implementation BananaService_GetDashboard_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_GetDashboardResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetDashboard_result class]]) {
    return NO;
  }
  BananaService_GetDashboard_result *other = (BananaService_GetDashboard_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [super dealloc_stub];
}

- (BananaService_GetDashboardResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_GetDashboardResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidTokenException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidTokenException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_GetDashboardResponse *fieldValue = [[BananaService_GetDashboardResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidTokenException *fieldValue = [[BananaException_InvalidTokenException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDashboard_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetDashboard_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_getMessages_args : NSObject <TBase, NSCoding> {
  BananaService_GetMessagesRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_GetMessagesRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_GetMessagesRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_GetMessagesRequest *) request;
- (void) setRequest: (BananaService_GetMessagesRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_getMessages_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_GetMessagesRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_getMessages_args class]]) {
    return NO;
  }
  BananaService_getMessages_args *other = (BananaService_getMessages_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_GetMessagesRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_GetMessagesRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_GetMessagesRequest *fieldValue = [[BananaService_GetMessagesRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getMessages_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_getMessages_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_GetMessages_result : NSObject <TBase, NSCoding> {
  BananaService_GetMessagesResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidTokenException __ex3;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_GetMessagesResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidTokenException ex3;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_GetMessagesResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_GetMessagesResponse *) success;
- (void) setSuccess: (BananaService_GetMessagesResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidTokenException) ex3;
- (void) setEx3: (BananaService_InvalidTokenException) ex3;
#endif
- (BOOL) ex3IsSet;

@end

@implementation BananaService_GetMessages_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_GetMessagesResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetMessages_result class]]) {
    return NO;
  }
  BananaService_GetMessages_result *other = (BananaService_GetMessages_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [super dealloc_stub];
}

- (BananaService_GetMessagesResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_GetMessagesResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidTokenException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidTokenException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_GetMessagesResponse *fieldValue = [[BananaService_GetMessagesResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidTokenException *fieldValue = [[BananaException_InvalidTokenException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMessages_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetMessages_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_getFullMessage_args : NSObject <TBase, NSCoding> {
  BananaService_GetFullMessageRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_GetFullMessageRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_GetFullMessageRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_GetFullMessageRequest *) request;
- (void) setRequest: (BananaService_GetFullMessageRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_getFullMessage_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_GetFullMessageRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_getFullMessage_args class]]) {
    return NO;
  }
  BananaService_getFullMessage_args *other = (BananaService_getFullMessage_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_GetFullMessageRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_GetFullMessageRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_GetFullMessageRequest *fieldValue = [[BananaService_GetFullMessageRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getFullMessage_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_getFullMessage_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_GetFullMessage_result : NSObject <TBase, NSCoding> {
  BananaService_GetFullMessageResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidTokenException __ex3;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_GetFullMessageResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidTokenException ex3;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_GetFullMessageResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_GetFullMessageResponse *) success;
- (void) setSuccess: (BananaService_GetFullMessageResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidTokenException) ex3;
- (void) setEx3: (BananaService_InvalidTokenException) ex3;
#endif
- (BOOL) ex3IsSet;

@end

@implementation BananaService_GetFullMessage_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_GetFullMessageResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetFullMessage_result class]]) {
    return NO;
  }
  BananaService_GetFullMessage_result *other = (BananaService_GetFullMessage_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [super dealloc_stub];
}

- (BananaService_GetFullMessageResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_GetFullMessageResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidTokenException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidTokenException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_GetFullMessageResponse *fieldValue = [[BananaService_GetFullMessageResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidTokenException *fieldValue = [[BananaException_InvalidTokenException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetFullMessage_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetFullMessage_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_getMyApplications_args : NSObject <TBase, NSCoding> {
  BananaService_GetMyApplicationsRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_GetMyApplicationsRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_GetMyApplicationsRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_GetMyApplicationsRequest *) request;
- (void) setRequest: (BananaService_GetMyApplicationsRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_getMyApplications_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_GetMyApplicationsRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_getMyApplications_args class]]) {
    return NO;
  }
  BananaService_getMyApplications_args *other = (BananaService_getMyApplications_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_GetMyApplicationsRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_GetMyApplicationsRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_GetMyApplicationsRequest *fieldValue = [[BananaService_GetMyApplicationsRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getMyApplications_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_getMyApplications_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_GetMyApplications_result : NSObject <TBase, NSCoding> {
  BananaService_GetMyApplicationsResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidTokenException __ex3;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_GetMyApplicationsResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidTokenException ex3;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_GetMyApplicationsResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_GetMyApplicationsResponse *) success;
- (void) setSuccess: (BananaService_GetMyApplicationsResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidTokenException) ex3;
- (void) setEx3: (BananaService_InvalidTokenException) ex3;
#endif
- (BOOL) ex3IsSet;

@end

@implementation BananaService_GetMyApplications_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_GetMyApplicationsResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetMyApplications_result class]]) {
    return NO;
  }
  BananaService_GetMyApplications_result *other = (BananaService_GetMyApplications_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [super dealloc_stub];
}

- (BananaService_GetMyApplicationsResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_GetMyApplicationsResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidTokenException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidTokenException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_GetMyApplicationsResponse *fieldValue = [[BananaService_GetMyApplicationsResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidTokenException *fieldValue = [[BananaException_InvalidTokenException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMyApplications_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetMyApplications_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_getMySavedChannels_args : NSObject <TBase, NSCoding> {
  BananaService_GetMySavedChannelsRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_GetMySavedChannelsRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_GetMySavedChannelsRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_GetMySavedChannelsRequest *) request;
- (void) setRequest: (BananaService_GetMySavedChannelsRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_getMySavedChannels_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_GetMySavedChannelsRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_getMySavedChannels_args class]]) {
    return NO;
  }
  BananaService_getMySavedChannels_args *other = (BananaService_getMySavedChannels_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_GetMySavedChannelsRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_GetMySavedChannelsRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_GetMySavedChannelsRequest *fieldValue = [[BananaService_GetMySavedChannelsRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getMySavedChannels_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_getMySavedChannels_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_GetMySavedChannels_result : NSObject <TBase, NSCoding> {
  BananaService_GetMySavedChannelsResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidTokenException __ex3;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_GetMySavedChannelsResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidTokenException ex3;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_GetMySavedChannelsResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_GetMySavedChannelsResponse *) success;
- (void) setSuccess: (BananaService_GetMySavedChannelsResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidTokenException) ex3;
- (void) setEx3: (BananaService_InvalidTokenException) ex3;
#endif
- (BOOL) ex3IsSet;

@end

@implementation BananaService_GetMySavedChannels_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_GetMySavedChannelsResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetMySavedChannels_result class]]) {
    return NO;
  }
  BananaService_GetMySavedChannels_result *other = (BananaService_GetMySavedChannels_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [super dealloc_stub];
}

- (BananaService_GetMySavedChannelsResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_GetMySavedChannelsResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidTokenException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidTokenException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_GetMySavedChannelsResponse *fieldValue = [[BananaService_GetMySavedChannelsResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidTokenException *fieldValue = [[BananaException_InvalidTokenException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMySavedChannels_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetMySavedChannels_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_getUserInfo_args : NSObject <TBase, NSCoding> {
  BananaService_GetUserInfoRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_GetUserInfoRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_GetUserInfoRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_GetUserInfoRequest *) request;
- (void) setRequest: (BananaService_GetUserInfoRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_getUserInfo_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_GetUserInfoRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_getUserInfo_args class]]) {
    return NO;
  }
  BananaService_getUserInfo_args *other = (BananaService_getUserInfo_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_GetUserInfoRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_GetUserInfoRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_GetUserInfoRequest *fieldValue = [[BananaService_GetUserInfoRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getUserInfo_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_getUserInfo_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_GetUserInfo_result : NSObject <TBase, NSCoding> {
  BananaService_GetUserInfoResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidTokenException __ex3;
  BananaService_UnauthorizedException __ex4;
  BananaService_UserDoesNotExistException __ex5;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
  BOOL __ex4_isset;
  BOOL __ex5_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_GetUserInfoResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidTokenException ex3;
@property (nonatomic, retain, getter=ex4, setter=setEx4:) BananaService_UnauthorizedException ex4;
@property (nonatomic, retain, getter=ex5, setter=setEx5:) BananaService_UserDoesNotExistException ex5;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_GetUserInfoResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3 ex4: (BananaService_UnauthorizedException) ex4 ex5: (BananaService_UserDoesNotExistException) ex5;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_GetUserInfoResponse *) success;
- (void) setSuccess: (BananaService_GetUserInfoResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidTokenException) ex3;
- (void) setEx3: (BananaService_InvalidTokenException) ex3;
#endif
- (BOOL) ex3IsSet;

#if !__has_feature(objc_arc)
- (BananaService_UnauthorizedException) ex4;
- (void) setEx4: (BananaService_UnauthorizedException) ex4;
#endif
- (BOOL) ex4IsSet;

#if !__has_feature(objc_arc)
- (BananaService_UserDoesNotExistException) ex5;
- (void) setEx5: (BananaService_UserDoesNotExistException) ex5;
#endif
- (BOOL) ex5IsSet;

@end

@implementation BananaService_GetUserInfo_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_GetUserInfoResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3 ex4: (BananaService_UnauthorizedException) ex4 ex5: (BananaService_UserDoesNotExistException) ex5
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  __ex4 = [ex4 retain_stub];
  __ex4_isset = YES;
  __ex5 = [ex5 retain_stub];
  __ex5_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex4"])
  {
    __ex4 = [[decoder decodeObjectForKey: @"ex4"] retain_stub];
    __ex4_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex5"])
  {
    __ex5 = [[decoder decodeObjectForKey: @"ex5"] retain_stub];
    __ex5_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
  if (__ex4_isset)
  {
    [encoder encodeObject: __ex4 forKey: @"ex4"];
  }
  if (__ex5_isset)
  {
    [encoder encodeObject: __ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  hash = (hash * 31) ^ __ex4_isset ? 2654435761 : 0;
  if (__ex4_isset)
  {
    hash = (hash * 31) ^ [__ex4 hash];
  }
  hash = (hash * 31) ^ __ex5_isset ? 2654435761 : 0;
  if (__ex5_isset)
  {
    hash = (hash * 31) ^ [__ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetUserInfo_result class]]) {
    return NO;
  }
  BananaService_GetUserInfo_result *other = (BananaService_GetUserInfo_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  if ((__ex4_isset != other->__ex4_isset) ||
      (__ex4_isset && ((__ex4 || other->__ex4) && ![__ex4 isEqual:other->__ex4]))) {
    return NO;
  }
  if ((__ex5_isset != other->__ex5_isset) ||
      (__ex5_isset && ((__ex5 || other->__ex5) && ![__ex5 isEqual:other->__ex5]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [__ex4 release_stub];
  [__ex5 release_stub];
  [super dealloc_stub];
}

- (BananaService_GetUserInfoResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_GetUserInfoResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidTokenException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidTokenException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (BananaException_UnauthorizedException *) ex4 {
  return [[__ex4 retain_stub] autorelease_stub];
}

- (void) setEx4: (BananaException_UnauthorizedException *) ex4 {
  [ex4 retain_stub];
  [__ex4 release_stub];
  __ex4 = ex4;
  __ex4_isset = YES;
}

- (BOOL) ex4IsSet {
  return __ex4_isset;
}

- (void) unsetEx4 {
  [__ex4 release_stub];
  __ex4 = nil;
  __ex4_isset = NO;
}

- (BananaException_UserDoesNotExistException *) ex5 {
  return [[__ex5 retain_stub] autorelease_stub];
}

- (void) setEx5: (BananaException_UserDoesNotExistException *) ex5 {
  [ex5 retain_stub];
  [__ex5 release_stub];
  __ex5 = ex5;
  __ex5_isset = YES;
}

- (BOOL) ex5IsSet {
  return __ex5_isset;
}

- (void) unsetEx5 {
  [__ex5 release_stub];
  __ex5 = nil;
  __ex5_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_GetUserInfoResponse *fieldValue = [[BananaService_GetUserInfoResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidTokenException *fieldValue = [[BananaException_InvalidTokenException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          BananaException_UnauthorizedException *fieldValue = [[BananaException_UnauthorizedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx4: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          BananaException_UserDoesNotExistException *fieldValue = [[BananaException_UserDoesNotExistException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx5: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetUserInfo_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex4_isset) {
    if (__ex4 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex4" type: TType_STRUCT fieldID: 4];
      [__ex4 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex5_isset) {
    if (__ex5 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex5" type: TType_STRUCT fieldID: 5];
      [__ex5 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetUserInfo_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", __ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", __ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_searchForApplications_args : NSObject <TBase, NSCoding> {
  BananaService_SearchForApplicationsRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_SearchForApplicationsRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_SearchForApplicationsRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_SearchForApplicationsRequest *) request;
- (void) setRequest: (BananaService_SearchForApplicationsRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_searchForApplications_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_SearchForApplicationsRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_searchForApplications_args class]]) {
    return NO;
  }
  BananaService_searchForApplications_args *other = (BananaService_searchForApplications_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_SearchForApplicationsRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_SearchForApplicationsRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_SearchForApplicationsRequest *fieldValue = [[BananaService_SearchForApplicationsRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"searchForApplications_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_searchForApplications_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_SearchForApplications_result : NSObject <TBase, NSCoding> {
  BananaService_SearchForApplicationsResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidTokenException __ex3;
  BananaService_UnauthorizedException __ex4;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
  BOOL __ex4_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_SearchForApplicationsResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidTokenException ex3;
@property (nonatomic, retain, getter=ex4, setter=setEx4:) BananaService_UnauthorizedException ex4;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_SearchForApplicationsResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3 ex4: (BananaService_UnauthorizedException) ex4;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_SearchForApplicationsResponse *) success;
- (void) setSuccess: (BananaService_SearchForApplicationsResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidTokenException) ex3;
- (void) setEx3: (BananaService_InvalidTokenException) ex3;
#endif
- (BOOL) ex3IsSet;

#if !__has_feature(objc_arc)
- (BananaService_UnauthorizedException) ex4;
- (void) setEx4: (BananaService_UnauthorizedException) ex4;
#endif
- (BOOL) ex4IsSet;

@end

@implementation BananaService_SearchForApplications_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_SearchForApplicationsResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidTokenException) ex3 ex4: (BananaService_UnauthorizedException) ex4
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  __ex4 = [ex4 retain_stub];
  __ex4_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex4"])
  {
    __ex4 = [[decoder decodeObjectForKey: @"ex4"] retain_stub];
    __ex4_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
  if (__ex4_isset)
  {
    [encoder encodeObject: __ex4 forKey: @"ex4"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  hash = (hash * 31) ^ __ex4_isset ? 2654435761 : 0;
  if (__ex4_isset)
  {
    hash = (hash * 31) ^ [__ex4 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SearchForApplications_result class]]) {
    return NO;
  }
  BananaService_SearchForApplications_result *other = (BananaService_SearchForApplications_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  if ((__ex4_isset != other->__ex4_isset) ||
      (__ex4_isset && ((__ex4 || other->__ex4) && ![__ex4 isEqual:other->__ex4]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [__ex4 release_stub];
  [super dealloc_stub];
}

- (BananaService_SearchForApplicationsResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_SearchForApplicationsResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidTokenException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidTokenException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (BananaException_UnauthorizedException *) ex4 {
  return [[__ex4 retain_stub] autorelease_stub];
}

- (void) setEx4: (BananaException_UnauthorizedException *) ex4 {
  [ex4 retain_stub];
  [__ex4 release_stub];
  __ex4 = ex4;
  __ex4_isset = YES;
}

- (BOOL) ex4IsSet {
  return __ex4_isset;
}

- (void) unsetEx4 {
  [__ex4 release_stub];
  __ex4 = nil;
  __ex4_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_SearchForApplicationsResponse *fieldValue = [[BananaService_SearchForApplicationsResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidTokenException *fieldValue = [[BananaException_InvalidTokenException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          BananaException_UnauthorizedException *fieldValue = [[BananaException_UnauthorizedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx4: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SearchForApplications_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex4_isset) {
    if (__ex4 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex4" type: TType_STRUCT fieldID: 4];
      [__ex4 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SearchForApplications_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", __ex4];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_BananaServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) send_getApiVersion
{
  [outProtocol writeMessageBeginWithName: @"getApiVersion" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getApiVersion_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (double) recv_getApiVersion
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_GetApiVersion_result * result = [[[BananaService_GetApiVersion_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getApiVersion failed: unknown result"];
}

- (double) getApiVersion
{
  [self send_getApiVersion];
  [[outProtocol transport] flush];
  return [self recv_getApiVersion];
}

- (void) send_provisionApplication: (BananaService_ProvisionApplicationRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"provisionApplication" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"provisionApplication_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_ProvisionApplicationResponse *) recv_provisionApplication
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_ProvisionApplication_result * result = [[[BananaService_ProvisionApplication_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  if ([result ex4IsSet]) {
    @throw [result ex4];
  }
  if ([result ex5IsSet]) {
    @throw [result ex5];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"provisionApplication failed: unknown result"];
}

- (BananaService_ProvisionApplicationResponse *) provisionApplication: (BananaService_ProvisionApplicationRequest *) request
{
  [self send_provisionApplication : request];
  [[outProtocol transport] flush];
  return [self recv_provisionApplication];
}

- (void) send_regenerateToken: (BananaService_RegenerateApplicationTokenRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"regenerateToken" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"regenerateToken_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_RegenerateApplicationTokenResponse *) recv_regenerateToken
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_RegenerateToken_result * result = [[[BananaService_RegenerateToken_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  if ([result ex4IsSet]) {
    @throw [result ex4];
  }
  if ([result ex5IsSet]) {
    @throw [result ex5];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"regenerateToken failed: unknown result"];
}

- (BananaService_RegenerateApplicationTokenResponse *) regenerateToken: (BananaService_RegenerateApplicationTokenRequest *) request
{
  [self send_regenerateToken : request];
  [[outProtocol transport] flush];
  return [self recv_regenerateToken];
}

- (void) send_registerHealthCheck: (BananaService_RegisterHealthCheckRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"registerHealthCheck" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"registerHealthCheck_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_RegisterHealthCheckResponse *) recv_registerHealthCheck
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_RegisterHealthCheck_result * result = [[[BananaService_RegisterHealthCheck_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  if ([result ex4IsSet]) {
    @throw [result ex4];
  }
  if ([result ex5IsSet]) {
    @throw [result ex5];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"registerHealthCheck failed: unknown result"];
}

- (BananaService_RegisterHealthCheckResponse *) registerHealthCheck: (BananaService_RegisterHealthCheckRequest *) request
{
  [self send_registerHealthCheck : request];
  [[outProtocol transport] flush];
  return [self recv_registerHealthCheck];
}

- (void) send_removeSavedChannel: (BananaService_RemoveSavedChannelRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"removeSavedChannel" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"removeSavedChannel_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_RemoveSavedChannelResponse *) recv_removeSavedChannel
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_RemoveSavedChannel_result * result = [[[BananaService_RemoveSavedChannel_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  if ([result ex4IsSet]) {
    @throw [result ex4];
  }
  if ([result ex5IsSet]) {
    @throw [result ex5];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"removeSavedChannel failed: unknown result"];
}

- (BananaService_RemoveSavedChannelResponse *) removeSavedChannel: (BananaService_RemoveSavedChannelRequest *) request
{
  [self send_removeSavedChannel : request];
  [[outProtocol transport] flush];
  return [self recv_removeSavedChannel];
}

- (void) send_renewApplicationToken: (BananaService_RenewApplicationTokenRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"renewApplicationToken" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"renewApplicationToken_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_RenewApplicationTokenResponse *) recv_renewApplicationToken
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_RenewApplicationToken_result * result = [[[BananaService_RenewApplicationToken_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  if ([result ex4IsSet]) {
    @throw [result ex4];
  }
  if ([result ex5IsSet]) {
    @throw [result ex5];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"renewApplicationToken failed: unknown result"];
}

- (BananaService_RenewApplicationTokenResponse *) renewApplicationToken: (BananaService_RenewApplicationTokenRequest *) request
{
  [self send_renewApplicationToken : request];
  [[outProtocol transport] flush];
  return [self recv_renewApplicationToken];
}

- (void) send_saveChannel: (BananaService_SaveChannelRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"saveChannel" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"saveChannel_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_SaveChannelResponse *) recv_saveChannel
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_SaveChannel_result * result = [[[BananaService_SaveChannel_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  if ([result ex4IsSet]) {
    @throw [result ex4];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"saveChannel failed: unknown result"];
}

- (BananaService_SaveChannelResponse *) saveChannel: (BananaService_SaveChannelRequest *) request
{
  [self send_saveChannel : request];
  [[outProtocol transport] flush];
  return [self recv_saveChannel];
}

- (void) send_signIn: (BananaService_SignInRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"signIn" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"signIn_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_SignInResponse *) recv_signIn
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_SignIn_result * result = [[[BananaService_SignIn_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"signIn failed: unknown result"];
}

- (BananaService_SignInResponse *) signIn: (BananaService_SignInRequest *) request
{
  [self send_signIn : request];
  [[outProtocol transport] flush];
  return [self recv_signIn];
}

- (void) send_signUp: (BananaService_SignUpRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"signUp" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"signUp_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_SignUpResponse *) recv_signUp
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_SignUp_result * result = [[[BananaService_SignUp_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  if ([result ex4IsSet]) {
    @throw [result ex4];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"signUp failed: unknown result"];
}

- (BananaService_SignUpResponse *) signUp: (BananaService_SignUpRequest *) request
{
  [self send_signUp : request];
  [[outProtocol transport] flush];
  return [self recv_signUp];
}

- (void) send_snoozeChannel: (BananaService_SnoozeChannelRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"snoozeChannel" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"snoozeChannel_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_SnoozeChannelResponse *) recv_snoozeChannel
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_SnoozeChannel_result * result = [[[BananaService_SnoozeChannel_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  if ([result ex4IsSet]) {
    @throw [result ex4];
  }
  if ([result ex5IsSet]) {
    @throw [result ex5];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"snoozeChannel failed: unknown result"];
}

- (BananaService_SnoozeChannelResponse *) snoozeChannel: (BananaService_SnoozeChannelRequest *) request
{
  [self send_snoozeChannel : request];
  [[outProtocol transport] flush];
  return [self recv_snoozeChannel];
}

- (void) send_subscribeToApplication: (BananaService_SubscribeToApplicationRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"subscribeToApplication" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"subscribeToApplication_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_SubscribeToApplicationResponse *) recv_subscribeToApplication
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_SubscribeToApplication_result * result = [[[BananaService_SubscribeToApplication_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  if ([result ex4IsSet]) {
    @throw [result ex4];
  }
  if ([result ex5IsSet]) {
    @throw [result ex5];
  }
  if ([result ex6IsSet]) {
    @throw [result ex6];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"subscribeToApplication failed: unknown result"];
}

- (BananaService_SubscribeToApplicationResponse *) subscribeToApplication: (BananaService_SubscribeToApplicationRequest *) request
{
  [self send_subscribeToApplication : request];
  [[outProtocol transport] flush];
  return [self recv_subscribeToApplication];
}

- (void) send_getActivity: (BananaService_GetActivityRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"getActivity" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getActivity_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_GetActivityResponse *) recv_getActivity
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_GetActivity_result * result = [[[BananaService_GetActivity_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getActivity failed: unknown result"];
}

- (BananaService_GetActivityResponse *) getActivity: (BananaService_GetActivityRequest *) request
{
  [self send_getActivity : request];
  [[outProtocol transport] flush];
  return [self recv_getActivity];
}

- (void) send_getApplicationInfo: (BananaService_GetApplicationInfoRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"getApplicationInfo" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getApplicationInfo_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_GetApplicationInfoResponse *) recv_getApplicationInfo
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_GetApplicationInfo_result * result = [[[BananaService_GetApplicationInfo_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  if ([result ex4IsSet]) {
    @throw [result ex4];
  }
  if ([result ex5IsSet]) {
    @throw [result ex5];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getApplicationInfo failed: unknown result"];
}

- (BananaService_GetApplicationInfoResponse *) getApplicationInfo: (BananaService_GetApplicationInfoRequest *) request
{
  [self send_getApplicationInfo : request];
  [[outProtocol transport] flush];
  return [self recv_getApplicationInfo];
}

- (void) send_getBuzz: (BananaService_GetBuzzRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"getBuzz" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getBuzz_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_GetBuzzResponse *) recv_getBuzz
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_GetBuzz_result * result = [[[BananaService_GetBuzz_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  if ([result ex4IsSet]) {
    @throw [result ex4];
  }
  if ([result ex5IsSet]) {
    @throw [result ex5];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getBuzz failed: unknown result"];
}

- (BananaService_GetBuzzResponse *) getBuzz: (BananaService_GetBuzzRequest *) request
{
  [self send_getBuzz : request];
  [[outProtocol transport] flush];
  return [self recv_getBuzz];
}

- (void) send_getDashboard: (BananaService_GetDashboardRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"getDashboard" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getDashboard_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_GetDashboardResponse *) recv_getDashboard
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_GetDashboard_result * result = [[[BananaService_GetDashboard_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getDashboard failed: unknown result"];
}

- (BananaService_GetDashboardResponse *) getDashboard: (BananaService_GetDashboardRequest *) request
{
  [self send_getDashboard : request];
  [[outProtocol transport] flush];
  return [self recv_getDashboard];
}

- (void) send_getMessages: (BananaService_GetMessagesRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"getMessages" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getMessages_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_GetMessagesResponse *) recv_getMessages
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_GetMessages_result * result = [[[BananaService_GetMessages_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getMessages failed: unknown result"];
}

- (BananaService_GetMessagesResponse *) getMessages: (BananaService_GetMessagesRequest *) request
{
  [self send_getMessages : request];
  [[outProtocol transport] flush];
  return [self recv_getMessages];
}

- (void) send_getFullMessage: (BananaService_GetFullMessageRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"getFullMessage" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getFullMessage_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_GetFullMessageResponse *) recv_getFullMessage
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_GetFullMessage_result * result = [[[BananaService_GetFullMessage_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getFullMessage failed: unknown result"];
}

- (BananaService_GetFullMessageResponse *) getFullMessage: (BananaService_GetFullMessageRequest *) request
{
  [self send_getFullMessage : request];
  [[outProtocol transport] flush];
  return [self recv_getFullMessage];
}

- (void) send_getMyApplications: (BananaService_GetMyApplicationsRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"getMyApplications" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getMyApplications_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_GetMyApplicationsResponse *) recv_getMyApplications
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_GetMyApplications_result * result = [[[BananaService_GetMyApplications_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getMyApplications failed: unknown result"];
}

- (BananaService_GetMyApplicationsResponse *) getMyApplications: (BananaService_GetMyApplicationsRequest *) request
{
  [self send_getMyApplications : request];
  [[outProtocol transport] flush];
  return [self recv_getMyApplications];
}

- (void) send_getMySavedChannels: (BananaService_GetMySavedChannelsRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"getMySavedChannels" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getMySavedChannels_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_GetMySavedChannelsResponse *) recv_getMySavedChannels
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_GetMySavedChannels_result * result = [[[BananaService_GetMySavedChannels_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getMySavedChannels failed: unknown result"];
}

- (BananaService_GetMySavedChannelsResponse *) getMySavedChannels: (BananaService_GetMySavedChannelsRequest *) request
{
  [self send_getMySavedChannels : request];
  [[outProtocol transport] flush];
  return [self recv_getMySavedChannels];
}

- (void) send_getUserInfo: (BananaService_GetUserInfoRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"getUserInfo" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getUserInfo_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_GetUserInfoResponse *) recv_getUserInfo
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_GetUserInfo_result * result = [[[BananaService_GetUserInfo_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  if ([result ex4IsSet]) {
    @throw [result ex4];
  }
  if ([result ex5IsSet]) {
    @throw [result ex5];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getUserInfo failed: unknown result"];
}

- (BananaService_GetUserInfoResponse *) getUserInfo: (BananaService_GetUserInfoRequest *) request
{
  [self send_getUserInfo : request];
  [[outProtocol transport] flush];
  return [self recv_getUserInfo];
}

- (void) send_searchForApplications: (BananaService_SearchForApplicationsRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"searchForApplications" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"searchForApplications_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_SearchForApplicationsResponse *) recv_searchForApplications
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_SearchForApplications_result * result = [[[BananaService_SearchForApplications_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  if ([result ex4IsSet]) {
    @throw [result ex4];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"searchForApplications failed: unknown result"];
}

- (BananaService_SearchForApplicationsResponse *) searchForApplications: (BananaService_SearchForApplicationsRequest *) request
{
  [self send_searchForApplications : request];
  [[outProtocol transport] flush];
  return [self recv_searchForApplications];
}

@end

@implementation BananaService_BananaServiceProcessor

- (id) initWithBananaService: (id <BananaService_BananaService>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
  SEL s = @selector(process_getApiVersion_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getApiVersion"];
}
{
  SEL s = @selector(process_provisionApplication_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"provisionApplication"];
}
{
  SEL s = @selector(process_regenerateToken_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"regenerateToken"];
}
{
  SEL s = @selector(process_registerHealthCheck_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"registerHealthCheck"];
}
{
  SEL s = @selector(process_removeSavedChannel_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"removeSavedChannel"];
}
{
  SEL s = @selector(process_renewApplicationToken_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"renewApplicationToken"];
}
{
  SEL s = @selector(process_saveChannel_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"saveChannel"];
}
{
  SEL s = @selector(process_signIn_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"signIn"];
}
{
  SEL s = @selector(process_signUp_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"signUp"];
}
{
  SEL s = @selector(process_snoozeChannel_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"snoozeChannel"];
}
{
  SEL s = @selector(process_subscribeToApplication_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"subscribeToApplication"];
}
{
  SEL s = @selector(process_getActivity_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getActivity"];
}
{
  SEL s = @selector(process_getApplicationInfo_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getApplicationInfo"];
}
{
  SEL s = @selector(process_getBuzz_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getBuzz"];
}
{
  SEL s = @selector(process_getDashboard_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getDashboard"];
}
{
  SEL s = @selector(process_getMessages_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getMessages"];
}
{
  SEL s = @selector(process_getFullMessage_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getFullMessage"];
}
{
  SEL s = @selector(process_getMyApplications_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getMyApplications"];
}
{
  SEL s = @selector(process_getMySavedChannels_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getMySavedChannels"];
}
{
  SEL s = @selector(process_getUserInfo_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getUserInfo"];
}
{
  SEL s = @selector(process_searchForApplications_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"searchForApplications"];
}
return self;
}

- (id<BananaService_BananaService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getApiVersion_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_getApiVersion_args * args = [[BananaService_getApiVersion_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_GetApiVersion_result * result = [[BananaService_GetApiVersion_result alloc] init];
[result setSuccess: [mService getApiVersion]];
[outProtocol writeMessageBeginWithName: @"getApiVersion"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_provisionApplication_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_provisionApplication_args * args = [[BananaService_provisionApplication_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_ProvisionApplication_result * result = [[BananaService_ProvisionApplication_result alloc] init];
[result setSuccess: [mService provisionApplication: [args request]]];
[outProtocol writeMessageBeginWithName: @"provisionApplication"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_regenerateToken_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_regenerateToken_args * args = [[BananaService_regenerateToken_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_RegenerateToken_result * result = [[BananaService_RegenerateToken_result alloc] init];
[result setSuccess: [mService regenerateToken: [args request]]];
[outProtocol writeMessageBeginWithName: @"regenerateToken"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_registerHealthCheck_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_registerHealthCheck_args * args = [[BananaService_registerHealthCheck_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_RegisterHealthCheck_result * result = [[BananaService_RegisterHealthCheck_result alloc] init];
[result setSuccess: [mService registerHealthCheck: [args request]]];
[outProtocol writeMessageBeginWithName: @"registerHealthCheck"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_removeSavedChannel_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_removeSavedChannel_args * args = [[BananaService_removeSavedChannel_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_RemoveSavedChannel_result * result = [[BananaService_RemoveSavedChannel_result alloc] init];
[result setSuccess: [mService removeSavedChannel: [args request]]];
[outProtocol writeMessageBeginWithName: @"removeSavedChannel"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_renewApplicationToken_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_renewApplicationToken_args * args = [[BananaService_renewApplicationToken_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_RenewApplicationToken_result * result = [[BananaService_RenewApplicationToken_result alloc] init];
[result setSuccess: [mService renewApplicationToken: [args request]]];
[outProtocol writeMessageBeginWithName: @"renewApplicationToken"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_saveChannel_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_saveChannel_args * args = [[BananaService_saveChannel_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_SaveChannel_result * result = [[BananaService_SaveChannel_result alloc] init];
[result setSuccess: [mService saveChannel: [args request]]];
[outProtocol writeMessageBeginWithName: @"saveChannel"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_signIn_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_signIn_args * args = [[BananaService_signIn_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_SignIn_result * result = [[BananaService_SignIn_result alloc] init];
[result setSuccess: [mService signIn: [args request]]];
[outProtocol writeMessageBeginWithName: @"signIn"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_signUp_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_signUp_args * args = [[BananaService_signUp_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_SignUp_result * result = [[BananaService_SignUp_result alloc] init];
[result setSuccess: [mService signUp: [args request]]];
[outProtocol writeMessageBeginWithName: @"signUp"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_snoozeChannel_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_snoozeChannel_args * args = [[BananaService_snoozeChannel_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_SnoozeChannel_result * result = [[BananaService_SnoozeChannel_result alloc] init];
[result setSuccess: [mService snoozeChannel: [args request]]];
[outProtocol writeMessageBeginWithName: @"snoozeChannel"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_subscribeToApplication_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_subscribeToApplication_args * args = [[BananaService_subscribeToApplication_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_SubscribeToApplication_result * result = [[BananaService_SubscribeToApplication_result alloc] init];
[result setSuccess: [mService subscribeToApplication: [args request]]];
[outProtocol writeMessageBeginWithName: @"subscribeToApplication"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getActivity_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_getActivity_args * args = [[BananaService_getActivity_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_GetActivity_result * result = [[BananaService_GetActivity_result alloc] init];
[result setSuccess: [mService getActivity: [args request]]];
[outProtocol writeMessageBeginWithName: @"getActivity"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getApplicationInfo_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_getApplicationInfo_args * args = [[BananaService_getApplicationInfo_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_GetApplicationInfo_result * result = [[BananaService_GetApplicationInfo_result alloc] init];
[result setSuccess: [mService getApplicationInfo: [args request]]];
[outProtocol writeMessageBeginWithName: @"getApplicationInfo"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getBuzz_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_getBuzz_args * args = [[BananaService_getBuzz_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_GetBuzz_result * result = [[BananaService_GetBuzz_result alloc] init];
[result setSuccess: [mService getBuzz: [args request]]];
[outProtocol writeMessageBeginWithName: @"getBuzz"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getDashboard_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_getDashboard_args * args = [[BananaService_getDashboard_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_GetDashboard_result * result = [[BananaService_GetDashboard_result alloc] init];
[result setSuccess: [mService getDashboard: [args request]]];
[outProtocol writeMessageBeginWithName: @"getDashboard"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getMessages_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_getMessages_args * args = [[BananaService_getMessages_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_GetMessages_result * result = [[BananaService_GetMessages_result alloc] init];
[result setSuccess: [mService getMessages: [args request]]];
[outProtocol writeMessageBeginWithName: @"getMessages"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getFullMessage_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_getFullMessage_args * args = [[BananaService_getFullMessage_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_GetFullMessage_result * result = [[BananaService_GetFullMessage_result alloc] init];
[result setSuccess: [mService getFullMessage: [args request]]];
[outProtocol writeMessageBeginWithName: @"getFullMessage"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getMyApplications_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_getMyApplications_args * args = [[BananaService_getMyApplications_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_GetMyApplications_result * result = [[BananaService_GetMyApplications_result alloc] init];
[result setSuccess: [mService getMyApplications: [args request]]];
[outProtocol writeMessageBeginWithName: @"getMyApplications"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getMySavedChannels_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_getMySavedChannels_args * args = [[BananaService_getMySavedChannels_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_GetMySavedChannels_result * result = [[BananaService_GetMySavedChannels_result alloc] init];
[result setSuccess: [mService getMySavedChannels: [args request]]];
[outProtocol writeMessageBeginWithName: @"getMySavedChannels"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getUserInfo_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_getUserInfo_args * args = [[BananaService_getUserInfo_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_GetUserInfo_result * result = [[BananaService_GetUserInfo_result alloc] init];
[result setSuccess: [mService getUserInfo: [args request]]];
[outProtocol writeMessageBeginWithName: @"getUserInfo"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_searchForApplications_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_searchForApplications_args * args = [[BananaService_searchForApplications_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_SearchForApplications_result * result = [[BananaService_SearchForApplications_result alloc] init];
[result setSuccess: [mService searchForApplications: [args request]]];
[outProtocol writeMessageBeginWithName: @"searchForApplications"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

