/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"

#import "Authentication.h"
#import "Banana.h"
#import "Channels.h"
#import "Endpoint.h"
#import "Exceptions.h"
#import "Notifications.h"

#import "BananaService.h"

@implementation BananaService_SignInRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCredentials: (BananaAuthentication_Credentials *) credentials username: (NSString *) username
{
  self = [super init];
  __credentials = [credentials retain_stub];
  __credentials_isset = YES;
  __username = [username retain_stub];
  __username_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"credentials"])
  {
    __credentials = [[decoder decodeObjectForKey: @"credentials"] retain_stub];
    __credentials_isset = YES;
  }
  if ([decoder containsValueForKey: @"username"])
  {
    __username = [[decoder decodeObjectForKey: @"username"] retain_stub];
    __username_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__credentials_isset)
  {
    [encoder encodeObject: __credentials forKey: @"credentials"];
  }
  if (__username_isset)
  {
    [encoder encodeObject: __username forKey: @"username"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __credentials_isset ? 2654435761 : 0;
  if (__credentials_isset)
  {
    hash = (hash * 31) ^ [__credentials hash];
  }
  hash = (hash * 31) ^ __username_isset ? 2654435761 : 0;
  if (__username_isset)
  {
    hash = (hash * 31) ^ [__username hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SignInRequest class]]) {
    return NO;
  }
  BananaService_SignInRequest *other = (BananaService_SignInRequest *)anObject;
  if ((__credentials_isset != other->__credentials_isset) ||
      (__credentials_isset && ((__credentials || other->__credentials) && ![__credentials isEqual:other->__credentials]))) {
    return NO;
  }
  if ((__username_isset != other->__username_isset) ||
      (__username_isset && ((__username || other->__username) && ![__username isEqual:other->__username]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__credentials release_stub];
  [__username release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_Credentials *) credentials {
  return [[__credentials retain_stub] autorelease_stub];
}

- (void) setCredentials: (BananaAuthentication_Credentials *) credentials {
  [credentials retain_stub];
  [__credentials release_stub];
  __credentials = credentials;
  __credentials_isset = YES;
}

- (BOOL) credentialsIsSet {
  return __credentials_isset;
}

- (void) unsetCredentials {
  [__credentials release_stub];
  __credentials = nil;
  __credentials_isset = NO;
}

- (NSString *) username {
  return [[__username retain_stub] autorelease_stub];
}

- (void) setUsername: (NSString *) username {
  [username retain_stub];
  [__username release_stub];
  __username = username;
  __username_isset = YES;
}

- (BOOL) usernameIsSet {
  return __username_isset;
}

- (void) unsetUsername {
  [__username release_stub];
  __username = nil;
  __username_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_Credentials *fieldValue = [[BananaAuthentication_Credentials alloc] init];
          [fieldValue read: inProtocol];
          [self setCredentials: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUsername: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SignInRequest"];
  if (__credentials_isset) {
    if (__credentials != nil) {
      [outProtocol writeFieldBeginWithName: @"credentials" type: TType_STRUCT fieldID: 1];
      [__credentials write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__username_isset) {
    if (__username != nil) {
      [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __username];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SignInRequest("];
  [ms appendString: @"credentials:"];
  [ms appendFormat: @"%@", __credentials];
  [ms appendString: @",username:"];
  [ms appendFormat: @"\"%@\"", __username];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_SignInResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHumanToken: (BananaService_HumanToken) humanToken
{
  self = [super init];
  __humanToken = [humanToken retain_stub];
  __humanToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"humanToken"])
  {
    __humanToken = [[decoder decodeObjectForKey: @"humanToken"] retain_stub];
    __humanToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__humanToken_isset)
  {
    [encoder encodeObject: __humanToken forKey: @"humanToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __humanToken_isset ? 2654435761 : 0;
  if (__humanToken_isset)
  {
    hash = (hash * 31) ^ [__humanToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SignInResponse class]]) {
    return NO;
  }
  BananaService_SignInResponse *other = (BananaService_SignInResponse *)anObject;
  if ((__humanToken_isset != other->__humanToken_isset) ||
      (__humanToken_isset && ((__humanToken || other->__humanToken) && ![__humanToken isEqual:other->__humanToken]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__humanToken release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_HumanToken *) humanToken {
  return [[__humanToken retain_stub] autorelease_stub];
}

- (void) setHumanToken: (BananaAuthentication_HumanToken *) humanToken {
  [humanToken retain_stub];
  [__humanToken release_stub];
  __humanToken = humanToken;
  __humanToken_isset = YES;
}

- (BOOL) humanTokenIsSet {
  return __humanToken_isset;
}

- (void) unsetHumanToken {
  [__humanToken release_stub];
  __humanToken = nil;
  __humanToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_HumanToken *fieldValue = [[BananaAuthentication_HumanToken alloc] init];
          [fieldValue read: inProtocol];
          [self setHumanToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SignInResponse"];
  if (__humanToken_isset) {
    if (__humanToken != nil) {
      [outProtocol writeFieldBeginWithName: @"humanToken" type: TType_STRUCT fieldID: 1];
      [__humanToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SignInResponse("];
  [ms appendString: @"humanToken:"];
  [ms appendFormat: @"%@", __humanToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_SignUpRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEmail: (NSString *) email name: (NSString *) name username: (NSString *) username organization: (NSString *) organization credentials: (BananaAuthentication_Credentials *) credentials
{
  self = [super init];
  __email = [email retain_stub];
  __email_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __username = [username retain_stub];
  __username_isset = YES;
  __organization = [organization retain_stub];
  __organization_isset = YES;
  __credentials = [credentials retain_stub];
  __credentials_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"username"])
  {
    __username = [[decoder decodeObjectForKey: @"username"] retain_stub];
    __username_isset = YES;
  }
  if ([decoder containsValueForKey: @"organization"])
  {
    __organization = [[decoder decodeObjectForKey: @"organization"] retain_stub];
    __organization_isset = YES;
  }
  if ([decoder containsValueForKey: @"credentials"])
  {
    __credentials = [[decoder decodeObjectForKey: @"credentials"] retain_stub];
    __credentials_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__username_isset)
  {
    [encoder encodeObject: __username forKey: @"username"];
  }
  if (__organization_isset)
  {
    [encoder encodeObject: __organization forKey: @"organization"];
  }
  if (__credentials_isset)
  {
    [encoder encodeObject: __credentials forKey: @"credentials"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __email_isset ? 2654435761 : 0;
  if (__email_isset)
  {
    hash = (hash * 31) ^ [__email hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __username_isset ? 2654435761 : 0;
  if (__username_isset)
  {
    hash = (hash * 31) ^ [__username hash];
  }
  hash = (hash * 31) ^ __organization_isset ? 2654435761 : 0;
  if (__organization_isset)
  {
    hash = (hash * 31) ^ [__organization hash];
  }
  hash = (hash * 31) ^ __credentials_isset ? 2654435761 : 0;
  if (__credentials_isset)
  {
    hash = (hash * 31) ^ [__credentials hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SignUpRequest class]]) {
    return NO;
  }
  BananaService_SignUpRequest *other = (BananaService_SignUpRequest *)anObject;
  if ((__email_isset != other->__email_isset) ||
      (__email_isset && ((__email || other->__email) && ![__email isEqual:other->__email]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__username_isset != other->__username_isset) ||
      (__username_isset && ((__username || other->__username) && ![__username isEqual:other->__username]))) {
    return NO;
  }
  if ((__organization_isset != other->__organization_isset) ||
      (__organization_isset && ((__organization || other->__organization) && ![__organization isEqual:other->__organization]))) {
    return NO;
  }
  if ((__credentials_isset != other->__credentials_isset) ||
      (__credentials_isset && ((__credentials || other->__credentials) && ![__credentials isEqual:other->__credentials]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__email release_stub];
  [__name release_stub];
  [__username release_stub];
  [__organization release_stub];
  [__credentials release_stub];
  [super dealloc_stub];
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) username {
  return [[__username retain_stub] autorelease_stub];
}

- (void) setUsername: (NSString *) username {
  [username retain_stub];
  [__username release_stub];
  __username = username;
  __username_isset = YES;
}

- (BOOL) usernameIsSet {
  return __username_isset;
}

- (void) unsetUsername {
  [__username release_stub];
  __username = nil;
  __username_isset = NO;
}

- (NSString *) organization {
  return [[__organization retain_stub] autorelease_stub];
}

- (void) setOrganization: (NSString *) organization {
  [organization retain_stub];
  [__organization release_stub];
  __organization = organization;
  __organization_isset = YES;
}

- (BOOL) organizationIsSet {
  return __organization_isset;
}

- (void) unsetOrganization {
  [__organization release_stub];
  __organization = nil;
  __organization_isset = NO;
}

- (BananaAuthentication_Credentials *) credentials {
  return [[__credentials retain_stub] autorelease_stub];
}

- (void) setCredentials: (BananaAuthentication_Credentials *) credentials {
  [credentials retain_stub];
  [__credentials release_stub];
  __credentials = credentials;
  __credentials_isset = YES;
}

- (BOOL) credentialsIsSet {
  return __credentials_isset;
}

- (void) unsetCredentials {
  [__credentials release_stub];
  __credentials = nil;
  __credentials_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUsername: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrganization: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_Credentials *fieldValue = [[BananaAuthentication_Credentials alloc] init];
          [fieldValue read: inProtocol];
          [self setCredentials: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SignUpRequest"];
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__username_isset) {
    if (__username != nil) {
      [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __username];
      [outProtocol writeFieldEnd];
    }
  }
  if (__organization_isset) {
    if (__organization != nil) {
      [outProtocol writeFieldBeginWithName: @"organization" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __organization];
      [outProtocol writeFieldEnd];
    }
  }
  if (__credentials_isset) {
    if (__credentials != nil) {
      [outProtocol writeFieldBeginWithName: @"credentials" type: TType_STRUCT fieldID: 5];
      [__credentials write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SignUpRequest("];
  [ms appendString: @"email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",username:"];
  [ms appendFormat: @"\"%@\"", __username];
  [ms appendString: @",organization:"];
  [ms appendFormat: @"\"%@\"", __organization];
  [ms appendString: @",credentials:"];
  [ms appendFormat: @"%@", __credentials];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_SignUpResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHumanToken: (BananaService_HumanToken) humanToken
{
  self = [super init];
  __humanToken = [humanToken retain_stub];
  __humanToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"humanToken"])
  {
    __humanToken = [[decoder decodeObjectForKey: @"humanToken"] retain_stub];
    __humanToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__humanToken_isset)
  {
    [encoder encodeObject: __humanToken forKey: @"humanToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __humanToken_isset ? 2654435761 : 0;
  if (__humanToken_isset)
  {
    hash = (hash * 31) ^ [__humanToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SignUpResponse class]]) {
    return NO;
  }
  BananaService_SignUpResponse *other = (BananaService_SignUpResponse *)anObject;
  if ((__humanToken_isset != other->__humanToken_isset) ||
      (__humanToken_isset && ((__humanToken || other->__humanToken) && ![__humanToken isEqual:other->__humanToken]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__humanToken release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_HumanToken *) humanToken {
  return [[__humanToken retain_stub] autorelease_stub];
}

- (void) setHumanToken: (BananaAuthentication_HumanToken *) humanToken {
  [humanToken retain_stub];
  [__humanToken release_stub];
  __humanToken = humanToken;
  __humanToken_isset = YES;
}

- (BOOL) humanTokenIsSet {
  return __humanToken_isset;
}

- (void) unsetHumanToken {
  [__humanToken release_stub];
  __humanToken = nil;
  __humanToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_HumanToken *fieldValue = [[BananaAuthentication_HumanToken alloc] init];
          [fieldValue read: inProtocol];
          [self setHumanToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SignUpResponse"];
  if (__humanToken_isset) {
    if (__humanToken != nil) {
      [outProtocol writeFieldBeginWithName: @"humanToken" type: TType_STRUCT fieldID: 1];
      [__humanToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SignUpResponse("];
  [ms appendString: @"humanToken:"];
  [ms appendFormat: @"%@", __humanToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_ProvisionServiceRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (NSString *) token serviceName: (NSString *) serviceName programmingLanguage: (int) programmingLanguage organization: (NSString *) organization icon: (BananaService_Image) icon humanToken: (BananaService_HumanToken) humanToken
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __serviceName = [serviceName retain_stub];
  __serviceName_isset = YES;
  __programmingLanguage = programmingLanguage;
  __programmingLanguage_isset = YES;
  __organization = [organization retain_stub];
  __organization_isset = YES;
  __icon = [icon retain_stub];
  __icon_isset = YES;
  __humanToken = [humanToken retain_stub];
  __humanToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceName"])
  {
    __serviceName = [[decoder decodeObjectForKey: @"serviceName"] retain_stub];
    __serviceName_isset = YES;
  }
  if ([decoder containsValueForKey: @"programmingLanguage"])
  {
    __programmingLanguage = [decoder decodeIntForKey: @"programmingLanguage"];
    __programmingLanguage_isset = YES;
  }
  if ([decoder containsValueForKey: @"organization"])
  {
    __organization = [[decoder decodeObjectForKey: @"organization"] retain_stub];
    __organization_isset = YES;
  }
  if ([decoder containsValueForKey: @"icon"])
  {
    __icon = [[decoder decodeObjectForKey: @"icon"] retain_stub];
    __icon_isset = YES;
  }
  if ([decoder containsValueForKey: @"humanToken"])
  {
    __humanToken = [[decoder decodeObjectForKey: @"humanToken"] retain_stub];
    __humanToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__serviceName_isset)
  {
    [encoder encodeObject: __serviceName forKey: @"serviceName"];
  }
  if (__programmingLanguage_isset)
  {
    [encoder encodeInt: __programmingLanguage forKey: @"programmingLanguage"];
  }
  if (__organization_isset)
  {
    [encoder encodeObject: __organization forKey: @"organization"];
  }
  if (__icon_isset)
  {
    [encoder encodeObject: __icon forKey: @"icon"];
  }
  if (__humanToken_isset)
  {
    [encoder encodeObject: __humanToken forKey: @"humanToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __serviceName_isset ? 2654435761 : 0;
  if (__serviceName_isset)
  {
    hash = (hash * 31) ^ [__serviceName hash];
  }
  hash = (hash * 31) ^ __programmingLanguage_isset ? 2654435761 : 0;
  if (__programmingLanguage_isset)
  {
    hash = (hash * 31) ^ [@(__programmingLanguage) hash];
  }
  hash = (hash * 31) ^ __organization_isset ? 2654435761 : 0;
  if (__organization_isset)
  {
    hash = (hash * 31) ^ [__organization hash];
  }
  hash = (hash * 31) ^ __icon_isset ? 2654435761 : 0;
  if (__icon_isset)
  {
    hash = (hash * 31) ^ [__icon hash];
  }
  hash = (hash * 31) ^ __humanToken_isset ? 2654435761 : 0;
  if (__humanToken_isset)
  {
    hash = (hash * 31) ^ [__humanToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_ProvisionServiceRequest class]]) {
    return NO;
  }
  BananaService_ProvisionServiceRequest *other = (BananaService_ProvisionServiceRequest *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__serviceName_isset != other->__serviceName_isset) ||
      (__serviceName_isset && ((__serviceName || other->__serviceName) && ![__serviceName isEqual:other->__serviceName]))) {
    return NO;
  }
  if ((__programmingLanguage_isset != other->__programmingLanguage_isset) ||
      (__programmingLanguage_isset && (__programmingLanguage != other->__programmingLanguage))) {
    return NO;
  }
  if ((__organization_isset != other->__organization_isset) ||
      (__organization_isset && ((__organization || other->__organization) && ![__organization isEqual:other->__organization]))) {
    return NO;
  }
  if ((__icon_isset != other->__icon_isset) ||
      (__icon_isset && ((__icon || other->__icon) && ![__icon isEqual:other->__icon]))) {
    return NO;
  }
  if ((__humanToken_isset != other->__humanToken_isset) ||
      (__humanToken_isset && ((__humanToken || other->__humanToken) && ![__humanToken isEqual:other->__humanToken]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__serviceName release_stub];
  [__organization release_stub];
  [__icon release_stub];
  [__humanToken release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) serviceName {
  return [[__serviceName retain_stub] autorelease_stub];
}

- (void) setServiceName: (NSString *) serviceName {
  [serviceName retain_stub];
  [__serviceName release_stub];
  __serviceName = serviceName;
  __serviceName_isset = YES;
}

- (BOOL) serviceNameIsSet {
  return __serviceName_isset;
}

- (void) unsetServiceName {
  [__serviceName release_stub];
  __serviceName = nil;
  __serviceName_isset = NO;
}

- (int) programmingLanguage {
  return __programmingLanguage;
}

- (void) setProgrammingLanguage: (int) programmingLanguage {
  __programmingLanguage = programmingLanguage;
  __programmingLanguage_isset = YES;
}

- (BOOL) programmingLanguageIsSet {
  return __programmingLanguage_isset;
}

- (void) unsetProgrammingLanguage {
  __programmingLanguage_isset = NO;
}

- (NSString *) organization {
  return [[__organization retain_stub] autorelease_stub];
}

- (void) setOrganization: (NSString *) organization {
  [organization retain_stub];
  [__organization release_stub];
  __organization = organization;
  __organization_isset = YES;
}

- (BOOL) organizationIsSet {
  return __organization_isset;
}

- (void) unsetOrganization {
  [__organization release_stub];
  __organization = nil;
  __organization_isset = NO;
}

- (Banana_Image *) icon {
  return [[__icon retain_stub] autorelease_stub];
}

- (void) setIcon: (Banana_Image *) icon {
  [icon retain_stub];
  [__icon release_stub];
  __icon = icon;
  __icon_isset = YES;
}

- (BOOL) iconIsSet {
  return __icon_isset;
}

- (void) unsetIcon {
  [__icon release_stub];
  __icon = nil;
  __icon_isset = NO;
}

- (BananaAuthentication_HumanToken *) humanToken {
  return [[__humanToken retain_stub] autorelease_stub];
}

- (void) setHumanToken: (BananaAuthentication_HumanToken *) humanToken {
  [humanToken retain_stub];
  [__humanToken release_stub];
  __humanToken = humanToken;
  __humanToken_isset = YES;
}

- (BOOL) humanTokenIsSet {
  return __humanToken_isset;
}

- (void) unsetHumanToken {
  [__humanToken release_stub];
  __humanToken = nil;
  __humanToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setServiceName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setProgrammingLanguage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrganization: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          Banana_Image *fieldValue = [[Banana_Image alloc] init];
          [fieldValue read: inProtocol];
          [self setIcon: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_HumanToken *fieldValue = [[BananaAuthentication_HumanToken alloc] init];
          [fieldValue read: inProtocol];
          [self setHumanToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ProvisionServiceRequest"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serviceName_isset) {
    if (__serviceName != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __serviceName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__programmingLanguage_isset) {
    [outProtocol writeFieldBeginWithName: @"programmingLanguage" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __programmingLanguage];
    [outProtocol writeFieldEnd];
  }
  if (__organization_isset) {
    if (__organization != nil) {
      [outProtocol writeFieldBeginWithName: @"organization" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __organization];
      [outProtocol writeFieldEnd];
    }
  }
  if (__icon_isset) {
    if (__icon != nil) {
      [outProtocol writeFieldBeginWithName: @"icon" type: TType_STRUCT fieldID: 5];
      [__icon write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__humanToken_isset) {
    if (__humanToken != nil) {
      [outProtocol writeFieldBeginWithName: @"humanToken" type: TType_STRUCT fieldID: 6];
      [__humanToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_ProvisionServiceRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",serviceName:"];
  [ms appendFormat: @"\"%@\"", __serviceName];
  [ms appendString: @",programmingLanguage:"];
  [ms appendFormat: @"%i", __programmingLanguage];
  [ms appendString: @",organization:"];
  [ms appendFormat: @"\"%@\"", __organization];
  [ms appendString: @",icon:"];
  [ms appendFormat: @"%@", __icon];
  [ms appendString: @",humanToken:"];
  [ms appendFormat: @"%@", __humanToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_ProvisionServiceResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithBananaToken: (NSString *) bananaToken serviceName: (NSString *) serviceName serviceToken: (BananaService_ServiceToken) serviceToken
{
  self = [super init];
  __bananaToken = [bananaToken retain_stub];
  __bananaToken_isset = YES;
  __serviceName = [serviceName retain_stub];
  __serviceName_isset = YES;
  __serviceToken = [serviceToken retain_stub];
  __serviceToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"bananaToken"])
  {
    __bananaToken = [[decoder decodeObjectForKey: @"bananaToken"] retain_stub];
    __bananaToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceName"])
  {
    __serviceName = [[decoder decodeObjectForKey: @"serviceName"] retain_stub];
    __serviceName_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceToken"])
  {
    __serviceToken = [[decoder decodeObjectForKey: @"serviceToken"] retain_stub];
    __serviceToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__bananaToken_isset)
  {
    [encoder encodeObject: __bananaToken forKey: @"bananaToken"];
  }
  if (__serviceName_isset)
  {
    [encoder encodeObject: __serviceName forKey: @"serviceName"];
  }
  if (__serviceToken_isset)
  {
    [encoder encodeObject: __serviceToken forKey: @"serviceToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __bananaToken_isset ? 2654435761 : 0;
  if (__bananaToken_isset)
  {
    hash = (hash * 31) ^ [__bananaToken hash];
  }
  hash = (hash * 31) ^ __serviceName_isset ? 2654435761 : 0;
  if (__serviceName_isset)
  {
    hash = (hash * 31) ^ [__serviceName hash];
  }
  hash = (hash * 31) ^ __serviceToken_isset ? 2654435761 : 0;
  if (__serviceToken_isset)
  {
    hash = (hash * 31) ^ [__serviceToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_ProvisionServiceResponse class]]) {
    return NO;
  }
  BananaService_ProvisionServiceResponse *other = (BananaService_ProvisionServiceResponse *)anObject;
  if ((__bananaToken_isset != other->__bananaToken_isset) ||
      (__bananaToken_isset && ((__bananaToken || other->__bananaToken) && ![__bananaToken isEqual:other->__bananaToken]))) {
    return NO;
  }
  if ((__serviceName_isset != other->__serviceName_isset) ||
      (__serviceName_isset && ((__serviceName || other->__serviceName) && ![__serviceName isEqual:other->__serviceName]))) {
    return NO;
  }
  if ((__serviceToken_isset != other->__serviceToken_isset) ||
      (__serviceToken_isset && ((__serviceToken || other->__serviceToken) && ![__serviceToken isEqual:other->__serviceToken]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__bananaToken release_stub];
  [__serviceName release_stub];
  [__serviceToken release_stub];
  [super dealloc_stub];
}

- (NSString *) bananaToken {
  return [[__bananaToken retain_stub] autorelease_stub];
}

- (void) setBananaToken: (NSString *) bananaToken {
  [bananaToken retain_stub];
  [__bananaToken release_stub];
  __bananaToken = bananaToken;
  __bananaToken_isset = YES;
}

- (BOOL) bananaTokenIsSet {
  return __bananaToken_isset;
}

- (void) unsetBananaToken {
  [__bananaToken release_stub];
  __bananaToken = nil;
  __bananaToken_isset = NO;
}

- (NSString *) serviceName {
  return [[__serviceName retain_stub] autorelease_stub];
}

- (void) setServiceName: (NSString *) serviceName {
  [serviceName retain_stub];
  [__serviceName release_stub];
  __serviceName = serviceName;
  __serviceName_isset = YES;
}

- (BOOL) serviceNameIsSet {
  return __serviceName_isset;
}

- (void) unsetServiceName {
  [__serviceName release_stub];
  __serviceName = nil;
  __serviceName_isset = NO;
}

- (BananaAuthentication_ServiceToken *) serviceToken {
  return [[__serviceToken retain_stub] autorelease_stub];
}

- (void) setServiceToken: (BananaAuthentication_ServiceToken *) serviceToken {
  [serviceToken retain_stub];
  [__serviceToken release_stub];
  __serviceToken = serviceToken;
  __serviceToken_isset = YES;
}

- (BOOL) serviceTokenIsSet {
  return __serviceToken_isset;
}

- (void) unsetServiceToken {
  [__serviceToken release_stub];
  __serviceToken = nil;
  __serviceToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBananaToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setServiceName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_ServiceToken *fieldValue = [[BananaAuthentication_ServiceToken alloc] init];
          [fieldValue read: inProtocol];
          [self setServiceToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ProvisionServiceResponse"];
  if (__bananaToken_isset) {
    if (__bananaToken != nil) {
      [outProtocol writeFieldBeginWithName: @"bananaToken" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __bananaToken];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serviceName_isset) {
    if (__serviceName != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __serviceName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serviceToken_isset) {
    if (__serviceToken != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceToken" type: TType_STRUCT fieldID: 3];
      [__serviceToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_ProvisionServiceResponse("];
  [ms appendString: @"bananaToken:"];
  [ms appendFormat: @"\"%@\"", __bananaToken];
  [ms appendString: @",serviceName:"];
  [ms appendFormat: @"\"%@\"", __serviceName];
  [ms appendString: @",serviceToken:"];
  [ms appendFormat: @"%@", __serviceToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_SubscribeToServiceRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.shared = NO;

#endif
  return self;
}

- (id) initWithToken: (NSString *) token serviceName: (NSString *) serviceName organization: (NSString *) organization shared: (BOOL) shared humanToken: (BananaService_HumanToken) humanToken
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __serviceName = [serviceName retain_stub];
  __serviceName_isset = YES;
  __organization = [organization retain_stub];
  __organization_isset = YES;
  __shared = shared;
  __shared_isset = YES;
  __humanToken = [humanToken retain_stub];
  __humanToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceName"])
  {
    __serviceName = [[decoder decodeObjectForKey: @"serviceName"] retain_stub];
    __serviceName_isset = YES;
  }
  if ([decoder containsValueForKey: @"organization"])
  {
    __organization = [[decoder decodeObjectForKey: @"organization"] retain_stub];
    __organization_isset = YES;
  }
  if ([decoder containsValueForKey: @"shared"])
  {
    __shared = [decoder decodeBoolForKey: @"shared"];
    __shared_isset = YES;
  }
  if ([decoder containsValueForKey: @"humanToken"])
  {
    __humanToken = [[decoder decodeObjectForKey: @"humanToken"] retain_stub];
    __humanToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__serviceName_isset)
  {
    [encoder encodeObject: __serviceName forKey: @"serviceName"];
  }
  if (__organization_isset)
  {
    [encoder encodeObject: __organization forKey: @"organization"];
  }
  if (__shared_isset)
  {
    [encoder encodeBool: __shared forKey: @"shared"];
  }
  if (__humanToken_isset)
  {
    [encoder encodeObject: __humanToken forKey: @"humanToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __serviceName_isset ? 2654435761 : 0;
  if (__serviceName_isset)
  {
    hash = (hash * 31) ^ [__serviceName hash];
  }
  hash = (hash * 31) ^ __organization_isset ? 2654435761 : 0;
  if (__organization_isset)
  {
    hash = (hash * 31) ^ [__organization hash];
  }
  hash = (hash * 31) ^ __shared_isset ? 2654435761 : 0;
  if (__shared_isset)
  {
    hash = (hash * 31) ^ [@(__shared) hash];
  }
  hash = (hash * 31) ^ __humanToken_isset ? 2654435761 : 0;
  if (__humanToken_isset)
  {
    hash = (hash * 31) ^ [__humanToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SubscribeToServiceRequest class]]) {
    return NO;
  }
  BananaService_SubscribeToServiceRequest *other = (BananaService_SubscribeToServiceRequest *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__serviceName_isset != other->__serviceName_isset) ||
      (__serviceName_isset && ((__serviceName || other->__serviceName) && ![__serviceName isEqual:other->__serviceName]))) {
    return NO;
  }
  if ((__organization_isset != other->__organization_isset) ||
      (__organization_isset && ((__organization || other->__organization) && ![__organization isEqual:other->__organization]))) {
    return NO;
  }
  if ((__shared_isset != other->__shared_isset) ||
      (__shared_isset && (__shared != other->__shared))) {
    return NO;
  }
  if ((__humanToken_isset != other->__humanToken_isset) ||
      (__humanToken_isset && ((__humanToken || other->__humanToken) && ![__humanToken isEqual:other->__humanToken]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__serviceName release_stub];
  [__organization release_stub];
  [__humanToken release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) serviceName {
  return [[__serviceName retain_stub] autorelease_stub];
}

- (void) setServiceName: (NSString *) serviceName {
  [serviceName retain_stub];
  [__serviceName release_stub];
  __serviceName = serviceName;
  __serviceName_isset = YES;
}

- (BOOL) serviceNameIsSet {
  return __serviceName_isset;
}

- (void) unsetServiceName {
  [__serviceName release_stub];
  __serviceName = nil;
  __serviceName_isset = NO;
}

- (NSString *) organization {
  return [[__organization retain_stub] autorelease_stub];
}

- (void) setOrganization: (NSString *) organization {
  [organization retain_stub];
  [__organization release_stub];
  __organization = organization;
  __organization_isset = YES;
}

- (BOOL) organizationIsSet {
  return __organization_isset;
}

- (void) unsetOrganization {
  [__organization release_stub];
  __organization = nil;
  __organization_isset = NO;
}

- (BOOL) shared {
  return __shared;
}

- (void) setShared: (BOOL) shared {
  __shared = shared;
  __shared_isset = YES;
}

- (BOOL) sharedIsSet {
  return __shared_isset;
}

- (void) unsetShared {
  __shared_isset = NO;
}

- (BananaAuthentication_HumanToken *) humanToken {
  return [[__humanToken retain_stub] autorelease_stub];
}

- (void) setHumanToken: (BananaAuthentication_HumanToken *) humanToken {
  [humanToken retain_stub];
  [__humanToken release_stub];
  __humanToken = humanToken;
  __humanToken_isset = YES;
}

- (BOOL) humanTokenIsSet {
  return __humanToken_isset;
}

- (void) unsetHumanToken {
  [__humanToken release_stub];
  __humanToken = nil;
  __humanToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setServiceName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrganization: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setShared: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_HumanToken *fieldValue = [[BananaAuthentication_HumanToken alloc] init];
          [fieldValue read: inProtocol];
          [self setHumanToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SubscribeToServiceRequest"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serviceName_isset) {
    if (__serviceName != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __serviceName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__organization_isset) {
    if (__organization != nil) {
      [outProtocol writeFieldBeginWithName: @"organization" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __organization];
      [outProtocol writeFieldEnd];
    }
  }
  if (__shared_isset) {
    [outProtocol writeFieldBeginWithName: @"shared" type: TType_BOOL fieldID: 4];
    [outProtocol writeBool: __shared];
    [outProtocol writeFieldEnd];
  }
  if (__humanToken_isset) {
    if (__humanToken != nil) {
      [outProtocol writeFieldBeginWithName: @"humanToken" type: TType_STRUCT fieldID: 5];
      [__humanToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SubscribeToServiceRequest("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",serviceName:"];
  [ms appendFormat: @"\"%@\"", __serviceName];
  [ms appendString: @",organization:"];
  [ms appendFormat: @"\"%@\"", __organization];
  [ms appendString: @",shared:"];
  [ms appendFormat: @"%i", __shared];
  [ms appendString: @",humanToken:"];
  [ms appendFormat: @"%@", __humanToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_SubscribeToServiceResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMessage: (NSString *) message channel: (BananaService_BananaChannel) channel
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  __channel = [channel retain_stub];
  __channel_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"channel"])
  {
    __channel = [[decoder decodeObjectForKey: @"channel"] retain_stub];
    __channel_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__channel_isset)
  {
    [encoder encodeObject: __channel forKey: @"channel"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __channel_isset ? 2654435761 : 0;
  if (__channel_isset)
  {
    hash = (hash * 31) ^ [__channel hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SubscribeToServiceResponse class]]) {
    return NO;
  }
  BananaService_SubscribeToServiceResponse *other = (BananaService_SubscribeToServiceResponse *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__channel_isset != other->__channel_isset) ||
      (__channel_isset && ((__channel || other->__channel) && ![__channel isEqual:other->__channel]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [__channel release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (BananaChannels_BananaChannel *) channel {
  return [[__channel retain_stub] autorelease_stub];
}

- (void) setChannel: (BananaChannels_BananaChannel *) channel {
  [channel retain_stub];
  [__channel release_stub];
  __channel = channel;
  __channel_isset = YES;
}

- (BOOL) channelIsSet {
  return __channel_isset;
}

- (void) unsetChannel {
  [__channel release_stub];
  __channel = nil;
  __channel_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaChannels_BananaChannel *fieldValue = [[BananaChannels_BananaChannel alloc] init];
          [fieldValue read: inProtocol];
          [self setChannel: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SubscribeToServiceResponse"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__channel_isset) {
    if (__channel != nil) {
      [outProtocol writeFieldBeginWithName: @"channel" type: TType_STRUCT fieldID: 2];
      [__channel write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SubscribeToServiceResponse("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",channel:"];
  [ms appendFormat: @"%@", __channel];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_RegisterHealthCheckRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEndpoint: (BananaService_Endpoint) endpoint humanToken: (BananaService_HumanToken) humanToken
{
  self = [super init];
  __endpoint = [endpoint retain_stub];
  __endpoint_isset = YES;
  __humanToken = [humanToken retain_stub];
  __humanToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"endpoint"])
  {
    __endpoint = [[decoder decodeObjectForKey: @"endpoint"] retain_stub];
    __endpoint_isset = YES;
  }
  if ([decoder containsValueForKey: @"humanToken"])
  {
    __humanToken = [[decoder decodeObjectForKey: @"humanToken"] retain_stub];
    __humanToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__endpoint_isset)
  {
    [encoder encodeObject: __endpoint forKey: @"endpoint"];
  }
  if (__humanToken_isset)
  {
    [encoder encodeObject: __humanToken forKey: @"humanToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __endpoint_isset ? 2654435761 : 0;
  if (__endpoint_isset)
  {
    hash = (hash * 31) ^ [__endpoint hash];
  }
  hash = (hash * 31) ^ __humanToken_isset ? 2654435761 : 0;
  if (__humanToken_isset)
  {
    hash = (hash * 31) ^ [__humanToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_RegisterHealthCheckRequest class]]) {
    return NO;
  }
  BananaService_RegisterHealthCheckRequest *other = (BananaService_RegisterHealthCheckRequest *)anObject;
  if ((__endpoint_isset != other->__endpoint_isset) ||
      (__endpoint_isset && ((__endpoint || other->__endpoint) && ![__endpoint isEqual:other->__endpoint]))) {
    return NO;
  }
  if ((__humanToken_isset != other->__humanToken_isset) ||
      (__humanToken_isset && ((__humanToken || other->__humanToken) && ![__humanToken isEqual:other->__humanToken]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__endpoint release_stub];
  [__humanToken release_stub];
  [super dealloc_stub];
}

- (BananaEndpoint_Endpoint *) endpoint {
  return [[__endpoint retain_stub] autorelease_stub];
}

- (void) setEndpoint: (BananaEndpoint_Endpoint *) endpoint {
  [endpoint retain_stub];
  [__endpoint release_stub];
  __endpoint = endpoint;
  __endpoint_isset = YES;
}

- (BOOL) endpointIsSet {
  return __endpoint_isset;
}

- (void) unsetEndpoint {
  [__endpoint release_stub];
  __endpoint = nil;
  __endpoint_isset = NO;
}

- (BananaAuthentication_HumanToken *) humanToken {
  return [[__humanToken retain_stub] autorelease_stub];
}

- (void) setHumanToken: (BananaAuthentication_HumanToken *) humanToken {
  [humanToken retain_stub];
  [__humanToken release_stub];
  __humanToken = humanToken;
  __humanToken_isset = YES;
}

- (BOOL) humanTokenIsSet {
  return __humanToken_isset;
}

- (void) unsetHumanToken {
  [__humanToken release_stub];
  __humanToken = nil;
  __humanToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaEndpoint_Endpoint *fieldValue = [[BananaEndpoint_Endpoint alloc] init];
          [fieldValue read: inProtocol];
          [self setEndpoint: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_HumanToken *fieldValue = [[BananaAuthentication_HumanToken alloc] init];
          [fieldValue read: inProtocol];
          [self setHumanToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegisterHealthCheckRequest"];
  if (__endpoint_isset) {
    if (__endpoint != nil) {
      [outProtocol writeFieldBeginWithName: @"endpoint" type: TType_STRUCT fieldID: 1];
      [__endpoint write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__humanToken_isset) {
    if (__humanToken != nil) {
      [outProtocol writeFieldBeginWithName: @"humanToken" type: TType_STRUCT fieldID: 2];
      [__humanToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_RegisterHealthCheckRequest("];
  [ms appendString: @"endpoint:"];
  [ms appendFormat: @"%@", __endpoint];
  [ms appendString: @",humanToken:"];
  [ms appendFormat: @"%@", __humanToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_RegisterHealthCheckResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMessage: (NSString *) message
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_RegisterHealthCheckResponse class]]) {
    return NO;
  }
  BananaService_RegisterHealthCheckResponse *other = (BananaService_RegisterHealthCheckResponse *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegisterHealthCheckResponse"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_RegisterHealthCheckResponse("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_RenewServiceTokenRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithServiceToken: (BananaService_ServiceToken) serviceToken timePeriod: (Banana_TimePeriod *) timePeriod humanToken: (BananaService_HumanToken) humanToken
{
  self = [super init];
  __serviceToken = [serviceToken retain_stub];
  __serviceToken_isset = YES;
  __timePeriod = [timePeriod retain_stub];
  __timePeriod_isset = YES;
  __humanToken = [humanToken retain_stub];
  __humanToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"serviceToken"])
  {
    __serviceToken = [[decoder decodeObjectForKey: @"serviceToken"] retain_stub];
    __serviceToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"timePeriod"])
  {
    __timePeriod = [[decoder decodeObjectForKey: @"timePeriod"] retain_stub];
    __timePeriod_isset = YES;
  }
  if ([decoder containsValueForKey: @"humanToken"])
  {
    __humanToken = [[decoder decodeObjectForKey: @"humanToken"] retain_stub];
    __humanToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__serviceToken_isset)
  {
    [encoder encodeObject: __serviceToken forKey: @"serviceToken"];
  }
  if (__timePeriod_isset)
  {
    [encoder encodeObject: __timePeriod forKey: @"timePeriod"];
  }
  if (__humanToken_isset)
  {
    [encoder encodeObject: __humanToken forKey: @"humanToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __serviceToken_isset ? 2654435761 : 0;
  if (__serviceToken_isset)
  {
    hash = (hash * 31) ^ [__serviceToken hash];
  }
  hash = (hash * 31) ^ __timePeriod_isset ? 2654435761 : 0;
  if (__timePeriod_isset)
  {
    hash = (hash * 31) ^ [__timePeriod hash];
  }
  hash = (hash * 31) ^ __humanToken_isset ? 2654435761 : 0;
  if (__humanToken_isset)
  {
    hash = (hash * 31) ^ [__humanToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_RenewServiceTokenRequest class]]) {
    return NO;
  }
  BananaService_RenewServiceTokenRequest *other = (BananaService_RenewServiceTokenRequest *)anObject;
  if ((__serviceToken_isset != other->__serviceToken_isset) ||
      (__serviceToken_isset && ((__serviceToken || other->__serviceToken) && ![__serviceToken isEqual:other->__serviceToken]))) {
    return NO;
  }
  if ((__timePeriod_isset != other->__timePeriod_isset) ||
      (__timePeriod_isset && ((__timePeriod || other->__timePeriod) && ![__timePeriod isEqual:other->__timePeriod]))) {
    return NO;
  }
  if ((__humanToken_isset != other->__humanToken_isset) ||
      (__humanToken_isset && ((__humanToken || other->__humanToken) && ![__humanToken isEqual:other->__humanToken]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__serviceToken release_stub];
  [__timePeriod release_stub];
  [__humanToken release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_ServiceToken *) serviceToken {
  return [[__serviceToken retain_stub] autorelease_stub];
}

- (void) setServiceToken: (BananaAuthentication_ServiceToken *) serviceToken {
  [serviceToken retain_stub];
  [__serviceToken release_stub];
  __serviceToken = serviceToken;
  __serviceToken_isset = YES;
}

- (BOOL) serviceTokenIsSet {
  return __serviceToken_isset;
}

- (void) unsetServiceToken {
  [__serviceToken release_stub];
  __serviceToken = nil;
  __serviceToken_isset = NO;
}

- (Banana_TimePeriod *) timePeriod {
  return [[__timePeriod retain_stub] autorelease_stub];
}

- (void) setTimePeriod: (Banana_TimePeriod *) timePeriod {
  [timePeriod retain_stub];
  [__timePeriod release_stub];
  __timePeriod = timePeriod;
  __timePeriod_isset = YES;
}

- (BOOL) timePeriodIsSet {
  return __timePeriod_isset;
}

- (void) unsetTimePeriod {
  [__timePeriod release_stub];
  __timePeriod = nil;
  __timePeriod_isset = NO;
}

- (BananaAuthentication_HumanToken *) humanToken {
  return [[__humanToken retain_stub] autorelease_stub];
}

- (void) setHumanToken: (BananaAuthentication_HumanToken *) humanToken {
  [humanToken retain_stub];
  [__humanToken release_stub];
  __humanToken = humanToken;
  __humanToken_isset = YES;
}

- (BOOL) humanTokenIsSet {
  return __humanToken_isset;
}

- (void) unsetHumanToken {
  [__humanToken release_stub];
  __humanToken = nil;
  __humanToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_ServiceToken *fieldValue = [[BananaAuthentication_ServiceToken alloc] init];
          [fieldValue read: inProtocol];
          [self setServiceToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Banana_TimePeriod *fieldValue = [[Banana_TimePeriod alloc] init];
          [fieldValue read: inProtocol];
          [self setTimePeriod: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_HumanToken *fieldValue = [[BananaAuthentication_HumanToken alloc] init];
          [fieldValue read: inProtocol];
          [self setHumanToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RenewServiceTokenRequest"];
  if (__serviceToken_isset) {
    if (__serviceToken != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceToken" type: TType_STRUCT fieldID: 1];
      [__serviceToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__timePeriod_isset) {
    if (__timePeriod != nil) {
      [outProtocol writeFieldBeginWithName: @"timePeriod" type: TType_STRUCT fieldID: 2];
      [__timePeriod write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__humanToken_isset) {
    if (__humanToken != nil) {
      [outProtocol writeFieldBeginWithName: @"humanToken" type: TType_STRUCT fieldID: 3];
      [__humanToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_RenewServiceTokenRequest("];
  [ms appendString: @"serviceToken:"];
  [ms appendFormat: @"%@", __serviceToken];
  [ms appendString: @",timePeriod:"];
  [ms appendFormat: @"%@", __timePeriod];
  [ms appendString: @",humanToken:"];
  [ms appendFormat: @"%@", __humanToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_RenewServiceTokenResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithServiceToken: (BananaService_ServiceToken) serviceToken
{
  self = [super init];
  __serviceToken = [serviceToken retain_stub];
  __serviceToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"serviceToken"])
  {
    __serviceToken = [[decoder decodeObjectForKey: @"serviceToken"] retain_stub];
    __serviceToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__serviceToken_isset)
  {
    [encoder encodeObject: __serviceToken forKey: @"serviceToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __serviceToken_isset ? 2654435761 : 0;
  if (__serviceToken_isset)
  {
    hash = (hash * 31) ^ [__serviceToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_RenewServiceTokenResponse class]]) {
    return NO;
  }
  BananaService_RenewServiceTokenResponse *other = (BananaService_RenewServiceTokenResponse *)anObject;
  if ((__serviceToken_isset != other->__serviceToken_isset) ||
      (__serviceToken_isset && ((__serviceToken || other->__serviceToken) && ![__serviceToken isEqual:other->__serviceToken]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__serviceToken release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_ServiceToken *) serviceToken {
  return [[__serviceToken retain_stub] autorelease_stub];
}

- (void) setServiceToken: (BananaAuthentication_ServiceToken *) serviceToken {
  [serviceToken retain_stub];
  [__serviceToken release_stub];
  __serviceToken = serviceToken;
  __serviceToken_isset = YES;
}

- (BOOL) serviceTokenIsSet {
  return __serviceToken_isset;
}

- (void) unsetServiceToken {
  [__serviceToken release_stub];
  __serviceToken = nil;
  __serviceToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_ServiceToken *fieldValue = [[BananaAuthentication_ServiceToken alloc] init];
          [fieldValue read: inProtocol];
          [self setServiceToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RenewServiceTokenResponse"];
  if (__serviceToken_isset) {
    if (__serviceToken != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceToken" type: TType_STRUCT fieldID: 1];
      [__serviceToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_RenewServiceTokenResponse("];
  [ms appendString: @"serviceToken:"];
  [ms appendFormat: @"%@", __serviceToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_RegenerateTokenRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithServiceId: (NSString *) serviceId humanToken: (BananaService_HumanToken) humanToken
{
  self = [super init];
  __serviceId = [serviceId retain_stub];
  __serviceId_isset = YES;
  __humanToken = [humanToken retain_stub];
  __humanToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"serviceId"])
  {
    __serviceId = [[decoder decodeObjectForKey: @"serviceId"] retain_stub];
    __serviceId_isset = YES;
  }
  if ([decoder containsValueForKey: @"humanToken"])
  {
    __humanToken = [[decoder decodeObjectForKey: @"humanToken"] retain_stub];
    __humanToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__serviceId_isset)
  {
    [encoder encodeObject: __serviceId forKey: @"serviceId"];
  }
  if (__humanToken_isset)
  {
    [encoder encodeObject: __humanToken forKey: @"humanToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __serviceId_isset ? 2654435761 : 0;
  if (__serviceId_isset)
  {
    hash = (hash * 31) ^ [__serviceId hash];
  }
  hash = (hash * 31) ^ __humanToken_isset ? 2654435761 : 0;
  if (__humanToken_isset)
  {
    hash = (hash * 31) ^ [__humanToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_RegenerateTokenRequest class]]) {
    return NO;
  }
  BananaService_RegenerateTokenRequest *other = (BananaService_RegenerateTokenRequest *)anObject;
  if ((__serviceId_isset != other->__serviceId_isset) ||
      (__serviceId_isset && ((__serviceId || other->__serviceId) && ![__serviceId isEqual:other->__serviceId]))) {
    return NO;
  }
  if ((__humanToken_isset != other->__humanToken_isset) ||
      (__humanToken_isset && ((__humanToken || other->__humanToken) && ![__humanToken isEqual:other->__humanToken]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__serviceId release_stub];
  [__humanToken release_stub];
  [super dealloc_stub];
}

- (NSString *) serviceId {
  return [[__serviceId retain_stub] autorelease_stub];
}

- (void) setServiceId: (NSString *) serviceId {
  [serviceId retain_stub];
  [__serviceId release_stub];
  __serviceId = serviceId;
  __serviceId_isset = YES;
}

- (BOOL) serviceIdIsSet {
  return __serviceId_isset;
}

- (void) unsetServiceId {
  [__serviceId release_stub];
  __serviceId = nil;
  __serviceId_isset = NO;
}

- (BananaAuthentication_HumanToken *) humanToken {
  return [[__humanToken retain_stub] autorelease_stub];
}

- (void) setHumanToken: (BananaAuthentication_HumanToken *) humanToken {
  [humanToken retain_stub];
  [__humanToken release_stub];
  __humanToken = humanToken;
  __humanToken_isset = YES;
}

- (BOOL) humanTokenIsSet {
  return __humanToken_isset;
}

- (void) unsetHumanToken {
  [__humanToken release_stub];
  __humanToken = nil;
  __humanToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setServiceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_HumanToken *fieldValue = [[BananaAuthentication_HumanToken alloc] init];
          [fieldValue read: inProtocol];
          [self setHumanToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegenerateTokenRequest"];
  if (__serviceId_isset) {
    if (__serviceId != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __serviceId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__humanToken_isset) {
    if (__humanToken != nil) {
      [outProtocol writeFieldBeginWithName: @"humanToken" type: TType_STRUCT fieldID: 2];
      [__humanToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_RegenerateTokenRequest("];
  [ms appendString: @"serviceId:"];
  [ms appendFormat: @"\"%@\"", __serviceId];
  [ms appendString: @",humanToken:"];
  [ms appendFormat: @"%@", __humanToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_RegenerateTokenResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithServiceToken: (BananaService_ServiceToken) serviceToken
{
  self = [super init];
  __serviceToken = [serviceToken retain_stub];
  __serviceToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"serviceToken"])
  {
    __serviceToken = [[decoder decodeObjectForKey: @"serviceToken"] retain_stub];
    __serviceToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__serviceToken_isset)
  {
    [encoder encodeObject: __serviceToken forKey: @"serviceToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __serviceToken_isset ? 2654435761 : 0;
  if (__serviceToken_isset)
  {
    hash = (hash * 31) ^ [__serviceToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_RegenerateTokenResponse class]]) {
    return NO;
  }
  BananaService_RegenerateTokenResponse *other = (BananaService_RegenerateTokenResponse *)anObject;
  if ((__serviceToken_isset != other->__serviceToken_isset) ||
      (__serviceToken_isset && ((__serviceToken || other->__serviceToken) && ![__serviceToken isEqual:other->__serviceToken]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__serviceToken release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_ServiceToken *) serviceToken {
  return [[__serviceToken retain_stub] autorelease_stub];
}

- (void) setServiceToken: (BananaAuthentication_ServiceToken *) serviceToken {
  [serviceToken retain_stub];
  [__serviceToken release_stub];
  __serviceToken = serviceToken;
  __serviceToken_isset = YES;
}

- (BOOL) serviceTokenIsSet {
  return __serviceToken_isset;
}

- (void) unsetServiceToken {
  [__serviceToken release_stub];
  __serviceToken = nil;
  __serviceToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_ServiceToken *fieldValue = [[BananaAuthentication_ServiceToken alloc] init];
          [fieldValue read: inProtocol];
          [self setServiceToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegenerateTokenResponse"];
  if (__serviceToken_isset) {
    if (__serviceToken != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceToken" type: TType_STRUCT fieldID: 1];
      [__serviceToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_RegenerateTokenResponse("];
  [ms appendString: @"serviceToken:"];
  [ms appendFormat: @"%@", __serviceToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_DeleteMessageRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.messageIds = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHumanToken: (BananaService_HumanToken) humanToken messageId: (NSString *) messageId serviceId: (NSString *) serviceId messageIds: (NSMutableArray *) messageIds
{
  self = [super init];
  __humanToken = [humanToken retain_stub];
  __humanToken_isset = YES;
  __messageId = [messageId retain_stub];
  __messageId_isset = YES;
  __serviceId = [serviceId retain_stub];
  __serviceId_isset = YES;
  __messageIds = [messageIds retain_stub];
  __messageIds_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"humanToken"])
  {
    __humanToken = [[decoder decodeObjectForKey: @"humanToken"] retain_stub];
    __humanToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"messageId"])
  {
    __messageId = [[decoder decodeObjectForKey: @"messageId"] retain_stub];
    __messageId_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceId"])
  {
    __serviceId = [[decoder decodeObjectForKey: @"serviceId"] retain_stub];
    __serviceId_isset = YES;
  }
  if ([decoder containsValueForKey: @"messageIds"])
  {
    __messageIds = [[decoder decodeObjectForKey: @"messageIds"] retain_stub];
    __messageIds_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__humanToken_isset)
  {
    [encoder encodeObject: __humanToken forKey: @"humanToken"];
  }
  if (__messageId_isset)
  {
    [encoder encodeObject: __messageId forKey: @"messageId"];
  }
  if (__serviceId_isset)
  {
    [encoder encodeObject: __serviceId forKey: @"serviceId"];
  }
  if (__messageIds_isset)
  {
    [encoder encodeObject: __messageIds forKey: @"messageIds"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __humanToken_isset ? 2654435761 : 0;
  if (__humanToken_isset)
  {
    hash = (hash * 31) ^ [__humanToken hash];
  }
  hash = (hash * 31) ^ __messageId_isset ? 2654435761 : 0;
  if (__messageId_isset)
  {
    hash = (hash * 31) ^ [__messageId hash];
  }
  hash = (hash * 31) ^ __serviceId_isset ? 2654435761 : 0;
  if (__serviceId_isset)
  {
    hash = (hash * 31) ^ [__serviceId hash];
  }
  hash = (hash * 31) ^ __messageIds_isset ? 2654435761 : 0;
  if (__messageIds_isset)
  {
    hash = (hash * 31) ^ [__messageIds hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_DeleteMessageRequest class]]) {
    return NO;
  }
  BananaService_DeleteMessageRequest *other = (BananaService_DeleteMessageRequest *)anObject;
  if ((__humanToken_isset != other->__humanToken_isset) ||
      (__humanToken_isset && ((__humanToken || other->__humanToken) && ![__humanToken isEqual:other->__humanToken]))) {
    return NO;
  }
  if ((__messageId_isset != other->__messageId_isset) ||
      (__messageId_isset && ((__messageId || other->__messageId) && ![__messageId isEqual:other->__messageId]))) {
    return NO;
  }
  if ((__serviceId_isset != other->__serviceId_isset) ||
      (__serviceId_isset && ((__serviceId || other->__serviceId) && ![__serviceId isEqual:other->__serviceId]))) {
    return NO;
  }
  if ((__messageIds_isset != other->__messageIds_isset) ||
      (__messageIds_isset && ((__messageIds || other->__messageIds) && ![__messageIds isEqual:other->__messageIds]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__humanToken release_stub];
  [__messageId release_stub];
  [__serviceId release_stub];
  [__messageIds release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_HumanToken *) humanToken {
  return [[__humanToken retain_stub] autorelease_stub];
}

- (void) setHumanToken: (BananaAuthentication_HumanToken *) humanToken {
  [humanToken retain_stub];
  [__humanToken release_stub];
  __humanToken = humanToken;
  __humanToken_isset = YES;
}

- (BOOL) humanTokenIsSet {
  return __humanToken_isset;
}

- (void) unsetHumanToken {
  [__humanToken release_stub];
  __humanToken = nil;
  __humanToken_isset = NO;
}

- (NSString *) messageId {
  return [[__messageId retain_stub] autorelease_stub];
}

- (void) setMessageId: (NSString *) messageId {
  [messageId retain_stub];
  [__messageId release_stub];
  __messageId = messageId;
  __messageId_isset = YES;
}

- (BOOL) messageIdIsSet {
  return __messageId_isset;
}

- (void) unsetMessageId {
  [__messageId release_stub];
  __messageId = nil;
  __messageId_isset = NO;
}

- (NSString *) serviceId {
  return [[__serviceId retain_stub] autorelease_stub];
}

- (void) setServiceId: (NSString *) serviceId {
  [serviceId retain_stub];
  [__serviceId release_stub];
  __serviceId = serviceId;
  __serviceId_isset = YES;
}

- (BOOL) serviceIdIsSet {
  return __serviceId_isset;
}

- (void) unsetServiceId {
  [__serviceId release_stub];
  __serviceId = nil;
  __serviceId_isset = NO;
}

- (NSMutableArray *) messageIds {
  return [[__messageIds retain_stub] autorelease_stub];
}

- (void) setMessageIds: (NSMutableArray *) messageIds {
  [messageIds retain_stub];
  [__messageIds release_stub];
  __messageIds = messageIds;
  __messageIds_isset = YES;
}

- (BOOL) messageIdsIsSet {
  return __messageIds_isset;
}

- (void) unsetMessageIds {
  [__messageIds release_stub];
  __messageIds = nil;
  __messageIds_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_HumanToken *fieldValue = [[BananaAuthentication_HumanToken alloc] init];
          [fieldValue read: inProtocol];
          [self setHumanToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessageId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setServiceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2 = [inProtocol readString];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readListEnd];
          [self setMessageIds: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DeleteMessageRequest"];
  if (__humanToken_isset) {
    if (__humanToken != nil) {
      [outProtocol writeFieldBeginWithName: @"humanToken" type: TType_STRUCT fieldID: 1];
      [__humanToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__messageId_isset) {
    if (__messageId != nil) {
      [outProtocol writeFieldBeginWithName: @"messageId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __messageId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serviceId_isset) {
    if (__serviceId != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __serviceId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__messageIds_isset) {
    if (__messageIds != nil) {
      [outProtocol writeFieldBeginWithName: @"messageIds" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__messageIds count]];
        int idx4;
        for (idx4 = 0; idx4 < [__messageIds count]; idx4++)
        {
          [outProtocol writeString: [__messageIds objectAtIndex: idx4]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_DeleteMessageRequest("];
  [ms appendString: @"humanToken:"];
  [ms appendFormat: @"%@", __humanToken];
  [ms appendString: @",messageId:"];
  [ms appendFormat: @"\"%@\"", __messageId];
  [ms appendString: @",serviceId:"];
  [ms appendFormat: @"\"%@\"", __serviceId];
  [ms appendString: @",messageIds:"];
  [ms appendFormat: @"%@", __messageIds];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_DeleteMessageResponse

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_DeleteMessageResponse class]]) {
    return NO;
  }
  BananaService_DeleteMessageResponse *other = (BananaService_DeleteMessageResponse *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DeleteMessageResponse"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_DeleteMessageResponse("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_DeleteAllMessagesRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHumanToken: (BananaService_HumanToken) humanToken serviceId: (NSString *) serviceId
{
  self = [super init];
  __humanToken = [humanToken retain_stub];
  __humanToken_isset = YES;
  __serviceId = [serviceId retain_stub];
  __serviceId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"humanToken"])
  {
    __humanToken = [[decoder decodeObjectForKey: @"humanToken"] retain_stub];
    __humanToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceId"])
  {
    __serviceId = [[decoder decodeObjectForKey: @"serviceId"] retain_stub];
    __serviceId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__humanToken_isset)
  {
    [encoder encodeObject: __humanToken forKey: @"humanToken"];
  }
  if (__serviceId_isset)
  {
    [encoder encodeObject: __serviceId forKey: @"serviceId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __humanToken_isset ? 2654435761 : 0;
  if (__humanToken_isset)
  {
    hash = (hash * 31) ^ [__humanToken hash];
  }
  hash = (hash * 31) ^ __serviceId_isset ? 2654435761 : 0;
  if (__serviceId_isset)
  {
    hash = (hash * 31) ^ [__serviceId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_DeleteAllMessagesRequest class]]) {
    return NO;
  }
  BananaService_DeleteAllMessagesRequest *other = (BananaService_DeleteAllMessagesRequest *)anObject;
  if ((__humanToken_isset != other->__humanToken_isset) ||
      (__humanToken_isset && ((__humanToken || other->__humanToken) && ![__humanToken isEqual:other->__humanToken]))) {
    return NO;
  }
  if ((__serviceId_isset != other->__serviceId_isset) ||
      (__serviceId_isset && ((__serviceId || other->__serviceId) && ![__serviceId isEqual:other->__serviceId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__humanToken release_stub];
  [__serviceId release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_HumanToken *) humanToken {
  return [[__humanToken retain_stub] autorelease_stub];
}

- (void) setHumanToken: (BananaAuthentication_HumanToken *) humanToken {
  [humanToken retain_stub];
  [__humanToken release_stub];
  __humanToken = humanToken;
  __humanToken_isset = YES;
}

- (BOOL) humanTokenIsSet {
  return __humanToken_isset;
}

- (void) unsetHumanToken {
  [__humanToken release_stub];
  __humanToken = nil;
  __humanToken_isset = NO;
}

- (NSString *) serviceId {
  return [[__serviceId retain_stub] autorelease_stub];
}

- (void) setServiceId: (NSString *) serviceId {
  [serviceId retain_stub];
  [__serviceId release_stub];
  __serviceId = serviceId;
  __serviceId_isset = YES;
}

- (BOOL) serviceIdIsSet {
  return __serviceId_isset;
}

- (void) unsetServiceId {
  [__serviceId release_stub];
  __serviceId = nil;
  __serviceId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_HumanToken *fieldValue = [[BananaAuthentication_HumanToken alloc] init];
          [fieldValue read: inProtocol];
          [self setHumanToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setServiceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DeleteAllMessagesRequest"];
  if (__humanToken_isset) {
    if (__humanToken != nil) {
      [outProtocol writeFieldBeginWithName: @"humanToken" type: TType_STRUCT fieldID: 1];
      [__humanToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serviceId_isset) {
    if (__serviceId != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __serviceId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_DeleteAllMessagesRequest("];
  [ms appendString: @"humanToken:"];
  [ms appendFormat: @"%@", __humanToken];
  [ms appendString: @",serviceId:"];
  [ms appendFormat: @"\"%@\"", __serviceId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_HideMessageRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.messageIds = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHumanToken: (BananaService_HumanToken) humanToken messageId: (NSString *) messageId serviceId: (NSString *) serviceId messageIds: (NSMutableArray *) messageIds
{
  self = [super init];
  __humanToken = [humanToken retain_stub];
  __humanToken_isset = YES;
  __messageId = [messageId retain_stub];
  __messageId_isset = YES;
  __serviceId = [serviceId retain_stub];
  __serviceId_isset = YES;
  __messageIds = [messageIds retain_stub];
  __messageIds_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"humanToken"])
  {
    __humanToken = [[decoder decodeObjectForKey: @"humanToken"] retain_stub];
    __humanToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"messageId"])
  {
    __messageId = [[decoder decodeObjectForKey: @"messageId"] retain_stub];
    __messageId_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceId"])
  {
    __serviceId = [[decoder decodeObjectForKey: @"serviceId"] retain_stub];
    __serviceId_isset = YES;
  }
  if ([decoder containsValueForKey: @"messageIds"])
  {
    __messageIds = [[decoder decodeObjectForKey: @"messageIds"] retain_stub];
    __messageIds_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__humanToken_isset)
  {
    [encoder encodeObject: __humanToken forKey: @"humanToken"];
  }
  if (__messageId_isset)
  {
    [encoder encodeObject: __messageId forKey: @"messageId"];
  }
  if (__serviceId_isset)
  {
    [encoder encodeObject: __serviceId forKey: @"serviceId"];
  }
  if (__messageIds_isset)
  {
    [encoder encodeObject: __messageIds forKey: @"messageIds"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __humanToken_isset ? 2654435761 : 0;
  if (__humanToken_isset)
  {
    hash = (hash * 31) ^ [__humanToken hash];
  }
  hash = (hash * 31) ^ __messageId_isset ? 2654435761 : 0;
  if (__messageId_isset)
  {
    hash = (hash * 31) ^ [__messageId hash];
  }
  hash = (hash * 31) ^ __serviceId_isset ? 2654435761 : 0;
  if (__serviceId_isset)
  {
    hash = (hash * 31) ^ [__serviceId hash];
  }
  hash = (hash * 31) ^ __messageIds_isset ? 2654435761 : 0;
  if (__messageIds_isset)
  {
    hash = (hash * 31) ^ [__messageIds hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_HideMessageRequest class]]) {
    return NO;
  }
  BananaService_HideMessageRequest *other = (BananaService_HideMessageRequest *)anObject;
  if ((__humanToken_isset != other->__humanToken_isset) ||
      (__humanToken_isset && ((__humanToken || other->__humanToken) && ![__humanToken isEqual:other->__humanToken]))) {
    return NO;
  }
  if ((__messageId_isset != other->__messageId_isset) ||
      (__messageId_isset && ((__messageId || other->__messageId) && ![__messageId isEqual:other->__messageId]))) {
    return NO;
  }
  if ((__serviceId_isset != other->__serviceId_isset) ||
      (__serviceId_isset && ((__serviceId || other->__serviceId) && ![__serviceId isEqual:other->__serviceId]))) {
    return NO;
  }
  if ((__messageIds_isset != other->__messageIds_isset) ||
      (__messageIds_isset && ((__messageIds || other->__messageIds) && ![__messageIds isEqual:other->__messageIds]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__humanToken release_stub];
  [__messageId release_stub];
  [__serviceId release_stub];
  [__messageIds release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_HumanToken *) humanToken {
  return [[__humanToken retain_stub] autorelease_stub];
}

- (void) setHumanToken: (BananaAuthentication_HumanToken *) humanToken {
  [humanToken retain_stub];
  [__humanToken release_stub];
  __humanToken = humanToken;
  __humanToken_isset = YES;
}

- (BOOL) humanTokenIsSet {
  return __humanToken_isset;
}

- (void) unsetHumanToken {
  [__humanToken release_stub];
  __humanToken = nil;
  __humanToken_isset = NO;
}

- (NSString *) messageId {
  return [[__messageId retain_stub] autorelease_stub];
}

- (void) setMessageId: (NSString *) messageId {
  [messageId retain_stub];
  [__messageId release_stub];
  __messageId = messageId;
  __messageId_isset = YES;
}

- (BOOL) messageIdIsSet {
  return __messageId_isset;
}

- (void) unsetMessageId {
  [__messageId release_stub];
  __messageId = nil;
  __messageId_isset = NO;
}

- (NSString *) serviceId {
  return [[__serviceId retain_stub] autorelease_stub];
}

- (void) setServiceId: (NSString *) serviceId {
  [serviceId retain_stub];
  [__serviceId release_stub];
  __serviceId = serviceId;
  __serviceId_isset = YES;
}

- (BOOL) serviceIdIsSet {
  return __serviceId_isset;
}

- (void) unsetServiceId {
  [__serviceId release_stub];
  __serviceId = nil;
  __serviceId_isset = NO;
}

- (NSMutableArray *) messageIds {
  return [[__messageIds retain_stub] autorelease_stub];
}

- (void) setMessageIds: (NSMutableArray *) messageIds {
  [messageIds retain_stub];
  [__messageIds release_stub];
  __messageIds = messageIds;
  __messageIds_isset = YES;
}

- (BOOL) messageIdsIsSet {
  return __messageIds_isset;
}

- (void) unsetMessageIds {
  [__messageIds release_stub];
  __messageIds = nil;
  __messageIds_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_HumanToken *fieldValue = [[BananaAuthentication_HumanToken alloc] init];
          [fieldValue read: inProtocol];
          [self setHumanToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessageId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setServiceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            NSString * _elem7 = [inProtocol readString];
            [fieldValue addObject: _elem7];
          }
          [inProtocol readListEnd];
          [self setMessageIds: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HideMessageRequest"];
  if (__humanToken_isset) {
    if (__humanToken != nil) {
      [outProtocol writeFieldBeginWithName: @"humanToken" type: TType_STRUCT fieldID: 1];
      [__humanToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__messageId_isset) {
    if (__messageId != nil) {
      [outProtocol writeFieldBeginWithName: @"messageId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __messageId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serviceId_isset) {
    if (__serviceId != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __serviceId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__messageIds_isset) {
    if (__messageIds != nil) {
      [outProtocol writeFieldBeginWithName: @"messageIds" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__messageIds count]];
        int idx9;
        for (idx9 = 0; idx9 < [__messageIds count]; idx9++)
        {
          [outProtocol writeString: [__messageIds objectAtIndex: idx9]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_HideMessageRequest("];
  [ms appendString: @"humanToken:"];
  [ms appendFormat: @"%@", __humanToken];
  [ms appendString: @",messageId:"];
  [ms appendFormat: @"\"%@\"", __messageId];
  [ms appendString: @",serviceId:"];
  [ms appendFormat: @"\"%@\"", __serviceId];
  [ms appendString: @",messageIds:"];
  [ms appendFormat: @"%@", __messageIds];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_HideMessageResponse

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_HideMessageResponse class]]) {
    return NO;
  }
  BananaService_HideMessageResponse *other = (BananaService_HideMessageResponse *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HideMessageResponse"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_HideMessageResponse("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_HideAllMessagesRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHumanToken: (BananaService_HumanToken) humanToken serviceId: (NSString *) serviceId
{
  self = [super init];
  __humanToken = [humanToken retain_stub];
  __humanToken_isset = YES;
  __serviceId = [serviceId retain_stub];
  __serviceId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"humanToken"])
  {
    __humanToken = [[decoder decodeObjectForKey: @"humanToken"] retain_stub];
    __humanToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceId"])
  {
    __serviceId = [[decoder decodeObjectForKey: @"serviceId"] retain_stub];
    __serviceId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__humanToken_isset)
  {
    [encoder encodeObject: __humanToken forKey: @"humanToken"];
  }
  if (__serviceId_isset)
  {
    [encoder encodeObject: __serviceId forKey: @"serviceId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __humanToken_isset ? 2654435761 : 0;
  if (__humanToken_isset)
  {
    hash = (hash * 31) ^ [__humanToken hash];
  }
  hash = (hash * 31) ^ __serviceId_isset ? 2654435761 : 0;
  if (__serviceId_isset)
  {
    hash = (hash * 31) ^ [__serviceId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_HideAllMessagesRequest class]]) {
    return NO;
  }
  BananaService_HideAllMessagesRequest *other = (BananaService_HideAllMessagesRequest *)anObject;
  if ((__humanToken_isset != other->__humanToken_isset) ||
      (__humanToken_isset && ((__humanToken || other->__humanToken) && ![__humanToken isEqual:other->__humanToken]))) {
    return NO;
  }
  if ((__serviceId_isset != other->__serviceId_isset) ||
      (__serviceId_isset && ((__serviceId || other->__serviceId) && ![__serviceId isEqual:other->__serviceId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__humanToken release_stub];
  [__serviceId release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_HumanToken *) humanToken {
  return [[__humanToken retain_stub] autorelease_stub];
}

- (void) setHumanToken: (BananaAuthentication_HumanToken *) humanToken {
  [humanToken retain_stub];
  [__humanToken release_stub];
  __humanToken = humanToken;
  __humanToken_isset = YES;
}

- (BOOL) humanTokenIsSet {
  return __humanToken_isset;
}

- (void) unsetHumanToken {
  [__humanToken release_stub];
  __humanToken = nil;
  __humanToken_isset = NO;
}

- (NSString *) serviceId {
  return [[__serviceId retain_stub] autorelease_stub];
}

- (void) setServiceId: (NSString *) serviceId {
  [serviceId retain_stub];
  [__serviceId release_stub];
  __serviceId = serviceId;
  __serviceId_isset = YES;
}

- (BOOL) serviceIdIsSet {
  return __serviceId_isset;
}

- (void) unsetServiceId {
  [__serviceId release_stub];
  __serviceId = nil;
  __serviceId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_HumanToken *fieldValue = [[BananaAuthentication_HumanToken alloc] init];
          [fieldValue read: inProtocol];
          [self setHumanToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setServiceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HideAllMessagesRequest"];
  if (__humanToken_isset) {
    if (__humanToken != nil) {
      [outProtocol writeFieldBeginWithName: @"humanToken" type: TType_STRUCT fieldID: 1];
      [__humanToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serviceId_isset) {
    if (__serviceId != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __serviceId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_HideAllMessagesRequest("];
  [ms appendString: @"humanToken:"];
  [ms appendFormat: @"%@", __humanToken];
  [ms appendString: @",serviceId:"];
  [ms appendFormat: @"\"%@\"", __serviceId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_HideAllMessagesResponse

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_HideAllMessagesResponse class]]) {
    return NO;
  }
  BananaService_HideAllMessagesResponse *other = (BananaService_HideAllMessagesResponse *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HideAllMessagesResponse"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_HideAllMessagesResponse("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_SaveChannelRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHumanToken: (BananaService_HumanToken) humanToken channel: (BananaService_BananaChannel) channel
{
  self = [super init];
  __humanToken = [humanToken retain_stub];
  __humanToken_isset = YES;
  __channel = [channel retain_stub];
  __channel_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"humanToken"])
  {
    __humanToken = [[decoder decodeObjectForKey: @"humanToken"] retain_stub];
    __humanToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"channel"])
  {
    __channel = [[decoder decodeObjectForKey: @"channel"] retain_stub];
    __channel_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__humanToken_isset)
  {
    [encoder encodeObject: __humanToken forKey: @"humanToken"];
  }
  if (__channel_isset)
  {
    [encoder encodeObject: __channel forKey: @"channel"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __humanToken_isset ? 2654435761 : 0;
  if (__humanToken_isset)
  {
    hash = (hash * 31) ^ [__humanToken hash];
  }
  hash = (hash * 31) ^ __channel_isset ? 2654435761 : 0;
  if (__channel_isset)
  {
    hash = (hash * 31) ^ [__channel hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SaveChannelRequest class]]) {
    return NO;
  }
  BananaService_SaveChannelRequest *other = (BananaService_SaveChannelRequest *)anObject;
  if ((__humanToken_isset != other->__humanToken_isset) ||
      (__humanToken_isset && ((__humanToken || other->__humanToken) && ![__humanToken isEqual:other->__humanToken]))) {
    return NO;
  }
  if ((__channel_isset != other->__channel_isset) ||
      (__channel_isset && ((__channel || other->__channel) && ![__channel isEqual:other->__channel]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__humanToken release_stub];
  [__channel release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_HumanToken *) humanToken {
  return [[__humanToken retain_stub] autorelease_stub];
}

- (void) setHumanToken: (BananaAuthentication_HumanToken *) humanToken {
  [humanToken retain_stub];
  [__humanToken release_stub];
  __humanToken = humanToken;
  __humanToken_isset = YES;
}

- (BOOL) humanTokenIsSet {
  return __humanToken_isset;
}

- (void) unsetHumanToken {
  [__humanToken release_stub];
  __humanToken = nil;
  __humanToken_isset = NO;
}

- (BananaChannels_BananaChannel *) channel {
  return [[__channel retain_stub] autorelease_stub];
}

- (void) setChannel: (BananaChannels_BananaChannel *) channel {
  [channel retain_stub];
  [__channel release_stub];
  __channel = channel;
  __channel_isset = YES;
}

- (BOOL) channelIsSet {
  return __channel_isset;
}

- (void) unsetChannel {
  [__channel release_stub];
  __channel = nil;
  __channel_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_HumanToken *fieldValue = [[BananaAuthentication_HumanToken alloc] init];
          [fieldValue read: inProtocol];
          [self setHumanToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaChannels_BananaChannel *fieldValue = [[BananaChannels_BananaChannel alloc] init];
          [fieldValue read: inProtocol];
          [self setChannel: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SaveChannelRequest"];
  if (__humanToken_isset) {
    if (__humanToken != nil) {
      [outProtocol writeFieldBeginWithName: @"humanToken" type: TType_STRUCT fieldID: 1];
      [__humanToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__channel_isset) {
    if (__channel != nil) {
      [outProtocol writeFieldBeginWithName: @"channel" type: TType_STRUCT fieldID: 2];
      [__channel write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SaveChannelRequest("];
  [ms appendString: @"humanToken:"];
  [ms appendFormat: @"%@", __humanToken];
  [ms appendString: @",channel:"];
  [ms appendFormat: @"%@", __channel];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_SaveChannelResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMessage: (NSString *) message channel: (BananaService_BananaChannel) channel
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  __channel = [channel retain_stub];
  __channel_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"channel"])
  {
    __channel = [[decoder decodeObjectForKey: @"channel"] retain_stub];
    __channel_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__channel_isset)
  {
    [encoder encodeObject: __channel forKey: @"channel"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __channel_isset ? 2654435761 : 0;
  if (__channel_isset)
  {
    hash = (hash * 31) ^ [__channel hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SaveChannelResponse class]]) {
    return NO;
  }
  BananaService_SaveChannelResponse *other = (BananaService_SaveChannelResponse *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__channel_isset != other->__channel_isset) ||
      (__channel_isset && ((__channel || other->__channel) && ![__channel isEqual:other->__channel]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [__channel release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (BananaChannels_BananaChannel *) channel {
  return [[__channel retain_stub] autorelease_stub];
}

- (void) setChannel: (BananaChannels_BananaChannel *) channel {
  [channel retain_stub];
  [__channel release_stub];
  __channel = channel;
  __channel_isset = YES;
}

- (BOOL) channelIsSet {
  return __channel_isset;
}

- (void) unsetChannel {
  [__channel release_stub];
  __channel = nil;
  __channel_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaChannels_BananaChannel *fieldValue = [[BananaChannels_BananaChannel alloc] init];
          [fieldValue read: inProtocol];
          [self setChannel: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SaveChannelResponse"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__channel_isset) {
    if (__channel != nil) {
      [outProtocol writeFieldBeginWithName: @"channel" type: TType_STRUCT fieldID: 2];
      [__channel write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SaveChannelResponse("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",channel:"];
  [ms appendFormat: @"%@", __channel];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_RemoveSavedChannelRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHumanToken: (BananaService_HumanToken) humanToken channel: (BananaService_BananaChannel) channel
{
  self = [super init];
  __humanToken = [humanToken retain_stub];
  __humanToken_isset = YES;
  __channel = [channel retain_stub];
  __channel_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"humanToken"])
  {
    __humanToken = [[decoder decodeObjectForKey: @"humanToken"] retain_stub];
    __humanToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"channel"])
  {
    __channel = [[decoder decodeObjectForKey: @"channel"] retain_stub];
    __channel_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__humanToken_isset)
  {
    [encoder encodeObject: __humanToken forKey: @"humanToken"];
  }
  if (__channel_isset)
  {
    [encoder encodeObject: __channel forKey: @"channel"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __humanToken_isset ? 2654435761 : 0;
  if (__humanToken_isset)
  {
    hash = (hash * 31) ^ [__humanToken hash];
  }
  hash = (hash * 31) ^ __channel_isset ? 2654435761 : 0;
  if (__channel_isset)
  {
    hash = (hash * 31) ^ [__channel hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_RemoveSavedChannelRequest class]]) {
    return NO;
  }
  BananaService_RemoveSavedChannelRequest *other = (BananaService_RemoveSavedChannelRequest *)anObject;
  if ((__humanToken_isset != other->__humanToken_isset) ||
      (__humanToken_isset && ((__humanToken || other->__humanToken) && ![__humanToken isEqual:other->__humanToken]))) {
    return NO;
  }
  if ((__channel_isset != other->__channel_isset) ||
      (__channel_isset && ((__channel || other->__channel) && ![__channel isEqual:other->__channel]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__humanToken release_stub];
  [__channel release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_HumanToken *) humanToken {
  return [[__humanToken retain_stub] autorelease_stub];
}

- (void) setHumanToken: (BananaAuthentication_HumanToken *) humanToken {
  [humanToken retain_stub];
  [__humanToken release_stub];
  __humanToken = humanToken;
  __humanToken_isset = YES;
}

- (BOOL) humanTokenIsSet {
  return __humanToken_isset;
}

- (void) unsetHumanToken {
  [__humanToken release_stub];
  __humanToken = nil;
  __humanToken_isset = NO;
}

- (BananaChannels_BananaChannel *) channel {
  return [[__channel retain_stub] autorelease_stub];
}

- (void) setChannel: (BananaChannels_BananaChannel *) channel {
  [channel retain_stub];
  [__channel release_stub];
  __channel = channel;
  __channel_isset = YES;
}

- (BOOL) channelIsSet {
  return __channel_isset;
}

- (void) unsetChannel {
  [__channel release_stub];
  __channel = nil;
  __channel_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_HumanToken *fieldValue = [[BananaAuthentication_HumanToken alloc] init];
          [fieldValue read: inProtocol];
          [self setHumanToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaChannels_BananaChannel *fieldValue = [[BananaChannels_BananaChannel alloc] init];
          [fieldValue read: inProtocol];
          [self setChannel: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RemoveSavedChannelRequest"];
  if (__humanToken_isset) {
    if (__humanToken != nil) {
      [outProtocol writeFieldBeginWithName: @"humanToken" type: TType_STRUCT fieldID: 1];
      [__humanToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__channel_isset) {
    if (__channel != nil) {
      [outProtocol writeFieldBeginWithName: @"channel" type: TType_STRUCT fieldID: 2];
      [__channel write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_RemoveSavedChannelRequest("];
  [ms appendString: @"humanToken:"];
  [ms appendFormat: @"%@", __humanToken];
  [ms appendString: @",channel:"];
  [ms appendFormat: @"%@", __channel];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_RemoveSavedChannelResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMessage: (NSString *) message channel: (BananaService_BananaChannel) channel
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  __channel = [channel retain_stub];
  __channel_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"channel"])
  {
    __channel = [[decoder decodeObjectForKey: @"channel"] retain_stub];
    __channel_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__channel_isset)
  {
    [encoder encodeObject: __channel forKey: @"channel"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __channel_isset ? 2654435761 : 0;
  if (__channel_isset)
  {
    hash = (hash * 31) ^ [__channel hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_RemoveSavedChannelResponse class]]) {
    return NO;
  }
  BananaService_RemoveSavedChannelResponse *other = (BananaService_RemoveSavedChannelResponse *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__channel_isset != other->__channel_isset) ||
      (__channel_isset && ((__channel || other->__channel) && ![__channel isEqual:other->__channel]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [__channel release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (BananaChannels_BananaChannel *) channel {
  return [[__channel retain_stub] autorelease_stub];
}

- (void) setChannel: (BananaChannels_BananaChannel *) channel {
  [channel retain_stub];
  [__channel release_stub];
  __channel = channel;
  __channel_isset = YES;
}

- (BOOL) channelIsSet {
  return __channel_isset;
}

- (void) unsetChannel {
  [__channel release_stub];
  __channel = nil;
  __channel_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaChannels_BananaChannel *fieldValue = [[BananaChannels_BananaChannel alloc] init];
          [fieldValue read: inProtocol];
          [self setChannel: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RemoveSavedChannelResponse"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__channel_isset) {
    if (__channel != nil) {
      [outProtocol writeFieldBeginWithName: @"channel" type: TType_STRUCT fieldID: 2];
      [__channel write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_RemoveSavedChannelResponse("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",channel:"];
  [ms appendFormat: @"%@", __channel];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_SnoozeChannelRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHumanToken: (BananaService_HumanToken) humanToken channel: (BananaService_BananaChannel) channel
{
  self = [super init];
  __humanToken = [humanToken retain_stub];
  __humanToken_isset = YES;
  __channel = [channel retain_stub];
  __channel_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"humanToken"])
  {
    __humanToken = [[decoder decodeObjectForKey: @"humanToken"] retain_stub];
    __humanToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"channel"])
  {
    __channel = [[decoder decodeObjectForKey: @"channel"] retain_stub];
    __channel_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__humanToken_isset)
  {
    [encoder encodeObject: __humanToken forKey: @"humanToken"];
  }
  if (__channel_isset)
  {
    [encoder encodeObject: __channel forKey: @"channel"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __humanToken_isset ? 2654435761 : 0;
  if (__humanToken_isset)
  {
    hash = (hash * 31) ^ [__humanToken hash];
  }
  hash = (hash * 31) ^ __channel_isset ? 2654435761 : 0;
  if (__channel_isset)
  {
    hash = (hash * 31) ^ [__channel hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SnoozeChannelRequest class]]) {
    return NO;
  }
  BananaService_SnoozeChannelRequest *other = (BananaService_SnoozeChannelRequest *)anObject;
  if ((__humanToken_isset != other->__humanToken_isset) ||
      (__humanToken_isset && ((__humanToken || other->__humanToken) && ![__humanToken isEqual:other->__humanToken]))) {
    return NO;
  }
  if ((__channel_isset != other->__channel_isset) ||
      (__channel_isset && ((__channel || other->__channel) && ![__channel isEqual:other->__channel]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__humanToken release_stub];
  [__channel release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_HumanToken *) humanToken {
  return [[__humanToken retain_stub] autorelease_stub];
}

- (void) setHumanToken: (BananaAuthentication_HumanToken *) humanToken {
  [humanToken retain_stub];
  [__humanToken release_stub];
  __humanToken = humanToken;
  __humanToken_isset = YES;
}

- (BOOL) humanTokenIsSet {
  return __humanToken_isset;
}

- (void) unsetHumanToken {
  [__humanToken release_stub];
  __humanToken = nil;
  __humanToken_isset = NO;
}

- (BananaChannels_BananaChannel *) channel {
  return [[__channel retain_stub] autorelease_stub];
}

- (void) setChannel: (BananaChannels_BananaChannel *) channel {
  [channel retain_stub];
  [__channel release_stub];
  __channel = channel;
  __channel_isset = YES;
}

- (BOOL) channelIsSet {
  return __channel_isset;
}

- (void) unsetChannel {
  [__channel release_stub];
  __channel = nil;
  __channel_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_HumanToken *fieldValue = [[BananaAuthentication_HumanToken alloc] init];
          [fieldValue read: inProtocol];
          [self setHumanToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaChannels_BananaChannel *fieldValue = [[BananaChannels_BananaChannel alloc] init];
          [fieldValue read: inProtocol];
          [self setChannel: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SnoozeChannelRequest"];
  if (__humanToken_isset) {
    if (__humanToken != nil) {
      [outProtocol writeFieldBeginWithName: @"humanToken" type: TType_STRUCT fieldID: 1];
      [__humanToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__channel_isset) {
    if (__channel != nil) {
      [outProtocol writeFieldBeginWithName: @"channel" type: TType_STRUCT fieldID: 2];
      [__channel write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SnoozeChannelRequest("];
  [ms appendString: @"humanToken:"];
  [ms appendFormat: @"%@", __humanToken];
  [ms appendString: @",channel:"];
  [ms appendFormat: @"%@", __channel];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_SnoozeChannelResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMessage: (NSString *) message
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SnoozeChannelResponse class]]) {
    return NO;
  }
  BananaService_SnoozeChannelResponse *other = (BananaService_SnoozeChannelResponse *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SnoozeChannelResponse"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SnoozeChannelResponse("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_GetMyServicesRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHumanToken: (BananaService_HumanToken) humanToken
{
  self = [super init];
  __humanToken = [humanToken retain_stub];
  __humanToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"humanToken"])
  {
    __humanToken = [[decoder decodeObjectForKey: @"humanToken"] retain_stub];
    __humanToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__humanToken_isset)
  {
    [encoder encodeObject: __humanToken forKey: @"humanToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __humanToken_isset ? 2654435761 : 0;
  if (__humanToken_isset)
  {
    hash = (hash * 31) ^ [__humanToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetMyServicesRequest class]]) {
    return NO;
  }
  BananaService_GetMyServicesRequest *other = (BananaService_GetMyServicesRequest *)anObject;
  if ((__humanToken_isset != other->__humanToken_isset) ||
      (__humanToken_isset && ((__humanToken || other->__humanToken) && ![__humanToken isEqual:other->__humanToken]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__humanToken release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_HumanToken *) humanToken {
  return [[__humanToken retain_stub] autorelease_stub];
}

- (void) setHumanToken: (BananaAuthentication_HumanToken *) humanToken {
  [humanToken retain_stub];
  [__humanToken release_stub];
  __humanToken = humanToken;
  __humanToken_isset = YES;
}

- (BOOL) humanTokenIsSet {
  return __humanToken_isset;
}

- (void) unsetHumanToken {
  [__humanToken release_stub];
  __humanToken = nil;
  __humanToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_HumanToken *fieldValue = [[BananaAuthentication_HumanToken alloc] init];
          [fieldValue read: inProtocol];
          [self setHumanToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMyServicesRequest"];
  if (__humanToken_isset) {
    if (__humanToken != nil) {
      [outProtocol writeFieldBeginWithName: @"humanToken" type: TType_STRUCT fieldID: 1];
      [__humanToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetMyServicesRequest("];
  [ms appendString: @"humanToken:"];
  [ms appendFormat: @"%@", __humanToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_GetMyServicesResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithServices: (NSMutableArray *) services
{
  self = [super init];
  __services = [services retain_stub];
  __services_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"services"])
  {
    __services = [[decoder decodeObjectForKey: @"services"] retain_stub];
    __services_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__services_isset)
  {
    [encoder encodeObject: __services forKey: @"services"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __services_isset ? 2654435761 : 0;
  if (__services_isset)
  {
    hash = (hash * 31) ^ [__services hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetMyServicesResponse class]]) {
    return NO;
  }
  BananaService_GetMyServicesResponse *other = (BananaService_GetMyServicesResponse *)anObject;
  if ((__services_isset != other->__services_isset) ||
      (__services_isset && ((__services || other->__services) && ![__services isEqual:other->__services]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__services release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) services {
  return [[__services retain_stub] autorelease_stub];
}

- (void) setServices: (NSMutableArray *) services {
  [services retain_stub];
  [__services release_stub];
  __services = services;
  __services_isset = YES;
}

- (BOOL) servicesIsSet {
  return __services_isset;
}

- (void) unsetServices {
  [__services release_stub];
  __services = nil;
  __services_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            Banana_Service *_elem12 = [[Banana_Service alloc] init];
            [_elem12 read: inProtocol];
            [fieldValue addObject: _elem12];
            [_elem12 release_stub];
          }
          [inProtocol readListEnd];
          [self setServices: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMyServicesResponse"];
  if (__services_isset) {
    if (__services != nil) {
      [outProtocol writeFieldBeginWithName: @"services" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__services count]];
        int idx14;
        for (idx14 = 0; idx14 < [__services count]; idx14++)
        {
          [[__services objectAtIndex: idx14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetMyServicesResponse("];
  [ms appendString: @"services:"];
  [ms appendFormat: @"%@", __services];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_GetServiceInfoRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHumanToken: (BananaService_HumanToken) humanToken serviceId: (NSString *) serviceId
{
  self = [super init];
  __humanToken = [humanToken retain_stub];
  __humanToken_isset = YES;
  __serviceId = [serviceId retain_stub];
  __serviceId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"humanToken"])
  {
    __humanToken = [[decoder decodeObjectForKey: @"humanToken"] retain_stub];
    __humanToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceId"])
  {
    __serviceId = [[decoder decodeObjectForKey: @"serviceId"] retain_stub];
    __serviceId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__humanToken_isset)
  {
    [encoder encodeObject: __humanToken forKey: @"humanToken"];
  }
  if (__serviceId_isset)
  {
    [encoder encodeObject: __serviceId forKey: @"serviceId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __humanToken_isset ? 2654435761 : 0;
  if (__humanToken_isset)
  {
    hash = (hash * 31) ^ [__humanToken hash];
  }
  hash = (hash * 31) ^ __serviceId_isset ? 2654435761 : 0;
  if (__serviceId_isset)
  {
    hash = (hash * 31) ^ [__serviceId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetServiceInfoRequest class]]) {
    return NO;
  }
  BananaService_GetServiceInfoRequest *other = (BananaService_GetServiceInfoRequest *)anObject;
  if ((__humanToken_isset != other->__humanToken_isset) ||
      (__humanToken_isset && ((__humanToken || other->__humanToken) && ![__humanToken isEqual:other->__humanToken]))) {
    return NO;
  }
  if ((__serviceId_isset != other->__serviceId_isset) ||
      (__serviceId_isset && ((__serviceId || other->__serviceId) && ![__serviceId isEqual:other->__serviceId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__humanToken release_stub];
  [__serviceId release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_HumanToken *) humanToken {
  return [[__humanToken retain_stub] autorelease_stub];
}

- (void) setHumanToken: (BananaAuthentication_HumanToken *) humanToken {
  [humanToken retain_stub];
  [__humanToken release_stub];
  __humanToken = humanToken;
  __humanToken_isset = YES;
}

- (BOOL) humanTokenIsSet {
  return __humanToken_isset;
}

- (void) unsetHumanToken {
  [__humanToken release_stub];
  __humanToken = nil;
  __humanToken_isset = NO;
}

- (NSString *) serviceId {
  return [[__serviceId retain_stub] autorelease_stub];
}

- (void) setServiceId: (NSString *) serviceId {
  [serviceId retain_stub];
  [__serviceId release_stub];
  __serviceId = serviceId;
  __serviceId_isset = YES;
}

- (BOOL) serviceIdIsSet {
  return __serviceId_isset;
}

- (void) unsetServiceId {
  [__serviceId release_stub];
  __serviceId = nil;
  __serviceId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_HumanToken *fieldValue = [[BananaAuthentication_HumanToken alloc] init];
          [fieldValue read: inProtocol];
          [self setHumanToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setServiceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetServiceInfoRequest"];
  if (__humanToken_isset) {
    if (__humanToken != nil) {
      [outProtocol writeFieldBeginWithName: @"humanToken" type: TType_STRUCT fieldID: 1];
      [__humanToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serviceId_isset) {
    if (__serviceId != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __serviceId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetServiceInfoRequest("];
  [ms appendString: @"humanToken:"];
  [ms appendFormat: @"%@", __humanToken];
  [ms appendString: @",serviceId:"];
  [ms appendFormat: @"\"%@\"", __serviceId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_GetServiceInfoResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithServiceInfo: (BananaService_Service) serviceInfo
{
  self = [super init];
  __serviceInfo = [serviceInfo retain_stub];
  __serviceInfo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"serviceInfo"])
  {
    __serviceInfo = [[decoder decodeObjectForKey: @"serviceInfo"] retain_stub];
    __serviceInfo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__serviceInfo_isset)
  {
    [encoder encodeObject: __serviceInfo forKey: @"serviceInfo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __serviceInfo_isset ? 2654435761 : 0;
  if (__serviceInfo_isset)
  {
    hash = (hash * 31) ^ [__serviceInfo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetServiceInfoResponse class]]) {
    return NO;
  }
  BananaService_GetServiceInfoResponse *other = (BananaService_GetServiceInfoResponse *)anObject;
  if ((__serviceInfo_isset != other->__serviceInfo_isset) ||
      (__serviceInfo_isset && ((__serviceInfo || other->__serviceInfo) && ![__serviceInfo isEqual:other->__serviceInfo]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__serviceInfo release_stub];
  [super dealloc_stub];
}

- (Banana_Service *) serviceInfo {
  return [[__serviceInfo retain_stub] autorelease_stub];
}

- (void) setServiceInfo: (Banana_Service *) serviceInfo {
  [serviceInfo retain_stub];
  [__serviceInfo release_stub];
  __serviceInfo = serviceInfo;
  __serviceInfo_isset = YES;
}

- (BOOL) serviceInfoIsSet {
  return __serviceInfo_isset;
}

- (void) unsetServiceInfo {
  [__serviceInfo release_stub];
  __serviceInfo = nil;
  __serviceInfo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Banana_Service *fieldValue = [[Banana_Service alloc] init];
          [fieldValue read: inProtocol];
          [self setServiceInfo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetServiceInfoResponse"];
  if (__serviceInfo_isset) {
    if (__serviceInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceInfo" type: TType_STRUCT fieldID: 1];
      [__serviceInfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetServiceInfoResponse("];
  [ms appendString: @"serviceInfo:"];
  [ms appendFormat: @"%@", __serviceInfo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_GetDashboardRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHumanToken: (BananaService_HumanToken) humanToken
{
  self = [super init];
  __humanToken = [humanToken retain_stub];
  __humanToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"humanToken"])
  {
    __humanToken = [[decoder decodeObjectForKey: @"humanToken"] retain_stub];
    __humanToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__humanToken_isset)
  {
    [encoder encodeObject: __humanToken forKey: @"humanToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __humanToken_isset ? 2654435761 : 0;
  if (__humanToken_isset)
  {
    hash = (hash * 31) ^ [__humanToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetDashboardRequest class]]) {
    return NO;
  }
  BananaService_GetDashboardRequest *other = (BananaService_GetDashboardRequest *)anObject;
  if ((__humanToken_isset != other->__humanToken_isset) ||
      (__humanToken_isset && ((__humanToken || other->__humanToken) && ![__humanToken isEqual:other->__humanToken]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__humanToken release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_HumanToken *) humanToken {
  return [[__humanToken retain_stub] autorelease_stub];
}

- (void) setHumanToken: (BananaAuthentication_HumanToken *) humanToken {
  [humanToken retain_stub];
  [__humanToken release_stub];
  __humanToken = humanToken;
  __humanToken_isset = YES;
}

- (BOOL) humanTokenIsSet {
  return __humanToken_isset;
}

- (void) unsetHumanToken {
  [__humanToken release_stub];
  __humanToken = nil;
  __humanToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_HumanToken *fieldValue = [[BananaAuthentication_HumanToken alloc] init];
          [fieldValue read: inProtocol];
          [self setHumanToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDashboardRequest"];
  if (__humanToken_isset) {
    if (__humanToken != nil) {
      [outProtocol writeFieldBeginWithName: @"humanToken" type: TType_STRUCT fieldID: 1];
      [__humanToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetDashboardRequest("];
  [ms appendString: @"humanToken:"];
  [ms appendFormat: @"%@", __humanToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_GetDashboardResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.unreadMessageCount = 0;

  self.totalMessagesLastHour = 0;

  self.totalMessagesLast24hrs = 0;

  self.recentMessages = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithUnreadMessageCount: (BananaService_int) unreadMessageCount totalMessagesLastHour: (BananaService_int) totalMessagesLastHour totalMessagesLast24hrs: (BananaService_int) totalMessagesLast24hrs recentMessages: (NSMutableArray *) recentMessages
{
  self = [super init];
  __unreadMessageCount = unreadMessageCount;
  __unreadMessageCount_isset = YES;
  __totalMessagesLastHour = totalMessagesLastHour;
  __totalMessagesLastHour_isset = YES;
  __totalMessagesLast24hrs = totalMessagesLast24hrs;
  __totalMessagesLast24hrs_isset = YES;
  __recentMessages = [recentMessages retain_stub];
  __recentMessages_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"unreadMessageCount"])
  {
    __unreadMessageCount = [decoder decodeInt32ForKey: @"unreadMessageCount"];
    __unreadMessageCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalMessagesLastHour"])
  {
    __totalMessagesLastHour = [decoder decodeInt32ForKey: @"totalMessagesLastHour"];
    __totalMessagesLastHour_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalMessagesLast24hrs"])
  {
    __totalMessagesLast24hrs = [decoder decodeInt32ForKey: @"totalMessagesLast24hrs"];
    __totalMessagesLast24hrs_isset = YES;
  }
  if ([decoder containsValueForKey: @"recentMessages"])
  {
    __recentMessages = [[decoder decodeObjectForKey: @"recentMessages"] retain_stub];
    __recentMessages_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__unreadMessageCount_isset)
  {
    [encoder encodeInt32: __unreadMessageCount forKey: @"unreadMessageCount"];
  }
  if (__totalMessagesLastHour_isset)
  {
    [encoder encodeInt32: __totalMessagesLastHour forKey: @"totalMessagesLastHour"];
  }
  if (__totalMessagesLast24hrs_isset)
  {
    [encoder encodeInt32: __totalMessagesLast24hrs forKey: @"totalMessagesLast24hrs"];
  }
  if (__recentMessages_isset)
  {
    [encoder encodeObject: __recentMessages forKey: @"recentMessages"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __unreadMessageCount_isset ? 2654435761 : 0;
  if (__unreadMessageCount_isset)
  {
    hash = (hash * 31) ^ [@(__unreadMessageCount) hash];
  }
  hash = (hash * 31) ^ __totalMessagesLastHour_isset ? 2654435761 : 0;
  if (__totalMessagesLastHour_isset)
  {
    hash = (hash * 31) ^ [@(__totalMessagesLastHour) hash];
  }
  hash = (hash * 31) ^ __totalMessagesLast24hrs_isset ? 2654435761 : 0;
  if (__totalMessagesLast24hrs_isset)
  {
    hash = (hash * 31) ^ [@(__totalMessagesLast24hrs) hash];
  }
  hash = (hash * 31) ^ __recentMessages_isset ? 2654435761 : 0;
  if (__recentMessages_isset)
  {
    hash = (hash * 31) ^ [__recentMessages hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetDashboardResponse class]]) {
    return NO;
  }
  BananaService_GetDashboardResponse *other = (BananaService_GetDashboardResponse *)anObject;
  if ((__unreadMessageCount_isset != other->__unreadMessageCount_isset) ||
      (__unreadMessageCount_isset && (__unreadMessageCount != other->__unreadMessageCount))) {
    return NO;
  }
  if ((__totalMessagesLastHour_isset != other->__totalMessagesLastHour_isset) ||
      (__totalMessagesLastHour_isset && (__totalMessagesLastHour != other->__totalMessagesLastHour))) {
    return NO;
  }
  if ((__totalMessagesLast24hrs_isset != other->__totalMessagesLast24hrs_isset) ||
      (__totalMessagesLast24hrs_isset && (__totalMessagesLast24hrs != other->__totalMessagesLast24hrs))) {
    return NO;
  }
  if ((__recentMessages_isset != other->__recentMessages_isset) ||
      (__recentMessages_isset && ((__recentMessages || other->__recentMessages) && ![__recentMessages isEqual:other->__recentMessages]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__recentMessages release_stub];
  [super dealloc_stub];
}

- (int32_t) unreadMessageCount {
  return __unreadMessageCount;
}

- (void) setUnreadMessageCount: (int32_t) unreadMessageCount {
  __unreadMessageCount = unreadMessageCount;
  __unreadMessageCount_isset = YES;
}

- (BOOL) unreadMessageCountIsSet {
  return __unreadMessageCount_isset;
}

- (void) unsetUnreadMessageCount {
  __unreadMessageCount_isset = NO;
}

- (int32_t) totalMessagesLastHour {
  return __totalMessagesLastHour;
}

- (void) setTotalMessagesLastHour: (int32_t) totalMessagesLastHour {
  __totalMessagesLastHour = totalMessagesLastHour;
  __totalMessagesLastHour_isset = YES;
}

- (BOOL) totalMessagesLastHourIsSet {
  return __totalMessagesLastHour_isset;
}

- (void) unsetTotalMessagesLastHour {
  __totalMessagesLastHour_isset = NO;
}

- (int32_t) totalMessagesLast24hrs {
  return __totalMessagesLast24hrs;
}

- (void) setTotalMessagesLast24hrs: (int32_t) totalMessagesLast24hrs {
  __totalMessagesLast24hrs = totalMessagesLast24hrs;
  __totalMessagesLast24hrs_isset = YES;
}

- (BOOL) totalMessagesLast24hrsIsSet {
  return __totalMessagesLast24hrs_isset;
}

- (void) unsetTotalMessagesLast24hrs {
  __totalMessagesLast24hrs_isset = NO;
}

- (NSMutableArray *) recentMessages {
  return [[__recentMessages retain_stub] autorelease_stub];
}

- (void) setRecentMessages: (NSMutableArray *) recentMessages {
  [recentMessages retain_stub];
  [__recentMessages release_stub];
  __recentMessages = recentMessages;
  __recentMessages_isset = YES;
}

- (BOOL) recentMessagesIsSet {
  return __recentMessages_isset;
}

- (void) unsetRecentMessages {
  [__recentMessages release_stub];
  __recentMessages = nil;
  __recentMessages_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setUnreadMessageCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTotalMessagesLastHour: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTotalMessagesLast24hrs: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            Banana_Message *_elem17 = [[Banana_Message alloc] init];
            [_elem17 read: inProtocol];
            [fieldValue addObject: _elem17];
            [_elem17 release_stub];
          }
          [inProtocol readListEnd];
          [self setRecentMessages: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDashboardResponse"];
  if (__unreadMessageCount_isset) {
    [outProtocol writeFieldBeginWithName: @"unreadMessageCount" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __unreadMessageCount];
    [outProtocol writeFieldEnd];
  }
  if (__totalMessagesLastHour_isset) {
    [outProtocol writeFieldBeginWithName: @"totalMessagesLastHour" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __totalMessagesLastHour];
    [outProtocol writeFieldEnd];
  }
  if (__totalMessagesLast24hrs_isset) {
    [outProtocol writeFieldBeginWithName: @"totalMessagesLast24hrs" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __totalMessagesLast24hrs];
    [outProtocol writeFieldEnd];
  }
  if (__recentMessages_isset) {
    if (__recentMessages != nil) {
      [outProtocol writeFieldBeginWithName: @"recentMessages" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__recentMessages count]];
        int idx19;
        for (idx19 = 0; idx19 < [__recentMessages count]; idx19++)
        {
          [[__recentMessages objectAtIndex: idx19] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetDashboardResponse("];
  [ms appendString: @"unreadMessageCount:"];
  [ms appendFormat: @"%i", __unreadMessageCount];
  [ms appendString: @",totalMessagesLastHour:"];
  [ms appendFormat: @"%i", __totalMessagesLastHour];
  [ms appendString: @",totalMessagesLast24hrs:"];
  [ms appendFormat: @"%i", __totalMessagesLast24hrs];
  [ms appendString: @",recentMessages:"];
  [ms appendFormat: @"%@", __recentMessages];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_SearchForServicesRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHumanToken: (BananaService_HumanToken) humanToken searchTerm: (NSString *) searchTerm organization: (NSString *) organization
{
  self = [super init];
  __humanToken = [humanToken retain_stub];
  __humanToken_isset = YES;
  __searchTerm = [searchTerm retain_stub];
  __searchTerm_isset = YES;
  __organization = [organization retain_stub];
  __organization_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"humanToken"])
  {
    __humanToken = [[decoder decodeObjectForKey: @"humanToken"] retain_stub];
    __humanToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"searchTerm"])
  {
    __searchTerm = [[decoder decodeObjectForKey: @"searchTerm"] retain_stub];
    __searchTerm_isset = YES;
  }
  if ([decoder containsValueForKey: @"organization"])
  {
    __organization = [[decoder decodeObjectForKey: @"organization"] retain_stub];
    __organization_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__humanToken_isset)
  {
    [encoder encodeObject: __humanToken forKey: @"humanToken"];
  }
  if (__searchTerm_isset)
  {
    [encoder encodeObject: __searchTerm forKey: @"searchTerm"];
  }
  if (__organization_isset)
  {
    [encoder encodeObject: __organization forKey: @"organization"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __humanToken_isset ? 2654435761 : 0;
  if (__humanToken_isset)
  {
    hash = (hash * 31) ^ [__humanToken hash];
  }
  hash = (hash * 31) ^ __searchTerm_isset ? 2654435761 : 0;
  if (__searchTerm_isset)
  {
    hash = (hash * 31) ^ [__searchTerm hash];
  }
  hash = (hash * 31) ^ __organization_isset ? 2654435761 : 0;
  if (__organization_isset)
  {
    hash = (hash * 31) ^ [__organization hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SearchForServicesRequest class]]) {
    return NO;
  }
  BananaService_SearchForServicesRequest *other = (BananaService_SearchForServicesRequest *)anObject;
  if ((__humanToken_isset != other->__humanToken_isset) ||
      (__humanToken_isset && ((__humanToken || other->__humanToken) && ![__humanToken isEqual:other->__humanToken]))) {
    return NO;
  }
  if ((__searchTerm_isset != other->__searchTerm_isset) ||
      (__searchTerm_isset && ((__searchTerm || other->__searchTerm) && ![__searchTerm isEqual:other->__searchTerm]))) {
    return NO;
  }
  if ((__organization_isset != other->__organization_isset) ||
      (__organization_isset && ((__organization || other->__organization) && ![__organization isEqual:other->__organization]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__humanToken release_stub];
  [__searchTerm release_stub];
  [__organization release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_HumanToken *) humanToken {
  return [[__humanToken retain_stub] autorelease_stub];
}

- (void) setHumanToken: (BananaAuthentication_HumanToken *) humanToken {
  [humanToken retain_stub];
  [__humanToken release_stub];
  __humanToken = humanToken;
  __humanToken_isset = YES;
}

- (BOOL) humanTokenIsSet {
  return __humanToken_isset;
}

- (void) unsetHumanToken {
  [__humanToken release_stub];
  __humanToken = nil;
  __humanToken_isset = NO;
}

- (NSString *) searchTerm {
  return [[__searchTerm retain_stub] autorelease_stub];
}

- (void) setSearchTerm: (NSString *) searchTerm {
  [searchTerm retain_stub];
  [__searchTerm release_stub];
  __searchTerm = searchTerm;
  __searchTerm_isset = YES;
}

- (BOOL) searchTermIsSet {
  return __searchTerm_isset;
}

- (void) unsetSearchTerm {
  [__searchTerm release_stub];
  __searchTerm = nil;
  __searchTerm_isset = NO;
}

- (NSString *) organization {
  return [[__organization retain_stub] autorelease_stub];
}

- (void) setOrganization: (NSString *) organization {
  [organization retain_stub];
  [__organization release_stub];
  __organization = organization;
  __organization_isset = YES;
}

- (BOOL) organizationIsSet {
  return __organization_isset;
}

- (void) unsetOrganization {
  [__organization release_stub];
  __organization = nil;
  __organization_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_HumanToken *fieldValue = [[BananaAuthentication_HumanToken alloc] init];
          [fieldValue read: inProtocol];
          [self setHumanToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSearchTerm: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrganization: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SearchForServicesRequest"];
  if (__humanToken_isset) {
    if (__humanToken != nil) {
      [outProtocol writeFieldBeginWithName: @"humanToken" type: TType_STRUCT fieldID: 1];
      [__humanToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__searchTerm_isset) {
    if (__searchTerm != nil) {
      [outProtocol writeFieldBeginWithName: @"searchTerm" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __searchTerm];
      [outProtocol writeFieldEnd];
    }
  }
  if (__organization_isset) {
    if (__organization != nil) {
      [outProtocol writeFieldBeginWithName: @"organization" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __organization];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SearchForServicesRequest("];
  [ms appendString: @"humanToken:"];
  [ms appendFormat: @"%@", __humanToken];
  [ms appendString: @",searchTerm:"];
  [ms appendFormat: @"\"%@\"", __searchTerm];
  [ms appendString: @",organization:"];
  [ms appendFormat: @"\"%@\"", __organization];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_SearchForServicesResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.services = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithServices: (NSMutableArray *) services
{
  self = [super init];
  __services = [services retain_stub];
  __services_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"services"])
  {
    __services = [[decoder decodeObjectForKey: @"services"] retain_stub];
    __services_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__services_isset)
  {
    [encoder encodeObject: __services forKey: @"services"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __services_isset ? 2654435761 : 0;
  if (__services_isset)
  {
    hash = (hash * 31) ^ [__services hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SearchForServicesResponse class]]) {
    return NO;
  }
  BananaService_SearchForServicesResponse *other = (BananaService_SearchForServicesResponse *)anObject;
  if ((__services_isset != other->__services_isset) ||
      (__services_isset && ((__services || other->__services) && ![__services isEqual:other->__services]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__services release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) services {
  return [[__services retain_stub] autorelease_stub];
}

- (void) setServices: (NSMutableArray *) services {
  [services retain_stub];
  [__services release_stub];
  __services = services;
  __services_isset = YES;
}

- (BOOL) servicesIsSet {
  return __services_isset;
}

- (void) unsetServices {
  [__services release_stub];
  __services = nil;
  __services_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size20;
          [inProtocol readListBeginReturningElementType: NULL size: &_size20];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size20];
          int _i21;
          for (_i21 = 0; _i21 < _size20; ++_i21)
          {
            Banana_Service *_elem22 = [[Banana_Service alloc] init];
            [_elem22 read: inProtocol];
            [fieldValue addObject: _elem22];
            [_elem22 release_stub];
          }
          [inProtocol readListEnd];
          [self setServices: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SearchForServicesResponse"];
  if (__services_isset) {
    if (__services != nil) {
      [outProtocol writeFieldBeginWithName: @"services" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__services count]];
        int idx24;
        for (idx24 = 0; idx24 < [__services count]; idx24++)
        {
          [[__services objectAtIndex: idx24] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SearchForServicesResponse("];
  [ms appendString: @"services:"];
  [ms appendFormat: @"%@", __services];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_GetServiceSubscribersRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHumanToken: (BananaService_HumanToken) humanToken serviceId: (NSString *) serviceId organization: (NSString *) organization
{
  self = [super init];
  __humanToken = [humanToken retain_stub];
  __humanToken_isset = YES;
  __serviceId = [serviceId retain_stub];
  __serviceId_isset = YES;
  __organization = [organization retain_stub];
  __organization_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"humanToken"])
  {
    __humanToken = [[decoder decodeObjectForKey: @"humanToken"] retain_stub];
    __humanToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceId"])
  {
    __serviceId = [[decoder decodeObjectForKey: @"serviceId"] retain_stub];
    __serviceId_isset = YES;
  }
  if ([decoder containsValueForKey: @"organization"])
  {
    __organization = [[decoder decodeObjectForKey: @"organization"] retain_stub];
    __organization_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__humanToken_isset)
  {
    [encoder encodeObject: __humanToken forKey: @"humanToken"];
  }
  if (__serviceId_isset)
  {
    [encoder encodeObject: __serviceId forKey: @"serviceId"];
  }
  if (__organization_isset)
  {
    [encoder encodeObject: __organization forKey: @"organization"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __humanToken_isset ? 2654435761 : 0;
  if (__humanToken_isset)
  {
    hash = (hash * 31) ^ [__humanToken hash];
  }
  hash = (hash * 31) ^ __serviceId_isset ? 2654435761 : 0;
  if (__serviceId_isset)
  {
    hash = (hash * 31) ^ [__serviceId hash];
  }
  hash = (hash * 31) ^ __organization_isset ? 2654435761 : 0;
  if (__organization_isset)
  {
    hash = (hash * 31) ^ [__organization hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetServiceSubscribersRequest class]]) {
    return NO;
  }
  BananaService_GetServiceSubscribersRequest *other = (BananaService_GetServiceSubscribersRequest *)anObject;
  if ((__humanToken_isset != other->__humanToken_isset) ||
      (__humanToken_isset && ((__humanToken || other->__humanToken) && ![__humanToken isEqual:other->__humanToken]))) {
    return NO;
  }
  if ((__serviceId_isset != other->__serviceId_isset) ||
      (__serviceId_isset && ((__serviceId || other->__serviceId) && ![__serviceId isEqual:other->__serviceId]))) {
    return NO;
  }
  if ((__organization_isset != other->__organization_isset) ||
      (__organization_isset && ((__organization || other->__organization) && ![__organization isEqual:other->__organization]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__humanToken release_stub];
  [__serviceId release_stub];
  [__organization release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_HumanToken *) humanToken {
  return [[__humanToken retain_stub] autorelease_stub];
}

- (void) setHumanToken: (BananaAuthentication_HumanToken *) humanToken {
  [humanToken retain_stub];
  [__humanToken release_stub];
  __humanToken = humanToken;
  __humanToken_isset = YES;
}

- (BOOL) humanTokenIsSet {
  return __humanToken_isset;
}

- (void) unsetHumanToken {
  [__humanToken release_stub];
  __humanToken = nil;
  __humanToken_isset = NO;
}

- (NSString *) serviceId {
  return [[__serviceId retain_stub] autorelease_stub];
}

- (void) setServiceId: (NSString *) serviceId {
  [serviceId retain_stub];
  [__serviceId release_stub];
  __serviceId = serviceId;
  __serviceId_isset = YES;
}

- (BOOL) serviceIdIsSet {
  return __serviceId_isset;
}

- (void) unsetServiceId {
  [__serviceId release_stub];
  __serviceId = nil;
  __serviceId_isset = NO;
}

- (NSString *) organization {
  return [[__organization retain_stub] autorelease_stub];
}

- (void) setOrganization: (NSString *) organization {
  [organization retain_stub];
  [__organization release_stub];
  __organization = organization;
  __organization_isset = YES;
}

- (BOOL) organizationIsSet {
  return __organization_isset;
}

- (void) unsetOrganization {
  [__organization release_stub];
  __organization = nil;
  __organization_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_HumanToken *fieldValue = [[BananaAuthentication_HumanToken alloc] init];
          [fieldValue read: inProtocol];
          [self setHumanToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setServiceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrganization: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetServiceSubscribersRequest"];
  if (__humanToken_isset) {
    if (__humanToken != nil) {
      [outProtocol writeFieldBeginWithName: @"humanToken" type: TType_STRUCT fieldID: 1];
      [__humanToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serviceId_isset) {
    if (__serviceId != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __serviceId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__organization_isset) {
    if (__organization != nil) {
      [outProtocol writeFieldBeginWithName: @"organization" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __organization];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetServiceSubscribersRequest("];
  [ms appendString: @"humanToken:"];
  [ms appendFormat: @"%@", __humanToken];
  [ms appendString: @",serviceId:"];
  [ms appendFormat: @"\"%@\"", __serviceId];
  [ms appendString: @",organization:"];
  [ms appendFormat: @"\"%@\"", __organization];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_GetServiceSubscribersResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.humans = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithHumans: (NSMutableArray *) humans
{
  self = [super init];
  __humans = [humans retain_stub];
  __humans_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"humans"])
  {
    __humans = [[decoder decodeObjectForKey: @"humans"] retain_stub];
    __humans_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__humans_isset)
  {
    [encoder encodeObject: __humans forKey: @"humans"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __humans_isset ? 2654435761 : 0;
  if (__humans_isset)
  {
    hash = (hash * 31) ^ [__humans hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetServiceSubscribersResponse class]]) {
    return NO;
  }
  BananaService_GetServiceSubscribersResponse *other = (BananaService_GetServiceSubscribersResponse *)anObject;
  if ((__humans_isset != other->__humans_isset) ||
      (__humans_isset && ((__humans || other->__humans) && ![__humans isEqual:other->__humans]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__humans release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) humans {
  return [[__humans retain_stub] autorelease_stub];
}

- (void) setHumans: (NSMutableArray *) humans {
  [humans retain_stub];
  [__humans release_stub];
  __humans = humans;
  __humans_isset = YES;
}

- (BOOL) humansIsSet {
  return __humans_isset;
}

- (void) unsetHumans {
  [__humans release_stub];
  __humans = nil;
  __humans_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size25;
          [inProtocol readListBeginReturningElementType: NULL size: &_size25];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size25];
          int _i26;
          for (_i26 = 0; _i26 < _size25; ++_i26)
          {
            Banana_Human *_elem27 = [[Banana_Human alloc] init];
            [_elem27 read: inProtocol];
            [fieldValue addObject: _elem27];
            [_elem27 release_stub];
          }
          [inProtocol readListEnd];
          [self setHumans: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetServiceSubscribersResponse"];
  if (__humans_isset) {
    if (__humans != nil) {
      [outProtocol writeFieldBeginWithName: @"humans" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__humans count]];
        int idx29;
        for (idx29 = 0; idx29 < [__humans count]; idx29++)
        {
          [[__humans objectAtIndex: idx29] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetServiceSubscribersResponse("];
  [ms appendString: @"humans:"];
  [ms appendFormat: @"%@", __humans];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_GetMySavedChannelsRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHumanToken: (BananaService_HumanToken) humanToken
{
  self = [super init];
  __humanToken = [humanToken retain_stub];
  __humanToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"humanToken"])
  {
    __humanToken = [[decoder decodeObjectForKey: @"humanToken"] retain_stub];
    __humanToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__humanToken_isset)
  {
    [encoder encodeObject: __humanToken forKey: @"humanToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __humanToken_isset ? 2654435761 : 0;
  if (__humanToken_isset)
  {
    hash = (hash * 31) ^ [__humanToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetMySavedChannelsRequest class]]) {
    return NO;
  }
  BananaService_GetMySavedChannelsRequest *other = (BananaService_GetMySavedChannelsRequest *)anObject;
  if ((__humanToken_isset != other->__humanToken_isset) ||
      (__humanToken_isset && ((__humanToken || other->__humanToken) && ![__humanToken isEqual:other->__humanToken]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__humanToken release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_HumanToken *) humanToken {
  return [[__humanToken retain_stub] autorelease_stub];
}

- (void) setHumanToken: (BananaAuthentication_HumanToken *) humanToken {
  [humanToken retain_stub];
  [__humanToken release_stub];
  __humanToken = humanToken;
  __humanToken_isset = YES;
}

- (BOOL) humanTokenIsSet {
  return __humanToken_isset;
}

- (void) unsetHumanToken {
  [__humanToken release_stub];
  __humanToken = nil;
  __humanToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_HumanToken *fieldValue = [[BananaAuthentication_HumanToken alloc] init];
          [fieldValue read: inProtocol];
          [self setHumanToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMySavedChannelsRequest"];
  if (__humanToken_isset) {
    if (__humanToken != nil) {
      [outProtocol writeFieldBeginWithName: @"humanToken" type: TType_STRUCT fieldID: 1];
      [__humanToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetMySavedChannelsRequest("];
  [ms appendString: @"humanToken:"];
  [ms appendFormat: @"%@", __humanToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_GetMySavedChannelsResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithChannels: (NSMutableArray *) channels
{
  self = [super init];
  __channels = [channels retain_stub];
  __channels_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"channels"])
  {
    __channels = [[decoder decodeObjectForKey: @"channels"] retain_stub];
    __channels_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__channels_isset)
  {
    [encoder encodeObject: __channels forKey: @"channels"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __channels_isset ? 2654435761 : 0;
  if (__channels_isset)
  {
    hash = (hash * 31) ^ [__channels hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetMySavedChannelsResponse class]]) {
    return NO;
  }
  BananaService_GetMySavedChannelsResponse *other = (BananaService_GetMySavedChannelsResponse *)anObject;
  if ((__channels_isset != other->__channels_isset) ||
      (__channels_isset && ((__channels || other->__channels) && ![__channels isEqual:other->__channels]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__channels release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) channels {
  return [[__channels retain_stub] autorelease_stub];
}

- (void) setChannels: (NSMutableArray *) channels {
  [channels retain_stub];
  [__channels release_stub];
  __channels = channels;
  __channels_isset = YES;
}

- (BOOL) channelsIsSet {
  return __channels_isset;
}

- (void) unsetChannels {
  [__channels release_stub];
  __channels = nil;
  __channels_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size30;
          [inProtocol readListBeginReturningElementType: NULL size: &_size30];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size30];
          int _i31;
          for (_i31 = 0; _i31 < _size30; ++_i31)
          {
            BananaChannels_BananaChannel *_elem32 = [[BananaChannels_BananaChannel alloc] init];
            [_elem32 read: inProtocol];
            [fieldValue addObject: _elem32];
            [_elem32 release_stub];
          }
          [inProtocol readListEnd];
          [self setChannels: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMySavedChannelsResponse"];
  if (__channels_isset) {
    if (__channels != nil) {
      [outProtocol writeFieldBeginWithName: @"channels" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__channels count]];
        int idx34;
        for (idx34 = 0; idx34 < [__channels count]; idx34++)
        {
          [[__channels objectAtIndex: idx34] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetMySavedChannelsResponse("];
  [ms appendString: @"channels:"];
  [ms appendFormat: @"%@", __channels];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_SendMessageRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.urgency = 2;

#endif
  return self;
}

- (id) initWithServiceToken: (BananaService_ServiceToken) serviceToken message: (NSString *) message urgency: (BananaService_Urgency) urgency
{
  self = [super init];
  __serviceToken = [serviceToken retain_stub];
  __serviceToken_isset = YES;
  __message = [message retain_stub];
  __message_isset = YES;
  __urgency = urgency;
  __urgency_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"serviceToken"])
  {
    __serviceToken = [[decoder decodeObjectForKey: @"serviceToken"] retain_stub];
    __serviceToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"urgency"])
  {
    __urgency = [decoder decodeIntForKey: @"urgency"];
    __urgency_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__serviceToken_isset)
  {
    [encoder encodeObject: __serviceToken forKey: @"serviceToken"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__urgency_isset)
  {
    [encoder encodeInt: __urgency forKey: @"urgency"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __serviceToken_isset ? 2654435761 : 0;
  if (__serviceToken_isset)
  {
    hash = (hash * 31) ^ [__serviceToken hash];
  }
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __urgency_isset ? 2654435761 : 0;
  if (__urgency_isset)
  {
    hash = (hash * 31) ^ [@(__urgency) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SendMessageRequest class]]) {
    return NO;
  }
  BananaService_SendMessageRequest *other = (BananaService_SendMessageRequest *)anObject;
  if ((__serviceToken_isset != other->__serviceToken_isset) ||
      (__serviceToken_isset && ((__serviceToken || other->__serviceToken) && ![__serviceToken isEqual:other->__serviceToken]))) {
    return NO;
  }
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__urgency_isset != other->__urgency_isset) ||
      (__urgency_isset && (__urgency != other->__urgency))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__serviceToken release_stub];
  [__message release_stub];
  [super dealloc_stub];
}

- (BananaAuthentication_ServiceToken *) serviceToken {
  return [[__serviceToken retain_stub] autorelease_stub];
}

- (void) setServiceToken: (BananaAuthentication_ServiceToken *) serviceToken {
  [serviceToken retain_stub];
  [__serviceToken release_stub];
  __serviceToken = serviceToken;
  __serviceToken_isset = YES;
}

- (BOOL) serviceTokenIsSet {
  return __serviceToken_isset;
}

- (void) unsetServiceToken {
  [__serviceToken release_stub];
  __serviceToken = nil;
  __serviceToken_isset = NO;
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (int) urgency {
  return __urgency;
}

- (void) setUrgency: (int) urgency {
  __urgency = urgency;
  __urgency_isset = YES;
}

- (BOOL) urgencyIsSet {
  return __urgency_isset;
}

- (void) unsetUrgency {
  __urgency_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaAuthentication_ServiceToken *fieldValue = [[BananaAuthentication_ServiceToken alloc] init];
          [fieldValue read: inProtocol];
          [self setServiceToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setUrgency: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SendMessageRequest"];
  if (__serviceToken_isset) {
    if (__serviceToken != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceToken" type: TType_STRUCT fieldID: 1];
      [__serviceToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__urgency_isset) {
    [outProtocol writeFieldBeginWithName: @"urgency" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __urgency];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SendMessageRequest("];
  [ms appendString: @"serviceToken:"];
  [ms appendFormat: @"%@", __serviceToken];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",urgency:"];
  [ms appendFormat: @"%i", __urgency];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_SendMessageResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMessage: (NSString *) message
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SendMessageResponse class]]) {
    return NO;
  }
  BananaService_SendMessageResponse *other = (BananaService_SendMessageResponse *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SendMessageResponse"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SendMessageResponse("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

static double BananaService_API_VERSION = 1.1;
static BananaEndpoint_TcpEndpoint * BananaService_PRODUCTION_ENDPOINT;
static BananaEndpoint_TcpEndpoint * BananaService_BETA_ENDPOINT;
static Banana_Dimension * BananaService_MAX_ICON_DIMENSION;
static BananaService_int BananaService_MAX_ICON_SIZE_IN_KILOBYTES = 40;

@implementation BananaService_BananaServiceConstants
+ (void) initialize {
  BananaService_PRODUCTION_ENDPOINT = [[BananaEndpoint_TcpEndpoint alloc] init];
  [BananaService_PRODUCTION_ENDPOINT setHostname:@"banana-service.aroma.tech"];
  [BananaService_PRODUCTION_ENDPOINT setPort:7001];

;
  BananaService_BETA_ENDPOINT = [[BananaEndpoint_TcpEndpoint alloc] init];
  [BananaService_BETA_ENDPOINT setHostname:@"banana-service-beta.aroma.tech"];
  [BananaService_BETA_ENDPOINT setPort:7001];

;
  BananaService_MAX_ICON_DIMENSION = [[Banana_Dimension alloc] init];
  [BananaService_MAX_ICON_DIMENSION setWidth:500];
  [BananaService_MAX_ICON_DIMENSION setHeight:500];

;
}
+ (double) API_VERSION{
  return BananaService_API_VERSION;
}
+ (BananaEndpoint_TcpEndpoint *) PRODUCTION_ENDPOINT{
  return BananaService_PRODUCTION_ENDPOINT;
}
+ (BananaEndpoint_TcpEndpoint *) BETA_ENDPOINT{
  return BananaService_BETA_ENDPOINT;
}
+ (Banana_Dimension *) MAX_ICON_DIMENSION{
  return BananaService_MAX_ICON_DIMENSION;
}
+ (BananaService_int) MAX_ICON_SIZE_IN_KILOBYTES{
  return BananaService_MAX_ICON_SIZE_IN_KILOBYTES;
}
@end

@interface BananaService_sendMessage_args : NSObject <TBase, NSCoding> {
  BananaService_SendMessageRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_SendMessageRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_SendMessageRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_SendMessageRequest *) request;
- (void) setRequest: (BananaService_SendMessageRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_sendMessage_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_SendMessageRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_sendMessage_args class]]) {
    return NO;
  }
  BananaService_sendMessage_args *other = (BananaService_sendMessage_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_SendMessageRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_SendMessageRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_SendMessageRequest *fieldValue = [[BananaService_SendMessageRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"sendMessage_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_sendMessage_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_SendMessage_result : NSObject <TBase, NSCoding> {
  BananaService_SendMessageResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidCredentialsException __ex3;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_SendMessageResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidCredentialsException ex3;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_SendMessageResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_SendMessageResponse *) success;
- (void) setSuccess: (BananaService_SendMessageResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidCredentialsException) ex3;
- (void) setEx3: (BananaService_InvalidCredentialsException) ex3;
#endif
- (BOOL) ex3IsSet;

@end

@implementation BananaService_SendMessage_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_SendMessageResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SendMessage_result class]]) {
    return NO;
  }
  BananaService_SendMessage_result *other = (BananaService_SendMessage_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [super dealloc_stub];
}

- (BananaService_SendMessageResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_SendMessageResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidCredentialsException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidCredentialsException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_SendMessageResponse *fieldValue = [[BananaService_SendMessageResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidCredentialsException *fieldValue = [[BananaException_InvalidCredentialsException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SendMessage_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SendMessage_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_sendMessageAsync_args : NSObject <TBase, NSCoding> {
  BananaService_SendMessageRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_SendMessageRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_SendMessageRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_SendMessageRequest *) request;
- (void) setRequest: (BananaService_SendMessageRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_sendMessageAsync_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_SendMessageRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_sendMessageAsync_args class]]) {
    return NO;
  }
  BananaService_sendMessageAsync_args *other = (BananaService_sendMessageAsync_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_SendMessageRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_SendMessageRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_SendMessageRequest *fieldValue = [[BananaService_SendMessageRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"sendMessageAsync_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_sendMessageAsync_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_signIn_args : NSObject <TBase, NSCoding> {
  BananaService_SignInRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_SignInRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_SignInRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_SignInRequest *) request;
- (void) setRequest: (BananaService_SignInRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_signIn_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_SignInRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_signIn_args class]]) {
    return NO;
  }
  BananaService_signIn_args *other = (BananaService_signIn_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_SignInRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_SignInRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_SignInRequest *fieldValue = [[BananaService_SignInRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"signIn_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_signIn_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_SignIn_result : NSObject <TBase, NSCoding> {
  BananaService_SignInResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidCredentialsException __ex3;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_SignInResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidCredentialsException ex3;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_SignInResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_SignInResponse *) success;
- (void) setSuccess: (BananaService_SignInResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidCredentialsException) ex3;
- (void) setEx3: (BananaService_InvalidCredentialsException) ex3;
#endif
- (BOOL) ex3IsSet;

@end

@implementation BananaService_SignIn_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_SignInResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SignIn_result class]]) {
    return NO;
  }
  BananaService_SignIn_result *other = (BananaService_SignIn_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [super dealloc_stub];
}

- (BananaService_SignInResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_SignInResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidCredentialsException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidCredentialsException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_SignInResponse *fieldValue = [[BananaService_SignInResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidCredentialsException *fieldValue = [[BananaException_InvalidCredentialsException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SignIn_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SignIn_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_signUp_args : NSObject <TBase, NSCoding> {
  BananaService_SignUpRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_SignUpRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_SignUpRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_SignUpRequest *) request;
- (void) setRequest: (BananaService_SignUpRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_signUp_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_SignUpRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_signUp_args class]]) {
    return NO;
  }
  BananaService_signUp_args *other = (BananaService_signUp_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_SignUpRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_SignUpRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_SignUpRequest *fieldValue = [[BananaService_SignUpRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"signUp_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_signUp_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_SignUp_result : NSObject <TBase, NSCoding> {
  BananaService_SignUpResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidCredentialsException __ex3;
  BananaService_AccountAlreadyExistsException __ex4;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
  BOOL __ex4_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_SignUpResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidCredentialsException ex3;
@property (nonatomic, retain, getter=ex4, setter=setEx4:) BananaService_AccountAlreadyExistsException ex4;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_SignUpResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3 ex4: (BananaService_AccountAlreadyExistsException) ex4;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_SignUpResponse *) success;
- (void) setSuccess: (BananaService_SignUpResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidCredentialsException) ex3;
- (void) setEx3: (BananaService_InvalidCredentialsException) ex3;
#endif
- (BOOL) ex3IsSet;

#if !__has_feature(objc_arc)
- (BananaService_AccountAlreadyExistsException) ex4;
- (void) setEx4: (BananaService_AccountAlreadyExistsException) ex4;
#endif
- (BOOL) ex4IsSet;

@end

@implementation BananaService_SignUp_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_SignUpResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3 ex4: (BananaService_AccountAlreadyExistsException) ex4
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  __ex4 = [ex4 retain_stub];
  __ex4_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex4"])
  {
    __ex4 = [[decoder decodeObjectForKey: @"ex4"] retain_stub];
    __ex4_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
  if (__ex4_isset)
  {
    [encoder encodeObject: __ex4 forKey: @"ex4"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  hash = (hash * 31) ^ __ex4_isset ? 2654435761 : 0;
  if (__ex4_isset)
  {
    hash = (hash * 31) ^ [__ex4 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SignUp_result class]]) {
    return NO;
  }
  BananaService_SignUp_result *other = (BananaService_SignUp_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  if ((__ex4_isset != other->__ex4_isset) ||
      (__ex4_isset && ((__ex4 || other->__ex4) && ![__ex4 isEqual:other->__ex4]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [__ex4 release_stub];
  [super dealloc_stub];
}

- (BananaService_SignUpResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_SignUpResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidCredentialsException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidCredentialsException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (BananaException_AccountAlreadyExistsException *) ex4 {
  return [[__ex4 retain_stub] autorelease_stub];
}

- (void) setEx4: (BananaException_AccountAlreadyExistsException *) ex4 {
  [ex4 retain_stub];
  [__ex4 release_stub];
  __ex4 = ex4;
  __ex4_isset = YES;
}

- (BOOL) ex4IsSet {
  return __ex4_isset;
}

- (void) unsetEx4 {
  [__ex4 release_stub];
  __ex4 = nil;
  __ex4_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_SignUpResponse *fieldValue = [[BananaService_SignUpResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidCredentialsException *fieldValue = [[BananaException_InvalidCredentialsException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          BananaException_AccountAlreadyExistsException *fieldValue = [[BananaException_AccountAlreadyExistsException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx4: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SignUp_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex4_isset) {
    if (__ex4 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex4" type: TType_STRUCT fieldID: 4];
      [__ex4 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SignUp_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", __ex4];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_provisionService_args : NSObject <TBase, NSCoding> {
  BananaService_ProvisionServiceRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_ProvisionServiceRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_ProvisionServiceRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_ProvisionServiceRequest *) request;
- (void) setRequest: (BananaService_ProvisionServiceRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_provisionService_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_ProvisionServiceRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_provisionService_args class]]) {
    return NO;
  }
  BananaService_provisionService_args *other = (BananaService_provisionService_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_ProvisionServiceRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_ProvisionServiceRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_ProvisionServiceRequest *fieldValue = [[BananaService_ProvisionServiceRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"provisionService_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_provisionService_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_ProvisionService_result : NSObject <TBase, NSCoding> {
  BananaService_ProvisionServiceResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidCredentialsException __ex3;
  BananaService_ServiceDoesNotExistException __ex4;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
  BOOL __ex4_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_ProvisionServiceResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidCredentialsException ex3;
@property (nonatomic, retain, getter=ex4, setter=setEx4:) BananaService_ServiceDoesNotExistException ex4;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_ProvisionServiceResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3 ex4: (BananaService_ServiceDoesNotExistException) ex4;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_ProvisionServiceResponse *) success;
- (void) setSuccess: (BananaService_ProvisionServiceResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidCredentialsException) ex3;
- (void) setEx3: (BananaService_InvalidCredentialsException) ex3;
#endif
- (BOOL) ex3IsSet;

#if !__has_feature(objc_arc)
- (BananaService_ServiceDoesNotExistException) ex4;
- (void) setEx4: (BananaService_ServiceDoesNotExistException) ex4;
#endif
- (BOOL) ex4IsSet;

@end

@implementation BananaService_ProvisionService_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_ProvisionServiceResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3 ex4: (BananaService_ServiceDoesNotExistException) ex4
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  __ex4 = [ex4 retain_stub];
  __ex4_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex4"])
  {
    __ex4 = [[decoder decodeObjectForKey: @"ex4"] retain_stub];
    __ex4_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
  if (__ex4_isset)
  {
    [encoder encodeObject: __ex4 forKey: @"ex4"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  hash = (hash * 31) ^ __ex4_isset ? 2654435761 : 0;
  if (__ex4_isset)
  {
    hash = (hash * 31) ^ [__ex4 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_ProvisionService_result class]]) {
    return NO;
  }
  BananaService_ProvisionService_result *other = (BananaService_ProvisionService_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  if ((__ex4_isset != other->__ex4_isset) ||
      (__ex4_isset && ((__ex4 || other->__ex4) && ![__ex4 isEqual:other->__ex4]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [__ex4 release_stub];
  [super dealloc_stub];
}

- (BananaService_ProvisionServiceResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_ProvisionServiceResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidCredentialsException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidCredentialsException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (BananaException_ServiceDoesNotExistException *) ex4 {
  return [[__ex4 retain_stub] autorelease_stub];
}

- (void) setEx4: (BananaException_ServiceDoesNotExistException *) ex4 {
  [ex4 retain_stub];
  [__ex4 release_stub];
  __ex4 = ex4;
  __ex4_isset = YES;
}

- (BOOL) ex4IsSet {
  return __ex4_isset;
}

- (void) unsetEx4 {
  [__ex4 release_stub];
  __ex4 = nil;
  __ex4_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_ProvisionServiceResponse *fieldValue = [[BananaService_ProvisionServiceResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidCredentialsException *fieldValue = [[BananaException_InvalidCredentialsException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          BananaException_ServiceDoesNotExistException *fieldValue = [[BananaException_ServiceDoesNotExistException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx4: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ProvisionService_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex4_isset) {
    if (__ex4 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex4" type: TType_STRUCT fieldID: 4];
      [__ex4 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_ProvisionService_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", __ex4];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_subscribeToService_args : NSObject <TBase, NSCoding> {
  BananaService_SubscribeToServiceRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_SubscribeToServiceRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_SubscribeToServiceRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_SubscribeToServiceRequest *) request;
- (void) setRequest: (BananaService_SubscribeToServiceRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_subscribeToService_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_SubscribeToServiceRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_subscribeToService_args class]]) {
    return NO;
  }
  BananaService_subscribeToService_args *other = (BananaService_subscribeToService_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_SubscribeToServiceRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_SubscribeToServiceRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_SubscribeToServiceRequest *fieldValue = [[BananaService_SubscribeToServiceRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"subscribeToService_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_subscribeToService_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_SubscribeToService_result : NSObject <TBase, NSCoding> {
  BananaService_SubscribeToServiceResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidCredentialsException __ex3;
  BananaService_ServiceDoesNotExistException __ex4;
  BananaService_ServiceAlreadyRegisteredException __ex5;
  BananaService_CustomChannelUnreachableException __ex6;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
  BOOL __ex4_isset;
  BOOL __ex5_isset;
  BOOL __ex6_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_SubscribeToServiceResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidCredentialsException ex3;
@property (nonatomic, retain, getter=ex4, setter=setEx4:) BananaService_ServiceDoesNotExistException ex4;
@property (nonatomic, retain, getter=ex5, setter=setEx5:) BananaService_ServiceAlreadyRegisteredException ex5;
@property (nonatomic, retain, getter=ex6, setter=setEx6:) BananaService_CustomChannelUnreachableException ex6;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_SubscribeToServiceResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3 ex4: (BananaService_ServiceDoesNotExistException) ex4 ex5: (BananaService_ServiceAlreadyRegisteredException) ex5 ex6: (BananaService_CustomChannelUnreachableException) ex6;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_SubscribeToServiceResponse *) success;
- (void) setSuccess: (BananaService_SubscribeToServiceResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidCredentialsException) ex3;
- (void) setEx3: (BananaService_InvalidCredentialsException) ex3;
#endif
- (BOOL) ex3IsSet;

#if !__has_feature(objc_arc)
- (BananaService_ServiceDoesNotExistException) ex4;
- (void) setEx4: (BananaService_ServiceDoesNotExistException) ex4;
#endif
- (BOOL) ex4IsSet;

#if !__has_feature(objc_arc)
- (BananaService_ServiceAlreadyRegisteredException) ex5;
- (void) setEx5: (BananaService_ServiceAlreadyRegisteredException) ex5;
#endif
- (BOOL) ex5IsSet;

#if !__has_feature(objc_arc)
- (BananaService_CustomChannelUnreachableException) ex6;
- (void) setEx6: (BananaService_CustomChannelUnreachableException) ex6;
#endif
- (BOOL) ex6IsSet;

@end

@implementation BananaService_SubscribeToService_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_SubscribeToServiceResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3 ex4: (BananaService_ServiceDoesNotExistException) ex4 ex5: (BananaService_ServiceAlreadyRegisteredException) ex5 ex6: (BananaService_CustomChannelUnreachableException) ex6
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  __ex4 = [ex4 retain_stub];
  __ex4_isset = YES;
  __ex5 = [ex5 retain_stub];
  __ex5_isset = YES;
  __ex6 = [ex6 retain_stub];
  __ex6_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex4"])
  {
    __ex4 = [[decoder decodeObjectForKey: @"ex4"] retain_stub];
    __ex4_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex5"])
  {
    __ex5 = [[decoder decodeObjectForKey: @"ex5"] retain_stub];
    __ex5_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex6"])
  {
    __ex6 = [[decoder decodeObjectForKey: @"ex6"] retain_stub];
    __ex6_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
  if (__ex4_isset)
  {
    [encoder encodeObject: __ex4 forKey: @"ex4"];
  }
  if (__ex5_isset)
  {
    [encoder encodeObject: __ex5 forKey: @"ex5"];
  }
  if (__ex6_isset)
  {
    [encoder encodeObject: __ex6 forKey: @"ex6"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  hash = (hash * 31) ^ __ex4_isset ? 2654435761 : 0;
  if (__ex4_isset)
  {
    hash = (hash * 31) ^ [__ex4 hash];
  }
  hash = (hash * 31) ^ __ex5_isset ? 2654435761 : 0;
  if (__ex5_isset)
  {
    hash = (hash * 31) ^ [__ex5 hash];
  }
  hash = (hash * 31) ^ __ex6_isset ? 2654435761 : 0;
  if (__ex6_isset)
  {
    hash = (hash * 31) ^ [__ex6 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SubscribeToService_result class]]) {
    return NO;
  }
  BananaService_SubscribeToService_result *other = (BananaService_SubscribeToService_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  if ((__ex4_isset != other->__ex4_isset) ||
      (__ex4_isset && ((__ex4 || other->__ex4) && ![__ex4 isEqual:other->__ex4]))) {
    return NO;
  }
  if ((__ex5_isset != other->__ex5_isset) ||
      (__ex5_isset && ((__ex5 || other->__ex5) && ![__ex5 isEqual:other->__ex5]))) {
    return NO;
  }
  if ((__ex6_isset != other->__ex6_isset) ||
      (__ex6_isset && ((__ex6 || other->__ex6) && ![__ex6 isEqual:other->__ex6]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [__ex4 release_stub];
  [__ex5 release_stub];
  [__ex6 release_stub];
  [super dealloc_stub];
}

- (BananaService_SubscribeToServiceResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_SubscribeToServiceResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidCredentialsException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidCredentialsException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (BananaException_ServiceDoesNotExistException *) ex4 {
  return [[__ex4 retain_stub] autorelease_stub];
}

- (void) setEx4: (BananaException_ServiceDoesNotExistException *) ex4 {
  [ex4 retain_stub];
  [__ex4 release_stub];
  __ex4 = ex4;
  __ex4_isset = YES;
}

- (BOOL) ex4IsSet {
  return __ex4_isset;
}

- (void) unsetEx4 {
  [__ex4 release_stub];
  __ex4 = nil;
  __ex4_isset = NO;
}

- (BananaException_ServiceAlreadyRegisteredException *) ex5 {
  return [[__ex5 retain_stub] autorelease_stub];
}

- (void) setEx5: (BananaException_ServiceAlreadyRegisteredException *) ex5 {
  [ex5 retain_stub];
  [__ex5 release_stub];
  __ex5 = ex5;
  __ex5_isset = YES;
}

- (BOOL) ex5IsSet {
  return __ex5_isset;
}

- (void) unsetEx5 {
  [__ex5 release_stub];
  __ex5 = nil;
  __ex5_isset = NO;
}

- (BananaException_CustomChannelUnreachableException *) ex6 {
  return [[__ex6 retain_stub] autorelease_stub];
}

- (void) setEx6: (BananaException_CustomChannelUnreachableException *) ex6 {
  [ex6 retain_stub];
  [__ex6 release_stub];
  __ex6 = ex6;
  __ex6_isset = YES;
}

- (BOOL) ex6IsSet {
  return __ex6_isset;
}

- (void) unsetEx6 {
  [__ex6 release_stub];
  __ex6 = nil;
  __ex6_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_SubscribeToServiceResponse *fieldValue = [[BananaService_SubscribeToServiceResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidCredentialsException *fieldValue = [[BananaException_InvalidCredentialsException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          BananaException_ServiceDoesNotExistException *fieldValue = [[BananaException_ServiceDoesNotExistException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx4: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          BananaException_ServiceAlreadyRegisteredException *fieldValue = [[BananaException_ServiceAlreadyRegisteredException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx5: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRUCT) {
          BananaException_CustomChannelUnreachableException *fieldValue = [[BananaException_CustomChannelUnreachableException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx6: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SubscribeToService_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex4_isset) {
    if (__ex4 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex4" type: TType_STRUCT fieldID: 4];
      [__ex4 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex5_isset) {
    if (__ex5 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex5" type: TType_STRUCT fieldID: 5];
      [__ex5 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex6_isset) {
    if (__ex6 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex6" type: TType_STRUCT fieldID: 6];
      [__ex6 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SubscribeToService_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", __ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", __ex5];
  [ms appendString: @",ex6:"];
  [ms appendFormat: @"%@", __ex6];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_registerHealthCheck_args : NSObject <TBase, NSCoding> {
  BananaService_RegisterHealthCheckRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_RegisterHealthCheckRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_RegisterHealthCheckRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_RegisterHealthCheckRequest *) request;
- (void) setRequest: (BananaService_RegisterHealthCheckRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_registerHealthCheck_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_RegisterHealthCheckRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_registerHealthCheck_args class]]) {
    return NO;
  }
  BananaService_registerHealthCheck_args *other = (BananaService_registerHealthCheck_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_RegisterHealthCheckRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_RegisterHealthCheckRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_RegisterHealthCheckRequest *fieldValue = [[BananaService_RegisterHealthCheckRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"registerHealthCheck_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_registerHealthCheck_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_RegisterHealthCheck_result : NSObject <TBase, NSCoding> {
  BananaService_RegisterHealthCheckResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidCredentialsException __ex3;
  BananaService_ServiceDoesNotExistException __ex4;
  BananaService_UnauthorizedException __ex5;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
  BOOL __ex4_isset;
  BOOL __ex5_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_RegisterHealthCheckResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidCredentialsException ex3;
@property (nonatomic, retain, getter=ex4, setter=setEx4:) BananaService_ServiceDoesNotExistException ex4;
@property (nonatomic, retain, getter=ex5, setter=setEx5:) BananaService_UnauthorizedException ex5;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_RegisterHealthCheckResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3 ex4: (BananaService_ServiceDoesNotExistException) ex4 ex5: (BananaService_UnauthorizedException) ex5;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_RegisterHealthCheckResponse *) success;
- (void) setSuccess: (BananaService_RegisterHealthCheckResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidCredentialsException) ex3;
- (void) setEx3: (BananaService_InvalidCredentialsException) ex3;
#endif
- (BOOL) ex3IsSet;

#if !__has_feature(objc_arc)
- (BananaService_ServiceDoesNotExistException) ex4;
- (void) setEx4: (BananaService_ServiceDoesNotExistException) ex4;
#endif
- (BOOL) ex4IsSet;

#if !__has_feature(objc_arc)
- (BananaService_UnauthorizedException) ex5;
- (void) setEx5: (BananaService_UnauthorizedException) ex5;
#endif
- (BOOL) ex5IsSet;

@end

@implementation BananaService_RegisterHealthCheck_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_RegisterHealthCheckResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3 ex4: (BananaService_ServiceDoesNotExistException) ex4 ex5: (BananaService_UnauthorizedException) ex5
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  __ex4 = [ex4 retain_stub];
  __ex4_isset = YES;
  __ex5 = [ex5 retain_stub];
  __ex5_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex4"])
  {
    __ex4 = [[decoder decodeObjectForKey: @"ex4"] retain_stub];
    __ex4_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex5"])
  {
    __ex5 = [[decoder decodeObjectForKey: @"ex5"] retain_stub];
    __ex5_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
  if (__ex4_isset)
  {
    [encoder encodeObject: __ex4 forKey: @"ex4"];
  }
  if (__ex5_isset)
  {
    [encoder encodeObject: __ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  hash = (hash * 31) ^ __ex4_isset ? 2654435761 : 0;
  if (__ex4_isset)
  {
    hash = (hash * 31) ^ [__ex4 hash];
  }
  hash = (hash * 31) ^ __ex5_isset ? 2654435761 : 0;
  if (__ex5_isset)
  {
    hash = (hash * 31) ^ [__ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_RegisterHealthCheck_result class]]) {
    return NO;
  }
  BananaService_RegisterHealthCheck_result *other = (BananaService_RegisterHealthCheck_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  if ((__ex4_isset != other->__ex4_isset) ||
      (__ex4_isset && ((__ex4 || other->__ex4) && ![__ex4 isEqual:other->__ex4]))) {
    return NO;
  }
  if ((__ex5_isset != other->__ex5_isset) ||
      (__ex5_isset && ((__ex5 || other->__ex5) && ![__ex5 isEqual:other->__ex5]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [__ex4 release_stub];
  [__ex5 release_stub];
  [super dealloc_stub];
}

- (BananaService_RegisterHealthCheckResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_RegisterHealthCheckResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidCredentialsException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidCredentialsException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (BananaException_ServiceDoesNotExistException *) ex4 {
  return [[__ex4 retain_stub] autorelease_stub];
}

- (void) setEx4: (BananaException_ServiceDoesNotExistException *) ex4 {
  [ex4 retain_stub];
  [__ex4 release_stub];
  __ex4 = ex4;
  __ex4_isset = YES;
}

- (BOOL) ex4IsSet {
  return __ex4_isset;
}

- (void) unsetEx4 {
  [__ex4 release_stub];
  __ex4 = nil;
  __ex4_isset = NO;
}

- (BananaException_UnauthorizedException *) ex5 {
  return [[__ex5 retain_stub] autorelease_stub];
}

- (void) setEx5: (BananaException_UnauthorizedException *) ex5 {
  [ex5 retain_stub];
  [__ex5 release_stub];
  __ex5 = ex5;
  __ex5_isset = YES;
}

- (BOOL) ex5IsSet {
  return __ex5_isset;
}

- (void) unsetEx5 {
  [__ex5 release_stub];
  __ex5 = nil;
  __ex5_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_RegisterHealthCheckResponse *fieldValue = [[BananaService_RegisterHealthCheckResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidCredentialsException *fieldValue = [[BananaException_InvalidCredentialsException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          BananaException_ServiceDoesNotExistException *fieldValue = [[BananaException_ServiceDoesNotExistException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx4: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          BananaException_UnauthorizedException *fieldValue = [[BananaException_UnauthorizedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx5: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegisterHealthCheck_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex4_isset) {
    if (__ex4 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex4" type: TType_STRUCT fieldID: 4];
      [__ex4 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex5_isset) {
    if (__ex5 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex5" type: TType_STRUCT fieldID: 5];
      [__ex5 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_RegisterHealthCheck_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", __ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", __ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_renewServiceToken_args : NSObject <TBase, NSCoding> {
  BananaService_RenewServiceTokenRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_RenewServiceTokenRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_RenewServiceTokenRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_RenewServiceTokenRequest *) request;
- (void) setRequest: (BananaService_RenewServiceTokenRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_renewServiceToken_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_RenewServiceTokenRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_renewServiceToken_args class]]) {
    return NO;
  }
  BananaService_renewServiceToken_args *other = (BananaService_renewServiceToken_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_RenewServiceTokenRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_RenewServiceTokenRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_RenewServiceTokenRequest *fieldValue = [[BananaService_RenewServiceTokenRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"renewServiceToken_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_renewServiceToken_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_RenewServiceToken_result : NSObject <TBase, NSCoding> {
  BananaService_RenewServiceTokenResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidCredentialsException __ex3;
  BananaService_ServiceDoesNotExistException __ex4;
  BananaService_UnauthorizedException __ex5;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
  BOOL __ex4_isset;
  BOOL __ex5_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_RenewServiceTokenResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidCredentialsException ex3;
@property (nonatomic, retain, getter=ex4, setter=setEx4:) BananaService_ServiceDoesNotExistException ex4;
@property (nonatomic, retain, getter=ex5, setter=setEx5:) BananaService_UnauthorizedException ex5;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_RenewServiceTokenResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3 ex4: (BananaService_ServiceDoesNotExistException) ex4 ex5: (BananaService_UnauthorizedException) ex5;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_RenewServiceTokenResponse *) success;
- (void) setSuccess: (BananaService_RenewServiceTokenResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidCredentialsException) ex3;
- (void) setEx3: (BananaService_InvalidCredentialsException) ex3;
#endif
- (BOOL) ex3IsSet;

#if !__has_feature(objc_arc)
- (BananaService_ServiceDoesNotExistException) ex4;
- (void) setEx4: (BananaService_ServiceDoesNotExistException) ex4;
#endif
- (BOOL) ex4IsSet;

#if !__has_feature(objc_arc)
- (BananaService_UnauthorizedException) ex5;
- (void) setEx5: (BananaService_UnauthorizedException) ex5;
#endif
- (BOOL) ex5IsSet;

@end

@implementation BananaService_RenewServiceToken_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_RenewServiceTokenResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3 ex4: (BananaService_ServiceDoesNotExistException) ex4 ex5: (BananaService_UnauthorizedException) ex5
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  __ex4 = [ex4 retain_stub];
  __ex4_isset = YES;
  __ex5 = [ex5 retain_stub];
  __ex5_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex4"])
  {
    __ex4 = [[decoder decodeObjectForKey: @"ex4"] retain_stub];
    __ex4_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex5"])
  {
    __ex5 = [[decoder decodeObjectForKey: @"ex5"] retain_stub];
    __ex5_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
  if (__ex4_isset)
  {
    [encoder encodeObject: __ex4 forKey: @"ex4"];
  }
  if (__ex5_isset)
  {
    [encoder encodeObject: __ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  hash = (hash * 31) ^ __ex4_isset ? 2654435761 : 0;
  if (__ex4_isset)
  {
    hash = (hash * 31) ^ [__ex4 hash];
  }
  hash = (hash * 31) ^ __ex5_isset ? 2654435761 : 0;
  if (__ex5_isset)
  {
    hash = (hash * 31) ^ [__ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_RenewServiceToken_result class]]) {
    return NO;
  }
  BananaService_RenewServiceToken_result *other = (BananaService_RenewServiceToken_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  if ((__ex4_isset != other->__ex4_isset) ||
      (__ex4_isset && ((__ex4 || other->__ex4) && ![__ex4 isEqual:other->__ex4]))) {
    return NO;
  }
  if ((__ex5_isset != other->__ex5_isset) ||
      (__ex5_isset && ((__ex5 || other->__ex5) && ![__ex5 isEqual:other->__ex5]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [__ex4 release_stub];
  [__ex5 release_stub];
  [super dealloc_stub];
}

- (BananaService_RenewServiceTokenResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_RenewServiceTokenResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidCredentialsException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidCredentialsException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (BananaException_ServiceDoesNotExistException *) ex4 {
  return [[__ex4 retain_stub] autorelease_stub];
}

- (void) setEx4: (BananaException_ServiceDoesNotExistException *) ex4 {
  [ex4 retain_stub];
  [__ex4 release_stub];
  __ex4 = ex4;
  __ex4_isset = YES;
}

- (BOOL) ex4IsSet {
  return __ex4_isset;
}

- (void) unsetEx4 {
  [__ex4 release_stub];
  __ex4 = nil;
  __ex4_isset = NO;
}

- (BananaException_UnauthorizedException *) ex5 {
  return [[__ex5 retain_stub] autorelease_stub];
}

- (void) setEx5: (BananaException_UnauthorizedException *) ex5 {
  [ex5 retain_stub];
  [__ex5 release_stub];
  __ex5 = ex5;
  __ex5_isset = YES;
}

- (BOOL) ex5IsSet {
  return __ex5_isset;
}

- (void) unsetEx5 {
  [__ex5 release_stub];
  __ex5 = nil;
  __ex5_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_RenewServiceTokenResponse *fieldValue = [[BananaService_RenewServiceTokenResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidCredentialsException *fieldValue = [[BananaException_InvalidCredentialsException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          BananaException_ServiceDoesNotExistException *fieldValue = [[BananaException_ServiceDoesNotExistException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx4: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          BananaException_UnauthorizedException *fieldValue = [[BananaException_UnauthorizedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx5: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RenewServiceToken_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex4_isset) {
    if (__ex4 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex4" type: TType_STRUCT fieldID: 4];
      [__ex4 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex5_isset) {
    if (__ex5 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex5" type: TType_STRUCT fieldID: 5];
      [__ex5 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_RenewServiceToken_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", __ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", __ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_regenerateToken_args : NSObject <TBase, NSCoding> {
  BananaService_RegenerateTokenRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_RegenerateTokenRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_RegenerateTokenRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_RegenerateTokenRequest *) request;
- (void) setRequest: (BananaService_RegenerateTokenRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_regenerateToken_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_RegenerateTokenRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_regenerateToken_args class]]) {
    return NO;
  }
  BananaService_regenerateToken_args *other = (BananaService_regenerateToken_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_RegenerateTokenRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_RegenerateTokenRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_RegenerateTokenRequest *fieldValue = [[BananaService_RegenerateTokenRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"regenerateToken_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_regenerateToken_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_RegenerateToken_result : NSObject <TBase, NSCoding> {
  BananaService_RegenerateTokenResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidCredentialsException __ex3;
  BananaService_ServiceDoesNotExistException __ex4;
  BananaService_UnauthorizedException __ex5;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
  BOOL __ex4_isset;
  BOOL __ex5_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_RegenerateTokenResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidCredentialsException ex3;
@property (nonatomic, retain, getter=ex4, setter=setEx4:) BananaService_ServiceDoesNotExistException ex4;
@property (nonatomic, retain, getter=ex5, setter=setEx5:) BananaService_UnauthorizedException ex5;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_RegenerateTokenResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3 ex4: (BananaService_ServiceDoesNotExistException) ex4 ex5: (BananaService_UnauthorizedException) ex5;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_RegenerateTokenResponse *) success;
- (void) setSuccess: (BananaService_RegenerateTokenResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidCredentialsException) ex3;
- (void) setEx3: (BananaService_InvalidCredentialsException) ex3;
#endif
- (BOOL) ex3IsSet;

#if !__has_feature(objc_arc)
- (BananaService_ServiceDoesNotExistException) ex4;
- (void) setEx4: (BananaService_ServiceDoesNotExistException) ex4;
#endif
- (BOOL) ex4IsSet;

#if !__has_feature(objc_arc)
- (BananaService_UnauthorizedException) ex5;
- (void) setEx5: (BananaService_UnauthorizedException) ex5;
#endif
- (BOOL) ex5IsSet;

@end

@implementation BananaService_RegenerateToken_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_RegenerateTokenResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3 ex4: (BananaService_ServiceDoesNotExistException) ex4 ex5: (BananaService_UnauthorizedException) ex5
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  __ex4 = [ex4 retain_stub];
  __ex4_isset = YES;
  __ex5 = [ex5 retain_stub];
  __ex5_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex4"])
  {
    __ex4 = [[decoder decodeObjectForKey: @"ex4"] retain_stub];
    __ex4_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex5"])
  {
    __ex5 = [[decoder decodeObjectForKey: @"ex5"] retain_stub];
    __ex5_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
  if (__ex4_isset)
  {
    [encoder encodeObject: __ex4 forKey: @"ex4"];
  }
  if (__ex5_isset)
  {
    [encoder encodeObject: __ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  hash = (hash * 31) ^ __ex4_isset ? 2654435761 : 0;
  if (__ex4_isset)
  {
    hash = (hash * 31) ^ [__ex4 hash];
  }
  hash = (hash * 31) ^ __ex5_isset ? 2654435761 : 0;
  if (__ex5_isset)
  {
    hash = (hash * 31) ^ [__ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_RegenerateToken_result class]]) {
    return NO;
  }
  BananaService_RegenerateToken_result *other = (BananaService_RegenerateToken_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  if ((__ex4_isset != other->__ex4_isset) ||
      (__ex4_isset && ((__ex4 || other->__ex4) && ![__ex4 isEqual:other->__ex4]))) {
    return NO;
  }
  if ((__ex5_isset != other->__ex5_isset) ||
      (__ex5_isset && ((__ex5 || other->__ex5) && ![__ex5 isEqual:other->__ex5]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [__ex4 release_stub];
  [__ex5 release_stub];
  [super dealloc_stub];
}

- (BananaService_RegenerateTokenResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_RegenerateTokenResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidCredentialsException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidCredentialsException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (BananaException_ServiceDoesNotExistException *) ex4 {
  return [[__ex4 retain_stub] autorelease_stub];
}

- (void) setEx4: (BananaException_ServiceDoesNotExistException *) ex4 {
  [ex4 retain_stub];
  [__ex4 release_stub];
  __ex4 = ex4;
  __ex4_isset = YES;
}

- (BOOL) ex4IsSet {
  return __ex4_isset;
}

- (void) unsetEx4 {
  [__ex4 release_stub];
  __ex4 = nil;
  __ex4_isset = NO;
}

- (BananaException_UnauthorizedException *) ex5 {
  return [[__ex5 retain_stub] autorelease_stub];
}

- (void) setEx5: (BananaException_UnauthorizedException *) ex5 {
  [ex5 retain_stub];
  [__ex5 release_stub];
  __ex5 = ex5;
  __ex5_isset = YES;
}

- (BOOL) ex5IsSet {
  return __ex5_isset;
}

- (void) unsetEx5 {
  [__ex5 release_stub];
  __ex5 = nil;
  __ex5_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_RegenerateTokenResponse *fieldValue = [[BananaService_RegenerateTokenResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidCredentialsException *fieldValue = [[BananaException_InvalidCredentialsException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          BananaException_ServiceDoesNotExistException *fieldValue = [[BananaException_ServiceDoesNotExistException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx4: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          BananaException_UnauthorizedException *fieldValue = [[BananaException_UnauthorizedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx5: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegenerateToken_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex4_isset) {
    if (__ex4 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex4" type: TType_STRUCT fieldID: 4];
      [__ex4 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex5_isset) {
    if (__ex5 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex5" type: TType_STRUCT fieldID: 5];
      [__ex5 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_RegenerateToken_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", __ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", __ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_searchForServices_args : NSObject <TBase, NSCoding> {
  BananaService_SearchForServicesRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_SearchForServicesRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_SearchForServicesRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_SearchForServicesRequest *) request;
- (void) setRequest: (BananaService_SearchForServicesRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_searchForServices_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_SearchForServicesRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_searchForServices_args class]]) {
    return NO;
  }
  BananaService_searchForServices_args *other = (BananaService_searchForServices_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_SearchForServicesRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_SearchForServicesRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_SearchForServicesRequest *fieldValue = [[BananaService_SearchForServicesRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"searchForServices_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_searchForServices_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_SearchForServices_result : NSObject <TBase, NSCoding> {
  BananaService_SearchForServicesResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidCredentialsException __ex3;
  BananaService_UnauthorizedException __ex4;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
  BOOL __ex4_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_SearchForServicesResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidCredentialsException ex3;
@property (nonatomic, retain, getter=ex4, setter=setEx4:) BananaService_UnauthorizedException ex4;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_SearchForServicesResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3 ex4: (BananaService_UnauthorizedException) ex4;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_SearchForServicesResponse *) success;
- (void) setSuccess: (BananaService_SearchForServicesResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidCredentialsException) ex3;
- (void) setEx3: (BananaService_InvalidCredentialsException) ex3;
#endif
- (BOOL) ex3IsSet;

#if !__has_feature(objc_arc)
- (BananaService_UnauthorizedException) ex4;
- (void) setEx4: (BananaService_UnauthorizedException) ex4;
#endif
- (BOOL) ex4IsSet;

@end

@implementation BananaService_SearchForServices_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_SearchForServicesResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3 ex4: (BananaService_UnauthorizedException) ex4
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  __ex4 = [ex4 retain_stub];
  __ex4_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex4"])
  {
    __ex4 = [[decoder decodeObjectForKey: @"ex4"] retain_stub];
    __ex4_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
  if (__ex4_isset)
  {
    [encoder encodeObject: __ex4 forKey: @"ex4"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  hash = (hash * 31) ^ __ex4_isset ? 2654435761 : 0;
  if (__ex4_isset)
  {
    hash = (hash * 31) ^ [__ex4 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SearchForServices_result class]]) {
    return NO;
  }
  BananaService_SearchForServices_result *other = (BananaService_SearchForServices_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  if ((__ex4_isset != other->__ex4_isset) ||
      (__ex4_isset && ((__ex4 || other->__ex4) && ![__ex4 isEqual:other->__ex4]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [__ex4 release_stub];
  [super dealloc_stub];
}

- (BananaService_SearchForServicesResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_SearchForServicesResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidCredentialsException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidCredentialsException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (BananaException_UnauthorizedException *) ex4 {
  return [[__ex4 retain_stub] autorelease_stub];
}

- (void) setEx4: (BananaException_UnauthorizedException *) ex4 {
  [ex4 retain_stub];
  [__ex4 release_stub];
  __ex4 = ex4;
  __ex4_isset = YES;
}

- (BOOL) ex4IsSet {
  return __ex4_isset;
}

- (void) unsetEx4 {
  [__ex4 release_stub];
  __ex4 = nil;
  __ex4_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_SearchForServicesResponse *fieldValue = [[BananaService_SearchForServicesResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidCredentialsException *fieldValue = [[BananaException_InvalidCredentialsException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          BananaException_UnauthorizedException *fieldValue = [[BananaException_UnauthorizedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx4: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SearchForServices_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex4_isset) {
    if (__ex4 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex4" type: TType_STRUCT fieldID: 4];
      [__ex4 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SearchForServices_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", __ex4];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_saveChannel_args : NSObject <TBase, NSCoding> {
  BananaService_SaveChannelRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_SaveChannelRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_SaveChannelRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_SaveChannelRequest *) request;
- (void) setRequest: (BananaService_SaveChannelRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_saveChannel_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_SaveChannelRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_saveChannel_args class]]) {
    return NO;
  }
  BananaService_saveChannel_args *other = (BananaService_saveChannel_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_SaveChannelRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_SaveChannelRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_SaveChannelRequest *fieldValue = [[BananaService_SaveChannelRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"saveChannel_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_saveChannel_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_SaveChannel_result : NSObject <TBase, NSCoding> {
  BananaService_SaveChannelResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidCredentialsException __ex3;
  BananaService_UnauthorizedException __ex4;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
  BOOL __ex4_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_SaveChannelResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidCredentialsException ex3;
@property (nonatomic, retain, getter=ex4, setter=setEx4:) BananaService_UnauthorizedException ex4;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_SaveChannelResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3 ex4: (BananaService_UnauthorizedException) ex4;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_SaveChannelResponse *) success;
- (void) setSuccess: (BananaService_SaveChannelResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidCredentialsException) ex3;
- (void) setEx3: (BananaService_InvalidCredentialsException) ex3;
#endif
- (BOOL) ex3IsSet;

#if !__has_feature(objc_arc)
- (BananaService_UnauthorizedException) ex4;
- (void) setEx4: (BananaService_UnauthorizedException) ex4;
#endif
- (BOOL) ex4IsSet;

@end

@implementation BananaService_SaveChannel_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_SaveChannelResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3 ex4: (BananaService_UnauthorizedException) ex4
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  __ex4 = [ex4 retain_stub];
  __ex4_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex4"])
  {
    __ex4 = [[decoder decodeObjectForKey: @"ex4"] retain_stub];
    __ex4_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
  if (__ex4_isset)
  {
    [encoder encodeObject: __ex4 forKey: @"ex4"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  hash = (hash * 31) ^ __ex4_isset ? 2654435761 : 0;
  if (__ex4_isset)
  {
    hash = (hash * 31) ^ [__ex4 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SaveChannel_result class]]) {
    return NO;
  }
  BananaService_SaveChannel_result *other = (BananaService_SaveChannel_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  if ((__ex4_isset != other->__ex4_isset) ||
      (__ex4_isset && ((__ex4 || other->__ex4) && ![__ex4 isEqual:other->__ex4]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [__ex4 release_stub];
  [super dealloc_stub];
}

- (BananaService_SaveChannelResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_SaveChannelResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidCredentialsException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidCredentialsException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (BananaException_UnauthorizedException *) ex4 {
  return [[__ex4 retain_stub] autorelease_stub];
}

- (void) setEx4: (BananaException_UnauthorizedException *) ex4 {
  [ex4 retain_stub];
  [__ex4 release_stub];
  __ex4 = ex4;
  __ex4_isset = YES;
}

- (BOOL) ex4IsSet {
  return __ex4_isset;
}

- (void) unsetEx4 {
  [__ex4 release_stub];
  __ex4 = nil;
  __ex4_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_SaveChannelResponse *fieldValue = [[BananaService_SaveChannelResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidCredentialsException *fieldValue = [[BananaException_InvalidCredentialsException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          BananaException_UnauthorizedException *fieldValue = [[BananaException_UnauthorizedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx4: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SaveChannel_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex4_isset) {
    if (__ex4 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex4" type: TType_STRUCT fieldID: 4];
      [__ex4 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SaveChannel_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", __ex4];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_removeSavedChannel_args : NSObject <TBase, NSCoding> {
  BananaService_RemoveSavedChannelRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_RemoveSavedChannelRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_RemoveSavedChannelRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_RemoveSavedChannelRequest *) request;
- (void) setRequest: (BananaService_RemoveSavedChannelRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_removeSavedChannel_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_RemoveSavedChannelRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_removeSavedChannel_args class]]) {
    return NO;
  }
  BananaService_removeSavedChannel_args *other = (BananaService_removeSavedChannel_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_RemoveSavedChannelRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_RemoveSavedChannelRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_RemoveSavedChannelRequest *fieldValue = [[BananaService_RemoveSavedChannelRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"removeSavedChannel_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_removeSavedChannel_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_RemoveSavedChannel_result : NSObject <TBase, NSCoding> {
  BananaService_RemoveSavedChannelResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidCredentialsException __ex3;
  BananaService_UnauthorizedException __ex4;
  BananaService_ChannelDoesNotExistException __ex5;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
  BOOL __ex4_isset;
  BOOL __ex5_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_RemoveSavedChannelResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidCredentialsException ex3;
@property (nonatomic, retain, getter=ex4, setter=setEx4:) BananaService_UnauthorizedException ex4;
@property (nonatomic, retain, getter=ex5, setter=setEx5:) BananaService_ChannelDoesNotExistException ex5;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_RemoveSavedChannelResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3 ex4: (BananaService_UnauthorizedException) ex4 ex5: (BananaService_ChannelDoesNotExistException) ex5;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_RemoveSavedChannelResponse *) success;
- (void) setSuccess: (BananaService_RemoveSavedChannelResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidCredentialsException) ex3;
- (void) setEx3: (BananaService_InvalidCredentialsException) ex3;
#endif
- (BOOL) ex3IsSet;

#if !__has_feature(objc_arc)
- (BananaService_UnauthorizedException) ex4;
- (void) setEx4: (BananaService_UnauthorizedException) ex4;
#endif
- (BOOL) ex4IsSet;

#if !__has_feature(objc_arc)
- (BananaService_ChannelDoesNotExistException) ex5;
- (void) setEx5: (BananaService_ChannelDoesNotExistException) ex5;
#endif
- (BOOL) ex5IsSet;

@end

@implementation BananaService_RemoveSavedChannel_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_RemoveSavedChannelResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3 ex4: (BananaService_UnauthorizedException) ex4 ex5: (BananaService_ChannelDoesNotExistException) ex5
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  __ex4 = [ex4 retain_stub];
  __ex4_isset = YES;
  __ex5 = [ex5 retain_stub];
  __ex5_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex4"])
  {
    __ex4 = [[decoder decodeObjectForKey: @"ex4"] retain_stub];
    __ex4_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex5"])
  {
    __ex5 = [[decoder decodeObjectForKey: @"ex5"] retain_stub];
    __ex5_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
  if (__ex4_isset)
  {
    [encoder encodeObject: __ex4 forKey: @"ex4"];
  }
  if (__ex5_isset)
  {
    [encoder encodeObject: __ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  hash = (hash * 31) ^ __ex4_isset ? 2654435761 : 0;
  if (__ex4_isset)
  {
    hash = (hash * 31) ^ [__ex4 hash];
  }
  hash = (hash * 31) ^ __ex5_isset ? 2654435761 : 0;
  if (__ex5_isset)
  {
    hash = (hash * 31) ^ [__ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_RemoveSavedChannel_result class]]) {
    return NO;
  }
  BananaService_RemoveSavedChannel_result *other = (BananaService_RemoveSavedChannel_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  if ((__ex4_isset != other->__ex4_isset) ||
      (__ex4_isset && ((__ex4 || other->__ex4) && ![__ex4 isEqual:other->__ex4]))) {
    return NO;
  }
  if ((__ex5_isset != other->__ex5_isset) ||
      (__ex5_isset && ((__ex5 || other->__ex5) && ![__ex5 isEqual:other->__ex5]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [__ex4 release_stub];
  [__ex5 release_stub];
  [super dealloc_stub];
}

- (BananaService_RemoveSavedChannelResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_RemoveSavedChannelResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidCredentialsException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidCredentialsException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (BananaException_UnauthorizedException *) ex4 {
  return [[__ex4 retain_stub] autorelease_stub];
}

- (void) setEx4: (BananaException_UnauthorizedException *) ex4 {
  [ex4 retain_stub];
  [__ex4 release_stub];
  __ex4 = ex4;
  __ex4_isset = YES;
}

- (BOOL) ex4IsSet {
  return __ex4_isset;
}

- (void) unsetEx4 {
  [__ex4 release_stub];
  __ex4 = nil;
  __ex4_isset = NO;
}

- (BananaException_ChannelDoesNotExistException *) ex5 {
  return [[__ex5 retain_stub] autorelease_stub];
}

- (void) setEx5: (BananaException_ChannelDoesNotExistException *) ex5 {
  [ex5 retain_stub];
  [__ex5 release_stub];
  __ex5 = ex5;
  __ex5_isset = YES;
}

- (BOOL) ex5IsSet {
  return __ex5_isset;
}

- (void) unsetEx5 {
  [__ex5 release_stub];
  __ex5 = nil;
  __ex5_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_RemoveSavedChannelResponse *fieldValue = [[BananaService_RemoveSavedChannelResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidCredentialsException *fieldValue = [[BananaException_InvalidCredentialsException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          BananaException_UnauthorizedException *fieldValue = [[BananaException_UnauthorizedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx4: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          BananaException_ChannelDoesNotExistException *fieldValue = [[BananaException_ChannelDoesNotExistException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx5: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RemoveSavedChannel_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex4_isset) {
    if (__ex4 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex4" type: TType_STRUCT fieldID: 4];
      [__ex4 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex5_isset) {
    if (__ex5 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex5" type: TType_STRUCT fieldID: 5];
      [__ex5 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_RemoveSavedChannel_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", __ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", __ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_snoozeChannel_args : NSObject <TBase, NSCoding> {
  BananaService_SnoozeChannelRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_SnoozeChannelRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_SnoozeChannelRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_SnoozeChannelRequest *) request;
- (void) setRequest: (BananaService_SnoozeChannelRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_snoozeChannel_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_SnoozeChannelRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_snoozeChannel_args class]]) {
    return NO;
  }
  BananaService_snoozeChannel_args *other = (BananaService_snoozeChannel_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_SnoozeChannelRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_SnoozeChannelRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_SnoozeChannelRequest *fieldValue = [[BananaService_SnoozeChannelRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"snoozeChannel_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_snoozeChannel_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_SnoozeChannel_result : NSObject <TBase, NSCoding> {
  BananaService_SnoozeChannelResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidCredentialsException __ex3;
  BananaService_UnauthorizedException __ex4;
  BananaService_ChannelDoesNotExistException __ex5;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
  BOOL __ex4_isset;
  BOOL __ex5_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_SnoozeChannelResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidCredentialsException ex3;
@property (nonatomic, retain, getter=ex4, setter=setEx4:) BananaService_UnauthorizedException ex4;
@property (nonatomic, retain, getter=ex5, setter=setEx5:) BananaService_ChannelDoesNotExistException ex5;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_SnoozeChannelResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3 ex4: (BananaService_UnauthorizedException) ex4 ex5: (BananaService_ChannelDoesNotExistException) ex5;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_SnoozeChannelResponse *) success;
- (void) setSuccess: (BananaService_SnoozeChannelResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidCredentialsException) ex3;
- (void) setEx3: (BananaService_InvalidCredentialsException) ex3;
#endif
- (BOOL) ex3IsSet;

#if !__has_feature(objc_arc)
- (BananaService_UnauthorizedException) ex4;
- (void) setEx4: (BananaService_UnauthorizedException) ex4;
#endif
- (BOOL) ex4IsSet;

#if !__has_feature(objc_arc)
- (BananaService_ChannelDoesNotExistException) ex5;
- (void) setEx5: (BananaService_ChannelDoesNotExistException) ex5;
#endif
- (BOOL) ex5IsSet;

@end

@implementation BananaService_SnoozeChannel_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_SnoozeChannelResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3 ex4: (BananaService_UnauthorizedException) ex4 ex5: (BananaService_ChannelDoesNotExistException) ex5
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  __ex4 = [ex4 retain_stub];
  __ex4_isset = YES;
  __ex5 = [ex5 retain_stub];
  __ex5_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex4"])
  {
    __ex4 = [[decoder decodeObjectForKey: @"ex4"] retain_stub];
    __ex4_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex5"])
  {
    __ex5 = [[decoder decodeObjectForKey: @"ex5"] retain_stub];
    __ex5_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
  if (__ex4_isset)
  {
    [encoder encodeObject: __ex4 forKey: @"ex4"];
  }
  if (__ex5_isset)
  {
    [encoder encodeObject: __ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  hash = (hash * 31) ^ __ex4_isset ? 2654435761 : 0;
  if (__ex4_isset)
  {
    hash = (hash * 31) ^ [__ex4 hash];
  }
  hash = (hash * 31) ^ __ex5_isset ? 2654435761 : 0;
  if (__ex5_isset)
  {
    hash = (hash * 31) ^ [__ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_SnoozeChannel_result class]]) {
    return NO;
  }
  BananaService_SnoozeChannel_result *other = (BananaService_SnoozeChannel_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  if ((__ex4_isset != other->__ex4_isset) ||
      (__ex4_isset && ((__ex4 || other->__ex4) && ![__ex4 isEqual:other->__ex4]))) {
    return NO;
  }
  if ((__ex5_isset != other->__ex5_isset) ||
      (__ex5_isset && ((__ex5 || other->__ex5) && ![__ex5 isEqual:other->__ex5]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [__ex4 release_stub];
  [__ex5 release_stub];
  [super dealloc_stub];
}

- (BananaService_SnoozeChannelResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_SnoozeChannelResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidCredentialsException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidCredentialsException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (BananaException_UnauthorizedException *) ex4 {
  return [[__ex4 retain_stub] autorelease_stub];
}

- (void) setEx4: (BananaException_UnauthorizedException *) ex4 {
  [ex4 retain_stub];
  [__ex4 release_stub];
  __ex4 = ex4;
  __ex4_isset = YES;
}

- (BOOL) ex4IsSet {
  return __ex4_isset;
}

- (void) unsetEx4 {
  [__ex4 release_stub];
  __ex4 = nil;
  __ex4_isset = NO;
}

- (BananaException_ChannelDoesNotExistException *) ex5 {
  return [[__ex5 retain_stub] autorelease_stub];
}

- (void) setEx5: (BananaException_ChannelDoesNotExistException *) ex5 {
  [ex5 retain_stub];
  [__ex5 release_stub];
  __ex5 = ex5;
  __ex5_isset = YES;
}

- (BOOL) ex5IsSet {
  return __ex5_isset;
}

- (void) unsetEx5 {
  [__ex5 release_stub];
  __ex5 = nil;
  __ex5_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_SnoozeChannelResponse *fieldValue = [[BananaService_SnoozeChannelResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidCredentialsException *fieldValue = [[BananaException_InvalidCredentialsException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          BananaException_UnauthorizedException *fieldValue = [[BananaException_UnauthorizedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx4: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          BananaException_ChannelDoesNotExistException *fieldValue = [[BananaException_ChannelDoesNotExistException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx5: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SnoozeChannel_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex4_isset) {
    if (__ex4 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex4" type: TType_STRUCT fieldID: 4];
      [__ex4 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex5_isset) {
    if (__ex5 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex5" type: TType_STRUCT fieldID: 5];
      [__ex5 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_SnoozeChannel_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", __ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", __ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_getServiceSubscribers_args : NSObject <TBase, NSCoding> {
  BananaService_GetServiceSubscribersRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_GetServiceSubscribersRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_GetServiceSubscribersRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_GetServiceSubscribersRequest *) request;
- (void) setRequest: (BananaService_GetServiceSubscribersRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_getServiceSubscribers_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_GetServiceSubscribersRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_getServiceSubscribers_args class]]) {
    return NO;
  }
  BananaService_getServiceSubscribers_args *other = (BananaService_getServiceSubscribers_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_GetServiceSubscribersRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_GetServiceSubscribersRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_GetServiceSubscribersRequest *fieldValue = [[BananaService_GetServiceSubscribersRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getServiceSubscribers_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_getServiceSubscribers_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_GetServiceSubscribers_result : NSObject <TBase, NSCoding> {
  BananaService_GetServiceSubscribersResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidCredentialsException __ex3;
  BananaService_UnauthorizedException __ex4;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
  BOOL __ex4_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_GetServiceSubscribersResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidCredentialsException ex3;
@property (nonatomic, retain, getter=ex4, setter=setEx4:) BananaService_UnauthorizedException ex4;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_GetServiceSubscribersResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3 ex4: (BananaService_UnauthorizedException) ex4;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_GetServiceSubscribersResponse *) success;
- (void) setSuccess: (BananaService_GetServiceSubscribersResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidCredentialsException) ex3;
- (void) setEx3: (BananaService_InvalidCredentialsException) ex3;
#endif
- (BOOL) ex3IsSet;

#if !__has_feature(objc_arc)
- (BananaService_UnauthorizedException) ex4;
- (void) setEx4: (BananaService_UnauthorizedException) ex4;
#endif
- (BOOL) ex4IsSet;

@end

@implementation BananaService_GetServiceSubscribers_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_GetServiceSubscribersResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3 ex4: (BananaService_UnauthorizedException) ex4
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  __ex4 = [ex4 retain_stub];
  __ex4_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex4"])
  {
    __ex4 = [[decoder decodeObjectForKey: @"ex4"] retain_stub];
    __ex4_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
  if (__ex4_isset)
  {
    [encoder encodeObject: __ex4 forKey: @"ex4"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  hash = (hash * 31) ^ __ex4_isset ? 2654435761 : 0;
  if (__ex4_isset)
  {
    hash = (hash * 31) ^ [__ex4 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetServiceSubscribers_result class]]) {
    return NO;
  }
  BananaService_GetServiceSubscribers_result *other = (BananaService_GetServiceSubscribers_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  if ((__ex4_isset != other->__ex4_isset) ||
      (__ex4_isset && ((__ex4 || other->__ex4) && ![__ex4 isEqual:other->__ex4]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [__ex4 release_stub];
  [super dealloc_stub];
}

- (BananaService_GetServiceSubscribersResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_GetServiceSubscribersResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidCredentialsException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidCredentialsException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (BananaException_UnauthorizedException *) ex4 {
  return [[__ex4 retain_stub] autorelease_stub];
}

- (void) setEx4: (BananaException_UnauthorizedException *) ex4 {
  [ex4 retain_stub];
  [__ex4 release_stub];
  __ex4 = ex4;
  __ex4_isset = YES;
}

- (BOOL) ex4IsSet {
  return __ex4_isset;
}

- (void) unsetEx4 {
  [__ex4 release_stub];
  __ex4 = nil;
  __ex4_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_GetServiceSubscribersResponse *fieldValue = [[BananaService_GetServiceSubscribersResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidCredentialsException *fieldValue = [[BananaException_InvalidCredentialsException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          BananaException_UnauthorizedException *fieldValue = [[BananaException_UnauthorizedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx4: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetServiceSubscribers_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex4_isset) {
    if (__ex4 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex4" type: TType_STRUCT fieldID: 4];
      [__ex4 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetServiceSubscribers_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", __ex4];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_getMySavedChannels_args : NSObject <TBase, NSCoding> {
  BananaService_GetMySavedChannelsRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_GetMySavedChannelsRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_GetMySavedChannelsRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_GetMySavedChannelsRequest *) request;
- (void) setRequest: (BananaService_GetMySavedChannelsRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_getMySavedChannels_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_GetMySavedChannelsRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_getMySavedChannels_args class]]) {
    return NO;
  }
  BananaService_getMySavedChannels_args *other = (BananaService_getMySavedChannels_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_GetMySavedChannelsRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_GetMySavedChannelsRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_GetMySavedChannelsRequest *fieldValue = [[BananaService_GetMySavedChannelsRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getMySavedChannels_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_getMySavedChannels_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_GetMySavedChannels_result : NSObject <TBase, NSCoding> {
  BananaService_GetMySavedChannelsResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidCredentialsException __ex3;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_GetMySavedChannelsResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidCredentialsException ex3;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_GetMySavedChannelsResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_GetMySavedChannelsResponse *) success;
- (void) setSuccess: (BananaService_GetMySavedChannelsResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidCredentialsException) ex3;
- (void) setEx3: (BananaService_InvalidCredentialsException) ex3;
#endif
- (BOOL) ex3IsSet;

@end

@implementation BananaService_GetMySavedChannels_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_GetMySavedChannelsResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetMySavedChannels_result class]]) {
    return NO;
  }
  BananaService_GetMySavedChannels_result *other = (BananaService_GetMySavedChannels_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [super dealloc_stub];
}

- (BananaService_GetMySavedChannelsResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_GetMySavedChannelsResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidCredentialsException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidCredentialsException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_GetMySavedChannelsResponse *fieldValue = [[BananaService_GetMySavedChannelsResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidCredentialsException *fieldValue = [[BananaException_InvalidCredentialsException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMySavedChannels_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetMySavedChannels_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_getMyServices_args : NSObject <TBase, NSCoding> {
  BananaService_GetMyServicesRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_GetMyServicesRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_GetMyServicesRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_GetMyServicesRequest *) request;
- (void) setRequest: (BananaService_GetMyServicesRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_getMyServices_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_GetMyServicesRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_getMyServices_args class]]) {
    return NO;
  }
  BananaService_getMyServices_args *other = (BananaService_getMyServices_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_GetMyServicesRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_GetMyServicesRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_GetMyServicesRequest *fieldValue = [[BananaService_GetMyServicesRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getMyServices_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_getMyServices_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_GetMyServices_result : NSObject <TBase, NSCoding> {
  BananaService_GetMyServicesResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidCredentialsException __ex3;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_GetMyServicesResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidCredentialsException ex3;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_GetMyServicesResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_GetMyServicesResponse *) success;
- (void) setSuccess: (BananaService_GetMyServicesResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidCredentialsException) ex3;
- (void) setEx3: (BananaService_InvalidCredentialsException) ex3;
#endif
- (BOOL) ex3IsSet;

@end

@implementation BananaService_GetMyServices_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_GetMyServicesResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetMyServices_result class]]) {
    return NO;
  }
  BananaService_GetMyServices_result *other = (BananaService_GetMyServices_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [super dealloc_stub];
}

- (BananaService_GetMyServicesResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_GetMyServicesResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidCredentialsException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidCredentialsException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_GetMyServicesResponse *fieldValue = [[BananaService_GetMyServicesResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidCredentialsException *fieldValue = [[BananaException_InvalidCredentialsException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMyServices_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetMyServices_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_getServiceInfo_args : NSObject <TBase, NSCoding> {
  BananaService_GetServiceInfoRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_GetServiceInfoRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_GetServiceInfoRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_GetServiceInfoRequest *) request;
- (void) setRequest: (BananaService_GetServiceInfoRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_getServiceInfo_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_GetServiceInfoRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_getServiceInfo_args class]]) {
    return NO;
  }
  BananaService_getServiceInfo_args *other = (BananaService_getServiceInfo_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_GetServiceInfoRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_GetServiceInfoRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_GetServiceInfoRequest *fieldValue = [[BananaService_GetServiceInfoRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getServiceInfo_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_getServiceInfo_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_GetServiceInfo_result : NSObject <TBase, NSCoding> {
  BananaService_GetServiceInfoResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidCredentialsException __ex3;
  BananaService_ServiceDoesNotExistException __ex4;
  BananaService_UnauthorizedException __ex5;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
  BOOL __ex4_isset;
  BOOL __ex5_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_GetServiceInfoResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidCredentialsException ex3;
@property (nonatomic, retain, getter=ex4, setter=setEx4:) BananaService_ServiceDoesNotExistException ex4;
@property (nonatomic, retain, getter=ex5, setter=setEx5:) BananaService_UnauthorizedException ex5;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_GetServiceInfoResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3 ex4: (BananaService_ServiceDoesNotExistException) ex4 ex5: (BananaService_UnauthorizedException) ex5;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_GetServiceInfoResponse *) success;
- (void) setSuccess: (BananaService_GetServiceInfoResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidCredentialsException) ex3;
- (void) setEx3: (BananaService_InvalidCredentialsException) ex3;
#endif
- (BOOL) ex3IsSet;

#if !__has_feature(objc_arc)
- (BananaService_ServiceDoesNotExistException) ex4;
- (void) setEx4: (BananaService_ServiceDoesNotExistException) ex4;
#endif
- (BOOL) ex4IsSet;

#if !__has_feature(objc_arc)
- (BananaService_UnauthorizedException) ex5;
- (void) setEx5: (BananaService_UnauthorizedException) ex5;
#endif
- (BOOL) ex5IsSet;

@end

@implementation BananaService_GetServiceInfo_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_GetServiceInfoResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3 ex4: (BananaService_ServiceDoesNotExistException) ex4 ex5: (BananaService_UnauthorizedException) ex5
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  __ex4 = [ex4 retain_stub];
  __ex4_isset = YES;
  __ex5 = [ex5 retain_stub];
  __ex5_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex4"])
  {
    __ex4 = [[decoder decodeObjectForKey: @"ex4"] retain_stub];
    __ex4_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex5"])
  {
    __ex5 = [[decoder decodeObjectForKey: @"ex5"] retain_stub];
    __ex5_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
  if (__ex4_isset)
  {
    [encoder encodeObject: __ex4 forKey: @"ex4"];
  }
  if (__ex5_isset)
  {
    [encoder encodeObject: __ex5 forKey: @"ex5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  hash = (hash * 31) ^ __ex4_isset ? 2654435761 : 0;
  if (__ex4_isset)
  {
    hash = (hash * 31) ^ [__ex4 hash];
  }
  hash = (hash * 31) ^ __ex5_isset ? 2654435761 : 0;
  if (__ex5_isset)
  {
    hash = (hash * 31) ^ [__ex5 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetServiceInfo_result class]]) {
    return NO;
  }
  BananaService_GetServiceInfo_result *other = (BananaService_GetServiceInfo_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  if ((__ex4_isset != other->__ex4_isset) ||
      (__ex4_isset && ((__ex4 || other->__ex4) && ![__ex4 isEqual:other->__ex4]))) {
    return NO;
  }
  if ((__ex5_isset != other->__ex5_isset) ||
      (__ex5_isset && ((__ex5 || other->__ex5) && ![__ex5 isEqual:other->__ex5]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [__ex4 release_stub];
  [__ex5 release_stub];
  [super dealloc_stub];
}

- (BananaService_GetServiceInfoResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_GetServiceInfoResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidCredentialsException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidCredentialsException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (BananaException_ServiceDoesNotExistException *) ex4 {
  return [[__ex4 retain_stub] autorelease_stub];
}

- (void) setEx4: (BananaException_ServiceDoesNotExistException *) ex4 {
  [ex4 retain_stub];
  [__ex4 release_stub];
  __ex4 = ex4;
  __ex4_isset = YES;
}

- (BOOL) ex4IsSet {
  return __ex4_isset;
}

- (void) unsetEx4 {
  [__ex4 release_stub];
  __ex4 = nil;
  __ex4_isset = NO;
}

- (BananaException_UnauthorizedException *) ex5 {
  return [[__ex5 retain_stub] autorelease_stub];
}

- (void) setEx5: (BananaException_UnauthorizedException *) ex5 {
  [ex5 retain_stub];
  [__ex5 release_stub];
  __ex5 = ex5;
  __ex5_isset = YES;
}

- (BOOL) ex5IsSet {
  return __ex5_isset;
}

- (void) unsetEx5 {
  [__ex5 release_stub];
  __ex5 = nil;
  __ex5_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_GetServiceInfoResponse *fieldValue = [[BananaService_GetServiceInfoResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidCredentialsException *fieldValue = [[BananaException_InvalidCredentialsException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          BananaException_ServiceDoesNotExistException *fieldValue = [[BananaException_ServiceDoesNotExistException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx4: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          BananaException_UnauthorizedException *fieldValue = [[BananaException_UnauthorizedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx5: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetServiceInfo_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex4_isset) {
    if (__ex4 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex4" type: TType_STRUCT fieldID: 4];
      [__ex4 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex5_isset) {
    if (__ex5 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex5" type: TType_STRUCT fieldID: 5];
      [__ex5 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetServiceInfo_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @",ex4:"];
  [ms appendFormat: @"%@", __ex4];
  [ms appendString: @",ex5:"];
  [ms appendFormat: @"%@", __ex5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_getDashboard_args : NSObject <TBase, NSCoding> {
  BananaService_GetDashboardRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BananaService_GetDashboardRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BananaService_GetDashboardRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_GetDashboardRequest *) request;
- (void) setRequest: (BananaService_GetDashboardRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation BananaService_getDashboard_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BananaService_GetDashboardRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __request_isset ? 2654435761 : 0;
  if (__request_isset)
  {
    hash = (hash * 31) ^ [__request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_getDashboard_args class]]) {
    return NO;
  }
  BananaService_getDashboard_args *other = (BananaService_getDashboard_args *)anObject;
  if ((__request_isset != other->__request_isset) ||
      (__request_isset && ((__request || other->__request) && ![__request isEqual:other->__request]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BananaService_GetDashboardRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BananaService_GetDashboardRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaService_GetDashboardRequest *fieldValue = [[BananaService_GetDashboardRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getDashboard_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_getDashboard_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BananaService_GetDashboard_result : NSObject <TBase, NSCoding> {
  BananaService_GetDashboardResponse * __success;
  BananaService_OperationFailedException __ex1;
  BananaService_InvalidArgumentException __ex2;
  BananaService_InvalidCredentialsException __ex3;

  BOOL __success_isset;
  BOOL __ex1_isset;
  BOOL __ex2_isset;
  BOOL __ex3_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) BananaService_GetDashboardResponse * success;
@property (nonatomic, retain, getter=ex1, setter=setEx1:) BananaService_OperationFailedException ex1;
@property (nonatomic, retain, getter=ex2, setter=setEx2:) BananaService_InvalidArgumentException ex2;
@property (nonatomic, retain, getter=ex3, setter=setEx3:) BananaService_InvalidCredentialsException ex3;
#endif

- (id) init;
- (id) initWithSuccess: (BananaService_GetDashboardResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BananaService_GetDashboardResponse *) success;
- (void) setSuccess: (BananaService_GetDashboardResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (BananaService_OperationFailedException) ex1;
- (void) setEx1: (BananaService_OperationFailedException) ex1;
#endif
- (BOOL) ex1IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidArgumentException) ex2;
- (void) setEx2: (BananaService_InvalidArgumentException) ex2;
#endif
- (BOOL) ex2IsSet;

#if !__has_feature(objc_arc)
- (BananaService_InvalidCredentialsException) ex3;
- (void) setEx3: (BananaService_InvalidCredentialsException) ex3;
#endif
- (BOOL) ex3IsSet;

@end

@implementation BananaService_GetDashboard_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BananaService_GetDashboardResponse *) success ex1: (BananaService_OperationFailedException) ex1 ex2: (BananaService_InvalidArgumentException) ex2 ex3: (BananaService_InvalidCredentialsException) ex3
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex1 = [ex1 retain_stub];
  __ex1_isset = YES;
  __ex2 = [ex2 retain_stub];
  __ex2_isset = YES;
  __ex3 = [ex3 retain_stub];
  __ex3_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex1"])
  {
    __ex1 = [[decoder decodeObjectForKey: @"ex1"] retain_stub];
    __ex1_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex2"])
  {
    __ex2 = [[decoder decodeObjectForKey: @"ex2"] retain_stub];
    __ex2_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex3"])
  {
    __ex3 = [[decoder decodeObjectForKey: @"ex3"] retain_stub];
    __ex3_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex1_isset)
  {
    [encoder encodeObject: __ex1 forKey: @"ex1"];
  }
  if (__ex2_isset)
  {
    [encoder encodeObject: __ex2 forKey: @"ex2"];
  }
  if (__ex3_isset)
  {
    [encoder encodeObject: __ex3 forKey: @"ex3"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __ex1_isset ? 2654435761 : 0;
  if (__ex1_isset)
  {
    hash = (hash * 31) ^ [__ex1 hash];
  }
  hash = (hash * 31) ^ __ex2_isset ? 2654435761 : 0;
  if (__ex2_isset)
  {
    hash = (hash * 31) ^ [__ex2 hash];
  }
  hash = (hash * 31) ^ __ex3_isset ? 2654435761 : 0;
  if (__ex3_isset)
  {
    hash = (hash * 31) ^ [__ex3 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BananaService_GetDashboard_result class]]) {
    return NO;
  }
  BananaService_GetDashboard_result *other = (BananaService_GetDashboard_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__ex1_isset != other->__ex1_isset) ||
      (__ex1_isset && ((__ex1 || other->__ex1) && ![__ex1 isEqual:other->__ex1]))) {
    return NO;
  }
  if ((__ex2_isset != other->__ex2_isset) ||
      (__ex2_isset && ((__ex2 || other->__ex2) && ![__ex2 isEqual:other->__ex2]))) {
    return NO;
  }
  if ((__ex3_isset != other->__ex3_isset) ||
      (__ex3_isset && ((__ex3 || other->__ex3) && ![__ex3 isEqual:other->__ex3]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__ex1 release_stub];
  [__ex2 release_stub];
  [__ex3 release_stub];
  [super dealloc_stub];
}

- (BananaService_GetDashboardResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (BananaService_GetDashboardResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (BananaException_OperationFailedException *) ex1 {
  return [[__ex1 retain_stub] autorelease_stub];
}

- (void) setEx1: (BananaException_OperationFailedException *) ex1 {
  [ex1 retain_stub];
  [__ex1 release_stub];
  __ex1 = ex1;
  __ex1_isset = YES;
}

- (BOOL) ex1IsSet {
  return __ex1_isset;
}

- (void) unsetEx1 {
  [__ex1 release_stub];
  __ex1 = nil;
  __ex1_isset = NO;
}

- (BananaException_InvalidArgumentException *) ex2 {
  return [[__ex2 retain_stub] autorelease_stub];
}

- (void) setEx2: (BananaException_InvalidArgumentException *) ex2 {
  [ex2 retain_stub];
  [__ex2 release_stub];
  __ex2 = ex2;
  __ex2_isset = YES;
}

- (BOOL) ex2IsSet {
  return __ex2_isset;
}

- (void) unsetEx2 {
  [__ex2 release_stub];
  __ex2 = nil;
  __ex2_isset = NO;
}

- (BananaException_InvalidCredentialsException *) ex3 {
  return [[__ex3 retain_stub] autorelease_stub];
}

- (void) setEx3: (BananaException_InvalidCredentialsException *) ex3 {
  [ex3 retain_stub];
  [__ex3 release_stub];
  __ex3 = ex3;
  __ex3_isset = YES;
}

- (BOOL) ex3IsSet {
  return __ex3_isset;
}

- (void) unsetEx3 {
  [__ex3 release_stub];
  __ex3 = nil;
  __ex3_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          BananaService_GetDashboardResponse *fieldValue = [[BananaService_GetDashboardResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          BananaException_OperationFailedException *fieldValue = [[BananaException_OperationFailedException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidArgumentException *fieldValue = [[BananaException_InvalidArgumentException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          BananaException_InvalidCredentialsException *fieldValue = [[BananaException_InvalidCredentialsException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDashboard_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex1_isset) {
    if (__ex1 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex1" type: TType_STRUCT fieldID: 1];
      [__ex1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex2_isset) {
    if (__ex2 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex2" type: TType_STRUCT fieldID: 2];
      [__ex2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex3_isset) {
    if (__ex3 != nil) {
      [outProtocol writeFieldBeginWithName: @"ex3" type: TType_STRUCT fieldID: 3];
      [__ex3 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BananaService_GetDashboard_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex1:"];
  [ms appendFormat: @"%@", __ex1];
  [ms appendString: @",ex2:"];
  [ms appendFormat: @"%@", __ex2];
  [ms appendString: @",ex3:"];
  [ms appendFormat: @"%@", __ex3];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BananaService_BananaServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) send_sendMessage: (BananaService_SendMessageRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"sendMessage" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"sendMessage_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_SendMessageResponse *) recv_sendMessage
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_SendMessage_result * result = [[[BananaService_SendMessage_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"sendMessage failed: unknown result"];
}

- (BananaService_SendMessageResponse *) sendMessage: (BananaService_SendMessageRequest *) request
{
  [self send_sendMessage : request];
  [[outProtocol transport] flush];
  return [self recv_sendMessage];
}

- (void) send_sendMessageAsync: (BananaService_SendMessageRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"sendMessageAsync" type: TMessageType_ONEWAY sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"sendMessageAsync_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) sendMessageAsync: (BananaService_SendMessageRequest *) request
{
  [self send_sendMessageAsync : request];
  [[outProtocol transport] flush];
}

- (void) send_signIn: (BananaService_SignInRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"signIn" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"signIn_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_SignInResponse *) recv_signIn
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_SignIn_result * result = [[[BananaService_SignIn_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"signIn failed: unknown result"];
}

- (BananaService_SignInResponse *) signIn: (BananaService_SignInRequest *) request
{
  [self send_signIn : request];
  [[outProtocol transport] flush];
  return [self recv_signIn];
}

- (void) send_signUp: (BananaService_SignUpRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"signUp" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"signUp_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_SignUpResponse *) recv_signUp
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_SignUp_result * result = [[[BananaService_SignUp_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  if ([result ex4IsSet]) {
    @throw [result ex4];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"signUp failed: unknown result"];
}

- (BananaService_SignUpResponse *) signUp: (BananaService_SignUpRequest *) request
{
  [self send_signUp : request];
  [[outProtocol transport] flush];
  return [self recv_signUp];
}

- (void) send_provisionService: (BananaService_ProvisionServiceRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"provisionService" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"provisionService_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_ProvisionServiceResponse *) recv_provisionService
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_ProvisionService_result * result = [[[BananaService_ProvisionService_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  if ([result ex4IsSet]) {
    @throw [result ex4];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"provisionService failed: unknown result"];
}

- (BananaService_ProvisionServiceResponse *) provisionService: (BananaService_ProvisionServiceRequest *) request
{
  [self send_provisionService : request];
  [[outProtocol transport] flush];
  return [self recv_provisionService];
}

- (void) send_subscribeToService: (BananaService_SubscribeToServiceRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"subscribeToService" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"subscribeToService_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_SubscribeToServiceResponse *) recv_subscribeToService
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_SubscribeToService_result * result = [[[BananaService_SubscribeToService_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  if ([result ex4IsSet]) {
    @throw [result ex4];
  }
  if ([result ex5IsSet]) {
    @throw [result ex5];
  }
  if ([result ex6IsSet]) {
    @throw [result ex6];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"subscribeToService failed: unknown result"];
}

- (BananaService_SubscribeToServiceResponse *) subscribeToService: (BananaService_SubscribeToServiceRequest *) request
{
  [self send_subscribeToService : request];
  [[outProtocol transport] flush];
  return [self recv_subscribeToService];
}

- (void) send_registerHealthCheck: (BananaService_RegisterHealthCheckRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"registerHealthCheck" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"registerHealthCheck_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_RegisterHealthCheckResponse *) recv_registerHealthCheck
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_RegisterHealthCheck_result * result = [[[BananaService_RegisterHealthCheck_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  if ([result ex4IsSet]) {
    @throw [result ex4];
  }
  if ([result ex5IsSet]) {
    @throw [result ex5];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"registerHealthCheck failed: unknown result"];
}

- (BananaService_RegisterHealthCheckResponse *) registerHealthCheck: (BananaService_RegisterHealthCheckRequest *) request
{
  [self send_registerHealthCheck : request];
  [[outProtocol transport] flush];
  return [self recv_registerHealthCheck];
}

- (void) send_renewServiceToken: (BananaService_RenewServiceTokenRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"renewServiceToken" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"renewServiceToken_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_RenewServiceTokenResponse *) recv_renewServiceToken
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_RenewServiceToken_result * result = [[[BananaService_RenewServiceToken_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  if ([result ex4IsSet]) {
    @throw [result ex4];
  }
  if ([result ex5IsSet]) {
    @throw [result ex5];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"renewServiceToken failed: unknown result"];
}

- (BananaService_RenewServiceTokenResponse *) renewServiceToken: (BananaService_RenewServiceTokenRequest *) request
{
  [self send_renewServiceToken : request];
  [[outProtocol transport] flush];
  return [self recv_renewServiceToken];
}

- (void) send_regenerateToken: (BananaService_RegenerateTokenRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"regenerateToken" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"regenerateToken_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_RegenerateTokenResponse *) recv_regenerateToken
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_RegenerateToken_result * result = [[[BananaService_RegenerateToken_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  if ([result ex4IsSet]) {
    @throw [result ex4];
  }
  if ([result ex5IsSet]) {
    @throw [result ex5];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"regenerateToken failed: unknown result"];
}

- (BananaService_RegenerateTokenResponse *) regenerateToken: (BananaService_RegenerateTokenRequest *) request
{
  [self send_regenerateToken : request];
  [[outProtocol transport] flush];
  return [self recv_regenerateToken];
}

- (void) send_searchForServices: (BananaService_SearchForServicesRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"searchForServices" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"searchForServices_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_SearchForServicesResponse *) recv_searchForServices
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_SearchForServices_result * result = [[[BananaService_SearchForServices_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  if ([result ex4IsSet]) {
    @throw [result ex4];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"searchForServices failed: unknown result"];
}

- (BananaService_SearchForServicesResponse *) searchForServices: (BananaService_SearchForServicesRequest *) request
{
  [self send_searchForServices : request];
  [[outProtocol transport] flush];
  return [self recv_searchForServices];
}

- (void) send_saveChannel: (BananaService_SaveChannelRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"saveChannel" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"saveChannel_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_SaveChannelResponse *) recv_saveChannel
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_SaveChannel_result * result = [[[BananaService_SaveChannel_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  if ([result ex4IsSet]) {
    @throw [result ex4];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"saveChannel failed: unknown result"];
}

- (BananaService_SaveChannelResponse *) saveChannel: (BananaService_SaveChannelRequest *) request
{
  [self send_saveChannel : request];
  [[outProtocol transport] flush];
  return [self recv_saveChannel];
}

- (void) send_removeSavedChannel: (BananaService_RemoveSavedChannelRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"removeSavedChannel" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"removeSavedChannel_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_RemoveSavedChannelResponse *) recv_removeSavedChannel
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_RemoveSavedChannel_result * result = [[[BananaService_RemoveSavedChannel_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  if ([result ex4IsSet]) {
    @throw [result ex4];
  }
  if ([result ex5IsSet]) {
    @throw [result ex5];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"removeSavedChannel failed: unknown result"];
}

- (BananaService_RemoveSavedChannelResponse *) removeSavedChannel: (BananaService_RemoveSavedChannelRequest *) request
{
  [self send_removeSavedChannel : request];
  [[outProtocol transport] flush];
  return [self recv_removeSavedChannel];
}

- (void) send_snoozeChannel: (BananaService_SnoozeChannelRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"snoozeChannel" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"snoozeChannel_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_SnoozeChannelResponse *) recv_snoozeChannel
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_SnoozeChannel_result * result = [[[BananaService_SnoozeChannel_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  if ([result ex4IsSet]) {
    @throw [result ex4];
  }
  if ([result ex5IsSet]) {
    @throw [result ex5];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"snoozeChannel failed: unknown result"];
}

- (BananaService_SnoozeChannelResponse *) snoozeChannel: (BananaService_SnoozeChannelRequest *) request
{
  [self send_snoozeChannel : request];
  [[outProtocol transport] flush];
  return [self recv_snoozeChannel];
}

- (void) send_getServiceSubscribers: (BananaService_GetServiceSubscribersRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"getServiceSubscribers" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getServiceSubscribers_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_GetServiceSubscribersResponse *) recv_getServiceSubscribers
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_GetServiceSubscribers_result * result = [[[BananaService_GetServiceSubscribers_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  if ([result ex4IsSet]) {
    @throw [result ex4];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getServiceSubscribers failed: unknown result"];
}

- (BananaService_GetServiceSubscribersResponse *) getServiceSubscribers: (BananaService_GetServiceSubscribersRequest *) request
{
  [self send_getServiceSubscribers : request];
  [[outProtocol transport] flush];
  return [self recv_getServiceSubscribers];
}

- (void) send_getMySavedChannels: (BananaService_GetMySavedChannelsRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"getMySavedChannels" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getMySavedChannels_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_GetMySavedChannelsResponse *) recv_getMySavedChannels
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_GetMySavedChannels_result * result = [[[BananaService_GetMySavedChannels_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getMySavedChannels failed: unknown result"];
}

- (BananaService_GetMySavedChannelsResponse *) getMySavedChannels: (BananaService_GetMySavedChannelsRequest *) request
{
  [self send_getMySavedChannels : request];
  [[outProtocol transport] flush];
  return [self recv_getMySavedChannels];
}

- (void) send_getMyServices: (BananaService_GetMyServicesRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"getMyServices" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getMyServices_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_GetMyServicesResponse *) recv_getMyServices
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_GetMyServices_result * result = [[[BananaService_GetMyServices_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getMyServices failed: unknown result"];
}

- (BananaService_GetMyServicesResponse *) getMyServices: (BananaService_GetMyServicesRequest *) request
{
  [self send_getMyServices : request];
  [[outProtocol transport] flush];
  return [self recv_getMyServices];
}

- (void) send_getServiceInfo: (BananaService_GetServiceInfoRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"getServiceInfo" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getServiceInfo_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_GetServiceInfoResponse *) recv_getServiceInfo
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_GetServiceInfo_result * result = [[[BananaService_GetServiceInfo_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  if ([result ex4IsSet]) {
    @throw [result ex4];
  }
  if ([result ex5IsSet]) {
    @throw [result ex5];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getServiceInfo failed: unknown result"];
}

- (BananaService_GetServiceInfoResponse *) getServiceInfo: (BananaService_GetServiceInfoRequest *) request
{
  [self send_getServiceInfo : request];
  [[outProtocol transport] flush];
  return [self recv_getServiceInfo];
}

- (void) send_getDashboard: (BananaService_GetDashboardRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"getDashboard" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getDashboard_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BananaService_GetDashboardResponse *) recv_getDashboard
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BananaService_GetDashboard_result * result = [[[BananaService_GetDashboard_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result ex1IsSet]) {
    @throw [result ex1];
  }
  if ([result ex2IsSet]) {
    @throw [result ex2];
  }
  if ([result ex3IsSet]) {
    @throw [result ex3];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getDashboard failed: unknown result"];
}

- (BananaService_GetDashboardResponse *) getDashboard: (BananaService_GetDashboardRequest *) request
{
  [self send_getDashboard : request];
  [[outProtocol transport] flush];
  return [self recv_getDashboard];
}

@end

@implementation BananaService_BananaServiceProcessor

- (id) initWithBananaService: (id <BananaService_BananaService>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
  SEL s = @selector(process_sendMessage_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"sendMessage"];
}
{
  SEL s = @selector(process_sendMessageAsync_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"sendMessageAsync"];
}
{
  SEL s = @selector(process_signIn_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"signIn"];
}
{
  SEL s = @selector(process_signUp_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"signUp"];
}
{
  SEL s = @selector(process_provisionService_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"provisionService"];
}
{
  SEL s = @selector(process_subscribeToService_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"subscribeToService"];
}
{
  SEL s = @selector(process_registerHealthCheck_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"registerHealthCheck"];
}
{
  SEL s = @selector(process_renewServiceToken_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"renewServiceToken"];
}
{
  SEL s = @selector(process_regenerateToken_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"regenerateToken"];
}
{
  SEL s = @selector(process_searchForServices_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"searchForServices"];
}
{
  SEL s = @selector(process_saveChannel_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"saveChannel"];
}
{
  SEL s = @selector(process_removeSavedChannel_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"removeSavedChannel"];
}
{
  SEL s = @selector(process_snoozeChannel_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"snoozeChannel"];
}
{
  SEL s = @selector(process_getServiceSubscribers_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getServiceSubscribers"];
}
{
  SEL s = @selector(process_getMySavedChannels_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getMySavedChannels"];
}
{
  SEL s = @selector(process_getMyServices_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getMyServices"];
}
{
  SEL s = @selector(process_getServiceInfo_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getServiceInfo"];
}
{
  SEL s = @selector(process_getDashboard_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getDashboard"];
}
return self;
}

- (id<BananaService_BananaService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_sendMessage_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_sendMessage_args * args = [[BananaService_sendMessage_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_SendMessage_result * result = [[BananaService_SendMessage_result alloc] init];
[result setSuccess: [mService sendMessage: [args request]]];
[outProtocol writeMessageBeginWithName: @"sendMessage"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_sendMessageAsync_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_sendMessageAsync_args * args = [[BananaService_sendMessageAsync_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
[mService sendMessageAsync: [args request]];
[args release_stub];
}

- (void) process_signIn_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_signIn_args * args = [[BananaService_signIn_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_SignIn_result * result = [[BananaService_SignIn_result alloc] init];
[result setSuccess: [mService signIn: [args request]]];
[outProtocol writeMessageBeginWithName: @"signIn"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_signUp_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_signUp_args * args = [[BananaService_signUp_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_SignUp_result * result = [[BananaService_SignUp_result alloc] init];
[result setSuccess: [mService signUp: [args request]]];
[outProtocol writeMessageBeginWithName: @"signUp"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_provisionService_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_provisionService_args * args = [[BananaService_provisionService_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_ProvisionService_result * result = [[BananaService_ProvisionService_result alloc] init];
[result setSuccess: [mService provisionService: [args request]]];
[outProtocol writeMessageBeginWithName: @"provisionService"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_subscribeToService_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_subscribeToService_args * args = [[BananaService_subscribeToService_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_SubscribeToService_result * result = [[BananaService_SubscribeToService_result alloc] init];
[result setSuccess: [mService subscribeToService: [args request]]];
[outProtocol writeMessageBeginWithName: @"subscribeToService"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_registerHealthCheck_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_registerHealthCheck_args * args = [[BananaService_registerHealthCheck_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_RegisterHealthCheck_result * result = [[BananaService_RegisterHealthCheck_result alloc] init];
[result setSuccess: [mService registerHealthCheck: [args request]]];
[outProtocol writeMessageBeginWithName: @"registerHealthCheck"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_renewServiceToken_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_renewServiceToken_args * args = [[BananaService_renewServiceToken_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_RenewServiceToken_result * result = [[BananaService_RenewServiceToken_result alloc] init];
[result setSuccess: [mService renewServiceToken: [args request]]];
[outProtocol writeMessageBeginWithName: @"renewServiceToken"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_regenerateToken_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_regenerateToken_args * args = [[BananaService_regenerateToken_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_RegenerateToken_result * result = [[BananaService_RegenerateToken_result alloc] init];
[result setSuccess: [mService regenerateToken: [args request]]];
[outProtocol writeMessageBeginWithName: @"regenerateToken"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_searchForServices_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_searchForServices_args * args = [[BananaService_searchForServices_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_SearchForServices_result * result = [[BananaService_SearchForServices_result alloc] init];
[result setSuccess: [mService searchForServices: [args request]]];
[outProtocol writeMessageBeginWithName: @"searchForServices"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_saveChannel_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_saveChannel_args * args = [[BananaService_saveChannel_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_SaveChannel_result * result = [[BananaService_SaveChannel_result alloc] init];
[result setSuccess: [mService saveChannel: [args request]]];
[outProtocol writeMessageBeginWithName: @"saveChannel"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_removeSavedChannel_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_removeSavedChannel_args * args = [[BananaService_removeSavedChannel_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_RemoveSavedChannel_result * result = [[BananaService_RemoveSavedChannel_result alloc] init];
[result setSuccess: [mService removeSavedChannel: [args request]]];
[outProtocol writeMessageBeginWithName: @"removeSavedChannel"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_snoozeChannel_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_snoozeChannel_args * args = [[BananaService_snoozeChannel_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_SnoozeChannel_result * result = [[BananaService_SnoozeChannel_result alloc] init];
[result setSuccess: [mService snoozeChannel: [args request]]];
[outProtocol writeMessageBeginWithName: @"snoozeChannel"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getServiceSubscribers_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_getServiceSubscribers_args * args = [[BananaService_getServiceSubscribers_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_GetServiceSubscribers_result * result = [[BananaService_GetServiceSubscribers_result alloc] init];
[result setSuccess: [mService getServiceSubscribers: [args request]]];
[outProtocol writeMessageBeginWithName: @"getServiceSubscribers"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getMySavedChannels_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_getMySavedChannels_args * args = [[BananaService_getMySavedChannels_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_GetMySavedChannels_result * result = [[BananaService_GetMySavedChannels_result alloc] init];
[result setSuccess: [mService getMySavedChannels: [args request]]];
[outProtocol writeMessageBeginWithName: @"getMySavedChannels"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getMyServices_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_getMyServices_args * args = [[BananaService_getMyServices_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_GetMyServices_result * result = [[BananaService_GetMyServices_result alloc] init];
[result setSuccess: [mService getMyServices: [args request]]];
[outProtocol writeMessageBeginWithName: @"getMyServices"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getServiceInfo_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_getServiceInfo_args * args = [[BananaService_getServiceInfo_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_GetServiceInfo_result * result = [[BananaService_GetServiceInfo_result alloc] init];
[result setSuccess: [mService getServiceInfo: [args request]]];
[outProtocol writeMessageBeginWithName: @"getServiceInfo"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getDashboard_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BananaService_getDashboard_args * args = [[BananaService_getDashboard_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BananaService_GetDashboard_result * result = [[BananaService_GetDashboard_result alloc] init];
[result setSuccess: [mService getDashboard: [args request]]];
[outProtocol writeMessageBeginWithName: @"getDashboard"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

