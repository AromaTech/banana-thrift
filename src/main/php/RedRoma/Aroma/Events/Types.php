<?php
namespace RedRoma\Aroma\Events;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class ApplicationMessagesDeleted {
  static $_TSPEC;

  /**
   * @var int
   */
  public $totalMessagesDeleted = null;
  /**
   * @var string
   */
  public $message = "Application's messages have been deleted";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'totalMessagesDeleted',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['totalMessagesDeleted'])) {
        $this->totalMessagesDeleted = $vals['totalMessagesDeleted'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'ApplicationMessagesDeleted';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalMessagesDeleted);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApplicationMessagesDeleted');
    if ($this->totalMessagesDeleted !== null) {
      $xfer += $output->writeFieldBegin('totalMessagesDeleted', TType::I32, 1);
      $xfer += $output->writeI32($this->totalMessagesDeleted);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * An Application's Token has been renewed.
 */
class ApplicationTokenRenewed {
  static $_TSPEC;

  /**
   * We may or may not include the new Application Token, for security reasons.
   * 
   * @var \RedRoma\Aroma\Authentication\ApplicationToken
   */
  public $applicationToken = null;
  /**
   * @var string
   */
  public $message = "Application Token has been renewed";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'applicationToken',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Authentication\ApplicationToken',
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['applicationToken'])) {
        $this->applicationToken = $vals['applicationToken'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'ApplicationTokenRenewed';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->applicationToken = new \RedRoma\Aroma\Authentication\ApplicationToken();
            $xfer += $this->applicationToken->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApplicationTokenRenewed');
    if ($this->applicationToken !== null) {
      if (!is_object($this->applicationToken)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('applicationToken', TType::STRUCT, 1);
      $xfer += $this->applicationToken->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * An Application Token has been regenerated by someone,
 * likely because the original one was lost, compromised, or forgotten.
 */
class ApplicationTokenRegenerated {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\Authentication\ApplicationToken
   */
  public $applicationToken = null;
  /**
   * @var \RedRoma\Aroma\User
   */
  public $actor = null;
  /**
   * @var string
   */
  public $message = "Application Token has been re-created";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'applicationToken',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Authentication\ApplicationToken',
          ),
        2 => array(
          'var' => 'actor',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\User',
          ),
        3 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['applicationToken'])) {
        $this->applicationToken = $vals['applicationToken'];
      }
      if (isset($vals['actor'])) {
        $this->actor = $vals['actor'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'ApplicationTokenRegenerated';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->applicationToken = new \RedRoma\Aroma\Authentication\ApplicationToken();
            $xfer += $this->applicationToken->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->actor = new \RedRoma\Aroma\User();
            $xfer += $this->actor->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApplicationTokenRegenerated');
    if ($this->applicationToken !== null) {
      if (!is_object($this->applicationToken)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('applicationToken', TType::STRUCT, 1);
      $xfer += $this->applicationToken->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->actor !== null) {
      if (!is_object($this->actor)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('actor', TType::STRUCT, 2);
      $xfer += $this->actor->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 3);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * An Application has sent a message.
 */
class ApplicationSentMessage {
  static $_TSPEC;

  /**
   * @var string
   */
  public $messageId = null;
  /**
   * @var \RedRoma\Aroma\Message
   */
  public $messageSentByApplication = null;
  /**
   * @var string
   */
  public $message = "Application has sent an Alert";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'messageId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'messageSentByApplication',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Message',
          ),
        3 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['messageId'])) {
        $this->messageId = $vals['messageId'];
      }
      if (isset($vals['messageSentByApplication'])) {
        $this->messageSentByApplication = $vals['messageSentByApplication'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'ApplicationSentMessage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->messageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->messageSentByApplication = new \RedRoma\Aroma\Message();
            $xfer += $this->messageSentByApplication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApplicationSentMessage');
    if ($this->messageId !== null) {
      $xfer += $output->writeFieldBegin('messageId', TType::STRING, 1);
      $xfer += $output->writeString($this->messageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageSentByApplication !== null) {
      if (!is_object($this->messageSentByApplication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('messageSentByApplication', TType::STRUCT, 2);
      $xfer += $this->messageSentByApplication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 3);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ApplicationDeleted {
  static $_TSPEC;

  /**
   * @var string
   */
  public $message = "Application has been deleted";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'ApplicationDeleted';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApplicationDeleted');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ApplicationFollowed {
  static $_TSPEC;

  /**
   * @var string
   */
  public $message = "Application Followed";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'ApplicationFollowed';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApplicationFollowed');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ApplicationUnfollowed {
  static $_TSPEC;

  /**
   * @var string
   */
  public $message = "Application Unfollowed";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'ApplicationUnfollowed';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApplicationUnfollowed');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ApplicationUpdated {
  static $_TSPEC;

  /**
   * @var string
   */
  public $message = "Application Updated";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'ApplicationUpdated';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApplicationUpdated');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * A Health Poke returned a failure.
 */
class HealthCheckFailed {
  static $_TSPEC;

  /**
   * May include the name of the host that went down.
   * 
   * @var string
   */
  public $hostname = null;
  /**
   * The Human-Friendly name of the Application.
   * 
   * @var string
   */
  public $message = "Application failed a Health Check";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'hostname',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['hostname'])) {
        $this->hostname = $vals['hostname'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'HealthCheckFailed';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->hostname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('HealthCheckFailed');
    if ($this->hostname !== null) {
      $xfer += $output->writeFieldBegin('hostname', TType::STRING, 1);
      $xfer += $output->writeString($this->hostname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * An Application that was previously unhealthy
 * is now healthy.
 */
class HealthCheckBackToNormal {
  static $_TSPEC;

  /**
   * @var string
   */
  public $message = "Application's Health is back to normal";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'HealthCheckBackToNormal';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('HealthCheckBackToNormal');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OwnerAdded {
  static $_TSPEC;

  /**
   * @var string
   */
  public $userIdOfNewOwner = null;
  /**
   * @var \RedRoma\Aroma\User
   */
  public $newOwner = null;
  /**
   * @var string
   */
  public $message = "New Owner Added";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userIdOfNewOwner',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'newOwner',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\User',
          ),
        3 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userIdOfNewOwner'])) {
        $this->userIdOfNewOwner = $vals['userIdOfNewOwner'];
      }
      if (isset($vals['newOwner'])) {
        $this->newOwner = $vals['newOwner'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'OwnerAdded';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userIdOfNewOwner);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->newOwner = new \RedRoma\Aroma\User();
            $xfer += $this->newOwner->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OwnerAdded');
    if ($this->userIdOfNewOwner !== null) {
      $xfer += $output->writeFieldBegin('userIdOfNewOwner', TType::STRING, 1);
      $xfer += $output->writeString($this->userIdOfNewOwner);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->newOwner !== null) {
      if (!is_object($this->newOwner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('newOwner', TType::STRUCT, 2);
      $xfer += $this->newOwner->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 3);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * An Application Owner has approved a request to Follow or perform
 * some other action on an Application by a non-owner.
 */
class OwnerApprovedRequest {
  static $_TSPEC;

  /**
   * @var string
   */
  public $message = "Application Owner approved your request";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'OwnerApprovedRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OwnerApprovedRequest');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * A General Event is a less formal kind of Event.
 */
class GeneralEvent {
  static $_TSPEC;

  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'GeneralEvent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GeneralEvent');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * An Event represents the different types of events that can
 * occur within Aroma.
 */
class EventType {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\Events\ApplicationMessagesDeleted
   */
  public $applicationMessageDeleted = null;
  /**
   * @var \RedRoma\Aroma\Events\HealthCheckFailed
   */
  public $healthCheckFailed = null;
  /**
   * @var \RedRoma\Aroma\Events\HealthCheckBackToNormal
   */
  public $healthCheckBackToNormal = null;
  /**
   * @var \RedRoma\Aroma\Events\ApplicationFollowed
   */
  public $applicationFollowed = null;
  /**
   * @var \RedRoma\Aroma\Events\ApplicationDeleted
   */
  public $applicationDeleted = null;
  /**
   * @var \RedRoma\Aroma\Events\ApplicationTokenRenewed
   */
  public $applicationTokenRenewed = null;
  /**
   * @var \RedRoma\Aroma\Events\ApplicationTokenRegenerated
   */
  public $applicationTokenRegenerated = null;
  /**
   * @var \RedRoma\Aroma\Events\ApplicationSentMessage
   */
  public $applicationSentMessage = null;
  /**
   * @var \RedRoma\Aroma\Events\ApplicationUnfollowed
   */
  public $applicationUnfollowed = null;
  /**
   * @var \RedRoma\Aroma\Events\ApplicationUpdated
   */
  public $applicationUpdated = null;
  /**
   * @var \RedRoma\Aroma\Events\OwnerApprovedRequest
   */
  public $ownerApprovedRequest = null;
  /**
   * @var \RedRoma\Aroma\Events\OwnerAdded
   */
  public $ownerAdded = null;
  /**
   * @var \RedRoma\Aroma\Events\GeneralEvent
   */
  public $generalEvent = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'applicationMessageDeleted',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Events\ApplicationMessagesDeleted',
          ),
        2 => array(
          'var' => 'healthCheckFailed',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Events\HealthCheckFailed',
          ),
        3 => array(
          'var' => 'healthCheckBackToNormal',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Events\HealthCheckBackToNormal',
          ),
        4 => array(
          'var' => 'applicationFollowed',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Events\ApplicationFollowed',
          ),
        5 => array(
          'var' => 'applicationDeleted',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Events\ApplicationDeleted',
          ),
        6 => array(
          'var' => 'applicationTokenRenewed',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Events\ApplicationTokenRenewed',
          ),
        7 => array(
          'var' => 'applicationTokenRegenerated',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Events\ApplicationTokenRegenerated',
          ),
        8 => array(
          'var' => 'applicationSentMessage',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Events\ApplicationSentMessage',
          ),
        12 => array(
          'var' => 'applicationUnfollowed',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Events\ApplicationUnfollowed',
          ),
        13 => array(
          'var' => 'applicationUpdated',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Events\ApplicationUpdated',
          ),
        9 => array(
          'var' => 'ownerApprovedRequest',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Events\OwnerApprovedRequest',
          ),
        10 => array(
          'var' => 'ownerAdded',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Events\OwnerAdded',
          ),
        11 => array(
          'var' => 'generalEvent',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Events\GeneralEvent',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['applicationMessageDeleted'])) {
        $this->applicationMessageDeleted = $vals['applicationMessageDeleted'];
      }
      if (isset($vals['healthCheckFailed'])) {
        $this->healthCheckFailed = $vals['healthCheckFailed'];
      }
      if (isset($vals['healthCheckBackToNormal'])) {
        $this->healthCheckBackToNormal = $vals['healthCheckBackToNormal'];
      }
      if (isset($vals['applicationFollowed'])) {
        $this->applicationFollowed = $vals['applicationFollowed'];
      }
      if (isset($vals['applicationDeleted'])) {
        $this->applicationDeleted = $vals['applicationDeleted'];
      }
      if (isset($vals['applicationTokenRenewed'])) {
        $this->applicationTokenRenewed = $vals['applicationTokenRenewed'];
      }
      if (isset($vals['applicationTokenRegenerated'])) {
        $this->applicationTokenRegenerated = $vals['applicationTokenRegenerated'];
      }
      if (isset($vals['applicationSentMessage'])) {
        $this->applicationSentMessage = $vals['applicationSentMessage'];
      }
      if (isset($vals['applicationUnfollowed'])) {
        $this->applicationUnfollowed = $vals['applicationUnfollowed'];
      }
      if (isset($vals['applicationUpdated'])) {
        $this->applicationUpdated = $vals['applicationUpdated'];
      }
      if (isset($vals['ownerApprovedRequest'])) {
        $this->ownerApprovedRequest = $vals['ownerApprovedRequest'];
      }
      if (isset($vals['ownerAdded'])) {
        $this->ownerAdded = $vals['ownerAdded'];
      }
      if (isset($vals['generalEvent'])) {
        $this->generalEvent = $vals['generalEvent'];
      }
    }
  }

  public function getName() {
    return 'EventType';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->applicationMessageDeleted = new \RedRoma\Aroma\Events\ApplicationMessagesDeleted();
            $xfer += $this->applicationMessageDeleted->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->healthCheckFailed = new \RedRoma\Aroma\Events\HealthCheckFailed();
            $xfer += $this->healthCheckFailed->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->healthCheckBackToNormal = new \RedRoma\Aroma\Events\HealthCheckBackToNormal();
            $xfer += $this->healthCheckBackToNormal->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->applicationFollowed = new \RedRoma\Aroma\Events\ApplicationFollowed();
            $xfer += $this->applicationFollowed->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->applicationDeleted = new \RedRoma\Aroma\Events\ApplicationDeleted();
            $xfer += $this->applicationDeleted->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->applicationTokenRenewed = new \RedRoma\Aroma\Events\ApplicationTokenRenewed();
            $xfer += $this->applicationTokenRenewed->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->applicationTokenRegenerated = new \RedRoma\Aroma\Events\ApplicationTokenRegenerated();
            $xfer += $this->applicationTokenRegenerated->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->applicationSentMessage = new \RedRoma\Aroma\Events\ApplicationSentMessage();
            $xfer += $this->applicationSentMessage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRUCT) {
            $this->applicationUnfollowed = new \RedRoma\Aroma\Events\ApplicationUnfollowed();
            $xfer += $this->applicationUnfollowed->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRUCT) {
            $this->applicationUpdated = new \RedRoma\Aroma\Events\ApplicationUpdated();
            $xfer += $this->applicationUpdated->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRUCT) {
            $this->ownerApprovedRequest = new \RedRoma\Aroma\Events\OwnerApprovedRequest();
            $xfer += $this->ownerApprovedRequest->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
            $this->ownerAdded = new \RedRoma\Aroma\Events\OwnerAdded();
            $xfer += $this->ownerAdded->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRUCT) {
            $this->generalEvent = new \RedRoma\Aroma\Events\GeneralEvent();
            $xfer += $this->generalEvent->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EventType');
    if ($this->applicationMessageDeleted !== null) {
      if (!is_object($this->applicationMessageDeleted)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('applicationMessageDeleted', TType::STRUCT, 1);
      $xfer += $this->applicationMessageDeleted->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->healthCheckFailed !== null) {
      if (!is_object($this->healthCheckFailed)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('healthCheckFailed', TType::STRUCT, 2);
      $xfer += $this->healthCheckFailed->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->healthCheckBackToNormal !== null) {
      if (!is_object($this->healthCheckBackToNormal)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('healthCheckBackToNormal', TType::STRUCT, 3);
      $xfer += $this->healthCheckBackToNormal->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationFollowed !== null) {
      if (!is_object($this->applicationFollowed)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('applicationFollowed', TType::STRUCT, 4);
      $xfer += $this->applicationFollowed->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationDeleted !== null) {
      if (!is_object($this->applicationDeleted)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('applicationDeleted', TType::STRUCT, 5);
      $xfer += $this->applicationDeleted->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationTokenRenewed !== null) {
      if (!is_object($this->applicationTokenRenewed)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('applicationTokenRenewed', TType::STRUCT, 6);
      $xfer += $this->applicationTokenRenewed->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationTokenRegenerated !== null) {
      if (!is_object($this->applicationTokenRegenerated)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('applicationTokenRegenerated', TType::STRUCT, 7);
      $xfer += $this->applicationTokenRegenerated->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationSentMessage !== null) {
      if (!is_object($this->applicationSentMessage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('applicationSentMessage', TType::STRUCT, 8);
      $xfer += $this->applicationSentMessage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ownerApprovedRequest !== null) {
      if (!is_object($this->ownerApprovedRequest)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ownerApprovedRequest', TType::STRUCT, 9);
      $xfer += $this->ownerApprovedRequest->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ownerAdded !== null) {
      if (!is_object($this->ownerAdded)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ownerAdded', TType::STRUCT, 10);
      $xfer += $this->ownerAdded->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->generalEvent !== null) {
      if (!is_object($this->generalEvent)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('generalEvent', TType::STRUCT, 11);
      $xfer += $this->generalEvent->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationUnfollowed !== null) {
      if (!is_object($this->applicationUnfollowed)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('applicationUnfollowed', TType::STRUCT, 12);
      $xfer += $this->applicationUnfollowed->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationUpdated !== null) {
      if (!is_object($this->applicationUpdated)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('applicationUpdated', TType::STRUCT, 13);
      $xfer += $this->applicationUpdated->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * A Notification defines an Event, and the time that it happened.
 */
class Event {
  static $_TSPEC;

  /**
   * @var string
   */
  public $eventId = null;
  /**
   * @var string
   */
  public $userIdOfActor = null;
  /**
   * @var \RedRoma\Aroma\User
   */
  public $actor = null;
  /**
   * @var string
   */
  public $applicationId = null;
  /**
   * @var \RedRoma\Aroma\Application
   */
  public $application = null;
  /**
   * @var \RedRoma\Aroma\Events\EventType
   */
  public $eventType = null;
  /**
   * @var int
   */
  public $timestamp = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'eventId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'userIdOfActor',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'actor',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\User',
          ),
        4 => array(
          'var' => 'applicationId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'application',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Application',
          ),
        6 => array(
          'var' => 'eventType',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Events\EventType',
          ),
        7 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['eventId'])) {
        $this->eventId = $vals['eventId'];
      }
      if (isset($vals['userIdOfActor'])) {
        $this->userIdOfActor = $vals['userIdOfActor'];
      }
      if (isset($vals['actor'])) {
        $this->actor = $vals['actor'];
      }
      if (isset($vals['applicationId'])) {
        $this->applicationId = $vals['applicationId'];
      }
      if (isset($vals['application'])) {
        $this->application = $vals['application'];
      }
      if (isset($vals['eventType'])) {
        $this->eventType = $vals['eventType'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
    }
  }

  public function getName() {
    return 'Event';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->eventId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userIdOfActor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->actor = new \RedRoma\Aroma\User();
            $xfer += $this->actor->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applicationId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->application = new \RedRoma\Aroma\Application();
            $xfer += $this->application->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->eventType = new \RedRoma\Aroma\Events\EventType();
            $xfer += $this->eventType->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Event');
    if ($this->eventId !== null) {
      $xfer += $output->writeFieldBegin('eventId', TType::STRING, 1);
      $xfer += $output->writeString($this->eventId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userIdOfActor !== null) {
      $xfer += $output->writeFieldBegin('userIdOfActor', TType::STRING, 2);
      $xfer += $output->writeString($this->userIdOfActor);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->actor !== null) {
      if (!is_object($this->actor)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('actor', TType::STRUCT, 3);
      $xfer += $this->actor->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationId !== null) {
      $xfer += $output->writeFieldBegin('applicationId', TType::STRING, 4);
      $xfer += $output->writeString($this->applicationId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->application !== null) {
      if (!is_object($this->application)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('application', TType::STRUCT, 5);
      $xfer += $this->application->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eventType !== null) {
      if (!is_object($this->eventType)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('eventType', TType::STRUCT, 6);
      $xfer += $this->eventType->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 7);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


