<?php
namespace RedRoma\Aroma;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class ImageType {
  const JPEG = 1;
  const PNG = 2;
  static public $__names = array(
    1 => 'JPEG',
    2 => 'PNG',
  );
}

final class Industry {
  const BANKING = 1;
  const ECOMMERCE = 2;
  const EDUCATION = 3;
  const ENTERTAINMENT = 4;
  const GOVERMENT = 5;
  const MARKETING = 6;
  const RETAIL = 7;
  const TECH = 8;
  const AEROSPACE = 9;
  const ROBOTICS = 10;
  static public $__names = array(
    1 => 'BANKING',
    2 => 'ECOMMERCE',
    3 => 'EDUCATION',
    4 => 'ENTERTAINMENT',
    5 => 'GOVERMENT',
    6 => 'MARKETING',
    7 => 'RETAIL',
    8 => 'TECH',
    9 => 'AEROSPACE',
    10 => 'ROBOTICS',
  );
}

final class Tier {
  const FREE = 1;
  const PAID = 2;
  static public $__names = array(
    1 => 'FREE',
    2 => 'PAID',
  );
}

/**
 * Defines the basic Units of Time Measurement.
 */
final class TimeUnit {
  const MILLIS = 1;
  const SECONDS = 2;
  const MINUTES = 3;
  const HOURS = 4;
  const DAYS = 5;
  const WEEKS = 6;
  static public $__names = array(
    1 => 'MILLIS',
    2 => 'SECONDS',
    3 => 'MINUTES',
    4 => 'HOURS',
    5 => 'DAYS',
    6 => 'WEEKS',
  );
}

/**
 * Applications are usually written in one main language.
 */
final class ProgrammingLanguage {
  const JAVA = 1;
  const CPP = 2;
  const C_SHARP = 3;
  const C = 4;
  const OBJECTIVE_C = 5;
  const SWIFT = 6;
  const DOT_NET = 7;
  const RUBY = 8;
  const GROOVY = 9;
  const PYTHON = 10;
  const PHP = 11;
  const NODE = 12;
  const DART = 13;
  const OTHER = 14;
  static public $__names = array(
    1 => 'JAVA',
    2 => 'CPP',
    3 => 'C_SHARP',
    4 => 'C',
    5 => 'OBJECTIVE_C',
    6 => 'SWIFT',
    7 => 'DOT_NET',
    8 => 'RUBY',
    9 => 'GROOVY',
    10 => 'PYTHON',
    11 => 'PHP',
    12 => 'NODE',
    13 => 'DART',
    14 => 'OTHER',
  );
}

/**
 * Defines the Role(s) that a human in this system
 * can be.
 */
final class Role {
  const DEVELOPER = 1;
  const OPERATIONS = 2;
  const MANAGER = 3;
  const PRODUCT = 4;
  const QA = 5;
  const FAN = 6;
  static public $__names = array(
    1 => 'DEVELOPER',
    2 => 'OPERATIONS',
    3 => 'MANAGER',
    4 => 'PRODUCT',
    5 => 'QA',
    6 => 'FAN',
  );
}

/**
 * Determines how Important or Severe a Message is.
 */
final class Urgency {
  /**
   * Lowest level of urgency.
   */
  const LOW = 1;
  /**
   * Middle level of urgency.
   */
  const MEDIUM = 2;
  /**
   * Highest level of urgency.
   */
  const HIGH = 3;
  static public $__names = array(
    1 => 'LOW',
    2 => 'MEDIUM',
    3 => 'HIGH',
  );
}

/**
 * Defines a Period of Time, or a Length of Time.
 */
class LengthOfTime {
  static $_TSPEC;

  /**
   * @var int
   */
  public $unit = null;
  /**
   * The Value must be non-negative
   * 
   * @var int
   */
  public $value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'unit',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['unit'])) {
        $this->unit = $vals['unit'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
    }
  }

  public function getName() {
    return 'LengthOfTime';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->unit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LengthOfTime');
    if ($this->unit !== null) {
      $xfer += $output->writeFieldBegin('unit', TType::I32, 1);
      $xfer += $output->writeI32($this->unit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      $xfer += $output->writeFieldBegin('value', TType::I64, 2);
      $xfer += $output->writeI64($this->value);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 2 Dimensional Image Size.
 */
class Dimension {
  static $_TSPEC;

  /**
   * @var int
   */
  public $width = null;
  /**
   * @var int
   */
  public $height = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'width',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'height',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['width'])) {
        $this->width = $vals['width'];
      }
      if (isset($vals['height'])) {
        $this->height = $vals['height'];
      }
    }
  }

  public function getName() {
    return 'Dimension';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->width);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->height);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Dimension');
    if ($this->width !== null) {
      $xfer += $output->writeFieldBegin('width', TType::I32, 1);
      $xfer += $output->writeI32($this->width);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->height !== null) {
      $xfer += $output->writeFieldBegin('height', TType::I32, 2);
      $xfer += $output->writeI32($this->height);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Image {
  static $_TSPEC;

  /**
   * @var int
   */
  public $imageType = null;
  /**
   * @var string
   */
  public $data = null;
  /**
   * @var \RedRoma\Aroma\Dimension
   */
  public $dimension = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'imageType',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'data',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'dimension',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Dimension',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['imageType'])) {
        $this->imageType = $vals['imageType'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
      if (isset($vals['dimension'])) {
        $this->dimension = $vals['dimension'];
      }
    }
  }

  public function getName() {
    return 'Image';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->imageType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->data);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->dimension = new \RedRoma\Aroma\Dimension();
            $xfer += $this->dimension->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Image');
    if ($this->imageType !== null) {
      $xfer += $output->writeFieldBegin('imageType', TType::I32, 1);
      $xfer += $output->writeI32($this->imageType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      $xfer += $output->writeFieldBegin('data', TType::STRING, 2);
      $xfer += $output->writeString($this->data);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dimension !== null) {
      if (!is_object($this->dimension)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('dimension', TType::STRUCT, 3);
      $xfer += $this->dimension->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Message {
  static $_TSPEC;

  /**
   * Each message has a unique ID
   * 
   * @var string
   */
  public $messageId = null;
  /**
   * The body represents the Message's Payload, i.e. the actual message.
   * If the Message Body is too long, it may be truncated. The complete
   * body can then be loaded in a separate request.
   * 
   * @var string
   */
  public $body = null;
  /**
   * @var int
   */
  public $urgency =   1;
  /**
   * The time the message was created on the Application side
   * 
   * @var int
   */
  public $timeOfCreation = null;
  /**
   * The time the message was received on the Server side
   * 
   * @var int
   */
  public $timeMessageReceived = null;
  /**
   * Name of the Application that sent the message.
   * 
   * @var string
   */
  public $applicationName = null;
  /**
   * The Network Hostname of the Device sending the message, ideally the FQDM.
   * 
   * @var string
   */
  public $hostname = null;
  /**
   * @var string
   */
  public $macAddress = null;
  /**
   * @var bool
   */
  public $isTruncated = false;
  /**
   * @var string
   */
  public $title = null;
  /**
   * The ID of the Application the Message was sent from.
   * 
   * @var string
   */
  public $applicationId = null;
  /**
   * @var string
   */
  public $deviceName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'messageId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'body',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'urgency',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'timeOfCreation',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'timeMessageReceived',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'applicationName',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'hostname',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'macAddress',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'isTruncated',
          'type' => TType::BOOL,
          ),
        10 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'applicationId',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'deviceName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['messageId'])) {
        $this->messageId = $vals['messageId'];
      }
      if (isset($vals['body'])) {
        $this->body = $vals['body'];
      }
      if (isset($vals['urgency'])) {
        $this->urgency = $vals['urgency'];
      }
      if (isset($vals['timeOfCreation'])) {
        $this->timeOfCreation = $vals['timeOfCreation'];
      }
      if (isset($vals['timeMessageReceived'])) {
        $this->timeMessageReceived = $vals['timeMessageReceived'];
      }
      if (isset($vals['applicationName'])) {
        $this->applicationName = $vals['applicationName'];
      }
      if (isset($vals['hostname'])) {
        $this->hostname = $vals['hostname'];
      }
      if (isset($vals['macAddress'])) {
        $this->macAddress = $vals['macAddress'];
      }
      if (isset($vals['isTruncated'])) {
        $this->isTruncated = $vals['isTruncated'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['applicationId'])) {
        $this->applicationId = $vals['applicationId'];
      }
      if (isset($vals['deviceName'])) {
        $this->deviceName = $vals['deviceName'];
      }
    }
  }

  public function getName() {
    return 'Message';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->messageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->body);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->urgency);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timeOfCreation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timeMessageReceived);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applicationName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->hostname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->macAddress);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isTruncated);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applicationId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->deviceName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Message');
    if ($this->messageId !== null) {
      $xfer += $output->writeFieldBegin('messageId', TType::STRING, 1);
      $xfer += $output->writeString($this->messageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->body !== null) {
      $xfer += $output->writeFieldBegin('body', TType::STRING, 2);
      $xfer += $output->writeString($this->body);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->urgency !== null) {
      $xfer += $output->writeFieldBegin('urgency', TType::I32, 3);
      $xfer += $output->writeI32($this->urgency);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeOfCreation !== null) {
      $xfer += $output->writeFieldBegin('timeOfCreation', TType::I64, 4);
      $xfer += $output->writeI64($this->timeOfCreation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeMessageReceived !== null) {
      $xfer += $output->writeFieldBegin('timeMessageReceived', TType::I64, 5);
      $xfer += $output->writeI64($this->timeMessageReceived);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationName !== null) {
      $xfer += $output->writeFieldBegin('applicationName', TType::STRING, 6);
      $xfer += $output->writeString($this->applicationName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hostname !== null) {
      $xfer += $output->writeFieldBegin('hostname', TType::STRING, 7);
      $xfer += $output->writeString($this->hostname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->macAddress !== null) {
      $xfer += $output->writeFieldBegin('macAddress', TType::STRING, 8);
      $xfer += $output->writeString($this->macAddress);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isTruncated !== null) {
      $xfer += $output->writeFieldBegin('isTruncated', TType::BOOL, 9);
      $xfer += $output->writeBool($this->isTruncated);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 10);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationId !== null) {
      $xfer += $output->writeFieldBegin('applicationId', TType::STRING, 11);
      $xfer += $output->writeString($this->applicationId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deviceName !== null) {
      $xfer += $output->writeFieldBegin('deviceName', TType::STRING, 12);
      $xfer += $output->writeString($this->deviceName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * An Organization can represent a Company or group of People.
 */
class Organization {
  static $_TSPEC;

  /**
   * @var string
   */
  public $organizationId = null;
  /**
   * @var string
   */
  public $organizationName = null;
  /**
   * @var string
   */
  public $website = null;
  /**
   * @var \RedRoma\Aroma\Image
   */
  public $logo = null;
  /**
   * @var string
   */
  public $techStack = null;
  /**
   * @var string[]
   */
  public $owners = null;
  /**
   * @var string
   */
  public $organizationEmail = null;
  /**
   * @var string
   */
  public $stockMarketSymbol = null;
  /**
   * @var string
   */
  public $logoLink = null;
  /**
   * @var int
   */
  public $industry = null;
  /**
   * @var int
   */
  public $tier =   1;
  /**
   * @var string
   */
  public $organizationDescription = null;
  /**
   * A Link to the Org's GitHub Page, if available.
   * 
   * @var string
   */
  public $githubProfile = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'organizationId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'organizationName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'website',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'logo',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Image',
          ),
        5 => array(
          'var' => 'techStack',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'owners',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        7 => array(
          'var' => 'organizationEmail',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'stockMarketSymbol',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'logoLink',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'industry',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'tier',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'organizationDescription',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'githubProfile',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['organizationId'])) {
        $this->organizationId = $vals['organizationId'];
      }
      if (isset($vals['organizationName'])) {
        $this->organizationName = $vals['organizationName'];
      }
      if (isset($vals['website'])) {
        $this->website = $vals['website'];
      }
      if (isset($vals['logo'])) {
        $this->logo = $vals['logo'];
      }
      if (isset($vals['techStack'])) {
        $this->techStack = $vals['techStack'];
      }
      if (isset($vals['owners'])) {
        $this->owners = $vals['owners'];
      }
      if (isset($vals['organizationEmail'])) {
        $this->organizationEmail = $vals['organizationEmail'];
      }
      if (isset($vals['stockMarketSymbol'])) {
        $this->stockMarketSymbol = $vals['stockMarketSymbol'];
      }
      if (isset($vals['logoLink'])) {
        $this->logoLink = $vals['logoLink'];
      }
      if (isset($vals['industry'])) {
        $this->industry = $vals['industry'];
      }
      if (isset($vals['tier'])) {
        $this->tier = $vals['tier'];
      }
      if (isset($vals['organizationDescription'])) {
        $this->organizationDescription = $vals['organizationDescription'];
      }
      if (isset($vals['githubProfile'])) {
        $this->githubProfile = $vals['githubProfile'];
      }
    }
  }

  public function getName() {
    return 'Organization';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->organizationId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->organizationName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->website);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->logo = new \RedRoma\Aroma\Image();
            $xfer += $this->logo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->techStack);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->owners = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              $this->owners []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->organizationEmail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->stockMarketSymbol);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->logoLink);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->industry);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->organizationDescription);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->githubProfile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Organization');
    if ($this->organizationId !== null) {
      $xfer += $output->writeFieldBegin('organizationId', TType::STRING, 1);
      $xfer += $output->writeString($this->organizationId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->organizationName !== null) {
      $xfer += $output->writeFieldBegin('organizationName', TType::STRING, 2);
      $xfer += $output->writeString($this->organizationName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->website !== null) {
      $xfer += $output->writeFieldBegin('website', TType::STRING, 3);
      $xfer += $output->writeString($this->website);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->logo !== null) {
      if (!is_object($this->logo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('logo', TType::STRUCT, 4);
      $xfer += $this->logo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->techStack !== null) {
      $xfer += $output->writeFieldBegin('techStack', TType::STRING, 5);
      $xfer += $output->writeString($this->techStack);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->owners !== null) {
      if (!is_array($this->owners)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('owners', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRING, count($this->owners));
        {
          foreach ($this->owners as $iter6)
          {
            $xfer += $output->writeString($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->organizationEmail !== null) {
      $xfer += $output->writeFieldBegin('organizationEmail', TType::STRING, 7);
      $xfer += $output->writeString($this->organizationEmail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stockMarketSymbol !== null) {
      $xfer += $output->writeFieldBegin('stockMarketSymbol', TType::STRING, 8);
      $xfer += $output->writeString($this->stockMarketSymbol);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->logoLink !== null) {
      $xfer += $output->writeFieldBegin('logoLink', TType::STRING, 9);
      $xfer += $output->writeString($this->logoLink);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->industry !== null) {
      $xfer += $output->writeFieldBegin('industry', TType::I32, 10);
      $xfer += $output->writeI32($this->industry);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tier !== null) {
      $xfer += $output->writeFieldBegin('tier', TType::I32, 11);
      $xfer += $output->writeI32($this->tier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->organizationDescription !== null) {
      $xfer += $output->writeFieldBegin('organizationDescription', TType::STRING, 12);
      $xfer += $output->writeString($this->organizationDescription);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->githubProfile !== null) {
      $xfer += $output->writeFieldBegin('githubProfile', TType::STRING, 13);
      $xfer += $output->writeString($this->githubProfile);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * A User represents a Human who is a uses the Service.
 */
class User {
  static $_TSPEC;

  /**
   * A person's email address is also considered their identifying trait.
   * 
   * @var string
   */
  public $email = null;
  /**
   * @var string
   */
  public $userId = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * A Person can be more than one thing at once. By default, we assume a developer.
   * 
   * @var int[]
   */
  public $roles = array(
        1 => true,
  );
  /**
   * @var \RedRoma\Aroma\Image
   */
  public $profileImage = null;
  /**
   * @var string
   */
  public $profileImageLink = null;
  /**
   * @var string
   */
  public $githubProfile = null;
  /**
   * @var string
   */
  public $firstName = null;
  /**
   * @var string
   */
  public $middleName = null;
  /**
   * @var string
   */
  public $lastName = null;
  /**
   * @var int
   */
  public $birthdate = null;
  /**
   * @var int
   */
  public $timeUserJoined = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'roles',
          'type' => TType::SET,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        5 => array(
          'var' => 'profileImage',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Image',
          ),
        6 => array(
          'var' => 'profileImageLink',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'githubProfile',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'firstName',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'middleName',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'lastName',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'birthdate',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'timeUserJoined',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['roles'])) {
        $this->roles = $vals['roles'];
      }
      if (isset($vals['profileImage'])) {
        $this->profileImage = $vals['profileImage'];
      }
      if (isset($vals['profileImageLink'])) {
        $this->profileImageLink = $vals['profileImageLink'];
      }
      if (isset($vals['githubProfile'])) {
        $this->githubProfile = $vals['githubProfile'];
      }
      if (isset($vals['firstName'])) {
        $this->firstName = $vals['firstName'];
      }
      if (isset($vals['middleName'])) {
        $this->middleName = $vals['middleName'];
      }
      if (isset($vals['lastName'])) {
        $this->lastName = $vals['lastName'];
      }
      if (isset($vals['birthdate'])) {
        $this->birthdate = $vals['birthdate'];
      }
      if (isset($vals['timeUserJoined'])) {
        $this->timeUserJoined = $vals['timeUserJoined'];
      }
    }
  }

  public function getName() {
    return 'User';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::SET) {
            $this->roles = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readSetBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $xfer += $input->readI32($elem12);
              if (is_scalar($elem12)) {
                $this->roles[$elem12] = true;
              } else {
                $this->roles []= $elem12;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->profileImage = new \RedRoma\Aroma\Image();
            $xfer += $this->profileImage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->profileImageLink);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->githubProfile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->firstName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->middleName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lastName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->birthdate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timeUserJoined);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('User');
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 1);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::STRING, 2);
      $xfer += $output->writeString($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->roles !== null) {
      if (!is_array($this->roles)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('roles', TType::SET, 4);
      {
        $output->writeSetBegin(TType::I32, count($this->roles));
        {
          foreach ($this->roles as $iter13 => $iter14)
          {
            if (is_scalar($iter14)) {
            $xfer += $output->writeI32($iter13);
            } else {
            $xfer += $output->writeI32($iter14);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profileImage !== null) {
      if (!is_object($this->profileImage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('profileImage', TType::STRUCT, 5);
      $xfer += $this->profileImage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profileImageLink !== null) {
      $xfer += $output->writeFieldBegin('profileImageLink', TType::STRING, 6);
      $xfer += $output->writeString($this->profileImageLink);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->githubProfile !== null) {
      $xfer += $output->writeFieldBegin('githubProfile', TType::STRING, 7);
      $xfer += $output->writeString($this->githubProfile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->firstName !== null) {
      $xfer += $output->writeFieldBegin('firstName', TType::STRING, 8);
      $xfer += $output->writeString($this->firstName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->middleName !== null) {
      $xfer += $output->writeFieldBegin('middleName', TType::STRING, 9);
      $xfer += $output->writeString($this->middleName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastName !== null) {
      $xfer += $output->writeFieldBegin('lastName', TType::STRING, 10);
      $xfer += $output->writeString($this->lastName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->birthdate !== null) {
      $xfer += $output->writeFieldBegin('birthdate', TType::I64, 11);
      $xfer += $output->writeI64($this->birthdate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeUserJoined !== null) {
      $xfer += $output->writeFieldBegin('timeUserJoined', TType::I64, 12);
      $xfer += $output->writeI64($this->timeUserJoined);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Application {
  static $_TSPEC;

  /**
   * Owners can perform administrative actions on a service.
   * 
   * @var string[]
   */
  public $owners = null;
  /**
   * When the application was first provisioned.
   * 
   * @var int
   */
  public $timeOfProvisioning = null;
  /**
   * The name of the application.
   * 
   * @var string
   */
  public $name = null;
  /**
   * The Automatically generated ID for the Application.
   * 
   * @var string
   */
  public $applicationId = null;
  /**
   * The total amount of messages that
   * have been counted so far for the Application
   * 
   * @var int
   */
  public $totalMessagesSent = null;
  /**
   * @var \RedRoma\Aroma\Image
   */
  public $icon = null;
  /**
   * @var int
   */
  public $programmingLanguage = null;
  /**
   * Defines the userIds of the people who are following this Application.
   * 
   * @var string[]
   */
  public $followers = array(
  );
  /**
   * @var string
   */
  public $applicationDescription = null;
  /**
   * @var string
   */
  public $organizationId = null;
  /**
   * @var int
   */
  public $tier =   1;
  /**
   * The time the App's token will expire.
   * 
   * @var int
   */
  public $timeOfTokenExpiration = null;
  /**
   * @var string
   */
  public $applicationIconMediaId = null;
  /**
   * Set to true if the calling user follows this Application.
   * 
   * @var bool
   */
  public $isFollowing = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'owners',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'timeOfProvisioning',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'applicationId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'totalMessagesSent',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'icon',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Image',
          ),
        7 => array(
          'var' => 'programmingLanguage',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'followers',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        9 => array(
          'var' => 'applicationDescription',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'organizationId',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'tier',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'timeOfTokenExpiration',
          'type' => TType::I64,
          ),
        13 => array(
          'var' => 'applicationIconMediaId',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'isFollowing',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['owners'])) {
        $this->owners = $vals['owners'];
      }
      if (isset($vals['timeOfProvisioning'])) {
        $this->timeOfProvisioning = $vals['timeOfProvisioning'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['applicationId'])) {
        $this->applicationId = $vals['applicationId'];
      }
      if (isset($vals['totalMessagesSent'])) {
        $this->totalMessagesSent = $vals['totalMessagesSent'];
      }
      if (isset($vals['icon'])) {
        $this->icon = $vals['icon'];
      }
      if (isset($vals['programmingLanguage'])) {
        $this->programmingLanguage = $vals['programmingLanguage'];
      }
      if (isset($vals['followers'])) {
        $this->followers = $vals['followers'];
      }
      if (isset($vals['applicationDescription'])) {
        $this->applicationDescription = $vals['applicationDescription'];
      }
      if (isset($vals['organizationId'])) {
        $this->organizationId = $vals['organizationId'];
      }
      if (isset($vals['tier'])) {
        $this->tier = $vals['tier'];
      }
      if (isset($vals['timeOfTokenExpiration'])) {
        $this->timeOfTokenExpiration = $vals['timeOfTokenExpiration'];
      }
      if (isset($vals['applicationIconMediaId'])) {
        $this->applicationIconMediaId = $vals['applicationIconMediaId'];
      }
      if (isset($vals['isFollowing'])) {
        $this->isFollowing = $vals['isFollowing'];
      }
    }
  }

  public function getName() {
    return 'Application';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::SET) {
            $this->owners = array();
            $_size15 = 0;
            $_etype18 = 0;
            $xfer += $input->readSetBegin($_etype18, $_size15);
            for ($_i19 = 0; $_i19 < $_size15; ++$_i19)
            {
              $elem20 = null;
              $xfer += $input->readString($elem20);
              if (is_scalar($elem20)) {
                $this->owners[$elem20] = true;
              } else {
                $this->owners []= $elem20;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timeOfProvisioning);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applicationId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalMessagesSent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->icon = new \RedRoma\Aroma\Image();
            $xfer += $this->icon->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->programmingLanguage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::SET) {
            $this->followers = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readSetBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $xfer += $input->readString($elem26);
              if (is_scalar($elem26)) {
                $this->followers[$elem26] = true;
              } else {
                $this->followers []= $elem26;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applicationDescription);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->organizationId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timeOfTokenExpiration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applicationIconMediaId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isFollowing);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Application');
    if ($this->owners !== null) {
      if (!is_array($this->owners)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('owners', TType::SET, 1);
      {
        $output->writeSetBegin(TType::STRING, count($this->owners));
        {
          foreach ($this->owners as $iter27 => $iter28)
          {
            if (is_scalar($iter28)) {
            $xfer += $output->writeString($iter27);
            } else {
            $xfer += $output->writeString($iter28);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeOfProvisioning !== null) {
      $xfer += $output->writeFieldBegin('timeOfProvisioning', TType::I64, 2);
      $xfer += $output->writeI64($this->timeOfProvisioning);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationId !== null) {
      $xfer += $output->writeFieldBegin('applicationId', TType::STRING, 4);
      $xfer += $output->writeString($this->applicationId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalMessagesSent !== null) {
      $xfer += $output->writeFieldBegin('totalMessagesSent', TType::I64, 5);
      $xfer += $output->writeI64($this->totalMessagesSent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->icon !== null) {
      if (!is_object($this->icon)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('icon', TType::STRUCT, 6);
      $xfer += $this->icon->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->programmingLanguage !== null) {
      $xfer += $output->writeFieldBegin('programmingLanguage', TType::I32, 7);
      $xfer += $output->writeI32($this->programmingLanguage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->followers !== null) {
      if (!is_array($this->followers)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('followers', TType::SET, 8);
      {
        $output->writeSetBegin(TType::STRING, count($this->followers));
        {
          foreach ($this->followers as $iter29 => $iter30)
          {
            if (is_scalar($iter30)) {
            $xfer += $output->writeString($iter29);
            } else {
            $xfer += $output->writeString($iter30);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationDescription !== null) {
      $xfer += $output->writeFieldBegin('applicationDescription', TType::STRING, 9);
      $xfer += $output->writeString($this->applicationDescription);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->organizationId !== null) {
      $xfer += $output->writeFieldBegin('organizationId', TType::STRING, 10);
      $xfer += $output->writeString($this->organizationId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tier !== null) {
      $xfer += $output->writeFieldBegin('tier', TType::I32, 11);
      $xfer += $output->writeI32($this->tier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeOfTokenExpiration !== null) {
      $xfer += $output->writeFieldBegin('timeOfTokenExpiration', TType::I64, 12);
      $xfer += $output->writeI64($this->timeOfTokenExpiration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationIconMediaId !== null) {
      $xfer += $output->writeFieldBegin('applicationIconMediaId', TType::STRING, 13);
      $xfer += $output->writeString($this->applicationIconMediaId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isFollowing !== null) {
      $xfer += $output->writeFieldBegin('isFollowing', TType::BOOL, 14);
      $xfer += $output->writeBool($this->isFollowing);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Defines an Aroma announcement.
 * Examples include:
 * + Going down for system maintenance
 * + Looking for feedback
 * + New Update available
 * + Other news
 */
class ServiceAnnouncement {
  static $_TSPEC;

  /**
   * @var string
   */
  public $message = null;
  /**
   * @var int
   */
  public $importance = null;
  /**
   * Each announcement has an ID so that it can be dismissed by users.
   * 
   * @var string
   */
  public $id = null;
  /**
   * An announcement is irrelevant after this time.
   * 
   * @var int
   */
  public $timeOfExpiration = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importance',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'timeOfExpiration',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['importance'])) {
        $this->importance = $vals['importance'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['timeOfExpiration'])) {
        $this->timeOfExpiration = $vals['timeOfExpiration'];
      }
    }
  }

  public function getName() {
    return 'ServiceAnnouncement';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->importance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timeOfExpiration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ServiceAnnouncement');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importance !== null) {
      $xfer += $output->writeFieldBegin('importance', TType::I32, 2);
      $xfer += $output->writeI32($this->importance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 3);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeOfExpiration !== null) {
      $xfer += $output->writeFieldBegin('timeOfExpiration', TType::I64, 4);
      $xfer += $output->writeI64($this->timeOfExpiration);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

final class Constant extends \Thrift\Type\TConstant {
  static protected $API_VERSION;

  static protected function init_API_VERSION() {
    return     /**
     * Defines the Version of Aroma API of this specification.
     */
2.01;
  }
}


