<?php
namespace RedRoma\Aroma\Endpoint;

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * A TCP Application Endpoint to Poke,
 * defined in Thrift.
 */
class TcpEndpoint {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'hostname',
      'isRequired' => true,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'port',
      'isRequired' => true,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $hostname = null;
  /**
   * @var int
   */
  public $port = 80;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['hostname'])) {
        $this->hostname = $vals['hostname'];
      }
      if (isset($vals['port'])) {
        $this->port = $vals['port'];
      }
    }
  }

  public function getName() {
    return 'TcpEndpoint';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->hostname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->port);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TcpEndpoint');
    if ($this->hostname !== null) {
      $xfer += $output->writeFieldBegin('hostname', TType::STRING, 1);
      $xfer += $output->writeString($this->hostname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->port !== null) {
      $xfer += $output->writeFieldBegin('port', TType::I32, 2);
      $xfer += $output->writeI32($this->port);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * An HTTP ApplicationEndpoint to Poke,
 * defined in Thrift.
 */
class HttpThriftEndpoint {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'url',
      'isRequired' => true,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $url = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['url'])) {
        $this->url = $vals['url'];
      }
    }
  }

  public function getName() {
    return 'HttpThriftEndpoint';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('HttpThriftEndpoint');
    if ($this->url !== null) {
      $xfer += $output->writeFieldBegin('url', TType::STRING, 1);
      $xfer += $output->writeString($this->url);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * A REST HTTP Endpoint to Poke.
 * 
 * This Endpoint is not defined in Thrift and will instead receive
 * an HTTP Post Request with the same payload, but in JSON.
 * 
 * Examples to follow...
 */
class HttpRestEndpoint {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'url',
      'isRequired' => true,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $url = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['url'])) {
        $this->url = $vals['url'];
      }
    }
  }

  public function getName() {
    return 'HttpRestEndpoint';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('HttpRestEndpoint');
    if ($this->url !== null) {
      $xfer += $output->writeFieldBegin('url', TType::STRING, 1);
      $xfer += $output->writeString($this->url);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * This union defines the multiple ways that an Endpoint can be defined
 * and understood.
 */
class Endpoint {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'tcp',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\RedRoma\Aroma\Endpoint\TcpEndpoint',
      ),
    2 => array(
      'var' => 'httpThrift',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\RedRoma\Aroma\Endpoint\HttpThriftEndpoint',
      ),
    3 => array(
      'var' => 'httpRest',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\RedRoma\Aroma\Endpoint\HttpRestEndpoint',
      ),
    );

  /**
   * @var \RedRoma\Aroma\Endpoint\TcpEndpoint
   */
  public $tcp = null;
  /**
   * @var \RedRoma\Aroma\Endpoint\HttpThriftEndpoint
   */
  public $httpThrift = null;
  /**
   * @var \RedRoma\Aroma\Endpoint\HttpRestEndpoint
   */
  public $httpRest = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['tcp'])) {
        $this->tcp = $vals['tcp'];
      }
      if (isset($vals['httpThrift'])) {
        $this->httpThrift = $vals['httpThrift'];
      }
      if (isset($vals['httpRest'])) {
        $this->httpRest = $vals['httpRest'];
      }
    }
  }

  public function getName() {
    return 'Endpoint';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->tcp = new \RedRoma\Aroma\Endpoint\TcpEndpoint();
            $xfer += $this->tcp->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->httpThrift = new \RedRoma\Aroma\Endpoint\HttpThriftEndpoint();
            $xfer += $this->httpThrift->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->httpRest = new \RedRoma\Aroma\Endpoint\HttpRestEndpoint();
            $xfer += $this->httpRest->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Endpoint');
    if ($this->tcp !== null) {
      if (!is_object($this->tcp)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tcp', TType::STRUCT, 1);
      $xfer += $this->tcp->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->httpThrift !== null) {
      if (!is_object($this->httpThrift)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('httpThrift', TType::STRUCT, 2);
      $xfer += $this->httpThrift->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->httpRest !== null) {
      if (!is_object($this->httpRest)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('httpRest', TType::STRUCT, 3);
      $xfer += $this->httpRest->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Sent by Aroma to an Application Endpoint
 * to poke for health status.
 */
class HealthPokeRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'applicationId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'serviceToken',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\RedRoma\Aroma\Authentication\ApplicationToken',
      ),
    );

  /**
   * The ID of the Application to Check.
   * 
   * @var string
   */
  public $applicationId = null;
  /**
   * We will include your ApplicationToken so that you
   * can authenticate the call if you'd like. With
   * the ApplicationToken, you can verify that it is
   * us calling you.
   * 
   * @var \RedRoma\Aroma\Authentication\ApplicationToken
   */
  public $serviceToken = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['applicationId'])) {
        $this->applicationId = $vals['applicationId'];
      }
      if (isset($vals['serviceToken'])) {
        $this->serviceToken = $vals['serviceToken'];
      }
    }
  }

  public function getName() {
    return 'HealthPokeRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applicationId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->serviceToken = new \RedRoma\Aroma\Authentication\ApplicationToken();
            $xfer += $this->serviceToken->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('HealthPokeRequest');
    if ($this->applicationId !== null) {
      $xfer += $output->writeFieldBegin('applicationId', TType::STRING, 1);
      $xfer += $output->writeString($this->applicationId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serviceToken !== null) {
      if (!is_object($this->serviceToken)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('serviceToken', TType::STRUCT, 2);
      $xfer += $this->serviceToken->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class HealthPokeResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'message',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'healthy',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    );

  /**
   * Send us back some message, not too long.
   * 
   * @var string
   */
  public $message = null;
  /**
   * Tell us whether your Application is healthy or not.
   * 
   * @var bool
   */
  public $healthy = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['healthy'])) {
        $this->healthy = $vals['healthy'];
      }
    }
  }

  public function getName() {
    return 'HealthPokeResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->healthy);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('HealthPokeResponse');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->healthy !== null) {
      $xfer += $output->writeFieldBegin('healthy', TType::BOOL, 2);
      $xfer += $output->writeBool($this->healthy);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


