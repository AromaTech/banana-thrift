<?php
namespace RedRoma\Aroma\NotificationService;

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class SendNotificationRequest {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'token',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\RedRoma\Aroma\Authentication\AuthenticationToken',
      ),
    2 => array(
      'var' => 'event',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\RedRoma\Aroma\Events\Event',
      ),
    3 => array(
      'var' => 'channels',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRUCT,
      'vtype' => TType::STRUCT,
      'key' => array(
        'type' => TType::STRUCT,
        'class' => '\RedRoma\Aroma\Channels\AromaChannel',
      ),
      'val' => array(
        'type' => TType::STRUCT,
        'class' => '\RedRoma\Aroma\User',
        ),
      ),
    );

  /**
   * @var \RedRoma\Aroma\Authentication\AuthenticationToken
   */
  public $token = null;
  /**
   * @var \RedRoma\Aroma\Events\Event
   */
  public $event = null;
  /**
   * This [Channel : User] relationship is used to make the message sent more personalized.
   * 
   * Each channel should be unique, so it is the key in the Map.
   * 
   * Furthermore, a user may have multiple channels registered.
   * 
   * @var array
   */
  public $channels = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['event'])) {
        $this->event = $vals['event'];
      }
      if (isset($vals['channels'])) {
        $this->channels = $vals['channels'];
      }
    }
  }

  public function getName() {
    return 'SendNotificationRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->token = new \RedRoma\Aroma\Authentication\AuthenticationToken();
            $xfer += $this->token->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->event = new \RedRoma\Aroma\Events\Event();
            $xfer += $this->event->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->channels = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = new \RedRoma\Aroma\Channels\AromaChannel();
              $val6 = new \RedRoma\Aroma\User();
              $key5 = new \RedRoma\Aroma\Channels\AromaChannel();
              $xfer += $key5->read($input);
              $val6 = new \RedRoma\Aroma\User();
              $xfer += $val6->read($input);
              $this->channels[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SendNotificationRequest');
    if ($this->token !== null) {
      if (!is_object($this->token)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('token', TType::STRUCT, 1);
      $xfer += $this->token->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->event !== null) {
      if (!is_object($this->event)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('event', TType::STRUCT, 2);
      $xfer += $this->event->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channels !== null) {
      if (!is_array($this->channels)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('channels', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRUCT, TType::STRUCT, count($this->channels));
        {
          foreach ($this->channels as $kiter7 => $viter8)
          {
            $xfer += $kiter7->write($output);
            $xfer += $viter8->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SendNotificationResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'notificationId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $notificationId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['notificationId'])) {
        $this->notificationId = $vals['notificationId'];
      }
    }
  }

  public function getName() {
    return 'SendNotificationResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->notificationId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SendNotificationResponse');
    if ($this->notificationId !== null) {
      $xfer += $output->writeFieldBegin('notificationId', TType::STRING, 1);
      $xfer += $output->writeString($this->notificationId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

final class Constant extends \Thrift\Type\TConstant {
  static protected $SERVICE_PORT;
  static protected $PRODUCTION_ENDPOINT;
  static protected $BETA_ENDPOINT;

  static protected function init_SERVICE_PORT() {
    return 7009;
  }

  static protected function init_PRODUCTION_ENDPOINT() {
    return new \RedRoma\Aroma\Endpoint\TcpEndpoint(array(
      "hostname" => "notification-srv.aroma.tech",
      "port" => 7009,
    ));
  }

  static protected function init_BETA_ENDPOINT() {
    return new \RedRoma\Aroma\Endpoint\TcpEndpoint(array(
      "hostname" => "notification-srv.beta.aroma.tech",
      "port" => 7009,
    ));
  }
}


