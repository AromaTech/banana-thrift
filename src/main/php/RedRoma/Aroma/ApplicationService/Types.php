<?php
namespace RedRoma\Aroma\ApplicationService;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * Send a Message to Aroma.
 */
class SendMessageRequest {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\Authentication\ApplicationToken
   */
  public $applicationToken = null;
  /**
   * @var string
   */
  public $body = null;
  /**
   * @var int
   */
  public $urgency =   1;
  /**
   * The time that the message was generated on the Client Side.
   * 
   * @var int
   */
  public $timeOfMessage = null;
  /**
   * @var string
   */
  public $title = null;
  /**
   * @var string
   */
  public $hostname = null;
  /**
   * @var string
   */
  public $macAddress = null;
  /**
   * @var string
   */
  public $ipv4Address = null;
  /**
   * @var string
   */
  public $deviceName = null;
  /**
   * @var string
   */
  public $operatingSystemName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'applicationToken',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Authentication\ApplicationToken',
          ),
        2 => array(
          'var' => 'body',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'urgency',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'timeOfMessage',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'hostname',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'macAddress',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'ipv4Address',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'deviceName',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'operatingSystemName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['applicationToken'])) {
        $this->applicationToken = $vals['applicationToken'];
      }
      if (isset($vals['body'])) {
        $this->body = $vals['body'];
      }
      if (isset($vals['urgency'])) {
        $this->urgency = $vals['urgency'];
      }
      if (isset($vals['timeOfMessage'])) {
        $this->timeOfMessage = $vals['timeOfMessage'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['hostname'])) {
        $this->hostname = $vals['hostname'];
      }
      if (isset($vals['macAddress'])) {
        $this->macAddress = $vals['macAddress'];
      }
      if (isset($vals['ipv4Address'])) {
        $this->ipv4Address = $vals['ipv4Address'];
      }
      if (isset($vals['deviceName'])) {
        $this->deviceName = $vals['deviceName'];
      }
      if (isset($vals['operatingSystemName'])) {
        $this->operatingSystemName = $vals['operatingSystemName'];
      }
    }
  }

  public function getName() {
    return 'SendMessageRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->applicationToken = new \RedRoma\Aroma\Authentication\ApplicationToken();
            $xfer += $this->applicationToken->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->body);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->urgency);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timeOfMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->hostname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->macAddress);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ipv4Address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->deviceName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->operatingSystemName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SendMessageRequest');
    if ($this->applicationToken !== null) {
      if (!is_object($this->applicationToken)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('applicationToken', TType::STRUCT, 1);
      $xfer += $this->applicationToken->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->body !== null) {
      $xfer += $output->writeFieldBegin('body', TType::STRING, 2);
      $xfer += $output->writeString($this->body);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->urgency !== null) {
      $xfer += $output->writeFieldBegin('urgency', TType::I32, 3);
      $xfer += $output->writeI32($this->urgency);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeOfMessage !== null) {
      $xfer += $output->writeFieldBegin('timeOfMessage', TType::I64, 4);
      $xfer += $output->writeI64($this->timeOfMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 5);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hostname !== null) {
      $xfer += $output->writeFieldBegin('hostname', TType::STRING, 6);
      $xfer += $output->writeString($this->hostname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->macAddress !== null) {
      $xfer += $output->writeFieldBegin('macAddress', TType::STRING, 7);
      $xfer += $output->writeString($this->macAddress);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ipv4Address !== null) {
      $xfer += $output->writeFieldBegin('ipv4Address', TType::STRING, 8);
      $xfer += $output->writeString($this->ipv4Address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deviceName !== null) {
      $xfer += $output->writeFieldBegin('deviceName', TType::STRING, 9);
      $xfer += $output->writeString($this->deviceName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operatingSystemName !== null) {
      $xfer += $output->writeFieldBegin('operatingSystemName', TType::STRING, 10);
      $xfer += $output->writeString($this->operatingSystemName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SendMessageResponse {
  static $_TSPEC;

  /**
   * @var string
   */
  public $messageId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'messageId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['messageId'])) {
        $this->messageId = $vals['messageId'];
      }
    }
  }

  public function getName() {
    return 'SendMessageResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->messageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SendMessageResponse');
    if ($this->messageId !== null) {
      $xfer += $output->writeFieldBegin('messageId', TType::STRING, 1);
      $xfer += $output->writeString($this->messageId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

final class Constant extends \Thrift\Type\TConstant {
  static protected $SERVICE_PORT;
  static protected $PRODUCTION_ENDPOINT;
  static protected $BETA_ENDPOINT;
  static protected $MAX_TITLE_LENGTH;
  static protected $MAX_CHARACTERS_IN_BODY;

  static protected function init_SERVICE_PORT() {
    return 7002;
  }

  static protected function init_PRODUCTION_ENDPOINT() {
    return new \RedRoma\Aroma\Endpoint\TcpEndpoint(array(
      "hostname" => "application-srv.aroma.tech",
      "port" => 80,
    ));
  }

  static protected function init_BETA_ENDPOINT() {
    return new \RedRoma\Aroma\Endpoint\TcpEndpoint(array(
      "hostname" => "application-srv.beta.aroma.tech",
      "port" => 7002,
    ));
  }

  static protected function init_MAX_TITLE_LENGTH() {
    return     /**
     * The maximum number of characters allowed in a Message.
     * 
     * Anything Longer will be Truncated.
     */
40;
  }

  static protected function init_MAX_CHARACTERS_IN_BODY() {
    return     /**
     * The maximum number of characters allowed in the body of a message.
     * The rest will be truncated.
     */
15000;
  }
}


