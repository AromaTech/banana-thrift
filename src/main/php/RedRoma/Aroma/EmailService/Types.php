<?php
namespace RedRoma\Aroma\EmailService;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class SendEmailRequest {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\Authentication\AuthenticationToken
   */
  public $token = null;
  /**
   * @var string
   */
  public $emailAddress = null;
  /**
   * @var \RedRoma\Aroma\Email\EmailMessage
   */
  public $emailMessage = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Authentication\AuthenticationToken',
          ),
        2 => array(
          'var' => 'emailAddress',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'emailMessage',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Email\EmailMessage',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['emailAddress'])) {
        $this->emailAddress = $vals['emailAddress'];
      }
      if (isset($vals['emailMessage'])) {
        $this->emailMessage = $vals['emailMessage'];
      }
    }
  }

  public function getName() {
    return 'SendEmailRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->token = new \RedRoma\Aroma\Authentication\AuthenticationToken();
            $xfer += $this->token->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->emailAddress);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->emailMessage = new \RedRoma\Aroma\Email\EmailMessage();
            $xfer += $this->emailMessage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SendEmailRequest');
    if ($this->token !== null) {
      if (!is_object($this->token)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('token', TType::STRUCT, 1);
      $xfer += $this->token->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->emailAddress !== null) {
      $xfer += $output->writeFieldBegin('emailAddress', TType::STRING, 2);
      $xfer += $output->writeString($this->emailAddress);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->emailMessage !== null) {
      if (!is_object($this->emailMessage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('emailMessage', TType::STRUCT, 3);
      $xfer += $this->emailMessage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SendEmailResponse {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'SendEmailResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SendEmailResponse');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

final class Constant extends \Thrift\Type\TConstant {
  static protected $SERVICE_PORT;
  static protected $PRODUCTION_ENDPOINT;
  static protected $BETA_ENDPOINT;
  static protected $AROMA_EMAIL_ADDRESS;

  static protected function init_SERVICE_PORT() {
    return 7017;
  }

  static protected function init_PRODUCTION_ENDPOINT() {
    return new \RedRoma\Aroma\Endpoint\TcpEndpoint(array(
      "hostname" => "email-srv.aroma.tech",
      "port" => 7017,
    ));
  }

  static protected function init_BETA_ENDPOINT() {
    return new \RedRoma\Aroma\Endpoint\TcpEndpoint(array(
      "hostname" => "email-srv.beta.aroma.tech",
      "port" => 7017,
    ));
  }

  static protected function init_AROMA_EMAIL_ADDRESS() {
    return     /**
     * The Email used to send Emails from Aroma.
     */
"Aroma@RedRoma.tech";
  }
}


