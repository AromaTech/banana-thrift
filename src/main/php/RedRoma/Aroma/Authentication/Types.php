<?php
namespace RedRoma\Aroma\Authentication;

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class TokenStatus {
  const ACTIVE = 1;
  const EXPIRED = 2;
  static public $__names = array(
    1 => 'ACTIVE',
    2 => 'EXPIRED',
  );
}

final class TokenType {
  const APPLICATION = 1;
  const USER = 2;
  static public $__names = array(
    1 => 'APPLICATION',
    2 => 'USER',
  );
}

class ApplicationToken {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'tokenId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'organization',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'timeOfExpiration',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    4 => array(
      'var' => 'applicationId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'applicationName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'status',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $tokenId = null;
  /**
   * @var string
   */
  public $organization = null;
  /**
   * @var int
   */
  public $timeOfExpiration = null;
  /**
   * @var string
   */
  public $applicationId = null;
  /**
   * @var string
   */
  public $applicationName = null;
  /**
   * @var int
   */
  public $status = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['tokenId'])) {
        $this->tokenId = $vals['tokenId'];
      }
      if (isset($vals['organization'])) {
        $this->organization = $vals['organization'];
      }
      if (isset($vals['timeOfExpiration'])) {
        $this->timeOfExpiration = $vals['timeOfExpiration'];
      }
      if (isset($vals['applicationId'])) {
        $this->applicationId = $vals['applicationId'];
      }
      if (isset($vals['applicationName'])) {
        $this->applicationName = $vals['applicationName'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'ApplicationToken';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tokenId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->organization);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timeOfExpiration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applicationId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applicationName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApplicationToken');
    if ($this->tokenId !== null) {
      $xfer += $output->writeFieldBegin('tokenId', TType::STRING, 1);
      $xfer += $output->writeString($this->tokenId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->organization !== null) {
      $xfer += $output->writeFieldBegin('organization', TType::STRING, 2);
      $xfer += $output->writeString($this->organization);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeOfExpiration !== null) {
      $xfer += $output->writeFieldBegin('timeOfExpiration', TType::I64, 3);
      $xfer += $output->writeI64($this->timeOfExpiration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationId !== null) {
      $xfer += $output->writeFieldBegin('applicationId', TType::STRING, 4);
      $xfer += $output->writeString($this->applicationId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationName !== null) {
      $xfer += $output->writeFieldBegin('applicationName', TType::STRING, 5);
      $xfer += $output->writeString($this->applicationName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 6);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserToken {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'tokenId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'timeOfExpiration',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    3 => array(
      'var' => 'organization',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'isOauthToken',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    5 => array(
      'var' => 'oauthProvider',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'userId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'status',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $tokenId = null;
  /**
   * @var int
   */
  public $timeOfExpiration = null;
  /**
   * @var string
   */
  public $organization = null;
  /**
   * @var bool
   */
  public $isOauthToken = false;
  /**
   * @var string
   */
  public $oauthProvider = null;
  /**
   * @var string
   */
  public $userId = null;
  /**
   * @var int
   */
  public $status = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['tokenId'])) {
        $this->tokenId = $vals['tokenId'];
      }
      if (isset($vals['timeOfExpiration'])) {
        $this->timeOfExpiration = $vals['timeOfExpiration'];
      }
      if (isset($vals['organization'])) {
        $this->organization = $vals['organization'];
      }
      if (isset($vals['isOauthToken'])) {
        $this->isOauthToken = $vals['isOauthToken'];
      }
      if (isset($vals['oauthProvider'])) {
        $this->oauthProvider = $vals['oauthProvider'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'UserToken';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tokenId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timeOfExpiration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->organization);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isOauthToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->oauthProvider);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserToken');
    if ($this->tokenId !== null) {
      $xfer += $output->writeFieldBegin('tokenId', TType::STRING, 1);
      $xfer += $output->writeString($this->tokenId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeOfExpiration !== null) {
      $xfer += $output->writeFieldBegin('timeOfExpiration', TType::I64, 2);
      $xfer += $output->writeI64($this->timeOfExpiration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->organization !== null) {
      $xfer += $output->writeFieldBegin('organization', TType::STRING, 3);
      $xfer += $output->writeString($this->organization);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isOauthToken !== null) {
      $xfer += $output->writeFieldBegin('isOauthToken', TType::BOOL, 4);
      $xfer += $output->writeBool($this->isOauthToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->oauthProvider !== null) {
      $xfer += $output->writeFieldBegin('oauthProvider', TType::STRING, 5);
      $xfer += $output->writeString($this->oauthProvider);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::STRING, 6);
      $xfer += $output->writeString($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 7);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GithubToken {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'username',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'email',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'oauthToken',
      'isRequired' => true,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $username = null;
  /**
   * @var string
   */
  public $email = null;
  /**
   * @var string
   */
  public $oauthToken = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['oauthToken'])) {
        $this->oauthToken = $vals['oauthToken'];
      }
    }
  }

  public function getName() {
    return 'GithubToken';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->oauthToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GithubToken');
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 1);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 2);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->oauthToken !== null) {
      $xfer += $output->writeFieldBegin('oauthToken', TType::STRING, 3);
      $xfer += $output->writeString($this->oauthToken);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Password {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'encryptedPassword',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $encryptedPassword = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['encryptedPassword'])) {
        $this->encryptedPassword = $vals['encryptedPassword'];
      }
    }
  }

  public function getName() {
    return 'Password';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->encryptedPassword);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Password');
    if ($this->encryptedPassword !== null) {
      $xfer += $output->writeFieldBegin('encryptedPassword', TType::STRING, 1);
      $xfer += $output->writeString($this->encryptedPassword);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * An Account registered with our System.
 */
class AromaAccount {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'email',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'password',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\RedRoma\Aroma\Authentication\Password',
      ),
    3 => array(
      'var' => 'name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'profileImage',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\RedRoma\Aroma\Image',
      ),
    5 => array(
      'var' => 'role',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $email = null;
  /**
   * @var \RedRoma\Aroma\Authentication\Password
   */
  public $password = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var \RedRoma\Aroma\Image
   */
  public $profileImage = null;
  /**
   * @var int
   */
  public $role = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['profileImage'])) {
        $this->profileImage = $vals['profileImage'];
      }
      if (isset($vals['role'])) {
        $this->role = $vals['role'];
      }
    }
  }

  public function getName() {
    return 'AromaAccount';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->password = new \RedRoma\Aroma\Authentication\Password();
            $xfer += $this->password->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->profileImage = new \RedRoma\Aroma\Image();
            $xfer += $this->profileImage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->role);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaAccount');
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 1);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      if (!is_object($this->password)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('password', TType::STRUCT, 2);
      $xfer += $this->password->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profileImage !== null) {
      if (!is_object($this->profileImage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('profileImage', TType::STRUCT, 4);
      $xfer += $this->profileImage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->role !== null) {
      $xfer += $output->writeFieldBegin('role', TType::I32, 5);
      $xfer += $output->writeI32($this->role);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * This union represents the multiple ways a User can
 * Sign In and Authenticate with Aroma.
 */
class Credentials {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'githubToken',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\RedRoma\Aroma\Authentication\GithubToken',
      ),
    2 => array(
      'var' => 'aromaPassword',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\RedRoma\Aroma\Authentication\Password',
      ),
    );

  /**
   * @var \RedRoma\Aroma\Authentication\GithubToken
   */
  public $githubToken = null;
  /**
   * @var \RedRoma\Aroma\Authentication\Password
   */
  public $aromaPassword = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['githubToken'])) {
        $this->githubToken = $vals['githubToken'];
      }
      if (isset($vals['aromaPassword'])) {
        $this->aromaPassword = $vals['aromaPassword'];
      }
    }
  }

  public function getName() {
    return 'Credentials';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->githubToken = new \RedRoma\Aroma\Authentication\GithubToken();
            $xfer += $this->githubToken->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->aromaPassword = new \RedRoma\Aroma\Authentication\Password();
            $xfer += $this->aromaPassword->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Credentials');
    if ($this->githubToken !== null) {
      if (!is_object($this->githubToken)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('githubToken', TType::STRUCT, 1);
      $xfer += $this->githubToken->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aromaPassword !== null) {
      if (!is_object($this->aromaPassword)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('aromaPassword', TType::STRUCT, 2);
      $xfer += $this->aromaPassword->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Represents an Authentication Token that is used
 * and accepted by the Authentication Service.
 */
class AuthenticationToken {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'tokenId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'ownerId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'timeOfCreation',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    4 => array(
      'var' => 'timeOfExpiration',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    5 => array(
      'var' => 'tokenType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    6 => array(
      'var' => 'organizationId',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'ownerName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'organizationName',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'status',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var string
   */
  public $tokenId = null;
  /**
   * @var string
   */
  public $ownerId = null;
  /**
   * @var int
   */
  public $timeOfCreation = null;
  /**
   * @var int
   */
  public $timeOfExpiration = null;
  /**
   * @var int
   */
  public $tokenType = null;
  /**
   * @var string
   */
  public $organizationId = null;
  /**
   * @var string
   */
  public $ownerName = null;
  /**
   * @var string
   */
  public $organizationName = null;
  /**
   * @var int
   */
  public $status = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['tokenId'])) {
        $this->tokenId = $vals['tokenId'];
      }
      if (isset($vals['ownerId'])) {
        $this->ownerId = $vals['ownerId'];
      }
      if (isset($vals['timeOfCreation'])) {
        $this->timeOfCreation = $vals['timeOfCreation'];
      }
      if (isset($vals['timeOfExpiration'])) {
        $this->timeOfExpiration = $vals['timeOfExpiration'];
      }
      if (isset($vals['tokenType'])) {
        $this->tokenType = $vals['tokenType'];
      }
      if (isset($vals['organizationId'])) {
        $this->organizationId = $vals['organizationId'];
      }
      if (isset($vals['ownerName'])) {
        $this->ownerName = $vals['ownerName'];
      }
      if (isset($vals['organizationName'])) {
        $this->organizationName = $vals['organizationName'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'AuthenticationToken';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tokenId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ownerId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timeOfCreation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timeOfExpiration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tokenType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->organizationId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ownerName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->organizationName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AuthenticationToken');
    if ($this->tokenId !== null) {
      $xfer += $output->writeFieldBegin('tokenId', TType::STRING, 1);
      $xfer += $output->writeString($this->tokenId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ownerId !== null) {
      $xfer += $output->writeFieldBegin('ownerId', TType::STRING, 2);
      $xfer += $output->writeString($this->ownerId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeOfCreation !== null) {
      $xfer += $output->writeFieldBegin('timeOfCreation', TType::I64, 3);
      $xfer += $output->writeI64($this->timeOfCreation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeOfExpiration !== null) {
      $xfer += $output->writeFieldBegin('timeOfExpiration', TType::I64, 4);
      $xfer += $output->writeI64($this->timeOfExpiration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tokenType !== null) {
      $xfer += $output->writeFieldBegin('tokenType', TType::I32, 5);
      $xfer += $output->writeI32($this->tokenType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->organizationId !== null) {
      $xfer += $output->writeFieldBegin('organizationId', TType::STRING, 6);
      $xfer += $output->writeString($this->organizationId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ownerName !== null) {
      $xfer += $output->writeFieldBegin('ownerName', TType::STRING, 7);
      $xfer += $output->writeString($this->ownerName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->organizationName !== null) {
      $xfer += $output->writeFieldBegin('organizationName', TType::STRING, 8);
      $xfer += $output->writeString($this->organizationName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 9);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

final class Constant extends \Thrift\Type\TConstant {
  static protected $OVER_THE_WIRE_PASSWORD_ENCRYPTION_KEY;

  static protected function init_OVER_THE_WIRE_PASSWORD_ENCRYPTION_KEY() {
    return     /**
     * Use this password to encrypt the password
     * before sending it over the wire. Without it, passwords will
     * not be understood by the service, and will be rejected.
     */
"AR3W3O04OJ5I894k40s04163U408pnU47AicAO6X29593AbTwaWk60qu966M9j12O6873Z64822x4qG71vaEjOei159sr9QUT1DaK";
  }
}


