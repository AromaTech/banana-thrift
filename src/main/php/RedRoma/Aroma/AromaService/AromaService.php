<?php
namespace RedRoma\Aroma\AromaService;
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * The Aroma Service is designed to be used by People, and not Applications.
 * They provide query interfaces and Authentication/Authorization over Data.
 */
interface AromaServiceIf {
  /**
   * Sign in to the App and get a User Token in return.
   * 
   * @param \RedRoma\Aroma\AromaService\SignInRequest $request
   * @return \RedRoma\Aroma\AromaService\SignInResponse
   * @throws \RedRoma\Aroma\Exceptions\OperationFailedException
   * @throws \RedRoma\Aroma\Exceptions\InvalidArgumentException
   * @throws \RedRoma\Aroma\Exceptions\InvalidCredentialsException
   * @throws \RedRoma\Aroma\Exceptions\UserDoesNotExistException
   */
  public function signIn(\RedRoma\Aroma\AromaService\SignInRequest $request);
  /**
   * Sign Up for an Aroma Account.
   * 
   * @param \RedRoma\Aroma\AromaService\SignUpRequest $request
   * @return \RedRoma\Aroma\AromaService\SignUpResponse Receive a User Token after Signing Up.
   * 
   * @throws \RedRoma\Aroma\Exceptions\OperationFailedException
   * @throws \RedRoma\Aroma\Exceptions\InvalidArgumentException
   * @throws \RedRoma\Aroma\Exceptions\InvalidCredentialsException
   * @throws \RedRoma\Aroma\Exceptions\AccountAlreadyExistsException
   */
  public function signUp(\RedRoma\Aroma\AromaService\SignUpRequest $request);
  /**
   * @param \RedRoma\Aroma\AromaService\GetUserInfoRequest $request
   * @return \RedRoma\Aroma\AromaService\GetUserInfoResponse
   * @throws \RedRoma\Aroma\Exceptions\OperationFailedException
   * @throws \RedRoma\Aroma\Exceptions\InvalidArgumentException
   * @throws \RedRoma\Aroma\Exceptions\InvalidTokenException
   * @throws \RedRoma\Aroma\Exceptions\UnauthorizedException
   * @throws \RedRoma\Aroma\Exceptions\UserDoesNotExistException
   */
  public function getUserInfo(\RedRoma\Aroma\AromaService\GetUserInfoRequest $request);
  /**
   * Get details about an Application from it's unique ID
   * 
   * @param \RedRoma\Aroma\AromaService\GetApplicationInfoRequest $request
   * @return \RedRoma\Aroma\AromaService\GetApplicationInfoResponse
   * @throws \RedRoma\Aroma\Exceptions\OperationFailedException
   * @throws \RedRoma\Aroma\Exceptions\InvalidArgumentException
   * @throws \RedRoma\Aroma\Exceptions\InvalidTokenException
   * @throws \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException
   * @throws \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public function getApplicationInfo(\RedRoma\Aroma\AromaService\GetApplicationInfoRequest $request);
  /**
   * @param \RedRoma\Aroma\AromaService\GetApplicationsOwnedByRequest $request
   * @return \RedRoma\Aroma\AromaService\GetApplicationsOwnedByResponse
   * @throws \RedRoma\Aroma\Exceptions\OperationFailedException
   * @throws \RedRoma\Aroma\Exceptions\InvalidArgumentException
   * @throws \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public function getApplicationsOwnedBy(\RedRoma\Aroma\AromaService\GetApplicationsOwnedByRequest $request);
  /**
   * Provision a New Application to keep tabs on.
   * 
   * @param \RedRoma\Aroma\AromaService\ProvisionApplicationRequest $request
   * @return \RedRoma\Aroma\AromaService\ProvisionApplicationResponse
   * @throws \RedRoma\Aroma\Exceptions\OperationFailedException
   * @throws \RedRoma\Aroma\Exceptions\InvalidArgumentException
   * @throws \RedRoma\Aroma\Exceptions\InvalidTokenException
   * @throws \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException
   * @throws \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public function provisionApplication(\RedRoma\Aroma\AromaService\ProvisionApplicationRequest $request);
  /**
   * Regenerate an Application Token in case the existing one is lost, forgotten, or compromised.
   * Keep in mind that this will invalidate any prior existing Application Tokens.
   * Only an "owner" can perform this operation.
   * 
   * #owner
   * 
   * @param \RedRoma\Aroma\AromaService\RegenerateApplicationTokenRequest $request
   * @return \RedRoma\Aroma\AromaService\RegenerateApplicationTokenResponse
   * @throws \RedRoma\Aroma\Exceptions\OperationFailedException
   * @throws \RedRoma\Aroma\Exceptions\InvalidArgumentException
   * @throws \RedRoma\Aroma\Exceptions\InvalidTokenException
   * @throws \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException
   * @throws \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public function regenerateToken(\RedRoma\Aroma\AromaService\RegenerateApplicationTokenRequest $request);
  /**
   * Permanently Deletes an Application. Only an owner can perform this Operations.
   * 
   * #owners
   * 
   * @param \RedRoma\Aroma\AromaService\DeleteApplicationRequest $request
   * @return \RedRoma\Aroma\AromaService\DeleteApplicationResponse
   * @throws \RedRoma\Aroma\Exceptions\OperationFailedException
   * @throws \RedRoma\Aroma\Exceptions\InvalidArgumentException
   * @throws \RedRoma\Aroma\Exceptions\InvalidTokenException
   * @throws \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException
   * @throws \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public function deleteApplication(\RedRoma\Aroma\AromaService\DeleteApplicationRequest $request);
  /**
   * Renew an Application Token that is close to being expired.
   * Only an "owner" can perform this operation.
   * 
   * #owner
   * 
   * @param \RedRoma\Aroma\AromaService\RenewApplicationTokenRequest $request
   * @return \RedRoma\Aroma\AromaService\RenewApplicationTokenResponse
   * @throws \RedRoma\Aroma\Exceptions\OperationFailedException
   * @throws \RedRoma\Aroma\Exceptions\InvalidArgumentException
   * @throws \RedRoma\Aroma\Exceptions\InvalidTokenException
   * @throws \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException
   * @throws \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public function renewApplicationToken(\RedRoma\Aroma\AromaService\RenewApplicationTokenRequest $request);
  /**
   * #owner
   * 
   * @param \RedRoma\Aroma\AromaService\UpdateApplicationRequest $request
   * @return \RedRoma\Aroma\AromaService\UpdateApplicationResponse
   * @throws \RedRoma\Aroma\Exceptions\OperationFailedException
   * @throws \RedRoma\Aroma\Exceptions\InvalidArgumentException
   * @throws \RedRoma\Aroma\Exceptions\InvalidTokenException
   * @throws \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException
   * @throws \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public function updateApplication(\RedRoma\Aroma\AromaService\UpdateApplicationRequest $request);
  /**
   * Perform a Search on all the applications registered to Aroma by searching for its title.
   * 
   * @param \RedRoma\Aroma\AromaService\SearchForApplicationsRequest $request
   * @return \RedRoma\Aroma\AromaService\SearchForApplicationsResponse
   * @throws \RedRoma\Aroma\Exceptions\OperationFailedException
   * @throws \RedRoma\Aroma\Exceptions\InvalidArgumentException
   * @throws \RedRoma\Aroma\Exceptions\InvalidTokenException
   * @throws \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public function searchForApplications(\RedRoma\Aroma\AromaService\SearchForApplicationsRequest $request);
  /**
   * Get an Application's Messages.
   * 
   * @param \RedRoma\Aroma\AromaService\GetApplicationMessagesRequest $request
   * @return \RedRoma\Aroma\AromaService\GetApplicationMessagesResponse
   * @throws \RedRoma\Aroma\Exceptions\OperationFailedException
   * @throws \RedRoma\Aroma\Exceptions\InvalidArgumentException
   * @throws \RedRoma\Aroma\Exceptions\InvalidTokenException
   * @throws \RedRoma\Aroma\Exceptions\UnauthorizedException
   * @throws \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException
   */
  public function getApplicationMessages(\RedRoma\Aroma\AromaService\GetApplicationMessagesRequest $request);
  /**
   * In case the Message body has been truncated, use this operation
   * to load the full message.
   * 
   * @param \RedRoma\Aroma\AromaService\GetFullMessageRequest $request
   * @return \RedRoma\Aroma\AromaService\GetFullMessageResponse
   * @throws \RedRoma\Aroma\Exceptions\OperationFailedException
   * @throws \RedRoma\Aroma\Exceptions\InvalidArgumentException
   * @throws \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public function getFullMessage(\RedRoma\Aroma\AromaService\GetFullMessageRequest $request);
  /**
   * Delete Messages stored for the Application. Only an owner can perform this operation.
   * 
   * #owner
   * 
   * @param \RedRoma\Aroma\AromaService\DeleteMessageRequest $request
   * @return \RedRoma\Aroma\AromaService\DeleteMessageResponse
   * @throws \RedRoma\Aroma\Exceptions\OperationFailedException
   * @throws \RedRoma\Aroma\Exceptions\InvalidArgumentException
   * @throws \RedRoma\Aroma\Exceptions\InvalidTokenException
   * @throws \RedRoma\Aroma\Exceptions\MessageDoesNotExistException
   * @throws \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public function deleteMessage(\RedRoma\Aroma\AromaService\DeleteMessageRequest $request);
  /**
   * @param \RedRoma\Aroma\AromaService\DismissMessageRequest $request
   * @return \RedRoma\Aroma\AromaService\DismissMessageResponse
   * @throws \RedRoma\Aroma\Exceptions\OperationFailedException
   * @throws \RedRoma\Aroma\Exceptions\InvalidArgumentException
   * @throws \RedRoma\Aroma\Exceptions\InvalidTokenException
   * @throws \RedRoma\Aroma\Exceptions\MessageDoesNotExistException
   * @throws \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public function dismissMessage(\RedRoma\Aroma\AromaService\DismissMessageRequest $request);
  /**
   * Get Messages in a User's Inbox
   * 
   * @param \RedRoma\Aroma\AromaService\GetInboxRequest $request
   * @return \RedRoma\Aroma\AromaService\GetInboxResponse
   * @throws \RedRoma\Aroma\Exceptions\OperationFailedException
   * @throws \RedRoma\Aroma\Exceptions\InvalidArgumentException
   * @throws \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public function getInbox(\RedRoma\Aroma\AromaService\GetInboxRequest $request);
  /**
   * Get all of the User-Related activities that have happened recently.
   * 
   * @param \RedRoma\Aroma\AromaService\GetActivityRequest $request
   * @return \RedRoma\Aroma\AromaService\GetActivityResponse
   * @throws \RedRoma\Aroma\Exceptions\OperationFailedException
   * @throws \RedRoma\Aroma\Exceptions\InvalidArgumentException
   * @throws \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public function getActivity(\RedRoma\Aroma\AromaService\GetActivityRequest $request);
  /**
   * #owner
   * 
   * @param \RedRoma\Aroma\AromaService\GetReactionsRequest $request
   * @return \RedRoma\Aroma\AromaService\GetReactionsResponse
   * @throws \RedRoma\Aroma\Exceptions\OperationFailedException
   * @throws \RedRoma\Aroma\Exceptions\InvalidArgumentException
   * @throws \RedRoma\Aroma\Exceptions\InvalidTokenException
   * @throws \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException
   * @throws \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public function getReactions(\RedRoma\Aroma\AromaService\GetReactionsRequest $request);
  /**
   * Update an Application's Reactions.
   * 
   * #owner
   * 
   * @param \RedRoma\Aroma\AromaService\UpdateReactionsRequest $request
   * @return \RedRoma\Aroma\AromaService\UpdateReactionsResponse
   * @throws \RedRoma\Aroma\Exceptions\OperationFailedException
   * @throws \RedRoma\Aroma\Exceptions\InvalidArgumentException
   * @throws \RedRoma\Aroma\Exceptions\InvalidTokenException
   * @throws \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException
   * @throws \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public function updateReactions(\RedRoma\Aroma\AromaService\UpdateReactionsRequest $request);
  /**
   * @param \RedRoma\Aroma\AromaService\GetApplicationsFollowedByRequest $request
   * @return \RedRoma\Aroma\AromaService\GetApplicationsFollowedByResponse
   * @throws \RedRoma\Aroma\Exceptions\OperationFailedException
   * @throws \RedRoma\Aroma\Exceptions\InvalidArgumentException
   * @throws \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public function getApplicationsFollowedBy(\RedRoma\Aroma\AromaService\GetApplicationsFollowedByRequest $request);
  /**
   * Subscribe to an existing application to get notifications.
   * 
   * @param \RedRoma\Aroma\AromaService\FollowApplicationRequest $request
   * @return \RedRoma\Aroma\AromaService\FollowApplicationResponse
   * @throws \RedRoma\Aroma\Exceptions\OperationFailedException
   * @throws \RedRoma\Aroma\Exceptions\InvalidArgumentException
   * @throws \RedRoma\Aroma\Exceptions\InvalidTokenException
   * @throws \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException
   * @throws \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public function followApplication(\RedRoma\Aroma\AromaService\FollowApplicationRequest $request);
  /**
   * @param \RedRoma\Aroma\AromaService\UnfollowApplicationRequest $request
   * @return \RedRoma\Aroma\AromaService\UnfollowApplicationResponse
   * @throws \RedRoma\Aroma\Exceptions\OperationFailedException
   * @throws \RedRoma\Aroma\Exceptions\InvalidArgumentException
   * @throws \RedRoma\Aroma\Exceptions\InvalidTokenException
   * @throws \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException
   * @throws \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public function unfollowApplication(\RedRoma\Aroma\AromaService\UnfollowApplicationRequest $request);
  /**
   * @param \RedRoma\Aroma\AromaService\CheckIfDeviceIsRegisteredRequest $request
   * @return \RedRoma\Aroma\AromaService\CheckIfDeviceIsRegisteredResponse
   * @throws \RedRoma\Aroma\Exceptions\OperationFailedException
   * @throws \RedRoma\Aroma\Exceptions\InvalidArgumentException
   * @throws \RedRoma\Aroma\Exceptions\InvalidTokenException
   * @throws \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public function checkIfDeviceIsRegistered(\RedRoma\Aroma\AromaService\CheckIfDeviceIsRegisteredRequest $request);
  /**
   * Get a list of all the devices currently registered to a user account.
   * 
   * @param \RedRoma\Aroma\AromaService\GetRegisteredDevicesRequest $request
   * @return \RedRoma\Aroma\AromaService\GetRegisteredDevicesResponse
   * @throws \RedRoma\Aroma\Exceptions\OperationFailedException
   * @throws \RedRoma\Aroma\Exceptions\InvalidArgumentException
   * @throws \RedRoma\Aroma\Exceptions\InvalidTokenException
   * @throws \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public function getRegisteredDevices(\RedRoma\Aroma\AromaService\GetRegisteredDevicesRequest $request);
  /**
   * Register a Device and associate it with the account of the User calling.
   * 
   * @param \RedRoma\Aroma\AromaService\RegisterDeviceRequest $request
   * @return \RedRoma\Aroma\AromaService\RegisterDeviceResponse
   * @throws \RedRoma\Aroma\Exceptions\OperationFailedException
   * @throws \RedRoma\Aroma\Exceptions\InvalidArgumentException
   * @throws \RedRoma\Aroma\Exceptions\InvalidTokenException
   * @throws \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public function registerDevice(\RedRoma\Aroma\AromaService\RegisterDeviceRequest $request);
  /**
   * Unregisters a Device from a User Account, if it is found. Causes no harm if the device does not exist.
   * 
   * @param \RedRoma\Aroma\AromaService\UnregisterDeviceRequest $request
   * @return \RedRoma\Aroma\AromaService\UnregisterDeviceResponse
   * @throws \RedRoma\Aroma\Exceptions\OperationFailedException
   * @throws \RedRoma\Aroma\Exceptions\InvalidArgumentException
   * @throws \RedRoma\Aroma\Exceptions\InvalidTokenException
   * @throws \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public function unregisterDevice(\RedRoma\Aroma\AromaService\UnregisterDeviceRequest $request);
  /**
   * @param \RedRoma\Aroma\AromaService\GetDashboardRequest $request
   * @return \RedRoma\Aroma\AromaService\GetDashboardResponse
   * @throws \RedRoma\Aroma\Exceptions\OperationFailedException
   * @throws \RedRoma\Aroma\Exceptions\InvalidArgumentException
   * @throws \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public function getDashboard(\RedRoma\Aroma\AromaService\GetDashboardRequest $request);
  /**
   * @param \RedRoma\Aroma\AromaService\GetBuzzRequest $request
   * @return \RedRoma\Aroma\AromaService\GetBuzzResponse
   * @throws \RedRoma\Aroma\Exceptions\OperationFailedException
   * @throws \RedRoma\Aroma\Exceptions\InvalidArgumentException
   * @throws \RedRoma\Aroma\Exceptions\InvalidTokenException
   * @throws \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException
   * @throws \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public function getBuzz(\RedRoma\Aroma\AromaService\GetBuzzRequest $request);
  /**
   * @return double
   */
  public function getApiVersion();
  /**
   * Register an existing Application for Health Pokes. The Aroma Service
   * will then periodically poke the Application for health status.
   * 
   * #owner
   * 
   * @param \RedRoma\Aroma\AromaService\RegisterHealthCheckRequest $request
   * @return \RedRoma\Aroma\AromaService\RegisterHealthCheckResponse
   * @throws \RedRoma\Aroma\Exceptions\OperationFailedException
   * @throws \RedRoma\Aroma\Exceptions\InvalidArgumentException
   * @throws \RedRoma\Aroma\Exceptions\InvalidTokenException
   * @throws \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException
   * @throws \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public function registerHealthCheck(\RedRoma\Aroma\AromaService\RegisterHealthCheckRequest $request);
  /**
   * Request to get Media stored by the Aroma Service.
   * 
   * @param \RedRoma\Aroma\AromaService\GetMediaRequest $request
   * @return \RedRoma\Aroma\AromaService\GetMediaResponse
   * @throws \RedRoma\Aroma\Exceptions\OperationFailedException
   * @throws \RedRoma\Aroma\Exceptions\InvalidArgumentException
   * @throws \RedRoma\Aroma\Exceptions\InvalidTokenException
   * @throws \RedRoma\Aroma\Exceptions\DoesNotExistException
   * @throws \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public function getMedia(\RedRoma\Aroma\AromaService\GetMediaRequest $request);
}

class AromaServiceClient implements \RedRoma\Aroma\AromaService\AromaServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function signIn(\RedRoma\Aroma\AromaService\SignInRequest $request)
  {
    $this->send_signIn($request);
    return $this->recv_signIn();
  }

  public function send_signIn(\RedRoma\Aroma\AromaService\SignInRequest $request)
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_signIn_args();
    $args->request = $request;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'signIn', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('signIn', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_signIn()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_signIn_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_signIn_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    if ($result->ex4 !== null) {
      throw $result->ex4;
    }
    throw new \Exception("signIn failed: unknown result");
  }

  public function signUp(\RedRoma\Aroma\AromaService\SignUpRequest $request)
  {
    $this->send_signUp($request);
    return $this->recv_signUp();
  }

  public function send_signUp(\RedRoma\Aroma\AromaService\SignUpRequest $request)
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_signUp_args();
    $args->request = $request;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'signUp', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('signUp', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_signUp()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_signUp_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_signUp_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    if ($result->ex4 !== null) {
      throw $result->ex4;
    }
    throw new \Exception("signUp failed: unknown result");
  }

  public function getUserInfo(\RedRoma\Aroma\AromaService\GetUserInfoRequest $request)
  {
    $this->send_getUserInfo($request);
    return $this->recv_getUserInfo();
  }

  public function send_getUserInfo(\RedRoma\Aroma\AromaService\GetUserInfoRequest $request)
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_getUserInfo_args();
    $args->request = $request;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUserInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUserInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUserInfo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_getUserInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_getUserInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    if ($result->ex4 !== null) {
      throw $result->ex4;
    }
    if ($result->ex5 !== null) {
      throw $result->ex5;
    }
    throw new \Exception("getUserInfo failed: unknown result");
  }

  public function getApplicationInfo(\RedRoma\Aroma\AromaService\GetApplicationInfoRequest $request)
  {
    $this->send_getApplicationInfo($request);
    return $this->recv_getApplicationInfo();
  }

  public function send_getApplicationInfo(\RedRoma\Aroma\AromaService\GetApplicationInfoRequest $request)
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_getApplicationInfo_args();
    $args->request = $request;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getApplicationInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getApplicationInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getApplicationInfo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_getApplicationInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_getApplicationInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    if ($result->ex4 !== null) {
      throw $result->ex4;
    }
    if ($result->ex5 !== null) {
      throw $result->ex5;
    }
    throw new \Exception("getApplicationInfo failed: unknown result");
  }

  public function getApplicationsOwnedBy(\RedRoma\Aroma\AromaService\GetApplicationsOwnedByRequest $request)
  {
    $this->send_getApplicationsOwnedBy($request);
    return $this->recv_getApplicationsOwnedBy();
  }

  public function send_getApplicationsOwnedBy(\RedRoma\Aroma\AromaService\GetApplicationsOwnedByRequest $request)
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_getApplicationsOwnedBy_args();
    $args->request = $request;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getApplicationsOwnedBy', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getApplicationsOwnedBy', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getApplicationsOwnedBy()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_getApplicationsOwnedBy_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_getApplicationsOwnedBy_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getApplicationsOwnedBy failed: unknown result");
  }

  public function provisionApplication(\RedRoma\Aroma\AromaService\ProvisionApplicationRequest $request)
  {
    $this->send_provisionApplication($request);
    return $this->recv_provisionApplication();
  }

  public function send_provisionApplication(\RedRoma\Aroma\AromaService\ProvisionApplicationRequest $request)
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_provisionApplication_args();
    $args->request = $request;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'provisionApplication', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('provisionApplication', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_provisionApplication()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_provisionApplication_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_provisionApplication_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    if ($result->ex4 !== null) {
      throw $result->ex4;
    }
    if ($result->ex5 !== null) {
      throw $result->ex5;
    }
    throw new \Exception("provisionApplication failed: unknown result");
  }

  public function regenerateToken(\RedRoma\Aroma\AromaService\RegenerateApplicationTokenRequest $request)
  {
    $this->send_regenerateToken($request);
    return $this->recv_regenerateToken();
  }

  public function send_regenerateToken(\RedRoma\Aroma\AromaService\RegenerateApplicationTokenRequest $request)
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_regenerateToken_args();
    $args->request = $request;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'regenerateToken', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('regenerateToken', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_regenerateToken()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_regenerateToken_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_regenerateToken_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    if ($result->ex4 !== null) {
      throw $result->ex4;
    }
    if ($result->ex5 !== null) {
      throw $result->ex5;
    }
    throw new \Exception("regenerateToken failed: unknown result");
  }

  public function deleteApplication(\RedRoma\Aroma\AromaService\DeleteApplicationRequest $request)
  {
    $this->send_deleteApplication($request);
    return $this->recv_deleteApplication();
  }

  public function send_deleteApplication(\RedRoma\Aroma\AromaService\DeleteApplicationRequest $request)
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_deleteApplication_args();
    $args->request = $request;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteApplication', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteApplication', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteApplication()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_deleteApplication_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_deleteApplication_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    if ($result->ex4 !== null) {
      throw $result->ex4;
    }
    if ($result->ex5 !== null) {
      throw $result->ex5;
    }
    throw new \Exception("deleteApplication failed: unknown result");
  }

  public function renewApplicationToken(\RedRoma\Aroma\AromaService\RenewApplicationTokenRequest $request)
  {
    $this->send_renewApplicationToken($request);
    return $this->recv_renewApplicationToken();
  }

  public function send_renewApplicationToken(\RedRoma\Aroma\AromaService\RenewApplicationTokenRequest $request)
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_renewApplicationToken_args();
    $args->request = $request;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'renewApplicationToken', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('renewApplicationToken', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_renewApplicationToken()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_renewApplicationToken_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_renewApplicationToken_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    if ($result->ex4 !== null) {
      throw $result->ex4;
    }
    if ($result->ex5 !== null) {
      throw $result->ex5;
    }
    throw new \Exception("renewApplicationToken failed: unknown result");
  }

  public function updateApplication(\RedRoma\Aroma\AromaService\UpdateApplicationRequest $request)
  {
    $this->send_updateApplication($request);
    return $this->recv_updateApplication();
  }

  public function send_updateApplication(\RedRoma\Aroma\AromaService\UpdateApplicationRequest $request)
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_updateApplication_args();
    $args->request = $request;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateApplication', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateApplication', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateApplication()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_updateApplication_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_updateApplication_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    if ($result->ex4 !== null) {
      throw $result->ex4;
    }
    if ($result->ex5 !== null) {
      throw $result->ex5;
    }
    throw new \Exception("updateApplication failed: unknown result");
  }

  public function searchForApplications(\RedRoma\Aroma\AromaService\SearchForApplicationsRequest $request)
  {
    $this->send_searchForApplications($request);
    return $this->recv_searchForApplications();
  }

  public function send_searchForApplications(\RedRoma\Aroma\AromaService\SearchForApplicationsRequest $request)
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_searchForApplications_args();
    $args->request = $request;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'searchForApplications', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('searchForApplications', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_searchForApplications()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_searchForApplications_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_searchForApplications_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    if ($result->ex4 !== null) {
      throw $result->ex4;
    }
    throw new \Exception("searchForApplications failed: unknown result");
  }

  public function getApplicationMessages(\RedRoma\Aroma\AromaService\GetApplicationMessagesRequest $request)
  {
    $this->send_getApplicationMessages($request);
    return $this->recv_getApplicationMessages();
  }

  public function send_getApplicationMessages(\RedRoma\Aroma\AromaService\GetApplicationMessagesRequest $request)
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_getApplicationMessages_args();
    $args->request = $request;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getApplicationMessages', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getApplicationMessages', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getApplicationMessages()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_getApplicationMessages_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_getApplicationMessages_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    if ($result->ex4 !== null) {
      throw $result->ex4;
    }
    if ($result->ex5 !== null) {
      throw $result->ex5;
    }
    throw new \Exception("getApplicationMessages failed: unknown result");
  }

  public function getFullMessage(\RedRoma\Aroma\AromaService\GetFullMessageRequest $request)
  {
    $this->send_getFullMessage($request);
    return $this->recv_getFullMessage();
  }

  public function send_getFullMessage(\RedRoma\Aroma\AromaService\GetFullMessageRequest $request)
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_getFullMessage_args();
    $args->request = $request;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getFullMessage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getFullMessage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getFullMessage()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_getFullMessage_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_getFullMessage_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getFullMessage failed: unknown result");
  }

  public function deleteMessage(\RedRoma\Aroma\AromaService\DeleteMessageRequest $request)
  {
    $this->send_deleteMessage($request);
    return $this->recv_deleteMessage();
  }

  public function send_deleteMessage(\RedRoma\Aroma\AromaService\DeleteMessageRequest $request)
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_deleteMessage_args();
    $args->request = $request;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteMessage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteMessage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteMessage()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_deleteMessage_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_deleteMessage_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    if ($result->ex4 !== null) {
      throw $result->ex4;
    }
    if ($result->ex5 !== null) {
      throw $result->ex5;
    }
    throw new \Exception("deleteMessage failed: unknown result");
  }

  public function dismissMessage(\RedRoma\Aroma\AromaService\DismissMessageRequest $request)
  {
    $this->send_dismissMessage($request);
    return $this->recv_dismissMessage();
  }

  public function send_dismissMessage(\RedRoma\Aroma\AromaService\DismissMessageRequest $request)
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_dismissMessage_args();
    $args->request = $request;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'dismissMessage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('dismissMessage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_dismissMessage()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_dismissMessage_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_dismissMessage_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    if ($result->ex4 !== null) {
      throw $result->ex4;
    }
    if ($result->ex5 !== null) {
      throw $result->ex5;
    }
    throw new \Exception("dismissMessage failed: unknown result");
  }

  public function getInbox(\RedRoma\Aroma\AromaService\GetInboxRequest $request)
  {
    $this->send_getInbox($request);
    return $this->recv_getInbox();
  }

  public function send_getInbox(\RedRoma\Aroma\AromaService\GetInboxRequest $request)
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_getInbox_args();
    $args->request = $request;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getInbox', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getInbox', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getInbox()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_getInbox_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_getInbox_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getInbox failed: unknown result");
  }

  public function getActivity(\RedRoma\Aroma\AromaService\GetActivityRequest $request)
  {
    $this->send_getActivity($request);
    return $this->recv_getActivity();
  }

  public function send_getActivity(\RedRoma\Aroma\AromaService\GetActivityRequest $request)
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_getActivity_args();
    $args->request = $request;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getActivity', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getActivity', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getActivity()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_getActivity_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_getActivity_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getActivity failed: unknown result");
  }

  public function getReactions(\RedRoma\Aroma\AromaService\GetReactionsRequest $request)
  {
    $this->send_getReactions($request);
    return $this->recv_getReactions();
  }

  public function send_getReactions(\RedRoma\Aroma\AromaService\GetReactionsRequest $request)
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_getReactions_args();
    $args->request = $request;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getReactions', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getReactions', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getReactions()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_getReactions_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_getReactions_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    if ($result->ex4 !== null) {
      throw $result->ex4;
    }
    if ($result->ex5 !== null) {
      throw $result->ex5;
    }
    throw new \Exception("getReactions failed: unknown result");
  }

  public function updateReactions(\RedRoma\Aroma\AromaService\UpdateReactionsRequest $request)
  {
    $this->send_updateReactions($request);
    return $this->recv_updateReactions();
  }

  public function send_updateReactions(\RedRoma\Aroma\AromaService\UpdateReactionsRequest $request)
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_updateReactions_args();
    $args->request = $request;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateReactions', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateReactions', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateReactions()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_updateReactions_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_updateReactions_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    if ($result->ex4 !== null) {
      throw $result->ex4;
    }
    if ($result->ex5 !== null) {
      throw $result->ex5;
    }
    throw new \Exception("updateReactions failed: unknown result");
  }

  public function getApplicationsFollowedBy(\RedRoma\Aroma\AromaService\GetApplicationsFollowedByRequest $request)
  {
    $this->send_getApplicationsFollowedBy($request);
    return $this->recv_getApplicationsFollowedBy();
  }

  public function send_getApplicationsFollowedBy(\RedRoma\Aroma\AromaService\GetApplicationsFollowedByRequest $request)
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_getApplicationsFollowedBy_args();
    $args->request = $request;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getApplicationsFollowedBy', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getApplicationsFollowedBy', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getApplicationsFollowedBy()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_getApplicationsFollowedBy_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_getApplicationsFollowedBy_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getApplicationsFollowedBy failed: unknown result");
  }

  public function followApplication(\RedRoma\Aroma\AromaService\FollowApplicationRequest $request)
  {
    $this->send_followApplication($request);
    return $this->recv_followApplication();
  }

  public function send_followApplication(\RedRoma\Aroma\AromaService\FollowApplicationRequest $request)
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_followApplication_args();
    $args->request = $request;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'followApplication', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('followApplication', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_followApplication()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_followApplication_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_followApplication_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    if ($result->ex4 !== null) {
      throw $result->ex4;
    }
    if ($result->ex5 !== null) {
      throw $result->ex5;
    }
    throw new \Exception("followApplication failed: unknown result");
  }

  public function unfollowApplication(\RedRoma\Aroma\AromaService\UnfollowApplicationRequest $request)
  {
    $this->send_unfollowApplication($request);
    return $this->recv_unfollowApplication();
  }

  public function send_unfollowApplication(\RedRoma\Aroma\AromaService\UnfollowApplicationRequest $request)
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_unfollowApplication_args();
    $args->request = $request;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'unfollowApplication', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('unfollowApplication', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_unfollowApplication()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_unfollowApplication_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_unfollowApplication_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    if ($result->ex4 !== null) {
      throw $result->ex4;
    }
    if ($result->ex5 !== null) {
      throw $result->ex5;
    }
    throw new \Exception("unfollowApplication failed: unknown result");
  }

  public function checkIfDeviceIsRegistered(\RedRoma\Aroma\AromaService\CheckIfDeviceIsRegisteredRequest $request)
  {
    $this->send_checkIfDeviceIsRegistered($request);
    return $this->recv_checkIfDeviceIsRegistered();
  }

  public function send_checkIfDeviceIsRegistered(\RedRoma\Aroma\AromaService\CheckIfDeviceIsRegisteredRequest $request)
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_checkIfDeviceIsRegistered_args();
    $args->request = $request;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'checkIfDeviceIsRegistered', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('checkIfDeviceIsRegistered', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_checkIfDeviceIsRegistered()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_checkIfDeviceIsRegistered_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_checkIfDeviceIsRegistered_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    if ($result->ex4 !== null) {
      throw $result->ex4;
    }
    throw new \Exception("checkIfDeviceIsRegistered failed: unknown result");
  }

  public function getRegisteredDevices(\RedRoma\Aroma\AromaService\GetRegisteredDevicesRequest $request)
  {
    $this->send_getRegisteredDevices($request);
    return $this->recv_getRegisteredDevices();
  }

  public function send_getRegisteredDevices(\RedRoma\Aroma\AromaService\GetRegisteredDevicesRequest $request)
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_getRegisteredDevices_args();
    $args->request = $request;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getRegisteredDevices', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getRegisteredDevices', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getRegisteredDevices()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_getRegisteredDevices_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_getRegisteredDevices_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    if ($result->ex4 !== null) {
      throw $result->ex4;
    }
    throw new \Exception("getRegisteredDevices failed: unknown result");
  }

  public function registerDevice(\RedRoma\Aroma\AromaService\RegisterDeviceRequest $request)
  {
    $this->send_registerDevice($request);
    return $this->recv_registerDevice();
  }

  public function send_registerDevice(\RedRoma\Aroma\AromaService\RegisterDeviceRequest $request)
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_registerDevice_args();
    $args->request = $request;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'registerDevice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('registerDevice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_registerDevice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_registerDevice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_registerDevice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    if ($result->ex4 !== null) {
      throw $result->ex4;
    }
    throw new \Exception("registerDevice failed: unknown result");
  }

  public function unregisterDevice(\RedRoma\Aroma\AromaService\UnregisterDeviceRequest $request)
  {
    $this->send_unregisterDevice($request);
    return $this->recv_unregisterDevice();
  }

  public function send_unregisterDevice(\RedRoma\Aroma\AromaService\UnregisterDeviceRequest $request)
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_unregisterDevice_args();
    $args->request = $request;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'unregisterDevice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('unregisterDevice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_unregisterDevice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_unregisterDevice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_unregisterDevice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    if ($result->ex4 !== null) {
      throw $result->ex4;
    }
    throw new \Exception("unregisterDevice failed: unknown result");
  }

  public function getDashboard(\RedRoma\Aroma\AromaService\GetDashboardRequest $request)
  {
    $this->send_getDashboard($request);
    return $this->recv_getDashboard();
  }

  public function send_getDashboard(\RedRoma\Aroma\AromaService\GetDashboardRequest $request)
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_getDashboard_args();
    $args->request = $request;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getDashboard', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getDashboard', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getDashboard()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_getDashboard_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_getDashboard_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getDashboard failed: unknown result");
  }

  public function getBuzz(\RedRoma\Aroma\AromaService\GetBuzzRequest $request)
  {
    $this->send_getBuzz($request);
    return $this->recv_getBuzz();
  }

  public function send_getBuzz(\RedRoma\Aroma\AromaService\GetBuzzRequest $request)
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_getBuzz_args();
    $args->request = $request;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getBuzz', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getBuzz', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getBuzz()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_getBuzz_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_getBuzz_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    if ($result->ex4 !== null) {
      throw $result->ex4;
    }
    if ($result->ex5 !== null) {
      throw $result->ex5;
    }
    throw new \Exception("getBuzz failed: unknown result");
  }

  public function getApiVersion()
  {
    $this->send_getApiVersion();
    return $this->recv_getApiVersion();
  }

  public function send_getApiVersion()
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_getApiVersion_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getApiVersion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getApiVersion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getApiVersion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_getApiVersion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_getApiVersion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getApiVersion failed: unknown result");
  }

  public function registerHealthCheck(\RedRoma\Aroma\AromaService\RegisterHealthCheckRequest $request)
  {
    $this->send_registerHealthCheck($request);
    return $this->recv_registerHealthCheck();
  }

  public function send_registerHealthCheck(\RedRoma\Aroma\AromaService\RegisterHealthCheckRequest $request)
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_registerHealthCheck_args();
    $args->request = $request;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'registerHealthCheck', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('registerHealthCheck', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_registerHealthCheck()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_registerHealthCheck_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_registerHealthCheck_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    if ($result->ex4 !== null) {
      throw $result->ex4;
    }
    if ($result->ex5 !== null) {
      throw $result->ex5;
    }
    throw new \Exception("registerHealthCheck failed: unknown result");
  }

  public function getMedia(\RedRoma\Aroma\AromaService\GetMediaRequest $request)
  {
    $this->send_getMedia($request);
    return $this->recv_getMedia();
  }

  public function send_getMedia(\RedRoma\Aroma\AromaService\GetMediaRequest $request)
  {
    $args = new \RedRoma\Aroma\AromaService\AromaService_getMedia_args();
    $args->request = $request;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getMedia', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getMedia', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getMedia()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\RedRoma\Aroma\AromaService\AromaService_getMedia_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \RedRoma\Aroma\AromaService\AromaService_getMedia_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    if ($result->ex4 !== null) {
      throw $result->ex4;
    }
    if ($result->ex5 !== null) {
      throw $result->ex5;
    }
    throw new \Exception("getMedia failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class AromaService_signIn_args {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\SignInRequest
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\SignInRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'AromaService_signIn_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \RedRoma\Aroma\AromaService\SignInRequest();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_signIn_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_signIn_result {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\SignInResponse
   */
  public $success = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\OperationFailedException
   */
  public $ex1 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidArgumentException
   */
  public $ex2 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidCredentialsException
   */
  public $ex3 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\UserDoesNotExistException
   */
  public $ex4 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\SignInResponse',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\OperationFailedException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidArgumentException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidCredentialsException',
          ),
        4 => array(
          'var' => 'ex4',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\UserDoesNotExistException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
      if (isset($vals['ex4'])) {
        $this->ex4 = $vals['ex4'];
      }
    }
  }

  public function getName() {
    return 'AromaService_signIn_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RedRoma\Aroma\AromaService\SignInResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \RedRoma\Aroma\Exceptions\OperationFailedException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \RedRoma\Aroma\Exceptions\InvalidArgumentException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \RedRoma\Aroma\Exceptions\InvalidCredentialsException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ex4 = new \RedRoma\Aroma\Exceptions\UserDoesNotExistException();
            $xfer += $this->ex4->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_signIn_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex4 !== null) {
      $xfer += $output->writeFieldBegin('ex4', TType::STRUCT, 4);
      $xfer += $this->ex4->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_signUp_args {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\SignUpRequest
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\SignUpRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'AromaService_signUp_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \RedRoma\Aroma\AromaService\SignUpRequest();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_signUp_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_signUp_result {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\SignUpResponse
   */
  public $success = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\OperationFailedException
   */
  public $ex1 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidArgumentException
   */
  public $ex2 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidCredentialsException
   */
  public $ex3 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\AccountAlreadyExistsException
   */
  public $ex4 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\SignUpResponse',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\OperationFailedException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidArgumentException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidCredentialsException',
          ),
        4 => array(
          'var' => 'ex4',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\AccountAlreadyExistsException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
      if (isset($vals['ex4'])) {
        $this->ex4 = $vals['ex4'];
      }
    }
  }

  public function getName() {
    return 'AromaService_signUp_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RedRoma\Aroma\AromaService\SignUpResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \RedRoma\Aroma\Exceptions\OperationFailedException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \RedRoma\Aroma\Exceptions\InvalidArgumentException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \RedRoma\Aroma\Exceptions\InvalidCredentialsException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ex4 = new \RedRoma\Aroma\Exceptions\AccountAlreadyExistsException();
            $xfer += $this->ex4->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_signUp_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex4 !== null) {
      $xfer += $output->writeFieldBegin('ex4', TType::STRUCT, 4);
      $xfer += $this->ex4->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_getUserInfo_args {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\GetUserInfoRequest
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\GetUserInfoRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'AromaService_getUserInfo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \RedRoma\Aroma\AromaService\GetUserInfoRequest();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_getUserInfo_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_getUserInfo_result {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\GetUserInfoResponse
   */
  public $success = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\OperationFailedException
   */
  public $ex1 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidArgumentException
   */
  public $ex2 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public $ex3 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public $ex4 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\UserDoesNotExistException
   */
  public $ex5 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\GetUserInfoResponse',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\OperationFailedException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidArgumentException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidTokenException',
          ),
        4 => array(
          'var' => 'ex4',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\UnauthorizedException',
          ),
        5 => array(
          'var' => 'ex5',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\UserDoesNotExistException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
      if (isset($vals['ex4'])) {
        $this->ex4 = $vals['ex4'];
      }
      if (isset($vals['ex5'])) {
        $this->ex5 = $vals['ex5'];
      }
    }
  }

  public function getName() {
    return 'AromaService_getUserInfo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RedRoma\Aroma\AromaService\GetUserInfoResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \RedRoma\Aroma\Exceptions\OperationFailedException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \RedRoma\Aroma\Exceptions\InvalidArgumentException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \RedRoma\Aroma\Exceptions\InvalidTokenException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ex4 = new \RedRoma\Aroma\Exceptions\UnauthorizedException();
            $xfer += $this->ex4->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->ex5 = new \RedRoma\Aroma\Exceptions\UserDoesNotExistException();
            $xfer += $this->ex5->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_getUserInfo_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex4 !== null) {
      $xfer += $output->writeFieldBegin('ex4', TType::STRUCT, 4);
      $xfer += $this->ex4->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex5 !== null) {
      $xfer += $output->writeFieldBegin('ex5', TType::STRUCT, 5);
      $xfer += $this->ex5->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_getApplicationInfo_args {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\GetApplicationInfoRequest
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\GetApplicationInfoRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'AromaService_getApplicationInfo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \RedRoma\Aroma\AromaService\GetApplicationInfoRequest();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_getApplicationInfo_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_getApplicationInfo_result {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\GetApplicationInfoResponse
   */
  public $success = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\OperationFailedException
   */
  public $ex1 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidArgumentException
   */
  public $ex2 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public $ex3 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException
   */
  public $ex4 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public $ex5 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\GetApplicationInfoResponse',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\OperationFailedException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidArgumentException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidTokenException',
          ),
        4 => array(
          'var' => 'ex4',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException',
          ),
        5 => array(
          'var' => 'ex5',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\UnauthorizedException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
      if (isset($vals['ex4'])) {
        $this->ex4 = $vals['ex4'];
      }
      if (isset($vals['ex5'])) {
        $this->ex5 = $vals['ex5'];
      }
    }
  }

  public function getName() {
    return 'AromaService_getApplicationInfo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RedRoma\Aroma\AromaService\GetApplicationInfoResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \RedRoma\Aroma\Exceptions\OperationFailedException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \RedRoma\Aroma\Exceptions\InvalidArgumentException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \RedRoma\Aroma\Exceptions\InvalidTokenException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ex4 = new \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException();
            $xfer += $this->ex4->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->ex5 = new \RedRoma\Aroma\Exceptions\UnauthorizedException();
            $xfer += $this->ex5->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_getApplicationInfo_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex4 !== null) {
      $xfer += $output->writeFieldBegin('ex4', TType::STRUCT, 4);
      $xfer += $this->ex4->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex5 !== null) {
      $xfer += $output->writeFieldBegin('ex5', TType::STRUCT, 5);
      $xfer += $this->ex5->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_getApplicationsOwnedBy_args {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\GetApplicationsOwnedByRequest
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\GetApplicationsOwnedByRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'AromaService_getApplicationsOwnedBy_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \RedRoma\Aroma\AromaService\GetApplicationsOwnedByRequest();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_getApplicationsOwnedBy_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_getApplicationsOwnedBy_result {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\GetApplicationsOwnedByResponse
   */
  public $success = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\OperationFailedException
   */
  public $ex1 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidArgumentException
   */
  public $ex2 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\GetApplicationsOwnedByResponse',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\OperationFailedException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidArgumentException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidTokenException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'AromaService_getApplicationsOwnedBy_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RedRoma\Aroma\AromaService\GetApplicationsOwnedByResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \RedRoma\Aroma\Exceptions\OperationFailedException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \RedRoma\Aroma\Exceptions\InvalidArgumentException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \RedRoma\Aroma\Exceptions\InvalidTokenException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_getApplicationsOwnedBy_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_provisionApplication_args {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\ProvisionApplicationRequest
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\ProvisionApplicationRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'AromaService_provisionApplication_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \RedRoma\Aroma\AromaService\ProvisionApplicationRequest();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_provisionApplication_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_provisionApplication_result {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\ProvisionApplicationResponse
   */
  public $success = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\OperationFailedException
   */
  public $ex1 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidArgumentException
   */
  public $ex2 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public $ex3 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException
   */
  public $ex4 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public $ex5 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\ProvisionApplicationResponse',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\OperationFailedException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidArgumentException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidTokenException',
          ),
        4 => array(
          'var' => 'ex4',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException',
          ),
        5 => array(
          'var' => 'ex5',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\UnauthorizedException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
      if (isset($vals['ex4'])) {
        $this->ex4 = $vals['ex4'];
      }
      if (isset($vals['ex5'])) {
        $this->ex5 = $vals['ex5'];
      }
    }
  }

  public function getName() {
    return 'AromaService_provisionApplication_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RedRoma\Aroma\AromaService\ProvisionApplicationResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \RedRoma\Aroma\Exceptions\OperationFailedException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \RedRoma\Aroma\Exceptions\InvalidArgumentException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \RedRoma\Aroma\Exceptions\InvalidTokenException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ex4 = new \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException();
            $xfer += $this->ex4->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->ex5 = new \RedRoma\Aroma\Exceptions\UnauthorizedException();
            $xfer += $this->ex5->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_provisionApplication_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex4 !== null) {
      $xfer += $output->writeFieldBegin('ex4', TType::STRUCT, 4);
      $xfer += $this->ex4->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex5 !== null) {
      $xfer += $output->writeFieldBegin('ex5', TType::STRUCT, 5);
      $xfer += $this->ex5->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_regenerateToken_args {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\RegenerateApplicationTokenRequest
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\RegenerateApplicationTokenRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'AromaService_regenerateToken_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \RedRoma\Aroma\AromaService\RegenerateApplicationTokenRequest();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_regenerateToken_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_regenerateToken_result {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\RegenerateApplicationTokenResponse
   */
  public $success = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\OperationFailedException
   */
  public $ex1 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidArgumentException
   */
  public $ex2 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public $ex3 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException
   */
  public $ex4 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public $ex5 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\RegenerateApplicationTokenResponse',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\OperationFailedException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidArgumentException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidTokenException',
          ),
        4 => array(
          'var' => 'ex4',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException',
          ),
        5 => array(
          'var' => 'ex5',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\UnauthorizedException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
      if (isset($vals['ex4'])) {
        $this->ex4 = $vals['ex4'];
      }
      if (isset($vals['ex5'])) {
        $this->ex5 = $vals['ex5'];
      }
    }
  }

  public function getName() {
    return 'AromaService_regenerateToken_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RedRoma\Aroma\AromaService\RegenerateApplicationTokenResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \RedRoma\Aroma\Exceptions\OperationFailedException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \RedRoma\Aroma\Exceptions\InvalidArgumentException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \RedRoma\Aroma\Exceptions\InvalidTokenException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ex4 = new \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException();
            $xfer += $this->ex4->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->ex5 = new \RedRoma\Aroma\Exceptions\UnauthorizedException();
            $xfer += $this->ex5->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_regenerateToken_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex4 !== null) {
      $xfer += $output->writeFieldBegin('ex4', TType::STRUCT, 4);
      $xfer += $this->ex4->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex5 !== null) {
      $xfer += $output->writeFieldBegin('ex5', TType::STRUCT, 5);
      $xfer += $this->ex5->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_deleteApplication_args {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\DeleteApplicationRequest
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\DeleteApplicationRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'AromaService_deleteApplication_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \RedRoma\Aroma\AromaService\DeleteApplicationRequest();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_deleteApplication_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_deleteApplication_result {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\DeleteApplicationResponse
   */
  public $success = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\OperationFailedException
   */
  public $ex1 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidArgumentException
   */
  public $ex2 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public $ex3 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException
   */
  public $ex4 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public $ex5 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\DeleteApplicationResponse',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\OperationFailedException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidArgumentException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidTokenException',
          ),
        4 => array(
          'var' => 'ex4',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException',
          ),
        5 => array(
          'var' => 'ex5',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\UnauthorizedException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
      if (isset($vals['ex4'])) {
        $this->ex4 = $vals['ex4'];
      }
      if (isset($vals['ex5'])) {
        $this->ex5 = $vals['ex5'];
      }
    }
  }

  public function getName() {
    return 'AromaService_deleteApplication_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RedRoma\Aroma\AromaService\DeleteApplicationResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \RedRoma\Aroma\Exceptions\OperationFailedException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \RedRoma\Aroma\Exceptions\InvalidArgumentException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \RedRoma\Aroma\Exceptions\InvalidTokenException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ex4 = new \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException();
            $xfer += $this->ex4->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->ex5 = new \RedRoma\Aroma\Exceptions\UnauthorizedException();
            $xfer += $this->ex5->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_deleteApplication_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex4 !== null) {
      $xfer += $output->writeFieldBegin('ex4', TType::STRUCT, 4);
      $xfer += $this->ex4->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex5 !== null) {
      $xfer += $output->writeFieldBegin('ex5', TType::STRUCT, 5);
      $xfer += $this->ex5->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_renewApplicationToken_args {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\RenewApplicationTokenRequest
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\RenewApplicationTokenRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'AromaService_renewApplicationToken_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \RedRoma\Aroma\AromaService\RenewApplicationTokenRequest();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_renewApplicationToken_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_renewApplicationToken_result {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\RenewApplicationTokenResponse
   */
  public $success = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\OperationFailedException
   */
  public $ex1 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidArgumentException
   */
  public $ex2 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public $ex3 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException
   */
  public $ex4 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public $ex5 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\RenewApplicationTokenResponse',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\OperationFailedException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidArgumentException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidTokenException',
          ),
        4 => array(
          'var' => 'ex4',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException',
          ),
        5 => array(
          'var' => 'ex5',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\UnauthorizedException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
      if (isset($vals['ex4'])) {
        $this->ex4 = $vals['ex4'];
      }
      if (isset($vals['ex5'])) {
        $this->ex5 = $vals['ex5'];
      }
    }
  }

  public function getName() {
    return 'AromaService_renewApplicationToken_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RedRoma\Aroma\AromaService\RenewApplicationTokenResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \RedRoma\Aroma\Exceptions\OperationFailedException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \RedRoma\Aroma\Exceptions\InvalidArgumentException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \RedRoma\Aroma\Exceptions\InvalidTokenException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ex4 = new \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException();
            $xfer += $this->ex4->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->ex5 = new \RedRoma\Aroma\Exceptions\UnauthorizedException();
            $xfer += $this->ex5->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_renewApplicationToken_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex4 !== null) {
      $xfer += $output->writeFieldBegin('ex4', TType::STRUCT, 4);
      $xfer += $this->ex4->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex5 !== null) {
      $xfer += $output->writeFieldBegin('ex5', TType::STRUCT, 5);
      $xfer += $this->ex5->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_updateApplication_args {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\UpdateApplicationRequest
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\UpdateApplicationRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'AromaService_updateApplication_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \RedRoma\Aroma\AromaService\UpdateApplicationRequest();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_updateApplication_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_updateApplication_result {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\UpdateApplicationResponse
   */
  public $success = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\OperationFailedException
   */
  public $ex1 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidArgumentException
   */
  public $ex2 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public $ex3 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException
   */
  public $ex4 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public $ex5 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\UpdateApplicationResponse',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\OperationFailedException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidArgumentException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidTokenException',
          ),
        4 => array(
          'var' => 'ex4',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException',
          ),
        5 => array(
          'var' => 'ex5',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\UnauthorizedException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
      if (isset($vals['ex4'])) {
        $this->ex4 = $vals['ex4'];
      }
      if (isset($vals['ex5'])) {
        $this->ex5 = $vals['ex5'];
      }
    }
  }

  public function getName() {
    return 'AromaService_updateApplication_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RedRoma\Aroma\AromaService\UpdateApplicationResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \RedRoma\Aroma\Exceptions\OperationFailedException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \RedRoma\Aroma\Exceptions\InvalidArgumentException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \RedRoma\Aroma\Exceptions\InvalidTokenException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ex4 = new \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException();
            $xfer += $this->ex4->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->ex5 = new \RedRoma\Aroma\Exceptions\UnauthorizedException();
            $xfer += $this->ex5->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_updateApplication_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex4 !== null) {
      $xfer += $output->writeFieldBegin('ex4', TType::STRUCT, 4);
      $xfer += $this->ex4->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex5 !== null) {
      $xfer += $output->writeFieldBegin('ex5', TType::STRUCT, 5);
      $xfer += $this->ex5->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_searchForApplications_args {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\SearchForApplicationsRequest
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\SearchForApplicationsRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'AromaService_searchForApplications_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \RedRoma\Aroma\AromaService\SearchForApplicationsRequest();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_searchForApplications_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_searchForApplications_result {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\SearchForApplicationsResponse
   */
  public $success = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\OperationFailedException
   */
  public $ex1 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidArgumentException
   */
  public $ex2 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public $ex3 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public $ex4 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\SearchForApplicationsResponse',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\OperationFailedException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidArgumentException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidTokenException',
          ),
        4 => array(
          'var' => 'ex4',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\UnauthorizedException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
      if (isset($vals['ex4'])) {
        $this->ex4 = $vals['ex4'];
      }
    }
  }

  public function getName() {
    return 'AromaService_searchForApplications_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RedRoma\Aroma\AromaService\SearchForApplicationsResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \RedRoma\Aroma\Exceptions\OperationFailedException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \RedRoma\Aroma\Exceptions\InvalidArgumentException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \RedRoma\Aroma\Exceptions\InvalidTokenException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ex4 = new \RedRoma\Aroma\Exceptions\UnauthorizedException();
            $xfer += $this->ex4->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_searchForApplications_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex4 !== null) {
      $xfer += $output->writeFieldBegin('ex4', TType::STRUCT, 4);
      $xfer += $this->ex4->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_getApplicationMessages_args {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\GetApplicationMessagesRequest
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\GetApplicationMessagesRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'AromaService_getApplicationMessages_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \RedRoma\Aroma\AromaService\GetApplicationMessagesRequest();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_getApplicationMessages_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_getApplicationMessages_result {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\GetApplicationMessagesResponse
   */
  public $success = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\OperationFailedException
   */
  public $ex1 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidArgumentException
   */
  public $ex2 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public $ex3 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public $ex4 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException
   */
  public $ex5 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\GetApplicationMessagesResponse',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\OperationFailedException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidArgumentException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidTokenException',
          ),
        4 => array(
          'var' => 'ex4',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\UnauthorizedException',
          ),
        5 => array(
          'var' => 'ex5',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
      if (isset($vals['ex4'])) {
        $this->ex4 = $vals['ex4'];
      }
      if (isset($vals['ex5'])) {
        $this->ex5 = $vals['ex5'];
      }
    }
  }

  public function getName() {
    return 'AromaService_getApplicationMessages_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RedRoma\Aroma\AromaService\GetApplicationMessagesResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \RedRoma\Aroma\Exceptions\OperationFailedException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \RedRoma\Aroma\Exceptions\InvalidArgumentException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \RedRoma\Aroma\Exceptions\InvalidTokenException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ex4 = new \RedRoma\Aroma\Exceptions\UnauthorizedException();
            $xfer += $this->ex4->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->ex5 = new \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException();
            $xfer += $this->ex5->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_getApplicationMessages_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex4 !== null) {
      $xfer += $output->writeFieldBegin('ex4', TType::STRUCT, 4);
      $xfer += $this->ex4->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex5 !== null) {
      $xfer += $output->writeFieldBegin('ex5', TType::STRUCT, 5);
      $xfer += $this->ex5->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_getFullMessage_args {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\GetFullMessageRequest
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\GetFullMessageRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'AromaService_getFullMessage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \RedRoma\Aroma\AromaService\GetFullMessageRequest();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_getFullMessage_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_getFullMessage_result {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\GetFullMessageResponse
   */
  public $success = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\OperationFailedException
   */
  public $ex1 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidArgumentException
   */
  public $ex2 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\GetFullMessageResponse',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\OperationFailedException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidArgumentException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidTokenException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'AromaService_getFullMessage_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RedRoma\Aroma\AromaService\GetFullMessageResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \RedRoma\Aroma\Exceptions\OperationFailedException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \RedRoma\Aroma\Exceptions\InvalidArgumentException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \RedRoma\Aroma\Exceptions\InvalidTokenException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_getFullMessage_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_deleteMessage_args {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\DeleteMessageRequest
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\DeleteMessageRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'AromaService_deleteMessage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \RedRoma\Aroma\AromaService\DeleteMessageRequest();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_deleteMessage_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_deleteMessage_result {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\DeleteMessageResponse
   */
  public $success = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\OperationFailedException
   */
  public $ex1 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidArgumentException
   */
  public $ex2 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public $ex3 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\MessageDoesNotExistException
   */
  public $ex4 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public $ex5 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\DeleteMessageResponse',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\OperationFailedException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidArgumentException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidTokenException',
          ),
        4 => array(
          'var' => 'ex4',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\MessageDoesNotExistException',
          ),
        5 => array(
          'var' => 'ex5',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\UnauthorizedException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
      if (isset($vals['ex4'])) {
        $this->ex4 = $vals['ex4'];
      }
      if (isset($vals['ex5'])) {
        $this->ex5 = $vals['ex5'];
      }
    }
  }

  public function getName() {
    return 'AromaService_deleteMessage_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RedRoma\Aroma\AromaService\DeleteMessageResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \RedRoma\Aroma\Exceptions\OperationFailedException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \RedRoma\Aroma\Exceptions\InvalidArgumentException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \RedRoma\Aroma\Exceptions\InvalidTokenException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ex4 = new \RedRoma\Aroma\Exceptions\MessageDoesNotExistException();
            $xfer += $this->ex4->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->ex5 = new \RedRoma\Aroma\Exceptions\UnauthorizedException();
            $xfer += $this->ex5->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_deleteMessage_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex4 !== null) {
      $xfer += $output->writeFieldBegin('ex4', TType::STRUCT, 4);
      $xfer += $this->ex4->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex5 !== null) {
      $xfer += $output->writeFieldBegin('ex5', TType::STRUCT, 5);
      $xfer += $this->ex5->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_dismissMessage_args {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\DismissMessageRequest
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\DismissMessageRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'AromaService_dismissMessage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \RedRoma\Aroma\AromaService\DismissMessageRequest();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_dismissMessage_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_dismissMessage_result {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\DismissMessageResponse
   */
  public $success = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\OperationFailedException
   */
  public $ex1 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidArgumentException
   */
  public $ex2 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public $ex3 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\MessageDoesNotExistException
   */
  public $ex4 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public $ex5 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\DismissMessageResponse',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\OperationFailedException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidArgumentException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidTokenException',
          ),
        4 => array(
          'var' => 'ex4',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\MessageDoesNotExistException',
          ),
        5 => array(
          'var' => 'ex5',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\UnauthorizedException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
      if (isset($vals['ex4'])) {
        $this->ex4 = $vals['ex4'];
      }
      if (isset($vals['ex5'])) {
        $this->ex5 = $vals['ex5'];
      }
    }
  }

  public function getName() {
    return 'AromaService_dismissMessage_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RedRoma\Aroma\AromaService\DismissMessageResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \RedRoma\Aroma\Exceptions\OperationFailedException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \RedRoma\Aroma\Exceptions\InvalidArgumentException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \RedRoma\Aroma\Exceptions\InvalidTokenException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ex4 = new \RedRoma\Aroma\Exceptions\MessageDoesNotExistException();
            $xfer += $this->ex4->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->ex5 = new \RedRoma\Aroma\Exceptions\UnauthorizedException();
            $xfer += $this->ex5->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_dismissMessage_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex4 !== null) {
      $xfer += $output->writeFieldBegin('ex4', TType::STRUCT, 4);
      $xfer += $this->ex4->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex5 !== null) {
      $xfer += $output->writeFieldBegin('ex5', TType::STRUCT, 5);
      $xfer += $this->ex5->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_getInbox_args {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\GetInboxRequest
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\GetInboxRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'AromaService_getInbox_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \RedRoma\Aroma\AromaService\GetInboxRequest();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_getInbox_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_getInbox_result {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\GetInboxResponse
   */
  public $success = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\OperationFailedException
   */
  public $ex1 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidArgumentException
   */
  public $ex2 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\GetInboxResponse',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\OperationFailedException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidArgumentException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidTokenException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'AromaService_getInbox_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RedRoma\Aroma\AromaService\GetInboxResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \RedRoma\Aroma\Exceptions\OperationFailedException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \RedRoma\Aroma\Exceptions\InvalidArgumentException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \RedRoma\Aroma\Exceptions\InvalidTokenException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_getInbox_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_getActivity_args {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\GetActivityRequest
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\GetActivityRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'AromaService_getActivity_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \RedRoma\Aroma\AromaService\GetActivityRequest();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_getActivity_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_getActivity_result {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\GetActivityResponse
   */
  public $success = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\OperationFailedException
   */
  public $ex1 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidArgumentException
   */
  public $ex2 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\GetActivityResponse',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\OperationFailedException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidArgumentException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidTokenException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'AromaService_getActivity_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RedRoma\Aroma\AromaService\GetActivityResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \RedRoma\Aroma\Exceptions\OperationFailedException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \RedRoma\Aroma\Exceptions\InvalidArgumentException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \RedRoma\Aroma\Exceptions\InvalidTokenException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_getActivity_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_getReactions_args {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\GetReactionsRequest
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\GetReactionsRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'AromaService_getReactions_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \RedRoma\Aroma\AromaService\GetReactionsRequest();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_getReactions_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_getReactions_result {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\GetReactionsResponse
   */
  public $success = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\OperationFailedException
   */
  public $ex1 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidArgumentException
   */
  public $ex2 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public $ex3 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException
   */
  public $ex4 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public $ex5 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\GetReactionsResponse',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\OperationFailedException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidArgumentException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidTokenException',
          ),
        4 => array(
          'var' => 'ex4',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException',
          ),
        5 => array(
          'var' => 'ex5',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\UnauthorizedException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
      if (isset($vals['ex4'])) {
        $this->ex4 = $vals['ex4'];
      }
      if (isset($vals['ex5'])) {
        $this->ex5 = $vals['ex5'];
      }
    }
  }

  public function getName() {
    return 'AromaService_getReactions_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RedRoma\Aroma\AromaService\GetReactionsResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \RedRoma\Aroma\Exceptions\OperationFailedException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \RedRoma\Aroma\Exceptions\InvalidArgumentException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \RedRoma\Aroma\Exceptions\InvalidTokenException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ex4 = new \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException();
            $xfer += $this->ex4->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->ex5 = new \RedRoma\Aroma\Exceptions\UnauthorizedException();
            $xfer += $this->ex5->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_getReactions_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex4 !== null) {
      $xfer += $output->writeFieldBegin('ex4', TType::STRUCT, 4);
      $xfer += $this->ex4->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex5 !== null) {
      $xfer += $output->writeFieldBegin('ex5', TType::STRUCT, 5);
      $xfer += $this->ex5->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_updateReactions_args {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\UpdateReactionsRequest
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\UpdateReactionsRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'AromaService_updateReactions_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \RedRoma\Aroma\AromaService\UpdateReactionsRequest();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_updateReactions_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_updateReactions_result {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\UpdateReactionsResponse
   */
  public $success = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\OperationFailedException
   */
  public $ex1 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidArgumentException
   */
  public $ex2 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public $ex3 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException
   */
  public $ex4 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public $ex5 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\UpdateReactionsResponse',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\OperationFailedException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidArgumentException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidTokenException',
          ),
        4 => array(
          'var' => 'ex4',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException',
          ),
        5 => array(
          'var' => 'ex5',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\UnauthorizedException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
      if (isset($vals['ex4'])) {
        $this->ex4 = $vals['ex4'];
      }
      if (isset($vals['ex5'])) {
        $this->ex5 = $vals['ex5'];
      }
    }
  }

  public function getName() {
    return 'AromaService_updateReactions_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RedRoma\Aroma\AromaService\UpdateReactionsResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \RedRoma\Aroma\Exceptions\OperationFailedException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \RedRoma\Aroma\Exceptions\InvalidArgumentException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \RedRoma\Aroma\Exceptions\InvalidTokenException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ex4 = new \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException();
            $xfer += $this->ex4->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->ex5 = new \RedRoma\Aroma\Exceptions\UnauthorizedException();
            $xfer += $this->ex5->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_updateReactions_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex4 !== null) {
      $xfer += $output->writeFieldBegin('ex4', TType::STRUCT, 4);
      $xfer += $this->ex4->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex5 !== null) {
      $xfer += $output->writeFieldBegin('ex5', TType::STRUCT, 5);
      $xfer += $this->ex5->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_getApplicationsFollowedBy_args {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\GetApplicationsFollowedByRequest
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\GetApplicationsFollowedByRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'AromaService_getApplicationsFollowedBy_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \RedRoma\Aroma\AromaService\GetApplicationsFollowedByRequest();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_getApplicationsFollowedBy_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_getApplicationsFollowedBy_result {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\GetApplicationsFollowedByResponse
   */
  public $success = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\OperationFailedException
   */
  public $ex1 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidArgumentException
   */
  public $ex2 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\GetApplicationsFollowedByResponse',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\OperationFailedException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidArgumentException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidTokenException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'AromaService_getApplicationsFollowedBy_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RedRoma\Aroma\AromaService\GetApplicationsFollowedByResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \RedRoma\Aroma\Exceptions\OperationFailedException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \RedRoma\Aroma\Exceptions\InvalidArgumentException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \RedRoma\Aroma\Exceptions\InvalidTokenException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_getApplicationsFollowedBy_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_followApplication_args {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\FollowApplicationRequest
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\FollowApplicationRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'AromaService_followApplication_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \RedRoma\Aroma\AromaService\FollowApplicationRequest();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_followApplication_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_followApplication_result {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\FollowApplicationResponse
   */
  public $success = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\OperationFailedException
   */
  public $ex1 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidArgumentException
   */
  public $ex2 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public $ex3 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException
   */
  public $ex4 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public $ex5 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\FollowApplicationResponse',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\OperationFailedException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidArgumentException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidTokenException',
          ),
        4 => array(
          'var' => 'ex4',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException',
          ),
        5 => array(
          'var' => 'ex5',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\UnauthorizedException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
      if (isset($vals['ex4'])) {
        $this->ex4 = $vals['ex4'];
      }
      if (isset($vals['ex5'])) {
        $this->ex5 = $vals['ex5'];
      }
    }
  }

  public function getName() {
    return 'AromaService_followApplication_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RedRoma\Aroma\AromaService\FollowApplicationResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \RedRoma\Aroma\Exceptions\OperationFailedException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \RedRoma\Aroma\Exceptions\InvalidArgumentException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \RedRoma\Aroma\Exceptions\InvalidTokenException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ex4 = new \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException();
            $xfer += $this->ex4->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->ex5 = new \RedRoma\Aroma\Exceptions\UnauthorizedException();
            $xfer += $this->ex5->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_followApplication_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex4 !== null) {
      $xfer += $output->writeFieldBegin('ex4', TType::STRUCT, 4);
      $xfer += $this->ex4->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex5 !== null) {
      $xfer += $output->writeFieldBegin('ex5', TType::STRUCT, 5);
      $xfer += $this->ex5->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_unfollowApplication_args {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\UnfollowApplicationRequest
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\UnfollowApplicationRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'AromaService_unfollowApplication_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \RedRoma\Aroma\AromaService\UnfollowApplicationRequest();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_unfollowApplication_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_unfollowApplication_result {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\UnfollowApplicationResponse
   */
  public $success = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\OperationFailedException
   */
  public $ex1 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidArgumentException
   */
  public $ex2 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public $ex3 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException
   */
  public $ex4 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public $ex5 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\UnfollowApplicationResponse',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\OperationFailedException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidArgumentException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidTokenException',
          ),
        4 => array(
          'var' => 'ex4',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException',
          ),
        5 => array(
          'var' => 'ex5',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\UnauthorizedException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
      if (isset($vals['ex4'])) {
        $this->ex4 = $vals['ex4'];
      }
      if (isset($vals['ex5'])) {
        $this->ex5 = $vals['ex5'];
      }
    }
  }

  public function getName() {
    return 'AromaService_unfollowApplication_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RedRoma\Aroma\AromaService\UnfollowApplicationResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \RedRoma\Aroma\Exceptions\OperationFailedException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \RedRoma\Aroma\Exceptions\InvalidArgumentException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \RedRoma\Aroma\Exceptions\InvalidTokenException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ex4 = new \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException();
            $xfer += $this->ex4->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->ex5 = new \RedRoma\Aroma\Exceptions\UnauthorizedException();
            $xfer += $this->ex5->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_unfollowApplication_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex4 !== null) {
      $xfer += $output->writeFieldBegin('ex4', TType::STRUCT, 4);
      $xfer += $this->ex4->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex5 !== null) {
      $xfer += $output->writeFieldBegin('ex5', TType::STRUCT, 5);
      $xfer += $this->ex5->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_checkIfDeviceIsRegistered_args {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\CheckIfDeviceIsRegisteredRequest
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\CheckIfDeviceIsRegisteredRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'AromaService_checkIfDeviceIsRegistered_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \RedRoma\Aroma\AromaService\CheckIfDeviceIsRegisteredRequest();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_checkIfDeviceIsRegistered_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_checkIfDeviceIsRegistered_result {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\CheckIfDeviceIsRegisteredResponse
   */
  public $success = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\OperationFailedException
   */
  public $ex1 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidArgumentException
   */
  public $ex2 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public $ex3 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public $ex4 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\CheckIfDeviceIsRegisteredResponse',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\OperationFailedException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidArgumentException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidTokenException',
          ),
        4 => array(
          'var' => 'ex4',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\UnauthorizedException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
      if (isset($vals['ex4'])) {
        $this->ex4 = $vals['ex4'];
      }
    }
  }

  public function getName() {
    return 'AromaService_checkIfDeviceIsRegistered_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RedRoma\Aroma\AromaService\CheckIfDeviceIsRegisteredResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \RedRoma\Aroma\Exceptions\OperationFailedException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \RedRoma\Aroma\Exceptions\InvalidArgumentException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \RedRoma\Aroma\Exceptions\InvalidTokenException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ex4 = new \RedRoma\Aroma\Exceptions\UnauthorizedException();
            $xfer += $this->ex4->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_checkIfDeviceIsRegistered_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex4 !== null) {
      $xfer += $output->writeFieldBegin('ex4', TType::STRUCT, 4);
      $xfer += $this->ex4->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_getRegisteredDevices_args {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\GetRegisteredDevicesRequest
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\GetRegisteredDevicesRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'AromaService_getRegisteredDevices_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \RedRoma\Aroma\AromaService\GetRegisteredDevicesRequest();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_getRegisteredDevices_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_getRegisteredDevices_result {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\GetRegisteredDevicesResponse
   */
  public $success = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\OperationFailedException
   */
  public $ex1 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidArgumentException
   */
  public $ex2 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public $ex3 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public $ex4 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\GetRegisteredDevicesResponse',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\OperationFailedException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidArgumentException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidTokenException',
          ),
        4 => array(
          'var' => 'ex4',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\UnauthorizedException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
      if (isset($vals['ex4'])) {
        $this->ex4 = $vals['ex4'];
      }
    }
  }

  public function getName() {
    return 'AromaService_getRegisteredDevices_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RedRoma\Aroma\AromaService\GetRegisteredDevicesResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \RedRoma\Aroma\Exceptions\OperationFailedException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \RedRoma\Aroma\Exceptions\InvalidArgumentException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \RedRoma\Aroma\Exceptions\InvalidTokenException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ex4 = new \RedRoma\Aroma\Exceptions\UnauthorizedException();
            $xfer += $this->ex4->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_getRegisteredDevices_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex4 !== null) {
      $xfer += $output->writeFieldBegin('ex4', TType::STRUCT, 4);
      $xfer += $this->ex4->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_registerDevice_args {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\RegisterDeviceRequest
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\RegisterDeviceRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'AromaService_registerDevice_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \RedRoma\Aroma\AromaService\RegisterDeviceRequest();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_registerDevice_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_registerDevice_result {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\RegisterDeviceResponse
   */
  public $success = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\OperationFailedException
   */
  public $ex1 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidArgumentException
   */
  public $ex2 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public $ex3 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public $ex4 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\RegisterDeviceResponse',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\OperationFailedException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidArgumentException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidTokenException',
          ),
        4 => array(
          'var' => 'ex4',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\UnauthorizedException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
      if (isset($vals['ex4'])) {
        $this->ex4 = $vals['ex4'];
      }
    }
  }

  public function getName() {
    return 'AromaService_registerDevice_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RedRoma\Aroma\AromaService\RegisterDeviceResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \RedRoma\Aroma\Exceptions\OperationFailedException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \RedRoma\Aroma\Exceptions\InvalidArgumentException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \RedRoma\Aroma\Exceptions\InvalidTokenException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ex4 = new \RedRoma\Aroma\Exceptions\UnauthorizedException();
            $xfer += $this->ex4->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_registerDevice_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex4 !== null) {
      $xfer += $output->writeFieldBegin('ex4', TType::STRUCT, 4);
      $xfer += $this->ex4->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_unregisterDevice_args {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\UnregisterDeviceRequest
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\UnregisterDeviceRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'AromaService_unregisterDevice_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \RedRoma\Aroma\AromaService\UnregisterDeviceRequest();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_unregisterDevice_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_unregisterDevice_result {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\UnregisterDeviceResponse
   */
  public $success = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\OperationFailedException
   */
  public $ex1 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidArgumentException
   */
  public $ex2 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public $ex3 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public $ex4 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\UnregisterDeviceResponse',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\OperationFailedException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidArgumentException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidTokenException',
          ),
        4 => array(
          'var' => 'ex4',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\UnauthorizedException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
      if (isset($vals['ex4'])) {
        $this->ex4 = $vals['ex4'];
      }
    }
  }

  public function getName() {
    return 'AromaService_unregisterDevice_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RedRoma\Aroma\AromaService\UnregisterDeviceResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \RedRoma\Aroma\Exceptions\OperationFailedException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \RedRoma\Aroma\Exceptions\InvalidArgumentException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \RedRoma\Aroma\Exceptions\InvalidTokenException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ex4 = new \RedRoma\Aroma\Exceptions\UnauthorizedException();
            $xfer += $this->ex4->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_unregisterDevice_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex4 !== null) {
      $xfer += $output->writeFieldBegin('ex4', TType::STRUCT, 4);
      $xfer += $this->ex4->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_getDashboard_args {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\GetDashboardRequest
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\GetDashboardRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'AromaService_getDashboard_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \RedRoma\Aroma\AromaService\GetDashboardRequest();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_getDashboard_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_getDashboard_result {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\GetDashboardResponse
   */
  public $success = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\OperationFailedException
   */
  public $ex1 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidArgumentException
   */
  public $ex2 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\GetDashboardResponse',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\OperationFailedException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidArgumentException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidTokenException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'AromaService_getDashboard_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RedRoma\Aroma\AromaService\GetDashboardResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \RedRoma\Aroma\Exceptions\OperationFailedException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \RedRoma\Aroma\Exceptions\InvalidArgumentException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \RedRoma\Aroma\Exceptions\InvalidTokenException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_getDashboard_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_getBuzz_args {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\GetBuzzRequest
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\GetBuzzRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'AromaService_getBuzz_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \RedRoma\Aroma\AromaService\GetBuzzRequest();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_getBuzz_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_getBuzz_result {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\GetBuzzResponse
   */
  public $success = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\OperationFailedException
   */
  public $ex1 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidArgumentException
   */
  public $ex2 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public $ex3 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException
   */
  public $ex4 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public $ex5 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\GetBuzzResponse',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\OperationFailedException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidArgumentException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidTokenException',
          ),
        4 => array(
          'var' => 'ex4',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException',
          ),
        5 => array(
          'var' => 'ex5',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\UnauthorizedException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
      if (isset($vals['ex4'])) {
        $this->ex4 = $vals['ex4'];
      }
      if (isset($vals['ex5'])) {
        $this->ex5 = $vals['ex5'];
      }
    }
  }

  public function getName() {
    return 'AromaService_getBuzz_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RedRoma\Aroma\AromaService\GetBuzzResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \RedRoma\Aroma\Exceptions\OperationFailedException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \RedRoma\Aroma\Exceptions\InvalidArgumentException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \RedRoma\Aroma\Exceptions\InvalidTokenException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ex4 = new \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException();
            $xfer += $this->ex4->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->ex5 = new \RedRoma\Aroma\Exceptions\UnauthorizedException();
            $xfer += $this->ex5->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_getBuzz_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex4 !== null) {
      $xfer += $output->writeFieldBegin('ex4', TType::STRUCT, 4);
      $xfer += $this->ex4->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex5 !== null) {
      $xfer += $output->writeFieldBegin('ex5', TType::STRUCT, 5);
      $xfer += $this->ex5->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_getApiVersion_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'AromaService_getApiVersion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_getApiVersion_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_getApiVersion_result {
  static $_TSPEC;

  /**
   * @var double
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'AromaService_getApiVersion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_getApiVersion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::DOUBLE, 0);
      $xfer += $output->writeDouble($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_registerHealthCheck_args {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\RegisterHealthCheckRequest
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\RegisterHealthCheckRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'AromaService_registerHealthCheck_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \RedRoma\Aroma\AromaService\RegisterHealthCheckRequest();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_registerHealthCheck_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_registerHealthCheck_result {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\RegisterHealthCheckResponse
   */
  public $success = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\OperationFailedException
   */
  public $ex1 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidArgumentException
   */
  public $ex2 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public $ex3 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException
   */
  public $ex4 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public $ex5 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\RegisterHealthCheckResponse',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\OperationFailedException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidArgumentException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidTokenException',
          ),
        4 => array(
          'var' => 'ex4',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException',
          ),
        5 => array(
          'var' => 'ex5',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\UnauthorizedException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
      if (isset($vals['ex4'])) {
        $this->ex4 = $vals['ex4'];
      }
      if (isset($vals['ex5'])) {
        $this->ex5 = $vals['ex5'];
      }
    }
  }

  public function getName() {
    return 'AromaService_registerHealthCheck_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RedRoma\Aroma\AromaService\RegisterHealthCheckResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \RedRoma\Aroma\Exceptions\OperationFailedException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \RedRoma\Aroma\Exceptions\InvalidArgumentException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \RedRoma\Aroma\Exceptions\InvalidTokenException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ex4 = new \RedRoma\Aroma\Exceptions\ApplicationDoesNotExistException();
            $xfer += $this->ex4->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->ex5 = new \RedRoma\Aroma\Exceptions\UnauthorizedException();
            $xfer += $this->ex5->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_registerHealthCheck_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex4 !== null) {
      $xfer += $output->writeFieldBegin('ex4', TType::STRUCT, 4);
      $xfer += $this->ex4->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex5 !== null) {
      $xfer += $output->writeFieldBegin('ex5', TType::STRUCT, 5);
      $xfer += $this->ex5->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_getMedia_args {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\GetMediaRequest
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\GetMediaRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'AromaService_getMedia_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \RedRoma\Aroma\AromaService\GetMediaRequest();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_getMedia_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaService_getMedia_result {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\AromaService\GetMediaResponse
   */
  public $success = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\OperationFailedException
   */
  public $ex1 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidArgumentException
   */
  public $ex2 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\InvalidTokenException
   */
  public $ex3 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\DoesNotExistException
   */
  public $ex4 = null;
  /**
   * @var \RedRoma\Aroma\Exceptions\UnauthorizedException
   */
  public $ex5 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\AromaService\GetMediaResponse',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\OperationFailedException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidArgumentException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\InvalidTokenException',
          ),
        4 => array(
          'var' => 'ex4',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\DoesNotExistException',
          ),
        5 => array(
          'var' => 'ex5',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Exceptions\UnauthorizedException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
      if (isset($vals['ex4'])) {
        $this->ex4 = $vals['ex4'];
      }
      if (isset($vals['ex5'])) {
        $this->ex5 = $vals['ex5'];
      }
    }
  }

  public function getName() {
    return 'AromaService_getMedia_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \RedRoma\Aroma\AromaService\GetMediaResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \RedRoma\Aroma\Exceptions\OperationFailedException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \RedRoma\Aroma\Exceptions\InvalidArgumentException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \RedRoma\Aroma\Exceptions\InvalidTokenException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ex4 = new \RedRoma\Aroma\Exceptions\DoesNotExistException();
            $xfer += $this->ex4->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->ex5 = new \RedRoma\Aroma\Exceptions\UnauthorizedException();
            $xfer += $this->ex5->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaService_getMedia_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex4 !== null) {
      $xfer += $output->writeFieldBegin('ex4', TType::STRUCT, 4);
      $xfer += $this->ex4->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex5 !== null) {
      $xfer += $output->writeFieldBegin('ex5', TType::STRUCT, 5);
      $xfer += $this->ex5->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


