<?php
namespace RedRoma\Aroma\Reactions;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * Matches All Messages.
 */
class MatcherAll {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'MatcherAll';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MatcherAll');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MatcherTitleIs {
  static $_TSPEC;

  /**
   * @var string
   */
  public $expectedTitle = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'expectedTitle',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['expectedTitle'])) {
        $this->expectedTitle = $vals['expectedTitle'];
      }
    }
  }

  public function getName() {
    return 'MatcherTitleIs';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->expectedTitle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MatcherTitleIs');
    if ($this->expectedTitle !== null) {
      $xfer += $output->writeFieldBegin('expectedTitle', TType::STRING, 1);
      $xfer += $output->writeString($this->expectedTitle);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MatcherTitleIsNot {
  static $_TSPEC;

  /**
   * @var string
   */
  public $title = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
    }
  }

  public function getName() {
    return 'MatcherTitleIsNot';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MatcherTitleIsNot');
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 1);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MatcherTitleContains {
  static $_TSPEC;

  /**
   * @var string
   */
  public $substring = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'substring',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['substring'])) {
        $this->substring = $vals['substring'];
      }
    }
  }

  public function getName() {
    return 'MatcherTitleContains';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->substring);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MatcherTitleContains');
    if ($this->substring !== null) {
      $xfer += $output->writeFieldBegin('substring', TType::STRING, 1);
      $xfer += $output->writeString($this->substring);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MatcherTitleDoesNotContain {
  static $_TSPEC;

  /**
   * @var string
   */
  public $substring = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'substring',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['substring'])) {
        $this->substring = $vals['substring'];
      }
    }
  }

  public function getName() {
    return 'MatcherTitleDoesNotContain';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->substring);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MatcherTitleDoesNotContain');
    if ($this->substring !== null) {
      $xfer += $output->writeFieldBegin('substring', TType::STRING, 1);
      $xfer += $output->writeString($this->substring);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MatcherBodyIs {
  static $_TSPEC;

  /**
   * @var string
   */
  public $expectedBody = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'expectedBody',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['expectedBody'])) {
        $this->expectedBody = $vals['expectedBody'];
      }
    }
  }

  public function getName() {
    return 'MatcherBodyIs';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->expectedBody);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MatcherBodyIs');
    if ($this->expectedBody !== null) {
      $xfer += $output->writeFieldBegin('expectedBody', TType::STRING, 1);
      $xfer += $output->writeString($this->expectedBody);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MatcherBodyContains {
  static $_TSPEC;

  /**
   * @var string
   */
  public $substring = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'substring',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['substring'])) {
        $this->substring = $vals['substring'];
      }
    }
  }

  public function getName() {
    return 'MatcherBodyContains';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->substring);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MatcherBodyContains');
    if ($this->substring !== null) {
      $xfer += $output->writeFieldBegin('substring', TType::STRING, 1);
      $xfer += $output->writeString($this->substring);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MatcherBodyDoesNotContain {
  static $_TSPEC;

  /**
   * @var string
   */
  public $substring = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'substring',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['substring'])) {
        $this->substring = $vals['substring'];
      }
    }
  }

  public function getName() {
    return 'MatcherBodyDoesNotContain';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->substring);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MatcherBodyDoesNotContain');
    if ($this->substring !== null) {
      $xfer += $output->writeFieldBegin('substring', TType::STRING, 1);
      $xfer += $output->writeString($this->substring);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MatcherUrgencyIs {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $possibleUrgencies = array(
  );

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'possibleUrgencies',
          'type' => TType::SET,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['possibleUrgencies'])) {
        $this->possibleUrgencies = $vals['possibleUrgencies'];
      }
    }
  }

  public function getName() {
    return 'MatcherUrgencyIs';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::SET) {
            $this->possibleUrgencies = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readSetBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readI32($elem5);
              if (is_scalar($elem5)) {
                $this->possibleUrgencies[$elem5] = true;
              } else {
                $this->possibleUrgencies []= $elem5;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MatcherUrgencyIs');
    if ($this->possibleUrgencies !== null) {
      if (!is_array($this->possibleUrgencies)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('possibleUrgencies', TType::SET, 1);
      {
        $output->writeSetBegin(TType::I32, count($this->possibleUrgencies));
        {
          foreach ($this->possibleUrgencies as $iter6 => $iter7)
          {
            if (is_scalar($iter7)) {
            $xfer += $output->writeI32($iter6);
            } else {
            $xfer += $output->writeI32($iter7);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MatcherHostnameIs {
  static $_TSPEC;

  /**
   * @var string
   */
  public $expectedHostname = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'expectedHostname',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['expectedHostname'])) {
        $this->expectedHostname = $vals['expectedHostname'];
      }
    }
  }

  public function getName() {
    return 'MatcherHostnameIs';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->expectedHostname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MatcherHostnameIs');
    if ($this->expectedHostname !== null) {
      $xfer += $output->writeFieldBegin('expectedHostname', TType::STRING, 1);
      $xfer += $output->writeString($this->expectedHostname);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MatcherHostnameContains {
  static $_TSPEC;

  /**
   * @var string
   */
  public $substring = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'substring',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['substring'])) {
        $this->substring = $vals['substring'];
      }
    }
  }

  public function getName() {
    return 'MatcherHostnameContains';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->substring);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MatcherHostnameContains');
    if ($this->substring !== null) {
      $xfer += $output->writeFieldBegin('substring', TType::STRING, 1);
      $xfer += $output->writeString($this->substring);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MatcherHostnameDoesNotContain {
  static $_TSPEC;

  /**
   * @var string
   */
  public $substring = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'substring',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['substring'])) {
        $this->substring = $vals['substring'];
      }
    }
  }

  public function getName() {
    return 'MatcherHostnameDoesNotContain';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->substring);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MatcherHostnameDoesNotContain');
    if ($this->substring !== null) {
      $xfer += $output->writeFieldBegin('substring', TType::STRING, 1);
      $xfer += $output->writeString($this->substring);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MatcherApplicationIs {
  static $_TSPEC;

  /**
   * @var string
   */
  public $appId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appId'])) {
        $this->appId = $vals['appId'];
      }
    }
  }

  public function getName() {
    return 'MatcherApplicationIs';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MatcherApplicationIs');
    if ($this->appId !== null) {
      $xfer += $output->writeFieldBegin('appId', TType::STRING, 1);
      $xfer += $output->writeString($this->appId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MatcherApplicationIsNot {
  static $_TSPEC;

  /**
   * @var string
   */
  public $appId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appId'])) {
        $this->appId = $vals['appId'];
      }
    }
  }

  public function getName() {
    return 'MatcherApplicationIsNot';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MatcherApplicationIsNot');
    if ($this->appId !== null) {
      $xfer += $output->writeFieldBegin('appId', TType::STRING, 1);
      $xfer += $output->writeString($this->appId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaMatcher {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\Reactions\MatcherAll
   */
  public $all = null;
  /**
   * @var \RedRoma\Aroma\Reactions\MatcherTitleIs
   */
  public $titleIs = null;
  /**
   * @var \RedRoma\Aroma\Reactions\MatcherTitleIsNot
   */
  public $titleIsNot = null;
  /**
   * @var \RedRoma\Aroma\Reactions\MatcherTitleContains
   */
  public $titleContains = null;
  /**
   * @var \RedRoma\Aroma\Reactions\MatcherTitleDoesNotContain
   */
  public $titleDoesNotContain = null;
  /**
   * @var \RedRoma\Aroma\Reactions\MatcherBodyIs
   */
  public $bodyIs = null;
  /**
   * @var \RedRoma\Aroma\Reactions\MatcherBodyContains
   */
  public $bodyContains = null;
  /**
   * @var \RedRoma\Aroma\Reactions\MatcherBodyDoesNotContain
   */
  public $bodyDoesNotContain = null;
  /**
   * @var \RedRoma\Aroma\Reactions\MatcherUrgencyIs
   */
  public $urgencyEquals = null;
  /**
   * @var \RedRoma\Aroma\Reactions\MatcherHostnameIs
   */
  public $hostnameIs = null;
  /**
   * @var \RedRoma\Aroma\Reactions\MatcherHostnameContains
   */
  public $hostnameContains = null;
  /**
   * @var \RedRoma\Aroma\Reactions\MatcherHostnameDoesNotContain
   */
  public $hostnameDoesNotContain = null;
  /**
   * @var \RedRoma\Aroma\Reactions\MatcherApplicationIs
   */
  public $applicationIs = null;
  /**
   * @var \RedRoma\Aroma\Reactions\MatcherApplicationIsNot
   */
  public $applicationIsNot = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'all',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Reactions\MatcherAll',
          ),
        2 => array(
          'var' => 'titleIs',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Reactions\MatcherTitleIs',
          ),
        3 => array(
          'var' => 'titleIsNot',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Reactions\MatcherTitleIsNot',
          ),
        4 => array(
          'var' => 'titleContains',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Reactions\MatcherTitleContains',
          ),
        5 => array(
          'var' => 'titleDoesNotContain',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Reactions\MatcherTitleDoesNotContain',
          ),
        6 => array(
          'var' => 'bodyIs',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Reactions\MatcherBodyIs',
          ),
        7 => array(
          'var' => 'bodyContains',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Reactions\MatcherBodyContains',
          ),
        8 => array(
          'var' => 'bodyDoesNotContain',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Reactions\MatcherBodyDoesNotContain',
          ),
        9 => array(
          'var' => 'urgencyEquals',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Reactions\MatcherUrgencyIs',
          ),
        10 => array(
          'var' => 'hostnameIs',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Reactions\MatcherHostnameIs',
          ),
        11 => array(
          'var' => 'hostnameContains',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Reactions\MatcherHostnameContains',
          ),
        12 => array(
          'var' => 'hostnameDoesNotContain',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Reactions\MatcherHostnameDoesNotContain',
          ),
        13 => array(
          'var' => 'applicationIs',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Reactions\MatcherApplicationIs',
          ),
        14 => array(
          'var' => 'applicationIsNot',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Reactions\MatcherApplicationIsNot',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['all'])) {
        $this->all = $vals['all'];
      }
      if (isset($vals['titleIs'])) {
        $this->titleIs = $vals['titleIs'];
      }
      if (isset($vals['titleIsNot'])) {
        $this->titleIsNot = $vals['titleIsNot'];
      }
      if (isset($vals['titleContains'])) {
        $this->titleContains = $vals['titleContains'];
      }
      if (isset($vals['titleDoesNotContain'])) {
        $this->titleDoesNotContain = $vals['titleDoesNotContain'];
      }
      if (isset($vals['bodyIs'])) {
        $this->bodyIs = $vals['bodyIs'];
      }
      if (isset($vals['bodyContains'])) {
        $this->bodyContains = $vals['bodyContains'];
      }
      if (isset($vals['bodyDoesNotContain'])) {
        $this->bodyDoesNotContain = $vals['bodyDoesNotContain'];
      }
      if (isset($vals['urgencyEquals'])) {
        $this->urgencyEquals = $vals['urgencyEquals'];
      }
      if (isset($vals['hostnameIs'])) {
        $this->hostnameIs = $vals['hostnameIs'];
      }
      if (isset($vals['hostnameContains'])) {
        $this->hostnameContains = $vals['hostnameContains'];
      }
      if (isset($vals['hostnameDoesNotContain'])) {
        $this->hostnameDoesNotContain = $vals['hostnameDoesNotContain'];
      }
      if (isset($vals['applicationIs'])) {
        $this->applicationIs = $vals['applicationIs'];
      }
      if (isset($vals['applicationIsNot'])) {
        $this->applicationIsNot = $vals['applicationIsNot'];
      }
    }
  }

  public function getName() {
    return 'AromaMatcher';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->all = new \RedRoma\Aroma\Reactions\MatcherAll();
            $xfer += $this->all->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->titleIs = new \RedRoma\Aroma\Reactions\MatcherTitleIs();
            $xfer += $this->titleIs->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->titleIsNot = new \RedRoma\Aroma\Reactions\MatcherTitleIsNot();
            $xfer += $this->titleIsNot->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->titleContains = new \RedRoma\Aroma\Reactions\MatcherTitleContains();
            $xfer += $this->titleContains->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->titleDoesNotContain = new \RedRoma\Aroma\Reactions\MatcherTitleDoesNotContain();
            $xfer += $this->titleDoesNotContain->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->bodyIs = new \RedRoma\Aroma\Reactions\MatcherBodyIs();
            $xfer += $this->bodyIs->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->bodyContains = new \RedRoma\Aroma\Reactions\MatcherBodyContains();
            $xfer += $this->bodyContains->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->bodyDoesNotContain = new \RedRoma\Aroma\Reactions\MatcherBodyDoesNotContain();
            $xfer += $this->bodyDoesNotContain->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRUCT) {
            $this->urgencyEquals = new \RedRoma\Aroma\Reactions\MatcherUrgencyIs();
            $xfer += $this->urgencyEquals->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
            $this->hostnameIs = new \RedRoma\Aroma\Reactions\MatcherHostnameIs();
            $xfer += $this->hostnameIs->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRUCT) {
            $this->hostnameContains = new \RedRoma\Aroma\Reactions\MatcherHostnameContains();
            $xfer += $this->hostnameContains->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRUCT) {
            $this->hostnameDoesNotContain = new \RedRoma\Aroma\Reactions\MatcherHostnameDoesNotContain();
            $xfer += $this->hostnameDoesNotContain->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRUCT) {
            $this->applicationIs = new \RedRoma\Aroma\Reactions\MatcherApplicationIs();
            $xfer += $this->applicationIs->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRUCT) {
            $this->applicationIsNot = new \RedRoma\Aroma\Reactions\MatcherApplicationIsNot();
            $xfer += $this->applicationIsNot->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaMatcher');
    if ($this->all !== null) {
      if (!is_object($this->all)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('all', TType::STRUCT, 1);
      $xfer += $this->all->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->titleIs !== null) {
      if (!is_object($this->titleIs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('titleIs', TType::STRUCT, 2);
      $xfer += $this->titleIs->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->titleIsNot !== null) {
      if (!is_object($this->titleIsNot)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('titleIsNot', TType::STRUCT, 3);
      $xfer += $this->titleIsNot->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->titleContains !== null) {
      if (!is_object($this->titleContains)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('titleContains', TType::STRUCT, 4);
      $xfer += $this->titleContains->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->titleDoesNotContain !== null) {
      if (!is_object($this->titleDoesNotContain)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('titleDoesNotContain', TType::STRUCT, 5);
      $xfer += $this->titleDoesNotContain->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bodyIs !== null) {
      if (!is_object($this->bodyIs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('bodyIs', TType::STRUCT, 6);
      $xfer += $this->bodyIs->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bodyContains !== null) {
      if (!is_object($this->bodyContains)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('bodyContains', TType::STRUCT, 7);
      $xfer += $this->bodyContains->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bodyDoesNotContain !== null) {
      if (!is_object($this->bodyDoesNotContain)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('bodyDoesNotContain', TType::STRUCT, 8);
      $xfer += $this->bodyDoesNotContain->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->urgencyEquals !== null) {
      if (!is_object($this->urgencyEquals)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('urgencyEquals', TType::STRUCT, 9);
      $xfer += $this->urgencyEquals->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hostnameIs !== null) {
      if (!is_object($this->hostnameIs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('hostnameIs', TType::STRUCT, 10);
      $xfer += $this->hostnameIs->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hostnameContains !== null) {
      if (!is_object($this->hostnameContains)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('hostnameContains', TType::STRUCT, 11);
      $xfer += $this->hostnameContains->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hostnameDoesNotContain !== null) {
      if (!is_object($this->hostnameDoesNotContain)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('hostnameDoesNotContain', TType::STRUCT, 12);
      $xfer += $this->hostnameDoesNotContain->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationIs !== null) {
      if (!is_object($this->applicationIs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('applicationIs', TType::STRUCT, 13);
      $xfer += $this->applicationIs->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationIsNot !== null) {
      if (!is_object($this->applicationIsNot)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('applicationIsNot', TType::STRUCT, 14);
      $xfer += $this->applicationIsNot->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ActionForwardToSlackChannel {
  static $_TSPEC;

  /**
   * @var string
   */
  public $slackChannel = null;
  /**
   * @var bool
   */
  public $includeBody = true;
  /**
   * @var string
   */
  public $webhookUrl = null;
  /**
   * @var string
   */
  public $domainName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'slackChannel',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'includeBody',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'webhookUrl',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'domainName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['slackChannel'])) {
        $this->slackChannel = $vals['slackChannel'];
      }
      if (isset($vals['includeBody'])) {
        $this->includeBody = $vals['includeBody'];
      }
      if (isset($vals['webhookUrl'])) {
        $this->webhookUrl = $vals['webhookUrl'];
      }
      if (isset($vals['domainName'])) {
        $this->domainName = $vals['domainName'];
      }
    }
  }

  public function getName() {
    return 'ActionForwardToSlackChannel';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->slackChannel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->includeBody);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->webhookUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->domainName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ActionForwardToSlackChannel');
    if ($this->slackChannel !== null) {
      $xfer += $output->writeFieldBegin('slackChannel', TType::STRING, 1);
      $xfer += $output->writeString($this->slackChannel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->includeBody !== null) {
      $xfer += $output->writeFieldBegin('includeBody', TType::BOOL, 2);
      $xfer += $output->writeBool($this->includeBody);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->webhookUrl !== null) {
      $xfer += $output->writeFieldBegin('webhookUrl', TType::STRING, 3);
      $xfer += $output->writeString($this->webhookUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->domainName !== null) {
      $xfer += $output->writeFieldBegin('domainName', TType::STRING, 4);
      $xfer += $output->writeString($this->domainName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ActionForwardToSlackUser {
  static $_TSPEC;

  /**
   * @var string
   */
  public $slackUsername = null;
  /**
   * @var bool
   */
  public $includeBody = true;
  /**
   * @var string
   */
  public $webhookUrl = null;
  /**
   * @var string
   */
  public $domainName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'slackUsername',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'includeBody',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'webhookUrl',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'domainName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['slackUsername'])) {
        $this->slackUsername = $vals['slackUsername'];
      }
      if (isset($vals['includeBody'])) {
        $this->includeBody = $vals['includeBody'];
      }
      if (isset($vals['webhookUrl'])) {
        $this->webhookUrl = $vals['webhookUrl'];
      }
      if (isset($vals['domainName'])) {
        $this->domainName = $vals['domainName'];
      }
    }
  }

  public function getName() {
    return 'ActionForwardToSlackUser';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->slackUsername);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->includeBody);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->webhookUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->domainName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ActionForwardToSlackUser');
    if ($this->slackUsername !== null) {
      $xfer += $output->writeFieldBegin('slackUsername', TType::STRING, 1);
      $xfer += $output->writeString($this->slackUsername);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->includeBody !== null) {
      $xfer += $output->writeFieldBegin('includeBody', TType::BOOL, 2);
      $xfer += $output->writeBool($this->includeBody);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->webhookUrl !== null) {
      $xfer += $output->writeFieldBegin('webhookUrl', TType::STRING, 3);
      $xfer += $output->writeString($this->webhookUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->domainName !== null) {
      $xfer += $output->writeFieldBegin('domainName', TType::STRING, 4);
      $xfer += $output->writeString($this->domainName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ActionSendEmail {
  static $_TSPEC;

  /**
   * @var string
   */
  public $emailAddress = null;
  /**
   * @var bool
   */
  public $includeBody = true;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'emailAddress',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'includeBody',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['emailAddress'])) {
        $this->emailAddress = $vals['emailAddress'];
      }
      if (isset($vals['includeBody'])) {
        $this->includeBody = $vals['includeBody'];
      }
    }
  }

  public function getName() {
    return 'ActionSendEmail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->emailAddress);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->includeBody);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ActionSendEmail');
    if ($this->emailAddress !== null) {
      $xfer += $output->writeFieldBegin('emailAddress', TType::STRING, 1);
      $xfer += $output->writeString($this->emailAddress);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->includeBody !== null) {
      $xfer += $output->writeFieldBegin('includeBody', TType::BOOL, 2);
      $xfer += $output->writeBool($this->includeBody);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ActionSkipInbox {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ActionSkipInbox';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ActionSkipInbox');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ActionDontStoreMessage {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ActionDontStoreMessage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ActionDontStoreMessage');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ActionRespondWithMessage {
  static $_TSPEC;

  /**
   * @var string
   */
  public $messageToRespondWith = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'messageToRespondWith',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['messageToRespondWith'])) {
        $this->messageToRespondWith = $vals['messageToRespondWith'];
      }
    }
  }

  public function getName() {
    return 'ActionRespondWithMessage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->messageToRespondWith);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ActionRespondWithMessage');
    if ($this->messageToRespondWith !== null) {
      $xfer += $output->writeFieldBegin('messageToRespondWith', TType::STRING, 1);
      $xfer += $output->writeString($this->messageToRespondWith);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ActionForwardToUsers {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $userIds = array(
  );

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userIds',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userIds'])) {
        $this->userIds = $vals['userIds'];
      }
    }
  }

  public function getName() {
    return 'ActionForwardToUsers';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->userIds = array();
            $_size8 = 0;
            $_etype11 = 0;
            $xfer += $input->readListBegin($_etype11, $_size8);
            for ($_i12 = 0; $_i12 < $_size8; ++$_i12)
            {
              $elem13 = null;
              $xfer += $input->readString($elem13);
              $this->userIds []= $elem13;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ActionForwardToUsers');
    if ($this->userIds !== null) {
      if (!is_array($this->userIds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('userIds', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->userIds));
        {
          foreach ($this->userIds as $iter14)
          {
            $xfer += $output->writeString($iter14);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AromaAction {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\Reactions\ActionForwardToSlackChannel
   */
  public $forwardToSlackChannel = null;
  /**
   * @var \RedRoma\Aroma\Reactions\ActionForwardToSlackUser
   */
  public $forwardToSlackUser = null;
  /**
   * @var \RedRoma\Aroma\Reactions\ActionSendEmail
   */
  public $sendEmail = null;
  /**
   * @var \RedRoma\Aroma\Reactions\ActionSkipInbox
   */
  public $skipInbox = null;
  /**
   * @var \RedRoma\Aroma\Reactions\ActionDontStoreMessage
   */
  public $dontStoreMessage = null;
  /**
   * @var \RedRoma\Aroma\Reactions\ActionRespondWithMessage
   */
  public $responseWithMessage = null;
  /**
   * @var \RedRoma\Aroma\Reactions\ActionForwardToUsers
   */
  public $forwardToUsers = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'forwardToSlackChannel',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Reactions\ActionForwardToSlackChannel',
          ),
        2 => array(
          'var' => 'forwardToSlackUser',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Reactions\ActionForwardToSlackUser',
          ),
        3 => array(
          'var' => 'sendEmail',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Reactions\ActionSendEmail',
          ),
        4 => array(
          'var' => 'skipInbox',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Reactions\ActionSkipInbox',
          ),
        5 => array(
          'var' => 'dontStoreMessage',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Reactions\ActionDontStoreMessage',
          ),
        6 => array(
          'var' => 'responseWithMessage',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Reactions\ActionRespondWithMessage',
          ),
        7 => array(
          'var' => 'forwardToUsers',
          'type' => TType::STRUCT,
          'class' => '\RedRoma\Aroma\Reactions\ActionForwardToUsers',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['forwardToSlackChannel'])) {
        $this->forwardToSlackChannel = $vals['forwardToSlackChannel'];
      }
      if (isset($vals['forwardToSlackUser'])) {
        $this->forwardToSlackUser = $vals['forwardToSlackUser'];
      }
      if (isset($vals['sendEmail'])) {
        $this->sendEmail = $vals['sendEmail'];
      }
      if (isset($vals['skipInbox'])) {
        $this->skipInbox = $vals['skipInbox'];
      }
      if (isset($vals['dontStoreMessage'])) {
        $this->dontStoreMessage = $vals['dontStoreMessage'];
      }
      if (isset($vals['responseWithMessage'])) {
        $this->responseWithMessage = $vals['responseWithMessage'];
      }
      if (isset($vals['forwardToUsers'])) {
        $this->forwardToUsers = $vals['forwardToUsers'];
      }
    }
  }

  public function getName() {
    return 'AromaAction';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->forwardToSlackChannel = new \RedRoma\Aroma\Reactions\ActionForwardToSlackChannel();
            $xfer += $this->forwardToSlackChannel->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->forwardToSlackUser = new \RedRoma\Aroma\Reactions\ActionForwardToSlackUser();
            $xfer += $this->forwardToSlackUser->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->sendEmail = new \RedRoma\Aroma\Reactions\ActionSendEmail();
            $xfer += $this->sendEmail->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->skipInbox = new \RedRoma\Aroma\Reactions\ActionSkipInbox();
            $xfer += $this->skipInbox->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->dontStoreMessage = new \RedRoma\Aroma\Reactions\ActionDontStoreMessage();
            $xfer += $this->dontStoreMessage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->responseWithMessage = new \RedRoma\Aroma\Reactions\ActionRespondWithMessage();
            $xfer += $this->responseWithMessage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->forwardToUsers = new \RedRoma\Aroma\Reactions\ActionForwardToUsers();
            $xfer += $this->forwardToUsers->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AromaAction');
    if ($this->forwardToSlackChannel !== null) {
      if (!is_object($this->forwardToSlackChannel)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('forwardToSlackChannel', TType::STRUCT, 1);
      $xfer += $this->forwardToSlackChannel->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forwardToSlackUser !== null) {
      if (!is_object($this->forwardToSlackUser)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('forwardToSlackUser', TType::STRUCT, 2);
      $xfer += $this->forwardToSlackUser->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sendEmail !== null) {
      if (!is_object($this->sendEmail)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('sendEmail', TType::STRUCT, 3);
      $xfer += $this->sendEmail->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->skipInbox !== null) {
      if (!is_object($this->skipInbox)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('skipInbox', TType::STRUCT, 4);
      $xfer += $this->skipInbox->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dontStoreMessage !== null) {
      if (!is_object($this->dontStoreMessage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('dontStoreMessage', TType::STRUCT, 5);
      $xfer += $this->dontStoreMessage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->responseWithMessage !== null) {
      if (!is_object($this->responseWithMessage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('responseWithMessage', TType::STRUCT, 6);
      $xfer += $this->responseWithMessage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forwardToUsers !== null) {
      if (!is_object($this->forwardToUsers)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('forwardToUsers', TType::STRUCT, 7);
      $xfer += $this->forwardToUsers->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Reaction {
  static $_TSPEC;

  /**
   * @var \RedRoma\Aroma\Reactions\AromaMatcher[]
   */
  public $matchers = array(
  );
  /**
   * @var \RedRoma\Aroma\Reactions\AromaAction[]
   */
  public $actions = array(
  );
  /**
   * @var string
   */
  public $name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'matchers',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\RedRoma\Aroma\Reactions\AromaMatcher',
            ),
          ),
        2 => array(
          'var' => 'actions',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\RedRoma\Aroma\Reactions\AromaAction',
            ),
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['matchers'])) {
        $this->matchers = $vals['matchers'];
      }
      if (isset($vals['actions'])) {
        $this->actions = $vals['actions'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
    }
  }

  public function getName() {
    return 'Reaction';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->matchers = array();
            $_size15 = 0;
            $_etype18 = 0;
            $xfer += $input->readListBegin($_etype18, $_size15);
            for ($_i19 = 0; $_i19 < $_size15; ++$_i19)
            {
              $elem20 = null;
              $elem20 = new \RedRoma\Aroma\Reactions\AromaMatcher();
              $xfer += $elem20->read($input);
              $this->matchers []= $elem20;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->actions = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new \RedRoma\Aroma\Reactions\AromaAction();
              $xfer += $elem26->read($input);
              $this->actions []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Reaction');
    if ($this->matchers !== null) {
      if (!is_array($this->matchers)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('matchers', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->matchers));
        {
          foreach ($this->matchers as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->actions !== null) {
      if (!is_array($this->actions)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('actions', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->actions));
        {
          foreach ($this->actions as $iter28)
          {
            $xfer += $iter28->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


