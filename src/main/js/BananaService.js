//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

BananaService_signIn_args = function(args) {
        this.request = null;
        if (args) {
                if (args.request !== undefined && args.request !== null) {
                        this.request = new SignInRequest(args.request);
                }
        }
};
BananaService_signIn_args.prototype = {};
BananaService_signIn_args.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.request = new SignInRequest();
              this.request.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 0:
              input.skip(ftype);
              break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_signIn_args.prototype.write = function(output) {
        output.writeStructBegin('BananaService_signIn_args');
        if (this.request !== null && this.request !== undefined) {
          output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
          this.request.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_signIn_result = function(args) {
        this.success = null;
        this.ex1 = null;
        this.ex2 = null;
        this.ex3 = null;
        if (args instanceof OperationFailedException) {
                this.ex1 = args;
                return;
        }
        if (args instanceof InvalidArgumentException) {
                this.ex2 = args;
                return;
        }
        if (args instanceof InvalidCredentialsException) {
                this.ex3 = args;
                return;
        }
        if (args) {
                if (args.success !== undefined && args.success !== null) {
                        this.success = new SignInResponse(args.success);
                }
                if (args.ex1 !== undefined && args.ex1 !== null) {
                        this.ex1 = args.ex1;
                }
                if (args.ex2 !== undefined && args.ex2 !== null) {
                        this.ex2 = args.ex2;
                }
                if (args.ex3 !== undefined && args.ex3 !== null) {
                        this.ex3 = args.ex3;
                }
        }
};
BananaService_signIn_result.prototype = {};
BananaService_signIn_result.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 0:
            if (ftype == Thrift.Type.STRUCT) {
              this.success = new SignInResponse();
              this.success.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex1 = new OperationFailedException();
              this.ex1.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 2:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex2 = new InvalidArgumentException();
              this.ex2.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 3:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex3 = new InvalidCredentialsException();
              this.ex3.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_signIn_result.prototype.write = function(output) {
        output.writeStructBegin('BananaService_signIn_result');
        if (this.success !== null && this.success !== undefined) {
          output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
          this.success.write(output);
          output.writeFieldEnd();
        }
        if (this.ex1 !== null && this.ex1 !== undefined) {
          output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
          this.ex1.write(output);
          output.writeFieldEnd();
        }
        if (this.ex2 !== null && this.ex2 !== undefined) {
          output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
          this.ex2.write(output);
          output.writeFieldEnd();
        }
        if (this.ex3 !== null && this.ex3 !== undefined) {
          output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
          this.ex3.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_provisionService_args = function(args) {
        this.request = null;
        if (args) {
                if (args.request !== undefined && args.request !== null) {
                        this.request = new ProvisionServiceRequest(args.request);
                }
        }
};
BananaService_provisionService_args.prototype = {};
BananaService_provisionService_args.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.request = new ProvisionServiceRequest();
              this.request.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 0:
              input.skip(ftype);
              break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_provisionService_args.prototype.write = function(output) {
        output.writeStructBegin('BananaService_provisionService_args');
        if (this.request !== null && this.request !== undefined) {
          output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
          this.request.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_provisionService_result = function(args) {
        this.success = null;
        this.ex1 = null;
        this.ex2 = null;
        this.ex3 = null;
        this.ex4 = null;
        if (args instanceof OperationFailedException) {
                this.ex1 = args;
                return;
        }
        if (args instanceof InvalidArgumentException) {
                this.ex2 = args;
                return;
        }
        if (args instanceof InvalidCredentialsException) {
                this.ex3 = args;
                return;
        }
        if (args instanceof ServiceDoesNotExistException) {
                this.ex4 = args;
                return;
        }
        if (args) {
                if (args.success !== undefined && args.success !== null) {
                        this.success = new ProvisionServiceResponse(args.success);
                }
                if (args.ex1 !== undefined && args.ex1 !== null) {
                        this.ex1 = args.ex1;
                }
                if (args.ex2 !== undefined && args.ex2 !== null) {
                        this.ex2 = args.ex2;
                }
                if (args.ex3 !== undefined && args.ex3 !== null) {
                        this.ex3 = args.ex3;
                }
                if (args.ex4 !== undefined && args.ex4 !== null) {
                        this.ex4 = args.ex4;
                }
        }
};
BananaService_provisionService_result.prototype = {};
BananaService_provisionService_result.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 0:
            if (ftype == Thrift.Type.STRUCT) {
              this.success = new ProvisionServiceResponse();
              this.success.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex1 = new OperationFailedException();
              this.ex1.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 2:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex2 = new InvalidArgumentException();
              this.ex2.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 3:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex3 = new InvalidCredentialsException();
              this.ex3.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 4:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex4 = new ServiceDoesNotExistException();
              this.ex4.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_provisionService_result.prototype.write = function(output) {
        output.writeStructBegin('BananaService_provisionService_result');
        if (this.success !== null && this.success !== undefined) {
          output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
          this.success.write(output);
          output.writeFieldEnd();
        }
        if (this.ex1 !== null && this.ex1 !== undefined) {
          output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
          this.ex1.write(output);
          output.writeFieldEnd();
        }
        if (this.ex2 !== null && this.ex2 !== undefined) {
          output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
          this.ex2.write(output);
          output.writeFieldEnd();
        }
        if (this.ex3 !== null && this.ex3 !== undefined) {
          output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
          this.ex3.write(output);
          output.writeFieldEnd();
        }
        if (this.ex4 !== null && this.ex4 !== undefined) {
          output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
          this.ex4.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_subscribeToService_args = function(args) {
        this.request = null;
        if (args) {
                if (args.request !== undefined && args.request !== null) {
                        this.request = new SubscribeToServiceRequest(args.request);
                }
        }
};
BananaService_subscribeToService_args.prototype = {};
BananaService_subscribeToService_args.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.request = new SubscribeToServiceRequest();
              this.request.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 0:
              input.skip(ftype);
              break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_subscribeToService_args.prototype.write = function(output) {
        output.writeStructBegin('BananaService_subscribeToService_args');
        if (this.request !== null && this.request !== undefined) {
          output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
          this.request.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_subscribeToService_result = function(args) {
        this.success = null;
        this.ex1 = null;
        this.ex2 = null;
        this.ex3 = null;
        this.ex4 = null;
        this.ex5 = null;
        if (args instanceof OperationFailedException) {
                this.ex1 = args;
                return;
        }
        if (args instanceof InvalidArgumentException) {
                this.ex2 = args;
                return;
        }
        if (args instanceof InvalidCredentialsException) {
                this.ex3 = args;
                return;
        }
        if (args instanceof ServiceDoesNotExistException) {
                this.ex4 = args;
                return;
        }
        if (args instanceof ServiceAlreadyRegisteredException) {
                this.ex5 = args;
                return;
        }
        if (args) {
                if (args.success !== undefined && args.success !== null) {
                        this.success = new SubscribeToServiceResponse(args.success);
                }
                if (args.ex1 !== undefined && args.ex1 !== null) {
                        this.ex1 = args.ex1;
                }
                if (args.ex2 !== undefined && args.ex2 !== null) {
                        this.ex2 = args.ex2;
                }
                if (args.ex3 !== undefined && args.ex3 !== null) {
                        this.ex3 = args.ex3;
                }
                if (args.ex4 !== undefined && args.ex4 !== null) {
                        this.ex4 = args.ex4;
                }
                if (args.ex5 !== undefined && args.ex5 !== null) {
                        this.ex5 = args.ex5;
                }
        }
};
BananaService_subscribeToService_result.prototype = {};
BananaService_subscribeToService_result.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 0:
            if (ftype == Thrift.Type.STRUCT) {
              this.success = new SubscribeToServiceResponse();
              this.success.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex1 = new OperationFailedException();
              this.ex1.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 2:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex2 = new InvalidArgumentException();
              this.ex2.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 3:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex3 = new InvalidCredentialsException();
              this.ex3.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 4:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex4 = new ServiceDoesNotExistException();
              this.ex4.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 5:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex5 = new ServiceAlreadyRegisteredException();
              this.ex5.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_subscribeToService_result.prototype.write = function(output) {
        output.writeStructBegin('BananaService_subscribeToService_result');
        if (this.success !== null && this.success !== undefined) {
          output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
          this.success.write(output);
          output.writeFieldEnd();
        }
        if (this.ex1 !== null && this.ex1 !== undefined) {
          output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
          this.ex1.write(output);
          output.writeFieldEnd();
        }
        if (this.ex2 !== null && this.ex2 !== undefined) {
          output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
          this.ex2.write(output);
          output.writeFieldEnd();
        }
        if (this.ex3 !== null && this.ex3 !== undefined) {
          output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
          this.ex3.write(output);
          output.writeFieldEnd();
        }
        if (this.ex4 !== null && this.ex4 !== undefined) {
          output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
          this.ex4.write(output);
          output.writeFieldEnd();
        }
        if (this.ex5 !== null && this.ex5 !== undefined) {
          output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
          this.ex5.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_registerHealthCheck_args = function(args) {
        this.request = null;
        if (args) {
                if (args.request !== undefined && args.request !== null) {
                        this.request = new RegisterHealthCheckRequest(args.request);
                }
        }
};
BananaService_registerHealthCheck_args.prototype = {};
BananaService_registerHealthCheck_args.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.request = new RegisterHealthCheckRequest();
              this.request.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 0:
              input.skip(ftype);
              break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_registerHealthCheck_args.prototype.write = function(output) {
        output.writeStructBegin('BananaService_registerHealthCheck_args');
        if (this.request !== null && this.request !== undefined) {
          output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
          this.request.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_registerHealthCheck_result = function(args) {
        this.success = null;
        this.ex1 = null;
        this.ex2 = null;
        this.ex3 = null;
        this.ex4 = null;
        this.ex5 = null;
        if (args instanceof OperationFailedException) {
                this.ex1 = args;
                return;
        }
        if (args instanceof InvalidArgumentException) {
                this.ex2 = args;
                return;
        }
        if (args instanceof InvalidCredentialsException) {
                this.ex3 = args;
                return;
        }
        if (args instanceof ServiceDoesNotExistException) {
                this.ex4 = args;
                return;
        }
        if (args instanceof UnauthorizedException) {
                this.ex5 = args;
                return;
        }
        if (args) {
                if (args.success !== undefined && args.success !== null) {
                        this.success = new RegisterHealthCheckResponse(args.success);
                }
                if (args.ex1 !== undefined && args.ex1 !== null) {
                        this.ex1 = args.ex1;
                }
                if (args.ex2 !== undefined && args.ex2 !== null) {
                        this.ex2 = args.ex2;
                }
                if (args.ex3 !== undefined && args.ex3 !== null) {
                        this.ex3 = args.ex3;
                }
                if (args.ex4 !== undefined && args.ex4 !== null) {
                        this.ex4 = args.ex4;
                }
                if (args.ex5 !== undefined && args.ex5 !== null) {
                        this.ex5 = args.ex5;
                }
        }
};
BananaService_registerHealthCheck_result.prototype = {};
BananaService_registerHealthCheck_result.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 0:
            if (ftype == Thrift.Type.STRUCT) {
              this.success = new RegisterHealthCheckResponse();
              this.success.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex1 = new OperationFailedException();
              this.ex1.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 2:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex2 = new InvalidArgumentException();
              this.ex2.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 3:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex3 = new InvalidCredentialsException();
              this.ex3.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 4:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex4 = new ServiceDoesNotExistException();
              this.ex4.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 5:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex5 = new UnauthorizedException();
              this.ex5.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_registerHealthCheck_result.prototype.write = function(output) {
        output.writeStructBegin('BananaService_registerHealthCheck_result');
        if (this.success !== null && this.success !== undefined) {
          output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
          this.success.write(output);
          output.writeFieldEnd();
        }
        if (this.ex1 !== null && this.ex1 !== undefined) {
          output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
          this.ex1.write(output);
          output.writeFieldEnd();
        }
        if (this.ex2 !== null && this.ex2 !== undefined) {
          output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
          this.ex2.write(output);
          output.writeFieldEnd();
        }
        if (this.ex3 !== null && this.ex3 !== undefined) {
          output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
          this.ex3.write(output);
          output.writeFieldEnd();
        }
        if (this.ex4 !== null && this.ex4 !== undefined) {
          output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
          this.ex4.write(output);
          output.writeFieldEnd();
        }
        if (this.ex5 !== null && this.ex5 !== undefined) {
          output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
          this.ex5.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_renewServiceToken_args = function(args) {
        this.request = null;
        if (args) {
                if (args.request !== undefined && args.request !== null) {
                        this.request = new RenewServiceTokenRequest(args.request);
                }
        }
};
BananaService_renewServiceToken_args.prototype = {};
BananaService_renewServiceToken_args.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.request = new RenewServiceTokenRequest();
              this.request.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 0:
              input.skip(ftype);
              break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_renewServiceToken_args.prototype.write = function(output) {
        output.writeStructBegin('BananaService_renewServiceToken_args');
        if (this.request !== null && this.request !== undefined) {
          output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
          this.request.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_renewServiceToken_result = function(args) {
        this.success = null;
        this.ex1 = null;
        this.ex2 = null;
        this.ex3 = null;
        this.ex4 = null;
        this.ex5 = null;
        if (args instanceof OperationFailedException) {
                this.ex1 = args;
                return;
        }
        if (args instanceof InvalidArgumentException) {
                this.ex2 = args;
                return;
        }
        if (args instanceof InvalidCredentialsException) {
                this.ex3 = args;
                return;
        }
        if (args instanceof ServiceDoesNotExistException) {
                this.ex4 = args;
                return;
        }
        if (args instanceof UnauthorizedException) {
                this.ex5 = args;
                return;
        }
        if (args) {
                if (args.success !== undefined && args.success !== null) {
                        this.success = new RenewServiceTokenResponse(args.success);
                }
                if (args.ex1 !== undefined && args.ex1 !== null) {
                        this.ex1 = args.ex1;
                }
                if (args.ex2 !== undefined && args.ex2 !== null) {
                        this.ex2 = args.ex2;
                }
                if (args.ex3 !== undefined && args.ex3 !== null) {
                        this.ex3 = args.ex3;
                }
                if (args.ex4 !== undefined && args.ex4 !== null) {
                        this.ex4 = args.ex4;
                }
                if (args.ex5 !== undefined && args.ex5 !== null) {
                        this.ex5 = args.ex5;
                }
        }
};
BananaService_renewServiceToken_result.prototype = {};
BananaService_renewServiceToken_result.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 0:
            if (ftype == Thrift.Type.STRUCT) {
              this.success = new RenewServiceTokenResponse();
              this.success.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex1 = new OperationFailedException();
              this.ex1.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 2:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex2 = new InvalidArgumentException();
              this.ex2.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 3:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex3 = new InvalidCredentialsException();
              this.ex3.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 4:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex4 = new ServiceDoesNotExistException();
              this.ex4.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 5:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex5 = new UnauthorizedException();
              this.ex5.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_renewServiceToken_result.prototype.write = function(output) {
        output.writeStructBegin('BananaService_renewServiceToken_result');
        if (this.success !== null && this.success !== undefined) {
          output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
          this.success.write(output);
          output.writeFieldEnd();
        }
        if (this.ex1 !== null && this.ex1 !== undefined) {
          output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
          this.ex1.write(output);
          output.writeFieldEnd();
        }
        if (this.ex2 !== null && this.ex2 !== undefined) {
          output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
          this.ex2.write(output);
          output.writeFieldEnd();
        }
        if (this.ex3 !== null && this.ex3 !== undefined) {
          output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
          this.ex3.write(output);
          output.writeFieldEnd();
        }
        if (this.ex4 !== null && this.ex4 !== undefined) {
          output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
          this.ex4.write(output);
          output.writeFieldEnd();
        }
        if (this.ex5 !== null && this.ex5 !== undefined) {
          output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
          this.ex5.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_regenerateToken_args = function(args) {
        this.request = null;
        if (args) {
                if (args.request !== undefined && args.request !== null) {
                        this.request = new RegenerateTokenRequest(args.request);
                }
        }
};
BananaService_regenerateToken_args.prototype = {};
BananaService_regenerateToken_args.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.request = new RegenerateTokenRequest();
              this.request.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 0:
              input.skip(ftype);
              break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_regenerateToken_args.prototype.write = function(output) {
        output.writeStructBegin('BananaService_regenerateToken_args');
        if (this.request !== null && this.request !== undefined) {
          output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
          this.request.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_regenerateToken_result = function(args) {
        this.success = null;
        this.ex1 = null;
        this.ex2 = null;
        this.ex3 = null;
        this.ex4 = null;
        this.ex5 = null;
        if (args instanceof OperationFailedException) {
                this.ex1 = args;
                return;
        }
        if (args instanceof InvalidArgumentException) {
                this.ex2 = args;
                return;
        }
        if (args instanceof InvalidCredentialsException) {
                this.ex3 = args;
                return;
        }
        if (args instanceof ServiceDoesNotExistException) {
                this.ex4 = args;
                return;
        }
        if (args instanceof UnauthorizedException) {
                this.ex5 = args;
                return;
        }
        if (args) {
                if (args.success !== undefined && args.success !== null) {
                        this.success = new RegenerateTokenResponse(args.success);
                }
                if (args.ex1 !== undefined && args.ex1 !== null) {
                        this.ex1 = args.ex1;
                }
                if (args.ex2 !== undefined && args.ex2 !== null) {
                        this.ex2 = args.ex2;
                }
                if (args.ex3 !== undefined && args.ex3 !== null) {
                        this.ex3 = args.ex3;
                }
                if (args.ex4 !== undefined && args.ex4 !== null) {
                        this.ex4 = args.ex4;
                }
                if (args.ex5 !== undefined && args.ex5 !== null) {
                        this.ex5 = args.ex5;
                }
        }
};
BananaService_regenerateToken_result.prototype = {};
BananaService_regenerateToken_result.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 0:
            if (ftype == Thrift.Type.STRUCT) {
              this.success = new RegenerateTokenResponse();
              this.success.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex1 = new OperationFailedException();
              this.ex1.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 2:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex2 = new InvalidArgumentException();
              this.ex2.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 3:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex3 = new InvalidCredentialsException();
              this.ex3.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 4:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex4 = new ServiceDoesNotExistException();
              this.ex4.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 5:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex5 = new UnauthorizedException();
              this.ex5.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_regenerateToken_result.prototype.write = function(output) {
        output.writeStructBegin('BananaService_regenerateToken_result');
        if (this.success !== null && this.success !== undefined) {
          output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
          this.success.write(output);
          output.writeFieldEnd();
        }
        if (this.ex1 !== null && this.ex1 !== undefined) {
          output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
          this.ex1.write(output);
          output.writeFieldEnd();
        }
        if (this.ex2 !== null && this.ex2 !== undefined) {
          output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
          this.ex2.write(output);
          output.writeFieldEnd();
        }
        if (this.ex3 !== null && this.ex3 !== undefined) {
          output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
          this.ex3.write(output);
          output.writeFieldEnd();
        }
        if (this.ex4 !== null && this.ex4 !== undefined) {
          output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
          this.ex4.write(output);
          output.writeFieldEnd();
        }
        if (this.ex5 !== null && this.ex5 !== undefined) {
          output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
          this.ex5.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_getServiceInfo_args = function(args) {
        this.request = null;
        if (args) {
                if (args.request !== undefined && args.request !== null) {
                        this.request = new GetServiceInfoRequest(args.request);
                }
        }
};
BananaService_getServiceInfo_args.prototype = {};
BananaService_getServiceInfo_args.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.request = new GetServiceInfoRequest();
              this.request.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 0:
              input.skip(ftype);
              break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_getServiceInfo_args.prototype.write = function(output) {
        output.writeStructBegin('BananaService_getServiceInfo_args');
        if (this.request !== null && this.request !== undefined) {
          output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
          this.request.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_getServiceInfo_result = function(args) {
        this.success = null;
        this.ex1 = null;
        this.ex2 = null;
        this.ex3 = null;
        this.ex4 = null;
        this.ex5 = null;
        if (args instanceof OperationFailedException) {
                this.ex1 = args;
                return;
        }
        if (args instanceof InvalidArgumentException) {
                this.ex2 = args;
                return;
        }
        if (args instanceof InvalidCredentialsException) {
                this.ex3 = args;
                return;
        }
        if (args instanceof ServiceDoesNotExistException) {
                this.ex4 = args;
                return;
        }
        if (args instanceof UnauthorizedException) {
                this.ex5 = args;
                return;
        }
        if (args) {
                if (args.success !== undefined && args.success !== null) {
                        this.success = new GetServiceInfoResponse(args.success);
                }
                if (args.ex1 !== undefined && args.ex1 !== null) {
                        this.ex1 = args.ex1;
                }
                if (args.ex2 !== undefined && args.ex2 !== null) {
                        this.ex2 = args.ex2;
                }
                if (args.ex3 !== undefined && args.ex3 !== null) {
                        this.ex3 = args.ex3;
                }
                if (args.ex4 !== undefined && args.ex4 !== null) {
                        this.ex4 = args.ex4;
                }
                if (args.ex5 !== undefined && args.ex5 !== null) {
                        this.ex5 = args.ex5;
                }
        }
};
BananaService_getServiceInfo_result.prototype = {};
BananaService_getServiceInfo_result.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 0:
            if (ftype == Thrift.Type.STRUCT) {
              this.success = new GetServiceInfoResponse();
              this.success.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex1 = new OperationFailedException();
              this.ex1.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 2:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex2 = new InvalidArgumentException();
              this.ex2.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 3:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex3 = new InvalidCredentialsException();
              this.ex3.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 4:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex4 = new ServiceDoesNotExistException();
              this.ex4.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 5:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex5 = new UnauthorizedException();
              this.ex5.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_getServiceInfo_result.prototype.write = function(output) {
        output.writeStructBegin('BananaService_getServiceInfo_result');
        if (this.success !== null && this.success !== undefined) {
          output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
          this.success.write(output);
          output.writeFieldEnd();
        }
        if (this.ex1 !== null && this.ex1 !== undefined) {
          output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
          this.ex1.write(output);
          output.writeFieldEnd();
        }
        if (this.ex2 !== null && this.ex2 !== undefined) {
          output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
          this.ex2.write(output);
          output.writeFieldEnd();
        }
        if (this.ex3 !== null && this.ex3 !== undefined) {
          output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
          this.ex3.write(output);
          output.writeFieldEnd();
        }
        if (this.ex4 !== null && this.ex4 !== undefined) {
          output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
          this.ex4.write(output);
          output.writeFieldEnd();
        }
        if (this.ex5 !== null && this.ex5 !== undefined) {
          output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
          this.ex5.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_searchForServices_args = function(args) {
        this.request = null;
        if (args) {
                if (args.request !== undefined && args.request !== null) {
                        this.request = new SearchForServicesRequest(args.request);
                }
        }
};
BananaService_searchForServices_args.prototype = {};
BananaService_searchForServices_args.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.request = new SearchForServicesRequest();
              this.request.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 0:
              input.skip(ftype);
              break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_searchForServices_args.prototype.write = function(output) {
        output.writeStructBegin('BananaService_searchForServices_args');
        if (this.request !== null && this.request !== undefined) {
          output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
          this.request.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_searchForServices_result = function(args) {
        this.success = null;
        this.ex1 = null;
        this.ex2 = null;
        this.ex3 = null;
        this.ex4 = null;
        if (args instanceof OperationFailedException) {
                this.ex1 = args;
                return;
        }
        if (args instanceof InvalidArgumentException) {
                this.ex2 = args;
                return;
        }
        if (args instanceof InvalidCredentialsException) {
                this.ex3 = args;
                return;
        }
        if (args instanceof UnauthorizedException) {
                this.ex4 = args;
                return;
        }
        if (args) {
                if (args.success !== undefined && args.success !== null) {
                        this.success = new SearchForServicesResponse(args.success);
                }
                if (args.ex1 !== undefined && args.ex1 !== null) {
                        this.ex1 = args.ex1;
                }
                if (args.ex2 !== undefined && args.ex2 !== null) {
                        this.ex2 = args.ex2;
                }
                if (args.ex3 !== undefined && args.ex3 !== null) {
                        this.ex3 = args.ex3;
                }
                if (args.ex4 !== undefined && args.ex4 !== null) {
                        this.ex4 = args.ex4;
                }
        }
};
BananaService_searchForServices_result.prototype = {};
BananaService_searchForServices_result.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 0:
            if (ftype == Thrift.Type.STRUCT) {
              this.success = new SearchForServicesResponse();
              this.success.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex1 = new OperationFailedException();
              this.ex1.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 2:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex2 = new InvalidArgumentException();
              this.ex2.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 3:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex3 = new InvalidCredentialsException();
              this.ex3.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 4:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex4 = new UnauthorizedException();
              this.ex4.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_searchForServices_result.prototype.write = function(output) {
        output.writeStructBegin('BananaService_searchForServices_result');
        if (this.success !== null && this.success !== undefined) {
          output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
          this.success.write(output);
          output.writeFieldEnd();
        }
        if (this.ex1 !== null && this.ex1 !== undefined) {
          output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
          this.ex1.write(output);
          output.writeFieldEnd();
        }
        if (this.ex2 !== null && this.ex2 !== undefined) {
          output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
          this.ex2.write(output);
          output.writeFieldEnd();
        }
        if (this.ex3 !== null && this.ex3 !== undefined) {
          output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
          this.ex3.write(output);
          output.writeFieldEnd();
        }
        if (this.ex4 !== null && this.ex4 !== undefined) {
          output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
          this.ex4.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_getServiceSubscribers_args = function(args) {
        this.request = null;
        if (args) {
                if (args.request !== undefined && args.request !== null) {
                        this.request = new GetServiceSubscribersRequest(args.request);
                }
        }
};
BananaService_getServiceSubscribers_args.prototype = {};
BananaService_getServiceSubscribers_args.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.request = new GetServiceSubscribersRequest();
              this.request.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 0:
              input.skip(ftype);
              break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_getServiceSubscribers_args.prototype.write = function(output) {
        output.writeStructBegin('BananaService_getServiceSubscribers_args');
        if (this.request !== null && this.request !== undefined) {
          output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
          this.request.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_getServiceSubscribers_result = function(args) {
        this.success = null;
        this.ex1 = null;
        this.ex2 = null;
        this.ex3 = null;
        this.ex4 = null;
        if (args instanceof OperationFailedException) {
                this.ex1 = args;
                return;
        }
        if (args instanceof InvalidArgumentException) {
                this.ex2 = args;
                return;
        }
        if (args instanceof InvalidCredentialsException) {
                this.ex3 = args;
                return;
        }
        if (args instanceof UnauthorizedException) {
                this.ex4 = args;
                return;
        }
        if (args) {
                if (args.success !== undefined && args.success !== null) {
                        this.success = new GetServiceSubscribersResponse(args.success);
                }
                if (args.ex1 !== undefined && args.ex1 !== null) {
                        this.ex1 = args.ex1;
                }
                if (args.ex2 !== undefined && args.ex2 !== null) {
                        this.ex2 = args.ex2;
                }
                if (args.ex3 !== undefined && args.ex3 !== null) {
                        this.ex3 = args.ex3;
                }
                if (args.ex4 !== undefined && args.ex4 !== null) {
                        this.ex4 = args.ex4;
                }
        }
};
BananaService_getServiceSubscribers_result.prototype = {};
BananaService_getServiceSubscribers_result.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 0:
            if (ftype == Thrift.Type.STRUCT) {
              this.success = new GetServiceSubscribersResponse();
              this.success.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex1 = new OperationFailedException();
              this.ex1.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 2:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex2 = new InvalidArgumentException();
              this.ex2.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 3:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex3 = new InvalidCredentialsException();
              this.ex3.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 4:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex4 = new UnauthorizedException();
              this.ex4.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_getServiceSubscribers_result.prototype.write = function(output) {
        output.writeStructBegin('BananaService_getServiceSubscribers_result');
        if (this.success !== null && this.success !== undefined) {
          output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
          this.success.write(output);
          output.writeFieldEnd();
        }
        if (this.ex1 !== null && this.ex1 !== undefined) {
          output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
          this.ex1.write(output);
          output.writeFieldEnd();
        }
        if (this.ex2 !== null && this.ex2 !== undefined) {
          output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
          this.ex2.write(output);
          output.writeFieldEnd();
        }
        if (this.ex3 !== null && this.ex3 !== undefined) {
          output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
          this.ex3.write(output);
          output.writeFieldEnd();
        }
        if (this.ex4 !== null && this.ex4 !== undefined) {
          output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
          this.ex4.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_sendMessage_args = function(args) {
        this.request = null;
        if (args) {
                if (args.request !== undefined && args.request !== null) {
                        this.request = new SendMessageRequest(args.request);
                }
        }
};
BananaService_sendMessage_args.prototype = {};
BananaService_sendMessage_args.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.request = new SendMessageRequest();
              this.request.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 0:
              input.skip(ftype);
              break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_sendMessage_args.prototype.write = function(output) {
        output.writeStructBegin('BananaService_sendMessage_args');
        if (this.request !== null && this.request !== undefined) {
          output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
          this.request.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_sendMessage_result = function(args) {
        this.success = null;
        this.ex1 = null;
        this.ex2 = null;
        this.ex3 = null;
        if (args instanceof OperationFailedException) {
                this.ex1 = args;
                return;
        }
        if (args instanceof InvalidArgumentException) {
                this.ex2 = args;
                return;
        }
        if (args instanceof InvalidCredentialsException) {
                this.ex3 = args;
                return;
        }
        if (args) {
                if (args.success !== undefined && args.success !== null) {
                        this.success = new SendMessageResponse(args.success);
                }
                if (args.ex1 !== undefined && args.ex1 !== null) {
                        this.ex1 = args.ex1;
                }
                if (args.ex2 !== undefined && args.ex2 !== null) {
                        this.ex2 = args.ex2;
                }
                if (args.ex3 !== undefined && args.ex3 !== null) {
                        this.ex3 = args.ex3;
                }
        }
};
BananaService_sendMessage_result.prototype = {};
BananaService_sendMessage_result.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 0:
            if (ftype == Thrift.Type.STRUCT) {
              this.success = new SendMessageResponse();
              this.success.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex1 = new OperationFailedException();
              this.ex1.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 2:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex2 = new InvalidArgumentException();
              this.ex2.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 3:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex3 = new InvalidCredentialsException();
              this.ex3.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_sendMessage_result.prototype.write = function(output) {
        output.writeStructBegin('BananaService_sendMessage_result');
        if (this.success !== null && this.success !== undefined) {
          output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
          this.success.write(output);
          output.writeFieldEnd();
        }
        if (this.ex1 !== null && this.ex1 !== undefined) {
          output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
          this.ex1.write(output);
          output.writeFieldEnd();
        }
        if (this.ex2 !== null && this.ex2 !== undefined) {
          output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
          this.ex2.write(output);
          output.writeFieldEnd();
        }
        if (this.ex3 !== null && this.ex3 !== undefined) {
          output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
          this.ex3.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_sendMessageAsync_args = function(args) {
        this.request = null;
        if (args) {
                if (args.request !== undefined && args.request !== null) {
                        this.request = new SendMessageRequest(args.request);
                }
        }
};
BananaService_sendMessageAsync_args.prototype = {};
BananaService_sendMessageAsync_args.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.request = new SendMessageRequest();
              this.request.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 0:
              input.skip(ftype);
              break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_sendMessageAsync_args.prototype.write = function(output) {
        output.writeStructBegin('BananaService_sendMessageAsync_args');
        if (this.request !== null && this.request !== undefined) {
          output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
          this.request.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_sendMessageAsync_result = function(args) {
};
BananaService_sendMessageAsync_result.prototype = {};
BananaService_sendMessageAsync_result.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          input.skip(ftype);
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_sendMessageAsync_result.prototype.write = function(output) {
        output.writeStructBegin('BananaService_sendMessageAsync_result');
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaServiceClient = function(input, output) {
          this.input = input;
          this.output = (!output) ? input : output;
          this.seqid = 0;
      };
      BananaServiceClient.prototype = {};
BananaServiceClient.prototype.signIn = function(request, callback) {
        this.send_signIn(request, callback); 
        if (!callback) {
          return this.recv_signIn();
        }
};

BananaServiceClient.prototype.send_signIn = function(request, callback) {
        this.output.writeMessageBegin('signIn', Thrift.MessageType.CALL, this.seqid);
        var args = new BananaService_signIn_args();
        args.request = request;
        args.write(this.output);
        this.output.writeMessageEnd();
        if (callback) {
          var self = this;
          this.output.getTransport().flush(true, function() {
            var result = null;
            try {
              result = self.recv_signIn();
            } catch (e) {
              result = e;
            }
            callback(result);
          });
        } else {
          return this.output.getTransport().flush();
        }
};

BananaServiceClient.prototype.recv_signIn = function() {
        var ret = this.input.readMessageBegin();
        var fname = ret.fname;
        var mtype = ret.mtype;
        var rseqid = ret.rseqid;
        if (mtype == Thrift.MessageType.EXCEPTION) {
          var x = new Thrift.TApplicationException();
          x.read(this.input);
          this.input.readMessageEnd();
          throw x;
        }
        var result = new BananaService_signIn_result();
        result.read(this.input);
        this.input.readMessageEnd();

        if (null !== result.ex1) {
          throw result.ex1;
        }
        if (null !== result.ex2) {
          throw result.ex2;
        }
        if (null !== result.ex3) {
          throw result.ex3;
        }
        if (null !== result.success) {
          return result.success;
        }
        throw 'signIn failed: unknown result';
};
BananaServiceClient.prototype.provisionService = function(request, callback) {
        this.send_provisionService(request, callback); 
        if (!callback) {
          return this.recv_provisionService();
        }
};

BananaServiceClient.prototype.send_provisionService = function(request, callback) {
        this.output.writeMessageBegin('provisionService', Thrift.MessageType.CALL, this.seqid);
        var args = new BananaService_provisionService_args();
        args.request = request;
        args.write(this.output);
        this.output.writeMessageEnd();
        if (callback) {
          var self = this;
          this.output.getTransport().flush(true, function() {
            var result = null;
            try {
              result = self.recv_provisionService();
            } catch (e) {
              result = e;
            }
            callback(result);
          });
        } else {
          return this.output.getTransport().flush();
        }
};

BananaServiceClient.prototype.recv_provisionService = function() {
        var ret = this.input.readMessageBegin();
        var fname = ret.fname;
        var mtype = ret.mtype;
        var rseqid = ret.rseqid;
        if (mtype == Thrift.MessageType.EXCEPTION) {
          var x = new Thrift.TApplicationException();
          x.read(this.input);
          this.input.readMessageEnd();
          throw x;
        }
        var result = new BananaService_provisionService_result();
        result.read(this.input);
        this.input.readMessageEnd();

        if (null !== result.ex1) {
          throw result.ex1;
        }
        if (null !== result.ex2) {
          throw result.ex2;
        }
        if (null !== result.ex3) {
          throw result.ex3;
        }
        if (null !== result.ex4) {
          throw result.ex4;
        }
        if (null !== result.success) {
          return result.success;
        }
        throw 'provisionService failed: unknown result';
};
BananaServiceClient.prototype.subscribeToService = function(request, callback) {
        this.send_subscribeToService(request, callback); 
        if (!callback) {
          return this.recv_subscribeToService();
        }
};

BananaServiceClient.prototype.send_subscribeToService = function(request, callback) {
        this.output.writeMessageBegin('subscribeToService', Thrift.MessageType.CALL, this.seqid);
        var args = new BananaService_subscribeToService_args();
        args.request = request;
        args.write(this.output);
        this.output.writeMessageEnd();
        if (callback) {
          var self = this;
          this.output.getTransport().flush(true, function() {
            var result = null;
            try {
              result = self.recv_subscribeToService();
            } catch (e) {
              result = e;
            }
            callback(result);
          });
        } else {
          return this.output.getTransport().flush();
        }
};

BananaServiceClient.prototype.recv_subscribeToService = function() {
        var ret = this.input.readMessageBegin();
        var fname = ret.fname;
        var mtype = ret.mtype;
        var rseqid = ret.rseqid;
        if (mtype == Thrift.MessageType.EXCEPTION) {
          var x = new Thrift.TApplicationException();
          x.read(this.input);
          this.input.readMessageEnd();
          throw x;
        }
        var result = new BananaService_subscribeToService_result();
        result.read(this.input);
        this.input.readMessageEnd();

        if (null !== result.ex1) {
          throw result.ex1;
        }
        if (null !== result.ex2) {
          throw result.ex2;
        }
        if (null !== result.ex3) {
          throw result.ex3;
        }
        if (null !== result.ex4) {
          throw result.ex4;
        }
        if (null !== result.ex5) {
          throw result.ex5;
        }
        if (null !== result.success) {
          return result.success;
        }
        throw 'subscribeToService failed: unknown result';
};
BananaServiceClient.prototype.registerHealthCheck = function(request, callback) {
        this.send_registerHealthCheck(request, callback); 
        if (!callback) {
          return this.recv_registerHealthCheck();
        }
};

BananaServiceClient.prototype.send_registerHealthCheck = function(request, callback) {
        this.output.writeMessageBegin('registerHealthCheck', Thrift.MessageType.CALL, this.seqid);
        var args = new BananaService_registerHealthCheck_args();
        args.request = request;
        args.write(this.output);
        this.output.writeMessageEnd();
        if (callback) {
          var self = this;
          this.output.getTransport().flush(true, function() {
            var result = null;
            try {
              result = self.recv_registerHealthCheck();
            } catch (e) {
              result = e;
            }
            callback(result);
          });
        } else {
          return this.output.getTransport().flush();
        }
};

BananaServiceClient.prototype.recv_registerHealthCheck = function() {
        var ret = this.input.readMessageBegin();
        var fname = ret.fname;
        var mtype = ret.mtype;
        var rseqid = ret.rseqid;
        if (mtype == Thrift.MessageType.EXCEPTION) {
          var x = new Thrift.TApplicationException();
          x.read(this.input);
          this.input.readMessageEnd();
          throw x;
        }
        var result = new BananaService_registerHealthCheck_result();
        result.read(this.input);
        this.input.readMessageEnd();

        if (null !== result.ex1) {
          throw result.ex1;
        }
        if (null !== result.ex2) {
          throw result.ex2;
        }
        if (null !== result.ex3) {
          throw result.ex3;
        }
        if (null !== result.ex4) {
          throw result.ex4;
        }
        if (null !== result.ex5) {
          throw result.ex5;
        }
        if (null !== result.success) {
          return result.success;
        }
        throw 'registerHealthCheck failed: unknown result';
};
BananaServiceClient.prototype.renewServiceToken = function(request, callback) {
        this.send_renewServiceToken(request, callback); 
        if (!callback) {
          return this.recv_renewServiceToken();
        }
};

BananaServiceClient.prototype.send_renewServiceToken = function(request, callback) {
        this.output.writeMessageBegin('renewServiceToken', Thrift.MessageType.CALL, this.seqid);
        var args = new BananaService_renewServiceToken_args();
        args.request = request;
        args.write(this.output);
        this.output.writeMessageEnd();
        if (callback) {
          var self = this;
          this.output.getTransport().flush(true, function() {
            var result = null;
            try {
              result = self.recv_renewServiceToken();
            } catch (e) {
              result = e;
            }
            callback(result);
          });
        } else {
          return this.output.getTransport().flush();
        }
};

BananaServiceClient.prototype.recv_renewServiceToken = function() {
        var ret = this.input.readMessageBegin();
        var fname = ret.fname;
        var mtype = ret.mtype;
        var rseqid = ret.rseqid;
        if (mtype == Thrift.MessageType.EXCEPTION) {
          var x = new Thrift.TApplicationException();
          x.read(this.input);
          this.input.readMessageEnd();
          throw x;
        }
        var result = new BananaService_renewServiceToken_result();
        result.read(this.input);
        this.input.readMessageEnd();

        if (null !== result.ex1) {
          throw result.ex1;
        }
        if (null !== result.ex2) {
          throw result.ex2;
        }
        if (null !== result.ex3) {
          throw result.ex3;
        }
        if (null !== result.ex4) {
          throw result.ex4;
        }
        if (null !== result.ex5) {
          throw result.ex5;
        }
        if (null !== result.success) {
          return result.success;
        }
        throw 'renewServiceToken failed: unknown result';
};
BananaServiceClient.prototype.regenerateToken = function(request, callback) {
        this.send_regenerateToken(request, callback); 
        if (!callback) {
          return this.recv_regenerateToken();
        }
};

BananaServiceClient.prototype.send_regenerateToken = function(request, callback) {
        this.output.writeMessageBegin('regenerateToken', Thrift.MessageType.CALL, this.seqid);
        var args = new BananaService_regenerateToken_args();
        args.request = request;
        args.write(this.output);
        this.output.writeMessageEnd();
        if (callback) {
          var self = this;
          this.output.getTransport().flush(true, function() {
            var result = null;
            try {
              result = self.recv_regenerateToken();
            } catch (e) {
              result = e;
            }
            callback(result);
          });
        } else {
          return this.output.getTransport().flush();
        }
};

BananaServiceClient.prototype.recv_regenerateToken = function() {
        var ret = this.input.readMessageBegin();
        var fname = ret.fname;
        var mtype = ret.mtype;
        var rseqid = ret.rseqid;
        if (mtype == Thrift.MessageType.EXCEPTION) {
          var x = new Thrift.TApplicationException();
          x.read(this.input);
          this.input.readMessageEnd();
          throw x;
        }
        var result = new BananaService_regenerateToken_result();
        result.read(this.input);
        this.input.readMessageEnd();

        if (null !== result.ex1) {
          throw result.ex1;
        }
        if (null !== result.ex2) {
          throw result.ex2;
        }
        if (null !== result.ex3) {
          throw result.ex3;
        }
        if (null !== result.ex4) {
          throw result.ex4;
        }
        if (null !== result.ex5) {
          throw result.ex5;
        }
        if (null !== result.success) {
          return result.success;
        }
        throw 'regenerateToken failed: unknown result';
};
BananaServiceClient.prototype.getServiceInfo = function(request, callback) {
        this.send_getServiceInfo(request, callback); 
        if (!callback) {
          return this.recv_getServiceInfo();
        }
};

BananaServiceClient.prototype.send_getServiceInfo = function(request, callback) {
        this.output.writeMessageBegin('getServiceInfo', Thrift.MessageType.CALL, this.seqid);
        var args = new BananaService_getServiceInfo_args();
        args.request = request;
        args.write(this.output);
        this.output.writeMessageEnd();
        if (callback) {
          var self = this;
          this.output.getTransport().flush(true, function() {
            var result = null;
            try {
              result = self.recv_getServiceInfo();
            } catch (e) {
              result = e;
            }
            callback(result);
          });
        } else {
          return this.output.getTransport().flush();
        }
};

BananaServiceClient.prototype.recv_getServiceInfo = function() {
        var ret = this.input.readMessageBegin();
        var fname = ret.fname;
        var mtype = ret.mtype;
        var rseqid = ret.rseqid;
        if (mtype == Thrift.MessageType.EXCEPTION) {
          var x = new Thrift.TApplicationException();
          x.read(this.input);
          this.input.readMessageEnd();
          throw x;
        }
        var result = new BananaService_getServiceInfo_result();
        result.read(this.input);
        this.input.readMessageEnd();

        if (null !== result.ex1) {
          throw result.ex1;
        }
        if (null !== result.ex2) {
          throw result.ex2;
        }
        if (null !== result.ex3) {
          throw result.ex3;
        }
        if (null !== result.ex4) {
          throw result.ex4;
        }
        if (null !== result.ex5) {
          throw result.ex5;
        }
        if (null !== result.success) {
          return result.success;
        }
        throw 'getServiceInfo failed: unknown result';
};
BananaServiceClient.prototype.searchForServices = function(request, callback) {
        this.send_searchForServices(request, callback); 
        if (!callback) {
          return this.recv_searchForServices();
        }
};

BananaServiceClient.prototype.send_searchForServices = function(request, callback) {
        this.output.writeMessageBegin('searchForServices', Thrift.MessageType.CALL, this.seqid);
        var args = new BananaService_searchForServices_args();
        args.request = request;
        args.write(this.output);
        this.output.writeMessageEnd();
        if (callback) {
          var self = this;
          this.output.getTransport().flush(true, function() {
            var result = null;
            try {
              result = self.recv_searchForServices();
            } catch (e) {
              result = e;
            }
            callback(result);
          });
        } else {
          return this.output.getTransport().flush();
        }
};

BananaServiceClient.prototype.recv_searchForServices = function() {
        var ret = this.input.readMessageBegin();
        var fname = ret.fname;
        var mtype = ret.mtype;
        var rseqid = ret.rseqid;
        if (mtype == Thrift.MessageType.EXCEPTION) {
          var x = new Thrift.TApplicationException();
          x.read(this.input);
          this.input.readMessageEnd();
          throw x;
        }
        var result = new BananaService_searchForServices_result();
        result.read(this.input);
        this.input.readMessageEnd();

        if (null !== result.ex1) {
          throw result.ex1;
        }
        if (null !== result.ex2) {
          throw result.ex2;
        }
        if (null !== result.ex3) {
          throw result.ex3;
        }
        if (null !== result.ex4) {
          throw result.ex4;
        }
        if (null !== result.success) {
          return result.success;
        }
        throw 'searchForServices failed: unknown result';
};
BananaServiceClient.prototype.getServiceSubscribers = function(request, callback) {
        this.send_getServiceSubscribers(request, callback); 
        if (!callback) {
          return this.recv_getServiceSubscribers();
        }
};

BananaServiceClient.prototype.send_getServiceSubscribers = function(request, callback) {
        this.output.writeMessageBegin('getServiceSubscribers', Thrift.MessageType.CALL, this.seqid);
        var args = new BananaService_getServiceSubscribers_args();
        args.request = request;
        args.write(this.output);
        this.output.writeMessageEnd();
        if (callback) {
          var self = this;
          this.output.getTransport().flush(true, function() {
            var result = null;
            try {
              result = self.recv_getServiceSubscribers();
            } catch (e) {
              result = e;
            }
            callback(result);
          });
        } else {
          return this.output.getTransport().flush();
        }
};

BananaServiceClient.prototype.recv_getServiceSubscribers = function() {
        var ret = this.input.readMessageBegin();
        var fname = ret.fname;
        var mtype = ret.mtype;
        var rseqid = ret.rseqid;
        if (mtype == Thrift.MessageType.EXCEPTION) {
          var x = new Thrift.TApplicationException();
          x.read(this.input);
          this.input.readMessageEnd();
          throw x;
        }
        var result = new BananaService_getServiceSubscribers_result();
        result.read(this.input);
        this.input.readMessageEnd();

        if (null !== result.ex1) {
          throw result.ex1;
        }
        if (null !== result.ex2) {
          throw result.ex2;
        }
        if (null !== result.ex3) {
          throw result.ex3;
        }
        if (null !== result.ex4) {
          throw result.ex4;
        }
        if (null !== result.success) {
          return result.success;
        }
        throw 'getServiceSubscribers failed: unknown result';
};
BananaServiceClient.prototype.sendMessage = function(request, callback) {
        this.send_sendMessage(request, callback); 
        if (!callback) {
          return this.recv_sendMessage();
        }
};

BananaServiceClient.prototype.send_sendMessage = function(request, callback) {
        this.output.writeMessageBegin('sendMessage', Thrift.MessageType.CALL, this.seqid);
        var args = new BananaService_sendMessage_args();
        args.request = request;
        args.write(this.output);
        this.output.writeMessageEnd();
        if (callback) {
          var self = this;
          this.output.getTransport().flush(true, function() {
            var result = null;
            try {
              result = self.recv_sendMessage();
            } catch (e) {
              result = e;
            }
            callback(result);
          });
        } else {
          return this.output.getTransport().flush();
        }
};

BananaServiceClient.prototype.recv_sendMessage = function() {
        var ret = this.input.readMessageBegin();
        var fname = ret.fname;
        var mtype = ret.mtype;
        var rseqid = ret.rseqid;
        if (mtype == Thrift.MessageType.EXCEPTION) {
          var x = new Thrift.TApplicationException();
          x.read(this.input);
          this.input.readMessageEnd();
          throw x;
        }
        var result = new BananaService_sendMessage_result();
        result.read(this.input);
        this.input.readMessageEnd();

        if (null !== result.ex1) {
          throw result.ex1;
        }
        if (null !== result.ex2) {
          throw result.ex2;
        }
        if (null !== result.ex3) {
          throw result.ex3;
        }
        if (null !== result.success) {
          return result.success;
        }
        throw 'sendMessage failed: unknown result';
};
BananaServiceClient.prototype.sendMessageAsync = function(request, callback) {
        this.send_sendMessageAsync(request, callback); 
};

BananaServiceClient.prototype.send_sendMessageAsync = function(request, callback) {
        this.output.writeMessageBegin('sendMessageAsync', Thrift.MessageType.ONEWAY, this.seqid);
        var args = new BananaService_sendMessageAsync_args();
        args.request = request;
        args.write(this.output);
        this.output.writeMessageEnd();
        if (callback) {
          var self = this;
          this.output.getTransport().flush(true, function() {
            var result = null;
            try {
              result = self.recv_sendMessageAsync();
            } catch (e) {
              result = e;
            }
            callback(result);
          });
        } else {
          return this.output.getTransport().flush();
        }
};
