//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


EmailNewRegistration = function(args) {
  this.infoOfNewUser = null;
  if (args) {
    if (args.infoOfNewUser !== undefined && args.infoOfNewUser !== null) {
      this.infoOfNewUser = new User(args.infoOfNewUser);
    }
  }
};
EmailNewRegistration.prototype = {};
EmailNewRegistration.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.infoOfNewUser = new User();
        this.infoOfNewUser.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EmailNewRegistration.prototype.write = function(output) {
  output.writeStructBegin('EmailNewRegistration');
  if (this.infoOfNewUser !== null && this.infoOfNewUser !== undefined) {
    output.writeFieldBegin('infoOfNewUser', Thrift.Type.STRUCT, 1);
    this.infoOfNewUser.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EmailMessage = function(args) {
  this.newRegistration = null;
  if (args) {
    if (args.newRegistration !== undefined && args.newRegistration !== null) {
      this.newRegistration = new EmailNewRegistration(args.newRegistration);
    }
  }
};
EmailMessage.prototype = {};
EmailMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.newRegistration = new EmailNewRegistration();
        this.newRegistration.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EmailMessage.prototype.write = function(output) {
  output.writeStructBegin('EmailMessage');
  if (this.newRegistration !== null && this.newRegistration !== undefined) {
    output.writeFieldBegin('newRegistration', Thrift.Type.STRUCT, 1);
    this.newRegistration.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

