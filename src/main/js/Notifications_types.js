//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


HealthCheckFailed = function(args) {
};
HealthCheckFailed.prototype = {};
HealthCheckFailed.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HealthCheckFailed.prototype.write = function(output) {
  output.writeStructBegin('HealthCheckFailed');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HealthCheckBackToNormal = function(args) {
};
HealthCheckBackToNormal.prototype = {};
HealthCheckBackToNormal.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HealthCheckBackToNormal.prototype.write = function(output) {
  output.writeStructBegin('HealthCheckBackToNormal');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ServiceTokenRenewed = function(args) {
  this.human = null;
  this.serviceToken = null;
  if (args) {
    if (args.human !== undefined && args.human !== null) {
      this.human = new Human(args.human);
    }
    if (args.serviceToken !== undefined && args.serviceToken !== null) {
      this.serviceToken = new ServiceToken(args.serviceToken);
    }
  }
};
ServiceTokenRenewed.prototype = {};
ServiceTokenRenewed.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.human = new Human();
        this.human.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.serviceToken = new ServiceToken();
        this.serviceToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServiceTokenRenewed.prototype.write = function(output) {
  output.writeStructBegin('ServiceTokenRenewed');
  if (this.human !== null && this.human !== undefined) {
    output.writeFieldBegin('human', Thrift.Type.STRUCT, 1);
    this.human.write(output);
    output.writeFieldEnd();
  }
  if (this.serviceToken !== null && this.serviceToken !== undefined) {
    output.writeFieldBegin('serviceToken', Thrift.Type.STRUCT, 2);
    this.serviceToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ServiceTokenRegenerated = function(args) {
  this.human = null;
  this.serviceToken = null;
  if (args) {
    if (args.human !== undefined && args.human !== null) {
      this.human = new Human(args.human);
    }
    if (args.serviceToken !== undefined && args.serviceToken !== null) {
      this.serviceToken = new ServiceToken(args.serviceToken);
    }
  }
};
ServiceTokenRegenerated.prototype = {};
ServiceTokenRegenerated.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.human = new Human();
        this.human.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.serviceToken = new ServiceToken();
        this.serviceToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServiceTokenRegenerated.prototype.write = function(output) {
  output.writeStructBegin('ServiceTokenRegenerated');
  if (this.human !== null && this.human !== undefined) {
    output.writeFieldBegin('human', Thrift.Type.STRUCT, 1);
    this.human.write(output);
    output.writeFieldEnd();
  }
  if (this.serviceToken !== null && this.serviceToken !== undefined) {
    output.writeFieldBegin('serviceToken', Thrift.Type.STRUCT, 2);
    this.serviceToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ServiceSentMessage = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = new Message(args.message);
    }
  }
};
ServiceSentMessage.prototype = {};
ServiceSentMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServiceSentMessage.prototype.write = function(output) {
  output.writeStructBegin('ServiceSentMessage');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 1);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Event = function(args) {
  this.healthCheckFailed = null;
  if (args) {
    if (args.healthCheckFailed !== undefined && args.healthCheckFailed !== null) {
      this.healthCheckFailed = new HealthCheckFailed(args.healthCheckFailed);
    }
  }
};
Event.prototype = {};
Event.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.healthCheckFailed = new HealthCheckFailed();
        this.healthCheckFailed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Event.prototype.write = function(output) {
  output.writeStructBegin('Event');
  if (this.healthCheckFailed !== null && this.healthCheckFailed !== undefined) {
    output.writeFieldBegin('healthCheckFailed', Thrift.Type.STRUCT, 1);
    this.healthCheckFailed.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Notification = function(args) {
  this.event = null;
  this.timestamp = null;
  if (args) {
    if (args.event !== undefined && args.event !== null) {
      this.event = new Event(args.event);
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
  }
};
Notification.prototype = {};
Notification.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.event = new Event();
        this.event.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Notification.prototype.write = function(output) {
  output.writeStructBegin('Notification');
  if (this.event !== null && this.event !== undefined) {
    output.writeFieldBegin('event', Thrift.Type.STRUCT, 1);
    this.event.write(output);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

