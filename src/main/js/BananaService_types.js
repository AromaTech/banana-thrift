//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


SignInRequest = function(args) {
  this.credentials = null;
  this.username = null;
  if (args) {
    if (args.credentials !== undefined && args.credentials !== null) {
      this.credentials = new Credentials(args.credentials);
    }
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    }
  }
};
SignInRequest.prototype = {};
SignInRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new Credentials();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SignInRequest.prototype.write = function(output) {
  output.writeStructBegin('SignInRequest');
  if (this.credentials !== null && this.credentials !== undefined) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 1);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SignInResponse = function(args) {
  this.developerToken = null;
  if (args) {
    if (args.developerToken !== undefined && args.developerToken !== null) {
      this.developerToken = new DeveloperToken(args.developerToken);
    }
  }
};
SignInResponse.prototype = {};
SignInResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.developerToken = new DeveloperToken();
        this.developerToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SignInResponse.prototype.write = function(output) {
  output.writeStructBegin('SignInResponse');
  if (this.developerToken !== null && this.developerToken !== undefined) {
    output.writeFieldBegin('developerToken', Thrift.Type.STRUCT, 1);
    this.developerToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SignUpRequest = function(args) {
  this.email = null;
  this.name = null;
  this.username = null;
  this.organization = null;
  this.credentials = null;
  if (args) {
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    }
    if (args.organization !== undefined && args.organization !== null) {
      this.organization = args.organization;
    }
    if (args.credentials !== undefined && args.credentials !== null) {
      this.credentials = new Credentials(args.credentials);
    }
  }
};
SignUpRequest.prototype = {};
SignUpRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.organization = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.credentials = new Credentials();
        this.credentials.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SignUpRequest.prototype.write = function(output) {
  output.writeStructBegin('SignUpRequest');
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 1);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 3);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.organization !== null && this.organization !== undefined) {
    output.writeFieldBegin('organization', Thrift.Type.STRING, 4);
    output.writeString(this.organization);
    output.writeFieldEnd();
  }
  if (this.credentials !== null && this.credentials !== undefined) {
    output.writeFieldBegin('credentials', Thrift.Type.STRUCT, 5);
    this.credentials.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SignUpResponse = function(args) {
  this.developerToken = null;
  if (args) {
    if (args.developerToken !== undefined && args.developerToken !== null) {
      this.developerToken = new DeveloperToken(args.developerToken);
    }
  }
};
SignUpResponse.prototype = {};
SignUpResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.developerToken = new DeveloperToken();
        this.developerToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SignUpResponse.prototype.write = function(output) {
  output.writeStructBegin('SignUpResponse');
  if (this.developerToken !== null && this.developerToken !== undefined) {
    output.writeFieldBegin('developerToken', Thrift.Type.STRUCT, 1);
    this.developerToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProvisionServiceRequest = function(args) {
  this.token = null;
  this.serviceName = null;
  this.programmingLanguage = null;
  this.organization = null;
  this.icon = null;
  this.developerToken = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.serviceName !== undefined && args.serviceName !== null) {
      this.serviceName = args.serviceName;
    }
    if (args.programmingLanguage !== undefined && args.programmingLanguage !== null) {
      this.programmingLanguage = args.programmingLanguage;
    }
    if (args.organization !== undefined && args.organization !== null) {
      this.organization = args.organization;
    }
    if (args.icon !== undefined && args.icon !== null) {
      this.icon = new Image(args.icon);
    }
    if (args.developerToken !== undefined && args.developerToken !== null) {
      this.developerToken = new DeveloperToken(args.developerToken);
    }
  }
};
ProvisionServiceRequest.prototype = {};
ProvisionServiceRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serviceName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.programmingLanguage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.organization = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.icon = new Image();
        this.icon.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.developerToken = new DeveloperToken();
        this.developerToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProvisionServiceRequest.prototype.write = function(output) {
  output.writeStructBegin('ProvisionServiceRequest');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.serviceName !== null && this.serviceName !== undefined) {
    output.writeFieldBegin('serviceName', Thrift.Type.STRING, 2);
    output.writeString(this.serviceName);
    output.writeFieldEnd();
  }
  if (this.programmingLanguage !== null && this.programmingLanguage !== undefined) {
    output.writeFieldBegin('programmingLanguage', Thrift.Type.STRING, 3);
    output.writeString(this.programmingLanguage);
    output.writeFieldEnd();
  }
  if (this.organization !== null && this.organization !== undefined) {
    output.writeFieldBegin('organization', Thrift.Type.STRING, 4);
    output.writeString(this.organization);
    output.writeFieldEnd();
  }
  if (this.icon !== null && this.icon !== undefined) {
    output.writeFieldBegin('icon', Thrift.Type.STRUCT, 5);
    this.icon.write(output);
    output.writeFieldEnd();
  }
  if (this.developerToken !== null && this.developerToken !== undefined) {
    output.writeFieldBegin('developerToken', Thrift.Type.STRUCT, 6);
    this.developerToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProvisionServiceResponse = function(args) {
  this.bananaToken = null;
  this.serviceName = null;
  this.serviceToken = null;
  if (args) {
    if (args.bananaToken !== undefined && args.bananaToken !== null) {
      this.bananaToken = args.bananaToken;
    }
    if (args.serviceName !== undefined && args.serviceName !== null) {
      this.serviceName = args.serviceName;
    }
    if (args.serviceToken !== undefined && args.serviceToken !== null) {
      this.serviceToken = new ServiceToken(args.serviceToken);
    }
  }
};
ProvisionServiceResponse.prototype = {};
ProvisionServiceResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.bananaToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serviceName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.serviceToken = new ServiceToken();
        this.serviceToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProvisionServiceResponse.prototype.write = function(output) {
  output.writeStructBegin('ProvisionServiceResponse');
  if (this.bananaToken !== null && this.bananaToken !== undefined) {
    output.writeFieldBegin('bananaToken', Thrift.Type.STRING, 1);
    output.writeString(this.bananaToken);
    output.writeFieldEnd();
  }
  if (this.serviceName !== null && this.serviceName !== undefined) {
    output.writeFieldBegin('serviceName', Thrift.Type.STRING, 2);
    output.writeString(this.serviceName);
    output.writeFieldEnd();
  }
  if (this.serviceToken !== null && this.serviceToken !== undefined) {
    output.writeFieldBegin('serviceToken', Thrift.Type.STRUCT, 3);
    this.serviceToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubscribeToServiceRequest = function(args) {
  this.token = null;
  this.serviceName = null;
  this.organization = null;
  this.shared = false;
  this.developerToken = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.serviceName !== undefined && args.serviceName !== null) {
      this.serviceName = args.serviceName;
    }
    if (args.organization !== undefined && args.organization !== null) {
      this.organization = args.organization;
    }
    if (args.shared !== undefined && args.shared !== null) {
      this.shared = args.shared;
    }
    if (args.developerToken !== undefined && args.developerToken !== null) {
      this.developerToken = new DeveloperToken(args.developerToken);
    }
  }
};
SubscribeToServiceRequest.prototype = {};
SubscribeToServiceRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serviceName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.organization = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.shared = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.developerToken = new DeveloperToken();
        this.developerToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubscribeToServiceRequest.prototype.write = function(output) {
  output.writeStructBegin('SubscribeToServiceRequest');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.serviceName !== null && this.serviceName !== undefined) {
    output.writeFieldBegin('serviceName', Thrift.Type.STRING, 2);
    output.writeString(this.serviceName);
    output.writeFieldEnd();
  }
  if (this.organization !== null && this.organization !== undefined) {
    output.writeFieldBegin('organization', Thrift.Type.STRING, 3);
    output.writeString(this.organization);
    output.writeFieldEnd();
  }
  if (this.shared !== null && this.shared !== undefined) {
    output.writeFieldBegin('shared', Thrift.Type.BOOL, 4);
    output.writeBool(this.shared);
    output.writeFieldEnd();
  }
  if (this.developerToken !== null && this.developerToken !== undefined) {
    output.writeFieldBegin('developerToken', Thrift.Type.STRUCT, 5);
    this.developerToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubscribeToServiceResponse = function(args) {
  this.message = null;
  this.channel = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.channel !== undefined && args.channel !== null) {
      this.channel = new BananaChannel(args.channel);
    }
  }
};
SubscribeToServiceResponse.prototype = {};
SubscribeToServiceResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.channel = new BananaChannel();
        this.channel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubscribeToServiceResponse.prototype.write = function(output) {
  output.writeStructBegin('SubscribeToServiceResponse');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.channel !== null && this.channel !== undefined) {
    output.writeFieldBegin('channel', Thrift.Type.STRUCT, 2);
    this.channel.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RegisterHealthCheckRequest = function(args) {
  this.endpoint = null;
  this.developerToken = null;
  if (args) {
    if (args.endpoint !== undefined && args.endpoint !== null) {
      this.endpoint = new Endpoint(args.endpoint);
    }
    if (args.developerToken !== undefined && args.developerToken !== null) {
      this.developerToken = new DeveloperToken(args.developerToken);
    }
  }
};
RegisterHealthCheckRequest.prototype = {};
RegisterHealthCheckRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.endpoint = new Endpoint();
        this.endpoint.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.developerToken = new DeveloperToken();
        this.developerToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RegisterHealthCheckRequest.prototype.write = function(output) {
  output.writeStructBegin('RegisterHealthCheckRequest');
  if (this.endpoint !== null && this.endpoint !== undefined) {
    output.writeFieldBegin('endpoint', Thrift.Type.STRUCT, 1);
    this.endpoint.write(output);
    output.writeFieldEnd();
  }
  if (this.developerToken !== null && this.developerToken !== undefined) {
    output.writeFieldBegin('developerToken', Thrift.Type.STRUCT, 2);
    this.developerToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RegisterHealthCheckResponse = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
RegisterHealthCheckResponse.prototype = {};
RegisterHealthCheckResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RegisterHealthCheckResponse.prototype.write = function(output) {
  output.writeStructBegin('RegisterHealthCheckResponse');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RenewServiceTokenRequest = function(args) {
  this.serviceToken = null;
  this.timePeriod = null;
  this.developerToken = null;
  if (args) {
    if (args.serviceToken !== undefined && args.serviceToken !== null) {
      this.serviceToken = new ServiceToken(args.serviceToken);
    }
    if (args.timePeriod !== undefined && args.timePeriod !== null) {
      this.timePeriod = new TimePeriod(args.timePeriod);
    }
    if (args.developerToken !== undefined && args.developerToken !== null) {
      this.developerToken = new DeveloperToken(args.developerToken);
    }
  }
};
RenewServiceTokenRequest.prototype = {};
RenewServiceTokenRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.serviceToken = new ServiceToken();
        this.serviceToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.timePeriod = new TimePeriod();
        this.timePeriod.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.developerToken = new DeveloperToken();
        this.developerToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RenewServiceTokenRequest.prototype.write = function(output) {
  output.writeStructBegin('RenewServiceTokenRequest');
  if (this.serviceToken !== null && this.serviceToken !== undefined) {
    output.writeFieldBegin('serviceToken', Thrift.Type.STRUCT, 1);
    this.serviceToken.write(output);
    output.writeFieldEnd();
  }
  if (this.timePeriod !== null && this.timePeriod !== undefined) {
    output.writeFieldBegin('timePeriod', Thrift.Type.STRUCT, 2);
    this.timePeriod.write(output);
    output.writeFieldEnd();
  }
  if (this.developerToken !== null && this.developerToken !== undefined) {
    output.writeFieldBegin('developerToken', Thrift.Type.STRUCT, 3);
    this.developerToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RenewServiceTokenResponse = function(args) {
  this.serviceToken = null;
  if (args) {
    if (args.serviceToken !== undefined && args.serviceToken !== null) {
      this.serviceToken = new ServiceToken(args.serviceToken);
    }
  }
};
RenewServiceTokenResponse.prototype = {};
RenewServiceTokenResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.serviceToken = new ServiceToken();
        this.serviceToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RenewServiceTokenResponse.prototype.write = function(output) {
  output.writeStructBegin('RenewServiceTokenResponse');
  if (this.serviceToken !== null && this.serviceToken !== undefined) {
    output.writeFieldBegin('serviceToken', Thrift.Type.STRUCT, 1);
    this.serviceToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RegenerateTokenRequest = function(args) {
  this.serviceId = null;
  this.developerToken = null;
  if (args) {
    if (args.serviceId !== undefined && args.serviceId !== null) {
      this.serviceId = args.serviceId;
    }
    if (args.developerToken !== undefined && args.developerToken !== null) {
      this.developerToken = new DeveloperToken(args.developerToken);
    }
  }
};
RegenerateTokenRequest.prototype = {};
RegenerateTokenRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serviceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.developerToken = new DeveloperToken();
        this.developerToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RegenerateTokenRequest.prototype.write = function(output) {
  output.writeStructBegin('RegenerateTokenRequest');
  if (this.serviceId !== null && this.serviceId !== undefined) {
    output.writeFieldBegin('serviceId', Thrift.Type.STRING, 1);
    output.writeString(this.serviceId);
    output.writeFieldEnd();
  }
  if (this.developerToken !== null && this.developerToken !== undefined) {
    output.writeFieldBegin('developerToken', Thrift.Type.STRUCT, 2);
    this.developerToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RegenerateTokenResponse = function(args) {
  this.serviceToken = null;
  if (args) {
    if (args.serviceToken !== undefined && args.serviceToken !== null) {
      this.serviceToken = new ServiceToken(args.serviceToken);
    }
  }
};
RegenerateTokenResponse.prototype = {};
RegenerateTokenResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.serviceToken = new ServiceToken();
        this.serviceToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RegenerateTokenResponse.prototype.write = function(output) {
  output.writeStructBegin('RegenerateTokenResponse');
  if (this.serviceToken !== null && this.serviceToken !== undefined) {
    output.writeFieldBegin('serviceToken', Thrift.Type.STRUCT, 1);
    this.serviceToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeleteMessageRequest = function(args) {
  this.developerToken = null;
  this.messageId = null;
  this.serviceId = null;
  this.messageIds = [];
  if (args) {
    if (args.developerToken !== undefined && args.developerToken !== null) {
      this.developerToken = new DeveloperToken(args.developerToken);
    }
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
    if (args.serviceId !== undefined && args.serviceId !== null) {
      this.serviceId = args.serviceId;
    }
    if (args.messageIds !== undefined && args.messageIds !== null) {
      this.messageIds = Thrift.copyList(args.messageIds, [null]);
    }
  }
};
DeleteMessageRequest.prototype = {};
DeleteMessageRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.developerToken = new DeveloperToken();
        this.developerToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.serviceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.messageIds = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.messageIds.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteMessageRequest.prototype.write = function(output) {
  output.writeStructBegin('DeleteMessageRequest');
  if (this.developerToken !== null && this.developerToken !== undefined) {
    output.writeFieldBegin('developerToken', Thrift.Type.STRUCT, 1);
    this.developerToken.write(output);
    output.writeFieldEnd();
  }
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 2);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.serviceId !== null && this.serviceId !== undefined) {
    output.writeFieldBegin('serviceId', Thrift.Type.STRING, 3);
    output.writeString(this.serviceId);
    output.writeFieldEnd();
  }
  if (this.messageIds !== null && this.messageIds !== undefined) {
    output.writeFieldBegin('messageIds', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.messageIds.length);
    for (var iter7 in this.messageIds)
    {
      if (this.messageIds.hasOwnProperty(iter7))
      {
        iter7 = this.messageIds[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeleteMessageResponse = function(args) {
};
DeleteMessageResponse.prototype = {};
DeleteMessageResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteMessageResponse.prototype.write = function(output) {
  output.writeStructBegin('DeleteMessageResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeleteAllMessagesRequest = function(args) {
  this.developerToken = null;
  this.serviceId = null;
  if (args) {
    if (args.developerToken !== undefined && args.developerToken !== null) {
      this.developerToken = new DeveloperToken(args.developerToken);
    }
    if (args.serviceId !== undefined && args.serviceId !== null) {
      this.serviceId = args.serviceId;
    }
  }
};
DeleteAllMessagesRequest.prototype = {};
DeleteAllMessagesRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.developerToken = new DeveloperToken();
        this.developerToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serviceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteAllMessagesRequest.prototype.write = function(output) {
  output.writeStructBegin('DeleteAllMessagesRequest');
  if (this.developerToken !== null && this.developerToken !== undefined) {
    output.writeFieldBegin('developerToken', Thrift.Type.STRUCT, 1);
    this.developerToken.write(output);
    output.writeFieldEnd();
  }
  if (this.serviceId !== null && this.serviceId !== undefined) {
    output.writeFieldBegin('serviceId', Thrift.Type.STRING, 2);
    output.writeString(this.serviceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HideMessageRequest = function(args) {
  this.developerToken = null;
  this.messageId = null;
  this.serviceId = null;
  this.messageIds = [];
  if (args) {
    if (args.developerToken !== undefined && args.developerToken !== null) {
      this.developerToken = new DeveloperToken(args.developerToken);
    }
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
    if (args.serviceId !== undefined && args.serviceId !== null) {
      this.serviceId = args.serviceId;
    }
    if (args.messageIds !== undefined && args.messageIds !== null) {
      this.messageIds = Thrift.copyList(args.messageIds, [null]);
    }
  }
};
HideMessageRequest.prototype = {};
HideMessageRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.developerToken = new DeveloperToken();
        this.developerToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.serviceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.messageIds = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString().value;
          this.messageIds.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HideMessageRequest.prototype.write = function(output) {
  output.writeStructBegin('HideMessageRequest');
  if (this.developerToken !== null && this.developerToken !== undefined) {
    output.writeFieldBegin('developerToken', Thrift.Type.STRUCT, 1);
    this.developerToken.write(output);
    output.writeFieldEnd();
  }
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 2);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.serviceId !== null && this.serviceId !== undefined) {
    output.writeFieldBegin('serviceId', Thrift.Type.STRING, 3);
    output.writeString(this.serviceId);
    output.writeFieldEnd();
  }
  if (this.messageIds !== null && this.messageIds !== undefined) {
    output.writeFieldBegin('messageIds', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.messageIds.length);
    for (var iter15 in this.messageIds)
    {
      if (this.messageIds.hasOwnProperty(iter15))
      {
        iter15 = this.messageIds[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HideMessageResponse = function(args) {
};
HideMessageResponse.prototype = {};
HideMessageResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HideMessageResponse.prototype.write = function(output) {
  output.writeStructBegin('HideMessageResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HideAllMessagesRequest = function(args) {
  this.developerToken = null;
  this.serviceId = null;
  if (args) {
    if (args.developerToken !== undefined && args.developerToken !== null) {
      this.developerToken = new DeveloperToken(args.developerToken);
    }
    if (args.serviceId !== undefined && args.serviceId !== null) {
      this.serviceId = args.serviceId;
    }
  }
};
HideAllMessagesRequest.prototype = {};
HideAllMessagesRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.developerToken = new DeveloperToken();
        this.developerToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serviceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HideAllMessagesRequest.prototype.write = function(output) {
  output.writeStructBegin('HideAllMessagesRequest');
  if (this.developerToken !== null && this.developerToken !== undefined) {
    output.writeFieldBegin('developerToken', Thrift.Type.STRUCT, 1);
    this.developerToken.write(output);
    output.writeFieldEnd();
  }
  if (this.serviceId !== null && this.serviceId !== undefined) {
    output.writeFieldBegin('serviceId', Thrift.Type.STRING, 2);
    output.writeString(this.serviceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HideAllMessagesResponse = function(args) {
};
HideAllMessagesResponse.prototype = {};
HideAllMessagesResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HideAllMessagesResponse.prototype.write = function(output) {
  output.writeStructBegin('HideAllMessagesResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SaveChannelRequest = function(args) {
  this.developerToken = null;
  this.channel = null;
  if (args) {
    if (args.developerToken !== undefined && args.developerToken !== null) {
      this.developerToken = new DeveloperToken(args.developerToken);
    }
    if (args.channel !== undefined && args.channel !== null) {
      this.channel = new BananaChannel(args.channel);
    }
  }
};
SaveChannelRequest.prototype = {};
SaveChannelRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.developerToken = new DeveloperToken();
        this.developerToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.channel = new BananaChannel();
        this.channel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SaveChannelRequest.prototype.write = function(output) {
  output.writeStructBegin('SaveChannelRequest');
  if (this.developerToken !== null && this.developerToken !== undefined) {
    output.writeFieldBegin('developerToken', Thrift.Type.STRUCT, 1);
    this.developerToken.write(output);
    output.writeFieldEnd();
  }
  if (this.channel !== null && this.channel !== undefined) {
    output.writeFieldBegin('channel', Thrift.Type.STRUCT, 2);
    this.channel.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SaveChannelResponse = function(args) {
  this.message = null;
  this.channel = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.channel !== undefined && args.channel !== null) {
      this.channel = new BananaChannel(args.channel);
    }
  }
};
SaveChannelResponse.prototype = {};
SaveChannelResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.channel = new BananaChannel();
        this.channel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SaveChannelResponse.prototype.write = function(output) {
  output.writeStructBegin('SaveChannelResponse');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.channel !== null && this.channel !== undefined) {
    output.writeFieldBegin('channel', Thrift.Type.STRUCT, 2);
    this.channel.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RemoveSavedChannelRequest = function(args) {
  this.developerToken = null;
  this.channel = null;
  if (args) {
    if (args.developerToken !== undefined && args.developerToken !== null) {
      this.developerToken = new DeveloperToken(args.developerToken);
    }
    if (args.channel !== undefined && args.channel !== null) {
      this.channel = new BananaChannel(args.channel);
    }
  }
};
RemoveSavedChannelRequest.prototype = {};
RemoveSavedChannelRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.developerToken = new DeveloperToken();
        this.developerToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.channel = new BananaChannel();
        this.channel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoveSavedChannelRequest.prototype.write = function(output) {
  output.writeStructBegin('RemoveSavedChannelRequest');
  if (this.developerToken !== null && this.developerToken !== undefined) {
    output.writeFieldBegin('developerToken', Thrift.Type.STRUCT, 1);
    this.developerToken.write(output);
    output.writeFieldEnd();
  }
  if (this.channel !== null && this.channel !== undefined) {
    output.writeFieldBegin('channel', Thrift.Type.STRUCT, 2);
    this.channel.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RemoveSavedChannelResponse = function(args) {
  this.message = null;
  this.channel = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.channel !== undefined && args.channel !== null) {
      this.channel = new BananaChannel(args.channel);
    }
  }
};
RemoveSavedChannelResponse.prototype = {};
RemoveSavedChannelResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.channel = new BananaChannel();
        this.channel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoveSavedChannelResponse.prototype.write = function(output) {
  output.writeStructBegin('RemoveSavedChannelResponse');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.channel !== null && this.channel !== undefined) {
    output.writeFieldBegin('channel', Thrift.Type.STRUCT, 2);
    this.channel.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SnoozeChannelRequest = function(args) {
  this.developerToken = null;
  this.channel = null;
  if (args) {
    if (args.developerToken !== undefined && args.developerToken !== null) {
      this.developerToken = new DeveloperToken(args.developerToken);
    }
    if (args.channel !== undefined && args.channel !== null) {
      this.channel = new BananaChannel(args.channel);
    }
  }
};
SnoozeChannelRequest.prototype = {};
SnoozeChannelRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.developerToken = new DeveloperToken();
        this.developerToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.channel = new BananaChannel();
        this.channel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SnoozeChannelRequest.prototype.write = function(output) {
  output.writeStructBegin('SnoozeChannelRequest');
  if (this.developerToken !== null && this.developerToken !== undefined) {
    output.writeFieldBegin('developerToken', Thrift.Type.STRUCT, 1);
    this.developerToken.write(output);
    output.writeFieldEnd();
  }
  if (this.channel !== null && this.channel !== undefined) {
    output.writeFieldBegin('channel', Thrift.Type.STRUCT, 2);
    this.channel.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SnoozeChannelResponse = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
SnoozeChannelResponse.prototype = {};
SnoozeChannelResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SnoozeChannelResponse.prototype.write = function(output) {
  output.writeStructBegin('SnoozeChannelResponse');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetMyServicesRequest = function(args) {
  this.developerToken = null;
  if (args) {
    if (args.developerToken !== undefined && args.developerToken !== null) {
      this.developerToken = new DeveloperToken(args.developerToken);
    }
  }
};
GetMyServicesRequest.prototype = {};
GetMyServicesRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.developerToken = new DeveloperToken();
        this.developerToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetMyServicesRequest.prototype.write = function(output) {
  output.writeStructBegin('GetMyServicesRequest');
  if (this.developerToken !== null && this.developerToken !== undefined) {
    output.writeFieldBegin('developerToken', Thrift.Type.STRUCT, 1);
    this.developerToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetMyServicesResponse = function(args) {
  this.services = null;
  if (args) {
    if (args.services !== undefined && args.services !== null) {
      this.services = Thrift.copyList(args.services, [null]);
    }
  }
};
GetMyServicesResponse.prototype = {};
GetMyServicesResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.services = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new Service();
          elem22.read(input);
          this.services.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetMyServicesResponse.prototype.write = function(output) {
  output.writeStructBegin('GetMyServicesResponse');
  if (this.services !== null && this.services !== undefined) {
    output.writeFieldBegin('services', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.services.length);
    for (var iter23 in this.services)
    {
      if (this.services.hasOwnProperty(iter23))
      {
        iter23 = this.services[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetServiceInfoRequest = function(args) {
  this.developerToken = null;
  this.serviceId = null;
  if (args) {
    if (args.developerToken !== undefined && args.developerToken !== null) {
      this.developerToken = new DeveloperToken(args.developerToken);
    }
    if (args.serviceId !== undefined && args.serviceId !== null) {
      this.serviceId = args.serviceId;
    }
  }
};
GetServiceInfoRequest.prototype = {};
GetServiceInfoRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.developerToken = new DeveloperToken();
        this.developerToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serviceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetServiceInfoRequest.prototype.write = function(output) {
  output.writeStructBegin('GetServiceInfoRequest');
  if (this.developerToken !== null && this.developerToken !== undefined) {
    output.writeFieldBegin('developerToken', Thrift.Type.STRUCT, 1);
    this.developerToken.write(output);
    output.writeFieldEnd();
  }
  if (this.serviceId !== null && this.serviceId !== undefined) {
    output.writeFieldBegin('serviceId', Thrift.Type.STRING, 2);
    output.writeString(this.serviceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetServiceInfoResponse = function(args) {
  this.serviceInfo = null;
  if (args) {
    if (args.serviceInfo !== undefined && args.serviceInfo !== null) {
      this.serviceInfo = new Service(args.serviceInfo);
    }
  }
};
GetServiceInfoResponse.prototype = {};
GetServiceInfoResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.serviceInfo = new Service();
        this.serviceInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetServiceInfoResponse.prototype.write = function(output) {
  output.writeStructBegin('GetServiceInfoResponse');
  if (this.serviceInfo !== null && this.serviceInfo !== undefined) {
    output.writeFieldBegin('serviceInfo', Thrift.Type.STRUCT, 1);
    this.serviceInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetDashboardRequest = function(args) {
  this.developerToken = null;
  if (args) {
    if (args.developerToken !== undefined && args.developerToken !== null) {
      this.developerToken = new DeveloperToken(args.developerToken);
    }
  }
};
GetDashboardRequest.prototype = {};
GetDashboardRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.developerToken = new DeveloperToken();
        this.developerToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetDashboardRequest.prototype.write = function(output) {
  output.writeStructBegin('GetDashboardRequest');
  if (this.developerToken !== null && this.developerToken !== undefined) {
    output.writeFieldBegin('developerToken', Thrift.Type.STRUCT, 1);
    this.developerToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetDashboardResponse = function(args) {
  this.unreadMessageCount = 0;
  this.totalMessagesLastHour = 0;
  this.totalMessagesLast24hrs = 0;
  this.recentMessages = [];
  if (args) {
    if (args.unreadMessageCount !== undefined && args.unreadMessageCount !== null) {
      this.unreadMessageCount = args.unreadMessageCount;
    }
    if (args.totalMessagesLastHour !== undefined && args.totalMessagesLastHour !== null) {
      this.totalMessagesLastHour = args.totalMessagesLastHour;
    }
    if (args.totalMessagesLast24hrs !== undefined && args.totalMessagesLast24hrs !== null) {
      this.totalMessagesLast24hrs = args.totalMessagesLast24hrs;
    }
    if (args.recentMessages !== undefined && args.recentMessages !== null) {
      this.recentMessages = Thrift.copyList(args.recentMessages, [Message]);
    }
  }
};
GetDashboardResponse.prototype = {};
GetDashboardResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.unreadMessageCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.totalMessagesLastHour = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.totalMessagesLast24hrs = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.recentMessages = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new Message();
          elem30.read(input);
          this.recentMessages.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetDashboardResponse.prototype.write = function(output) {
  output.writeStructBegin('GetDashboardResponse');
  if (this.unreadMessageCount !== null && this.unreadMessageCount !== undefined) {
    output.writeFieldBegin('unreadMessageCount', Thrift.Type.I32, 1);
    output.writeI32(this.unreadMessageCount);
    output.writeFieldEnd();
  }
  if (this.totalMessagesLastHour !== null && this.totalMessagesLastHour !== undefined) {
    output.writeFieldBegin('totalMessagesLastHour', Thrift.Type.I32, 2);
    output.writeI32(this.totalMessagesLastHour);
    output.writeFieldEnd();
  }
  if (this.totalMessagesLast24hrs !== null && this.totalMessagesLast24hrs !== undefined) {
    output.writeFieldBegin('totalMessagesLast24hrs', Thrift.Type.I32, 3);
    output.writeI32(this.totalMessagesLast24hrs);
    output.writeFieldEnd();
  }
  if (this.recentMessages !== null && this.recentMessages !== undefined) {
    output.writeFieldBegin('recentMessages', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.recentMessages.length);
    for (var iter31 in this.recentMessages)
    {
      if (this.recentMessages.hasOwnProperty(iter31))
      {
        iter31 = this.recentMessages[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchForServicesRequest = function(args) {
  this.developerToken = null;
  this.searchTerm = null;
  this.organization = null;
  if (args) {
    if (args.developerToken !== undefined && args.developerToken !== null) {
      this.developerToken = new DeveloperToken(args.developerToken);
    }
    if (args.searchTerm !== undefined && args.searchTerm !== null) {
      this.searchTerm = args.searchTerm;
    }
    if (args.organization !== undefined && args.organization !== null) {
      this.organization = args.organization;
    }
  }
};
SearchForServicesRequest.prototype = {};
SearchForServicesRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.developerToken = new DeveloperToken();
        this.developerToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.searchTerm = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.organization = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchForServicesRequest.prototype.write = function(output) {
  output.writeStructBegin('SearchForServicesRequest');
  if (this.developerToken !== null && this.developerToken !== undefined) {
    output.writeFieldBegin('developerToken', Thrift.Type.STRUCT, 1);
    this.developerToken.write(output);
    output.writeFieldEnd();
  }
  if (this.searchTerm !== null && this.searchTerm !== undefined) {
    output.writeFieldBegin('searchTerm', Thrift.Type.STRING, 2);
    output.writeString(this.searchTerm);
    output.writeFieldEnd();
  }
  if (this.organization !== null && this.organization !== undefined) {
    output.writeFieldBegin('organization', Thrift.Type.STRING, 3);
    output.writeString(this.organization);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchForServicesResponse = function(args) {
  this.services = [];
  if (args) {
    if (args.services !== undefined && args.services !== null) {
      this.services = Thrift.copyList(args.services, [null]);
    }
  }
};
SearchForServicesResponse.prototype = {};
SearchForServicesResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.services = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new Service();
          elem38.read(input);
          this.services.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchForServicesResponse.prototype.write = function(output) {
  output.writeStructBegin('SearchForServicesResponse');
  if (this.services !== null && this.services !== undefined) {
    output.writeFieldBegin('services', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.services.length);
    for (var iter39 in this.services)
    {
      if (this.services.hasOwnProperty(iter39))
      {
        iter39 = this.services[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetServiceSubscribersRequest = function(args) {
  this.developerToken = null;
  this.serviceId = null;
  this.organization = null;
  if (args) {
    if (args.developerToken !== undefined && args.developerToken !== null) {
      this.developerToken = new DeveloperToken(args.developerToken);
    }
    if (args.serviceId !== undefined && args.serviceId !== null) {
      this.serviceId = args.serviceId;
    }
    if (args.organization !== undefined && args.organization !== null) {
      this.organization = args.organization;
    }
  }
};
GetServiceSubscribersRequest.prototype = {};
GetServiceSubscribersRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.developerToken = new DeveloperToken();
        this.developerToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serviceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.organization = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetServiceSubscribersRequest.prototype.write = function(output) {
  output.writeStructBegin('GetServiceSubscribersRequest');
  if (this.developerToken !== null && this.developerToken !== undefined) {
    output.writeFieldBegin('developerToken', Thrift.Type.STRUCT, 1);
    this.developerToken.write(output);
    output.writeFieldEnd();
  }
  if (this.serviceId !== null && this.serviceId !== undefined) {
    output.writeFieldBegin('serviceId', Thrift.Type.STRING, 2);
    output.writeString(this.serviceId);
    output.writeFieldEnd();
  }
  if (this.organization !== null && this.organization !== undefined) {
    output.writeFieldBegin('organization', Thrift.Type.STRING, 3);
    output.writeString(this.organization);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetServiceSubscribersResponse = function(args) {
  this.developers = [];
  if (args) {
    if (args.developers !== undefined && args.developers !== null) {
      this.developers = Thrift.copyList(args.developers, [null]);
    }
  }
};
GetServiceSubscribersResponse.prototype = {};
GetServiceSubscribersResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.developers = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new Developer();
          elem46.read(input);
          this.developers.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetServiceSubscribersResponse.prototype.write = function(output) {
  output.writeStructBegin('GetServiceSubscribersResponse');
  if (this.developers !== null && this.developers !== undefined) {
    output.writeFieldBegin('developers', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.developers.length);
    for (var iter47 in this.developers)
    {
      if (this.developers.hasOwnProperty(iter47))
      {
        iter47 = this.developers[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetMySavedChannelsRequest = function(args) {
  this.developerToken = null;
  if (args) {
    if (args.developerToken !== undefined && args.developerToken !== null) {
      this.developerToken = new DeveloperToken(args.developerToken);
    }
  }
};
GetMySavedChannelsRequest.prototype = {};
GetMySavedChannelsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.developerToken = new DeveloperToken();
        this.developerToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetMySavedChannelsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetMySavedChannelsRequest');
  if (this.developerToken !== null && this.developerToken !== undefined) {
    output.writeFieldBegin('developerToken', Thrift.Type.STRUCT, 1);
    this.developerToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetMySavedChannelsResponse = function(args) {
  this.channels = null;
  if (args) {
    if (args.channels !== undefined && args.channels !== null) {
      this.channels = Thrift.copyList(args.channels, [null]);
    }
  }
};
GetMySavedChannelsResponse.prototype = {};
GetMySavedChannelsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.channels = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new BananaChannel();
          elem54.read(input);
          this.channels.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetMySavedChannelsResponse.prototype.write = function(output) {
  output.writeStructBegin('GetMySavedChannelsResponse');
  if (this.channels !== null && this.channels !== undefined) {
    output.writeFieldBegin('channels', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.channels.length);
    for (var iter55 in this.channels)
    {
      if (this.channels.hasOwnProperty(iter55))
      {
        iter55 = this.channels[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SendMessageRequest = function(args) {
  this.serviceToken = null;
  this.message = null;
  this.urgency = 2;
  if (args) {
    if (args.serviceToken !== undefined && args.serviceToken !== null) {
      this.serviceToken = new ServiceToken(args.serviceToken);
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.urgency !== undefined && args.urgency !== null) {
      this.urgency = args.urgency;
    }
  }
};
SendMessageRequest.prototype = {};
SendMessageRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.serviceToken = new ServiceToken();
        this.serviceToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.urgency = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SendMessageRequest.prototype.write = function(output) {
  output.writeStructBegin('SendMessageRequest');
  if (this.serviceToken !== null && this.serviceToken !== undefined) {
    output.writeFieldBegin('serviceToken', Thrift.Type.STRUCT, 1);
    this.serviceToken.write(output);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.urgency !== null && this.urgency !== undefined) {
    output.writeFieldBegin('urgency', Thrift.Type.I32, 3);
    output.writeI32(this.urgency);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SendMessageResponse = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
SendMessageResponse.prototype = {};
SendMessageResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SendMessageResponse.prototype.write = function(output) {
  output.writeStructBegin('SendMessageResponse');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

API_VERSION = 1.1;
PRODUCTION_ENDPOINT = new TcpEndpoint({
'hostname' : 'banana-service.aroma.tech','port' : 7001});
BETA_ENDPOINT = new TcpEndpoint({
'hostname' : 'banana-service-beta.aroma.tech','port' : 7001});
MAX_ICON_DIMENSION = new Dimension({
'width' : 500,'height' : 500});
MAX_ICON_SIZE_IN_KILOBYTES = 40;
