//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


SignInRequest = function(args) {
  this.oathToken = null;
  this.username = null;
  if (args) {
    if (args.oathToken !== undefined && args.oathToken !== null) {
      this.oathToken = new OauthToken(args.oathToken);
    }
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    }
  }
};
SignInRequest.prototype = {};
SignInRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.oathToken = new OauthToken();
        this.oathToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SignInRequest.prototype.write = function(output) {
  output.writeStructBegin('SignInRequest');
  if (this.oathToken !== null && this.oathToken !== undefined) {
    output.writeFieldBegin('oathToken', Thrift.Type.STRUCT, 1);
    this.oathToken.write(output);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SignInResponse = function(args) {
  this.developerToken = null;
  if (args) {
    if (args.developerToken !== undefined && args.developerToken !== null) {
      this.developerToken = new DeveloperToken(args.developerToken);
    }
  }
};
SignInResponse.prototype = {};
SignInResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.developerToken = new DeveloperToken();
        this.developerToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SignInResponse.prototype.write = function(output) {
  output.writeStructBegin('SignInResponse');
  if (this.developerToken !== null && this.developerToken !== undefined) {
    output.writeFieldBegin('developerToken', Thrift.Type.STRUCT, 1);
    this.developerToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProvisionServiceRequest = function(args) {
  this.token = null;
  this.serviceName = null;
  this.programmingLanguage = null;
  this.organization = null;
  this.icon = null;
  this.developerToken = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.serviceName !== undefined && args.serviceName !== null) {
      this.serviceName = args.serviceName;
    }
    if (args.programmingLanguage !== undefined && args.programmingLanguage !== null) {
      this.programmingLanguage = args.programmingLanguage;
    }
    if (args.organization !== undefined && args.organization !== null) {
      this.organization = args.organization;
    }
    if (args.icon !== undefined && args.icon !== null) {
      this.icon = new Image(args.icon);
    }
    if (args.developerToken !== undefined && args.developerToken !== null) {
      this.developerToken = new DeveloperToken(args.developerToken);
    }
  }
};
ProvisionServiceRequest.prototype = {};
ProvisionServiceRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serviceName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.programmingLanguage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.organization = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.icon = new Image();
        this.icon.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.developerToken = new DeveloperToken();
        this.developerToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProvisionServiceRequest.prototype.write = function(output) {
  output.writeStructBegin('ProvisionServiceRequest');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.serviceName !== null && this.serviceName !== undefined) {
    output.writeFieldBegin('serviceName', Thrift.Type.STRING, 2);
    output.writeString(this.serviceName);
    output.writeFieldEnd();
  }
  if (this.programmingLanguage !== null && this.programmingLanguage !== undefined) {
    output.writeFieldBegin('programmingLanguage', Thrift.Type.STRING, 3);
    output.writeString(this.programmingLanguage);
    output.writeFieldEnd();
  }
  if (this.organization !== null && this.organization !== undefined) {
    output.writeFieldBegin('organization', Thrift.Type.STRING, 4);
    output.writeString(this.organization);
    output.writeFieldEnd();
  }
  if (this.icon !== null && this.icon !== undefined) {
    output.writeFieldBegin('icon', Thrift.Type.STRUCT, 5);
    this.icon.write(output);
    output.writeFieldEnd();
  }
  if (this.developerToken !== null && this.developerToken !== undefined) {
    output.writeFieldBegin('developerToken', Thrift.Type.STRUCT, 6);
    this.developerToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProvisionServiceResponse = function(args) {
  this.bananaToken = null;
  this.serviceName = null;
  this.serviceToken = null;
  if (args) {
    if (args.bananaToken !== undefined && args.bananaToken !== null) {
      this.bananaToken = args.bananaToken;
    }
    if (args.serviceName !== undefined && args.serviceName !== null) {
      this.serviceName = args.serviceName;
    }
    if (args.serviceToken !== undefined && args.serviceToken !== null) {
      this.serviceToken = new ServiceToken(args.serviceToken);
    }
  }
};
ProvisionServiceResponse.prototype = {};
ProvisionServiceResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.bananaToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serviceName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.serviceToken = new ServiceToken();
        this.serviceToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProvisionServiceResponse.prototype.write = function(output) {
  output.writeStructBegin('ProvisionServiceResponse');
  if (this.bananaToken !== null && this.bananaToken !== undefined) {
    output.writeFieldBegin('bananaToken', Thrift.Type.STRING, 1);
    output.writeString(this.bananaToken);
    output.writeFieldEnd();
  }
  if (this.serviceName !== null && this.serviceName !== undefined) {
    output.writeFieldBegin('serviceName', Thrift.Type.STRING, 2);
    output.writeString(this.serviceName);
    output.writeFieldEnd();
  }
  if (this.serviceToken !== null && this.serviceToken !== undefined) {
    output.writeFieldBegin('serviceToken', Thrift.Type.STRUCT, 3);
    this.serviceToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubscribeToServiceRequest = function(args) {
  this.token = null;
  this.serviceName = null;
  this.organization = null;
  this.shared = false;
  this.developerToken = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.serviceName !== undefined && args.serviceName !== null) {
      this.serviceName = args.serviceName;
    }
    if (args.organization !== undefined && args.organization !== null) {
      this.organization = args.organization;
    }
    if (args.shared !== undefined && args.shared !== null) {
      this.shared = args.shared;
    }
    if (args.developerToken !== undefined && args.developerToken !== null) {
      this.developerToken = new DeveloperToken(args.developerToken);
    }
  }
};
SubscribeToServiceRequest.prototype = {};
SubscribeToServiceRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serviceName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.organization = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.shared = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.developerToken = new DeveloperToken();
        this.developerToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubscribeToServiceRequest.prototype.write = function(output) {
  output.writeStructBegin('SubscribeToServiceRequest');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.serviceName !== null && this.serviceName !== undefined) {
    output.writeFieldBegin('serviceName', Thrift.Type.STRING, 2);
    output.writeString(this.serviceName);
    output.writeFieldEnd();
  }
  if (this.organization !== null && this.organization !== undefined) {
    output.writeFieldBegin('organization', Thrift.Type.STRING, 3);
    output.writeString(this.organization);
    output.writeFieldEnd();
  }
  if (this.shared !== null && this.shared !== undefined) {
    output.writeFieldBegin('shared', Thrift.Type.BOOL, 4);
    output.writeBool(this.shared);
    output.writeFieldEnd();
  }
  if (this.developerToken !== null && this.developerToken !== undefined) {
    output.writeFieldBegin('developerToken', Thrift.Type.STRUCT, 5);
    this.developerToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SubscribeToServiceResponse = function(args) {
  this.message = null;
  this.channel = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.channel !== undefined && args.channel !== null) {
      this.channel = new BananaChannel(args.channel);
    }
  }
};
SubscribeToServiceResponse.prototype = {};
SubscribeToServiceResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.channel = new BananaChannel();
        this.channel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubscribeToServiceResponse.prototype.write = function(output) {
  output.writeStructBegin('SubscribeToServiceResponse');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.channel !== null && this.channel !== undefined) {
    output.writeFieldBegin('channel', Thrift.Type.STRUCT, 2);
    this.channel.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RegisterHealthCheckRequest = function(args) {
  this.endpoint = null;
  this.developerToken = null;
  if (args) {
    if (args.endpoint !== undefined && args.endpoint !== null) {
      this.endpoint = new Endpoint(args.endpoint);
    }
    if (args.developerToken !== undefined && args.developerToken !== null) {
      this.developerToken = new DeveloperToken(args.developerToken);
    }
  }
};
RegisterHealthCheckRequest.prototype = {};
RegisterHealthCheckRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.endpoint = new Endpoint();
        this.endpoint.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.developerToken = new DeveloperToken();
        this.developerToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RegisterHealthCheckRequest.prototype.write = function(output) {
  output.writeStructBegin('RegisterHealthCheckRequest');
  if (this.endpoint !== null && this.endpoint !== undefined) {
    output.writeFieldBegin('endpoint', Thrift.Type.STRUCT, 1);
    this.endpoint.write(output);
    output.writeFieldEnd();
  }
  if (this.developerToken !== null && this.developerToken !== undefined) {
    output.writeFieldBegin('developerToken', Thrift.Type.STRUCT, 2);
    this.developerToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RegisterHealthCheckResponse = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
RegisterHealthCheckResponse.prototype = {};
RegisterHealthCheckResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RegisterHealthCheckResponse.prototype.write = function(output) {
  output.writeStructBegin('RegisterHealthCheckResponse');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RenewServiceTokenRequest = function(args) {
  this.serviceToken = null;
  this.timePeriod = null;
  this.developerToken = null;
  if (args) {
    if (args.serviceToken !== undefined && args.serviceToken !== null) {
      this.serviceToken = new ServiceToken(args.serviceToken);
    }
    if (args.timePeriod !== undefined && args.timePeriod !== null) {
      this.timePeriod = new TimePeriod(args.timePeriod);
    }
    if (args.developerToken !== undefined && args.developerToken !== null) {
      this.developerToken = new DeveloperToken(args.developerToken);
    }
  }
};
RenewServiceTokenRequest.prototype = {};
RenewServiceTokenRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.serviceToken = new ServiceToken();
        this.serviceToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.timePeriod = new TimePeriod();
        this.timePeriod.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.developerToken = new DeveloperToken();
        this.developerToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RenewServiceTokenRequest.prototype.write = function(output) {
  output.writeStructBegin('RenewServiceTokenRequest');
  if (this.serviceToken !== null && this.serviceToken !== undefined) {
    output.writeFieldBegin('serviceToken', Thrift.Type.STRUCT, 1);
    this.serviceToken.write(output);
    output.writeFieldEnd();
  }
  if (this.timePeriod !== null && this.timePeriod !== undefined) {
    output.writeFieldBegin('timePeriod', Thrift.Type.STRUCT, 2);
    this.timePeriod.write(output);
    output.writeFieldEnd();
  }
  if (this.developerToken !== null && this.developerToken !== undefined) {
    output.writeFieldBegin('developerToken', Thrift.Type.STRUCT, 3);
    this.developerToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RenewServiceTokenResponse = function(args) {
  this.serviceToken = null;
  if (args) {
    if (args.serviceToken !== undefined && args.serviceToken !== null) {
      this.serviceToken = new ServiceToken(args.serviceToken);
    }
  }
};
RenewServiceTokenResponse.prototype = {};
RenewServiceTokenResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.serviceToken = new ServiceToken();
        this.serviceToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RenewServiceTokenResponse.prototype.write = function(output) {
  output.writeStructBegin('RenewServiceTokenResponse');
  if (this.serviceToken !== null && this.serviceToken !== undefined) {
    output.writeFieldBegin('serviceToken', Thrift.Type.STRUCT, 1);
    this.serviceToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RegenerateTokenRequest = function(args) {
  this.serviceId = null;
  this.developerToken = null;
  if (args) {
    if (args.serviceId !== undefined && args.serviceId !== null) {
      this.serviceId = args.serviceId;
    }
    if (args.developerToken !== undefined && args.developerToken !== null) {
      this.developerToken = new DeveloperToken(args.developerToken);
    }
  }
};
RegenerateTokenRequest.prototype = {};
RegenerateTokenRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serviceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.developerToken = new DeveloperToken();
        this.developerToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RegenerateTokenRequest.prototype.write = function(output) {
  output.writeStructBegin('RegenerateTokenRequest');
  if (this.serviceId !== null && this.serviceId !== undefined) {
    output.writeFieldBegin('serviceId', Thrift.Type.STRING, 1);
    output.writeString(this.serviceId);
    output.writeFieldEnd();
  }
  if (this.developerToken !== null && this.developerToken !== undefined) {
    output.writeFieldBegin('developerToken', Thrift.Type.STRUCT, 2);
    this.developerToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RegenerateTokenResponse = function(args) {
  this.serviceToken = null;
  if (args) {
    if (args.serviceToken !== undefined && args.serviceToken !== null) {
      this.serviceToken = new ServiceToken(args.serviceToken);
    }
  }
};
RegenerateTokenResponse.prototype = {};
RegenerateTokenResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.serviceToken = new ServiceToken();
        this.serviceToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RegenerateTokenResponse.prototype.write = function(output) {
  output.writeStructBegin('RegenerateTokenResponse');
  if (this.serviceToken !== null && this.serviceToken !== undefined) {
    output.writeFieldBegin('serviceToken', Thrift.Type.STRUCT, 1);
    this.serviceToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeleteMessageRequest = function(args) {
  this.developerToken = null;
  this.messageId = null;
  this.serviceId = null;
  if (args) {
    if (args.developerToken !== undefined && args.developerToken !== null) {
      this.developerToken = new DeveloperToken(args.developerToken);
    }
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
    if (args.serviceId !== undefined && args.serviceId !== null) {
      this.serviceId = args.serviceId;
    }
  }
};
DeleteMessageRequest.prototype = {};
DeleteMessageRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.developerToken = new DeveloperToken();
        this.developerToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.serviceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteMessageRequest.prototype.write = function(output) {
  output.writeStructBegin('DeleteMessageRequest');
  if (this.developerToken !== null && this.developerToken !== undefined) {
    output.writeFieldBegin('developerToken', Thrift.Type.STRUCT, 1);
    this.developerToken.write(output);
    output.writeFieldEnd();
  }
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 2);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.serviceId !== null && this.serviceId !== undefined) {
    output.writeFieldBegin('serviceId', Thrift.Type.STRING, 3);
    output.writeString(this.serviceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeleteMessageResponse = function(args) {
};
DeleteMessageResponse.prototype = {};
DeleteMessageResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteMessageResponse.prototype.write = function(output) {
  output.writeStructBegin('DeleteMessageResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeleteAllMessagesRequest = function(args) {
  this.developerToken = null;
  this.serviceId = null;
  if (args) {
    if (args.developerToken !== undefined && args.developerToken !== null) {
      this.developerToken = new DeveloperToken(args.developerToken);
    }
    if (args.serviceId !== undefined && args.serviceId !== null) {
      this.serviceId = args.serviceId;
    }
  }
};
DeleteAllMessagesRequest.prototype = {};
DeleteAllMessagesRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.developerToken = new DeveloperToken();
        this.developerToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serviceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteAllMessagesRequest.prototype.write = function(output) {
  output.writeStructBegin('DeleteAllMessagesRequest');
  if (this.developerToken !== null && this.developerToken !== undefined) {
    output.writeFieldBegin('developerToken', Thrift.Type.STRUCT, 1);
    this.developerToken.write(output);
    output.writeFieldEnd();
  }
  if (this.serviceId !== null && this.serviceId !== undefined) {
    output.writeFieldBegin('serviceId', Thrift.Type.STRING, 2);
    output.writeString(this.serviceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HideMessageRequest = function(args) {
  this.developerToken = null;
  this.messageId = null;
  this.serviceId = null;
  if (args) {
    if (args.developerToken !== undefined && args.developerToken !== null) {
      this.developerToken = new DeveloperToken(args.developerToken);
    }
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
    if (args.serviceId !== undefined && args.serviceId !== null) {
      this.serviceId = args.serviceId;
    }
  }
};
HideMessageRequest.prototype = {};
HideMessageRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.developerToken = new DeveloperToken();
        this.developerToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.serviceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HideMessageRequest.prototype.write = function(output) {
  output.writeStructBegin('HideMessageRequest');
  if (this.developerToken !== null && this.developerToken !== undefined) {
    output.writeFieldBegin('developerToken', Thrift.Type.STRUCT, 1);
    this.developerToken.write(output);
    output.writeFieldEnd();
  }
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 2);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.serviceId !== null && this.serviceId !== undefined) {
    output.writeFieldBegin('serviceId', Thrift.Type.STRING, 3);
    output.writeString(this.serviceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HideMessageResponse = function(args) {
};
HideMessageResponse.prototype = {};
HideMessageResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HideMessageResponse.prototype.write = function(output) {
  output.writeStructBegin('HideMessageResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HideAllMessagesRequest = function(args) {
  this.developerToken = null;
  this.serviceId = null;
  if (args) {
    if (args.developerToken !== undefined && args.developerToken !== null) {
      this.developerToken = new DeveloperToken(args.developerToken);
    }
    if (args.serviceId !== undefined && args.serviceId !== null) {
      this.serviceId = args.serviceId;
    }
  }
};
HideAllMessagesRequest.prototype = {};
HideAllMessagesRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.developerToken = new DeveloperToken();
        this.developerToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serviceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HideAllMessagesRequest.prototype.write = function(output) {
  output.writeStructBegin('HideAllMessagesRequest');
  if (this.developerToken !== null && this.developerToken !== undefined) {
    output.writeFieldBegin('developerToken', Thrift.Type.STRUCT, 1);
    this.developerToken.write(output);
    output.writeFieldEnd();
  }
  if (this.serviceId !== null && this.serviceId !== undefined) {
    output.writeFieldBegin('serviceId', Thrift.Type.STRING, 2);
    output.writeString(this.serviceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HideAllMessagesResponse = function(args) {
};
HideAllMessagesResponse.prototype = {};
HideAllMessagesResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HideAllMessagesResponse.prototype.write = function(output) {
  output.writeStructBegin('HideAllMessagesResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SendMessageRequest = function(args) {
  this.serviceToken = null;
  this.message = null;
  this.urgency = 2;
  if (args) {
    if (args.serviceToken !== undefined && args.serviceToken !== null) {
      this.serviceToken = new ServiceToken(args.serviceToken);
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.urgency !== undefined && args.urgency !== null) {
      this.urgency = args.urgency;
    }
  }
};
SendMessageRequest.prototype = {};
SendMessageRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.serviceToken = new ServiceToken();
        this.serviceToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.urgency = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SendMessageRequest.prototype.write = function(output) {
  output.writeStructBegin('SendMessageRequest');
  if (this.serviceToken !== null && this.serviceToken !== undefined) {
    output.writeFieldBegin('serviceToken', Thrift.Type.STRUCT, 1);
    this.serviceToken.write(output);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.urgency !== null && this.urgency !== undefined) {
    output.writeFieldBegin('urgency', Thrift.Type.I32, 3);
    output.writeI32(this.urgency);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SendMessageResponse = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
SendMessageResponse.prototype = {};
SendMessageResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SendMessageResponse.prototype.write = function(output) {
  output.writeStructBegin('SendMessageResponse');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PRODUCTION_ENDPOINT = new TcpEndpoint({
'hostname' : 'banana-service.aroma.tech','port' : 7001});
BETA_ENDPOINT = new TcpEndpoint({
'hostname' : 'banana-service-beta.aroma.tech','port' : 7001});
MAX_ICON_DIMENSION = new Dimension({
'width' : 500,'height' : 500});
MAX_ICON_SIZE_IN_KILOBYTES = 40;
