//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

AromaService_getApiVersion_args = function(args) {
};
AromaService_getApiVersion_args.prototype = {};
AromaService_getApiVersion_args.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                input.skip(ftype);
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_getApiVersion_args.prototype.write = function(output) {
              output.writeStructBegin('AromaService_getApiVersion_args');
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_getApiVersion_result = function(args) {
              this.success = null;
              if (args) {
                            if (args.success !== undefined && args.success !== null) {
                                          this.success = args.success;
                            }
              }
};
AromaService_getApiVersion_result.prototype = {};
AromaService_getApiVersion_result.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 0:
                  if (ftype == Thrift.Type.DOUBLE) {
                    this.success = input.readDouble().value;
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 0:
                    input.skip(ftype);
                    break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_getApiVersion_result.prototype.write = function(output) {
              output.writeStructBegin('AromaService_getApiVersion_result');
              if (this.success !== null && this.success !== undefined) {
                output.writeFieldBegin('success', Thrift.Type.DOUBLE, 0);
                output.writeDouble(this.success);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_deleteMessage_args = function(args) {
              this.request = null;
              if (args) {
                            if (args.request !== undefined && args.request !== null) {
                                          this.request = new DeleteMessageRequest(args.request);
                            }
              }
};
AromaService_deleteMessage_args.prototype = {};
AromaService_deleteMessage_args.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.request = new DeleteMessageRequest();
                    this.request.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 0:
                    input.skip(ftype);
                    break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_deleteMessage_args.prototype.write = function(output) {
              output.writeStructBegin('AromaService_deleteMessage_args');
              if (this.request !== null && this.request !== undefined) {
                output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                this.request.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_deleteMessage_result = function(args) {
              this.success = null;
              this.ex1 = null;
              this.ex2 = null;
              this.ex3 = null;
              this.ex4 = null;
              this.ex5 = null;
              if (args instanceof OperationFailedException) {
                            this.ex1 = args;
                            return;
              }
              if (args instanceof InvalidArgumentException) {
                            this.ex2 = args;
                            return;
              }
              if (args instanceof InvalidTokenException) {
                            this.ex3 = args;
                            return;
              }
              if (args instanceof MessageDoesNotExistException) {
                            this.ex4 = args;
                            return;
              }
              if (args instanceof UnauthorizedException) {
                            this.ex5 = args;
                            return;
              }
              if (args) {
                            if (args.success !== undefined && args.success !== null) {
                                          this.success = new DeleteMessageResponse(args.success);
                            }
                            if (args.ex1 !== undefined && args.ex1 !== null) {
                                          this.ex1 = args.ex1;
                            }
                            if (args.ex2 !== undefined && args.ex2 !== null) {
                                          this.ex2 = args.ex2;
                            }
                            if (args.ex3 !== undefined && args.ex3 !== null) {
                                          this.ex3 = args.ex3;
                            }
                            if (args.ex4 !== undefined && args.ex4 !== null) {
                                          this.ex4 = args.ex4;
                            }
                            if (args.ex5 !== undefined && args.ex5 !== null) {
                                          this.ex5 = args.ex5;
                            }
              }
};
AromaService_deleteMessage_result.prototype = {};
AromaService_deleteMessage_result.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 0:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.success = new DeleteMessageResponse();
                    this.success.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex1 = new OperationFailedException();
                    this.ex1.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 2:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex2 = new InvalidArgumentException();
                    this.ex2.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 3:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex3 = new InvalidTokenException();
                    this.ex3.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 4:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex4 = new MessageDoesNotExistException();
                    this.ex4.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 5:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex5 = new UnauthorizedException();
                    this.ex5.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_deleteMessage_result.prototype.write = function(output) {
              output.writeStructBegin('AromaService_deleteMessage_result');
              if (this.success !== null && this.success !== undefined) {
                output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
              }
              if (this.ex1 !== null && this.ex1 !== undefined) {
                output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                this.ex1.write(output);
                output.writeFieldEnd();
              }
              if (this.ex2 !== null && this.ex2 !== undefined) {
                output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                this.ex2.write(output);
                output.writeFieldEnd();
              }
              if (this.ex3 !== null && this.ex3 !== undefined) {
                output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                this.ex3.write(output);
                output.writeFieldEnd();
              }
              if (this.ex4 !== null && this.ex4 !== undefined) {
                output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                this.ex4.write(output);
                output.writeFieldEnd();
              }
              if (this.ex5 !== null && this.ex5 !== undefined) {
                output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                this.ex5.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_dismissMessage_args = function(args) {
              this.request = null;
              if (args) {
                            if (args.request !== undefined && args.request !== null) {
                                          this.request = new DismissMessageRequest(args.request);
                            }
              }
};
AromaService_dismissMessage_args.prototype = {};
AromaService_dismissMessage_args.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.request = new DismissMessageRequest();
                    this.request.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 0:
                    input.skip(ftype);
                    break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_dismissMessage_args.prototype.write = function(output) {
              output.writeStructBegin('AromaService_dismissMessage_args');
              if (this.request !== null && this.request !== undefined) {
                output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                this.request.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_dismissMessage_result = function(args) {
              this.success = null;
              this.ex1 = null;
              this.ex2 = null;
              this.ex3 = null;
              this.ex4 = null;
              this.ex5 = null;
              if (args instanceof OperationFailedException) {
                            this.ex1 = args;
                            return;
              }
              if (args instanceof InvalidArgumentException) {
                            this.ex2 = args;
                            return;
              }
              if (args instanceof InvalidTokenException) {
                            this.ex3 = args;
                            return;
              }
              if (args instanceof MessageDoesNotExistException) {
                            this.ex4 = args;
                            return;
              }
              if (args instanceof UnauthorizedException) {
                            this.ex5 = args;
                            return;
              }
              if (args) {
                            if (args.success !== undefined && args.success !== null) {
                                          this.success = new DismissMessageResponse(args.success);
                            }
                            if (args.ex1 !== undefined && args.ex1 !== null) {
                                          this.ex1 = args.ex1;
                            }
                            if (args.ex2 !== undefined && args.ex2 !== null) {
                                          this.ex2 = args.ex2;
                            }
                            if (args.ex3 !== undefined && args.ex3 !== null) {
                                          this.ex3 = args.ex3;
                            }
                            if (args.ex4 !== undefined && args.ex4 !== null) {
                                          this.ex4 = args.ex4;
                            }
                            if (args.ex5 !== undefined && args.ex5 !== null) {
                                          this.ex5 = args.ex5;
                            }
              }
};
AromaService_dismissMessage_result.prototype = {};
AromaService_dismissMessage_result.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 0:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.success = new DismissMessageResponse();
                    this.success.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex1 = new OperationFailedException();
                    this.ex1.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 2:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex2 = new InvalidArgumentException();
                    this.ex2.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 3:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex3 = new InvalidTokenException();
                    this.ex3.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 4:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex4 = new MessageDoesNotExistException();
                    this.ex4.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 5:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex5 = new UnauthorizedException();
                    this.ex5.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_dismissMessage_result.prototype.write = function(output) {
              output.writeStructBegin('AromaService_dismissMessage_result');
              if (this.success !== null && this.success !== undefined) {
                output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
              }
              if (this.ex1 !== null && this.ex1 !== undefined) {
                output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                this.ex1.write(output);
                output.writeFieldEnd();
              }
              if (this.ex2 !== null && this.ex2 !== undefined) {
                output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                this.ex2.write(output);
                output.writeFieldEnd();
              }
              if (this.ex3 !== null && this.ex3 !== undefined) {
                output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                this.ex3.write(output);
                output.writeFieldEnd();
              }
              if (this.ex4 !== null && this.ex4 !== undefined) {
                output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                this.ex4.write(output);
                output.writeFieldEnd();
              }
              if (this.ex5 !== null && this.ex5 !== undefined) {
                output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                this.ex5.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_provisionApplication_args = function(args) {
              this.request = null;
              if (args) {
                            if (args.request !== undefined && args.request !== null) {
                                          this.request = new ProvisionApplicationRequest(args.request);
                            }
              }
};
AromaService_provisionApplication_args.prototype = {};
AromaService_provisionApplication_args.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.request = new ProvisionApplicationRequest();
                    this.request.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 0:
                    input.skip(ftype);
                    break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_provisionApplication_args.prototype.write = function(output) {
              output.writeStructBegin('AromaService_provisionApplication_args');
              if (this.request !== null && this.request !== undefined) {
                output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                this.request.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_provisionApplication_result = function(args) {
              this.success = null;
              this.ex1 = null;
              this.ex2 = null;
              this.ex3 = null;
              this.ex4 = null;
              this.ex5 = null;
              if (args instanceof OperationFailedException) {
                            this.ex1 = args;
                            return;
              }
              if (args instanceof InvalidArgumentException) {
                            this.ex2 = args;
                            return;
              }
              if (args instanceof InvalidTokenException) {
                            this.ex3 = args;
                            return;
              }
              if (args instanceof ApplicationDoesNotExistException) {
                            this.ex4 = args;
                            return;
              }
              if (args instanceof UnauthorizedException) {
                            this.ex5 = args;
                            return;
              }
              if (args) {
                            if (args.success !== undefined && args.success !== null) {
                                          this.success = new ProvisionApplicationResponse(args.success);
                            }
                            if (args.ex1 !== undefined && args.ex1 !== null) {
                                          this.ex1 = args.ex1;
                            }
                            if (args.ex2 !== undefined && args.ex2 !== null) {
                                          this.ex2 = args.ex2;
                            }
                            if (args.ex3 !== undefined && args.ex3 !== null) {
                                          this.ex3 = args.ex3;
                            }
                            if (args.ex4 !== undefined && args.ex4 !== null) {
                                          this.ex4 = args.ex4;
                            }
                            if (args.ex5 !== undefined && args.ex5 !== null) {
                                          this.ex5 = args.ex5;
                            }
              }
};
AromaService_provisionApplication_result.prototype = {};
AromaService_provisionApplication_result.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 0:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.success = new ProvisionApplicationResponse();
                    this.success.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex1 = new OperationFailedException();
                    this.ex1.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 2:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex2 = new InvalidArgumentException();
                    this.ex2.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 3:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex3 = new InvalidTokenException();
                    this.ex3.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 4:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex4 = new ApplicationDoesNotExistException();
                    this.ex4.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 5:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex5 = new UnauthorizedException();
                    this.ex5.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_provisionApplication_result.prototype.write = function(output) {
              output.writeStructBegin('AromaService_provisionApplication_result');
              if (this.success !== null && this.success !== undefined) {
                output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
              }
              if (this.ex1 !== null && this.ex1 !== undefined) {
                output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                this.ex1.write(output);
                output.writeFieldEnd();
              }
              if (this.ex2 !== null && this.ex2 !== undefined) {
                output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                this.ex2.write(output);
                output.writeFieldEnd();
              }
              if (this.ex3 !== null && this.ex3 !== undefined) {
                output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                this.ex3.write(output);
                output.writeFieldEnd();
              }
              if (this.ex4 !== null && this.ex4 !== undefined) {
                output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                this.ex4.write(output);
                output.writeFieldEnd();
              }
              if (this.ex5 !== null && this.ex5 !== undefined) {
                output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                this.ex5.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_regenerateToken_args = function(args) {
              this.request = null;
              if (args) {
                            if (args.request !== undefined && args.request !== null) {
                                          this.request = new RegenerateApplicationTokenRequest(args.request);
                            }
              }
};
AromaService_regenerateToken_args.prototype = {};
AromaService_regenerateToken_args.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.request = new RegenerateApplicationTokenRequest();
                    this.request.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 0:
                    input.skip(ftype);
                    break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_regenerateToken_args.prototype.write = function(output) {
              output.writeStructBegin('AromaService_regenerateToken_args');
              if (this.request !== null && this.request !== undefined) {
                output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                this.request.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_regenerateToken_result = function(args) {
              this.success = null;
              this.ex1 = null;
              this.ex2 = null;
              this.ex3 = null;
              this.ex4 = null;
              this.ex5 = null;
              if (args instanceof OperationFailedException) {
                            this.ex1 = args;
                            return;
              }
              if (args instanceof InvalidArgumentException) {
                            this.ex2 = args;
                            return;
              }
              if (args instanceof InvalidTokenException) {
                            this.ex3 = args;
                            return;
              }
              if (args instanceof ApplicationDoesNotExistException) {
                            this.ex4 = args;
                            return;
              }
              if (args instanceof UnauthorizedException) {
                            this.ex5 = args;
                            return;
              }
              if (args) {
                            if (args.success !== undefined && args.success !== null) {
                                          this.success = new RegenerateApplicationTokenResponse(args.success);
                            }
                            if (args.ex1 !== undefined && args.ex1 !== null) {
                                          this.ex1 = args.ex1;
                            }
                            if (args.ex2 !== undefined && args.ex2 !== null) {
                                          this.ex2 = args.ex2;
                            }
                            if (args.ex3 !== undefined && args.ex3 !== null) {
                                          this.ex3 = args.ex3;
                            }
                            if (args.ex4 !== undefined && args.ex4 !== null) {
                                          this.ex4 = args.ex4;
                            }
                            if (args.ex5 !== undefined && args.ex5 !== null) {
                                          this.ex5 = args.ex5;
                            }
              }
};
AromaService_regenerateToken_result.prototype = {};
AromaService_regenerateToken_result.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 0:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.success = new RegenerateApplicationTokenResponse();
                    this.success.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex1 = new OperationFailedException();
                    this.ex1.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 2:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex2 = new InvalidArgumentException();
                    this.ex2.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 3:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex3 = new InvalidTokenException();
                    this.ex3.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 4:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex4 = new ApplicationDoesNotExistException();
                    this.ex4.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 5:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex5 = new UnauthorizedException();
                    this.ex5.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_regenerateToken_result.prototype.write = function(output) {
              output.writeStructBegin('AromaService_regenerateToken_result');
              if (this.success !== null && this.success !== undefined) {
                output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
              }
              if (this.ex1 !== null && this.ex1 !== undefined) {
                output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                this.ex1.write(output);
                output.writeFieldEnd();
              }
              if (this.ex2 !== null && this.ex2 !== undefined) {
                output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                this.ex2.write(output);
                output.writeFieldEnd();
              }
              if (this.ex3 !== null && this.ex3 !== undefined) {
                output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                this.ex3.write(output);
                output.writeFieldEnd();
              }
              if (this.ex4 !== null && this.ex4 !== undefined) {
                output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                this.ex4.write(output);
                output.writeFieldEnd();
              }
              if (this.ex5 !== null && this.ex5 !== undefined) {
                output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                this.ex5.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_registerHealthCheck_args = function(args) {
              this.request = null;
              if (args) {
                            if (args.request !== undefined && args.request !== null) {
                                          this.request = new RegisterHealthCheckRequest(args.request);
                            }
              }
};
AromaService_registerHealthCheck_args.prototype = {};
AromaService_registerHealthCheck_args.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.request = new RegisterHealthCheckRequest();
                    this.request.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 0:
                    input.skip(ftype);
                    break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_registerHealthCheck_args.prototype.write = function(output) {
              output.writeStructBegin('AromaService_registerHealthCheck_args');
              if (this.request !== null && this.request !== undefined) {
                output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                this.request.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_registerHealthCheck_result = function(args) {
              this.success = null;
              this.ex1 = null;
              this.ex2 = null;
              this.ex3 = null;
              this.ex4 = null;
              this.ex5 = null;
              if (args instanceof OperationFailedException) {
                            this.ex1 = args;
                            return;
              }
              if (args instanceof InvalidArgumentException) {
                            this.ex2 = args;
                            return;
              }
              if (args instanceof InvalidTokenException) {
                            this.ex3 = args;
                            return;
              }
              if (args instanceof ApplicationDoesNotExistException) {
                            this.ex4 = args;
                            return;
              }
              if (args instanceof UnauthorizedException) {
                            this.ex5 = args;
                            return;
              }
              if (args) {
                            if (args.success !== undefined && args.success !== null) {
                                          this.success = new RegisterHealthCheckResponse(args.success);
                            }
                            if (args.ex1 !== undefined && args.ex1 !== null) {
                                          this.ex1 = args.ex1;
                            }
                            if (args.ex2 !== undefined && args.ex2 !== null) {
                                          this.ex2 = args.ex2;
                            }
                            if (args.ex3 !== undefined && args.ex3 !== null) {
                                          this.ex3 = args.ex3;
                            }
                            if (args.ex4 !== undefined && args.ex4 !== null) {
                                          this.ex4 = args.ex4;
                            }
                            if (args.ex5 !== undefined && args.ex5 !== null) {
                                          this.ex5 = args.ex5;
                            }
              }
};
AromaService_registerHealthCheck_result.prototype = {};
AromaService_registerHealthCheck_result.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 0:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.success = new RegisterHealthCheckResponse();
                    this.success.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex1 = new OperationFailedException();
                    this.ex1.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 2:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex2 = new InvalidArgumentException();
                    this.ex2.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 3:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex3 = new InvalidTokenException();
                    this.ex3.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 4:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex4 = new ApplicationDoesNotExistException();
                    this.ex4.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 5:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex5 = new UnauthorizedException();
                    this.ex5.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_registerHealthCheck_result.prototype.write = function(output) {
              output.writeStructBegin('AromaService_registerHealthCheck_result');
              if (this.success !== null && this.success !== undefined) {
                output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
              }
              if (this.ex1 !== null && this.ex1 !== undefined) {
                output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                this.ex1.write(output);
                output.writeFieldEnd();
              }
              if (this.ex2 !== null && this.ex2 !== undefined) {
                output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                this.ex2.write(output);
                output.writeFieldEnd();
              }
              if (this.ex3 !== null && this.ex3 !== undefined) {
                output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                this.ex3.write(output);
                output.writeFieldEnd();
              }
              if (this.ex4 !== null && this.ex4 !== undefined) {
                output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                this.ex4.write(output);
                output.writeFieldEnd();
              }
              if (this.ex5 !== null && this.ex5 !== undefined) {
                output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                this.ex5.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_removeSavedChannel_args = function(args) {
              this.request = null;
              if (args) {
                            if (args.request !== undefined && args.request !== null) {
                                          this.request = new RemoveSavedChannelRequest(args.request);
                            }
              }
};
AromaService_removeSavedChannel_args.prototype = {};
AromaService_removeSavedChannel_args.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.request = new RemoveSavedChannelRequest();
                    this.request.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 0:
                    input.skip(ftype);
                    break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_removeSavedChannel_args.prototype.write = function(output) {
              output.writeStructBegin('AromaService_removeSavedChannel_args');
              if (this.request !== null && this.request !== undefined) {
                output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                this.request.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_removeSavedChannel_result = function(args) {
              this.success = null;
              this.ex1 = null;
              this.ex2 = null;
              this.ex3 = null;
              this.ex4 = null;
              this.ex5 = null;
              if (args instanceof OperationFailedException) {
                            this.ex1 = args;
                            return;
              }
              if (args instanceof InvalidArgumentException) {
                            this.ex2 = args;
                            return;
              }
              if (args instanceof InvalidTokenException) {
                            this.ex3 = args;
                            return;
              }
              if (args instanceof UnauthorizedException) {
                            this.ex4 = args;
                            return;
              }
              if (args instanceof ChannelDoesNotExistException) {
                            this.ex5 = args;
                            return;
              }
              if (args) {
                            if (args.success !== undefined && args.success !== null) {
                                          this.success = new RemoveSavedChannelResponse(args.success);
                            }
                            if (args.ex1 !== undefined && args.ex1 !== null) {
                                          this.ex1 = args.ex1;
                            }
                            if (args.ex2 !== undefined && args.ex2 !== null) {
                                          this.ex2 = args.ex2;
                            }
                            if (args.ex3 !== undefined && args.ex3 !== null) {
                                          this.ex3 = args.ex3;
                            }
                            if (args.ex4 !== undefined && args.ex4 !== null) {
                                          this.ex4 = args.ex4;
                            }
                            if (args.ex5 !== undefined && args.ex5 !== null) {
                                          this.ex5 = args.ex5;
                            }
              }
};
AromaService_removeSavedChannel_result.prototype = {};
AromaService_removeSavedChannel_result.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 0:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.success = new RemoveSavedChannelResponse();
                    this.success.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex1 = new OperationFailedException();
                    this.ex1.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 2:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex2 = new InvalidArgumentException();
                    this.ex2.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 3:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex3 = new InvalidTokenException();
                    this.ex3.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 4:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex4 = new UnauthorizedException();
                    this.ex4.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 5:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex5 = new ChannelDoesNotExistException();
                    this.ex5.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_removeSavedChannel_result.prototype.write = function(output) {
              output.writeStructBegin('AromaService_removeSavedChannel_result');
              if (this.success !== null && this.success !== undefined) {
                output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
              }
              if (this.ex1 !== null && this.ex1 !== undefined) {
                output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                this.ex1.write(output);
                output.writeFieldEnd();
              }
              if (this.ex2 !== null && this.ex2 !== undefined) {
                output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                this.ex2.write(output);
                output.writeFieldEnd();
              }
              if (this.ex3 !== null && this.ex3 !== undefined) {
                output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                this.ex3.write(output);
                output.writeFieldEnd();
              }
              if (this.ex4 !== null && this.ex4 !== undefined) {
                output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                this.ex4.write(output);
                output.writeFieldEnd();
              }
              if (this.ex5 !== null && this.ex5 !== undefined) {
                output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                this.ex5.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_renewApplicationToken_args = function(args) {
              this.request = null;
              if (args) {
                            if (args.request !== undefined && args.request !== null) {
                                          this.request = new RenewApplicationTokenRequest(args.request);
                            }
              }
};
AromaService_renewApplicationToken_args.prototype = {};
AromaService_renewApplicationToken_args.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.request = new RenewApplicationTokenRequest();
                    this.request.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 0:
                    input.skip(ftype);
                    break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_renewApplicationToken_args.prototype.write = function(output) {
              output.writeStructBegin('AromaService_renewApplicationToken_args');
              if (this.request !== null && this.request !== undefined) {
                output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                this.request.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_renewApplicationToken_result = function(args) {
              this.success = null;
              this.ex1 = null;
              this.ex2 = null;
              this.ex3 = null;
              this.ex4 = null;
              this.ex5 = null;
              if (args instanceof OperationFailedException) {
                            this.ex1 = args;
                            return;
              }
              if (args instanceof InvalidArgumentException) {
                            this.ex2 = args;
                            return;
              }
              if (args instanceof InvalidTokenException) {
                            this.ex3 = args;
                            return;
              }
              if (args instanceof ApplicationDoesNotExistException) {
                            this.ex4 = args;
                            return;
              }
              if (args instanceof UnauthorizedException) {
                            this.ex5 = args;
                            return;
              }
              if (args) {
                            if (args.success !== undefined && args.success !== null) {
                                          this.success = new RenewApplicationTokenResponse(args.success);
                            }
                            if (args.ex1 !== undefined && args.ex1 !== null) {
                                          this.ex1 = args.ex1;
                            }
                            if (args.ex2 !== undefined && args.ex2 !== null) {
                                          this.ex2 = args.ex2;
                            }
                            if (args.ex3 !== undefined && args.ex3 !== null) {
                                          this.ex3 = args.ex3;
                            }
                            if (args.ex4 !== undefined && args.ex4 !== null) {
                                          this.ex4 = args.ex4;
                            }
                            if (args.ex5 !== undefined && args.ex5 !== null) {
                                          this.ex5 = args.ex5;
                            }
              }
};
AromaService_renewApplicationToken_result.prototype = {};
AromaService_renewApplicationToken_result.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 0:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.success = new RenewApplicationTokenResponse();
                    this.success.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex1 = new OperationFailedException();
                    this.ex1.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 2:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex2 = new InvalidArgumentException();
                    this.ex2.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 3:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex3 = new InvalidTokenException();
                    this.ex3.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 4:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex4 = new ApplicationDoesNotExistException();
                    this.ex4.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 5:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex5 = new UnauthorizedException();
                    this.ex5.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_renewApplicationToken_result.prototype.write = function(output) {
              output.writeStructBegin('AromaService_renewApplicationToken_result');
              if (this.success !== null && this.success !== undefined) {
                output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
              }
              if (this.ex1 !== null && this.ex1 !== undefined) {
                output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                this.ex1.write(output);
                output.writeFieldEnd();
              }
              if (this.ex2 !== null && this.ex2 !== undefined) {
                output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                this.ex2.write(output);
                output.writeFieldEnd();
              }
              if (this.ex3 !== null && this.ex3 !== undefined) {
                output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                this.ex3.write(output);
                output.writeFieldEnd();
              }
              if (this.ex4 !== null && this.ex4 !== undefined) {
                output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                this.ex4.write(output);
                output.writeFieldEnd();
              }
              if (this.ex5 !== null && this.ex5 !== undefined) {
                output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                this.ex5.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_saveChannel_args = function(args) {
              this.request = null;
              if (args) {
                            if (args.request !== undefined && args.request !== null) {
                                          this.request = new SaveChannelRequest(args.request);
                            }
              }
};
AromaService_saveChannel_args.prototype = {};
AromaService_saveChannel_args.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.request = new SaveChannelRequest();
                    this.request.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 0:
                    input.skip(ftype);
                    break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_saveChannel_args.prototype.write = function(output) {
              output.writeStructBegin('AromaService_saveChannel_args');
              if (this.request !== null && this.request !== undefined) {
                output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                this.request.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_saveChannel_result = function(args) {
              this.success = null;
              this.ex1 = null;
              this.ex2 = null;
              this.ex3 = null;
              this.ex4 = null;
              if (args instanceof OperationFailedException) {
                            this.ex1 = args;
                            return;
              }
              if (args instanceof InvalidArgumentException) {
                            this.ex2 = args;
                            return;
              }
              if (args instanceof InvalidTokenException) {
                            this.ex3 = args;
                            return;
              }
              if (args instanceof UnauthorizedException) {
                            this.ex4 = args;
                            return;
              }
              if (args) {
                            if (args.success !== undefined && args.success !== null) {
                                          this.success = new SaveChannelResponse(args.success);
                            }
                            if (args.ex1 !== undefined && args.ex1 !== null) {
                                          this.ex1 = args.ex1;
                            }
                            if (args.ex2 !== undefined && args.ex2 !== null) {
                                          this.ex2 = args.ex2;
                            }
                            if (args.ex3 !== undefined && args.ex3 !== null) {
                                          this.ex3 = args.ex3;
                            }
                            if (args.ex4 !== undefined && args.ex4 !== null) {
                                          this.ex4 = args.ex4;
                            }
              }
};
AromaService_saveChannel_result.prototype = {};
AromaService_saveChannel_result.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 0:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.success = new SaveChannelResponse();
                    this.success.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex1 = new OperationFailedException();
                    this.ex1.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 2:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex2 = new InvalidArgumentException();
                    this.ex2.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 3:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex3 = new InvalidTokenException();
                    this.ex3.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 4:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex4 = new UnauthorizedException();
                    this.ex4.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_saveChannel_result.prototype.write = function(output) {
              output.writeStructBegin('AromaService_saveChannel_result');
              if (this.success !== null && this.success !== undefined) {
                output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
              }
              if (this.ex1 !== null && this.ex1 !== undefined) {
                output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                this.ex1.write(output);
                output.writeFieldEnd();
              }
              if (this.ex2 !== null && this.ex2 !== undefined) {
                output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                this.ex2.write(output);
                output.writeFieldEnd();
              }
              if (this.ex3 !== null && this.ex3 !== undefined) {
                output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                this.ex3.write(output);
                output.writeFieldEnd();
              }
              if (this.ex4 !== null && this.ex4 !== undefined) {
                output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                this.ex4.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_signIn_args = function(args) {
              this.request = null;
              if (args) {
                            if (args.request !== undefined && args.request !== null) {
                                          this.request = new SignInRequest(args.request);
                            }
              }
};
AromaService_signIn_args.prototype = {};
AromaService_signIn_args.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.request = new SignInRequest();
                    this.request.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 0:
                    input.skip(ftype);
                    break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_signIn_args.prototype.write = function(output) {
              output.writeStructBegin('AromaService_signIn_args');
              if (this.request !== null && this.request !== undefined) {
                output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                this.request.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_signIn_result = function(args) {
              this.success = null;
              this.ex1 = null;
              this.ex2 = null;
              this.ex3 = null;
              this.ex4 = null;
              if (args instanceof OperationFailedException) {
                            this.ex1 = args;
                            return;
              }
              if (args instanceof InvalidArgumentException) {
                            this.ex2 = args;
                            return;
              }
              if (args instanceof InvalidCredentialsException) {
                            this.ex3 = args;
                            return;
              }
              if (args instanceof UserDoesNotExistException) {
                            this.ex4 = args;
                            return;
              }
              if (args) {
                            if (args.success !== undefined && args.success !== null) {
                                          this.success = new SignInResponse(args.success);
                            }
                            if (args.ex1 !== undefined && args.ex1 !== null) {
                                          this.ex1 = args.ex1;
                            }
                            if (args.ex2 !== undefined && args.ex2 !== null) {
                                          this.ex2 = args.ex2;
                            }
                            if (args.ex3 !== undefined && args.ex3 !== null) {
                                          this.ex3 = args.ex3;
                            }
                            if (args.ex4 !== undefined && args.ex4 !== null) {
                                          this.ex4 = args.ex4;
                            }
              }
};
AromaService_signIn_result.prototype = {};
AromaService_signIn_result.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 0:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.success = new SignInResponse();
                    this.success.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex1 = new OperationFailedException();
                    this.ex1.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 2:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex2 = new InvalidArgumentException();
                    this.ex2.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 3:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex3 = new InvalidCredentialsException();
                    this.ex3.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 4:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex4 = new UserDoesNotExistException();
                    this.ex4.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_signIn_result.prototype.write = function(output) {
              output.writeStructBegin('AromaService_signIn_result');
              if (this.success !== null && this.success !== undefined) {
                output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
              }
              if (this.ex1 !== null && this.ex1 !== undefined) {
                output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                this.ex1.write(output);
                output.writeFieldEnd();
              }
              if (this.ex2 !== null && this.ex2 !== undefined) {
                output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                this.ex2.write(output);
                output.writeFieldEnd();
              }
              if (this.ex3 !== null && this.ex3 !== undefined) {
                output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                this.ex3.write(output);
                output.writeFieldEnd();
              }
              if (this.ex4 !== null && this.ex4 !== undefined) {
                output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                this.ex4.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_signUp_args = function(args) {
              this.request = null;
              if (args) {
                            if (args.request !== undefined && args.request !== null) {
                                          this.request = new SignUpRequest(args.request);
                            }
              }
};
AromaService_signUp_args.prototype = {};
AromaService_signUp_args.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.request = new SignUpRequest();
                    this.request.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 0:
                    input.skip(ftype);
                    break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_signUp_args.prototype.write = function(output) {
              output.writeStructBegin('AromaService_signUp_args');
              if (this.request !== null && this.request !== undefined) {
                output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                this.request.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_signUp_result = function(args) {
              this.success = null;
              this.ex1 = null;
              this.ex2 = null;
              this.ex3 = null;
              this.ex4 = null;
              if (args instanceof OperationFailedException) {
                            this.ex1 = args;
                            return;
              }
              if (args instanceof InvalidArgumentException) {
                            this.ex2 = args;
                            return;
              }
              if (args instanceof InvalidCredentialsException) {
                            this.ex3 = args;
                            return;
              }
              if (args instanceof AccountAlreadyExistsException) {
                            this.ex4 = args;
                            return;
              }
              if (args) {
                            if (args.success !== undefined && args.success !== null) {
                                          this.success = new SignUpResponse(args.success);
                            }
                            if (args.ex1 !== undefined && args.ex1 !== null) {
                                          this.ex1 = args.ex1;
                            }
                            if (args.ex2 !== undefined && args.ex2 !== null) {
                                          this.ex2 = args.ex2;
                            }
                            if (args.ex3 !== undefined && args.ex3 !== null) {
                                          this.ex3 = args.ex3;
                            }
                            if (args.ex4 !== undefined && args.ex4 !== null) {
                                          this.ex4 = args.ex4;
                            }
              }
};
AromaService_signUp_result.prototype = {};
AromaService_signUp_result.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 0:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.success = new SignUpResponse();
                    this.success.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex1 = new OperationFailedException();
                    this.ex1.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 2:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex2 = new InvalidArgumentException();
                    this.ex2.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 3:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex3 = new InvalidCredentialsException();
                    this.ex3.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 4:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex4 = new AccountAlreadyExistsException();
                    this.ex4.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_signUp_result.prototype.write = function(output) {
              output.writeStructBegin('AromaService_signUp_result');
              if (this.success !== null && this.success !== undefined) {
                output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
              }
              if (this.ex1 !== null && this.ex1 !== undefined) {
                output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                this.ex1.write(output);
                output.writeFieldEnd();
              }
              if (this.ex2 !== null && this.ex2 !== undefined) {
                output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                this.ex2.write(output);
                output.writeFieldEnd();
              }
              if (this.ex3 !== null && this.ex3 !== undefined) {
                output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                this.ex3.write(output);
                output.writeFieldEnd();
              }
              if (this.ex4 !== null && this.ex4 !== undefined) {
                output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                this.ex4.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_snoozeChannel_args = function(args) {
              this.request = null;
              if (args) {
                            if (args.request !== undefined && args.request !== null) {
                                          this.request = new SnoozeChannelRequest(args.request);
                            }
              }
};
AromaService_snoozeChannel_args.prototype = {};
AromaService_snoozeChannel_args.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.request = new SnoozeChannelRequest();
                    this.request.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 0:
                    input.skip(ftype);
                    break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_snoozeChannel_args.prototype.write = function(output) {
              output.writeStructBegin('AromaService_snoozeChannel_args');
              if (this.request !== null && this.request !== undefined) {
                output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                this.request.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_snoozeChannel_result = function(args) {
              this.success = null;
              this.ex1 = null;
              this.ex2 = null;
              this.ex3 = null;
              this.ex4 = null;
              this.ex5 = null;
              if (args instanceof OperationFailedException) {
                            this.ex1 = args;
                            return;
              }
              if (args instanceof InvalidArgumentException) {
                            this.ex2 = args;
                            return;
              }
              if (args instanceof InvalidTokenException) {
                            this.ex3 = args;
                            return;
              }
              if (args instanceof UnauthorizedException) {
                            this.ex4 = args;
                            return;
              }
              if (args instanceof ChannelDoesNotExistException) {
                            this.ex5 = args;
                            return;
              }
              if (args) {
                            if (args.success !== undefined && args.success !== null) {
                                          this.success = new SnoozeChannelResponse(args.success);
                            }
                            if (args.ex1 !== undefined && args.ex1 !== null) {
                                          this.ex1 = args.ex1;
                            }
                            if (args.ex2 !== undefined && args.ex2 !== null) {
                                          this.ex2 = args.ex2;
                            }
                            if (args.ex3 !== undefined && args.ex3 !== null) {
                                          this.ex3 = args.ex3;
                            }
                            if (args.ex4 !== undefined && args.ex4 !== null) {
                                          this.ex4 = args.ex4;
                            }
                            if (args.ex5 !== undefined && args.ex5 !== null) {
                                          this.ex5 = args.ex5;
                            }
              }
};
AromaService_snoozeChannel_result.prototype = {};
AromaService_snoozeChannel_result.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 0:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.success = new SnoozeChannelResponse();
                    this.success.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex1 = new OperationFailedException();
                    this.ex1.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 2:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex2 = new InvalidArgumentException();
                    this.ex2.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 3:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex3 = new InvalidTokenException();
                    this.ex3.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 4:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex4 = new UnauthorizedException();
                    this.ex4.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 5:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex5 = new ChannelDoesNotExistException();
                    this.ex5.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_snoozeChannel_result.prototype.write = function(output) {
              output.writeStructBegin('AromaService_snoozeChannel_result');
              if (this.success !== null && this.success !== undefined) {
                output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
              }
              if (this.ex1 !== null && this.ex1 !== undefined) {
                output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                this.ex1.write(output);
                output.writeFieldEnd();
              }
              if (this.ex2 !== null && this.ex2 !== undefined) {
                output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                this.ex2.write(output);
                output.writeFieldEnd();
              }
              if (this.ex3 !== null && this.ex3 !== undefined) {
                output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                this.ex3.write(output);
                output.writeFieldEnd();
              }
              if (this.ex4 !== null && this.ex4 !== undefined) {
                output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                this.ex4.write(output);
                output.writeFieldEnd();
              }
              if (this.ex5 !== null && this.ex5 !== undefined) {
                output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                this.ex5.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_followApplication_args = function(args) {
              this.request = null;
              if (args) {
                            if (args.request !== undefined && args.request !== null) {
                                          this.request = new FollowApplicationRequest(args.request);
                            }
              }
};
AromaService_followApplication_args.prototype = {};
AromaService_followApplication_args.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.request = new FollowApplicationRequest();
                    this.request.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 0:
                    input.skip(ftype);
                    break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_followApplication_args.prototype.write = function(output) {
              output.writeStructBegin('AromaService_followApplication_args');
              if (this.request !== null && this.request !== undefined) {
                output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                this.request.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_followApplication_result = function(args) {
              this.success = null;
              this.ex1 = null;
              this.ex2 = null;
              this.ex3 = null;
              this.ex4 = null;
              this.ex5 = null;
              if (args instanceof OperationFailedException) {
                            this.ex1 = args;
                            return;
              }
              if (args instanceof InvalidArgumentException) {
                            this.ex2 = args;
                            return;
              }
              if (args instanceof InvalidTokenException) {
                            this.ex3 = args;
                            return;
              }
              if (args instanceof ApplicationDoesNotExistException) {
                            this.ex4 = args;
                            return;
              }
              if (args instanceof UnauthorizedException) {
                            this.ex5 = args;
                            return;
              }
              if (args) {
                            if (args.success !== undefined && args.success !== null) {
                                          this.success = new FollowApplicationResponse(args.success);
                            }
                            if (args.ex1 !== undefined && args.ex1 !== null) {
                                          this.ex1 = args.ex1;
                            }
                            if (args.ex2 !== undefined && args.ex2 !== null) {
                                          this.ex2 = args.ex2;
                            }
                            if (args.ex3 !== undefined && args.ex3 !== null) {
                                          this.ex3 = args.ex3;
                            }
                            if (args.ex4 !== undefined && args.ex4 !== null) {
                                          this.ex4 = args.ex4;
                            }
                            if (args.ex5 !== undefined && args.ex5 !== null) {
                                          this.ex5 = args.ex5;
                            }
              }
};
AromaService_followApplication_result.prototype = {};
AromaService_followApplication_result.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 0:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.success = new FollowApplicationResponse();
                    this.success.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex1 = new OperationFailedException();
                    this.ex1.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 2:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex2 = new InvalidArgumentException();
                    this.ex2.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 3:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex3 = new InvalidTokenException();
                    this.ex3.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 4:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex4 = new ApplicationDoesNotExistException();
                    this.ex4.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 5:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex5 = new UnauthorizedException();
                    this.ex5.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_followApplication_result.prototype.write = function(output) {
              output.writeStructBegin('AromaService_followApplication_result');
              if (this.success !== null && this.success !== undefined) {
                output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
              }
              if (this.ex1 !== null && this.ex1 !== undefined) {
                output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                this.ex1.write(output);
                output.writeFieldEnd();
              }
              if (this.ex2 !== null && this.ex2 !== undefined) {
                output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                this.ex2.write(output);
                output.writeFieldEnd();
              }
              if (this.ex3 !== null && this.ex3 !== undefined) {
                output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                this.ex3.write(output);
                output.writeFieldEnd();
              }
              if (this.ex4 !== null && this.ex4 !== undefined) {
                output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                this.ex4.write(output);
                output.writeFieldEnd();
              }
              if (this.ex5 !== null && this.ex5 !== undefined) {
                output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                this.ex5.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_unfollowApplication_args = function(args) {
              this.request = null;
              if (args) {
                            if (args.request !== undefined && args.request !== null) {
                                          this.request = new UnfollowApplicationRequest(args.request);
                            }
              }
};
AromaService_unfollowApplication_args.prototype = {};
AromaService_unfollowApplication_args.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.request = new UnfollowApplicationRequest();
                    this.request.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 0:
                    input.skip(ftype);
                    break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_unfollowApplication_args.prototype.write = function(output) {
              output.writeStructBegin('AromaService_unfollowApplication_args');
              if (this.request !== null && this.request !== undefined) {
                output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                this.request.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_unfollowApplication_result = function(args) {
              this.success = null;
              this.ex1 = null;
              this.ex2 = null;
              this.ex3 = null;
              this.ex4 = null;
              this.ex5 = null;
              if (args instanceof OperationFailedException) {
                            this.ex1 = args;
                            return;
              }
              if (args instanceof InvalidArgumentException) {
                            this.ex2 = args;
                            return;
              }
              if (args instanceof InvalidTokenException) {
                            this.ex3 = args;
                            return;
              }
              if (args instanceof ApplicationDoesNotExistException) {
                            this.ex4 = args;
                            return;
              }
              if (args instanceof UnauthorizedException) {
                            this.ex5 = args;
                            return;
              }
              if (args) {
                            if (args.success !== undefined && args.success !== null) {
                                          this.success = new UnfollowApplicationResponse(args.success);
                            }
                            if (args.ex1 !== undefined && args.ex1 !== null) {
                                          this.ex1 = args.ex1;
                            }
                            if (args.ex2 !== undefined && args.ex2 !== null) {
                                          this.ex2 = args.ex2;
                            }
                            if (args.ex3 !== undefined && args.ex3 !== null) {
                                          this.ex3 = args.ex3;
                            }
                            if (args.ex4 !== undefined && args.ex4 !== null) {
                                          this.ex4 = args.ex4;
                            }
                            if (args.ex5 !== undefined && args.ex5 !== null) {
                                          this.ex5 = args.ex5;
                            }
              }
};
AromaService_unfollowApplication_result.prototype = {};
AromaService_unfollowApplication_result.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 0:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.success = new UnfollowApplicationResponse();
                    this.success.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex1 = new OperationFailedException();
                    this.ex1.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 2:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex2 = new InvalidArgumentException();
                    this.ex2.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 3:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex3 = new InvalidTokenException();
                    this.ex3.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 4:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex4 = new ApplicationDoesNotExistException();
                    this.ex4.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 5:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex5 = new UnauthorizedException();
                    this.ex5.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_unfollowApplication_result.prototype.write = function(output) {
              output.writeStructBegin('AromaService_unfollowApplication_result');
              if (this.success !== null && this.success !== undefined) {
                output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
              }
              if (this.ex1 !== null && this.ex1 !== undefined) {
                output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                this.ex1.write(output);
                output.writeFieldEnd();
              }
              if (this.ex2 !== null && this.ex2 !== undefined) {
                output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                this.ex2.write(output);
                output.writeFieldEnd();
              }
              if (this.ex3 !== null && this.ex3 !== undefined) {
                output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                this.ex3.write(output);
                output.writeFieldEnd();
              }
              if (this.ex4 !== null && this.ex4 !== undefined) {
                output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                this.ex4.write(output);
                output.writeFieldEnd();
              }
              if (this.ex5 !== null && this.ex5 !== undefined) {
                output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                this.ex5.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_updateApplication_args = function(args) {
              this.request = null;
              if (args) {
                            if (args.request !== undefined && args.request !== null) {
                                          this.request = new UpdateApplicationRequest(args.request);
                            }
              }
};
AromaService_updateApplication_args.prototype = {};
AromaService_updateApplication_args.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.request = new UpdateApplicationRequest();
                    this.request.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 0:
                    input.skip(ftype);
                    break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_updateApplication_args.prototype.write = function(output) {
              output.writeStructBegin('AromaService_updateApplication_args');
              if (this.request !== null && this.request !== undefined) {
                output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                this.request.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_updateApplication_result = function(args) {
              this.success = null;
              this.ex1 = null;
              this.ex2 = null;
              this.ex3 = null;
              this.ex4 = null;
              this.ex5 = null;
              if (args instanceof OperationFailedException) {
                            this.ex1 = args;
                            return;
              }
              if (args instanceof InvalidArgumentException) {
                            this.ex2 = args;
                            return;
              }
              if (args instanceof InvalidTokenException) {
                            this.ex3 = args;
                            return;
              }
              if (args instanceof ApplicationDoesNotExistException) {
                            this.ex4 = args;
                            return;
              }
              if (args instanceof UnauthorizedException) {
                            this.ex5 = args;
                            return;
              }
              if (args) {
                            if (args.success !== undefined && args.success !== null) {
                                          this.success = new UpdateApplicationResponse(args.success);
                            }
                            if (args.ex1 !== undefined && args.ex1 !== null) {
                                          this.ex1 = args.ex1;
                            }
                            if (args.ex2 !== undefined && args.ex2 !== null) {
                                          this.ex2 = args.ex2;
                            }
                            if (args.ex3 !== undefined && args.ex3 !== null) {
                                          this.ex3 = args.ex3;
                            }
                            if (args.ex4 !== undefined && args.ex4 !== null) {
                                          this.ex4 = args.ex4;
                            }
                            if (args.ex5 !== undefined && args.ex5 !== null) {
                                          this.ex5 = args.ex5;
                            }
              }
};
AromaService_updateApplication_result.prototype = {};
AromaService_updateApplication_result.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 0:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.success = new UpdateApplicationResponse();
                    this.success.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex1 = new OperationFailedException();
                    this.ex1.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 2:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex2 = new InvalidArgumentException();
                    this.ex2.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 3:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex3 = new InvalidTokenException();
                    this.ex3.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 4:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex4 = new ApplicationDoesNotExistException();
                    this.ex4.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 5:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex5 = new UnauthorizedException();
                    this.ex5.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_updateApplication_result.prototype.write = function(output) {
              output.writeStructBegin('AromaService_updateApplication_result');
              if (this.success !== null && this.success !== undefined) {
                output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
              }
              if (this.ex1 !== null && this.ex1 !== undefined) {
                output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                this.ex1.write(output);
                output.writeFieldEnd();
              }
              if (this.ex2 !== null && this.ex2 !== undefined) {
                output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                this.ex2.write(output);
                output.writeFieldEnd();
              }
              if (this.ex3 !== null && this.ex3 !== undefined) {
                output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                this.ex3.write(output);
                output.writeFieldEnd();
              }
              if (this.ex4 !== null && this.ex4 !== undefined) {
                output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                this.ex4.write(output);
                output.writeFieldEnd();
              }
              if (this.ex5 !== null && this.ex5 !== undefined) {
                output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                this.ex5.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_getActivity_args = function(args) {
              this.request = null;
              if (args) {
                            if (args.request !== undefined && args.request !== null) {
                                          this.request = new GetActivityRequest(args.request);
                            }
              }
};
AromaService_getActivity_args.prototype = {};
AromaService_getActivity_args.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.request = new GetActivityRequest();
                    this.request.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 0:
                    input.skip(ftype);
                    break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_getActivity_args.prototype.write = function(output) {
              output.writeStructBegin('AromaService_getActivity_args');
              if (this.request !== null && this.request !== undefined) {
                output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                this.request.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_getActivity_result = function(args) {
              this.success = null;
              this.ex1 = null;
              this.ex2 = null;
              this.ex3 = null;
              if (args instanceof OperationFailedException) {
                            this.ex1 = args;
                            return;
              }
              if (args instanceof InvalidArgumentException) {
                            this.ex2 = args;
                            return;
              }
              if (args instanceof InvalidTokenException) {
                            this.ex3 = args;
                            return;
              }
              if (args) {
                            if (args.success !== undefined && args.success !== null) {
                                          this.success = new GetActivityResponse(args.success);
                            }
                            if (args.ex1 !== undefined && args.ex1 !== null) {
                                          this.ex1 = args.ex1;
                            }
                            if (args.ex2 !== undefined && args.ex2 !== null) {
                                          this.ex2 = args.ex2;
                            }
                            if (args.ex3 !== undefined && args.ex3 !== null) {
                                          this.ex3 = args.ex3;
                            }
              }
};
AromaService_getActivity_result.prototype = {};
AromaService_getActivity_result.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 0:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.success = new GetActivityResponse();
                    this.success.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex1 = new OperationFailedException();
                    this.ex1.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 2:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex2 = new InvalidArgumentException();
                    this.ex2.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 3:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex3 = new InvalidTokenException();
                    this.ex3.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_getActivity_result.prototype.write = function(output) {
              output.writeStructBegin('AromaService_getActivity_result');
              if (this.success !== null && this.success !== undefined) {
                output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
              }
              if (this.ex1 !== null && this.ex1 !== undefined) {
                output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                this.ex1.write(output);
                output.writeFieldEnd();
              }
              if (this.ex2 !== null && this.ex2 !== undefined) {
                output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                this.ex2.write(output);
                output.writeFieldEnd();
              }
              if (this.ex3 !== null && this.ex3 !== undefined) {
                output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                this.ex3.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_getApplicationInfo_args = function(args) {
              this.request = null;
              if (args) {
                            if (args.request !== undefined && args.request !== null) {
                                          this.request = new GetApplicationInfoRequest(args.request);
                            }
              }
};
AromaService_getApplicationInfo_args.prototype = {};
AromaService_getApplicationInfo_args.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.request = new GetApplicationInfoRequest();
                    this.request.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 0:
                    input.skip(ftype);
                    break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_getApplicationInfo_args.prototype.write = function(output) {
              output.writeStructBegin('AromaService_getApplicationInfo_args');
              if (this.request !== null && this.request !== undefined) {
                output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                this.request.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_getApplicationInfo_result = function(args) {
              this.success = null;
              this.ex1 = null;
              this.ex2 = null;
              this.ex3 = null;
              this.ex4 = null;
              this.ex5 = null;
              if (args instanceof OperationFailedException) {
                            this.ex1 = args;
                            return;
              }
              if (args instanceof InvalidArgumentException) {
                            this.ex2 = args;
                            return;
              }
              if (args instanceof InvalidTokenException) {
                            this.ex3 = args;
                            return;
              }
              if (args instanceof ApplicationDoesNotExistException) {
                            this.ex4 = args;
                            return;
              }
              if (args instanceof UnauthorizedException) {
                            this.ex5 = args;
                            return;
              }
              if (args) {
                            if (args.success !== undefined && args.success !== null) {
                                          this.success = new GetApplicationInfoResponse(args.success);
                            }
                            if (args.ex1 !== undefined && args.ex1 !== null) {
                                          this.ex1 = args.ex1;
                            }
                            if (args.ex2 !== undefined && args.ex2 !== null) {
                                          this.ex2 = args.ex2;
                            }
                            if (args.ex3 !== undefined && args.ex3 !== null) {
                                          this.ex3 = args.ex3;
                            }
                            if (args.ex4 !== undefined && args.ex4 !== null) {
                                          this.ex4 = args.ex4;
                            }
                            if (args.ex5 !== undefined && args.ex5 !== null) {
                                          this.ex5 = args.ex5;
                            }
              }
};
AromaService_getApplicationInfo_result.prototype = {};
AromaService_getApplicationInfo_result.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 0:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.success = new GetApplicationInfoResponse();
                    this.success.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex1 = new OperationFailedException();
                    this.ex1.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 2:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex2 = new InvalidArgumentException();
                    this.ex2.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 3:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex3 = new InvalidTokenException();
                    this.ex3.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 4:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex4 = new ApplicationDoesNotExistException();
                    this.ex4.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 5:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex5 = new UnauthorizedException();
                    this.ex5.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_getApplicationInfo_result.prototype.write = function(output) {
              output.writeStructBegin('AromaService_getApplicationInfo_result');
              if (this.success !== null && this.success !== undefined) {
                output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
              }
              if (this.ex1 !== null && this.ex1 !== undefined) {
                output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                this.ex1.write(output);
                output.writeFieldEnd();
              }
              if (this.ex2 !== null && this.ex2 !== undefined) {
                output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                this.ex2.write(output);
                output.writeFieldEnd();
              }
              if (this.ex3 !== null && this.ex3 !== undefined) {
                output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                this.ex3.write(output);
                output.writeFieldEnd();
              }
              if (this.ex4 !== null && this.ex4 !== undefined) {
                output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                this.ex4.write(output);
                output.writeFieldEnd();
              }
              if (this.ex5 !== null && this.ex5 !== undefined) {
                output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                this.ex5.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_getBuzz_args = function(args) {
              this.request = null;
              if (args) {
                            if (args.request !== undefined && args.request !== null) {
                                          this.request = new GetBuzzRequest(args.request);
                            }
              }
};
AromaService_getBuzz_args.prototype = {};
AromaService_getBuzz_args.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.request = new GetBuzzRequest();
                    this.request.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 0:
                    input.skip(ftype);
                    break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_getBuzz_args.prototype.write = function(output) {
              output.writeStructBegin('AromaService_getBuzz_args');
              if (this.request !== null && this.request !== undefined) {
                output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                this.request.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_getBuzz_result = function(args) {
              this.success = null;
              this.ex1 = null;
              this.ex2 = null;
              this.ex3 = null;
              this.ex4 = null;
              this.ex5 = null;
              if (args instanceof OperationFailedException) {
                            this.ex1 = args;
                            return;
              }
              if (args instanceof InvalidArgumentException) {
                            this.ex2 = args;
                            return;
              }
              if (args instanceof InvalidTokenException) {
                            this.ex3 = args;
                            return;
              }
              if (args instanceof ApplicationDoesNotExistException) {
                            this.ex4 = args;
                            return;
              }
              if (args instanceof UnauthorizedException) {
                            this.ex5 = args;
                            return;
              }
              if (args) {
                            if (args.success !== undefined && args.success !== null) {
                                          this.success = new GetBuzzResponse(args.success);
                            }
                            if (args.ex1 !== undefined && args.ex1 !== null) {
                                          this.ex1 = args.ex1;
                            }
                            if (args.ex2 !== undefined && args.ex2 !== null) {
                                          this.ex2 = args.ex2;
                            }
                            if (args.ex3 !== undefined && args.ex3 !== null) {
                                          this.ex3 = args.ex3;
                            }
                            if (args.ex4 !== undefined && args.ex4 !== null) {
                                          this.ex4 = args.ex4;
                            }
                            if (args.ex5 !== undefined && args.ex5 !== null) {
                                          this.ex5 = args.ex5;
                            }
              }
};
AromaService_getBuzz_result.prototype = {};
AromaService_getBuzz_result.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 0:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.success = new GetBuzzResponse();
                    this.success.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex1 = new OperationFailedException();
                    this.ex1.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 2:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex2 = new InvalidArgumentException();
                    this.ex2.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 3:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex3 = new InvalidTokenException();
                    this.ex3.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 4:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex4 = new ApplicationDoesNotExistException();
                    this.ex4.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 5:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex5 = new UnauthorizedException();
                    this.ex5.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_getBuzz_result.prototype.write = function(output) {
              output.writeStructBegin('AromaService_getBuzz_result');
              if (this.success !== null && this.success !== undefined) {
                output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
              }
              if (this.ex1 !== null && this.ex1 !== undefined) {
                output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                this.ex1.write(output);
                output.writeFieldEnd();
              }
              if (this.ex2 !== null && this.ex2 !== undefined) {
                output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                this.ex2.write(output);
                output.writeFieldEnd();
              }
              if (this.ex3 !== null && this.ex3 !== undefined) {
                output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                this.ex3.write(output);
                output.writeFieldEnd();
              }
              if (this.ex4 !== null && this.ex4 !== undefined) {
                output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                this.ex4.write(output);
                output.writeFieldEnd();
              }
              if (this.ex5 !== null && this.ex5 !== undefined) {
                output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                this.ex5.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_getDashboard_args = function(args) {
              this.request = null;
              if (args) {
                            if (args.request !== undefined && args.request !== null) {
                                          this.request = new GetDashboardRequest(args.request);
                            }
              }
};
AromaService_getDashboard_args.prototype = {};
AromaService_getDashboard_args.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.request = new GetDashboardRequest();
                    this.request.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 0:
                    input.skip(ftype);
                    break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_getDashboard_args.prototype.write = function(output) {
              output.writeStructBegin('AromaService_getDashboard_args');
              if (this.request !== null && this.request !== undefined) {
                output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                this.request.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_getDashboard_result = function(args) {
              this.success = null;
              this.ex1 = null;
              this.ex2 = null;
              this.ex3 = null;
              if (args instanceof OperationFailedException) {
                            this.ex1 = args;
                            return;
              }
              if (args instanceof InvalidArgumentException) {
                            this.ex2 = args;
                            return;
              }
              if (args instanceof InvalidTokenException) {
                            this.ex3 = args;
                            return;
              }
              if (args) {
                            if (args.success !== undefined && args.success !== null) {
                                          this.success = new GetDashboardResponse(args.success);
                            }
                            if (args.ex1 !== undefined && args.ex1 !== null) {
                                          this.ex1 = args.ex1;
                            }
                            if (args.ex2 !== undefined && args.ex2 !== null) {
                                          this.ex2 = args.ex2;
                            }
                            if (args.ex3 !== undefined && args.ex3 !== null) {
                                          this.ex3 = args.ex3;
                            }
              }
};
AromaService_getDashboard_result.prototype = {};
AromaService_getDashboard_result.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 0:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.success = new GetDashboardResponse();
                    this.success.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex1 = new OperationFailedException();
                    this.ex1.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 2:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex2 = new InvalidArgumentException();
                    this.ex2.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 3:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex3 = new InvalidTokenException();
                    this.ex3.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_getDashboard_result.prototype.write = function(output) {
              output.writeStructBegin('AromaService_getDashboard_result');
              if (this.success !== null && this.success !== undefined) {
                output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
              }
              if (this.ex1 !== null && this.ex1 !== undefined) {
                output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                this.ex1.write(output);
                output.writeFieldEnd();
              }
              if (this.ex2 !== null && this.ex2 !== undefined) {
                output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                this.ex2.write(output);
                output.writeFieldEnd();
              }
              if (this.ex3 !== null && this.ex3 !== undefined) {
                output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                this.ex3.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_getApplicationMessages_args = function(args) {
              this.request = null;
              if (args) {
                            if (args.request !== undefined && args.request !== null) {
                                          this.request = new GetApplicationMessagesRequest(args.request);
                            }
              }
};
AromaService_getApplicationMessages_args.prototype = {};
AromaService_getApplicationMessages_args.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.request = new GetApplicationMessagesRequest();
                    this.request.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 0:
                    input.skip(ftype);
                    break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_getApplicationMessages_args.prototype.write = function(output) {
              output.writeStructBegin('AromaService_getApplicationMessages_args');
              if (this.request !== null && this.request !== undefined) {
                output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                this.request.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_getApplicationMessages_result = function(args) {
              this.success = null;
              this.ex1 = null;
              this.ex2 = null;
              this.ex3 = null;
              this.ex4 = null;
              this.ex5 = null;
              if (args instanceof OperationFailedException) {
                            this.ex1 = args;
                            return;
              }
              if (args instanceof InvalidArgumentException) {
                            this.ex2 = args;
                            return;
              }
              if (args instanceof InvalidTokenException) {
                            this.ex3 = args;
                            return;
              }
              if (args instanceof UnauthorizedException) {
                            this.ex4 = args;
                            return;
              }
              if (args instanceof ApplicationDoesNotExistException) {
                            this.ex5 = args;
                            return;
              }
              if (args) {
                            if (args.success !== undefined && args.success !== null) {
                                          this.success = new GetApplicationMessagesResponse(args.success);
                            }
                            if (args.ex1 !== undefined && args.ex1 !== null) {
                                          this.ex1 = args.ex1;
                            }
                            if (args.ex2 !== undefined && args.ex2 !== null) {
                                          this.ex2 = args.ex2;
                            }
                            if (args.ex3 !== undefined && args.ex3 !== null) {
                                          this.ex3 = args.ex3;
                            }
                            if (args.ex4 !== undefined && args.ex4 !== null) {
                                          this.ex4 = args.ex4;
                            }
                            if (args.ex5 !== undefined && args.ex5 !== null) {
                                          this.ex5 = args.ex5;
                            }
              }
};
AromaService_getApplicationMessages_result.prototype = {};
AromaService_getApplicationMessages_result.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 0:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.success = new GetApplicationMessagesResponse();
                    this.success.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex1 = new OperationFailedException();
                    this.ex1.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 2:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex2 = new InvalidArgumentException();
                    this.ex2.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 3:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex3 = new InvalidTokenException();
                    this.ex3.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 4:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex4 = new UnauthorizedException();
                    this.ex4.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 5:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex5 = new ApplicationDoesNotExistException();
                    this.ex5.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_getApplicationMessages_result.prototype.write = function(output) {
              output.writeStructBegin('AromaService_getApplicationMessages_result');
              if (this.success !== null && this.success !== undefined) {
                output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
              }
              if (this.ex1 !== null && this.ex1 !== undefined) {
                output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                this.ex1.write(output);
                output.writeFieldEnd();
              }
              if (this.ex2 !== null && this.ex2 !== undefined) {
                output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                this.ex2.write(output);
                output.writeFieldEnd();
              }
              if (this.ex3 !== null && this.ex3 !== undefined) {
                output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                this.ex3.write(output);
                output.writeFieldEnd();
              }
              if (this.ex4 !== null && this.ex4 !== undefined) {
                output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                this.ex4.write(output);
                output.writeFieldEnd();
              }
              if (this.ex5 !== null && this.ex5 !== undefined) {
                output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                this.ex5.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_getInbox_args = function(args) {
              this.request = null;
              if (args) {
                            if (args.request !== undefined && args.request !== null) {
                                          this.request = new GetInboxRequest(args.request);
                            }
              }
};
AromaService_getInbox_args.prototype = {};
AromaService_getInbox_args.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.request = new GetInboxRequest();
                    this.request.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 0:
                    input.skip(ftype);
                    break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_getInbox_args.prototype.write = function(output) {
              output.writeStructBegin('AromaService_getInbox_args');
              if (this.request !== null && this.request !== undefined) {
                output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                this.request.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_getInbox_result = function(args) {
              this.success = null;
              this.ex1 = null;
              this.ex2 = null;
              this.ex3 = null;
              if (args instanceof OperationFailedException) {
                            this.ex1 = args;
                            return;
              }
              if (args instanceof InvalidArgumentException) {
                            this.ex2 = args;
                            return;
              }
              if (args instanceof InvalidTokenException) {
                            this.ex3 = args;
                            return;
              }
              if (args) {
                            if (args.success !== undefined && args.success !== null) {
                                          this.success = new GetInboxResponse(args.success);
                            }
                            if (args.ex1 !== undefined && args.ex1 !== null) {
                                          this.ex1 = args.ex1;
                            }
                            if (args.ex2 !== undefined && args.ex2 !== null) {
                                          this.ex2 = args.ex2;
                            }
                            if (args.ex3 !== undefined && args.ex3 !== null) {
                                          this.ex3 = args.ex3;
                            }
              }
};
AromaService_getInbox_result.prototype = {};
AromaService_getInbox_result.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 0:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.success = new GetInboxResponse();
                    this.success.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex1 = new OperationFailedException();
                    this.ex1.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 2:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex2 = new InvalidArgumentException();
                    this.ex2.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 3:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex3 = new InvalidTokenException();
                    this.ex3.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_getInbox_result.prototype.write = function(output) {
              output.writeStructBegin('AromaService_getInbox_result');
              if (this.success !== null && this.success !== undefined) {
                output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
              }
              if (this.ex1 !== null && this.ex1 !== undefined) {
                output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                this.ex1.write(output);
                output.writeFieldEnd();
              }
              if (this.ex2 !== null && this.ex2 !== undefined) {
                output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                this.ex2.write(output);
                output.writeFieldEnd();
              }
              if (this.ex3 !== null && this.ex3 !== undefined) {
                output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                this.ex3.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_getFullMessage_args = function(args) {
              this.request = null;
              if (args) {
                            if (args.request !== undefined && args.request !== null) {
                                          this.request = new GetFullMessageRequest(args.request);
                            }
              }
};
AromaService_getFullMessage_args.prototype = {};
AromaService_getFullMessage_args.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.request = new GetFullMessageRequest();
                    this.request.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 0:
                    input.skip(ftype);
                    break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_getFullMessage_args.prototype.write = function(output) {
              output.writeStructBegin('AromaService_getFullMessage_args');
              if (this.request !== null && this.request !== undefined) {
                output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                this.request.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_getFullMessage_result = function(args) {
              this.success = null;
              this.ex1 = null;
              this.ex2 = null;
              this.ex3 = null;
              if (args instanceof OperationFailedException) {
                            this.ex1 = args;
                            return;
              }
              if (args instanceof InvalidArgumentException) {
                            this.ex2 = args;
                            return;
              }
              if (args instanceof InvalidTokenException) {
                            this.ex3 = args;
                            return;
              }
              if (args) {
                            if (args.success !== undefined && args.success !== null) {
                                          this.success = new GetFullMessageResponse(args.success);
                            }
                            if (args.ex1 !== undefined && args.ex1 !== null) {
                                          this.ex1 = args.ex1;
                            }
                            if (args.ex2 !== undefined && args.ex2 !== null) {
                                          this.ex2 = args.ex2;
                            }
                            if (args.ex3 !== undefined && args.ex3 !== null) {
                                          this.ex3 = args.ex3;
                            }
              }
};
AromaService_getFullMessage_result.prototype = {};
AromaService_getFullMessage_result.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 0:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.success = new GetFullMessageResponse();
                    this.success.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex1 = new OperationFailedException();
                    this.ex1.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 2:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex2 = new InvalidArgumentException();
                    this.ex2.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 3:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex3 = new InvalidTokenException();
                    this.ex3.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_getFullMessage_result.prototype.write = function(output) {
              output.writeStructBegin('AromaService_getFullMessage_result');
              if (this.success !== null && this.success !== undefined) {
                output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
              }
              if (this.ex1 !== null && this.ex1 !== undefined) {
                output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                this.ex1.write(output);
                output.writeFieldEnd();
              }
              if (this.ex2 !== null && this.ex2 !== undefined) {
                output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                this.ex2.write(output);
                output.writeFieldEnd();
              }
              if (this.ex3 !== null && this.ex3 !== undefined) {
                output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                this.ex3.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_getMedia_args = function(args) {
              this.request = null;
              if (args) {
                            if (args.request !== undefined && args.request !== null) {
                                          this.request = new GetMediaRequest(args.request);
                            }
              }
};
AromaService_getMedia_args.prototype = {};
AromaService_getMedia_args.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.request = new GetMediaRequest();
                    this.request.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 0:
                    input.skip(ftype);
                    break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_getMedia_args.prototype.write = function(output) {
              output.writeStructBegin('AromaService_getMedia_args');
              if (this.request !== null && this.request !== undefined) {
                output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                this.request.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_getMedia_result = function(args) {
              this.success = null;
              this.ex1 = null;
              this.ex2 = null;
              this.ex3 = null;
              this.ex4 = null;
              this.ex5 = null;
              if (args instanceof OperationFailedException) {
                            this.ex1 = args;
                            return;
              }
              if (args instanceof InvalidArgumentException) {
                            this.ex2 = args;
                            return;
              }
              if (args instanceof InvalidTokenException) {
                            this.ex3 = args;
                            return;
              }
              if (args instanceof DoesNotExistException) {
                            this.ex4 = args;
                            return;
              }
              if (args instanceof UnauthorizedException) {
                            this.ex5 = args;
                            return;
              }
              if (args) {
                            if (args.success !== undefined && args.success !== null) {
                                          this.success = new GetMediaResponse(args.success);
                            }
                            if (args.ex1 !== undefined && args.ex1 !== null) {
                                          this.ex1 = args.ex1;
                            }
                            if (args.ex2 !== undefined && args.ex2 !== null) {
                                          this.ex2 = args.ex2;
                            }
                            if (args.ex3 !== undefined && args.ex3 !== null) {
                                          this.ex3 = args.ex3;
                            }
                            if (args.ex4 !== undefined && args.ex4 !== null) {
                                          this.ex4 = args.ex4;
                            }
                            if (args.ex5 !== undefined && args.ex5 !== null) {
                                          this.ex5 = args.ex5;
                            }
              }
};
AromaService_getMedia_result.prototype = {};
AromaService_getMedia_result.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 0:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.success = new GetMediaResponse();
                    this.success.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex1 = new OperationFailedException();
                    this.ex1.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 2:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex2 = new InvalidArgumentException();
                    this.ex2.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 3:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex3 = new InvalidTokenException();
                    this.ex3.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 4:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex4 = new DoesNotExistException();
                    this.ex4.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 5:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex5 = new UnauthorizedException();
                    this.ex5.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_getMedia_result.prototype.write = function(output) {
              output.writeStructBegin('AromaService_getMedia_result');
              if (this.success !== null && this.success !== undefined) {
                output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
              }
              if (this.ex1 !== null && this.ex1 !== undefined) {
                output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                this.ex1.write(output);
                output.writeFieldEnd();
              }
              if (this.ex2 !== null && this.ex2 !== undefined) {
                output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                this.ex2.write(output);
                output.writeFieldEnd();
              }
              if (this.ex3 !== null && this.ex3 !== undefined) {
                output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                this.ex3.write(output);
                output.writeFieldEnd();
              }
              if (this.ex4 !== null && this.ex4 !== undefined) {
                output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                this.ex4.write(output);
                output.writeFieldEnd();
              }
              if (this.ex5 !== null && this.ex5 !== undefined) {
                output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                this.ex5.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_getMyApplications_args = function(args) {
              this.request = null;
              if (args) {
                            if (args.request !== undefined && args.request !== null) {
                                          this.request = new GetMyApplicationsRequest(args.request);
                            }
              }
};
AromaService_getMyApplications_args.prototype = {};
AromaService_getMyApplications_args.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.request = new GetMyApplicationsRequest();
                    this.request.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 0:
                    input.skip(ftype);
                    break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_getMyApplications_args.prototype.write = function(output) {
              output.writeStructBegin('AromaService_getMyApplications_args');
              if (this.request !== null && this.request !== undefined) {
                output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                this.request.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_getMyApplications_result = function(args) {
              this.success = null;
              this.ex1 = null;
              this.ex2 = null;
              this.ex3 = null;
              if (args instanceof OperationFailedException) {
                            this.ex1 = args;
                            return;
              }
              if (args instanceof InvalidArgumentException) {
                            this.ex2 = args;
                            return;
              }
              if (args instanceof InvalidTokenException) {
                            this.ex3 = args;
                            return;
              }
              if (args) {
                            if (args.success !== undefined && args.success !== null) {
                                          this.success = new GetMyApplicationsResponse(args.success);
                            }
                            if (args.ex1 !== undefined && args.ex1 !== null) {
                                          this.ex1 = args.ex1;
                            }
                            if (args.ex2 !== undefined && args.ex2 !== null) {
                                          this.ex2 = args.ex2;
                            }
                            if (args.ex3 !== undefined && args.ex3 !== null) {
                                          this.ex3 = args.ex3;
                            }
              }
};
AromaService_getMyApplications_result.prototype = {};
AromaService_getMyApplications_result.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 0:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.success = new GetMyApplicationsResponse();
                    this.success.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex1 = new OperationFailedException();
                    this.ex1.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 2:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex2 = new InvalidArgumentException();
                    this.ex2.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 3:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex3 = new InvalidTokenException();
                    this.ex3.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_getMyApplications_result.prototype.write = function(output) {
              output.writeStructBegin('AromaService_getMyApplications_result');
              if (this.success !== null && this.success !== undefined) {
                output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
              }
              if (this.ex1 !== null && this.ex1 !== undefined) {
                output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                this.ex1.write(output);
                output.writeFieldEnd();
              }
              if (this.ex2 !== null && this.ex2 !== undefined) {
                output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                this.ex2.write(output);
                output.writeFieldEnd();
              }
              if (this.ex3 !== null && this.ex3 !== undefined) {
                output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                this.ex3.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_getMySavedChannels_args = function(args) {
              this.request = null;
              if (args) {
                            if (args.request !== undefined && args.request !== null) {
                                          this.request = new GetMySavedChannelsRequest(args.request);
                            }
              }
};
AromaService_getMySavedChannels_args.prototype = {};
AromaService_getMySavedChannels_args.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.request = new GetMySavedChannelsRequest();
                    this.request.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 0:
                    input.skip(ftype);
                    break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_getMySavedChannels_args.prototype.write = function(output) {
              output.writeStructBegin('AromaService_getMySavedChannels_args');
              if (this.request !== null && this.request !== undefined) {
                output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                this.request.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_getMySavedChannels_result = function(args) {
              this.success = null;
              this.ex1 = null;
              this.ex2 = null;
              this.ex3 = null;
              if (args instanceof OperationFailedException) {
                            this.ex1 = args;
                            return;
              }
              if (args instanceof InvalidArgumentException) {
                            this.ex2 = args;
                            return;
              }
              if (args instanceof InvalidTokenException) {
                            this.ex3 = args;
                            return;
              }
              if (args) {
                            if (args.success !== undefined && args.success !== null) {
                                          this.success = new GetMySavedChannelsResponse(args.success);
                            }
                            if (args.ex1 !== undefined && args.ex1 !== null) {
                                          this.ex1 = args.ex1;
                            }
                            if (args.ex2 !== undefined && args.ex2 !== null) {
                                          this.ex2 = args.ex2;
                            }
                            if (args.ex3 !== undefined && args.ex3 !== null) {
                                          this.ex3 = args.ex3;
                            }
              }
};
AromaService_getMySavedChannels_result.prototype = {};
AromaService_getMySavedChannels_result.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 0:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.success = new GetMySavedChannelsResponse();
                    this.success.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex1 = new OperationFailedException();
                    this.ex1.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 2:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex2 = new InvalidArgumentException();
                    this.ex2.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 3:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex3 = new InvalidTokenException();
                    this.ex3.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_getMySavedChannels_result.prototype.write = function(output) {
              output.writeStructBegin('AromaService_getMySavedChannels_result');
              if (this.success !== null && this.success !== undefined) {
                output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
              }
              if (this.ex1 !== null && this.ex1 !== undefined) {
                output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                this.ex1.write(output);
                output.writeFieldEnd();
              }
              if (this.ex2 !== null && this.ex2 !== undefined) {
                output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                this.ex2.write(output);
                output.writeFieldEnd();
              }
              if (this.ex3 !== null && this.ex3 !== undefined) {
                output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                this.ex3.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_getUserInfo_args = function(args) {
              this.request = null;
              if (args) {
                            if (args.request !== undefined && args.request !== null) {
                                          this.request = new GetUserInfoRequest(args.request);
                            }
              }
};
AromaService_getUserInfo_args.prototype = {};
AromaService_getUserInfo_args.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.request = new GetUserInfoRequest();
                    this.request.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 0:
                    input.skip(ftype);
                    break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_getUserInfo_args.prototype.write = function(output) {
              output.writeStructBegin('AromaService_getUserInfo_args');
              if (this.request !== null && this.request !== undefined) {
                output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                this.request.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_getUserInfo_result = function(args) {
              this.success = null;
              this.ex1 = null;
              this.ex2 = null;
              this.ex3 = null;
              this.ex4 = null;
              this.ex5 = null;
              if (args instanceof OperationFailedException) {
                            this.ex1 = args;
                            return;
              }
              if (args instanceof InvalidArgumentException) {
                            this.ex2 = args;
                            return;
              }
              if (args instanceof InvalidTokenException) {
                            this.ex3 = args;
                            return;
              }
              if (args instanceof UnauthorizedException) {
                            this.ex4 = args;
                            return;
              }
              if (args instanceof UserDoesNotExistException) {
                            this.ex5 = args;
                            return;
              }
              if (args) {
                            if (args.success !== undefined && args.success !== null) {
                                          this.success = new GetUserInfoResponse(args.success);
                            }
                            if (args.ex1 !== undefined && args.ex1 !== null) {
                                          this.ex1 = args.ex1;
                            }
                            if (args.ex2 !== undefined && args.ex2 !== null) {
                                          this.ex2 = args.ex2;
                            }
                            if (args.ex3 !== undefined && args.ex3 !== null) {
                                          this.ex3 = args.ex3;
                            }
                            if (args.ex4 !== undefined && args.ex4 !== null) {
                                          this.ex4 = args.ex4;
                            }
                            if (args.ex5 !== undefined && args.ex5 !== null) {
                                          this.ex5 = args.ex5;
                            }
              }
};
AromaService_getUserInfo_result.prototype = {};
AromaService_getUserInfo_result.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 0:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.success = new GetUserInfoResponse();
                    this.success.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex1 = new OperationFailedException();
                    this.ex1.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 2:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex2 = new InvalidArgumentException();
                    this.ex2.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 3:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex3 = new InvalidTokenException();
                    this.ex3.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 4:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex4 = new UnauthorizedException();
                    this.ex4.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 5:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex5 = new UserDoesNotExistException();
                    this.ex5.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_getUserInfo_result.prototype.write = function(output) {
              output.writeStructBegin('AromaService_getUserInfo_result');
              if (this.success !== null && this.success !== undefined) {
                output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
              }
              if (this.ex1 !== null && this.ex1 !== undefined) {
                output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                this.ex1.write(output);
                output.writeFieldEnd();
              }
              if (this.ex2 !== null && this.ex2 !== undefined) {
                output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                this.ex2.write(output);
                output.writeFieldEnd();
              }
              if (this.ex3 !== null && this.ex3 !== undefined) {
                output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                this.ex3.write(output);
                output.writeFieldEnd();
              }
              if (this.ex4 !== null && this.ex4 !== undefined) {
                output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                this.ex4.write(output);
                output.writeFieldEnd();
              }
              if (this.ex5 !== null && this.ex5 !== undefined) {
                output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                this.ex5.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_searchForApplications_args = function(args) {
              this.request = null;
              if (args) {
                            if (args.request !== undefined && args.request !== null) {
                                          this.request = new SearchForApplicationsRequest(args.request);
                            }
              }
};
AromaService_searchForApplications_args.prototype = {};
AromaService_searchForApplications_args.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.request = new SearchForApplicationsRequest();
                    this.request.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 0:
                    input.skip(ftype);
                    break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_searchForApplications_args.prototype.write = function(output) {
              output.writeStructBegin('AromaService_searchForApplications_args');
              if (this.request !== null && this.request !== undefined) {
                output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                this.request.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaService_searchForApplications_result = function(args) {
              this.success = null;
              this.ex1 = null;
              this.ex2 = null;
              this.ex3 = null;
              this.ex4 = null;
              if (args instanceof OperationFailedException) {
                            this.ex1 = args;
                            return;
              }
              if (args instanceof InvalidArgumentException) {
                            this.ex2 = args;
                            return;
              }
              if (args instanceof InvalidTokenException) {
                            this.ex3 = args;
                            return;
              }
              if (args instanceof UnauthorizedException) {
                            this.ex4 = args;
                            return;
              }
              if (args) {
                            if (args.success !== undefined && args.success !== null) {
                                          this.success = new SearchForApplicationsResponse(args.success);
                            }
                            if (args.ex1 !== undefined && args.ex1 !== null) {
                                          this.ex1 = args.ex1;
                            }
                            if (args.ex2 !== undefined && args.ex2 !== null) {
                                          this.ex2 = args.ex2;
                            }
                            if (args.ex3 !== undefined && args.ex3 !== null) {
                                          this.ex3 = args.ex3;
                            }
                            if (args.ex4 !== undefined && args.ex4 !== null) {
                                          this.ex4 = args.ex4;
                            }
              }
};
AromaService_searchForApplications_result.prototype = {};
AromaService_searchForApplications_result.prototype.read = function(input) {
              input.readStructBegin();
              while (true)
              {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                  break;
                }
                switch (fid)
                {
                  case 0:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.success = new SearchForApplicationsResponse();
                    this.success.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 1:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex1 = new OperationFailedException();
                    this.ex1.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 2:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex2 = new InvalidArgumentException();
                    this.ex2.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 3:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex3 = new InvalidTokenException();
                    this.ex3.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  case 4:
                  if (ftype == Thrift.Type.STRUCT) {
                    this.ex4 = new UnauthorizedException();
                    this.ex4.read(input);
                  } else {
                    input.skip(ftype);
                  }
                  break;
                  default:
                    input.skip(ftype);
                }
                input.readFieldEnd();
              }
              input.readStructEnd();
              return;
            };

AromaService_searchForApplications_result.prototype.write = function(output) {
              output.writeStructBegin('AromaService_searchForApplications_result');
              if (this.success !== null && this.success !== undefined) {
                output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
              }
              if (this.ex1 !== null && this.ex1 !== undefined) {
                output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                this.ex1.write(output);
                output.writeFieldEnd();
              }
              if (this.ex2 !== null && this.ex2 !== undefined) {
                output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                this.ex2.write(output);
                output.writeFieldEnd();
              }
              if (this.ex3 !== null && this.ex3 !== undefined) {
                output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                this.ex3.write(output);
                output.writeFieldEnd();
              }
              if (this.ex4 !== null && this.ex4 !== undefined) {
                output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                this.ex4.write(output);
                output.writeFieldEnd();
              }
              output.writeFieldStop();
              output.writeStructEnd();
              return;
            };

AromaServiceClient = function(input, output) {
                this.input = input;
                this.output = (!output) ? input : output;
                this.seqid = 0;
            };
            AromaServiceClient.prototype = {};
AromaServiceClient.prototype.getApiVersion = function(callback) {
              this.send_getApiVersion(callback); 
              if (!callback) {
                return this.recv_getApiVersion();
              }
};

AromaServiceClient.prototype.send_getApiVersion = function(callback) {
              this.output.writeMessageBegin('getApiVersion', Thrift.MessageType.CALL, this.seqid);
              var args = new AromaService_getApiVersion_args();
              args.write(this.output);
              this.output.writeMessageEnd();
              if (callback) {
                var self = this;
                this.output.getTransport().flush(true, function() {
                  var result = null;
                  try {
                    result = self.recv_getApiVersion();
                  } catch (e) {
                    result = e;
                  }
                  callback(result);
                });
              } else {
                return this.output.getTransport().flush();
              }
};

AromaServiceClient.prototype.recv_getApiVersion = function() {
              var ret = this.input.readMessageBegin();
              var fname = ret.fname;
              var mtype = ret.mtype;
              var rseqid = ret.rseqid;
              if (mtype == Thrift.MessageType.EXCEPTION) {
                var x = new Thrift.TApplicationException();
                x.read(this.input);
                this.input.readMessageEnd();
                throw x;
              }
              var result = new AromaService_getApiVersion_result();
              result.read(this.input);
              this.input.readMessageEnd();

              if (null !== result.success) {
                return result.success;
              }
              throw 'getApiVersion failed: unknown result';
};
AromaServiceClient.prototype.deleteMessage = function(request, callback) {
              this.send_deleteMessage(request, callback); 
              if (!callback) {
                return this.recv_deleteMessage();
              }
};

AromaServiceClient.prototype.send_deleteMessage = function(request, callback) {
              this.output.writeMessageBegin('deleteMessage', Thrift.MessageType.CALL, this.seqid);
              var args = new AromaService_deleteMessage_args();
              args.request = request;
              args.write(this.output);
              this.output.writeMessageEnd();
              if (callback) {
                var self = this;
                this.output.getTransport().flush(true, function() {
                  var result = null;
                  try {
                    result = self.recv_deleteMessage();
                  } catch (e) {
                    result = e;
                  }
                  callback(result);
                });
              } else {
                return this.output.getTransport().flush();
              }
};

AromaServiceClient.prototype.recv_deleteMessage = function() {
              var ret = this.input.readMessageBegin();
              var fname = ret.fname;
              var mtype = ret.mtype;
              var rseqid = ret.rseqid;
              if (mtype == Thrift.MessageType.EXCEPTION) {
                var x = new Thrift.TApplicationException();
                x.read(this.input);
                this.input.readMessageEnd();
                throw x;
              }
              var result = new AromaService_deleteMessage_result();
              result.read(this.input);
              this.input.readMessageEnd();

              if (null !== result.ex1) {
                throw result.ex1;
              }
              if (null !== result.ex2) {
                throw result.ex2;
              }
              if (null !== result.ex3) {
                throw result.ex3;
              }
              if (null !== result.ex4) {
                throw result.ex4;
              }
              if (null !== result.ex5) {
                throw result.ex5;
              }
              if (null !== result.success) {
                return result.success;
              }
              throw 'deleteMessage failed: unknown result';
};
AromaServiceClient.prototype.dismissMessage = function(request, callback) {
              this.send_dismissMessage(request, callback); 
              if (!callback) {
                return this.recv_dismissMessage();
              }
};

AromaServiceClient.prototype.send_dismissMessage = function(request, callback) {
              this.output.writeMessageBegin('dismissMessage', Thrift.MessageType.CALL, this.seqid);
              var args = new AromaService_dismissMessage_args();
              args.request = request;
              args.write(this.output);
              this.output.writeMessageEnd();
              if (callback) {
                var self = this;
                this.output.getTransport().flush(true, function() {
                  var result = null;
                  try {
                    result = self.recv_dismissMessage();
                  } catch (e) {
                    result = e;
                  }
                  callback(result);
                });
              } else {
                return this.output.getTransport().flush();
              }
};

AromaServiceClient.prototype.recv_dismissMessage = function() {
              var ret = this.input.readMessageBegin();
              var fname = ret.fname;
              var mtype = ret.mtype;
              var rseqid = ret.rseqid;
              if (mtype == Thrift.MessageType.EXCEPTION) {
                var x = new Thrift.TApplicationException();
                x.read(this.input);
                this.input.readMessageEnd();
                throw x;
              }
              var result = new AromaService_dismissMessage_result();
              result.read(this.input);
              this.input.readMessageEnd();

              if (null !== result.ex1) {
                throw result.ex1;
              }
              if (null !== result.ex2) {
                throw result.ex2;
              }
              if (null !== result.ex3) {
                throw result.ex3;
              }
              if (null !== result.ex4) {
                throw result.ex4;
              }
              if (null !== result.ex5) {
                throw result.ex5;
              }
              if (null !== result.success) {
                return result.success;
              }
              throw 'dismissMessage failed: unknown result';
};
AromaServiceClient.prototype.provisionApplication = function(request, callback) {
              this.send_provisionApplication(request, callback); 
              if (!callback) {
                return this.recv_provisionApplication();
              }
};

AromaServiceClient.prototype.send_provisionApplication = function(request, callback) {
              this.output.writeMessageBegin('provisionApplication', Thrift.MessageType.CALL, this.seqid);
              var args = new AromaService_provisionApplication_args();
              args.request = request;
              args.write(this.output);
              this.output.writeMessageEnd();
              if (callback) {
                var self = this;
                this.output.getTransport().flush(true, function() {
                  var result = null;
                  try {
                    result = self.recv_provisionApplication();
                  } catch (e) {
                    result = e;
                  }
                  callback(result);
                });
              } else {
                return this.output.getTransport().flush();
              }
};

AromaServiceClient.prototype.recv_provisionApplication = function() {
              var ret = this.input.readMessageBegin();
              var fname = ret.fname;
              var mtype = ret.mtype;
              var rseqid = ret.rseqid;
              if (mtype == Thrift.MessageType.EXCEPTION) {
                var x = new Thrift.TApplicationException();
                x.read(this.input);
                this.input.readMessageEnd();
                throw x;
              }
              var result = new AromaService_provisionApplication_result();
              result.read(this.input);
              this.input.readMessageEnd();

              if (null !== result.ex1) {
                throw result.ex1;
              }
              if (null !== result.ex2) {
                throw result.ex2;
              }
              if (null !== result.ex3) {
                throw result.ex3;
              }
              if (null !== result.ex4) {
                throw result.ex4;
              }
              if (null !== result.ex5) {
                throw result.ex5;
              }
              if (null !== result.success) {
                return result.success;
              }
              throw 'provisionApplication failed: unknown result';
};
AromaServiceClient.prototype.regenerateToken = function(request, callback) {
              this.send_regenerateToken(request, callback); 
              if (!callback) {
                return this.recv_regenerateToken();
              }
};

AromaServiceClient.prototype.send_regenerateToken = function(request, callback) {
              this.output.writeMessageBegin('regenerateToken', Thrift.MessageType.CALL, this.seqid);
              var args = new AromaService_regenerateToken_args();
              args.request = request;
              args.write(this.output);
              this.output.writeMessageEnd();
              if (callback) {
                var self = this;
                this.output.getTransport().flush(true, function() {
                  var result = null;
                  try {
                    result = self.recv_regenerateToken();
                  } catch (e) {
                    result = e;
                  }
                  callback(result);
                });
              } else {
                return this.output.getTransport().flush();
              }
};

AromaServiceClient.prototype.recv_regenerateToken = function() {
              var ret = this.input.readMessageBegin();
              var fname = ret.fname;
              var mtype = ret.mtype;
              var rseqid = ret.rseqid;
              if (mtype == Thrift.MessageType.EXCEPTION) {
                var x = new Thrift.TApplicationException();
                x.read(this.input);
                this.input.readMessageEnd();
                throw x;
              }
              var result = new AromaService_regenerateToken_result();
              result.read(this.input);
              this.input.readMessageEnd();

              if (null !== result.ex1) {
                throw result.ex1;
              }
              if (null !== result.ex2) {
                throw result.ex2;
              }
              if (null !== result.ex3) {
                throw result.ex3;
              }
              if (null !== result.ex4) {
                throw result.ex4;
              }
              if (null !== result.ex5) {
                throw result.ex5;
              }
              if (null !== result.success) {
                return result.success;
              }
              throw 'regenerateToken failed: unknown result';
};
AromaServiceClient.prototype.registerHealthCheck = function(request, callback) {
              this.send_registerHealthCheck(request, callback); 
              if (!callback) {
                return this.recv_registerHealthCheck();
              }
};

AromaServiceClient.prototype.send_registerHealthCheck = function(request, callback) {
              this.output.writeMessageBegin('registerHealthCheck', Thrift.MessageType.CALL, this.seqid);
              var args = new AromaService_registerHealthCheck_args();
              args.request = request;
              args.write(this.output);
              this.output.writeMessageEnd();
              if (callback) {
                var self = this;
                this.output.getTransport().flush(true, function() {
                  var result = null;
                  try {
                    result = self.recv_registerHealthCheck();
                  } catch (e) {
                    result = e;
                  }
                  callback(result);
                });
              } else {
                return this.output.getTransport().flush();
              }
};

AromaServiceClient.prototype.recv_registerHealthCheck = function() {
              var ret = this.input.readMessageBegin();
              var fname = ret.fname;
              var mtype = ret.mtype;
              var rseqid = ret.rseqid;
              if (mtype == Thrift.MessageType.EXCEPTION) {
                var x = new Thrift.TApplicationException();
                x.read(this.input);
                this.input.readMessageEnd();
                throw x;
              }
              var result = new AromaService_registerHealthCheck_result();
              result.read(this.input);
              this.input.readMessageEnd();

              if (null !== result.ex1) {
                throw result.ex1;
              }
              if (null !== result.ex2) {
                throw result.ex2;
              }
              if (null !== result.ex3) {
                throw result.ex3;
              }
              if (null !== result.ex4) {
                throw result.ex4;
              }
              if (null !== result.ex5) {
                throw result.ex5;
              }
              if (null !== result.success) {
                return result.success;
              }
              throw 'registerHealthCheck failed: unknown result';
};
AromaServiceClient.prototype.removeSavedChannel = function(request, callback) {
              this.send_removeSavedChannel(request, callback); 
              if (!callback) {
                return this.recv_removeSavedChannel();
              }
};

AromaServiceClient.prototype.send_removeSavedChannel = function(request, callback) {
              this.output.writeMessageBegin('removeSavedChannel', Thrift.MessageType.CALL, this.seqid);
              var args = new AromaService_removeSavedChannel_args();
              args.request = request;
              args.write(this.output);
              this.output.writeMessageEnd();
              if (callback) {
                var self = this;
                this.output.getTransport().flush(true, function() {
                  var result = null;
                  try {
                    result = self.recv_removeSavedChannel();
                  } catch (e) {
                    result = e;
                  }
                  callback(result);
                });
              } else {
                return this.output.getTransport().flush();
              }
};

AromaServiceClient.prototype.recv_removeSavedChannel = function() {
              var ret = this.input.readMessageBegin();
              var fname = ret.fname;
              var mtype = ret.mtype;
              var rseqid = ret.rseqid;
              if (mtype == Thrift.MessageType.EXCEPTION) {
                var x = new Thrift.TApplicationException();
                x.read(this.input);
                this.input.readMessageEnd();
                throw x;
              }
              var result = new AromaService_removeSavedChannel_result();
              result.read(this.input);
              this.input.readMessageEnd();

              if (null !== result.ex1) {
                throw result.ex1;
              }
              if (null !== result.ex2) {
                throw result.ex2;
              }
              if (null !== result.ex3) {
                throw result.ex3;
              }
              if (null !== result.ex4) {
                throw result.ex4;
              }
              if (null !== result.ex5) {
                throw result.ex5;
              }
              if (null !== result.success) {
                return result.success;
              }
              throw 'removeSavedChannel failed: unknown result';
};
AromaServiceClient.prototype.renewApplicationToken = function(request, callback) {
              this.send_renewApplicationToken(request, callback); 
              if (!callback) {
                return this.recv_renewApplicationToken();
              }
};

AromaServiceClient.prototype.send_renewApplicationToken = function(request, callback) {
              this.output.writeMessageBegin('renewApplicationToken', Thrift.MessageType.CALL, this.seqid);
              var args = new AromaService_renewApplicationToken_args();
              args.request = request;
              args.write(this.output);
              this.output.writeMessageEnd();
              if (callback) {
                var self = this;
                this.output.getTransport().flush(true, function() {
                  var result = null;
                  try {
                    result = self.recv_renewApplicationToken();
                  } catch (e) {
                    result = e;
                  }
                  callback(result);
                });
              } else {
                return this.output.getTransport().flush();
              }
};

AromaServiceClient.prototype.recv_renewApplicationToken = function() {
              var ret = this.input.readMessageBegin();
              var fname = ret.fname;
              var mtype = ret.mtype;
              var rseqid = ret.rseqid;
              if (mtype == Thrift.MessageType.EXCEPTION) {
                var x = new Thrift.TApplicationException();
                x.read(this.input);
                this.input.readMessageEnd();
                throw x;
              }
              var result = new AromaService_renewApplicationToken_result();
              result.read(this.input);
              this.input.readMessageEnd();

              if (null !== result.ex1) {
                throw result.ex1;
              }
              if (null !== result.ex2) {
                throw result.ex2;
              }
              if (null !== result.ex3) {
                throw result.ex3;
              }
              if (null !== result.ex4) {
                throw result.ex4;
              }
              if (null !== result.ex5) {
                throw result.ex5;
              }
              if (null !== result.success) {
                return result.success;
              }
              throw 'renewApplicationToken failed: unknown result';
};
AromaServiceClient.prototype.saveChannel = function(request, callback) {
              this.send_saveChannel(request, callback); 
              if (!callback) {
                return this.recv_saveChannel();
              }
};

AromaServiceClient.prototype.send_saveChannel = function(request, callback) {
              this.output.writeMessageBegin('saveChannel', Thrift.MessageType.CALL, this.seqid);
              var args = new AromaService_saveChannel_args();
              args.request = request;
              args.write(this.output);
              this.output.writeMessageEnd();
              if (callback) {
                var self = this;
                this.output.getTransport().flush(true, function() {
                  var result = null;
                  try {
                    result = self.recv_saveChannel();
                  } catch (e) {
                    result = e;
                  }
                  callback(result);
                });
              } else {
                return this.output.getTransport().flush();
              }
};

AromaServiceClient.prototype.recv_saveChannel = function() {
              var ret = this.input.readMessageBegin();
              var fname = ret.fname;
              var mtype = ret.mtype;
              var rseqid = ret.rseqid;
              if (mtype == Thrift.MessageType.EXCEPTION) {
                var x = new Thrift.TApplicationException();
                x.read(this.input);
                this.input.readMessageEnd();
                throw x;
              }
              var result = new AromaService_saveChannel_result();
              result.read(this.input);
              this.input.readMessageEnd();

              if (null !== result.ex1) {
                throw result.ex1;
              }
              if (null !== result.ex2) {
                throw result.ex2;
              }
              if (null !== result.ex3) {
                throw result.ex3;
              }
              if (null !== result.ex4) {
                throw result.ex4;
              }
              if (null !== result.success) {
                return result.success;
              }
              throw 'saveChannel failed: unknown result';
};
AromaServiceClient.prototype.signIn = function(request, callback) {
              this.send_signIn(request, callback); 
              if (!callback) {
                return this.recv_signIn();
              }
};

AromaServiceClient.prototype.send_signIn = function(request, callback) {
              this.output.writeMessageBegin('signIn', Thrift.MessageType.CALL, this.seqid);
              var args = new AromaService_signIn_args();
              args.request = request;
              args.write(this.output);
              this.output.writeMessageEnd();
              if (callback) {
                var self = this;
                this.output.getTransport().flush(true, function() {
                  var result = null;
                  try {
                    result = self.recv_signIn();
                  } catch (e) {
                    result = e;
                  }
                  callback(result);
                });
              } else {
                return this.output.getTransport().flush();
              }
};

AromaServiceClient.prototype.recv_signIn = function() {
              var ret = this.input.readMessageBegin();
              var fname = ret.fname;
              var mtype = ret.mtype;
              var rseqid = ret.rseqid;
              if (mtype == Thrift.MessageType.EXCEPTION) {
                var x = new Thrift.TApplicationException();
                x.read(this.input);
                this.input.readMessageEnd();
                throw x;
              }
              var result = new AromaService_signIn_result();
              result.read(this.input);
              this.input.readMessageEnd();

              if (null !== result.ex1) {
                throw result.ex1;
              }
              if (null !== result.ex2) {
                throw result.ex2;
              }
              if (null !== result.ex3) {
                throw result.ex3;
              }
              if (null !== result.ex4) {
                throw result.ex4;
              }
              if (null !== result.success) {
                return result.success;
              }
              throw 'signIn failed: unknown result';
};
AromaServiceClient.prototype.signUp = function(request, callback) {
              this.send_signUp(request, callback); 
              if (!callback) {
                return this.recv_signUp();
              }
};

AromaServiceClient.prototype.send_signUp = function(request, callback) {
              this.output.writeMessageBegin('signUp', Thrift.MessageType.CALL, this.seqid);
              var args = new AromaService_signUp_args();
              args.request = request;
              args.write(this.output);
              this.output.writeMessageEnd();
              if (callback) {
                var self = this;
                this.output.getTransport().flush(true, function() {
                  var result = null;
                  try {
                    result = self.recv_signUp();
                  } catch (e) {
                    result = e;
                  }
                  callback(result);
                });
              } else {
                return this.output.getTransport().flush();
              }
};

AromaServiceClient.prototype.recv_signUp = function() {
              var ret = this.input.readMessageBegin();
              var fname = ret.fname;
              var mtype = ret.mtype;
              var rseqid = ret.rseqid;
              if (mtype == Thrift.MessageType.EXCEPTION) {
                var x = new Thrift.TApplicationException();
                x.read(this.input);
                this.input.readMessageEnd();
                throw x;
              }
              var result = new AromaService_signUp_result();
              result.read(this.input);
              this.input.readMessageEnd();

              if (null !== result.ex1) {
                throw result.ex1;
              }
              if (null !== result.ex2) {
                throw result.ex2;
              }
              if (null !== result.ex3) {
                throw result.ex3;
              }
              if (null !== result.ex4) {
                throw result.ex4;
              }
              if (null !== result.success) {
                return result.success;
              }
              throw 'signUp failed: unknown result';
};
AromaServiceClient.prototype.snoozeChannel = function(request, callback) {
              this.send_snoozeChannel(request, callback); 
              if (!callback) {
                return this.recv_snoozeChannel();
              }
};

AromaServiceClient.prototype.send_snoozeChannel = function(request, callback) {
              this.output.writeMessageBegin('snoozeChannel', Thrift.MessageType.CALL, this.seqid);
              var args = new AromaService_snoozeChannel_args();
              args.request = request;
              args.write(this.output);
              this.output.writeMessageEnd();
              if (callback) {
                var self = this;
                this.output.getTransport().flush(true, function() {
                  var result = null;
                  try {
                    result = self.recv_snoozeChannel();
                  } catch (e) {
                    result = e;
                  }
                  callback(result);
                });
              } else {
                return this.output.getTransport().flush();
              }
};

AromaServiceClient.prototype.recv_snoozeChannel = function() {
              var ret = this.input.readMessageBegin();
              var fname = ret.fname;
              var mtype = ret.mtype;
              var rseqid = ret.rseqid;
              if (mtype == Thrift.MessageType.EXCEPTION) {
                var x = new Thrift.TApplicationException();
                x.read(this.input);
                this.input.readMessageEnd();
                throw x;
              }
              var result = new AromaService_snoozeChannel_result();
              result.read(this.input);
              this.input.readMessageEnd();

              if (null !== result.ex1) {
                throw result.ex1;
              }
              if (null !== result.ex2) {
                throw result.ex2;
              }
              if (null !== result.ex3) {
                throw result.ex3;
              }
              if (null !== result.ex4) {
                throw result.ex4;
              }
              if (null !== result.ex5) {
                throw result.ex5;
              }
              if (null !== result.success) {
                return result.success;
              }
              throw 'snoozeChannel failed: unknown result';
};
AromaServiceClient.prototype.followApplication = function(request, callback) {
              this.send_followApplication(request, callback); 
              if (!callback) {
                return this.recv_followApplication();
              }
};

AromaServiceClient.prototype.send_followApplication = function(request, callback) {
              this.output.writeMessageBegin('followApplication', Thrift.MessageType.CALL, this.seqid);
              var args = new AromaService_followApplication_args();
              args.request = request;
              args.write(this.output);
              this.output.writeMessageEnd();
              if (callback) {
                var self = this;
                this.output.getTransport().flush(true, function() {
                  var result = null;
                  try {
                    result = self.recv_followApplication();
                  } catch (e) {
                    result = e;
                  }
                  callback(result);
                });
              } else {
                return this.output.getTransport().flush();
              }
};

AromaServiceClient.prototype.recv_followApplication = function() {
              var ret = this.input.readMessageBegin();
              var fname = ret.fname;
              var mtype = ret.mtype;
              var rseqid = ret.rseqid;
              if (mtype == Thrift.MessageType.EXCEPTION) {
                var x = new Thrift.TApplicationException();
                x.read(this.input);
                this.input.readMessageEnd();
                throw x;
              }
              var result = new AromaService_followApplication_result();
              result.read(this.input);
              this.input.readMessageEnd();

              if (null !== result.ex1) {
                throw result.ex1;
              }
              if (null !== result.ex2) {
                throw result.ex2;
              }
              if (null !== result.ex3) {
                throw result.ex3;
              }
              if (null !== result.ex4) {
                throw result.ex4;
              }
              if (null !== result.ex5) {
                throw result.ex5;
              }
              if (null !== result.success) {
                return result.success;
              }
              throw 'followApplication failed: unknown result';
};
AromaServiceClient.prototype.unfollowApplication = function(request, callback) {
              this.send_unfollowApplication(request, callback); 
              if (!callback) {
                return this.recv_unfollowApplication();
              }
};

AromaServiceClient.prototype.send_unfollowApplication = function(request, callback) {
              this.output.writeMessageBegin('unfollowApplication', Thrift.MessageType.CALL, this.seqid);
              var args = new AromaService_unfollowApplication_args();
              args.request = request;
              args.write(this.output);
              this.output.writeMessageEnd();
              if (callback) {
                var self = this;
                this.output.getTransport().flush(true, function() {
                  var result = null;
                  try {
                    result = self.recv_unfollowApplication();
                  } catch (e) {
                    result = e;
                  }
                  callback(result);
                });
              } else {
                return this.output.getTransport().flush();
              }
};

AromaServiceClient.prototype.recv_unfollowApplication = function() {
              var ret = this.input.readMessageBegin();
              var fname = ret.fname;
              var mtype = ret.mtype;
              var rseqid = ret.rseqid;
              if (mtype == Thrift.MessageType.EXCEPTION) {
                var x = new Thrift.TApplicationException();
                x.read(this.input);
                this.input.readMessageEnd();
                throw x;
              }
              var result = new AromaService_unfollowApplication_result();
              result.read(this.input);
              this.input.readMessageEnd();

              if (null !== result.ex1) {
                throw result.ex1;
              }
              if (null !== result.ex2) {
                throw result.ex2;
              }
              if (null !== result.ex3) {
                throw result.ex3;
              }
              if (null !== result.ex4) {
                throw result.ex4;
              }
              if (null !== result.ex5) {
                throw result.ex5;
              }
              if (null !== result.success) {
                return result.success;
              }
              throw 'unfollowApplication failed: unknown result';
};
AromaServiceClient.prototype.updateApplication = function(request, callback) {
              this.send_updateApplication(request, callback); 
              if (!callback) {
                return this.recv_updateApplication();
              }
};

AromaServiceClient.prototype.send_updateApplication = function(request, callback) {
              this.output.writeMessageBegin('updateApplication', Thrift.MessageType.CALL, this.seqid);
              var args = new AromaService_updateApplication_args();
              args.request = request;
              args.write(this.output);
              this.output.writeMessageEnd();
              if (callback) {
                var self = this;
                this.output.getTransport().flush(true, function() {
                  var result = null;
                  try {
                    result = self.recv_updateApplication();
                  } catch (e) {
                    result = e;
                  }
                  callback(result);
                });
              } else {
                return this.output.getTransport().flush();
              }
};

AromaServiceClient.prototype.recv_updateApplication = function() {
              var ret = this.input.readMessageBegin();
              var fname = ret.fname;
              var mtype = ret.mtype;
              var rseqid = ret.rseqid;
              if (mtype == Thrift.MessageType.EXCEPTION) {
                var x = new Thrift.TApplicationException();
                x.read(this.input);
                this.input.readMessageEnd();
                throw x;
              }
              var result = new AromaService_updateApplication_result();
              result.read(this.input);
              this.input.readMessageEnd();

              if (null !== result.ex1) {
                throw result.ex1;
              }
              if (null !== result.ex2) {
                throw result.ex2;
              }
              if (null !== result.ex3) {
                throw result.ex3;
              }
              if (null !== result.ex4) {
                throw result.ex4;
              }
              if (null !== result.ex5) {
                throw result.ex5;
              }
              if (null !== result.success) {
                return result.success;
              }
              throw 'updateApplication failed: unknown result';
};
AromaServiceClient.prototype.getActivity = function(request, callback) {
              this.send_getActivity(request, callback); 
              if (!callback) {
                return this.recv_getActivity();
              }
};

AromaServiceClient.prototype.send_getActivity = function(request, callback) {
              this.output.writeMessageBegin('getActivity', Thrift.MessageType.CALL, this.seqid);
              var args = new AromaService_getActivity_args();
              args.request = request;
              args.write(this.output);
              this.output.writeMessageEnd();
              if (callback) {
                var self = this;
                this.output.getTransport().flush(true, function() {
                  var result = null;
                  try {
                    result = self.recv_getActivity();
                  } catch (e) {
                    result = e;
                  }
                  callback(result);
                });
              } else {
                return this.output.getTransport().flush();
              }
};

AromaServiceClient.prototype.recv_getActivity = function() {
              var ret = this.input.readMessageBegin();
              var fname = ret.fname;
              var mtype = ret.mtype;
              var rseqid = ret.rseqid;
              if (mtype == Thrift.MessageType.EXCEPTION) {
                var x = new Thrift.TApplicationException();
                x.read(this.input);
                this.input.readMessageEnd();
                throw x;
              }
              var result = new AromaService_getActivity_result();
              result.read(this.input);
              this.input.readMessageEnd();

              if (null !== result.ex1) {
                throw result.ex1;
              }
              if (null !== result.ex2) {
                throw result.ex2;
              }
              if (null !== result.ex3) {
                throw result.ex3;
              }
              if (null !== result.success) {
                return result.success;
              }
              throw 'getActivity failed: unknown result';
};
AromaServiceClient.prototype.getApplicationInfo = function(request, callback) {
              this.send_getApplicationInfo(request, callback); 
              if (!callback) {
                return this.recv_getApplicationInfo();
              }
};

AromaServiceClient.prototype.send_getApplicationInfo = function(request, callback) {
              this.output.writeMessageBegin('getApplicationInfo', Thrift.MessageType.CALL, this.seqid);
              var args = new AromaService_getApplicationInfo_args();
              args.request = request;
              args.write(this.output);
              this.output.writeMessageEnd();
              if (callback) {
                var self = this;
                this.output.getTransport().flush(true, function() {
                  var result = null;
                  try {
                    result = self.recv_getApplicationInfo();
                  } catch (e) {
                    result = e;
                  }
                  callback(result);
                });
              } else {
                return this.output.getTransport().flush();
              }
};

AromaServiceClient.prototype.recv_getApplicationInfo = function() {
              var ret = this.input.readMessageBegin();
              var fname = ret.fname;
              var mtype = ret.mtype;
              var rseqid = ret.rseqid;
              if (mtype == Thrift.MessageType.EXCEPTION) {
                var x = new Thrift.TApplicationException();
                x.read(this.input);
                this.input.readMessageEnd();
                throw x;
              }
              var result = new AromaService_getApplicationInfo_result();
              result.read(this.input);
              this.input.readMessageEnd();

              if (null !== result.ex1) {
                throw result.ex1;
              }
              if (null !== result.ex2) {
                throw result.ex2;
              }
              if (null !== result.ex3) {
                throw result.ex3;
              }
              if (null !== result.ex4) {
                throw result.ex4;
              }
              if (null !== result.ex5) {
                throw result.ex5;
              }
              if (null !== result.success) {
                return result.success;
              }
              throw 'getApplicationInfo failed: unknown result';
};
AromaServiceClient.prototype.getBuzz = function(request, callback) {
              this.send_getBuzz(request, callback); 
              if (!callback) {
                return this.recv_getBuzz();
              }
};

AromaServiceClient.prototype.send_getBuzz = function(request, callback) {
              this.output.writeMessageBegin('getBuzz', Thrift.MessageType.CALL, this.seqid);
              var args = new AromaService_getBuzz_args();
              args.request = request;
              args.write(this.output);
              this.output.writeMessageEnd();
              if (callback) {
                var self = this;
                this.output.getTransport().flush(true, function() {
                  var result = null;
                  try {
                    result = self.recv_getBuzz();
                  } catch (e) {
                    result = e;
                  }
                  callback(result);
                });
              } else {
                return this.output.getTransport().flush();
              }
};

AromaServiceClient.prototype.recv_getBuzz = function() {
              var ret = this.input.readMessageBegin();
              var fname = ret.fname;
              var mtype = ret.mtype;
              var rseqid = ret.rseqid;
              if (mtype == Thrift.MessageType.EXCEPTION) {
                var x = new Thrift.TApplicationException();
                x.read(this.input);
                this.input.readMessageEnd();
                throw x;
              }
              var result = new AromaService_getBuzz_result();
              result.read(this.input);
              this.input.readMessageEnd();

              if (null !== result.ex1) {
                throw result.ex1;
              }
              if (null !== result.ex2) {
                throw result.ex2;
              }
              if (null !== result.ex3) {
                throw result.ex3;
              }
              if (null !== result.ex4) {
                throw result.ex4;
              }
              if (null !== result.ex5) {
                throw result.ex5;
              }
              if (null !== result.success) {
                return result.success;
              }
              throw 'getBuzz failed: unknown result';
};
AromaServiceClient.prototype.getDashboard = function(request, callback) {
              this.send_getDashboard(request, callback); 
              if (!callback) {
                return this.recv_getDashboard();
              }
};

AromaServiceClient.prototype.send_getDashboard = function(request, callback) {
              this.output.writeMessageBegin('getDashboard', Thrift.MessageType.CALL, this.seqid);
              var args = new AromaService_getDashboard_args();
              args.request = request;
              args.write(this.output);
              this.output.writeMessageEnd();
              if (callback) {
                var self = this;
                this.output.getTransport().flush(true, function() {
                  var result = null;
                  try {
                    result = self.recv_getDashboard();
                  } catch (e) {
                    result = e;
                  }
                  callback(result);
                });
              } else {
                return this.output.getTransport().flush();
              }
};

AromaServiceClient.prototype.recv_getDashboard = function() {
              var ret = this.input.readMessageBegin();
              var fname = ret.fname;
              var mtype = ret.mtype;
              var rseqid = ret.rseqid;
              if (mtype == Thrift.MessageType.EXCEPTION) {
                var x = new Thrift.TApplicationException();
                x.read(this.input);
                this.input.readMessageEnd();
                throw x;
              }
              var result = new AromaService_getDashboard_result();
              result.read(this.input);
              this.input.readMessageEnd();

              if (null !== result.ex1) {
                throw result.ex1;
              }
              if (null !== result.ex2) {
                throw result.ex2;
              }
              if (null !== result.ex3) {
                throw result.ex3;
              }
              if (null !== result.success) {
                return result.success;
              }
              throw 'getDashboard failed: unknown result';
};
AromaServiceClient.prototype.getApplicationMessages = function(request, callback) {
              this.send_getApplicationMessages(request, callback); 
              if (!callback) {
                return this.recv_getApplicationMessages();
              }
};

AromaServiceClient.prototype.send_getApplicationMessages = function(request, callback) {
              this.output.writeMessageBegin('getApplicationMessages', Thrift.MessageType.CALL, this.seqid);
              var args = new AromaService_getApplicationMessages_args();
              args.request = request;
              args.write(this.output);
              this.output.writeMessageEnd();
              if (callback) {
                var self = this;
                this.output.getTransport().flush(true, function() {
                  var result = null;
                  try {
                    result = self.recv_getApplicationMessages();
                  } catch (e) {
                    result = e;
                  }
                  callback(result);
                });
              } else {
                return this.output.getTransport().flush();
              }
};

AromaServiceClient.prototype.recv_getApplicationMessages = function() {
              var ret = this.input.readMessageBegin();
              var fname = ret.fname;
              var mtype = ret.mtype;
              var rseqid = ret.rseqid;
              if (mtype == Thrift.MessageType.EXCEPTION) {
                var x = new Thrift.TApplicationException();
                x.read(this.input);
                this.input.readMessageEnd();
                throw x;
              }
              var result = new AromaService_getApplicationMessages_result();
              result.read(this.input);
              this.input.readMessageEnd();

              if (null !== result.ex1) {
                throw result.ex1;
              }
              if (null !== result.ex2) {
                throw result.ex2;
              }
              if (null !== result.ex3) {
                throw result.ex3;
              }
              if (null !== result.ex4) {
                throw result.ex4;
              }
              if (null !== result.ex5) {
                throw result.ex5;
              }
              if (null !== result.success) {
                return result.success;
              }
              throw 'getApplicationMessages failed: unknown result';
};
AromaServiceClient.prototype.getInbox = function(request, callback) {
              this.send_getInbox(request, callback); 
              if (!callback) {
                return this.recv_getInbox();
              }
};

AromaServiceClient.prototype.send_getInbox = function(request, callback) {
              this.output.writeMessageBegin('getInbox', Thrift.MessageType.CALL, this.seqid);
              var args = new AromaService_getInbox_args();
              args.request = request;
              args.write(this.output);
              this.output.writeMessageEnd();
              if (callback) {
                var self = this;
                this.output.getTransport().flush(true, function() {
                  var result = null;
                  try {
                    result = self.recv_getInbox();
                  } catch (e) {
                    result = e;
                  }
                  callback(result);
                });
              } else {
                return this.output.getTransport().flush();
              }
};

AromaServiceClient.prototype.recv_getInbox = function() {
              var ret = this.input.readMessageBegin();
              var fname = ret.fname;
              var mtype = ret.mtype;
              var rseqid = ret.rseqid;
              if (mtype == Thrift.MessageType.EXCEPTION) {
                var x = new Thrift.TApplicationException();
                x.read(this.input);
                this.input.readMessageEnd();
                throw x;
              }
              var result = new AromaService_getInbox_result();
              result.read(this.input);
              this.input.readMessageEnd();

              if (null !== result.ex1) {
                throw result.ex1;
              }
              if (null !== result.ex2) {
                throw result.ex2;
              }
              if (null !== result.ex3) {
                throw result.ex3;
              }
              if (null !== result.success) {
                return result.success;
              }
              throw 'getInbox failed: unknown result';
};
AromaServiceClient.prototype.getFullMessage = function(request, callback) {
              this.send_getFullMessage(request, callback); 
              if (!callback) {
                return this.recv_getFullMessage();
              }
};

AromaServiceClient.prototype.send_getFullMessage = function(request, callback) {
              this.output.writeMessageBegin('getFullMessage', Thrift.MessageType.CALL, this.seqid);
              var args = new AromaService_getFullMessage_args();
              args.request = request;
              args.write(this.output);
              this.output.writeMessageEnd();
              if (callback) {
                var self = this;
                this.output.getTransport().flush(true, function() {
                  var result = null;
                  try {
                    result = self.recv_getFullMessage();
                  } catch (e) {
                    result = e;
                  }
                  callback(result);
                });
              } else {
                return this.output.getTransport().flush();
              }
};

AromaServiceClient.prototype.recv_getFullMessage = function() {
              var ret = this.input.readMessageBegin();
              var fname = ret.fname;
              var mtype = ret.mtype;
              var rseqid = ret.rseqid;
              if (mtype == Thrift.MessageType.EXCEPTION) {
                var x = new Thrift.TApplicationException();
                x.read(this.input);
                this.input.readMessageEnd();
                throw x;
              }
              var result = new AromaService_getFullMessage_result();
              result.read(this.input);
              this.input.readMessageEnd();

              if (null !== result.ex1) {
                throw result.ex1;
              }
              if (null !== result.ex2) {
                throw result.ex2;
              }
              if (null !== result.ex3) {
                throw result.ex3;
              }
              if (null !== result.success) {
                return result.success;
              }
              throw 'getFullMessage failed: unknown result';
};
AromaServiceClient.prototype.getMedia = function(request, callback) {
              this.send_getMedia(request, callback); 
              if (!callback) {
                return this.recv_getMedia();
              }
};

AromaServiceClient.prototype.send_getMedia = function(request, callback) {
              this.output.writeMessageBegin('getMedia', Thrift.MessageType.CALL, this.seqid);
              var args = new AromaService_getMedia_args();
              args.request = request;
              args.write(this.output);
              this.output.writeMessageEnd();
              if (callback) {
                var self = this;
                this.output.getTransport().flush(true, function() {
                  var result = null;
                  try {
                    result = self.recv_getMedia();
                  } catch (e) {
                    result = e;
                  }
                  callback(result);
                });
              } else {
                return this.output.getTransport().flush();
              }
};

AromaServiceClient.prototype.recv_getMedia = function() {
              var ret = this.input.readMessageBegin();
              var fname = ret.fname;
              var mtype = ret.mtype;
              var rseqid = ret.rseqid;
              if (mtype == Thrift.MessageType.EXCEPTION) {
                var x = new Thrift.TApplicationException();
                x.read(this.input);
                this.input.readMessageEnd();
                throw x;
              }
              var result = new AromaService_getMedia_result();
              result.read(this.input);
              this.input.readMessageEnd();

              if (null !== result.ex1) {
                throw result.ex1;
              }
              if (null !== result.ex2) {
                throw result.ex2;
              }
              if (null !== result.ex3) {
                throw result.ex3;
              }
              if (null !== result.ex4) {
                throw result.ex4;
              }
              if (null !== result.ex5) {
                throw result.ex5;
              }
              if (null !== result.success) {
                return result.success;
              }
              throw 'getMedia failed: unknown result';
};
AromaServiceClient.prototype.getMyApplications = function(request, callback) {
              this.send_getMyApplications(request, callback); 
              if (!callback) {
                return this.recv_getMyApplications();
              }
};

AromaServiceClient.prototype.send_getMyApplications = function(request, callback) {
              this.output.writeMessageBegin('getMyApplications', Thrift.MessageType.CALL, this.seqid);
              var args = new AromaService_getMyApplications_args();
              args.request = request;
              args.write(this.output);
              this.output.writeMessageEnd();
              if (callback) {
                var self = this;
                this.output.getTransport().flush(true, function() {
                  var result = null;
                  try {
                    result = self.recv_getMyApplications();
                  } catch (e) {
                    result = e;
                  }
                  callback(result);
                });
              } else {
                return this.output.getTransport().flush();
              }
};

AromaServiceClient.prototype.recv_getMyApplications = function() {
              var ret = this.input.readMessageBegin();
              var fname = ret.fname;
              var mtype = ret.mtype;
              var rseqid = ret.rseqid;
              if (mtype == Thrift.MessageType.EXCEPTION) {
                var x = new Thrift.TApplicationException();
                x.read(this.input);
                this.input.readMessageEnd();
                throw x;
              }
              var result = new AromaService_getMyApplications_result();
              result.read(this.input);
              this.input.readMessageEnd();

              if (null !== result.ex1) {
                throw result.ex1;
              }
              if (null !== result.ex2) {
                throw result.ex2;
              }
              if (null !== result.ex3) {
                throw result.ex3;
              }
              if (null !== result.success) {
                return result.success;
              }
              throw 'getMyApplications failed: unknown result';
};
AromaServiceClient.prototype.getMySavedChannels = function(request, callback) {
              this.send_getMySavedChannels(request, callback); 
              if (!callback) {
                return this.recv_getMySavedChannels();
              }
};

AromaServiceClient.prototype.send_getMySavedChannels = function(request, callback) {
              this.output.writeMessageBegin('getMySavedChannels', Thrift.MessageType.CALL, this.seqid);
              var args = new AromaService_getMySavedChannels_args();
              args.request = request;
              args.write(this.output);
              this.output.writeMessageEnd();
              if (callback) {
                var self = this;
                this.output.getTransport().flush(true, function() {
                  var result = null;
                  try {
                    result = self.recv_getMySavedChannels();
                  } catch (e) {
                    result = e;
                  }
                  callback(result);
                });
              } else {
                return this.output.getTransport().flush();
              }
};

AromaServiceClient.prototype.recv_getMySavedChannels = function() {
              var ret = this.input.readMessageBegin();
              var fname = ret.fname;
              var mtype = ret.mtype;
              var rseqid = ret.rseqid;
              if (mtype == Thrift.MessageType.EXCEPTION) {
                var x = new Thrift.TApplicationException();
                x.read(this.input);
                this.input.readMessageEnd();
                throw x;
              }
              var result = new AromaService_getMySavedChannels_result();
              result.read(this.input);
              this.input.readMessageEnd();

              if (null !== result.ex1) {
                throw result.ex1;
              }
              if (null !== result.ex2) {
                throw result.ex2;
              }
              if (null !== result.ex3) {
                throw result.ex3;
              }
              if (null !== result.success) {
                return result.success;
              }
              throw 'getMySavedChannels failed: unknown result';
};
AromaServiceClient.prototype.getUserInfo = function(request, callback) {
              this.send_getUserInfo(request, callback); 
              if (!callback) {
                return this.recv_getUserInfo();
              }
};

AromaServiceClient.prototype.send_getUserInfo = function(request, callback) {
              this.output.writeMessageBegin('getUserInfo', Thrift.MessageType.CALL, this.seqid);
              var args = new AromaService_getUserInfo_args();
              args.request = request;
              args.write(this.output);
              this.output.writeMessageEnd();
              if (callback) {
                var self = this;
                this.output.getTransport().flush(true, function() {
                  var result = null;
                  try {
                    result = self.recv_getUserInfo();
                  } catch (e) {
                    result = e;
                  }
                  callback(result);
                });
              } else {
                return this.output.getTransport().flush();
              }
};

AromaServiceClient.prototype.recv_getUserInfo = function() {
              var ret = this.input.readMessageBegin();
              var fname = ret.fname;
              var mtype = ret.mtype;
              var rseqid = ret.rseqid;
              if (mtype == Thrift.MessageType.EXCEPTION) {
                var x = new Thrift.TApplicationException();
                x.read(this.input);
                this.input.readMessageEnd();
                throw x;
              }
              var result = new AromaService_getUserInfo_result();
              result.read(this.input);
              this.input.readMessageEnd();

              if (null !== result.ex1) {
                throw result.ex1;
              }
              if (null !== result.ex2) {
                throw result.ex2;
              }
              if (null !== result.ex3) {
                throw result.ex3;
              }
              if (null !== result.ex4) {
                throw result.ex4;
              }
              if (null !== result.ex5) {
                throw result.ex5;
              }
              if (null !== result.success) {
                return result.success;
              }
              throw 'getUserInfo failed: unknown result';
};
AromaServiceClient.prototype.searchForApplications = function(request, callback) {
              this.send_searchForApplications(request, callback); 
              if (!callback) {
                return this.recv_searchForApplications();
              }
};

AromaServiceClient.prototype.send_searchForApplications = function(request, callback) {
              this.output.writeMessageBegin('searchForApplications', Thrift.MessageType.CALL, this.seqid);
              var args = new AromaService_searchForApplications_args();
              args.request = request;
              args.write(this.output);
              this.output.writeMessageEnd();
              if (callback) {
                var self = this;
                this.output.getTransport().flush(true, function() {
                  var result = null;
                  try {
                    result = self.recv_searchForApplications();
                  } catch (e) {
                    result = e;
                  }
                  callback(result);
                });
              } else {
                return this.output.getTransport().flush();
              }
};

AromaServiceClient.prototype.recv_searchForApplications = function() {
              var ret = this.input.readMessageBegin();
              var fname = ret.fname;
              var mtype = ret.mtype;
              var rseqid = ret.rseqid;
              if (mtype == Thrift.MessageType.EXCEPTION) {
                var x = new Thrift.TApplicationException();
                x.read(this.input);
                this.input.readMessageEnd();
                throw x;
              }
              var result = new AromaService_searchForApplications_result();
              result.read(this.input);
              this.input.readMessageEnd();

              if (null !== result.ex1) {
                throw result.ex1;
              }
              if (null !== result.ex2) {
                throw result.ex2;
              }
              if (null !== result.ex3) {
                throw result.ex3;
              }
              if (null !== result.ex4) {
                throw result.ex4;
              }
              if (null !== result.success) {
                return result.success;
              }
              throw 'searchForApplications failed: unknown result';
};
