//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


SendNotificationRequest = function(args) {
  this.token = null;
  this.event = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new AuthenticationToken(args.token);
    }
    if (args.event !== undefined && args.event !== null) {
      this.event = new Event(args.event);
    }
  }
};
SendNotificationRequest.prototype = {};
SendNotificationRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new AuthenticationToken();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.event = new Event();
        this.event.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SendNotificationRequest.prototype.write = function(output) {
  output.writeStructBegin('SendNotificationRequest');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  if (this.event !== null && this.event !== undefined) {
    output.writeFieldBegin('event', Thrift.Type.STRUCT, 2);
    this.event.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SendNotificationResponse = function(args) {
};
SendNotificationResponse.prototype = {};
SendNotificationResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SendNotificationResponse.prototype.write = function(output) {
  output.writeStructBegin('SendNotificationResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

API_VERSION = 1.5;
SERVICE_PORT = 9009;
PRODUCTION_ENDPOINT = new TcpEndpoint({
'hostname' : 'notification-srv.banana.aroma.tech','port' : 9009});
BETA_ENDPOINT = new TcpEndpoint({
'hostname' : 'notification-srv.beta.banana.aroma.tech','port' : 9009});
