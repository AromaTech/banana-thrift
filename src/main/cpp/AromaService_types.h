/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AromaService_TYPES_H
#define AromaService_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "Authentication_types.h"
#include "Aroma_types.h"
#include "Channels_types.h"
#include "Endpoint_types.h"
#include "Events_types.h"
#include "Exceptions_types.h"
#include "Reactions_types.h"


namespace aroma { namespace thrift { namespace service {

typedef  ::tech::aroma::thrift::int int;

typedef  ::tech::aroma::thrift::long long;

typedef  ::tech::aroma::thrift::timestamp timestamp;

typedef  ::tech::aroma::thrift::uuid uuid;

typedef class  ::aroma::thrift::authentication::ApplicationToken ApplicationToken;

typedef class  ::aroma::thrift::authentication::AuthenticationToken AuthenticationToken;

typedef class  ::aroma::thrift::authentication::UserToken UserToken;

typedef class  ::tech::aroma::thrift::Application Application;

typedef class  ::tech::aroma::thrift::Image Image;

typedef  ::tech::aroma::thrift::Urgency::type Urgency;

typedef class  ::tech::aroma::thrift::User User;

typedef class  ::aroma::thrift::channels::AromaChannel AromaChannel;

typedef class  ::aroma::thrift::endpoint::Endpoint Endpoint;

typedef class  ::aroma::thrift::events::HealthCheckFailed HealthCheckFailed;

typedef class  ::tech::aroma::thrift::reactions::Reaction Reaction;

typedef class  ::aroma::thrift::exceptions::AccountAlreadyExistsException AccountAlreadyExistsException;

typedef class  ::aroma::thrift::exceptions::ApplicationAlreadyRegisteredException ApplicationAlreadyRegisteredException;

typedef class  ::aroma::thrift::exceptions::ApplicationDoesNotExistException ApplicationDoesNotExistException;

typedef class  ::aroma::thrift::exceptions::ChannelDoesNotExistException ChannelDoesNotExistException;

typedef class  ::aroma::thrift::exceptions::CustomChannelUnreachableException CustomChannelUnreachableException;

typedef class  ::aroma::thrift::exceptions::DoesNotExistException DoesNotExistException;

typedef class  ::aroma::thrift::exceptions::InvalidArgumentException InvalidArgumentException;

typedef class  ::aroma::thrift::exceptions::InvalidCredentialsException InvalidCredentialsException;

typedef class  ::aroma::thrift::exceptions::InvalidTokenException InvalidTokenException;

typedef class  ::aroma::thrift::exceptions::MessageDoesNotExistException MessageDoesNotExistException;

typedef class  ::aroma::thrift::exceptions::OperationFailedException OperationFailedException;

typedef class  ::aroma::thrift::exceptions::UnauthorizedException UnauthorizedException;

typedef class  ::aroma::thrift::exceptions::UserDoesNotExistException UserDoesNotExistException;

class CheckExistsRequest;

class CheckExistsResponse;

class DeleteActivityRequest;

class DeleteActivityResponse;

class DeleteApplicationRequest;

class DeleteApplicationResponse;

class DeleteMessageRequest;

class DeleteMessageResponse;

class DismissMessageRequest;

class DismissMessageResponse;

class ProvisionApplicationRequest;

class ProvisionApplicationResponse;

class RegenerateApplicationTokenRequest;

class RegenerateApplicationTokenResponse;

class RegisterHealthCheckRequest;

class RegisterHealthCheckResponse;

class RemoveSavedChannelRequest;

class RemoveSavedChannelResponse;

class RenewApplicationTokenRequest;

class RenewApplicationTokenResponse;

class SaveChannelRequest;

class SaveChannelResponse;

class SignInRequest;

class SignInResponse;

class SignUpRequest;

class SignUpResponse;

class SnoozeChannelRequest;

class SnoozeChannelResponse;

class FollowApplicationRequest;

class FollowApplicationResponse;

class UnfollowApplicationRequest;

class UnfollowApplicationResponse;

class UpdateApplicationRequest;

class UpdateApplicationResponse;

class UpdateReactionsRequest;

class UpdateReactionsResponse;

class GetApplicationInfoRequest;

class GetApplicationInfoResponse;

class GetBuzzRequest;

class GetBuzzResponse;

class GetDashboardRequest;

class GetDashboardResponse;

class GetInboxRequest;

class GetInboxResponse;

class GetApplicationMessagesRequest;

class GetApplicationMessagesResponse;

class GetFullMessageRequest;

class GetFullMessageResponse;

class GetMediaRequest;

class GetMediaResponse;

class GetApplicationsFollowedByRequest;

class GetApplicationsFollowedByResponse;

class GetApplicationsOwnedByRequest;

class GetApplicationsOwnedByResponse;

class GetMySavedChannelsRequest;

class GetMySavedChannelsResponse;

class GetActivityRequest;

class GetActivityResponse;

class GetReactionsRequest;

class GetReactionsResponse;

class GetServiceAnnouncementsRequest;

class GetServiceAnnouncementsResponse;

class GetUserInfoRequest;

class GetUserInfoResponse;

class SearchForApplicationsRequest;

class SearchForApplicationsResponse;

typedef struct _CheckExistsRequest__isset {
  _CheckExistsRequest__isset() : emailAddress(false) {}
  bool emailAddress :1;
} _CheckExistsRequest__isset;

class CheckExistsRequest {
 public:

  CheckExistsRequest(const CheckExistsRequest&);
  CheckExistsRequest& operator=(const CheckExistsRequest&);
  CheckExistsRequest() : emailAddress() {
  }

  virtual ~CheckExistsRequest() throw();
  std::string emailAddress;

  _CheckExistsRequest__isset __isset;

  void __set_emailAddress(const std::string& val);

  bool operator == (const CheckExistsRequest & rhs) const
  {
    if (!(emailAddress == rhs.emailAddress))
      return false;
    return true;
  }
  bool operator != (const CheckExistsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CheckExistsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CheckExistsRequest &a, CheckExistsRequest &b);

inline std::ostream& operator<<(std::ostream& out, const CheckExistsRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CheckExistsResponse__isset {
  _CheckExistsResponse__isset() : exists(false), message(false) {}
  bool exists :1;
  bool message :1;
} _CheckExistsResponse__isset;

class CheckExistsResponse {
 public:

  CheckExistsResponse(const CheckExistsResponse&);
  CheckExistsResponse& operator=(const CheckExistsResponse&);
  CheckExistsResponse() : exists(0), message() {
  }

  virtual ~CheckExistsResponse() throw();
  bool exists;
  std::string message;

  _CheckExistsResponse__isset __isset;

  void __set_exists(const bool val);

  void __set_message(const std::string& val);

  bool operator == (const CheckExistsResponse & rhs) const
  {
    if (!(exists == rhs.exists))
      return false;
    if (__isset.message != rhs.__isset.message)
      return false;
    else if (__isset.message && !(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const CheckExistsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CheckExistsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CheckExistsResponse &a, CheckExistsResponse &b);

inline std::ostream& operator<<(std::ostream& out, const CheckExistsResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DeleteActivityRequest__isset {
  _DeleteActivityRequest__isset() : token(false), eventId(false), deleteAll(true), multipleEventIds(false) {}
  bool token :1;
  bool eventId :1;
  bool deleteAll :1;
  bool multipleEventIds :1;
} _DeleteActivityRequest__isset;

class DeleteActivityRequest {
 public:

  DeleteActivityRequest(const DeleteActivityRequest&);
  DeleteActivityRequest& operator=(const DeleteActivityRequest&);
  DeleteActivityRequest() : eventId(), deleteAll(false) {
  }

  virtual ~DeleteActivityRequest() throw();
  UserToken token;
  uuid eventId;
  bool deleteAll;
  std::vector<uuid>  multipleEventIds;

  _DeleteActivityRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_eventId(const uuid& val);

  void __set_deleteAll(const bool val);

  void __set_multipleEventIds(const std::vector<uuid> & val);

  bool operator == (const DeleteActivityRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(eventId == rhs.eventId))
      return false;
    if (__isset.deleteAll != rhs.__isset.deleteAll)
      return false;
    else if (__isset.deleteAll && !(deleteAll == rhs.deleteAll))
      return false;
    if (__isset.multipleEventIds != rhs.__isset.multipleEventIds)
      return false;
    else if (__isset.multipleEventIds && !(multipleEventIds == rhs.multipleEventIds))
      return false;
    return true;
  }
  bool operator != (const DeleteActivityRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteActivityRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeleteActivityRequest &a, DeleteActivityRequest &b);

inline std::ostream& operator<<(std::ostream& out, const DeleteActivityRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DeleteActivityResponse__isset {
  _DeleteActivityResponse__isset() : totalEventsDeleted(true) {}
  bool totalEventsDeleted :1;
} _DeleteActivityResponse__isset;

class DeleteActivityResponse {
 public:

  DeleteActivityResponse(const DeleteActivityResponse&);
  DeleteActivityResponse& operator=(const DeleteActivityResponse&);
  DeleteActivityResponse() : totalEventsDeleted(0) {
  }

  virtual ~DeleteActivityResponse() throw();
  int totalEventsDeleted;

  _DeleteActivityResponse__isset __isset;

  void __set_totalEventsDeleted(const int val);

  bool operator == (const DeleteActivityResponse & rhs) const
  {
    if (__isset.totalEventsDeleted != rhs.__isset.totalEventsDeleted)
      return false;
    else if (__isset.totalEventsDeleted && !(totalEventsDeleted == rhs.totalEventsDeleted))
      return false;
    return true;
  }
  bool operator != (const DeleteActivityResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteActivityResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeleteActivityResponse &a, DeleteActivityResponse &b);

inline std::ostream& operator<<(std::ostream& out, const DeleteActivityResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DeleteApplicationRequest__isset {
  _DeleteApplicationRequest__isset() : token(false), applicationId(false) {}
  bool token :1;
  bool applicationId :1;
} _DeleteApplicationRequest__isset;

class DeleteApplicationRequest {
 public:

  DeleteApplicationRequest(const DeleteApplicationRequest&);
  DeleteApplicationRequest& operator=(const DeleteApplicationRequest&);
  DeleteApplicationRequest() : applicationId() {
  }

  virtual ~DeleteApplicationRequest() throw();
  UserToken token;
  uuid applicationId;

  _DeleteApplicationRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_applicationId(const uuid& val);

  bool operator == (const DeleteApplicationRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(applicationId == rhs.applicationId))
      return false;
    return true;
  }
  bool operator != (const DeleteApplicationRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteApplicationRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeleteApplicationRequest &a, DeleteApplicationRequest &b);

inline std::ostream& operator<<(std::ostream& out, const DeleteApplicationRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DeleteApplicationResponse__isset {
  _DeleteApplicationResponse__isset() : message(true) {}
  bool message :1;
} _DeleteApplicationResponse__isset;

class DeleteApplicationResponse {
 public:

  DeleteApplicationResponse(const DeleteApplicationResponse&);
  DeleteApplicationResponse& operator=(const DeleteApplicationResponse&);
  DeleteApplicationResponse() : message("Success") {
  }

  virtual ~DeleteApplicationResponse() throw();
  std::string message;

  _DeleteApplicationResponse__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const DeleteApplicationResponse & rhs) const
  {
    if (__isset.message != rhs.__isset.message)
      return false;
    else if (__isset.message && !(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const DeleteApplicationResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteApplicationResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeleteApplicationResponse &a, DeleteApplicationResponse &b);

inline std::ostream& operator<<(std::ostream& out, const DeleteApplicationResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DeleteMessageRequest__isset {
  _DeleteMessageRequest__isset() : token(false), messageId(false), applicationId(false), messageIds(true), deleteAll(true) {}
  bool token :1;
  bool messageId :1;
  bool applicationId :1;
  bool messageIds :1;
  bool deleteAll :1;
} _DeleteMessageRequest__isset;

class DeleteMessageRequest {
 public:

  DeleteMessageRequest(const DeleteMessageRequest&);
  DeleteMessageRequest& operator=(const DeleteMessageRequest&);
  DeleteMessageRequest() : messageId(), applicationId(), deleteAll(false) {

  }

  virtual ~DeleteMessageRequest() throw();
  UserToken token;
  uuid messageId;
  uuid applicationId;
  std::vector<uuid>  messageIds;
  bool deleteAll;

  _DeleteMessageRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_messageId(const uuid& val);

  void __set_applicationId(const uuid& val);

  void __set_messageIds(const std::vector<uuid> & val);

  void __set_deleteAll(const bool val);

  bool operator == (const DeleteMessageRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(messageId == rhs.messageId))
      return false;
    if (!(applicationId == rhs.applicationId))
      return false;
    if (__isset.messageIds != rhs.__isset.messageIds)
      return false;
    else if (__isset.messageIds && !(messageIds == rhs.messageIds))
      return false;
    if (__isset.deleteAll != rhs.__isset.deleteAll)
      return false;
    else if (__isset.deleteAll && !(deleteAll == rhs.deleteAll))
      return false;
    return true;
  }
  bool operator != (const DeleteMessageRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteMessageRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeleteMessageRequest &a, DeleteMessageRequest &b);

inline std::ostream& operator<<(std::ostream& out, const DeleteMessageRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DeleteMessageResponse__isset {
  _DeleteMessageResponse__isset() : messagesDeleted(true) {}
  bool messagesDeleted :1;
} _DeleteMessageResponse__isset;

class DeleteMessageResponse {
 public:

  DeleteMessageResponse(const DeleteMessageResponse&);
  DeleteMessageResponse& operator=(const DeleteMessageResponse&);
  DeleteMessageResponse() : messagesDeleted(0) {
  }

  virtual ~DeleteMessageResponse() throw();
  int messagesDeleted;

  _DeleteMessageResponse__isset __isset;

  void __set_messagesDeleted(const int val);

  bool operator == (const DeleteMessageResponse & rhs) const
  {
    if (__isset.messagesDeleted != rhs.__isset.messagesDeleted)
      return false;
    else if (__isset.messagesDeleted && !(messagesDeleted == rhs.messagesDeleted))
      return false;
    return true;
  }
  bool operator != (const DeleteMessageResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteMessageResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeleteMessageResponse &a, DeleteMessageResponse &b);

inline std::ostream& operator<<(std::ostream& out, const DeleteMessageResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DismissMessageRequest__isset {
  _DismissMessageRequest__isset() : token(false), messageId(false), applicationId(false), messageIds(true), dismissAll(true) {}
  bool token :1;
  bool messageId :1;
  bool applicationId :1;
  bool messageIds :1;
  bool dismissAll :1;
} _DismissMessageRequest__isset;

class DismissMessageRequest {
 public:

  DismissMessageRequest(const DismissMessageRequest&);
  DismissMessageRequest& operator=(const DismissMessageRequest&);
  DismissMessageRequest() : messageId(), applicationId(), dismissAll(false) {

  }

  virtual ~DismissMessageRequest() throw();
  UserToken token;
  uuid messageId;
  uuid applicationId;
  std::vector<uuid>  messageIds;
  bool dismissAll;

  _DismissMessageRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_messageId(const uuid& val);

  void __set_applicationId(const uuid& val);

  void __set_messageIds(const std::vector<uuid> & val);

  void __set_dismissAll(const bool val);

  bool operator == (const DismissMessageRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(messageId == rhs.messageId))
      return false;
    if (!(applicationId == rhs.applicationId))
      return false;
    if (__isset.messageIds != rhs.__isset.messageIds)
      return false;
    else if (__isset.messageIds && !(messageIds == rhs.messageIds))
      return false;
    if (__isset.dismissAll != rhs.__isset.dismissAll)
      return false;
    else if (__isset.dismissAll && !(dismissAll == rhs.dismissAll))
      return false;
    return true;
  }
  bool operator != (const DismissMessageRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DismissMessageRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DismissMessageRequest &a, DismissMessageRequest &b);

inline std::ostream& operator<<(std::ostream& out, const DismissMessageRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DismissMessageResponse__isset {
  _DismissMessageResponse__isset() : messagesDismissed(true) {}
  bool messagesDismissed :1;
} _DismissMessageResponse__isset;

class DismissMessageResponse {
 public:

  DismissMessageResponse(const DismissMessageResponse&);
  DismissMessageResponse& operator=(const DismissMessageResponse&);
  DismissMessageResponse() : messagesDismissed(0) {
  }

  virtual ~DismissMessageResponse() throw();
  int messagesDismissed;

  _DismissMessageResponse__isset __isset;

  void __set_messagesDismissed(const int val);

  bool operator == (const DismissMessageResponse & rhs) const
  {
    if (__isset.messagesDismissed != rhs.__isset.messagesDismissed)
      return false;
    else if (__isset.messagesDismissed && !(messagesDismissed == rhs.messagesDismissed))
      return false;
    return true;
  }
  bool operator != (const DismissMessageResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DismissMessageResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DismissMessageResponse &a, DismissMessageResponse &b);

inline std::ostream& operator<<(std::ostream& out, const DismissMessageResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ProvisionApplicationRequest__isset {
  _ProvisionApplicationRequest__isset() : token(false), applicationName(false), programmingLanguage(false), organizationId(false), icon(false), owners(false), applicationDescription(true), tier(true) {}
  bool token :1;
  bool applicationName :1;
  bool programmingLanguage :1;
  bool organizationId :1;
  bool icon :1;
  bool owners :1;
  bool applicationDescription :1;
  bool tier :1;
} _ProvisionApplicationRequest__isset;

class ProvisionApplicationRequest {
 public:

  ProvisionApplicationRequest(const ProvisionApplicationRequest&);
  ProvisionApplicationRequest& operator=(const ProvisionApplicationRequest&);
  ProvisionApplicationRequest() : applicationName(), programmingLanguage(( ::tech::aroma::thrift::ProgrammingLanguage::type)0), organizationId(), applicationDescription(""), tier(( ::tech::aroma::thrift::Tier::type)1) {
    tier = ( ::tech::aroma::thrift::Tier::type)1;

  }

  virtual ~ProvisionApplicationRequest() throw();
  UserToken token;
  std::string applicationName;
   ::tech::aroma::thrift::ProgrammingLanguage::type programmingLanguage;
  uuid organizationId;
  Image icon;
  std::set<uuid>  owners;
  std::string applicationDescription;
   ::tech::aroma::thrift::Tier::type tier;

  _ProvisionApplicationRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_applicationName(const std::string& val);

  void __set_programmingLanguage(const  ::tech::aroma::thrift::ProgrammingLanguage::type val);

  void __set_organizationId(const uuid& val);

  void __set_icon(const Image& val);

  void __set_owners(const std::set<uuid> & val);

  void __set_applicationDescription(const std::string& val);

  void __set_tier(const  ::tech::aroma::thrift::Tier::type val);

  bool operator == (const ProvisionApplicationRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(applicationName == rhs.applicationName))
      return false;
    if (__isset.programmingLanguage != rhs.__isset.programmingLanguage)
      return false;
    else if (__isset.programmingLanguage && !(programmingLanguage == rhs.programmingLanguage))
      return false;
    if (!(organizationId == rhs.organizationId))
      return false;
    if (__isset.icon != rhs.__isset.icon)
      return false;
    else if (__isset.icon && !(icon == rhs.icon))
      return false;
    if (__isset.owners != rhs.__isset.owners)
      return false;
    else if (__isset.owners && !(owners == rhs.owners))
      return false;
    if (__isset.applicationDescription != rhs.__isset.applicationDescription)
      return false;
    else if (__isset.applicationDescription && !(applicationDescription == rhs.applicationDescription))
      return false;
    if (__isset.tier != rhs.__isset.tier)
      return false;
    else if (__isset.tier && !(tier == rhs.tier))
      return false;
    return true;
  }
  bool operator != (const ProvisionApplicationRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvisionApplicationRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ProvisionApplicationRequest &a, ProvisionApplicationRequest &b);

inline std::ostream& operator<<(std::ostream& out, const ProvisionApplicationRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ProvisionApplicationResponse__isset {
  _ProvisionApplicationResponse__isset() : applicationToken(false), applicationInfo(false) {}
  bool applicationToken :1;
  bool applicationInfo :1;
} _ProvisionApplicationResponse__isset;

class ProvisionApplicationResponse {
 public:

  ProvisionApplicationResponse(const ProvisionApplicationResponse&);
  ProvisionApplicationResponse& operator=(const ProvisionApplicationResponse&);
  ProvisionApplicationResponse() {
  }

  virtual ~ProvisionApplicationResponse() throw();
  ApplicationToken applicationToken;
  Application applicationInfo;

  _ProvisionApplicationResponse__isset __isset;

  void __set_applicationToken(const ApplicationToken& val);

  void __set_applicationInfo(const Application& val);

  bool operator == (const ProvisionApplicationResponse & rhs) const
  {
    if (!(applicationToken == rhs.applicationToken))
      return false;
    if (!(applicationInfo == rhs.applicationInfo))
      return false;
    return true;
  }
  bool operator != (const ProvisionApplicationResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvisionApplicationResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ProvisionApplicationResponse &a, ProvisionApplicationResponse &b);

inline std::ostream& operator<<(std::ostream& out, const ProvisionApplicationResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RegenerateApplicationTokenRequest__isset {
  _RegenerateApplicationTokenRequest__isset() : token(false), applicationId(false) {}
  bool token :1;
  bool applicationId :1;
} _RegenerateApplicationTokenRequest__isset;

class RegenerateApplicationTokenRequest {
 public:

  RegenerateApplicationTokenRequest(const RegenerateApplicationTokenRequest&);
  RegenerateApplicationTokenRequest& operator=(const RegenerateApplicationTokenRequest&);
  RegenerateApplicationTokenRequest() : applicationId() {
  }

  virtual ~RegenerateApplicationTokenRequest() throw();
  UserToken token;
  uuid applicationId;

  _RegenerateApplicationTokenRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_applicationId(const uuid& val);

  bool operator == (const RegenerateApplicationTokenRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(applicationId == rhs.applicationId))
      return false;
    return true;
  }
  bool operator != (const RegenerateApplicationTokenRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegenerateApplicationTokenRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RegenerateApplicationTokenRequest &a, RegenerateApplicationTokenRequest &b);

inline std::ostream& operator<<(std::ostream& out, const RegenerateApplicationTokenRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RegenerateApplicationTokenResponse__isset {
  _RegenerateApplicationTokenResponse__isset() : applicationToken(false) {}
  bool applicationToken :1;
} _RegenerateApplicationTokenResponse__isset;

class RegenerateApplicationTokenResponse {
 public:

  RegenerateApplicationTokenResponse(const RegenerateApplicationTokenResponse&);
  RegenerateApplicationTokenResponse& operator=(const RegenerateApplicationTokenResponse&);
  RegenerateApplicationTokenResponse() {
  }

  virtual ~RegenerateApplicationTokenResponse() throw();
  ApplicationToken applicationToken;

  _RegenerateApplicationTokenResponse__isset __isset;

  void __set_applicationToken(const ApplicationToken& val);

  bool operator == (const RegenerateApplicationTokenResponse & rhs) const
  {
    if (!(applicationToken == rhs.applicationToken))
      return false;
    return true;
  }
  bool operator != (const RegenerateApplicationTokenResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegenerateApplicationTokenResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RegenerateApplicationTokenResponse &a, RegenerateApplicationTokenResponse &b);

inline std::ostream& operator<<(std::ostream& out, const RegenerateApplicationTokenResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RegisterHealthCheckRequest__isset {
  _RegisterHealthCheckRequest__isset() : token(false), endpoint(false) {}
  bool token :1;
  bool endpoint :1;
} _RegisterHealthCheckRequest__isset;

class RegisterHealthCheckRequest {
 public:

  RegisterHealthCheckRequest(const RegisterHealthCheckRequest&);
  RegisterHealthCheckRequest& operator=(const RegisterHealthCheckRequest&);
  RegisterHealthCheckRequest() {
  }

  virtual ~RegisterHealthCheckRequest() throw();
  UserToken token;
  Endpoint endpoint;

  _RegisterHealthCheckRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_endpoint(const Endpoint& val);

  bool operator == (const RegisterHealthCheckRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(endpoint == rhs.endpoint))
      return false;
    return true;
  }
  bool operator != (const RegisterHealthCheckRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegisterHealthCheckRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RegisterHealthCheckRequest &a, RegisterHealthCheckRequest &b);

inline std::ostream& operator<<(std::ostream& out, const RegisterHealthCheckRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RegisterHealthCheckResponse__isset {
  _RegisterHealthCheckResponse__isset() : message(false), healthCheckToken(false) {}
  bool message :1;
  bool healthCheckToken :1;
} _RegisterHealthCheckResponse__isset;

class RegisterHealthCheckResponse {
 public:

  RegisterHealthCheckResponse(const RegisterHealthCheckResponse&);
  RegisterHealthCheckResponse& operator=(const RegisterHealthCheckResponse&);
  RegisterHealthCheckResponse() : message(), healthCheckToken() {
  }

  virtual ~RegisterHealthCheckResponse() throw();
  std::string message;
  std::string healthCheckToken;

  _RegisterHealthCheckResponse__isset __isset;

  void __set_message(const std::string& val);

  void __set_healthCheckToken(const std::string& val);

  bool operator == (const RegisterHealthCheckResponse & rhs) const
  {
    if (__isset.message != rhs.__isset.message)
      return false;
    else if (__isset.message && !(message == rhs.message))
      return false;
    if (__isset.healthCheckToken != rhs.__isset.healthCheckToken)
      return false;
    else if (__isset.healthCheckToken && !(healthCheckToken == rhs.healthCheckToken))
      return false;
    return true;
  }
  bool operator != (const RegisterHealthCheckResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegisterHealthCheckResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RegisterHealthCheckResponse &a, RegisterHealthCheckResponse &b);

inline std::ostream& operator<<(std::ostream& out, const RegisterHealthCheckResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RemoveSavedChannelRequest__isset {
  _RemoveSavedChannelRequest__isset() : token(false), channel(false) {}
  bool token :1;
  bool channel :1;
} _RemoveSavedChannelRequest__isset;

class RemoveSavedChannelRequest {
 public:

  RemoveSavedChannelRequest(const RemoveSavedChannelRequest&);
  RemoveSavedChannelRequest& operator=(const RemoveSavedChannelRequest&);
  RemoveSavedChannelRequest() {
  }

  virtual ~RemoveSavedChannelRequest() throw();
  UserToken token;
  AromaChannel channel;

  _RemoveSavedChannelRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_channel(const AromaChannel& val);

  bool operator == (const RemoveSavedChannelRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(channel == rhs.channel))
      return false;
    return true;
  }
  bool operator != (const RemoveSavedChannelRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoveSavedChannelRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RemoveSavedChannelRequest &a, RemoveSavedChannelRequest &b);

inline std::ostream& operator<<(std::ostream& out, const RemoveSavedChannelRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RemoveSavedChannelResponse__isset {
  _RemoveSavedChannelResponse__isset() : message(false), channel(false) {}
  bool message :1;
  bool channel :1;
} _RemoveSavedChannelResponse__isset;

class RemoveSavedChannelResponse {
 public:

  RemoveSavedChannelResponse(const RemoveSavedChannelResponse&);
  RemoveSavedChannelResponse& operator=(const RemoveSavedChannelResponse&);
  RemoveSavedChannelResponse() : message() {
  }

  virtual ~RemoveSavedChannelResponse() throw();
  std::string message;
  AromaChannel channel;

  _RemoveSavedChannelResponse__isset __isset;

  void __set_message(const std::string& val);

  void __set_channel(const AromaChannel& val);

  bool operator == (const RemoveSavedChannelResponse & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    if (__isset.channel != rhs.__isset.channel)
      return false;
    else if (__isset.channel && !(channel == rhs.channel))
      return false;
    return true;
  }
  bool operator != (const RemoveSavedChannelResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoveSavedChannelResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RemoveSavedChannelResponse &a, RemoveSavedChannelResponse &b);

inline std::ostream& operator<<(std::ostream& out, const RemoveSavedChannelResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RenewApplicationTokenRequest__isset {
  _RenewApplicationTokenRequest__isset() : token(false), applicationToken(false), newLifetime(false), applicationId(false) {}
  bool token :1;
  bool applicationToken :1;
  bool newLifetime :1;
  bool applicationId :1;
} _RenewApplicationTokenRequest__isset;

class RenewApplicationTokenRequest {
 public:

  RenewApplicationTokenRequest(const RenewApplicationTokenRequest&);
  RenewApplicationTokenRequest& operator=(const RenewApplicationTokenRequest&);
  RenewApplicationTokenRequest() : applicationId() {
  }

  virtual ~RenewApplicationTokenRequest() throw();
  UserToken token;
  ApplicationToken applicationToken;
   ::tech::aroma::thrift::LengthOfTime newLifetime;
  uuid applicationId;

  _RenewApplicationTokenRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_applicationToken(const ApplicationToken& val);

  void __set_newLifetime(const  ::tech::aroma::thrift::LengthOfTime& val);

  void __set_applicationId(const uuid& val);

  bool operator == (const RenewApplicationTokenRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(applicationToken == rhs.applicationToken))
      return false;
    if (!(newLifetime == rhs.newLifetime))
      return false;
    if (!(applicationId == rhs.applicationId))
      return false;
    return true;
  }
  bool operator != (const RenewApplicationTokenRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenewApplicationTokenRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RenewApplicationTokenRequest &a, RenewApplicationTokenRequest &b);

inline std::ostream& operator<<(std::ostream& out, const RenewApplicationTokenRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RenewApplicationTokenResponse__isset {
  _RenewApplicationTokenResponse__isset() : serviceToken(false) {}
  bool serviceToken :1;
} _RenewApplicationTokenResponse__isset;

class RenewApplicationTokenResponse {
 public:

  RenewApplicationTokenResponse(const RenewApplicationTokenResponse&);
  RenewApplicationTokenResponse& operator=(const RenewApplicationTokenResponse&);
  RenewApplicationTokenResponse() {
  }

  virtual ~RenewApplicationTokenResponse() throw();
  ApplicationToken serviceToken;

  _RenewApplicationTokenResponse__isset __isset;

  void __set_serviceToken(const ApplicationToken& val);

  bool operator == (const RenewApplicationTokenResponse & rhs) const
  {
    if (!(serviceToken == rhs.serviceToken))
      return false;
    return true;
  }
  bool operator != (const RenewApplicationTokenResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenewApplicationTokenResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RenewApplicationTokenResponse &a, RenewApplicationTokenResponse &b);

inline std::ostream& operator<<(std::ostream& out, const RenewApplicationTokenResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SaveChannelRequest__isset {
  _SaveChannelRequest__isset() : token(false), channel(false) {}
  bool token :1;
  bool channel :1;
} _SaveChannelRequest__isset;

class SaveChannelRequest {
 public:

  SaveChannelRequest(const SaveChannelRequest&);
  SaveChannelRequest& operator=(const SaveChannelRequest&);
  SaveChannelRequest() {
  }

  virtual ~SaveChannelRequest() throw();
  UserToken token;
  AromaChannel channel;

  _SaveChannelRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_channel(const AromaChannel& val);

  bool operator == (const SaveChannelRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(channel == rhs.channel))
      return false;
    return true;
  }
  bool operator != (const SaveChannelRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SaveChannelRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SaveChannelRequest &a, SaveChannelRequest &b);

inline std::ostream& operator<<(std::ostream& out, const SaveChannelRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SaveChannelResponse__isset {
  _SaveChannelResponse__isset() : message(false), channel(false) {}
  bool message :1;
  bool channel :1;
} _SaveChannelResponse__isset;

class SaveChannelResponse {
 public:

  SaveChannelResponse(const SaveChannelResponse&);
  SaveChannelResponse& operator=(const SaveChannelResponse&);
  SaveChannelResponse() : message() {
  }

  virtual ~SaveChannelResponse() throw();
  std::string message;
  AromaChannel channel;

  _SaveChannelResponse__isset __isset;

  void __set_message(const std::string& val);

  void __set_channel(const AromaChannel& val);

  bool operator == (const SaveChannelResponse & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    if (__isset.channel != rhs.__isset.channel)
      return false;
    else if (__isset.channel && !(channel == rhs.channel))
      return false;
    return true;
  }
  bool operator != (const SaveChannelResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SaveChannelResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SaveChannelResponse &a, SaveChannelResponse &b);

inline std::ostream& operator<<(std::ostream& out, const SaveChannelResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SignInRequest__isset {
  _SignInRequest__isset() : credentials(false), emailAddress(false) {}
  bool credentials :1;
  bool emailAddress :1;
} _SignInRequest__isset;

class SignInRequest {
 public:

  SignInRequest(const SignInRequest&);
  SignInRequest& operator=(const SignInRequest&);
  SignInRequest() : emailAddress() {
  }

  virtual ~SignInRequest() throw();
   ::aroma::thrift::authentication::Credentials credentials;
  std::string emailAddress;

  _SignInRequest__isset __isset;

  void __set_credentials(const  ::aroma::thrift::authentication::Credentials& val);

  void __set_emailAddress(const std::string& val);

  bool operator == (const SignInRequest & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(emailAddress == rhs.emailAddress))
      return false;
    return true;
  }
  bool operator != (const SignInRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SignInRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SignInRequest &a, SignInRequest &b);

inline std::ostream& operator<<(std::ostream& out, const SignInRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SignInResponse__isset {
  _SignInResponse__isset() : userToken(false) {}
  bool userToken :1;
} _SignInResponse__isset;

class SignInResponse {
 public:

  SignInResponse(const SignInResponse&);
  SignInResponse& operator=(const SignInResponse&);
  SignInResponse() {
  }

  virtual ~SignInResponse() throw();
  UserToken userToken;

  _SignInResponse__isset __isset;

  void __set_userToken(const UserToken& val);

  bool operator == (const SignInResponse & rhs) const
  {
    if (!(userToken == rhs.userToken))
      return false;
    return true;
  }
  bool operator != (const SignInResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SignInResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SignInResponse &a, SignInResponse &b);

inline std::ostream& operator<<(std::ostream& out, const SignInResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SignUpRequest__isset {
  _SignUpRequest__isset() : email(false), name(false), firstName(false), middleName(false), lastName(false), username(false), organizationId(false), credentials(false), mainRole(false), birthDate(false), githubProfile(false), profileImage(false) {}
  bool email :1;
  bool name :1;
  bool firstName :1;
  bool middleName :1;
  bool lastName :1;
  bool username :1;
  bool organizationId :1;
  bool credentials :1;
  bool mainRole :1;
  bool birthDate :1;
  bool githubProfile :1;
  bool profileImage :1;
} _SignUpRequest__isset;

class SignUpRequest {
 public:

  SignUpRequest(const SignUpRequest&);
  SignUpRequest& operator=(const SignUpRequest&);
  SignUpRequest() : email(), name(), firstName(), middleName(), lastName(), username(), organizationId(), mainRole(( ::tech::aroma::thrift::Role::type)0), birthDate(0), githubProfile() {
  }

  virtual ~SignUpRequest() throw();
  std::string email;
  std::string name;
  std::string firstName;
  std::string middleName;
  std::string lastName;
  std::string username;
  uuid organizationId;
   ::aroma::thrift::authentication::Credentials credentials;
   ::tech::aroma::thrift::Role::type mainRole;
  timestamp birthDate;
  std::string githubProfile;
  Image profileImage;

  _SignUpRequest__isset __isset;

  void __set_email(const std::string& val);

  void __set_name(const std::string& val);

  void __set_firstName(const std::string& val);

  void __set_middleName(const std::string& val);

  void __set_lastName(const std::string& val);

  void __set_username(const std::string& val);

  void __set_organizationId(const uuid& val);

  void __set_credentials(const  ::aroma::thrift::authentication::Credentials& val);

  void __set_mainRole(const  ::tech::aroma::thrift::Role::type val);

  void __set_birthDate(const timestamp val);

  void __set_githubProfile(const std::string& val);

  void __set_profileImage(const Image& val);

  bool operator == (const SignUpRequest & rhs) const
  {
    if (!(email == rhs.email))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(firstName == rhs.firstName))
      return false;
    if (!(middleName == rhs.middleName))
      return false;
    if (!(lastName == rhs.lastName))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(organizationId == rhs.organizationId))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(mainRole == rhs.mainRole))
      return false;
    if (__isset.birthDate != rhs.__isset.birthDate)
      return false;
    else if (__isset.birthDate && !(birthDate == rhs.birthDate))
      return false;
    if (__isset.githubProfile != rhs.__isset.githubProfile)
      return false;
    else if (__isset.githubProfile && !(githubProfile == rhs.githubProfile))
      return false;
    if (__isset.profileImage != rhs.__isset.profileImage)
      return false;
    else if (__isset.profileImage && !(profileImage == rhs.profileImage))
      return false;
    return true;
  }
  bool operator != (const SignUpRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SignUpRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SignUpRequest &a, SignUpRequest &b);

inline std::ostream& operator<<(std::ostream& out, const SignUpRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SignUpResponse__isset {
  _SignUpResponse__isset() : userToken(false), account(false), userId(false) {}
  bool userToken :1;
  bool account :1;
  bool userId :1;
} _SignUpResponse__isset;

class SignUpResponse {
 public:

  SignUpResponse(const SignUpResponse&);
  SignUpResponse& operator=(const SignUpResponse&);
  SignUpResponse() : userId() {
  }

  virtual ~SignUpResponse() throw();
  UserToken userToken;
   ::aroma::thrift::authentication::AromaAccount account;
  uuid userId;

  _SignUpResponse__isset __isset;

  void __set_userToken(const UserToken& val);

  void __set_account(const  ::aroma::thrift::authentication::AromaAccount& val);

  void __set_userId(const uuid& val);

  bool operator == (const SignUpResponse & rhs) const
  {
    if (!(userToken == rhs.userToken))
      return false;
    if (!(account == rhs.account))
      return false;
    if (!(userId == rhs.userId))
      return false;
    return true;
  }
  bool operator != (const SignUpResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SignUpResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SignUpResponse &a, SignUpResponse &b);

inline std::ostream& operator<<(std::ostream& out, const SignUpResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SnoozeChannelRequest__isset {
  _SnoozeChannelRequest__isset() : token(false), channel(false), applicationId(false), lengthOfTime(true) {}
  bool token :1;
  bool channel :1;
  bool applicationId :1;
  bool lengthOfTime :1;
} _SnoozeChannelRequest__isset;

class SnoozeChannelRequest {
 public:

  SnoozeChannelRequest(const SnoozeChannelRequest&);
  SnoozeChannelRequest& operator=(const SnoozeChannelRequest&);
  SnoozeChannelRequest() : applicationId() {
     ::tech::aroma::thrift::long tmp80;
    tmp80 = 4LL;

    lengthOfTime.value = tmp80;
    lengthOfTime.unit = ( ::tech::aroma::thrift::TimeUnit::type)4;

  }

  virtual ~SnoozeChannelRequest() throw();
  UserToken token;
  AromaChannel channel;
  uuid applicationId;
   ::tech::aroma::thrift::LengthOfTime lengthOfTime;

  _SnoozeChannelRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_channel(const AromaChannel& val);

  void __set_applicationId(const uuid& val);

  void __set_lengthOfTime(const  ::tech::aroma::thrift::LengthOfTime& val);

  bool operator == (const SnoozeChannelRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(channel == rhs.channel))
      return false;
    if (__isset.applicationId != rhs.__isset.applicationId)
      return false;
    else if (__isset.applicationId && !(applicationId == rhs.applicationId))
      return false;
    if (__isset.lengthOfTime != rhs.__isset.lengthOfTime)
      return false;
    else if (__isset.lengthOfTime && !(lengthOfTime == rhs.lengthOfTime))
      return false;
    return true;
  }
  bool operator != (const SnoozeChannelRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnoozeChannelRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SnoozeChannelRequest &a, SnoozeChannelRequest &b);

inline std::ostream& operator<<(std::ostream& out, const SnoozeChannelRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SnoozeChannelResponse__isset {
  _SnoozeChannelResponse__isset() : message(false) {}
  bool message :1;
} _SnoozeChannelResponse__isset;

class SnoozeChannelResponse {
 public:

  SnoozeChannelResponse(const SnoozeChannelResponse&);
  SnoozeChannelResponse& operator=(const SnoozeChannelResponse&);
  SnoozeChannelResponse() : message() {
  }

  virtual ~SnoozeChannelResponse() throw();
  std::string message;

  _SnoozeChannelResponse__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const SnoozeChannelResponse & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const SnoozeChannelResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnoozeChannelResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SnoozeChannelResponse &a, SnoozeChannelResponse &b);

inline std::ostream& operator<<(std::ostream& out, const SnoozeChannelResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _FollowApplicationRequest__isset {
  _FollowApplicationRequest__isset() : token(false), applicationId(false), organizationId(false) {}
  bool token :1;
  bool applicationId :1;
  bool organizationId :1;
} _FollowApplicationRequest__isset;

class FollowApplicationRequest {
 public:

  FollowApplicationRequest(const FollowApplicationRequest&);
  FollowApplicationRequest& operator=(const FollowApplicationRequest&);
  FollowApplicationRequest() : applicationId(), organizationId() {
  }

  virtual ~FollowApplicationRequest() throw();
  UserToken token;
  uuid applicationId;
  uuid organizationId;

  _FollowApplicationRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_applicationId(const uuid& val);

  void __set_organizationId(const uuid& val);

  bool operator == (const FollowApplicationRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(applicationId == rhs.applicationId))
      return false;
    if (__isset.organizationId != rhs.__isset.organizationId)
      return false;
    else if (__isset.organizationId && !(organizationId == rhs.organizationId))
      return false;
    return true;
  }
  bool operator != (const FollowApplicationRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FollowApplicationRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FollowApplicationRequest &a, FollowApplicationRequest &b);

inline std::ostream& operator<<(std::ostream& out, const FollowApplicationRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _FollowApplicationResponse__isset {
  _FollowApplicationResponse__isset() : message(true) {}
  bool message :1;
} _FollowApplicationResponse__isset;

class FollowApplicationResponse {
 public:

  FollowApplicationResponse(const FollowApplicationResponse&);
  FollowApplicationResponse& operator=(const FollowApplicationResponse&);
  FollowApplicationResponse() : message("Success") {
  }

  virtual ~FollowApplicationResponse() throw();
  std::string message;

  _FollowApplicationResponse__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const FollowApplicationResponse & rhs) const
  {
    if (__isset.message != rhs.__isset.message)
      return false;
    else if (__isset.message && !(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const FollowApplicationResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FollowApplicationResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FollowApplicationResponse &a, FollowApplicationResponse &b);

inline std::ostream& operator<<(std::ostream& out, const FollowApplicationResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UnfollowApplicationRequest__isset {
  _UnfollowApplicationRequest__isset() : token(false), applicationId(false), organizationId(false) {}
  bool token :1;
  bool applicationId :1;
  bool organizationId :1;
} _UnfollowApplicationRequest__isset;

class UnfollowApplicationRequest {
 public:

  UnfollowApplicationRequest(const UnfollowApplicationRequest&);
  UnfollowApplicationRequest& operator=(const UnfollowApplicationRequest&);
  UnfollowApplicationRequest() : applicationId(), organizationId() {
  }

  virtual ~UnfollowApplicationRequest() throw();
  UserToken token;
  uuid applicationId;
  uuid organizationId;

  _UnfollowApplicationRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_applicationId(const uuid& val);

  void __set_organizationId(const uuid& val);

  bool operator == (const UnfollowApplicationRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(applicationId == rhs.applicationId))
      return false;
    if (__isset.organizationId != rhs.__isset.organizationId)
      return false;
    else if (__isset.organizationId && !(organizationId == rhs.organizationId))
      return false;
    return true;
  }
  bool operator != (const UnfollowApplicationRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UnfollowApplicationRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UnfollowApplicationRequest &a, UnfollowApplicationRequest &b);

inline std::ostream& operator<<(std::ostream& out, const UnfollowApplicationRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UnfollowApplicationResponse__isset {
  _UnfollowApplicationResponse__isset() : message(true) {}
  bool message :1;
} _UnfollowApplicationResponse__isset;

class UnfollowApplicationResponse {
 public:

  UnfollowApplicationResponse(const UnfollowApplicationResponse&);
  UnfollowApplicationResponse& operator=(const UnfollowApplicationResponse&);
  UnfollowApplicationResponse() : message("Success") {
  }

  virtual ~UnfollowApplicationResponse() throw();
  std::string message;

  _UnfollowApplicationResponse__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const UnfollowApplicationResponse & rhs) const
  {
    if (__isset.message != rhs.__isset.message)
      return false;
    else if (__isset.message && !(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const UnfollowApplicationResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UnfollowApplicationResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UnfollowApplicationResponse &a, UnfollowApplicationResponse &b);

inline std::ostream& operator<<(std::ostream& out, const UnfollowApplicationResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UpdateApplicationRequest__isset {
  _UpdateApplicationRequest__isset() : token(false), updatedApplication(false) {}
  bool token :1;
  bool updatedApplication :1;
} _UpdateApplicationRequest__isset;

class UpdateApplicationRequest {
 public:

  UpdateApplicationRequest(const UpdateApplicationRequest&);
  UpdateApplicationRequest& operator=(const UpdateApplicationRequest&);
  UpdateApplicationRequest() {
  }

  virtual ~UpdateApplicationRequest() throw();
  UserToken token;
  Application updatedApplication;

  _UpdateApplicationRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_updatedApplication(const Application& val);

  bool operator == (const UpdateApplicationRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(updatedApplication == rhs.updatedApplication))
      return false;
    return true;
  }
  bool operator != (const UpdateApplicationRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateApplicationRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UpdateApplicationRequest &a, UpdateApplicationRequest &b);

inline std::ostream& operator<<(std::ostream& out, const UpdateApplicationRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UpdateApplicationResponse__isset {
  _UpdateApplicationResponse__isset() : application(false) {}
  bool application :1;
} _UpdateApplicationResponse__isset;

class UpdateApplicationResponse {
 public:

  UpdateApplicationResponse(const UpdateApplicationResponse&);
  UpdateApplicationResponse& operator=(const UpdateApplicationResponse&);
  UpdateApplicationResponse() {
  }

  virtual ~UpdateApplicationResponse() throw();
  Application application;

  _UpdateApplicationResponse__isset __isset;

  void __set_application(const Application& val);

  bool operator == (const UpdateApplicationResponse & rhs) const
  {
    if (!(application == rhs.application))
      return false;
    return true;
  }
  bool operator != (const UpdateApplicationResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateApplicationResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UpdateApplicationResponse &a, UpdateApplicationResponse &b);

inline std::ostream& operator<<(std::ostream& out, const UpdateApplicationResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UpdateReactionsRequest__isset {
  _UpdateReactionsRequest__isset() : token(false), forApp(false), reactions(true) {}
  bool token :1;
  bool forApp :1;
  bool reactions :1;
} _UpdateReactionsRequest__isset;

class UpdateReactionsRequest {
 public:

  UpdateReactionsRequest(const UpdateReactionsRequest&);
  UpdateReactionsRequest& operator=(const UpdateReactionsRequest&);
  UpdateReactionsRequest() : forApp() {

  }

  virtual ~UpdateReactionsRequest() throw();
  UserToken token;
  uuid forApp;
  std::vector<Reaction>  reactions;

  _UpdateReactionsRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_forApp(const uuid& val);

  void __set_reactions(const std::vector<Reaction> & val);

  bool operator == (const UpdateReactionsRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (__isset.forApp != rhs.__isset.forApp)
      return false;
    else if (__isset.forApp && !(forApp == rhs.forApp))
      return false;
    if (!(reactions == rhs.reactions))
      return false;
    return true;
  }
  bool operator != (const UpdateReactionsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateReactionsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UpdateReactionsRequest &a, UpdateReactionsRequest &b);

inline std::ostream& operator<<(std::ostream& out, const UpdateReactionsRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UpdateReactionsResponse__isset {
  _UpdateReactionsResponse__isset() : reactions(true) {}
  bool reactions :1;
} _UpdateReactionsResponse__isset;

class UpdateReactionsResponse {
 public:

  UpdateReactionsResponse(const UpdateReactionsResponse&);
  UpdateReactionsResponse& operator=(const UpdateReactionsResponse&);
  UpdateReactionsResponse() {

  }

  virtual ~UpdateReactionsResponse() throw();
  std::vector<Reaction>  reactions;

  _UpdateReactionsResponse__isset __isset;

  void __set_reactions(const std::vector<Reaction> & val);

  bool operator == (const UpdateReactionsResponse & rhs) const
  {
    if (__isset.reactions != rhs.__isset.reactions)
      return false;
    else if (__isset.reactions && !(reactions == rhs.reactions))
      return false;
    return true;
  }
  bool operator != (const UpdateReactionsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateReactionsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UpdateReactionsResponse &a, UpdateReactionsResponse &b);

inline std::ostream& operator<<(std::ostream& out, const UpdateReactionsResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetApplicationInfoRequest__isset {
  _GetApplicationInfoRequest__isset() : token(false), applicationId(false), includeFollowingInfo(true) {}
  bool token :1;
  bool applicationId :1;
  bool includeFollowingInfo :1;
} _GetApplicationInfoRequest__isset;

class GetApplicationInfoRequest {
 public:

  GetApplicationInfoRequest(const GetApplicationInfoRequest&);
  GetApplicationInfoRequest& operator=(const GetApplicationInfoRequest&);
  GetApplicationInfoRequest() : applicationId(), includeFollowingInfo(false) {
  }

  virtual ~GetApplicationInfoRequest() throw();
  AuthenticationToken token;
  uuid applicationId;
  bool includeFollowingInfo;

  _GetApplicationInfoRequest__isset __isset;

  void __set_token(const AuthenticationToken& val);

  void __set_applicationId(const uuid& val);

  void __set_includeFollowingInfo(const bool val);

  bool operator == (const GetApplicationInfoRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(applicationId == rhs.applicationId))
      return false;
    if (__isset.includeFollowingInfo != rhs.__isset.includeFollowingInfo)
      return false;
    else if (__isset.includeFollowingInfo && !(includeFollowingInfo == rhs.includeFollowingInfo))
      return false;
    return true;
  }
  bool operator != (const GetApplicationInfoRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetApplicationInfoRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetApplicationInfoRequest &a, GetApplicationInfoRequest &b);

inline std::ostream& operator<<(std::ostream& out, const GetApplicationInfoRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetApplicationInfoResponse__isset {
  _GetApplicationInfoResponse__isset() : applicationInfo(false), registeredChannels(false) {}
  bool applicationInfo :1;
  bool registeredChannels :1;
} _GetApplicationInfoResponse__isset;

class GetApplicationInfoResponse {
 public:

  GetApplicationInfoResponse(const GetApplicationInfoResponse&);
  GetApplicationInfoResponse& operator=(const GetApplicationInfoResponse&);
  GetApplicationInfoResponse() {
  }

  virtual ~GetApplicationInfoResponse() throw();
  Application applicationInfo;
  std::vector<AromaChannel>  registeredChannels;

  _GetApplicationInfoResponse__isset __isset;

  void __set_applicationInfo(const Application& val);

  void __set_registeredChannels(const std::vector<AromaChannel> & val);

  bool operator == (const GetApplicationInfoResponse & rhs) const
  {
    if (!(applicationInfo == rhs.applicationInfo))
      return false;
    if (!(registeredChannels == rhs.registeredChannels))
      return false;
    return true;
  }
  bool operator != (const GetApplicationInfoResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetApplicationInfoResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetApplicationInfoResponse &a, GetApplicationInfoResponse &b);

inline std::ostream& operator<<(std::ostream& out, const GetApplicationInfoResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetBuzzRequest__isset {
  _GetBuzzRequest__isset() : token(false) {}
  bool token :1;
} _GetBuzzRequest__isset;

class GetBuzzRequest {
 public:

  GetBuzzRequest(const GetBuzzRequest&);
  GetBuzzRequest& operator=(const GetBuzzRequest&);
  GetBuzzRequest() {
  }

  virtual ~GetBuzzRequest() throw();
  UserToken token;

  _GetBuzzRequest__isset __isset;

  void __set_token(const UserToken& val);

  bool operator == (const GetBuzzRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GetBuzzRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetBuzzRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetBuzzRequest &a, GetBuzzRequest &b);

inline std::ostream& operator<<(std::ostream& out, const GetBuzzRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetBuzzResponse__isset {
  _GetBuzzResponse__isset() : freshUsers(true), freshApplications(true), failedHealthChecks(true), generalEvents(true) {}
  bool freshUsers :1;
  bool freshApplications :1;
  bool failedHealthChecks :1;
  bool generalEvents :1;
} _GetBuzzResponse__isset;

class GetBuzzResponse {
 public:

  GetBuzzResponse(const GetBuzzResponse&);
  GetBuzzResponse& operator=(const GetBuzzResponse&);
  GetBuzzResponse() {




  }

  virtual ~GetBuzzResponse() throw();
  std::vector<User>  freshUsers;
  std::vector<Application>  freshApplications;
  std::vector<HealthCheckFailed>  failedHealthChecks;
  std::vector< ::aroma::thrift::events::Event>  generalEvents;

  _GetBuzzResponse__isset __isset;

  void __set_freshUsers(const std::vector<User> & val);

  void __set_freshApplications(const std::vector<Application> & val);

  void __set_failedHealthChecks(const std::vector<HealthCheckFailed> & val);

  void __set_generalEvents(const std::vector< ::aroma::thrift::events::Event> & val);

  bool operator == (const GetBuzzResponse & rhs) const
  {
    if (!(freshUsers == rhs.freshUsers))
      return false;
    if (!(freshApplications == rhs.freshApplications))
      return false;
    if (!(failedHealthChecks == rhs.failedHealthChecks))
      return false;
    if (!(generalEvents == rhs.generalEvents))
      return false;
    return true;
  }
  bool operator != (const GetBuzzResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetBuzzResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetBuzzResponse &a, GetBuzzResponse &b);

inline std::ostream& operator<<(std::ostream& out, const GetBuzzResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetDashboardRequest__isset {
  _GetDashboardRequest__isset() : token(false) {}
  bool token :1;
} _GetDashboardRequest__isset;

class GetDashboardRequest {
 public:

  GetDashboardRequest(const GetDashboardRequest&);
  GetDashboardRequest& operator=(const GetDashboardRequest&);
  GetDashboardRequest() {
  }

  virtual ~GetDashboardRequest() throw();
  UserToken token;

  _GetDashboardRequest__isset __isset;

  void __set_token(const UserToken& val);

  bool operator == (const GetDashboardRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GetDashboardRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetDashboardRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetDashboardRequest &a, GetDashboardRequest &b);

inline std::ostream& operator<<(std::ostream& out, const GetDashboardRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetDashboardResponse__isset {
  _GetDashboardResponse__isset() : unreadMessageCount(true), totalMessagesLastHour(true), totalMessagesLast24hrs(true), recentMessages(true), numberOfLowUrgencyMessages(true), numberOfMediumUrgencyMessages(true), numberOfHighUrgencyMessages(true) {}
  bool unreadMessageCount :1;
  bool totalMessagesLastHour :1;
  bool totalMessagesLast24hrs :1;
  bool recentMessages :1;
  bool numberOfLowUrgencyMessages :1;
  bool numberOfMediumUrgencyMessages :1;
  bool numberOfHighUrgencyMessages :1;
} _GetDashboardResponse__isset;

class GetDashboardResponse {
 public:

  GetDashboardResponse(const GetDashboardResponse&);
  GetDashboardResponse& operator=(const GetDashboardResponse&);
  GetDashboardResponse() : unreadMessageCount(0), totalMessagesLastHour(0), totalMessagesLast24hrs(0), numberOfLowUrgencyMessages(0), numberOfMediumUrgencyMessages(0), numberOfHighUrgencyMessages(0) {

  }

  virtual ~GetDashboardResponse() throw();
  int unreadMessageCount;
  int totalMessagesLastHour;
  int totalMessagesLast24hrs;
  std::vector< ::tech::aroma::thrift::Message>  recentMessages;
  int numberOfLowUrgencyMessages;
  int numberOfMediumUrgencyMessages;
  int numberOfHighUrgencyMessages;

  _GetDashboardResponse__isset __isset;

  void __set_unreadMessageCount(const int val);

  void __set_totalMessagesLastHour(const int val);

  void __set_totalMessagesLast24hrs(const int val);

  void __set_recentMessages(const std::vector< ::tech::aroma::thrift::Message> & val);

  void __set_numberOfLowUrgencyMessages(const int val);

  void __set_numberOfMediumUrgencyMessages(const int val);

  void __set_numberOfHighUrgencyMessages(const int val);

  bool operator == (const GetDashboardResponse & rhs) const
  {
    if (!(unreadMessageCount == rhs.unreadMessageCount))
      return false;
    if (!(totalMessagesLastHour == rhs.totalMessagesLastHour))
      return false;
    if (!(totalMessagesLast24hrs == rhs.totalMessagesLast24hrs))
      return false;
    if (!(recentMessages == rhs.recentMessages))
      return false;
    if (!(numberOfLowUrgencyMessages == rhs.numberOfLowUrgencyMessages))
      return false;
    if (!(numberOfMediumUrgencyMessages == rhs.numberOfMediumUrgencyMessages))
      return false;
    if (!(numberOfHighUrgencyMessages == rhs.numberOfHighUrgencyMessages))
      return false;
    return true;
  }
  bool operator != (const GetDashboardResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetDashboardResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetDashboardResponse &a, GetDashboardResponse &b);

inline std::ostream& operator<<(std::ostream& out, const GetDashboardResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetInboxRequest__isset {
  _GetInboxRequest__isset() : token(false), limit(true) {}
  bool token :1;
  bool limit :1;
} _GetInboxRequest__isset;

class GetInboxRequest {
 public:

  GetInboxRequest(const GetInboxRequest&);
  GetInboxRequest& operator=(const GetInboxRequest&);
  GetInboxRequest() : limit(0) {
  }

  virtual ~GetInboxRequest() throw();
  UserToken token;
  int limit;

  _GetInboxRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_limit(const int val);

  bool operator == (const GetInboxRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (__isset.limit != rhs.__isset.limit)
      return false;
    else if (__isset.limit && !(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const GetInboxRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetInboxRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetInboxRequest &a, GetInboxRequest &b);

inline std::ostream& operator<<(std::ostream& out, const GetInboxRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetInboxResponse__isset {
  _GetInboxResponse__isset() : messages(true) {}
  bool messages :1;
} _GetInboxResponse__isset;

class GetInboxResponse {
 public:

  GetInboxResponse(const GetInboxResponse&);
  GetInboxResponse& operator=(const GetInboxResponse&);
  GetInboxResponse() {

  }

  virtual ~GetInboxResponse() throw();
  std::vector< ::tech::aroma::thrift::Message>  messages;

  _GetInboxResponse__isset __isset;

  void __set_messages(const std::vector< ::tech::aroma::thrift::Message> & val);

  bool operator == (const GetInboxResponse & rhs) const
  {
    if (!(messages == rhs.messages))
      return false;
    return true;
  }
  bool operator != (const GetInboxResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetInboxResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetInboxResponse &a, GetInboxResponse &b);

inline std::ostream& operator<<(std::ostream& out, const GetInboxResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetApplicationMessagesRequest__isset {
  _GetApplicationMessagesRequest__isset() : token(false), applicationId(false), limit(true) {}
  bool token :1;
  bool applicationId :1;
  bool limit :1;
} _GetApplicationMessagesRequest__isset;

class GetApplicationMessagesRequest {
 public:

  GetApplicationMessagesRequest(const GetApplicationMessagesRequest&);
  GetApplicationMessagesRequest& operator=(const GetApplicationMessagesRequest&);
  GetApplicationMessagesRequest() : applicationId(), limit(0) {
  }

  virtual ~GetApplicationMessagesRequest() throw();
  UserToken token;
  uuid applicationId;
  int limit;

  _GetApplicationMessagesRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_applicationId(const uuid& val);

  void __set_limit(const int val);

  bool operator == (const GetApplicationMessagesRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(applicationId == rhs.applicationId))
      return false;
    if (__isset.limit != rhs.__isset.limit)
      return false;
    else if (__isset.limit && !(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const GetApplicationMessagesRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetApplicationMessagesRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetApplicationMessagesRequest &a, GetApplicationMessagesRequest &b);

inline std::ostream& operator<<(std::ostream& out, const GetApplicationMessagesRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetApplicationMessagesResponse__isset {
  _GetApplicationMessagesResponse__isset() : messages(true), totalMessagesMatching(true) {}
  bool messages :1;
  bool totalMessagesMatching :1;
} _GetApplicationMessagesResponse__isset;

class GetApplicationMessagesResponse {
 public:

  GetApplicationMessagesResponse(const GetApplicationMessagesResponse&);
  GetApplicationMessagesResponse& operator=(const GetApplicationMessagesResponse&);
  GetApplicationMessagesResponse() : totalMessagesMatching(0) {

  }

  virtual ~GetApplicationMessagesResponse() throw();
  std::vector< ::tech::aroma::thrift::Message>  messages;
  int totalMessagesMatching;

  _GetApplicationMessagesResponse__isset __isset;

  void __set_messages(const std::vector< ::tech::aroma::thrift::Message> & val);

  void __set_totalMessagesMatching(const int val);

  bool operator == (const GetApplicationMessagesResponse & rhs) const
  {
    if (!(messages == rhs.messages))
      return false;
    if (__isset.totalMessagesMatching != rhs.__isset.totalMessagesMatching)
      return false;
    else if (__isset.totalMessagesMatching && !(totalMessagesMatching == rhs.totalMessagesMatching))
      return false;
    return true;
  }
  bool operator != (const GetApplicationMessagesResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetApplicationMessagesResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetApplicationMessagesResponse &a, GetApplicationMessagesResponse &b);

inline std::ostream& operator<<(std::ostream& out, const GetApplicationMessagesResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetFullMessageRequest__isset {
  _GetFullMessageRequest__isset() : token(false), messageId(false), applicationId(false) {}
  bool token :1;
  bool messageId :1;
  bool applicationId :1;
} _GetFullMessageRequest__isset;

class GetFullMessageRequest {
 public:

  GetFullMessageRequest(const GetFullMessageRequest&);
  GetFullMessageRequest& operator=(const GetFullMessageRequest&);
  GetFullMessageRequest() : messageId(), applicationId() {
  }

  virtual ~GetFullMessageRequest() throw();
  UserToken token;
  uuid messageId;
  uuid applicationId;

  _GetFullMessageRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_messageId(const uuid& val);

  void __set_applicationId(const uuid& val);

  bool operator == (const GetFullMessageRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(messageId == rhs.messageId))
      return false;
    if (!(applicationId == rhs.applicationId))
      return false;
    return true;
  }
  bool operator != (const GetFullMessageRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetFullMessageRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetFullMessageRequest &a, GetFullMessageRequest &b);

inline std::ostream& operator<<(std::ostream& out, const GetFullMessageRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetFullMessageResponse__isset {
  _GetFullMessageResponse__isset() : fullMessage(false) {}
  bool fullMessage :1;
} _GetFullMessageResponse__isset;

class GetFullMessageResponse {
 public:

  GetFullMessageResponse(const GetFullMessageResponse&);
  GetFullMessageResponse& operator=(const GetFullMessageResponse&);
  GetFullMessageResponse() {
  }

  virtual ~GetFullMessageResponse() throw();
   ::tech::aroma::thrift::Message fullMessage;

  _GetFullMessageResponse__isset __isset;

  void __set_fullMessage(const  ::tech::aroma::thrift::Message& val);

  bool operator == (const GetFullMessageResponse & rhs) const
  {
    if (!(fullMessage == rhs.fullMessage))
      return false;
    return true;
  }
  bool operator != (const GetFullMessageResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetFullMessageResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetFullMessageResponse &a, GetFullMessageResponse &b);

inline std::ostream& operator<<(std::ostream& out, const GetFullMessageResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetMediaRequest__isset {
  _GetMediaRequest__isset() : token(false), mediaId(false), desiredThumbnailSize(false) {}
  bool token :1;
  bool mediaId :1;
  bool desiredThumbnailSize :1;
} _GetMediaRequest__isset;

class GetMediaRequest {
 public:

  GetMediaRequest(const GetMediaRequest&);
  GetMediaRequest& operator=(const GetMediaRequest&);
  GetMediaRequest() : mediaId() {
  }

  virtual ~GetMediaRequest() throw();
  UserToken token;
  uuid mediaId;
   ::tech::aroma::thrift::Dimension desiredThumbnailSize;

  _GetMediaRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_mediaId(const uuid& val);

  void __set_desiredThumbnailSize(const  ::tech::aroma::thrift::Dimension& val);

  bool operator == (const GetMediaRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(mediaId == rhs.mediaId))
      return false;
    if (__isset.desiredThumbnailSize != rhs.__isset.desiredThumbnailSize)
      return false;
    else if (__isset.desiredThumbnailSize && !(desiredThumbnailSize == rhs.desiredThumbnailSize))
      return false;
    return true;
  }
  bool operator != (const GetMediaRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetMediaRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetMediaRequest &a, GetMediaRequest &b);

inline std::ostream& operator<<(std::ostream& out, const GetMediaRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetMediaResponse__isset {
  _GetMediaResponse__isset() : image(false) {}
  bool image :1;
} _GetMediaResponse__isset;

class GetMediaResponse {
 public:

  GetMediaResponse(const GetMediaResponse&);
  GetMediaResponse& operator=(const GetMediaResponse&);
  GetMediaResponse() {
  }

  virtual ~GetMediaResponse() throw();
   ::tech::aroma::thrift::Image image;

  _GetMediaResponse__isset __isset;

  void __set_image(const  ::tech::aroma::thrift::Image& val);

  bool operator == (const GetMediaResponse & rhs) const
  {
    if (!(image == rhs.image))
      return false;
    return true;
  }
  bool operator != (const GetMediaResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetMediaResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetMediaResponse &a, GetMediaResponse &b);

inline std::ostream& operator<<(std::ostream& out, const GetMediaResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetApplicationsFollowedByRequest__isset {
  _GetApplicationsFollowedByRequest__isset() : token(false), userId(false) {}
  bool token :1;
  bool userId :1;
} _GetApplicationsFollowedByRequest__isset;

class GetApplicationsFollowedByRequest {
 public:

  GetApplicationsFollowedByRequest(const GetApplicationsFollowedByRequest&);
  GetApplicationsFollowedByRequest& operator=(const GetApplicationsFollowedByRequest&);
  GetApplicationsFollowedByRequest() : userId() {
  }

  virtual ~GetApplicationsFollowedByRequest() throw();
  UserToken token;
  uuid userId;

  _GetApplicationsFollowedByRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_userId(const uuid& val);

  bool operator == (const GetApplicationsFollowedByRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (__isset.userId != rhs.__isset.userId)
      return false;
    else if (__isset.userId && !(userId == rhs.userId))
      return false;
    return true;
  }
  bool operator != (const GetApplicationsFollowedByRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetApplicationsFollowedByRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetApplicationsFollowedByRequest &a, GetApplicationsFollowedByRequest &b);

inline std::ostream& operator<<(std::ostream& out, const GetApplicationsFollowedByRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetApplicationsFollowedByResponse__isset {
  _GetApplicationsFollowedByResponse__isset() : applications(true) {}
  bool applications :1;
} _GetApplicationsFollowedByResponse__isset;

class GetApplicationsFollowedByResponse {
 public:

  GetApplicationsFollowedByResponse(const GetApplicationsFollowedByResponse&);
  GetApplicationsFollowedByResponse& operator=(const GetApplicationsFollowedByResponse&);
  GetApplicationsFollowedByResponse() {

  }

  virtual ~GetApplicationsFollowedByResponse() throw();
  std::vector<Application>  applications;

  _GetApplicationsFollowedByResponse__isset __isset;

  void __set_applications(const std::vector<Application> & val);

  bool operator == (const GetApplicationsFollowedByResponse & rhs) const
  {
    if (!(applications == rhs.applications))
      return false;
    return true;
  }
  bool operator != (const GetApplicationsFollowedByResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetApplicationsFollowedByResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetApplicationsFollowedByResponse &a, GetApplicationsFollowedByResponse &b);

inline std::ostream& operator<<(std::ostream& out, const GetApplicationsFollowedByResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetApplicationsOwnedByRequest__isset {
  _GetApplicationsOwnedByRequest__isset() : token(false), userId(false) {}
  bool token :1;
  bool userId :1;
} _GetApplicationsOwnedByRequest__isset;

class GetApplicationsOwnedByRequest {
 public:

  GetApplicationsOwnedByRequest(const GetApplicationsOwnedByRequest&);
  GetApplicationsOwnedByRequest& operator=(const GetApplicationsOwnedByRequest&);
  GetApplicationsOwnedByRequest() : userId() {
  }

  virtual ~GetApplicationsOwnedByRequest() throw();
  UserToken token;
  uuid userId;

  _GetApplicationsOwnedByRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_userId(const uuid& val);

  bool operator == (const GetApplicationsOwnedByRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (__isset.userId != rhs.__isset.userId)
      return false;
    else if (__isset.userId && !(userId == rhs.userId))
      return false;
    return true;
  }
  bool operator != (const GetApplicationsOwnedByRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetApplicationsOwnedByRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetApplicationsOwnedByRequest &a, GetApplicationsOwnedByRequest &b);

inline std::ostream& operator<<(std::ostream& out, const GetApplicationsOwnedByRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetApplicationsOwnedByResponse__isset {
  _GetApplicationsOwnedByResponse__isset() : applications(true) {}
  bool applications :1;
} _GetApplicationsOwnedByResponse__isset;

class GetApplicationsOwnedByResponse {
 public:

  GetApplicationsOwnedByResponse(const GetApplicationsOwnedByResponse&);
  GetApplicationsOwnedByResponse& operator=(const GetApplicationsOwnedByResponse&);
  GetApplicationsOwnedByResponse() {

  }

  virtual ~GetApplicationsOwnedByResponse() throw();
  std::vector<Application>  applications;

  _GetApplicationsOwnedByResponse__isset __isset;

  void __set_applications(const std::vector<Application> & val);

  bool operator == (const GetApplicationsOwnedByResponse & rhs) const
  {
    if (!(applications == rhs.applications))
      return false;
    return true;
  }
  bool operator != (const GetApplicationsOwnedByResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetApplicationsOwnedByResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetApplicationsOwnedByResponse &a, GetApplicationsOwnedByResponse &b);

inline std::ostream& operator<<(std::ostream& out, const GetApplicationsOwnedByResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetMySavedChannelsRequest__isset {
  _GetMySavedChannelsRequest__isset() : token(false) {}
  bool token :1;
} _GetMySavedChannelsRequest__isset;

class GetMySavedChannelsRequest {
 public:

  GetMySavedChannelsRequest(const GetMySavedChannelsRequest&);
  GetMySavedChannelsRequest& operator=(const GetMySavedChannelsRequest&);
  GetMySavedChannelsRequest() {
  }

  virtual ~GetMySavedChannelsRequest() throw();
  UserToken token;

  _GetMySavedChannelsRequest__isset __isset;

  void __set_token(const UserToken& val);

  bool operator == (const GetMySavedChannelsRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GetMySavedChannelsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetMySavedChannelsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetMySavedChannelsRequest &a, GetMySavedChannelsRequest &b);

inline std::ostream& operator<<(std::ostream& out, const GetMySavedChannelsRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetMySavedChannelsResponse__isset {
  _GetMySavedChannelsResponse__isset() : channels(false) {}
  bool channels :1;
} _GetMySavedChannelsResponse__isset;

class GetMySavedChannelsResponse {
 public:

  GetMySavedChannelsResponse(const GetMySavedChannelsResponse&);
  GetMySavedChannelsResponse& operator=(const GetMySavedChannelsResponse&);
  GetMySavedChannelsResponse() {
  }

  virtual ~GetMySavedChannelsResponse() throw();
  std::vector<AromaChannel>  channels;

  _GetMySavedChannelsResponse__isset __isset;

  void __set_channels(const std::vector<AromaChannel> & val);

  bool operator == (const GetMySavedChannelsResponse & rhs) const
  {
    if (!(channels == rhs.channels))
      return false;
    return true;
  }
  bool operator != (const GetMySavedChannelsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetMySavedChannelsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetMySavedChannelsResponse &a, GetMySavedChannelsResponse &b);

inline std::ostream& operator<<(std::ostream& out, const GetMySavedChannelsResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetActivityRequest__isset {
  _GetActivityRequest__isset() : token(false), limit(true) {}
  bool token :1;
  bool limit :1;
} _GetActivityRequest__isset;

class GetActivityRequest {
 public:

  GetActivityRequest(const GetActivityRequest&);
  GetActivityRequest& operator=(const GetActivityRequest&);
  GetActivityRequest() : limit(0) {
  }

  virtual ~GetActivityRequest() throw();
  UserToken token;
  int limit;

  _GetActivityRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_limit(const int val);

  bool operator == (const GetActivityRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (__isset.limit != rhs.__isset.limit)
      return false;
    else if (__isset.limit && !(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const GetActivityRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetActivityRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetActivityRequest &a, GetActivityRequest &b);

inline std::ostream& operator<<(std::ostream& out, const GetActivityRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetActivityResponse__isset {
  _GetActivityResponse__isset() : events(true) {}
  bool events :1;
} _GetActivityResponse__isset;

class GetActivityResponse {
 public:

  GetActivityResponse(const GetActivityResponse&);
  GetActivityResponse& operator=(const GetActivityResponse&);
  GetActivityResponse() {

  }

  virtual ~GetActivityResponse() throw();
  std::vector< ::aroma::thrift::events::Event>  events;

  _GetActivityResponse__isset __isset;

  void __set_events(const std::vector< ::aroma::thrift::events::Event> & val);

  bool operator == (const GetActivityResponse & rhs) const
  {
    if (!(events == rhs.events))
      return false;
    return true;
  }
  bool operator != (const GetActivityResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetActivityResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetActivityResponse &a, GetActivityResponse &b);

inline std::ostream& operator<<(std::ostream& out, const GetActivityResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetReactionsRequest__isset {
  _GetReactionsRequest__isset() : token(false), forAppId(false) {}
  bool token :1;
  bool forAppId :1;
} _GetReactionsRequest__isset;

class GetReactionsRequest {
 public:

  GetReactionsRequest(const GetReactionsRequest&);
  GetReactionsRequest& operator=(const GetReactionsRequest&);
  GetReactionsRequest() : forAppId() {
  }

  virtual ~GetReactionsRequest() throw();
  UserToken token;
  uuid forAppId;

  _GetReactionsRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_forAppId(const uuid& val);

  bool operator == (const GetReactionsRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (__isset.forAppId != rhs.__isset.forAppId)
      return false;
    else if (__isset.forAppId && !(forAppId == rhs.forAppId))
      return false;
    return true;
  }
  bool operator != (const GetReactionsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetReactionsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetReactionsRequest &a, GetReactionsRequest &b);

inline std::ostream& operator<<(std::ostream& out, const GetReactionsRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetReactionsResponse__isset {
  _GetReactionsResponse__isset() : reactions(true) {}
  bool reactions :1;
} _GetReactionsResponse__isset;

class GetReactionsResponse {
 public:

  GetReactionsResponse(const GetReactionsResponse&);
  GetReactionsResponse& operator=(const GetReactionsResponse&);
  GetReactionsResponse() {

  }

  virtual ~GetReactionsResponse() throw();
  std::vector<Reaction>  reactions;

  _GetReactionsResponse__isset __isset;

  void __set_reactions(const std::vector<Reaction> & val);

  bool operator == (const GetReactionsResponse & rhs) const
  {
    if (!(reactions == rhs.reactions))
      return false;
    return true;
  }
  bool operator != (const GetReactionsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetReactionsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetReactionsResponse &a, GetReactionsResponse &b);

inline std::ostream& operator<<(std::ostream& out, const GetReactionsResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetServiceAnnouncementsRequest__isset {
  _GetServiceAnnouncementsRequest__isset() : token(false) {}
  bool token :1;
} _GetServiceAnnouncementsRequest__isset;

class GetServiceAnnouncementsRequest {
 public:

  GetServiceAnnouncementsRequest(const GetServiceAnnouncementsRequest&);
  GetServiceAnnouncementsRequest& operator=(const GetServiceAnnouncementsRequest&);
  GetServiceAnnouncementsRequest() {
  }

  virtual ~GetServiceAnnouncementsRequest() throw();
  UserToken token;

  _GetServiceAnnouncementsRequest__isset __isset;

  void __set_token(const UserToken& val);

  bool operator == (const GetServiceAnnouncementsRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GetServiceAnnouncementsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetServiceAnnouncementsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetServiceAnnouncementsRequest &a, GetServiceAnnouncementsRequest &b);

inline std::ostream& operator<<(std::ostream& out, const GetServiceAnnouncementsRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetServiceAnnouncementsResponse__isset {
  _GetServiceAnnouncementsResponse__isset() : serviceAnnouncements(true) {}
  bool serviceAnnouncements :1;
} _GetServiceAnnouncementsResponse__isset;

class GetServiceAnnouncementsResponse {
 public:

  GetServiceAnnouncementsResponse(const GetServiceAnnouncementsResponse&);
  GetServiceAnnouncementsResponse& operator=(const GetServiceAnnouncementsResponse&);
  GetServiceAnnouncementsResponse() {

  }

  virtual ~GetServiceAnnouncementsResponse() throw();
  std::vector< ::tech::aroma::thrift::ServiceAnnouncement>  serviceAnnouncements;

  _GetServiceAnnouncementsResponse__isset __isset;

  void __set_serviceAnnouncements(const std::vector< ::tech::aroma::thrift::ServiceAnnouncement> & val);

  bool operator == (const GetServiceAnnouncementsResponse & rhs) const
  {
    if (__isset.serviceAnnouncements != rhs.__isset.serviceAnnouncements)
      return false;
    else if (__isset.serviceAnnouncements && !(serviceAnnouncements == rhs.serviceAnnouncements))
      return false;
    return true;
  }
  bool operator != (const GetServiceAnnouncementsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetServiceAnnouncementsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetServiceAnnouncementsResponse &a, GetServiceAnnouncementsResponse &b);

inline std::ostream& operator<<(std::ostream& out, const GetServiceAnnouncementsResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetUserInfoRequest__isset {
  _GetUserInfoRequest__isset() : token(false), userId(false), email(false) {}
  bool token :1;
  bool userId :1;
  bool email :1;
} _GetUserInfoRequest__isset;

class GetUserInfoRequest {
 public:

  GetUserInfoRequest(const GetUserInfoRequest&);
  GetUserInfoRequest& operator=(const GetUserInfoRequest&);
  GetUserInfoRequest() : userId(), email() {
  }

  virtual ~GetUserInfoRequest() throw();
  UserToken token;
  uuid userId;
  std::string email;

  _GetUserInfoRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_userId(const uuid& val);

  void __set_email(const std::string& val);

  bool operator == (const GetUserInfoRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(userId == rhs.userId))
      return false;
    if (__isset.email != rhs.__isset.email)
      return false;
    else if (__isset.email && !(email == rhs.email))
      return false;
    return true;
  }
  bool operator != (const GetUserInfoRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetUserInfoRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetUserInfoRequest &a, GetUserInfoRequest &b);

inline std::ostream& operator<<(std::ostream& out, const GetUserInfoRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetUserInfoResponse__isset {
  _GetUserInfoResponse__isset() : userInfo(false) {}
  bool userInfo :1;
} _GetUserInfoResponse__isset;

class GetUserInfoResponse {
 public:

  GetUserInfoResponse(const GetUserInfoResponse&);
  GetUserInfoResponse& operator=(const GetUserInfoResponse&);
  GetUserInfoResponse() {
  }

  virtual ~GetUserInfoResponse() throw();
  User userInfo;

  _GetUserInfoResponse__isset __isset;

  void __set_userInfo(const User& val);

  bool operator == (const GetUserInfoResponse & rhs) const
  {
    if (!(userInfo == rhs.userInfo))
      return false;
    return true;
  }
  bool operator != (const GetUserInfoResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetUserInfoResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetUserInfoResponse &a, GetUserInfoResponse &b);

inline std::ostream& operator<<(std::ostream& out, const GetUserInfoResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SearchForApplicationsRequest__isset {
  _SearchForApplicationsRequest__isset() : token(false), applicationName(false), organizationId(false) {}
  bool token :1;
  bool applicationName :1;
  bool organizationId :1;
} _SearchForApplicationsRequest__isset;

class SearchForApplicationsRequest {
 public:

  SearchForApplicationsRequest(const SearchForApplicationsRequest&);
  SearchForApplicationsRequest& operator=(const SearchForApplicationsRequest&);
  SearchForApplicationsRequest() : applicationName(), organizationId() {
  }

  virtual ~SearchForApplicationsRequest() throw();
  UserToken token;
  std::string applicationName;
  uuid organizationId;

  _SearchForApplicationsRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_applicationName(const std::string& val);

  void __set_organizationId(const uuid& val);

  bool operator == (const SearchForApplicationsRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(applicationName == rhs.applicationName))
      return false;
    if (__isset.organizationId != rhs.__isset.organizationId)
      return false;
    else if (__isset.organizationId && !(organizationId == rhs.organizationId))
      return false;
    return true;
  }
  bool operator != (const SearchForApplicationsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SearchForApplicationsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SearchForApplicationsRequest &a, SearchForApplicationsRequest &b);

inline std::ostream& operator<<(std::ostream& out, const SearchForApplicationsRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SearchForApplicationsResponse__isset {
  _SearchForApplicationsResponse__isset() : applications(true) {}
  bool applications :1;
} _SearchForApplicationsResponse__isset;

class SearchForApplicationsResponse {
 public:

  SearchForApplicationsResponse(const SearchForApplicationsResponse&);
  SearchForApplicationsResponse& operator=(const SearchForApplicationsResponse&);
  SearchForApplicationsResponse() {

  }

  virtual ~SearchForApplicationsResponse() throw();
  std::vector<Application>  applications;

  _SearchForApplicationsResponse__isset __isset;

  void __set_applications(const std::vector<Application> & val);

  bool operator == (const SearchForApplicationsResponse & rhs) const
  {
    if (!(applications == rhs.applications))
      return false;
    return true;
  }
  bool operator != (const SearchForApplicationsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SearchForApplicationsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SearchForApplicationsResponse &a, SearchForApplicationsResponse &b);

inline std::ostream& operator<<(std::ostream& out, const SearchForApplicationsResponse& obj)
{
  obj.printTo(out);
  return out;
}

}}} // namespace

#endif
