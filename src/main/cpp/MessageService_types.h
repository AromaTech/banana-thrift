/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MessageService_TYPES_H
#define MessageService_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "Authentication_types.h"
#include "Banana_types.h"
#include "Channels_types.h"
#include "Endpoint_types.h"
#include "Events_types.h"
#include "Exceptions_types.h"


namespace aroma { namespace banana { namespace thrift { namespace message { namespace service {

typedef  ::aroma::banana::thrift::int int;

typedef  ::aroma::banana::thrift::long long;

typedef  ::aroma::banana::thrift::timestamp timestamp;

typedef class  ::aroma::banana::thrift::authentication::AuthenticationToken AuthenticationToken;

typedef class  ::aroma::banana::thrift::authentication::UserToken UserToken;

typedef class  ::aroma::banana::thrift::Application Application;

typedef  ::aroma::banana::thrift::Urgency::type Urgency;

typedef class  ::aroma::banana::thrift::channels::BananaChannel BananaChannel;

typedef class  ::aroma::banana::thrift::events::Event Event;

typedef class  ::aroma::banana::thrift::exceptions::AccountAlreadyExistsException AccountAlreadyExistsException;

typedef class  ::aroma::banana::thrift::exceptions::InvalidArgumentException InvalidArgumentException;

typedef class  ::aroma::banana::thrift::exceptions::InvalidCredentialsException InvalidCredentialsException;

typedef class  ::aroma::banana::thrift::exceptions::InvalidTokenException InvalidTokenException;

typedef class  ::aroma::banana::thrift::exceptions::OperationFailedException OperationFailedException;

typedef class  ::aroma::banana::thrift::exceptions::ApplicationAlreadyRegisteredException ApplicationAlreadyRegisteredException;

typedef class  ::aroma::banana::thrift::exceptions::ApplicationDoesNotExistException ApplicationDoesNotExistException;

typedef class  ::aroma::banana::thrift::exceptions::CustomChannelUnreachableException CustomChannelUnreachableException;

typedef class  ::aroma::banana::thrift::exceptions::ChannelDoesNotExistException ChannelDoesNotExistException;

typedef class  ::aroma::banana::thrift::exceptions::UnauthorizedException UnauthorizedException;

class DeleteMessageRequest;

class DeleteMessageResponse;

typedef struct _DeleteMessageRequest__isset {
  _DeleteMessageRequest__isset() : token(false), messageId(false), applicationId(false), messageIds(true) {}
  bool token :1;
  bool messageId :1;
  bool applicationId :1;
  bool messageIds :1;
} _DeleteMessageRequest__isset;

class DeleteMessageRequest {
 public:

  DeleteMessageRequest(const DeleteMessageRequest&);
  DeleteMessageRequest& operator=(const DeleteMessageRequest&);
  DeleteMessageRequest() : messageId(), applicationId() {

  }

  virtual ~DeleteMessageRequest() throw();
  UserToken token;
  std::string messageId;
  std::string applicationId;
  std::vector<std::string>  messageIds;

  _DeleteMessageRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_messageId(const std::string& val);

  void __set_applicationId(const std::string& val);

  void __set_messageIds(const std::vector<std::string> & val);

  bool operator == (const DeleteMessageRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(messageId == rhs.messageId))
      return false;
    if (!(applicationId == rhs.applicationId))
      return false;
    if (__isset.messageIds != rhs.__isset.messageIds)
      return false;
    else if (__isset.messageIds && !(messageIds == rhs.messageIds))
      return false;
    return true;
  }
  bool operator != (const DeleteMessageRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteMessageRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeleteMessageRequest &a, DeleteMessageRequest &b);

inline std::ostream& operator<<(std::ostream& out, const DeleteMessageRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DeleteMessageResponse__isset {
  _DeleteMessageResponse__isset() : messagesDeleted(true) {}
  bool messagesDeleted :1;
} _DeleteMessageResponse__isset;

class DeleteMessageResponse {
 public:

  DeleteMessageResponse(const DeleteMessageResponse&);
  DeleteMessageResponse& operator=(const DeleteMessageResponse&);
  DeleteMessageResponse() : messagesDeleted(0) {
  }

  virtual ~DeleteMessageResponse() throw();
  int messagesDeleted;

  _DeleteMessageResponse__isset __isset;

  void __set_messagesDeleted(const int val);

  bool operator == (const DeleteMessageResponse & rhs) const
  {
    if (__isset.messagesDeleted != rhs.__isset.messagesDeleted)
      return false;
    else if (__isset.messagesDeleted && !(messagesDeleted == rhs.messagesDeleted))
      return false;
    return true;
  }
  bool operator != (const DeleteMessageResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteMessageResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeleteMessageResponse &a, DeleteMessageResponse &b);

inline std::ostream& operator<<(std::ostream& out, const DeleteMessageResponse& obj)
{
  obj.printTo(out);
  return out;
}

}}}}} // namespace

#endif
