/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Banana_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace aroma { namespace banana { namespace thrift {

int _kUrgencyValues[] = {
  Urgency::LOW,
  Urgency::MEDIUM,
  Urgency::HIGH
};
const char* _kUrgencyNames[] = {
  "LOW",
  "MEDIUM",
  "HIGH"
};
const std::map<int, const char*> _Urgency_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kUrgencyValues, _kUrgencyNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTimeUnitValues[] = {
  TimeUnit::MILLIS,
  TimeUnit::SECONDS,
  TimeUnit::MINUTES,
  TimeUnit::HOURS,
  TimeUnit::DAYS,
  TimeUnit::WEEKS
};
const char* _kTimeUnitNames[] = {
  "MILLIS",
  "SECONDS",
  "MINUTES",
  "HOURS",
  "DAYS",
  "WEEKS"
};
const std::map<int, const char*> _TimeUnit_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kTimeUnitValues, _kTimeUnitNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kImageTypeValues[] = {
  ImageType::JPEG,
  ImageType::PNG
};
const char* _kImageTypeNames[] = {
  "JPEG",
  "PNG"
};
const std::map<int, const char*> _ImageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kImageTypeValues, _kImageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRoleValues[] = {
  Role::DEVELOPER,
  Role::OPERATIONS,
  Role::MANAGER,
  Role::PRODUCT,
  Role::QA
};
const char* _kRoleNames[] = {
  "DEVELOPER",
  "OPERATIONS",
  "MANAGER",
  "PRODUCT",
  "QA"
};
const std::map<int, const char*> _Role_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kRoleValues, _kRoleNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kProgrammingLanguageValues[] = {
  ProgrammingLanguage::JAVA,
  ProgrammingLanguage::CPP,
  ProgrammingLanguage::C_SHARP,
  ProgrammingLanguage::C,
  ProgrammingLanguage::OBJECTIVE_C,
  ProgrammingLanguage::SWIFT,
  ProgrammingLanguage::DOT_NET,
  ProgrammingLanguage::RUBY,
  ProgrammingLanguage::GROOVY,
  ProgrammingLanguage::PYTHON,
  ProgrammingLanguage::PHP,
  ProgrammingLanguage::NODE,
  ProgrammingLanguage::DART,
  ProgrammingLanguage::OTHER
};
const char* _kProgrammingLanguageNames[] = {
  "JAVA",
  "CPP",
  "C_SHARP",
  "C",
  "OBJECTIVE_C",
  "SWIFT",
  "DOT_NET",
  "RUBY",
  "GROOVY",
  "PYTHON",
  "PHP",
  "NODE",
  "DART",
  "OTHER"
};
const std::map<int, const char*> _ProgrammingLanguage_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(14, _kProgrammingLanguageValues, _kProgrammingLanguageNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


Message::~Message() throw() {
}


void Message::__set_messageId(const std::string& val) {
  this->messageId = val;
}

void Message::__set_body(const std::string& val) {
  this->body = val;
__isset.body = true;
}

void Message::__set_urgency(const Urgency::type val) {
  this->urgency = val;
}

void Message::__set_timeOfCreation(const timestamp val) {
  this->timeOfCreation = val;
}

void Message::__set_timeMessageReceived(const timestamp val) {
  this->timeMessageReceived = val;
}

void Message::__set_applicationName(const std::string& val) {
  this->applicationName = val;
}

void Message::__set_hostname(const std::string& val) {
  this->hostname = val;
__isset.hostname = true;
}

void Message::__set_macAddress(const std::string& val) {
  this->macAddress = val;
__isset.macAddress = true;
}

void Message::__set_isTruncated(const bool val) {
  this->isTruncated = val;
__isset.isTruncated = true;
}

uint32_t Message::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->body);
          this->__isset.body = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->urgency = (Urgency::type)ecast0;
          this->__isset.urgency = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timeOfCreation);
          this->__isset.timeOfCreation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timeMessageReceived);
          this->__isset.timeMessageReceived = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationName);
          this->__isset.applicationName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hostname);
          this->__isset.hostname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->macAddress);
          this->__isset.macAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isTruncated);
          this->__isset.isTruncated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Message::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Message");

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->messageId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.body) {
    xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->body);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("urgency", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->urgency);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeOfCreation", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->timeOfCreation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeMessageReceived", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->timeMessageReceived);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationName", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->applicationName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.hostname) {
    xfer += oprot->writeFieldBegin("hostname", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->hostname);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.macAddress) {
    xfer += oprot->writeFieldBegin("macAddress", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->macAddress);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isTruncated) {
    xfer += oprot->writeFieldBegin("isTruncated", ::apache::thrift::protocol::T_BOOL, 9);
    xfer += oprot->writeBool(this->isTruncated);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Message &a, Message &b) {
  using ::std::swap;
  swap(a.messageId, b.messageId);
  swap(a.body, b.body);
  swap(a.urgency, b.urgency);
  swap(a.timeOfCreation, b.timeOfCreation);
  swap(a.timeMessageReceived, b.timeMessageReceived);
  swap(a.applicationName, b.applicationName);
  swap(a.hostname, b.hostname);
  swap(a.macAddress, b.macAddress);
  swap(a.isTruncated, b.isTruncated);
  swap(a.__isset, b.__isset);
}

Message::Message(const Message& other1) {
  messageId = other1.messageId;
  body = other1.body;
  urgency = other1.urgency;
  timeOfCreation = other1.timeOfCreation;
  timeMessageReceived = other1.timeMessageReceived;
  applicationName = other1.applicationName;
  hostname = other1.hostname;
  macAddress = other1.macAddress;
  isTruncated = other1.isTruncated;
  __isset = other1.__isset;
}
Message& Message::operator=(const Message& other2) {
  messageId = other2.messageId;
  body = other2.body;
  urgency = other2.urgency;
  timeOfCreation = other2.timeOfCreation;
  timeMessageReceived = other2.timeMessageReceived;
  applicationName = other2.applicationName;
  hostname = other2.hostname;
  macAddress = other2.macAddress;
  isTruncated = other2.isTruncated;
  __isset = other2.__isset;
  return *this;
}
void Message::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Message(";
  out << "messageId=" << to_string(messageId);
  out << ", " << "body="; (__isset.body ? (out << to_string(body)) : (out << "<null>"));
  out << ", " << "urgency=" << to_string(urgency);
  out << ", " << "timeOfCreation=" << to_string(timeOfCreation);
  out << ", " << "timeMessageReceived=" << to_string(timeMessageReceived);
  out << ", " << "applicationName=" << to_string(applicationName);
  out << ", " << "hostname="; (__isset.hostname ? (out << to_string(hostname)) : (out << "<null>"));
  out << ", " << "macAddress="; (__isset.macAddress ? (out << to_string(macAddress)) : (out << "<null>"));
  out << ", " << "isTruncated="; (__isset.isTruncated ? (out << to_string(isTruncated)) : (out << "<null>"));
  out << ")";
}


LengthOfTime::~LengthOfTime() throw() {
}


void LengthOfTime::__set_unit(const TimeUnit::type val) {
  this->unit = val;
}

void LengthOfTime::__set_value(const long val) {
  this->value = val;
}

uint32_t LengthOfTime::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_unit = false;
  bool isset_value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->unit = (TimeUnit::type)ecast3;
          isset_unit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->value);
          isset_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_unit)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LengthOfTime::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LengthOfTime");

  xfer += oprot->writeFieldBegin("unit", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->unit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LengthOfTime &a, LengthOfTime &b) {
  using ::std::swap;
  swap(a.unit, b.unit);
  swap(a.value, b.value);
}

LengthOfTime::LengthOfTime(const LengthOfTime& other4) {
  unit = other4.unit;
  value = other4.value;
}
LengthOfTime& LengthOfTime::operator=(const LengthOfTime& other5) {
  unit = other5.unit;
  value = other5.value;
  return *this;
}
void LengthOfTime::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LengthOfTime(";
  out << "unit=" << to_string(unit);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


Dimension::~Dimension() throw() {
}


void Dimension::__set_width(const int val) {
  this->width = val;
}

void Dimension::__set_height(const int val) {
  this->height = val;
}

uint32_t Dimension::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_width = false;
  bool isset_height = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->width);
          isset_width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->height);
          isset_height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_width)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_height)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Dimension::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Dimension");

  xfer += oprot->writeFieldBegin("width", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->width);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("height", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->height);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Dimension &a, Dimension &b) {
  using ::std::swap;
  swap(a.width, b.width);
  swap(a.height, b.height);
}

Dimension::Dimension(const Dimension& other6) {
  width = other6.width;
  height = other6.height;
}
Dimension& Dimension::operator=(const Dimension& other7) {
  width = other7.width;
  height = other7.height;
  return *this;
}
void Dimension::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Dimension(";
  out << "width=" << to_string(width);
  out << ", " << "height=" << to_string(height);
  out << ")";
}


Image::~Image() throw() {
}


void Image::__set_imageType(const ImageType::type val) {
  this->imageType = val;
}

void Image::__set_data(const std::string& val) {
  this->data = val;
}

void Image::__set_dimension(const Dimension& val) {
  this->dimension = val;
}

uint32_t Image::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast8;
          xfer += iprot->readI32(ecast8);
          this->imageType = (ImageType::type)ecast8;
          this->__isset.imageType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dimension.read(iprot);
          this->__isset.dimension = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Image::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Image");

  xfer += oprot->writeFieldBegin("imageType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->imageType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dimension", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->dimension.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Image &a, Image &b) {
  using ::std::swap;
  swap(a.imageType, b.imageType);
  swap(a.data, b.data);
  swap(a.dimension, b.dimension);
  swap(a.__isset, b.__isset);
}

Image::Image(const Image& other9) {
  imageType = other9.imageType;
  data = other9.data;
  dimension = other9.dimension;
  __isset = other9.__isset;
}
Image& Image::operator=(const Image& other10) {
  imageType = other10.imageType;
  data = other10.data;
  dimension = other10.dimension;
  __isset = other10.__isset;
  return *this;
}
void Image::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Image(";
  out << "imageType=" << to_string(imageType);
  out << ", " << "data=" << to_string(data);
  out << ", " << "dimension=" << to_string(dimension);
  out << ")";
}


User::~User() throw() {
}


void User::__set_email(const std::string& val) {
  this->email = val;
}

void User::__set_userId(const std::string& val) {
  this->userId = val;
}

void User::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void User::__set_roles(const std::set<Role::type> & val) {
  this->roles = val;
}

void User::__set_profileImage(const Image& val) {
  this->profileImage = val;
__isset.profileImage = true;
}

void User::__set_profileImageLink(const std::string& val) {
  this->profileImageLink = val;
__isset.profileImageLink = true;
}

uint32_t User::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userId);
          this->__isset.userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->roles.clear();
            uint32_t _size11;
            ::apache::thrift::protocol::TType _etype14;
            xfer += iprot->readSetBegin(_etype14, _size11);
            uint32_t _i15;
            for (_i15 = 0; _i15 < _size11; ++_i15)
            {
              Role::type _elem16;
              int32_t ecast17;
              xfer += iprot->readI32(ecast17);
              _elem16 = (Role::type)ecast17;
              this->roles.insert(_elem16);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.roles = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->profileImage.read(iprot);
          this->__isset.profileImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->profileImageLink);
          this->__isset.profileImageLink = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User");

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->userId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("roles", ::apache::thrift::protocol::T_SET, 4);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->roles.size()));
    std::set<Role::type> ::const_iterator _iter18;
    for (_iter18 = this->roles.begin(); _iter18 != this->roles.end(); ++_iter18)
    {
      xfer += oprot->writeI32((int32_t)(*_iter18));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.profileImage) {
    xfer += oprot->writeFieldBegin("profileImage", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->profileImage.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.profileImageLink) {
    xfer += oprot->writeFieldBegin("profileImageLink", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->profileImageLink);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User &a, User &b) {
  using ::std::swap;
  swap(a.email, b.email);
  swap(a.userId, b.userId);
  swap(a.name, b.name);
  swap(a.roles, b.roles);
  swap(a.profileImage, b.profileImage);
  swap(a.profileImageLink, b.profileImageLink);
  swap(a.__isset, b.__isset);
}

User::User(const User& other19) {
  email = other19.email;
  userId = other19.userId;
  name = other19.name;
  roles = other19.roles;
  profileImage = other19.profileImage;
  profileImageLink = other19.profileImageLink;
  __isset = other19.__isset;
}
User& User::operator=(const User& other20) {
  email = other20.email;
  userId = other20.userId;
  name = other20.name;
  roles = other20.roles;
  profileImage = other20.profileImage;
  profileImageLink = other20.profileImageLink;
  __isset = other20.__isset;
  return *this;
}
void User::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User(";
  out << "email=" << to_string(email);
  out << ", " << "userId=" << to_string(userId);
  out << ", " << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "roles=" << to_string(roles);
  out << ", " << "profileImage="; (__isset.profileImage ? (out << to_string(profileImage)) : (out << "<null>"));
  out << ", " << "profileImageLink="; (__isset.profileImageLink ? (out << to_string(profileImageLink)) : (out << "<null>"));
  out << ")";
}


Application::~Application() throw() {
}


void Application::__set_owners(const std::set<User> & val) {
  this->owners = val;
}

void Application::__set_timeOfProvisioning(const timestamp val) {
  this->timeOfProvisioning = val;
}

void Application::__set_name(const std::string& val) {
  this->name = val;
}

void Application::__set_id(const std::string& val) {
  this->id = val;
}

void Application::__set_totalMessagesSent(const long val) {
  this->totalMessagesSent = val;
}

void Application::__set_icon(const Image& val) {
  this->icon = val;
__isset.icon = true;
}

void Application::__set_programmingLanguage(const ProgrammingLanguage::type val) {
  this->programmingLanguage = val;
__isset.programmingLanguage = true;
}

void Application::__set_subscribers(const std::set<User> & val) {
  this->subscribers = val;
__isset.subscribers = true;
}

uint32_t Application::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->owners.clear();
            uint32_t _size21;
            ::apache::thrift::protocol::TType _etype24;
            xfer += iprot->readSetBegin(_etype24, _size21);
            uint32_t _i25;
            for (_i25 = 0; _i25 < _size21; ++_i25)
            {
              User _elem26;
              xfer += _elem26.read(iprot);
              this->owners.insert(_elem26);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.owners = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timeOfProvisioning);
          this->__isset.timeOfProvisioning = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->totalMessagesSent);
          this->__isset.totalMessagesSent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->icon.read(iprot);
          this->__isset.icon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast27;
          xfer += iprot->readI32(ecast27);
          this->programmingLanguage = (ProgrammingLanguage::type)ecast27;
          this->__isset.programmingLanguage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->subscribers.clear();
            uint32_t _size28;
            ::apache::thrift::protocol::TType _etype31;
            xfer += iprot->readSetBegin(_etype31, _size28);
            uint32_t _i32;
            for (_i32 = 0; _i32 < _size28; ++_i32)
            {
              User _elem33;
              xfer += _elem33.read(iprot);
              this->subscribers.insert(_elem33);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.subscribers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Application::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Application");

  xfer += oprot->writeFieldBegin("owners", ::apache::thrift::protocol::T_SET, 1);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->owners.size()));
    std::set<User> ::const_iterator _iter34;
    for (_iter34 = this->owners.begin(); _iter34 != this->owners.end(); ++_iter34)
    {
      xfer += (*_iter34).write(oprot);
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeOfProvisioning", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->timeOfProvisioning);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalMessagesSent", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->totalMessagesSent);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.icon) {
    xfer += oprot->writeFieldBegin("icon", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->icon.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.programmingLanguage) {
    xfer += oprot->writeFieldBegin("programmingLanguage", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32((int32_t)this->programmingLanguage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.subscribers) {
    xfer += oprot->writeFieldBegin("subscribers", ::apache::thrift::protocol::T_SET, 8);
    {
      xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->subscribers.size()));
      std::set<User> ::const_iterator _iter35;
      for (_iter35 = this->subscribers.begin(); _iter35 != this->subscribers.end(); ++_iter35)
      {
        xfer += (*_iter35).write(oprot);
      }
      xfer += oprot->writeSetEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Application &a, Application &b) {
  using ::std::swap;
  swap(a.owners, b.owners);
  swap(a.timeOfProvisioning, b.timeOfProvisioning);
  swap(a.name, b.name);
  swap(a.id, b.id);
  swap(a.totalMessagesSent, b.totalMessagesSent);
  swap(a.icon, b.icon);
  swap(a.programmingLanguage, b.programmingLanguage);
  swap(a.subscribers, b.subscribers);
  swap(a.__isset, b.__isset);
}

Application::Application(const Application& other36) {
  owners = other36.owners;
  timeOfProvisioning = other36.timeOfProvisioning;
  name = other36.name;
  id = other36.id;
  totalMessagesSent = other36.totalMessagesSent;
  icon = other36.icon;
  programmingLanguage = other36.programmingLanguage;
  subscribers = other36.subscribers;
  __isset = other36.__isset;
}
Application& Application::operator=(const Application& other37) {
  owners = other37.owners;
  timeOfProvisioning = other37.timeOfProvisioning;
  name = other37.name;
  id = other37.id;
  totalMessagesSent = other37.totalMessagesSent;
  icon = other37.icon;
  programmingLanguage = other37.programmingLanguage;
  subscribers = other37.subscribers;
  __isset = other37.__isset;
  return *this;
}
void Application::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Application(";
  out << "owners=" << to_string(owners);
  out << ", " << "timeOfProvisioning=" << to_string(timeOfProvisioning);
  out << ", " << "name=" << to_string(name);
  out << ", " << "id=" << to_string(id);
  out << ", " << "totalMessagesSent=" << to_string(totalMessagesSent);
  out << ", " << "icon="; (__isset.icon ? (out << to_string(icon)) : (out << "<null>"));
  out << ", " << "programmingLanguage="; (__isset.programmingLanguage ? (out << to_string(programmingLanguage)) : (out << "<null>"));
  out << ", " << "subscribers="; (__isset.subscribers ? (out << to_string(subscribers)) : (out << "<null>"));
  out << ")";
}


ServiceAnnouncement::~ServiceAnnouncement() throw() {
}


void ServiceAnnouncement::__set_message(const std::string& val) {
  this->message = val;
}

void ServiceAnnouncement::__set_importance(const Urgency::type val) {
  this->importance = val;
}

void ServiceAnnouncement::__set_id(const std::string& val) {
  this->id = val;
}

void ServiceAnnouncement::__set_timeOfExpiration(const timestamp val) {
  this->timeOfExpiration = val;
}

uint32_t ServiceAnnouncement::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast38;
          xfer += iprot->readI32(ecast38);
          this->importance = (Urgency::type)ecast38;
          this->__isset.importance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timeOfExpiration);
          this->__isset.timeOfExpiration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceAnnouncement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ServiceAnnouncement");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("importance", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->importance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeOfExpiration", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->timeOfExpiration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceAnnouncement &a, ServiceAnnouncement &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.importance, b.importance);
  swap(a.id, b.id);
  swap(a.timeOfExpiration, b.timeOfExpiration);
  swap(a.__isset, b.__isset);
}

ServiceAnnouncement::ServiceAnnouncement(const ServiceAnnouncement& other39) {
  message = other39.message;
  importance = other39.importance;
  id = other39.id;
  timeOfExpiration = other39.timeOfExpiration;
  __isset = other39.__isset;
}
ServiceAnnouncement& ServiceAnnouncement::operator=(const ServiceAnnouncement& other40) {
  message = other40.message;
  importance = other40.importance;
  id = other40.id;
  timeOfExpiration = other40.timeOfExpiration;
  __isset = other40.__isset;
  return *this;
}
void ServiceAnnouncement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ServiceAnnouncement(";
  out << "message=" << to_string(message);
  out << ", " << "importance=" << to_string(importance);
  out << ", " << "id=" << to_string(id);
  out << ", " << "timeOfExpiration=" << to_string(timeOfExpiration);
  out << ")";
}

}}} // namespace
