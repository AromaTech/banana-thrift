/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Banana_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace aroma { namespace banana { namespace thrift {

int _kTimeUnitValues[] = {
  TimeUnit::MILLIS,
  TimeUnit::SECONDS,
  TimeUnit::MINUTES,
  TimeUnit::HOURS,
  TimeUnit::DAYS,
  TimeUnit::WEEKS
};
const char* _kTimeUnitNames[] = {
  "MILLIS",
  "SECONDS",
  "MINUTES",
  "HOURS",
  "DAYS",
  "WEEKS"
};
const std::map<int, const char*> _TimeUnit_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kTimeUnitValues, _kTimeUnitNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kImageTypeValues[] = {
  ImageType::JPEG,
  ImageType::PNG
};
const char* _kImageTypeNames[] = {
  "JPEG",
  "PNG"
};
const std::map<int, const char*> _ImageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kImageTypeValues, _kImageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kUrgencyValues[] = {
  Urgency::LOW,
  Urgency::MEDIUM,
  Urgency::HIGH
};
const char* _kUrgencyNames[] = {
  "LOW",
  "MEDIUM",
  "HIGH"
};
const std::map<int, const char*> _Urgency_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kUrgencyValues, _kUrgencyNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRoleValues[] = {
  Role::DEVELOPER,
  Role::OPERATIONS,
  Role::MANAGER,
  Role::PRODUCT,
  Role::QA
};
const char* _kRoleNames[] = {
  "DEVELOPER",
  "OPERATIONS",
  "MANAGER",
  "PRODUCT",
  "QA"
};
const std::map<int, const char*> _Role_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kRoleValues, _kRoleNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kProgrammingLanguageValues[] = {
  ProgrammingLanguage::JAVA,
  ProgrammingLanguage::CPP,
  ProgrammingLanguage::C_SHARP,
  ProgrammingLanguage::C,
  ProgrammingLanguage::OBJECTIVE_C,
  ProgrammingLanguage::SWIFT,
  ProgrammingLanguage::DOT_NET,
  ProgrammingLanguage::RUBY,
  ProgrammingLanguage::GROOVY,
  ProgrammingLanguage::PYTHON,
  ProgrammingLanguage::PHP,
  ProgrammingLanguage::NODE,
  ProgrammingLanguage::DART,
  ProgrammingLanguage::OTHER
};
const char* _kProgrammingLanguageNames[] = {
  "JAVA",
  "CPP",
  "C_SHARP",
  "C",
  "OBJECTIVE_C",
  "SWIFT",
  "DOT_NET",
  "RUBY",
  "GROOVY",
  "PYTHON",
  "PHP",
  "NODE",
  "DART",
  "OTHER"
};
const std::map<int, const char*> _ProgrammingLanguage_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(14, _kProgrammingLanguageValues, _kProgrammingLanguageNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTierValues[] = {
  Tier::FREE,
  Tier::PAID
};
const char* _kTierNames[] = {
  "FREE",
  "PAID"
};
const std::map<int, const char*> _Tier_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTierValues, _kTierNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


LengthOfTime::~LengthOfTime() throw() {
}


void LengthOfTime::__set_unit(const TimeUnit::type val) {
  this->unit = val;
}

void LengthOfTime::__set_value(const long val) {
  this->value = val;
}

uint32_t LengthOfTime::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_unit = false;
  bool isset_value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->unit = (TimeUnit::type)ecast0;
          isset_unit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->value);
          isset_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_unit)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LengthOfTime::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LengthOfTime");

  xfer += oprot->writeFieldBegin("unit", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->unit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LengthOfTime &a, LengthOfTime &b) {
  using ::std::swap;
  swap(a.unit, b.unit);
  swap(a.value, b.value);
}

LengthOfTime::LengthOfTime(const LengthOfTime& other1) {
  unit = other1.unit;
  value = other1.value;
}
LengthOfTime& LengthOfTime::operator=(const LengthOfTime& other2) {
  unit = other2.unit;
  value = other2.value;
  return *this;
}
void LengthOfTime::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LengthOfTime(";
  out << "unit=" << to_string(unit);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


Dimension::~Dimension() throw() {
}


void Dimension::__set_width(const int val) {
  this->width = val;
}

void Dimension::__set_height(const int val) {
  this->height = val;
}

uint32_t Dimension::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_width = false;
  bool isset_height = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->width);
          isset_width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->height);
          isset_height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_width)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_height)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Dimension::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Dimension");

  xfer += oprot->writeFieldBegin("width", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->width);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("height", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->height);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Dimension &a, Dimension &b) {
  using ::std::swap;
  swap(a.width, b.width);
  swap(a.height, b.height);
}

Dimension::Dimension(const Dimension& other3) {
  width = other3.width;
  height = other3.height;
}
Dimension& Dimension::operator=(const Dimension& other4) {
  width = other4.width;
  height = other4.height;
  return *this;
}
void Dimension::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Dimension(";
  out << "width=" << to_string(width);
  out << ", " << "height=" << to_string(height);
  out << ")";
}


Image::~Image() throw() {
}


void Image::__set_imageType(const ImageType::type val) {
  this->imageType = val;
}

void Image::__set_data(const std::string& val) {
  this->data = val;
}

void Image::__set_dimension(const Dimension& val) {
  this->dimension = val;
}

uint32_t Image::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast5;
          xfer += iprot->readI32(ecast5);
          this->imageType = (ImageType::type)ecast5;
          this->__isset.imageType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dimension.read(iprot);
          this->__isset.dimension = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Image::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Image");

  xfer += oprot->writeFieldBegin("imageType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->imageType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dimension", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->dimension.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Image &a, Image &b) {
  using ::std::swap;
  swap(a.imageType, b.imageType);
  swap(a.data, b.data);
  swap(a.dimension, b.dimension);
  swap(a.__isset, b.__isset);
}

Image::Image(const Image& other6) {
  imageType = other6.imageType;
  data = other6.data;
  dimension = other6.dimension;
  __isset = other6.__isset;
}
Image& Image::operator=(const Image& other7) {
  imageType = other7.imageType;
  data = other7.data;
  dimension = other7.dimension;
  __isset = other7.__isset;
  return *this;
}
void Image::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Image(";
  out << "imageType=" << to_string(imageType);
  out << ", " << "data=" << to_string(data);
  out << ", " << "dimension=" << to_string(dimension);
  out << ")";
}


Message::~Message() throw() {
}


void Message::__set_messageId(const uuid& val) {
  this->messageId = val;
}

void Message::__set_body(const std::string& val) {
  this->body = val;
__isset.body = true;
}

void Message::__set_urgency(const Urgency::type val) {
  this->urgency = val;
}

void Message::__set_timeOfCreation(const timestamp val) {
  this->timeOfCreation = val;
}

void Message::__set_timeMessageReceived(const timestamp val) {
  this->timeMessageReceived = val;
}

void Message::__set_applicationName(const std::string& val) {
  this->applicationName = val;
}

void Message::__set_hostname(const std::string& val) {
  this->hostname = val;
__isset.hostname = true;
}

void Message::__set_macAddress(const std::string& val) {
  this->macAddress = val;
__isset.macAddress = true;
}

void Message::__set_isTruncated(const bool val) {
  this->isTruncated = val;
__isset.isTruncated = true;
}

void Message::__set_title(const std::string& val) {
  this->title = val;
}

void Message::__set_applicationId(const uuid& val) {
  this->applicationId = val;
}

uint32_t Message::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->body);
          this->__isset.body = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast8;
          xfer += iprot->readI32(ecast8);
          this->urgency = (Urgency::type)ecast8;
          this->__isset.urgency = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timeOfCreation);
          this->__isset.timeOfCreation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timeMessageReceived);
          this->__isset.timeMessageReceived = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationName);
          this->__isset.applicationName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hostname);
          this->__isset.hostname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->macAddress);
          this->__isset.macAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isTruncated);
          this->__isset.isTruncated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Message::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Message");

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->messageId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.body) {
    xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->body);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("urgency", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->urgency);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeOfCreation", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->timeOfCreation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeMessageReceived", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->timeMessageReceived);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationName", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->applicationName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.hostname) {
    xfer += oprot->writeFieldBegin("hostname", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->hostname);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.macAddress) {
    xfer += oprot->writeFieldBegin("macAddress", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->macAddress);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isTruncated) {
    xfer += oprot->writeFieldBegin("isTruncated", ::apache::thrift::protocol::T_BOOL, 9);
    xfer += oprot->writeBool(this->isTruncated);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Message &a, Message &b) {
  using ::std::swap;
  swap(a.messageId, b.messageId);
  swap(a.body, b.body);
  swap(a.urgency, b.urgency);
  swap(a.timeOfCreation, b.timeOfCreation);
  swap(a.timeMessageReceived, b.timeMessageReceived);
  swap(a.applicationName, b.applicationName);
  swap(a.hostname, b.hostname);
  swap(a.macAddress, b.macAddress);
  swap(a.isTruncated, b.isTruncated);
  swap(a.title, b.title);
  swap(a.applicationId, b.applicationId);
  swap(a.__isset, b.__isset);
}

Message::Message(const Message& other9) {
  messageId = other9.messageId;
  body = other9.body;
  urgency = other9.urgency;
  timeOfCreation = other9.timeOfCreation;
  timeMessageReceived = other9.timeMessageReceived;
  applicationName = other9.applicationName;
  hostname = other9.hostname;
  macAddress = other9.macAddress;
  isTruncated = other9.isTruncated;
  title = other9.title;
  applicationId = other9.applicationId;
  __isset = other9.__isset;
}
Message& Message::operator=(const Message& other10) {
  messageId = other10.messageId;
  body = other10.body;
  urgency = other10.urgency;
  timeOfCreation = other10.timeOfCreation;
  timeMessageReceived = other10.timeMessageReceived;
  applicationName = other10.applicationName;
  hostname = other10.hostname;
  macAddress = other10.macAddress;
  isTruncated = other10.isTruncated;
  title = other10.title;
  applicationId = other10.applicationId;
  __isset = other10.__isset;
  return *this;
}
void Message::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Message(";
  out << "messageId=" << to_string(messageId);
  out << ", " << "body="; (__isset.body ? (out << to_string(body)) : (out << "<null>"));
  out << ", " << "urgency=" << to_string(urgency);
  out << ", " << "timeOfCreation=" << to_string(timeOfCreation);
  out << ", " << "timeMessageReceived=" << to_string(timeMessageReceived);
  out << ", " << "applicationName=" << to_string(applicationName);
  out << ", " << "hostname="; (__isset.hostname ? (out << to_string(hostname)) : (out << "<null>"));
  out << ", " << "macAddress="; (__isset.macAddress ? (out << to_string(macAddress)) : (out << "<null>"));
  out << ", " << "isTruncated="; (__isset.isTruncated ? (out << to_string(isTruncated)) : (out << "<null>"));
  out << ", " << "title=" << to_string(title);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ")";
}


Organization::~Organization() throw() {
}


void Organization::__set_organizationId(const uuid& val) {
  this->organizationId = val;
}

void Organization::__set_organizationName(const std::string& val) {
  this->organizationName = val;
}

void Organization::__set_website(const std::string& val) {
  this->website = val;
__isset.website = true;
}

void Organization::__set_logo(const Image& val) {
  this->logo = val;
__isset.logo = true;
}

void Organization::__set_techStack(const std::string& val) {
  this->techStack = val;
__isset.techStack = true;
}

void Organization::__set_owners(const std::vector<std::string> & val) {
  this->owners = val;
__isset.owners = true;
}

void Organization::__set_organizationEmail(const std::string& val) {
  this->organizationEmail = val;
__isset.organizationEmail = true;
}

void Organization::__set_stockMarketSymbol(const std::string& val) {
  this->stockMarketSymbol = val;
__isset.stockMarketSymbol = true;
}

uint32_t Organization::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organizationId);
          this->__isset.organizationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organizationName);
          this->__isset.organizationName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->website);
          this->__isset.website = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->logo.read(iprot);
          this->__isset.logo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->techStack);
          this->__isset.techStack = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->owners.clear();
            uint32_t _size11;
            ::apache::thrift::protocol::TType _etype14;
            xfer += iprot->readListBegin(_etype14, _size11);
            this->owners.resize(_size11);
            uint32_t _i15;
            for (_i15 = 0; _i15 < _size11; ++_i15)
            {
              xfer += iprot->readString(this->owners[_i15]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.owners = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organizationEmail);
          this->__isset.organizationEmail = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stockMarketSymbol);
          this->__isset.stockMarketSymbol = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Organization::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Organization");

  xfer += oprot->writeFieldBegin("organizationId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->organizationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("organizationName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->organizationName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.website) {
    xfer += oprot->writeFieldBegin("website", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->website);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.logo) {
    xfer += oprot->writeFieldBegin("logo", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->logo.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.techStack) {
    xfer += oprot->writeFieldBegin("techStack", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->techStack);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.owners) {
    xfer += oprot->writeFieldBegin("owners", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->owners.size()));
      std::vector<std::string> ::const_iterator _iter16;
      for (_iter16 = this->owners.begin(); _iter16 != this->owners.end(); ++_iter16)
      {
        xfer += oprot->writeString((*_iter16));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.organizationEmail) {
    xfer += oprot->writeFieldBegin("organizationEmail", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->organizationEmail);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stockMarketSymbol) {
    xfer += oprot->writeFieldBegin("stockMarketSymbol", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->stockMarketSymbol);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Organization &a, Organization &b) {
  using ::std::swap;
  swap(a.organizationId, b.organizationId);
  swap(a.organizationName, b.organizationName);
  swap(a.website, b.website);
  swap(a.logo, b.logo);
  swap(a.techStack, b.techStack);
  swap(a.owners, b.owners);
  swap(a.organizationEmail, b.organizationEmail);
  swap(a.stockMarketSymbol, b.stockMarketSymbol);
  swap(a.__isset, b.__isset);
}

Organization::Organization(const Organization& other17) {
  organizationId = other17.organizationId;
  organizationName = other17.organizationName;
  website = other17.website;
  logo = other17.logo;
  techStack = other17.techStack;
  owners = other17.owners;
  organizationEmail = other17.organizationEmail;
  stockMarketSymbol = other17.stockMarketSymbol;
  __isset = other17.__isset;
}
Organization& Organization::operator=(const Organization& other18) {
  organizationId = other18.organizationId;
  organizationName = other18.organizationName;
  website = other18.website;
  logo = other18.logo;
  techStack = other18.techStack;
  owners = other18.owners;
  organizationEmail = other18.organizationEmail;
  stockMarketSymbol = other18.stockMarketSymbol;
  __isset = other18.__isset;
  return *this;
}
void Organization::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Organization(";
  out << "organizationId=" << to_string(organizationId);
  out << ", " << "organizationName=" << to_string(organizationName);
  out << ", " << "website="; (__isset.website ? (out << to_string(website)) : (out << "<null>"));
  out << ", " << "logo="; (__isset.logo ? (out << to_string(logo)) : (out << "<null>"));
  out << ", " << "techStack="; (__isset.techStack ? (out << to_string(techStack)) : (out << "<null>"));
  out << ", " << "owners="; (__isset.owners ? (out << to_string(owners)) : (out << "<null>"));
  out << ", " << "organizationEmail="; (__isset.organizationEmail ? (out << to_string(organizationEmail)) : (out << "<null>"));
  out << ", " << "stockMarketSymbol="; (__isset.stockMarketSymbol ? (out << to_string(stockMarketSymbol)) : (out << "<null>"));
  out << ")";
}


User::~User() throw() {
}


void User::__set_email(const std::string& val) {
  this->email = val;
}

void User::__set_userId(const uuid& val) {
  this->userId = val;
}

void User::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void User::__set_roles(const std::set<Role::type> & val) {
  this->roles = val;
}

void User::__set_profileImage(const Image& val) {
  this->profileImage = val;
__isset.profileImage = true;
}

void User::__set_profileImageLink(const std::string& val) {
  this->profileImageLink = val;
__isset.profileImageLink = true;
}

void User::__set_githubProfile(const std::string& val) {
  this->githubProfile = val;
__isset.githubProfile = true;
}

void User::__set_firstName(const std::string& val) {
  this->firstName = val;
__isset.firstName = true;
}

void User::__set_middleName(const std::string& val) {
  this->middleName = val;
__isset.middleName = true;
}

void User::__set_lastName(const std::string& val) {
  this->lastName = val;
__isset.lastName = true;
}

void User::__set_birthdate(const timestamp val) {
  this->birthdate = val;
__isset.birthdate = true;
}

uint32_t User::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userId);
          this->__isset.userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->roles.clear();
            uint32_t _size19;
            ::apache::thrift::protocol::TType _etype22;
            xfer += iprot->readSetBegin(_etype22, _size19);
            uint32_t _i23;
            for (_i23 = 0; _i23 < _size19; ++_i23)
            {
              Role::type _elem24;
              int32_t ecast25;
              xfer += iprot->readI32(ecast25);
              _elem24 = (Role::type)ecast25;
              this->roles.insert(_elem24);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.roles = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->profileImage.read(iprot);
          this->__isset.profileImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->profileImageLink);
          this->__isset.profileImageLink = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->githubProfile);
          this->__isset.githubProfile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->firstName);
          this->__isset.firstName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->middleName);
          this->__isset.middleName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lastName);
          this->__isset.lastName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->birthdate);
          this->__isset.birthdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User");

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->userId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("roles", ::apache::thrift::protocol::T_SET, 4);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->roles.size()));
    std::set<Role::type> ::const_iterator _iter26;
    for (_iter26 = this->roles.begin(); _iter26 != this->roles.end(); ++_iter26)
    {
      xfer += oprot->writeI32((int32_t)(*_iter26));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.profileImage) {
    xfer += oprot->writeFieldBegin("profileImage", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->profileImage.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.profileImageLink) {
    xfer += oprot->writeFieldBegin("profileImageLink", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->profileImageLink);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.githubProfile) {
    xfer += oprot->writeFieldBegin("githubProfile", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->githubProfile);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.firstName) {
    xfer += oprot->writeFieldBegin("firstName", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->firstName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.middleName) {
    xfer += oprot->writeFieldBegin("middleName", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->middleName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastName) {
    xfer += oprot->writeFieldBegin("lastName", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->lastName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.birthdate) {
    xfer += oprot->writeFieldBegin("birthdate", ::apache::thrift::protocol::T_I64, 11);
    xfer += oprot->writeI64(this->birthdate);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User &a, User &b) {
  using ::std::swap;
  swap(a.email, b.email);
  swap(a.userId, b.userId);
  swap(a.name, b.name);
  swap(a.roles, b.roles);
  swap(a.profileImage, b.profileImage);
  swap(a.profileImageLink, b.profileImageLink);
  swap(a.githubProfile, b.githubProfile);
  swap(a.firstName, b.firstName);
  swap(a.middleName, b.middleName);
  swap(a.lastName, b.lastName);
  swap(a.birthdate, b.birthdate);
  swap(a.__isset, b.__isset);
}

User::User(const User& other27) {
  email = other27.email;
  userId = other27.userId;
  name = other27.name;
  roles = other27.roles;
  profileImage = other27.profileImage;
  profileImageLink = other27.profileImageLink;
  githubProfile = other27.githubProfile;
  firstName = other27.firstName;
  middleName = other27.middleName;
  lastName = other27.lastName;
  birthdate = other27.birthdate;
  __isset = other27.__isset;
}
User& User::operator=(const User& other28) {
  email = other28.email;
  userId = other28.userId;
  name = other28.name;
  roles = other28.roles;
  profileImage = other28.profileImage;
  profileImageLink = other28.profileImageLink;
  githubProfile = other28.githubProfile;
  firstName = other28.firstName;
  middleName = other28.middleName;
  lastName = other28.lastName;
  birthdate = other28.birthdate;
  __isset = other28.__isset;
  return *this;
}
void User::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User(";
  out << "email=" << to_string(email);
  out << ", " << "userId=" << to_string(userId);
  out << ", " << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "roles=" << to_string(roles);
  out << ", " << "profileImage="; (__isset.profileImage ? (out << to_string(profileImage)) : (out << "<null>"));
  out << ", " << "profileImageLink="; (__isset.profileImageLink ? (out << to_string(profileImageLink)) : (out << "<null>"));
  out << ", " << "githubProfile="; (__isset.githubProfile ? (out << to_string(githubProfile)) : (out << "<null>"));
  out << ", " << "firstName="; (__isset.firstName ? (out << to_string(firstName)) : (out << "<null>"));
  out << ", " << "middleName="; (__isset.middleName ? (out << to_string(middleName)) : (out << "<null>"));
  out << ", " << "lastName="; (__isset.lastName ? (out << to_string(lastName)) : (out << "<null>"));
  out << ", " << "birthdate="; (__isset.birthdate ? (out << to_string(birthdate)) : (out << "<null>"));
  out << ")";
}


Application::~Application() throw() {
}


void Application::__set_owners(const std::set<uuid> & val) {
  this->owners = val;
}

void Application::__set_timeOfProvisioning(const timestamp val) {
  this->timeOfProvisioning = val;
}

void Application::__set_name(const std::string& val) {
  this->name = val;
}

void Application::__set_applicationId(const uuid& val) {
  this->applicationId = val;
}

void Application::__set_totalMessagesSent(const long val) {
  this->totalMessagesSent = val;
}

void Application::__set_icon(const Image& val) {
  this->icon = val;
__isset.icon = true;
}

void Application::__set_programmingLanguage(const ProgrammingLanguage::type val) {
  this->programmingLanguage = val;
__isset.programmingLanguage = true;
}

void Application::__set_followers(const std::set<uuid> & val) {
  this->followers = val;
__isset.followers = true;
}

void Application::__set_applicationDescription(const std::string& val) {
  this->applicationDescription = val;
}

void Application::__set_organizationId(const uuid& val) {
  this->organizationId = val;
}

void Application::__set_tier(const Tier::type val) {
  this->tier = val;
__isset.tier = true;
}

uint32_t Application::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->owners.clear();
            uint32_t _size29;
            ::apache::thrift::protocol::TType _etype32;
            xfer += iprot->readSetBegin(_etype32, _size29);
            uint32_t _i33;
            for (_i33 = 0; _i33 < _size29; ++_i33)
            {
              uuid _elem34;
              xfer += iprot->readString(_elem34);
              this->owners.insert(_elem34);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.owners = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timeOfProvisioning);
          this->__isset.timeOfProvisioning = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->totalMessagesSent);
          this->__isset.totalMessagesSent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->icon.read(iprot);
          this->__isset.icon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast35;
          xfer += iprot->readI32(ecast35);
          this->programmingLanguage = (ProgrammingLanguage::type)ecast35;
          this->__isset.programmingLanguage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->followers.clear();
            uint32_t _size36;
            ::apache::thrift::protocol::TType _etype39;
            xfer += iprot->readSetBegin(_etype39, _size36);
            uint32_t _i40;
            for (_i40 = 0; _i40 < _size36; ++_i40)
            {
              uuid _elem41;
              xfer += iprot->readString(_elem41);
              this->followers.insert(_elem41);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.followers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationDescription);
          this->__isset.applicationDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organizationId);
          this->__isset.organizationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast42;
          xfer += iprot->readI32(ecast42);
          this->tier = (Tier::type)ecast42;
          this->__isset.tier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Application::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Application");

  xfer += oprot->writeFieldBegin("owners", ::apache::thrift::protocol::T_SET, 1);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->owners.size()));
    std::set<uuid> ::const_iterator _iter43;
    for (_iter43 = this->owners.begin(); _iter43 != this->owners.end(); ++_iter43)
    {
      xfer += oprot->writeString((*_iter43));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeOfProvisioning", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->timeOfProvisioning);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalMessagesSent", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->totalMessagesSent);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.icon) {
    xfer += oprot->writeFieldBegin("icon", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->icon.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.programmingLanguage) {
    xfer += oprot->writeFieldBegin("programmingLanguage", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32((int32_t)this->programmingLanguage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.followers) {
    xfer += oprot->writeFieldBegin("followers", ::apache::thrift::protocol::T_SET, 8);
    {
      xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->followers.size()));
      std::set<uuid> ::const_iterator _iter44;
      for (_iter44 = this->followers.begin(); _iter44 != this->followers.end(); ++_iter44)
      {
        xfer += oprot->writeString((*_iter44));
      }
      xfer += oprot->writeSetEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("applicationDescription", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->applicationDescription);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("organizationId", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->organizationId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.tier) {
    xfer += oprot->writeFieldBegin("tier", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32((int32_t)this->tier);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Application &a, Application &b) {
  using ::std::swap;
  swap(a.owners, b.owners);
  swap(a.timeOfProvisioning, b.timeOfProvisioning);
  swap(a.name, b.name);
  swap(a.applicationId, b.applicationId);
  swap(a.totalMessagesSent, b.totalMessagesSent);
  swap(a.icon, b.icon);
  swap(a.programmingLanguage, b.programmingLanguage);
  swap(a.followers, b.followers);
  swap(a.applicationDescription, b.applicationDescription);
  swap(a.organizationId, b.organizationId);
  swap(a.tier, b.tier);
  swap(a.__isset, b.__isset);
}

Application::Application(const Application& other45) {
  owners = other45.owners;
  timeOfProvisioning = other45.timeOfProvisioning;
  name = other45.name;
  applicationId = other45.applicationId;
  totalMessagesSent = other45.totalMessagesSent;
  icon = other45.icon;
  programmingLanguage = other45.programmingLanguage;
  followers = other45.followers;
  applicationDescription = other45.applicationDescription;
  organizationId = other45.organizationId;
  tier = other45.tier;
  __isset = other45.__isset;
}
Application& Application::operator=(const Application& other46) {
  owners = other46.owners;
  timeOfProvisioning = other46.timeOfProvisioning;
  name = other46.name;
  applicationId = other46.applicationId;
  totalMessagesSent = other46.totalMessagesSent;
  icon = other46.icon;
  programmingLanguage = other46.programmingLanguage;
  followers = other46.followers;
  applicationDescription = other46.applicationDescription;
  organizationId = other46.organizationId;
  tier = other46.tier;
  __isset = other46.__isset;
  return *this;
}
void Application::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Application(";
  out << "owners=" << to_string(owners);
  out << ", " << "timeOfProvisioning=" << to_string(timeOfProvisioning);
  out << ", " << "name=" << to_string(name);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ", " << "totalMessagesSent=" << to_string(totalMessagesSent);
  out << ", " << "icon="; (__isset.icon ? (out << to_string(icon)) : (out << "<null>"));
  out << ", " << "programmingLanguage="; (__isset.programmingLanguage ? (out << to_string(programmingLanguage)) : (out << "<null>"));
  out << ", " << "followers="; (__isset.followers ? (out << to_string(followers)) : (out << "<null>"));
  out << ", " << "applicationDescription=" << to_string(applicationDescription);
  out << ", " << "organizationId=" << to_string(organizationId);
  out << ", " << "tier="; (__isset.tier ? (out << to_string(tier)) : (out << "<null>"));
  out << ")";
}


ServiceAnnouncement::~ServiceAnnouncement() throw() {
}


void ServiceAnnouncement::__set_message(const std::string& val) {
  this->message = val;
}

void ServiceAnnouncement::__set_importance(const Urgency::type val) {
  this->importance = val;
}

void ServiceAnnouncement::__set_id(const uuid& val) {
  this->id = val;
}

void ServiceAnnouncement::__set_timeOfExpiration(const timestamp val) {
  this->timeOfExpiration = val;
}

uint32_t ServiceAnnouncement::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast47;
          xfer += iprot->readI32(ecast47);
          this->importance = (Urgency::type)ecast47;
          this->__isset.importance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timeOfExpiration);
          this->__isset.timeOfExpiration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceAnnouncement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ServiceAnnouncement");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("importance", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->importance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeOfExpiration", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->timeOfExpiration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceAnnouncement &a, ServiceAnnouncement &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.importance, b.importance);
  swap(a.id, b.id);
  swap(a.timeOfExpiration, b.timeOfExpiration);
  swap(a.__isset, b.__isset);
}

ServiceAnnouncement::ServiceAnnouncement(const ServiceAnnouncement& other48) {
  message = other48.message;
  importance = other48.importance;
  id = other48.id;
  timeOfExpiration = other48.timeOfExpiration;
  __isset = other48.__isset;
}
ServiceAnnouncement& ServiceAnnouncement::operator=(const ServiceAnnouncement& other49) {
  message = other49.message;
  importance = other49.importance;
  id = other49.id;
  timeOfExpiration = other49.timeOfExpiration;
  __isset = other49.__isset;
  return *this;
}
void ServiceAnnouncement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ServiceAnnouncement(";
  out << "message=" << to_string(message);
  out << ", " << "importance=" << to_string(importance);
  out << ", " << "id=" << to_string(id);
  out << ", " << "timeOfExpiration=" << to_string(timeOfExpiration);
  out << ")";
}

}}} // namespace
