/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Channels_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace aroma { namespace thrift { namespace channels {


IOSDevice::~IOSDevice() throw() {
}


void IOSDevice::__set_deviceToken(const std::string& val) {
  this->deviceToken = val;
}

uint32_t IOSDevice::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->deviceToken);
          this->__isset.deviceToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IOSDevice::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("IOSDevice");

  xfer += oprot->writeFieldBegin("deviceToken", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->deviceToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IOSDevice &a, IOSDevice &b) {
  using ::std::swap;
  swap(a.deviceToken, b.deviceToken);
  swap(a.__isset, b.__isset);
}

IOSDevice::IOSDevice(const IOSDevice& other0) {
  deviceToken = other0.deviceToken;
  __isset = other0.__isset;
}
IOSDevice& IOSDevice::operator=(const IOSDevice& other1) {
  deviceToken = other1.deviceToken;
  __isset = other1.__isset;
  return *this;
}
void IOSDevice::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "IOSDevice(";
  out << "deviceToken=" << to_string(deviceToken);
  out << ")";
}


AndroidDevice::~AndroidDevice() throw() {
}


void AndroidDevice::__set_registrationId(const std::string& val) {
  this->registrationId = val;
}

uint32_t AndroidDevice::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->registrationId);
          this->__isset.registrationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AndroidDevice::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AndroidDevice");

  xfer += oprot->writeFieldBegin("registrationId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->registrationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AndroidDevice &a, AndroidDevice &b) {
  using ::std::swap;
  swap(a.registrationId, b.registrationId);
  swap(a.__isset, b.__isset);
}

AndroidDevice::AndroidDevice(const AndroidDevice& other2) {
  registrationId = other2.registrationId;
  __isset = other2.__isset;
}
AndroidDevice& AndroidDevice::operator=(const AndroidDevice& other3) {
  registrationId = other3.registrationId;
  __isset = other3.__isset;
  return *this;
}
void AndroidDevice::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AndroidDevice(";
  out << "registrationId=" << to_string(registrationId);
  out << ")";
}


WindowsPhoneDevice::~WindowsPhoneDevice() throw() {
}


uint32_t WindowsPhoneDevice::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WindowsPhoneDevice::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WindowsPhoneDevice");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WindowsPhoneDevice &a, WindowsPhoneDevice &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

WindowsPhoneDevice::WindowsPhoneDevice(const WindowsPhoneDevice& other4) {
  (void) other4;
}
WindowsPhoneDevice& WindowsPhoneDevice::operator=(const WindowsPhoneDevice& other5) {
  (void) other5;
  return *this;
}
void WindowsPhoneDevice::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WindowsPhoneDevice(";
  out << ")";
}


MobileDevice::~MobileDevice() throw() {
}


void MobileDevice::__set_iosDevice(const IOSDevice& val) {
  this->iosDevice = val;
}

void MobileDevice::__set_androidDevice(const AndroidDevice& val) {
  this->androidDevice = val;
}

void MobileDevice::__set_windowsPhoneDevice(const WindowsPhoneDevice& val) {
  this->windowsPhoneDevice = val;
}

uint32_t MobileDevice::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->iosDevice.read(iprot);
          this->__isset.iosDevice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->androidDevice.read(iprot);
          this->__isset.androidDevice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->windowsPhoneDevice.read(iprot);
          this->__isset.windowsPhoneDevice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MobileDevice::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MobileDevice");

  xfer += oprot->writeFieldBegin("iosDevice", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->iosDevice.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("androidDevice", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->androidDevice.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("windowsPhoneDevice", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->windowsPhoneDevice.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MobileDevice &a, MobileDevice &b) {
  using ::std::swap;
  swap(a.iosDevice, b.iosDevice);
  swap(a.androidDevice, b.androidDevice);
  swap(a.windowsPhoneDevice, b.windowsPhoneDevice);
  swap(a.__isset, b.__isset);
}

MobileDevice::MobileDevice(const MobileDevice& other6) {
  iosDevice = other6.iosDevice;
  androidDevice = other6.androidDevice;
  windowsPhoneDevice = other6.windowsPhoneDevice;
  __isset = other6.__isset;
}
MobileDevice& MobileDevice::operator=(const MobileDevice& other7) {
  iosDevice = other7.iosDevice;
  androidDevice = other7.androidDevice;
  windowsPhoneDevice = other7.windowsPhoneDevice;
  __isset = other7.__isset;
  return *this;
}
void MobileDevice::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MobileDevice(";
  out << "iosDevice=" << to_string(iosDevice);
  out << ", " << "androidDevice=" << to_string(androidDevice);
  out << ", " << "windowsPhoneDevice=" << to_string(windowsPhoneDevice);
  out << ")";
}


PushNotificationPayload::~PushNotificationPayload() throw() {
}


void PushNotificationPayload::__set_messageId(const uuid& val) {
  this->messageId = val;
}

void PushNotificationPayload::__set_applicationId(const uuid& val) {
  this->applicationId = val;
}

uint32_t PushNotificationPayload::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PushNotificationPayload::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PushNotificationPayload");

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->messageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PushNotificationPayload &a, PushNotificationPayload &b) {
  using ::std::swap;
  swap(a.messageId, b.messageId);
  swap(a.applicationId, b.applicationId);
  swap(a.__isset, b.__isset);
}

PushNotificationPayload::PushNotificationPayload(const PushNotificationPayload& other8) {
  messageId = other8.messageId;
  applicationId = other8.applicationId;
  __isset = other8.__isset;
}
PushNotificationPayload& PushNotificationPayload::operator=(const PushNotificationPayload& other9) {
  messageId = other9.messageId;
  applicationId = other9.applicationId;
  __isset = other9.__isset;
  return *this;
}
void PushNotificationPayload::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PushNotificationPayload(";
  out << "messageId=" << to_string(messageId);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ")";
}


SlackChannel::~SlackChannel() throw() {
}


void SlackChannel::__set_domainName(const std::string& val) {
  this->domainName = val;
}

void SlackChannel::__set_channelName(const std::string& val) {
  this->channelName = val;
}

void SlackChannel::__set_slackToken(const std::string& val) {
  this->slackToken = val;
}

uint32_t SlackChannel::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->domainName);
          this->__isset.domainName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->channelName);
          this->__isset.channelName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->slackToken);
          this->__isset.slackToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SlackChannel::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SlackChannel");

  xfer += oprot->writeFieldBegin("domainName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->domainName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channelName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->channelName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("slackToken", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->slackToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SlackChannel &a, SlackChannel &b) {
  using ::std::swap;
  swap(a.domainName, b.domainName);
  swap(a.channelName, b.channelName);
  swap(a.slackToken, b.slackToken);
  swap(a.__isset, b.__isset);
}

SlackChannel::SlackChannel(const SlackChannel& other10) {
  domainName = other10.domainName;
  channelName = other10.channelName;
  slackToken = other10.slackToken;
  __isset = other10.__isset;
}
SlackChannel& SlackChannel::operator=(const SlackChannel& other11) {
  domainName = other11.domainName;
  channelName = other11.channelName;
  slackToken = other11.slackToken;
  __isset = other11.__isset;
  return *this;
}
void SlackChannel::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SlackChannel(";
  out << "domainName=" << to_string(domainName);
  out << ", " << "channelName=" << to_string(channelName);
  out << ", " << "slackToken=" << to_string(slackToken);
  out << ")";
}


SlackUsername::~SlackUsername() throw() {
}


void SlackUsername::__set_domainName(const std::string& val) {
  this->domainName = val;
}

void SlackUsername::__set_username(const std::string& val) {
  this->username = val;
}

void SlackUsername::__set_slackToken(const std::string& val) {
  this->slackToken = val;
}

uint32_t SlackUsername::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->domainName);
          this->__isset.domainName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->slackToken);
          this->__isset.slackToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SlackUsername::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SlackUsername");

  xfer += oprot->writeFieldBegin("domainName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->domainName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("slackToken", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->slackToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SlackUsername &a, SlackUsername &b) {
  using ::std::swap;
  swap(a.domainName, b.domainName);
  swap(a.username, b.username);
  swap(a.slackToken, b.slackToken);
  swap(a.__isset, b.__isset);
}

SlackUsername::SlackUsername(const SlackUsername& other12) {
  domainName = other12.domainName;
  username = other12.username;
  slackToken = other12.slackToken;
  __isset = other12.__isset;
}
SlackUsername& SlackUsername::operator=(const SlackUsername& other13) {
  domainName = other13.domainName;
  username = other13.username;
  slackToken = other13.slackToken;
  __isset = other13.__isset;
  return *this;
}
void SlackUsername::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SlackUsername(";
  out << "domainName=" << to_string(domainName);
  out << ", " << "username=" << to_string(username);
  out << ", " << "slackToken=" << to_string(slackToken);
  out << ")";
}


Email::~Email() throw() {
}


void Email::__set_emailAddress(const std::string& val) {
  this->emailAddress = val;
}

void Email::__set_subject(const std::string& val) {
  this->subject = val;
__isset.subject = true;
}

uint32_t Email::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->emailAddress);
          this->__isset.emailAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->subject);
          this->__isset.subject = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Email::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Email");

  xfer += oprot->writeFieldBegin("emailAddress", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->emailAddress);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.subject) {
    xfer += oprot->writeFieldBegin("subject", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->subject);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Email &a, Email &b) {
  using ::std::swap;
  swap(a.emailAddress, b.emailAddress);
  swap(a.subject, b.subject);
  swap(a.__isset, b.__isset);
}

Email::Email(const Email& other14) {
  emailAddress = other14.emailAddress;
  subject = other14.subject;
  __isset = other14.__isset;
}
Email& Email::operator=(const Email& other15) {
  emailAddress = other15.emailAddress;
  subject = other15.subject;
  __isset = other15.__isset;
  return *this;
}
void Email::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Email(";
  out << "emailAddress=" << to_string(emailAddress);
  out << ", " << "subject="; (__isset.subject ? (out << to_string(subject)) : (out << "<null>"));
  out << ")";
}


CustomChannel::~CustomChannel() throw() {
}


void CustomChannel::__set_endpoint(const  ::aroma::thrift::endpoint::Endpoint& val) {
  this->endpoint = val;
}

uint32_t CustomChannel::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->endpoint.read(iprot);
          this->__isset.endpoint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CustomChannel::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CustomChannel");

  xfer += oprot->writeFieldBegin("endpoint", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->endpoint.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CustomChannel &a, CustomChannel &b) {
  using ::std::swap;
  swap(a.endpoint, b.endpoint);
  swap(a.__isset, b.__isset);
}

CustomChannel::CustomChannel(const CustomChannel& other16) {
  endpoint = other16.endpoint;
  __isset = other16.__isset;
}
CustomChannel& CustomChannel::operator=(const CustomChannel& other17) {
  endpoint = other17.endpoint;
  __isset = other17.__isset;
  return *this;
}
void CustomChannel::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CustomChannel(";
  out << "endpoint=" << to_string(endpoint);
  out << ")";
}


AromaChannel::~AromaChannel() throw() {
}


void AromaChannel::__set_slackChannel(const SlackChannel& val) {
  this->slackChannel = val;
}

void AromaChannel::__set_slackUsername(const SlackUsername& val) {
  this->slackUsername = val;
}

void AromaChannel::__set_email(const Email& val) {
  this->email = val;
}

void AromaChannel::__set_customChannel(const CustomChannel& val) {
  this->customChannel = val;
}

void AromaChannel::__set_iosDevice(const IOSDevice& val) {
  this->iosDevice = val;
}

void AromaChannel::__set_androidDevice(const AndroidDevice& val) {
  this->androidDevice = val;
}

void AromaChannel::__set_windowsPhoneDevice(const WindowsPhoneDevice& val) {
  this->windowsPhoneDevice = val;
}

uint32_t AromaChannel::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->slackChannel.read(iprot);
          this->__isset.slackChannel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->slackUsername.read(iprot);
          this->__isset.slackUsername = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->email.read(iprot);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->customChannel.read(iprot);
          this->__isset.customChannel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->iosDevice.read(iprot);
          this->__isset.iosDevice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->androidDevice.read(iprot);
          this->__isset.androidDevice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->windowsPhoneDevice.read(iprot);
          this->__isset.windowsPhoneDevice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AromaChannel::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AromaChannel");

  xfer += oprot->writeFieldBegin("slackChannel", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->slackChannel.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("slackUsername", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->slackUsername.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->email.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("customChannel", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->customChannel.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iosDevice", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->iosDevice.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("androidDevice", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->androidDevice.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("windowsPhoneDevice", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->windowsPhoneDevice.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AromaChannel &a, AromaChannel &b) {
  using ::std::swap;
  swap(a.slackChannel, b.slackChannel);
  swap(a.slackUsername, b.slackUsername);
  swap(a.email, b.email);
  swap(a.customChannel, b.customChannel);
  swap(a.iosDevice, b.iosDevice);
  swap(a.androidDevice, b.androidDevice);
  swap(a.windowsPhoneDevice, b.windowsPhoneDevice);
  swap(a.__isset, b.__isset);
}

AromaChannel::AromaChannel(const AromaChannel& other18) {
  slackChannel = other18.slackChannel;
  slackUsername = other18.slackUsername;
  email = other18.email;
  customChannel = other18.customChannel;
  iosDevice = other18.iosDevice;
  androidDevice = other18.androidDevice;
  windowsPhoneDevice = other18.windowsPhoneDevice;
  __isset = other18.__isset;
}
AromaChannel& AromaChannel::operator=(const AromaChannel& other19) {
  slackChannel = other19.slackChannel;
  slackUsername = other19.slackUsername;
  email = other19.email;
  customChannel = other19.customChannel;
  iosDevice = other19.iosDevice;
  androidDevice = other19.androidDevice;
  windowsPhoneDevice = other19.windowsPhoneDevice;
  __isset = other19.__isset;
  return *this;
}
void AromaChannel::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AromaChannel(";
  out << "slackChannel=" << to_string(slackChannel);
  out << ", " << "slackUsername=" << to_string(slackUsername);
  out << ", " << "email=" << to_string(email);
  out << ", " << "customChannel=" << to_string(customChannel);
  out << ", " << "iosDevice=" << to_string(iosDevice);
  out << ", " << "androidDevice=" << to_string(androidDevice);
  out << ", " << "windowsPhoneDevice=" << to_string(windowsPhoneDevice);
  out << ")";
}


ChannelInfo::~ChannelInfo() throw() {
}


void ChannelInfo::__set_channel(const AromaChannel& val) {
  this->channel = val;
}

void ChannelInfo::__set_timeRegistered(const timestamp val) {
  this->timeRegistered = val;
}

void ChannelInfo::__set_channelId(const uuid& val) {
  this->channelId = val;
__isset.channelId = true;
}

uint32_t ChannelInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->channel.read(iprot);
          this->__isset.channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timeRegistered);
          this->__isset.timeRegistered = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->channelId);
          this->__isset.channelId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ChannelInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ChannelInfo");

  xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->channel.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeRegistered", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->timeRegistered);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.channelId) {
    xfer += oprot->writeFieldBegin("channelId", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->channelId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ChannelInfo &a, ChannelInfo &b) {
  using ::std::swap;
  swap(a.channel, b.channel);
  swap(a.timeRegistered, b.timeRegistered);
  swap(a.channelId, b.channelId);
  swap(a.__isset, b.__isset);
}

ChannelInfo::ChannelInfo(const ChannelInfo& other20) {
  channel = other20.channel;
  timeRegistered = other20.timeRegistered;
  channelId = other20.channelId;
  __isset = other20.__isset;
}
ChannelInfo& ChannelInfo::operator=(const ChannelInfo& other21) {
  channel = other21.channel;
  timeRegistered = other21.timeRegistered;
  channelId = other21.channelId;
  __isset = other21.__isset;
  return *this;
}
void ChannelInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ChannelInfo(";
  out << "channel=" << to_string(channel);
  out << ", " << "timeRegistered=" << to_string(timeRegistered);
  out << ", " << "channelId="; (__isset.channelId ? (out << to_string(channelId)) : (out << "<null>"));
  out << ")";
}


ReceiveMessageRequest::~ReceiveMessageRequest() throw() {
}


void ReceiveMessageRequest::__set_message(const  ::tech::aroma::thrift::Message& val) {
  this->message = val;
}

uint32_t ReceiveMessageRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->message.read(iprot);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReceiveMessageRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ReceiveMessageRequest");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->message.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReceiveMessageRequest &a, ReceiveMessageRequest &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

ReceiveMessageRequest::ReceiveMessageRequest(const ReceiveMessageRequest& other22) {
  message = other22.message;
  __isset = other22.__isset;
}
ReceiveMessageRequest& ReceiveMessageRequest::operator=(const ReceiveMessageRequest& other23) {
  message = other23.message;
  __isset = other23.__isset;
  return *this;
}
void ReceiveMessageRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReceiveMessageRequest(";
  out << "message=" << to_string(message);
  out << ")";
}

}}} // namespace
