/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Channels_TYPES_H
#define Channels_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "Aroma_types.h"
#include "Endpoint_types.h"
#include "Exceptions_types.h"


namespace aroma { namespace thrift { namespace channels {

typedef  ::tech::aroma::thrift::int int;

typedef  ::tech::aroma::thrift::long long;

typedef  ::tech::aroma::thrift::timestamp timestamp;

typedef  ::tech::aroma::thrift::uuid uuid;

class IOSDevice;

class AndroidDevice;

class WindowsPhoneDevice;

class MobileDevice;

class PushNotificationPayload;

class SlackChannel;

class SlackUsername;

class Email;

class CustomChannel;

class AromaChannel;

class ChannelInfo;

class ReceiveMessageRequest;

typedef struct _IOSDevice__isset {
  _IOSDevice__isset() : deviceToken(false) {}
  bool deviceToken :1;
} _IOSDevice__isset;

class IOSDevice {
 public:

  IOSDevice(const IOSDevice&);
  IOSDevice& operator=(const IOSDevice&);
  IOSDevice() : deviceToken() {
  }

  virtual ~IOSDevice() throw();
  std::string deviceToken;

  _IOSDevice__isset __isset;

  void __set_deviceToken(const std::string& val);

  bool operator == (const IOSDevice & rhs) const
  {
    if (!(deviceToken == rhs.deviceToken))
      return false;
    return true;
  }
  bool operator != (const IOSDevice &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IOSDevice & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(IOSDevice &a, IOSDevice &b);

inline std::ostream& operator<<(std::ostream& out, const IOSDevice& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _AndroidDevice__isset {
  _AndroidDevice__isset() : registrationId(false) {}
  bool registrationId :1;
} _AndroidDevice__isset;

class AndroidDevice {
 public:

  AndroidDevice(const AndroidDevice&);
  AndroidDevice& operator=(const AndroidDevice&);
  AndroidDevice() : registrationId() {
  }

  virtual ~AndroidDevice() throw();
  std::string registrationId;

  _AndroidDevice__isset __isset;

  void __set_registrationId(const std::string& val);

  bool operator == (const AndroidDevice & rhs) const
  {
    if (!(registrationId == rhs.registrationId))
      return false;
    return true;
  }
  bool operator != (const AndroidDevice &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AndroidDevice & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AndroidDevice &a, AndroidDevice &b);

inline std::ostream& operator<<(std::ostream& out, const AndroidDevice& obj)
{
  obj.printTo(out);
  return out;
}


class WindowsPhoneDevice {
 public:

  WindowsPhoneDevice(const WindowsPhoneDevice&);
  WindowsPhoneDevice& operator=(const WindowsPhoneDevice&);
  WindowsPhoneDevice() {
  }

  virtual ~WindowsPhoneDevice() throw();

  bool operator == (const WindowsPhoneDevice & /* rhs */) const
  {
    return true;
  }
  bool operator != (const WindowsPhoneDevice &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WindowsPhoneDevice & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WindowsPhoneDevice &a, WindowsPhoneDevice &b);

inline std::ostream& operator<<(std::ostream& out, const WindowsPhoneDevice& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _MobileDevice__isset {
  _MobileDevice__isset() : iosDevice(false), androidDevice(false), windowsPhoneDevice(false) {}
  bool iosDevice :1;
  bool androidDevice :1;
  bool windowsPhoneDevice :1;
} _MobileDevice__isset;

class MobileDevice {
 public:

  MobileDevice(const MobileDevice&);
  MobileDevice& operator=(const MobileDevice&);
  MobileDevice() {
  }

  virtual ~MobileDevice() throw();
  IOSDevice iosDevice;
  AndroidDevice androidDevice;
  WindowsPhoneDevice windowsPhoneDevice;

  _MobileDevice__isset __isset;

  void __set_iosDevice(const IOSDevice& val);

  void __set_androidDevice(const AndroidDevice& val);

  void __set_windowsPhoneDevice(const WindowsPhoneDevice& val);

  bool operator == (const MobileDevice & rhs) const
  {
    if (!(iosDevice == rhs.iosDevice))
      return false;
    if (!(androidDevice == rhs.androidDevice))
      return false;
    if (!(windowsPhoneDevice == rhs.windowsPhoneDevice))
      return false;
    return true;
  }
  bool operator != (const MobileDevice &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MobileDevice & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MobileDevice &a, MobileDevice &b);

inline std::ostream& operator<<(std::ostream& out, const MobileDevice& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _PushNotificationPayload__isset {
  _PushNotificationPayload__isset() : messageId(false), applicationId(false) {}
  bool messageId :1;
  bool applicationId :1;
} _PushNotificationPayload__isset;

class PushNotificationPayload {
 public:

  PushNotificationPayload(const PushNotificationPayload&);
  PushNotificationPayload& operator=(const PushNotificationPayload&);
  PushNotificationPayload() : messageId(), applicationId() {
  }

  virtual ~PushNotificationPayload() throw();
  uuid messageId;
  uuid applicationId;

  _PushNotificationPayload__isset __isset;

  void __set_messageId(const uuid& val);

  void __set_applicationId(const uuid& val);

  bool operator == (const PushNotificationPayload & rhs) const
  {
    if (!(messageId == rhs.messageId))
      return false;
    if (!(applicationId == rhs.applicationId))
      return false;
    return true;
  }
  bool operator != (const PushNotificationPayload &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushNotificationPayload & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PushNotificationPayload &a, PushNotificationPayload &b);

inline std::ostream& operator<<(std::ostream& out, const PushNotificationPayload& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SlackChannel__isset {
  _SlackChannel__isset() : domainName(false), channelName(false), slackToken(false) {}
  bool domainName :1;
  bool channelName :1;
  bool slackToken :1;
} _SlackChannel__isset;

class SlackChannel {
 public:

  SlackChannel(const SlackChannel&);
  SlackChannel& operator=(const SlackChannel&);
  SlackChannel() : domainName(), channelName(), slackToken() {
  }

  virtual ~SlackChannel() throw();
  std::string domainName;
  std::string channelName;
  std::string slackToken;

  _SlackChannel__isset __isset;

  void __set_domainName(const std::string& val);

  void __set_channelName(const std::string& val);

  void __set_slackToken(const std::string& val);

  bool operator == (const SlackChannel & rhs) const
  {
    if (!(domainName == rhs.domainName))
      return false;
    if (!(channelName == rhs.channelName))
      return false;
    if (!(slackToken == rhs.slackToken))
      return false;
    return true;
  }
  bool operator != (const SlackChannel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlackChannel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SlackChannel &a, SlackChannel &b);

inline std::ostream& operator<<(std::ostream& out, const SlackChannel& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SlackUsername__isset {
  _SlackUsername__isset() : domainName(false), username(false), slackToken(false) {}
  bool domainName :1;
  bool username :1;
  bool slackToken :1;
} _SlackUsername__isset;

class SlackUsername {
 public:

  SlackUsername(const SlackUsername&);
  SlackUsername& operator=(const SlackUsername&);
  SlackUsername() : domainName(), username(), slackToken() {
  }

  virtual ~SlackUsername() throw();
  std::string domainName;
  std::string username;
  std::string slackToken;

  _SlackUsername__isset __isset;

  void __set_domainName(const std::string& val);

  void __set_username(const std::string& val);

  void __set_slackToken(const std::string& val);

  bool operator == (const SlackUsername & rhs) const
  {
    if (!(domainName == rhs.domainName))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(slackToken == rhs.slackToken))
      return false;
    return true;
  }
  bool operator != (const SlackUsername &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlackUsername & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SlackUsername &a, SlackUsername &b);

inline std::ostream& operator<<(std::ostream& out, const SlackUsername& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Email__isset {
  _Email__isset() : emailAddress(false), subject(true) {}
  bool emailAddress :1;
  bool subject :1;
} _Email__isset;

class Email {
 public:

  Email(const Email&);
  Email& operator=(const Email&);
  Email() : emailAddress(), subject("Aroma - New Message") {
  }

  virtual ~Email() throw();
  std::string emailAddress;
  std::string subject;

  _Email__isset __isset;

  void __set_emailAddress(const std::string& val);

  void __set_subject(const std::string& val);

  bool operator == (const Email & rhs) const
  {
    if (!(emailAddress == rhs.emailAddress))
      return false;
    if (__isset.subject != rhs.__isset.subject)
      return false;
    else if (__isset.subject && !(subject == rhs.subject))
      return false;
    return true;
  }
  bool operator != (const Email &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Email & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Email &a, Email &b);

inline std::ostream& operator<<(std::ostream& out, const Email& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CustomChannel__isset {
  _CustomChannel__isset() : endpoint(false) {}
  bool endpoint :1;
} _CustomChannel__isset;

class CustomChannel {
 public:

  CustomChannel(const CustomChannel&);
  CustomChannel& operator=(const CustomChannel&);
  CustomChannel() {
  }

  virtual ~CustomChannel() throw();
   ::aroma::thrift::endpoint::Endpoint endpoint;

  _CustomChannel__isset __isset;

  void __set_endpoint(const  ::aroma::thrift::endpoint::Endpoint& val);

  bool operator == (const CustomChannel & rhs) const
  {
    if (!(endpoint == rhs.endpoint))
      return false;
    return true;
  }
  bool operator != (const CustomChannel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CustomChannel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CustomChannel &a, CustomChannel &b);

inline std::ostream& operator<<(std::ostream& out, const CustomChannel& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _AromaChannel__isset {
  _AromaChannel__isset() : slackChannel(false), slackUsername(false), email(false), customChannel(false), iosDevice(false), androidDevice(false), windowsPhoneDevice(false) {}
  bool slackChannel :1;
  bool slackUsername :1;
  bool email :1;
  bool customChannel :1;
  bool iosDevice :1;
  bool androidDevice :1;
  bool windowsPhoneDevice :1;
} _AromaChannel__isset;

class AromaChannel {
 public:

  AromaChannel(const AromaChannel&);
  AromaChannel& operator=(const AromaChannel&);
  AromaChannel() {
  }

  virtual ~AromaChannel() throw();
  SlackChannel slackChannel;
  SlackUsername slackUsername;
  Email email;
  CustomChannel customChannel;
  IOSDevice iosDevice;
  AndroidDevice androidDevice;
  WindowsPhoneDevice windowsPhoneDevice;

  _AromaChannel__isset __isset;

  void __set_slackChannel(const SlackChannel& val);

  void __set_slackUsername(const SlackUsername& val);

  void __set_email(const Email& val);

  void __set_customChannel(const CustomChannel& val);

  void __set_iosDevice(const IOSDevice& val);

  void __set_androidDevice(const AndroidDevice& val);

  void __set_windowsPhoneDevice(const WindowsPhoneDevice& val);

  bool operator == (const AromaChannel & rhs) const
  {
    if (!(slackChannel == rhs.slackChannel))
      return false;
    if (!(slackUsername == rhs.slackUsername))
      return false;
    if (!(email == rhs.email))
      return false;
    if (!(customChannel == rhs.customChannel))
      return false;
    if (!(iosDevice == rhs.iosDevice))
      return false;
    if (!(androidDevice == rhs.androidDevice))
      return false;
    if (!(windowsPhoneDevice == rhs.windowsPhoneDevice))
      return false;
    return true;
  }
  bool operator != (const AromaChannel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AromaChannel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AromaChannel &a, AromaChannel &b);

inline std::ostream& operator<<(std::ostream& out, const AromaChannel& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ChannelInfo__isset {
  _ChannelInfo__isset() : channel(false), timeRegistered(false), channelId(false) {}
  bool channel :1;
  bool timeRegistered :1;
  bool channelId :1;
} _ChannelInfo__isset;

class ChannelInfo {
 public:

  ChannelInfo(const ChannelInfo&);
  ChannelInfo& operator=(const ChannelInfo&);
  ChannelInfo() : timeRegistered(0), channelId() {
  }

  virtual ~ChannelInfo() throw();
  AromaChannel channel;
  timestamp timeRegistered;
  uuid channelId;

  _ChannelInfo__isset __isset;

  void __set_channel(const AromaChannel& val);

  void __set_timeRegistered(const timestamp val);

  void __set_channelId(const uuid& val);

  bool operator == (const ChannelInfo & rhs) const
  {
    if (!(channel == rhs.channel))
      return false;
    if (!(timeRegistered == rhs.timeRegistered))
      return false;
    if (__isset.channelId != rhs.__isset.channelId)
      return false;
    else if (__isset.channelId && !(channelId == rhs.channelId))
      return false;
    return true;
  }
  bool operator != (const ChannelInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ChannelInfo &a, ChannelInfo &b);

inline std::ostream& operator<<(std::ostream& out, const ChannelInfo& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ReceiveMessageRequest__isset {
  _ReceiveMessageRequest__isset() : message(false) {}
  bool message :1;
} _ReceiveMessageRequest__isset;

class ReceiveMessageRequest {
 public:

  ReceiveMessageRequest(const ReceiveMessageRequest&);
  ReceiveMessageRequest& operator=(const ReceiveMessageRequest&);
  ReceiveMessageRequest() {
  }

  virtual ~ReceiveMessageRequest() throw();
   ::tech::aroma::thrift::Message message;

  _ReceiveMessageRequest__isset __isset;

  void __set_message(const  ::tech::aroma::thrift::Message& val);

  bool operator == (const ReceiveMessageRequest & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ReceiveMessageRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReceiveMessageRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ReceiveMessageRequest &a, ReceiveMessageRequest &b);

inline std::ostream& operator<<(std::ostream& out, const ReceiveMessageRequest& obj)
{
  obj.printTo(out);
  return out;
}

}}} // namespace

#endif
