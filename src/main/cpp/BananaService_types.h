/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BananaService_TYPES_H
#define BananaService_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "Authentication_types.h"
#include "Banana_types.h"
#include "Channels_types.h"
#include "Endpoint_types.h"
#include "Exceptions_types.h"
#include "Notifications_types.h"


namespace aroma { namespace banana { namespace thrift { namespace service {

typedef  ::aroma::banana::thrift::int int;

typedef  ::aroma::banana::thrift::long long;

typedef  ::aroma::banana::thrift::timestamp timestamp;

typedef class  ::aroma::banana::thrift::authentication::DeveloperToken DeveloperToken;

typedef class  ::aroma::banana::thrift::authentication::ServiceToken ServiceToken;

typedef class  ::aroma::banana::thrift::authentication::Service Service;

typedef class  ::aroma::banana::thrift::Dimension Dimension;

typedef class  ::aroma::banana::thrift::Image Image;

typedef  ::aroma::banana::thrift::Urgency::type Urgency;

typedef class  ::aroma::banana::thrift::endpoint::Endpoint Endpoint;

typedef class  ::aroma::banana::thrift::endpoint::TcpEndpoint TcpEndpoint;

typedef class  ::aroma::banana::thrift::exceptions::InvalidArgumentException InvalidArgumentException;

typedef class  ::aroma::banana::thrift::exceptions::InvalidCredentialsException InvalidCredentialsException;

typedef class  ::aroma::banana::thrift::exceptions::OperationFailedException OperationFailedException;

typedef class  ::aroma::banana::thrift::exceptions::ServiceAlreadyRegisteredException ServiceAlreadyRegisteredException;

typedef class  ::aroma::banana::thrift::exceptions::ServiceDoesNotExistException ServiceDoesNotExistException;

typedef class  ::aroma::banana::thrift::exceptions::UnauthorizedException UnauthorizedException;

class SignInRequest;

class SignInResponse;

class ProvisionServiceRequest;

class ProvisionServiceResponse;

class SubscribeToServiceRequest;

class SubscribeToServiceResponse;

class RegisterHealthCheckRequest;

class RegisterHealthCheckResponse;

class RenewServiceTokenRequest;

class RenewServiceTokenResponse;

class RegenerateTokenRequest;

class RegenerateTokenResponse;

class DeleteMessageRequest;

class DeleteMessageResponse;

class DeleteAllMessagesRequest;

class HideMessageRequest;

class HideMessageResponse;

class HideAllMessagesRequest;

class HideAllMessagesResponse;

class SearchForServicesRequest;

class SearchForServicesResponse;

class SendMessageRequest;

class SendMessageResponse;

typedef struct _SignInRequest__isset {
  _SignInRequest__isset() : oathToken(false), username(false) {}
  bool oathToken :1;
  bool username :1;
} _SignInRequest__isset;

class SignInRequest {
 public:

  SignInRequest(const SignInRequest&);
  SignInRequest& operator=(const SignInRequest&);
  SignInRequest() : username() {
  }

  virtual ~SignInRequest() throw();
   ::aroma::banana::thrift::authentication::OauthToken oathToken;
  std::string username;

  _SignInRequest__isset __isset;

  void __set_oathToken(const  ::aroma::banana::thrift::authentication::OauthToken& val);

  void __set_username(const std::string& val);

  bool operator == (const SignInRequest & rhs) const
  {
    if (!(oathToken == rhs.oathToken))
      return false;
    if (!(username == rhs.username))
      return false;
    return true;
  }
  bool operator != (const SignInRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SignInRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SignInRequest &a, SignInRequest &b);

inline std::ostream& operator<<(std::ostream& out, const SignInRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SignInResponse__isset {
  _SignInResponse__isset() : developerToken(false) {}
  bool developerToken :1;
} _SignInResponse__isset;

class SignInResponse {
 public:

  SignInResponse(const SignInResponse&);
  SignInResponse& operator=(const SignInResponse&);
  SignInResponse() {
  }

  virtual ~SignInResponse() throw();
  DeveloperToken developerToken;

  _SignInResponse__isset __isset;

  void __set_developerToken(const DeveloperToken& val);

  bool operator == (const SignInResponse & rhs) const
  {
    if (!(developerToken == rhs.developerToken))
      return false;
    return true;
  }
  bool operator != (const SignInResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SignInResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SignInResponse &a, SignInResponse &b);

inline std::ostream& operator<<(std::ostream& out, const SignInResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ProvisionServiceRequest__isset {
  _ProvisionServiceRequest__isset() : token(false), serviceName(false), programmingLanguage(false), organization(false), icon(false), developerToken(false) {}
  bool token :1;
  bool serviceName :1;
  bool programmingLanguage :1;
  bool organization :1;
  bool icon :1;
  bool developerToken :1;
} _ProvisionServiceRequest__isset;

class ProvisionServiceRequest {
 public:

  ProvisionServiceRequest(const ProvisionServiceRequest&);
  ProvisionServiceRequest& operator=(const ProvisionServiceRequest&);
  ProvisionServiceRequest() : token(), serviceName(), programmingLanguage(), organization() {
  }

  virtual ~ProvisionServiceRequest() throw();
  std::string token;
  std::string serviceName;
  std::string programmingLanguage;
  std::string organization;
  Image icon;
  DeveloperToken developerToken;

  _ProvisionServiceRequest__isset __isset;

  void __set_token(const std::string& val);

  void __set_serviceName(const std::string& val);

  void __set_programmingLanguage(const std::string& val);

  void __set_organization(const std::string& val);

  void __set_icon(const Image& val);

  void __set_developerToken(const DeveloperToken& val);

  bool operator == (const ProvisionServiceRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(serviceName == rhs.serviceName))
      return false;
    if (__isset.programmingLanguage != rhs.__isset.programmingLanguage)
      return false;
    else if (__isset.programmingLanguage && !(programmingLanguage == rhs.programmingLanguage))
      return false;
    if (!(organization == rhs.organization))
      return false;
    if (__isset.icon != rhs.__isset.icon)
      return false;
    else if (__isset.icon && !(icon == rhs.icon))
      return false;
    if (!(developerToken == rhs.developerToken))
      return false;
    return true;
  }
  bool operator != (const ProvisionServiceRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvisionServiceRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ProvisionServiceRequest &a, ProvisionServiceRequest &b);

inline std::ostream& operator<<(std::ostream& out, const ProvisionServiceRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ProvisionServiceResponse__isset {
  _ProvisionServiceResponse__isset() : bananaToken(false), serviceName(false), serviceToken(false) {}
  bool bananaToken :1;
  bool serviceName :1;
  bool serviceToken :1;
} _ProvisionServiceResponse__isset;

class ProvisionServiceResponse {
 public:

  ProvisionServiceResponse(const ProvisionServiceResponse&);
  ProvisionServiceResponse& operator=(const ProvisionServiceResponse&);
  ProvisionServiceResponse() : bananaToken(), serviceName() {
  }

  virtual ~ProvisionServiceResponse() throw();
  std::string bananaToken;
  std::string serviceName;
  ServiceToken serviceToken;

  _ProvisionServiceResponse__isset __isset;

  void __set_bananaToken(const std::string& val);

  void __set_serviceName(const std::string& val);

  void __set_serviceToken(const ServiceToken& val);

  bool operator == (const ProvisionServiceResponse & rhs) const
  {
    if (!(bananaToken == rhs.bananaToken))
      return false;
    if (!(serviceName == rhs.serviceName))
      return false;
    if (!(serviceToken == rhs.serviceToken))
      return false;
    return true;
  }
  bool operator != (const ProvisionServiceResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvisionServiceResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ProvisionServiceResponse &a, ProvisionServiceResponse &b);

inline std::ostream& operator<<(std::ostream& out, const ProvisionServiceResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SubscribeToServiceRequest__isset {
  _SubscribeToServiceRequest__isset() : token(false), serviceName(false), organization(false), shared(true), developerToken(false) {}
  bool token :1;
  bool serviceName :1;
  bool organization :1;
  bool shared :1;
  bool developerToken :1;
} _SubscribeToServiceRequest__isset;

class SubscribeToServiceRequest {
 public:

  SubscribeToServiceRequest(const SubscribeToServiceRequest&);
  SubscribeToServiceRequest& operator=(const SubscribeToServiceRequest&);
  SubscribeToServiceRequest() : token(), serviceName(), organization(), shared(false) {
  }

  virtual ~SubscribeToServiceRequest() throw();
  std::string token;
  std::string serviceName;
  std::string organization;
  bool shared;
  DeveloperToken developerToken;

  _SubscribeToServiceRequest__isset __isset;

  void __set_token(const std::string& val);

  void __set_serviceName(const std::string& val);

  void __set_organization(const std::string& val);

  void __set_shared(const bool val);

  void __set_developerToken(const DeveloperToken& val);

  bool operator == (const SubscribeToServiceRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(serviceName == rhs.serviceName))
      return false;
    if (__isset.organization != rhs.__isset.organization)
      return false;
    else if (__isset.organization && !(organization == rhs.organization))
      return false;
    if (__isset.shared != rhs.__isset.shared)
      return false;
    else if (__isset.shared && !(shared == rhs.shared))
      return false;
    if (!(developerToken == rhs.developerToken))
      return false;
    return true;
  }
  bool operator != (const SubscribeToServiceRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SubscribeToServiceRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SubscribeToServiceRequest &a, SubscribeToServiceRequest &b);

inline std::ostream& operator<<(std::ostream& out, const SubscribeToServiceRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SubscribeToServiceResponse__isset {
  _SubscribeToServiceResponse__isset() : message(false), channel(false) {}
  bool message :1;
  bool channel :1;
} _SubscribeToServiceResponse__isset;

class SubscribeToServiceResponse {
 public:

  SubscribeToServiceResponse(const SubscribeToServiceResponse&);
  SubscribeToServiceResponse& operator=(const SubscribeToServiceResponse&);
  SubscribeToServiceResponse() : message() {
  }

  virtual ~SubscribeToServiceResponse() throw();
  std::string message;
   ::aroma::banana::thrift::channels::BananaChannel channel;

  _SubscribeToServiceResponse__isset __isset;

  void __set_message(const std::string& val);

  void __set_channel(const  ::aroma::banana::thrift::channels::BananaChannel& val);

  bool operator == (const SubscribeToServiceResponse & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    if (!(channel == rhs.channel))
      return false;
    return true;
  }
  bool operator != (const SubscribeToServiceResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SubscribeToServiceResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SubscribeToServiceResponse &a, SubscribeToServiceResponse &b);

inline std::ostream& operator<<(std::ostream& out, const SubscribeToServiceResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RegisterHealthCheckRequest__isset {
  _RegisterHealthCheckRequest__isset() : endpoint(false), developerToken(false) {}
  bool endpoint :1;
  bool developerToken :1;
} _RegisterHealthCheckRequest__isset;

class RegisterHealthCheckRequest {
 public:

  RegisterHealthCheckRequest(const RegisterHealthCheckRequest&);
  RegisterHealthCheckRequest& operator=(const RegisterHealthCheckRequest&);
  RegisterHealthCheckRequest() {
  }

  virtual ~RegisterHealthCheckRequest() throw();
  Endpoint endpoint;
  DeveloperToken developerToken;

  _RegisterHealthCheckRequest__isset __isset;

  void __set_endpoint(const Endpoint& val);

  void __set_developerToken(const DeveloperToken& val);

  bool operator == (const RegisterHealthCheckRequest & rhs) const
  {
    if (!(endpoint == rhs.endpoint))
      return false;
    if (!(developerToken == rhs.developerToken))
      return false;
    return true;
  }
  bool operator != (const RegisterHealthCheckRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegisterHealthCheckRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RegisterHealthCheckRequest &a, RegisterHealthCheckRequest &b);

inline std::ostream& operator<<(std::ostream& out, const RegisterHealthCheckRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RegisterHealthCheckResponse__isset {
  _RegisterHealthCheckResponse__isset() : message(false) {}
  bool message :1;
} _RegisterHealthCheckResponse__isset;

class RegisterHealthCheckResponse {
 public:

  RegisterHealthCheckResponse(const RegisterHealthCheckResponse&);
  RegisterHealthCheckResponse& operator=(const RegisterHealthCheckResponse&);
  RegisterHealthCheckResponse() : message() {
  }

  virtual ~RegisterHealthCheckResponse() throw();
  std::string message;

  _RegisterHealthCheckResponse__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const RegisterHealthCheckResponse & rhs) const
  {
    if (__isset.message != rhs.__isset.message)
      return false;
    else if (__isset.message && !(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const RegisterHealthCheckResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegisterHealthCheckResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RegisterHealthCheckResponse &a, RegisterHealthCheckResponse &b);

inline std::ostream& operator<<(std::ostream& out, const RegisterHealthCheckResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RenewServiceTokenRequest__isset {
  _RenewServiceTokenRequest__isset() : serviceToken(false), timePeriod(false), developerToken(false) {}
  bool serviceToken :1;
  bool timePeriod :1;
  bool developerToken :1;
} _RenewServiceTokenRequest__isset;

class RenewServiceTokenRequest {
 public:

  RenewServiceTokenRequest(const RenewServiceTokenRequest&);
  RenewServiceTokenRequest& operator=(const RenewServiceTokenRequest&);
  RenewServiceTokenRequest() {
  }

  virtual ~RenewServiceTokenRequest() throw();
  ServiceToken serviceToken;
   ::aroma::banana::thrift::TimePeriod timePeriod;
  DeveloperToken developerToken;

  _RenewServiceTokenRequest__isset __isset;

  void __set_serviceToken(const ServiceToken& val);

  void __set_timePeriod(const  ::aroma::banana::thrift::TimePeriod& val);

  void __set_developerToken(const DeveloperToken& val);

  bool operator == (const RenewServiceTokenRequest & rhs) const
  {
    if (!(serviceToken == rhs.serviceToken))
      return false;
    if (!(timePeriod == rhs.timePeriod))
      return false;
    if (!(developerToken == rhs.developerToken))
      return false;
    return true;
  }
  bool operator != (const RenewServiceTokenRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenewServiceTokenRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RenewServiceTokenRequest &a, RenewServiceTokenRequest &b);

inline std::ostream& operator<<(std::ostream& out, const RenewServiceTokenRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RenewServiceTokenResponse__isset {
  _RenewServiceTokenResponse__isset() : serviceToken(false) {}
  bool serviceToken :1;
} _RenewServiceTokenResponse__isset;

class RenewServiceTokenResponse {
 public:

  RenewServiceTokenResponse(const RenewServiceTokenResponse&);
  RenewServiceTokenResponse& operator=(const RenewServiceTokenResponse&);
  RenewServiceTokenResponse() {
  }

  virtual ~RenewServiceTokenResponse() throw();
  ServiceToken serviceToken;

  _RenewServiceTokenResponse__isset __isset;

  void __set_serviceToken(const ServiceToken& val);

  bool operator == (const RenewServiceTokenResponse & rhs) const
  {
    if (!(serviceToken == rhs.serviceToken))
      return false;
    return true;
  }
  bool operator != (const RenewServiceTokenResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenewServiceTokenResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RenewServiceTokenResponse &a, RenewServiceTokenResponse &b);

inline std::ostream& operator<<(std::ostream& out, const RenewServiceTokenResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RegenerateTokenRequest__isset {
  _RegenerateTokenRequest__isset() : serviceId(false), developerToken(false) {}
  bool serviceId :1;
  bool developerToken :1;
} _RegenerateTokenRequest__isset;

class RegenerateTokenRequest {
 public:

  RegenerateTokenRequest(const RegenerateTokenRequest&);
  RegenerateTokenRequest& operator=(const RegenerateTokenRequest&);
  RegenerateTokenRequest() : serviceId() {
  }

  virtual ~RegenerateTokenRequest() throw();
  std::string serviceId;
  DeveloperToken developerToken;

  _RegenerateTokenRequest__isset __isset;

  void __set_serviceId(const std::string& val);

  void __set_developerToken(const DeveloperToken& val);

  bool operator == (const RegenerateTokenRequest & rhs) const
  {
    if (!(serviceId == rhs.serviceId))
      return false;
    if (!(developerToken == rhs.developerToken))
      return false;
    return true;
  }
  bool operator != (const RegenerateTokenRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegenerateTokenRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RegenerateTokenRequest &a, RegenerateTokenRequest &b);

inline std::ostream& operator<<(std::ostream& out, const RegenerateTokenRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RegenerateTokenResponse__isset {
  _RegenerateTokenResponse__isset() : serviceToken(false) {}
  bool serviceToken :1;
} _RegenerateTokenResponse__isset;

class RegenerateTokenResponse {
 public:

  RegenerateTokenResponse(const RegenerateTokenResponse&);
  RegenerateTokenResponse& operator=(const RegenerateTokenResponse&);
  RegenerateTokenResponse() {
  }

  virtual ~RegenerateTokenResponse() throw();
  ServiceToken serviceToken;

  _RegenerateTokenResponse__isset __isset;

  void __set_serviceToken(const ServiceToken& val);

  bool operator == (const RegenerateTokenResponse & rhs) const
  {
    if (!(serviceToken == rhs.serviceToken))
      return false;
    return true;
  }
  bool operator != (const RegenerateTokenResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegenerateTokenResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RegenerateTokenResponse &a, RegenerateTokenResponse &b);

inline std::ostream& operator<<(std::ostream& out, const RegenerateTokenResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DeleteMessageRequest__isset {
  _DeleteMessageRequest__isset() : developerToken(false), messageId(false), serviceId(false), messageIds(true) {}
  bool developerToken :1;
  bool messageId :1;
  bool serviceId :1;
  bool messageIds :1;
} _DeleteMessageRequest__isset;

class DeleteMessageRequest {
 public:

  DeleteMessageRequest(const DeleteMessageRequest&);
  DeleteMessageRequest& operator=(const DeleteMessageRequest&);
  DeleteMessageRequest() : messageId(), serviceId() {

  }

  virtual ~DeleteMessageRequest() throw();
  DeveloperToken developerToken;
  std::string messageId;
  std::string serviceId;
  std::vector<std::string>  messageIds;

  _DeleteMessageRequest__isset __isset;

  void __set_developerToken(const DeveloperToken& val);

  void __set_messageId(const std::string& val);

  void __set_serviceId(const std::string& val);

  void __set_messageIds(const std::vector<std::string> & val);

  bool operator == (const DeleteMessageRequest & rhs) const
  {
    if (!(developerToken == rhs.developerToken))
      return false;
    if (!(messageId == rhs.messageId))
      return false;
    if (!(serviceId == rhs.serviceId))
      return false;
    if (__isset.messageIds != rhs.__isset.messageIds)
      return false;
    else if (__isset.messageIds && !(messageIds == rhs.messageIds))
      return false;
    return true;
  }
  bool operator != (const DeleteMessageRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteMessageRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeleteMessageRequest &a, DeleteMessageRequest &b);

inline std::ostream& operator<<(std::ostream& out, const DeleteMessageRequest& obj)
{
  obj.printTo(out);
  return out;
}


class DeleteMessageResponse {
 public:

  DeleteMessageResponse(const DeleteMessageResponse&);
  DeleteMessageResponse& operator=(const DeleteMessageResponse&);
  DeleteMessageResponse() {
  }

  virtual ~DeleteMessageResponse() throw();

  bool operator == (const DeleteMessageResponse & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DeleteMessageResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteMessageResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeleteMessageResponse &a, DeleteMessageResponse &b);

inline std::ostream& operator<<(std::ostream& out, const DeleteMessageResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DeleteAllMessagesRequest__isset {
  _DeleteAllMessagesRequest__isset() : developerToken(false), serviceId(false) {}
  bool developerToken :1;
  bool serviceId :1;
} _DeleteAllMessagesRequest__isset;

class DeleteAllMessagesRequest {
 public:

  DeleteAllMessagesRequest(const DeleteAllMessagesRequest&);
  DeleteAllMessagesRequest& operator=(const DeleteAllMessagesRequest&);
  DeleteAllMessagesRequest() : serviceId() {
  }

  virtual ~DeleteAllMessagesRequest() throw();
  DeveloperToken developerToken;
  std::string serviceId;

  _DeleteAllMessagesRequest__isset __isset;

  void __set_developerToken(const DeveloperToken& val);

  void __set_serviceId(const std::string& val);

  bool operator == (const DeleteAllMessagesRequest & rhs) const
  {
    if (!(developerToken == rhs.developerToken))
      return false;
    if (!(serviceId == rhs.serviceId))
      return false;
    return true;
  }
  bool operator != (const DeleteAllMessagesRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteAllMessagesRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeleteAllMessagesRequest &a, DeleteAllMessagesRequest &b);

inline std::ostream& operator<<(std::ostream& out, const DeleteAllMessagesRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _HideMessageRequest__isset {
  _HideMessageRequest__isset() : developerToken(false), messageId(false), serviceId(false), messageIds(true) {}
  bool developerToken :1;
  bool messageId :1;
  bool serviceId :1;
  bool messageIds :1;
} _HideMessageRequest__isset;

class HideMessageRequest {
 public:

  HideMessageRequest(const HideMessageRequest&);
  HideMessageRequest& operator=(const HideMessageRequest&);
  HideMessageRequest() : messageId(), serviceId() {

  }

  virtual ~HideMessageRequest() throw();
  DeveloperToken developerToken;
  std::string messageId;
  std::string serviceId;
  std::vector<std::string>  messageIds;

  _HideMessageRequest__isset __isset;

  void __set_developerToken(const DeveloperToken& val);

  void __set_messageId(const std::string& val);

  void __set_serviceId(const std::string& val);

  void __set_messageIds(const std::vector<std::string> & val);

  bool operator == (const HideMessageRequest & rhs) const
  {
    if (!(developerToken == rhs.developerToken))
      return false;
    if (!(messageId == rhs.messageId))
      return false;
    if (!(serviceId == rhs.serviceId))
      return false;
    if (__isset.messageIds != rhs.__isset.messageIds)
      return false;
    else if (__isset.messageIds && !(messageIds == rhs.messageIds))
      return false;
    return true;
  }
  bool operator != (const HideMessageRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HideMessageRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HideMessageRequest &a, HideMessageRequest &b);

inline std::ostream& operator<<(std::ostream& out, const HideMessageRequest& obj)
{
  obj.printTo(out);
  return out;
}


class HideMessageResponse {
 public:

  HideMessageResponse(const HideMessageResponse&);
  HideMessageResponse& operator=(const HideMessageResponse&);
  HideMessageResponse() {
  }

  virtual ~HideMessageResponse() throw();

  bool operator == (const HideMessageResponse & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HideMessageResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HideMessageResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HideMessageResponse &a, HideMessageResponse &b);

inline std::ostream& operator<<(std::ostream& out, const HideMessageResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _HideAllMessagesRequest__isset {
  _HideAllMessagesRequest__isset() : developerToken(false), serviceId(false) {}
  bool developerToken :1;
  bool serviceId :1;
} _HideAllMessagesRequest__isset;

class HideAllMessagesRequest {
 public:

  HideAllMessagesRequest(const HideAllMessagesRequest&);
  HideAllMessagesRequest& operator=(const HideAllMessagesRequest&);
  HideAllMessagesRequest() : serviceId() {
  }

  virtual ~HideAllMessagesRequest() throw();
  DeveloperToken developerToken;
  std::string serviceId;

  _HideAllMessagesRequest__isset __isset;

  void __set_developerToken(const DeveloperToken& val);

  void __set_serviceId(const std::string& val);

  bool operator == (const HideAllMessagesRequest & rhs) const
  {
    if (!(developerToken == rhs.developerToken))
      return false;
    if (!(serviceId == rhs.serviceId))
      return false;
    return true;
  }
  bool operator != (const HideAllMessagesRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HideAllMessagesRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HideAllMessagesRequest &a, HideAllMessagesRequest &b);

inline std::ostream& operator<<(std::ostream& out, const HideAllMessagesRequest& obj)
{
  obj.printTo(out);
  return out;
}


class HideAllMessagesResponse {
 public:

  HideAllMessagesResponse(const HideAllMessagesResponse&);
  HideAllMessagesResponse& operator=(const HideAllMessagesResponse&);
  HideAllMessagesResponse() {
  }

  virtual ~HideAllMessagesResponse() throw();

  bool operator == (const HideAllMessagesResponse & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HideAllMessagesResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HideAllMessagesResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HideAllMessagesResponse &a, HideAllMessagesResponse &b);

inline std::ostream& operator<<(std::ostream& out, const HideAllMessagesResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SearchForServicesRequest__isset {
  _SearchForServicesRequest__isset() : developerToken(false), searchTerm(false), organization(false) {}
  bool developerToken :1;
  bool searchTerm :1;
  bool organization :1;
} _SearchForServicesRequest__isset;

class SearchForServicesRequest {
 public:

  SearchForServicesRequest(const SearchForServicesRequest&);
  SearchForServicesRequest& operator=(const SearchForServicesRequest&);
  SearchForServicesRequest() : searchTerm(), organization() {
  }

  virtual ~SearchForServicesRequest() throw();
  DeveloperToken developerToken;
  std::string searchTerm;
  std::string organization;

  _SearchForServicesRequest__isset __isset;

  void __set_developerToken(const DeveloperToken& val);

  void __set_searchTerm(const std::string& val);

  void __set_organization(const std::string& val);

  bool operator == (const SearchForServicesRequest & rhs) const
  {
    if (!(developerToken == rhs.developerToken))
      return false;
    if (!(searchTerm == rhs.searchTerm))
      return false;
    if (__isset.organization != rhs.__isset.organization)
      return false;
    else if (__isset.organization && !(organization == rhs.organization))
      return false;
    return true;
  }
  bool operator != (const SearchForServicesRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SearchForServicesRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SearchForServicesRequest &a, SearchForServicesRequest &b);

inline std::ostream& operator<<(std::ostream& out, const SearchForServicesRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SearchForServicesResponse__isset {
  _SearchForServicesResponse__isset() : services(true) {}
  bool services :1;
} _SearchForServicesResponse__isset;

class SearchForServicesResponse {
 public:

  SearchForServicesResponse(const SearchForServicesResponse&);
  SearchForServicesResponse& operator=(const SearchForServicesResponse&);
  SearchForServicesResponse() {

  }

  virtual ~SearchForServicesResponse() throw();
  std::vector<Service>  services;

  _SearchForServicesResponse__isset __isset;

  void __set_services(const std::vector<Service> & val);

  bool operator == (const SearchForServicesResponse & rhs) const
  {
    if (!(services == rhs.services))
      return false;
    return true;
  }
  bool operator != (const SearchForServicesResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SearchForServicesResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SearchForServicesResponse &a, SearchForServicesResponse &b);

inline std::ostream& operator<<(std::ostream& out, const SearchForServicesResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SendMessageRequest__isset {
  _SendMessageRequest__isset() : serviceToken(false), message(false), urgency(true) {}
  bool serviceToken :1;
  bool message :1;
  bool urgency :1;
} _SendMessageRequest__isset;

class SendMessageRequest {
 public:

  SendMessageRequest(const SendMessageRequest&);
  SendMessageRequest& operator=(const SendMessageRequest&);
  SendMessageRequest() : message(), urgency(( ::aroma::banana::thrift::Urgency::type)2) {
    urgency = ( ::aroma::banana::thrift::Urgency::type)2;

  }

  virtual ~SendMessageRequest() throw();
  ServiceToken serviceToken;
  std::string message;
  Urgency urgency;

  _SendMessageRequest__isset __isset;

  void __set_serviceToken(const ServiceToken& val);

  void __set_message(const std::string& val);

  void __set_urgency(const Urgency val);

  bool operator == (const SendMessageRequest & rhs) const
  {
    if (!(serviceToken == rhs.serviceToken))
      return false;
    if (!(message == rhs.message))
      return false;
    if (!(urgency == rhs.urgency))
      return false;
    return true;
  }
  bool operator != (const SendMessageRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SendMessageRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SendMessageRequest &a, SendMessageRequest &b);

inline std::ostream& operator<<(std::ostream& out, const SendMessageRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SendMessageResponse__isset {
  _SendMessageResponse__isset() : message(false) {}
  bool message :1;
} _SendMessageResponse__isset;

class SendMessageResponse {
 public:

  SendMessageResponse(const SendMessageResponse&);
  SendMessageResponse& operator=(const SendMessageResponse&);
  SendMessageResponse() : message() {
  }

  virtual ~SendMessageResponse() throw();
  std::string message;

  _SendMessageResponse__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const SendMessageResponse & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const SendMessageResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SendMessageResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SendMessageResponse &a, SendMessageResponse &b);

inline std::ostream& operator<<(std::ostream& out, const SendMessageResponse& obj)
{
  obj.printTo(out);
  return out;
}

}}}} // namespace

#endif
