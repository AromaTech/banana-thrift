/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BananaService_TYPES_H
#define BananaService_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "Authentication_types.h"
#include "Banana_types.h"
#include "Channels_types.h"
#include "Endpoint_types.h"
#include "Exceptions_types.h"
#include "Notification_types.h"


namespace aroma { namespace banana { namespace thrift { namespace service {

typedef  ::aroma::banana::thrift::int int;

typedef  ::aroma::banana::thrift::long long;

typedef  ::aroma::banana::thrift::timestamp timestamp;

typedef class  ::aroma::banana::thrift::authentication::UserToken UserToken;

typedef class  ::aroma::banana::thrift::authentication::ApplicationToken ApplicationToken;

typedef class  ::aroma::banana::thrift::Image Image;

typedef class  ::aroma::banana::thrift::User User;

typedef class  ::aroma::banana::thrift::Application Application;

typedef  ::aroma::banana::thrift::Urgency::type Urgency;

typedef class  ::aroma::banana::thrift::channels::BananaChannel BananaChannel;

typedef class  ::aroma::banana::thrift::endpoint::Endpoint Endpoint;

typedef class  ::aroma::banana::thrift::exceptions::AccountAlreadyExistsException AccountAlreadyExistsException;

typedef class  ::aroma::banana::thrift::exceptions::InvalidArgumentException InvalidArgumentException;

typedef class  ::aroma::banana::thrift::exceptions::InvalidCredentialsException InvalidCredentialsException;

typedef class  ::aroma::banana::thrift::exceptions::OperationFailedException OperationFailedException;

typedef class  ::aroma::banana::thrift::exceptions::ApplicationAlreadyRegisteredException ApplicationAlreadyRegisteredException;

typedef class  ::aroma::banana::thrift::exceptions::ApplicationDoesNotExistException ApplicationDoesNotExistException;

typedef class  ::aroma::banana::thrift::exceptions::CustomChannelUnreachableException CustomChannelUnreachableException;

typedef class  ::aroma::banana::thrift::exceptions::ChannelDoesNotExistException ChannelDoesNotExistException;

typedef class  ::aroma::banana::thrift::exceptions::UnauthorizedException UnauthorizedException;

class DeleteMessageRequest;

class DeleteMessageResponse;

class DeleteAllMessagesRequest;

class DismissMessageRequest;

class DismissMessageResponse;

class DismissAllMessagesRequest;

class DismissAllMessagesResponse;

class ProvisionApplicationRequest;

class ProvisionApplicationResponse;

class RegenerateApplicationTokenRequest;

class RegenerateApplicationTokenResponse;

class RegisterHealthCheckRequest;

class RegisterHealthCheckResponse;

class RemoveSavedChannelRequest;

class RemoveSavedChannelResponse;

class RenewApplicationTokenRequest;

class RenewApplicationTokenResponse;

class SaveChannelRequest;

class SaveChannelResponse;

class SignInRequest;

class SignInResponse;

class SignUpRequest;

class SignUpResponse;

class SnoozeChannelRequest;

class SnoozeChannelResponse;

class SubscribeToApplicationRequest;

class SubscribeToApplicationResponse;

class GetApplicationInfoRequest;

class GetApplicationInfoResponse;

class GetDashboardRequest;

class GetDashboardResponse;

class GetMessagesRequest;

class GetMessagesResponse;

class GetMyApplicationsRequest;

class GetMyApplicationsResponse;

class GetApplicationSubscribersRequest;

class GetApplicationSubscribersResponse;

class GetMySavedChannelsRequest;

class GetMySavedChannelsResponse;

class GetActivityRequest;

class GetActivityResponse;

class GetServiceAnnouncementsRequest;

class GetServiceAnnouncementsResponse;

class SearchForApplicationsRequest;

class SearchForApplicationsResponse;

typedef struct _DeleteMessageRequest__isset {
  _DeleteMessageRequest__isset() : token(false), messageId(false), applicationId(false), messageIds(true) {}
  bool token :1;
  bool messageId :1;
  bool applicationId :1;
  bool messageIds :1;
} _DeleteMessageRequest__isset;

class DeleteMessageRequest {
 public:

  DeleteMessageRequest(const DeleteMessageRequest&);
  DeleteMessageRequest& operator=(const DeleteMessageRequest&);
  DeleteMessageRequest() : messageId(), applicationId() {

  }

  virtual ~DeleteMessageRequest() throw();
  UserToken token;
  std::string messageId;
  std::string applicationId;
  std::vector<std::string>  messageIds;

  _DeleteMessageRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_messageId(const std::string& val);

  void __set_applicationId(const std::string& val);

  void __set_messageIds(const std::vector<std::string> & val);

  bool operator == (const DeleteMessageRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(messageId == rhs.messageId))
      return false;
    if (!(applicationId == rhs.applicationId))
      return false;
    if (__isset.messageIds != rhs.__isset.messageIds)
      return false;
    else if (__isset.messageIds && !(messageIds == rhs.messageIds))
      return false;
    return true;
  }
  bool operator != (const DeleteMessageRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteMessageRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeleteMessageRequest &a, DeleteMessageRequest &b);

inline std::ostream& operator<<(std::ostream& out, const DeleteMessageRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DeleteMessageResponse__isset {
  _DeleteMessageResponse__isset() : messagesDeleted(true) {}
  bool messagesDeleted :1;
} _DeleteMessageResponse__isset;

class DeleteMessageResponse {
 public:

  DeleteMessageResponse(const DeleteMessageResponse&);
  DeleteMessageResponse& operator=(const DeleteMessageResponse&);
  DeleteMessageResponse() : messagesDeleted(0) {
  }

  virtual ~DeleteMessageResponse() throw();
  int messagesDeleted;

  _DeleteMessageResponse__isset __isset;

  void __set_messagesDeleted(const int val);

  bool operator == (const DeleteMessageResponse & rhs) const
  {
    if (__isset.messagesDeleted != rhs.__isset.messagesDeleted)
      return false;
    else if (__isset.messagesDeleted && !(messagesDeleted == rhs.messagesDeleted))
      return false;
    return true;
  }
  bool operator != (const DeleteMessageResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteMessageResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeleteMessageResponse &a, DeleteMessageResponse &b);

inline std::ostream& operator<<(std::ostream& out, const DeleteMessageResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DeleteAllMessagesRequest__isset {
  _DeleteAllMessagesRequest__isset() : token(false), applicationId(false), messagesDeleted(true) {}
  bool token :1;
  bool applicationId :1;
  bool messagesDeleted :1;
} _DeleteAllMessagesRequest__isset;

class DeleteAllMessagesRequest {
 public:

  DeleteAllMessagesRequest(const DeleteAllMessagesRequest&);
  DeleteAllMessagesRequest& operator=(const DeleteAllMessagesRequest&);
  DeleteAllMessagesRequest() : applicationId(), messagesDeleted(0) {
  }

  virtual ~DeleteAllMessagesRequest() throw();
  UserToken token;
  std::string applicationId;
  int messagesDeleted;

  _DeleteAllMessagesRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_applicationId(const std::string& val);

  void __set_messagesDeleted(const int val);

  bool operator == (const DeleteAllMessagesRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(applicationId == rhs.applicationId))
      return false;
    if (__isset.messagesDeleted != rhs.__isset.messagesDeleted)
      return false;
    else if (__isset.messagesDeleted && !(messagesDeleted == rhs.messagesDeleted))
      return false;
    return true;
  }
  bool operator != (const DeleteAllMessagesRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteAllMessagesRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeleteAllMessagesRequest &a, DeleteAllMessagesRequest &b);

inline std::ostream& operator<<(std::ostream& out, const DeleteAllMessagesRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DismissMessageRequest__isset {
  _DismissMessageRequest__isset() : token(false), messageId(false), applicationId(false), messageIds(true) {}
  bool token :1;
  bool messageId :1;
  bool applicationId :1;
  bool messageIds :1;
} _DismissMessageRequest__isset;

class DismissMessageRequest {
 public:

  DismissMessageRequest(const DismissMessageRequest&);
  DismissMessageRequest& operator=(const DismissMessageRequest&);
  DismissMessageRequest() : messageId(), applicationId() {

  }

  virtual ~DismissMessageRequest() throw();
  UserToken token;
  std::string messageId;
  std::string applicationId;
  std::vector<std::string>  messageIds;

  _DismissMessageRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_messageId(const std::string& val);

  void __set_applicationId(const std::string& val);

  void __set_messageIds(const std::vector<std::string> & val);

  bool operator == (const DismissMessageRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(messageId == rhs.messageId))
      return false;
    if (!(applicationId == rhs.applicationId))
      return false;
    if (__isset.messageIds != rhs.__isset.messageIds)
      return false;
    else if (__isset.messageIds && !(messageIds == rhs.messageIds))
      return false;
    return true;
  }
  bool operator != (const DismissMessageRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DismissMessageRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DismissMessageRequest &a, DismissMessageRequest &b);

inline std::ostream& operator<<(std::ostream& out, const DismissMessageRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DismissMessageResponse__isset {
  _DismissMessageResponse__isset() : messagesDismissed(true) {}
  bool messagesDismissed :1;
} _DismissMessageResponse__isset;

class DismissMessageResponse {
 public:

  DismissMessageResponse(const DismissMessageResponse&);
  DismissMessageResponse& operator=(const DismissMessageResponse&);
  DismissMessageResponse() : messagesDismissed(0) {
  }

  virtual ~DismissMessageResponse() throw();
  int messagesDismissed;

  _DismissMessageResponse__isset __isset;

  void __set_messagesDismissed(const int val);

  bool operator == (const DismissMessageResponse & rhs) const
  {
    if (__isset.messagesDismissed != rhs.__isset.messagesDismissed)
      return false;
    else if (__isset.messagesDismissed && !(messagesDismissed == rhs.messagesDismissed))
      return false;
    return true;
  }
  bool operator != (const DismissMessageResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DismissMessageResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DismissMessageResponse &a, DismissMessageResponse &b);

inline std::ostream& operator<<(std::ostream& out, const DismissMessageResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DismissAllMessagesRequest__isset {
  _DismissAllMessagesRequest__isset() : token(false), applicationId(false) {}
  bool token :1;
  bool applicationId :1;
} _DismissAllMessagesRequest__isset;

class DismissAllMessagesRequest {
 public:

  DismissAllMessagesRequest(const DismissAllMessagesRequest&);
  DismissAllMessagesRequest& operator=(const DismissAllMessagesRequest&);
  DismissAllMessagesRequest() : applicationId() {
  }

  virtual ~DismissAllMessagesRequest() throw();
  UserToken token;
  std::string applicationId;

  _DismissAllMessagesRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_applicationId(const std::string& val);

  bool operator == (const DismissAllMessagesRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(applicationId == rhs.applicationId))
      return false;
    return true;
  }
  bool operator != (const DismissAllMessagesRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DismissAllMessagesRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DismissAllMessagesRequest &a, DismissAllMessagesRequest &b);

inline std::ostream& operator<<(std::ostream& out, const DismissAllMessagesRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DismissAllMessagesResponse__isset {
  _DismissAllMessagesResponse__isset() : messagesDismissed(true) {}
  bool messagesDismissed :1;
} _DismissAllMessagesResponse__isset;

class DismissAllMessagesResponse {
 public:

  DismissAllMessagesResponse(const DismissAllMessagesResponse&);
  DismissAllMessagesResponse& operator=(const DismissAllMessagesResponse&);
  DismissAllMessagesResponse() : messagesDismissed(0) {
  }

  virtual ~DismissAllMessagesResponse() throw();
  int messagesDismissed;

  _DismissAllMessagesResponse__isset __isset;

  void __set_messagesDismissed(const int val);

  bool operator == (const DismissAllMessagesResponse & rhs) const
  {
    if (__isset.messagesDismissed != rhs.__isset.messagesDismissed)
      return false;
    else if (__isset.messagesDismissed && !(messagesDismissed == rhs.messagesDismissed))
      return false;
    return true;
  }
  bool operator != (const DismissAllMessagesResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DismissAllMessagesResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DismissAllMessagesResponse &a, DismissAllMessagesResponse &b);

inline std::ostream& operator<<(std::ostream& out, const DismissAllMessagesResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ProvisionApplicationRequest__isset {
  _ProvisionApplicationRequest__isset() : token(false), applicationName(false), programmingLanguage(false), organization(false), icon(false) {}
  bool token :1;
  bool applicationName :1;
  bool programmingLanguage :1;
  bool organization :1;
  bool icon :1;
} _ProvisionApplicationRequest__isset;

class ProvisionApplicationRequest {
 public:

  ProvisionApplicationRequest(const ProvisionApplicationRequest&);
  ProvisionApplicationRequest& operator=(const ProvisionApplicationRequest&);
  ProvisionApplicationRequest() : applicationName(), programmingLanguage(( ::aroma::banana::thrift::ProgrammingLanguage::type)0), organization() {
  }

  virtual ~ProvisionApplicationRequest() throw();
  UserToken token;
  std::string applicationName;
   ::aroma::banana::thrift::ProgrammingLanguage::type programmingLanguage;
  std::string organization;
  Image icon;

  _ProvisionApplicationRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_applicationName(const std::string& val);

  void __set_programmingLanguage(const  ::aroma::banana::thrift::ProgrammingLanguage::type val);

  void __set_organization(const std::string& val);

  void __set_icon(const Image& val);

  bool operator == (const ProvisionApplicationRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(applicationName == rhs.applicationName))
      return false;
    if (__isset.programmingLanguage != rhs.__isset.programmingLanguage)
      return false;
    else if (__isset.programmingLanguage && !(programmingLanguage == rhs.programmingLanguage))
      return false;
    if (!(organization == rhs.organization))
      return false;
    if (__isset.icon != rhs.__isset.icon)
      return false;
    else if (__isset.icon && !(icon == rhs.icon))
      return false;
    return true;
  }
  bool operator != (const ProvisionApplicationRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvisionApplicationRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ProvisionApplicationRequest &a, ProvisionApplicationRequest &b);

inline std::ostream& operator<<(std::ostream& out, const ProvisionApplicationRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ProvisionApplicationResponse__isset {
  _ProvisionApplicationResponse__isset() : applicationId(false), applicationName(false), applicationToken(false), applicationInfo(false) {}
  bool applicationId :1;
  bool applicationName :1;
  bool applicationToken :1;
  bool applicationInfo :1;
} _ProvisionApplicationResponse__isset;

class ProvisionApplicationResponse {
 public:

  ProvisionApplicationResponse(const ProvisionApplicationResponse&);
  ProvisionApplicationResponse& operator=(const ProvisionApplicationResponse&);
  ProvisionApplicationResponse() : applicationId(), applicationName() {
  }

  virtual ~ProvisionApplicationResponse() throw();
  std::string applicationId;
  std::string applicationName;
  ApplicationToken applicationToken;
  Application applicationInfo;

  _ProvisionApplicationResponse__isset __isset;

  void __set_applicationId(const std::string& val);

  void __set_applicationName(const std::string& val);

  void __set_applicationToken(const ApplicationToken& val);

  void __set_applicationInfo(const Application& val);

  bool operator == (const ProvisionApplicationResponse & rhs) const
  {
    if (!(applicationId == rhs.applicationId))
      return false;
    if (!(applicationName == rhs.applicationName))
      return false;
    if (!(applicationToken == rhs.applicationToken))
      return false;
    if (!(applicationInfo == rhs.applicationInfo))
      return false;
    return true;
  }
  bool operator != (const ProvisionApplicationResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvisionApplicationResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ProvisionApplicationResponse &a, ProvisionApplicationResponse &b);

inline std::ostream& operator<<(std::ostream& out, const ProvisionApplicationResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RegenerateApplicationTokenRequest__isset {
  _RegenerateApplicationTokenRequest__isset() : token(false), applicationId(false) {}
  bool token :1;
  bool applicationId :1;
} _RegenerateApplicationTokenRequest__isset;

class RegenerateApplicationTokenRequest {
 public:

  RegenerateApplicationTokenRequest(const RegenerateApplicationTokenRequest&);
  RegenerateApplicationTokenRequest& operator=(const RegenerateApplicationTokenRequest&);
  RegenerateApplicationTokenRequest() : applicationId() {
  }

  virtual ~RegenerateApplicationTokenRequest() throw();
  UserToken token;
  std::string applicationId;

  _RegenerateApplicationTokenRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_applicationId(const std::string& val);

  bool operator == (const RegenerateApplicationTokenRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(applicationId == rhs.applicationId))
      return false;
    return true;
  }
  bool operator != (const RegenerateApplicationTokenRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegenerateApplicationTokenRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RegenerateApplicationTokenRequest &a, RegenerateApplicationTokenRequest &b);

inline std::ostream& operator<<(std::ostream& out, const RegenerateApplicationTokenRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RegenerateApplicationTokenResponse__isset {
  _RegenerateApplicationTokenResponse__isset() : serviceToken(false) {}
  bool serviceToken :1;
} _RegenerateApplicationTokenResponse__isset;

class RegenerateApplicationTokenResponse {
 public:

  RegenerateApplicationTokenResponse(const RegenerateApplicationTokenResponse&);
  RegenerateApplicationTokenResponse& operator=(const RegenerateApplicationTokenResponse&);
  RegenerateApplicationTokenResponse() {
  }

  virtual ~RegenerateApplicationTokenResponse() throw();
  ApplicationToken serviceToken;

  _RegenerateApplicationTokenResponse__isset __isset;

  void __set_serviceToken(const ApplicationToken& val);

  bool operator == (const RegenerateApplicationTokenResponse & rhs) const
  {
    if (!(serviceToken == rhs.serviceToken))
      return false;
    return true;
  }
  bool operator != (const RegenerateApplicationTokenResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegenerateApplicationTokenResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RegenerateApplicationTokenResponse &a, RegenerateApplicationTokenResponse &b);

inline std::ostream& operator<<(std::ostream& out, const RegenerateApplicationTokenResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RegisterHealthCheckRequest__isset {
  _RegisterHealthCheckRequest__isset() : token(false), endpoint(false) {}
  bool token :1;
  bool endpoint :1;
} _RegisterHealthCheckRequest__isset;

class RegisterHealthCheckRequest {
 public:

  RegisterHealthCheckRequest(const RegisterHealthCheckRequest&);
  RegisterHealthCheckRequest& operator=(const RegisterHealthCheckRequest&);
  RegisterHealthCheckRequest() {
  }

  virtual ~RegisterHealthCheckRequest() throw();
  UserToken token;
  Endpoint endpoint;

  _RegisterHealthCheckRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_endpoint(const Endpoint& val);

  bool operator == (const RegisterHealthCheckRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(endpoint == rhs.endpoint))
      return false;
    return true;
  }
  bool operator != (const RegisterHealthCheckRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegisterHealthCheckRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RegisterHealthCheckRequest &a, RegisterHealthCheckRequest &b);

inline std::ostream& operator<<(std::ostream& out, const RegisterHealthCheckRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RegisterHealthCheckResponse__isset {
  _RegisterHealthCheckResponse__isset() : message(false), healthCheckToken(false) {}
  bool message :1;
  bool healthCheckToken :1;
} _RegisterHealthCheckResponse__isset;

class RegisterHealthCheckResponse {
 public:

  RegisterHealthCheckResponse(const RegisterHealthCheckResponse&);
  RegisterHealthCheckResponse& operator=(const RegisterHealthCheckResponse&);
  RegisterHealthCheckResponse() : message(), healthCheckToken() {
  }

  virtual ~RegisterHealthCheckResponse() throw();
  std::string message;
  std::string healthCheckToken;

  _RegisterHealthCheckResponse__isset __isset;

  void __set_message(const std::string& val);

  void __set_healthCheckToken(const std::string& val);

  bool operator == (const RegisterHealthCheckResponse & rhs) const
  {
    if (__isset.message != rhs.__isset.message)
      return false;
    else if (__isset.message && !(message == rhs.message))
      return false;
    if (__isset.healthCheckToken != rhs.__isset.healthCheckToken)
      return false;
    else if (__isset.healthCheckToken && !(healthCheckToken == rhs.healthCheckToken))
      return false;
    return true;
  }
  bool operator != (const RegisterHealthCheckResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegisterHealthCheckResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RegisterHealthCheckResponse &a, RegisterHealthCheckResponse &b);

inline std::ostream& operator<<(std::ostream& out, const RegisterHealthCheckResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RemoveSavedChannelRequest__isset {
  _RemoveSavedChannelRequest__isset() : token(false), channel(false) {}
  bool token :1;
  bool channel :1;
} _RemoveSavedChannelRequest__isset;

class RemoveSavedChannelRequest {
 public:

  RemoveSavedChannelRequest(const RemoveSavedChannelRequest&);
  RemoveSavedChannelRequest& operator=(const RemoveSavedChannelRequest&);
  RemoveSavedChannelRequest() {
  }

  virtual ~RemoveSavedChannelRequest() throw();
  UserToken token;
  BananaChannel channel;

  _RemoveSavedChannelRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_channel(const BananaChannel& val);

  bool operator == (const RemoveSavedChannelRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(channel == rhs.channel))
      return false;
    return true;
  }
  bool operator != (const RemoveSavedChannelRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoveSavedChannelRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RemoveSavedChannelRequest &a, RemoveSavedChannelRequest &b);

inline std::ostream& operator<<(std::ostream& out, const RemoveSavedChannelRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RemoveSavedChannelResponse__isset {
  _RemoveSavedChannelResponse__isset() : message(false), channel(false) {}
  bool message :1;
  bool channel :1;
} _RemoveSavedChannelResponse__isset;

class RemoveSavedChannelResponse {
 public:

  RemoveSavedChannelResponse(const RemoveSavedChannelResponse&);
  RemoveSavedChannelResponse& operator=(const RemoveSavedChannelResponse&);
  RemoveSavedChannelResponse() : message() {
  }

  virtual ~RemoveSavedChannelResponse() throw();
  std::string message;
  BananaChannel channel;

  _RemoveSavedChannelResponse__isset __isset;

  void __set_message(const std::string& val);

  void __set_channel(const BananaChannel& val);

  bool operator == (const RemoveSavedChannelResponse & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    if (__isset.channel != rhs.__isset.channel)
      return false;
    else if (__isset.channel && !(channel == rhs.channel))
      return false;
    return true;
  }
  bool operator != (const RemoveSavedChannelResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoveSavedChannelResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RemoveSavedChannelResponse &a, RemoveSavedChannelResponse &b);

inline std::ostream& operator<<(std::ostream& out, const RemoveSavedChannelResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RenewApplicationTokenRequest__isset {
  _RenewApplicationTokenRequest__isset() : token(false), applicationToken(false), newLifetime(false), applicationId(false) {}
  bool token :1;
  bool applicationToken :1;
  bool newLifetime :1;
  bool applicationId :1;
} _RenewApplicationTokenRequest__isset;

class RenewApplicationTokenRequest {
 public:

  RenewApplicationTokenRequest(const RenewApplicationTokenRequest&);
  RenewApplicationTokenRequest& operator=(const RenewApplicationTokenRequest&);
  RenewApplicationTokenRequest() : applicationId() {
  }

  virtual ~RenewApplicationTokenRequest() throw();
  UserToken token;
  ApplicationToken applicationToken;
   ::aroma::banana::thrift::LengthOfTime newLifetime;
  std::string applicationId;

  _RenewApplicationTokenRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_applicationToken(const ApplicationToken& val);

  void __set_newLifetime(const  ::aroma::banana::thrift::LengthOfTime& val);

  void __set_applicationId(const std::string& val);

  bool operator == (const RenewApplicationTokenRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(applicationToken == rhs.applicationToken))
      return false;
    if (!(newLifetime == rhs.newLifetime))
      return false;
    if (!(applicationId == rhs.applicationId))
      return false;
    return true;
  }
  bool operator != (const RenewApplicationTokenRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenewApplicationTokenRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RenewApplicationTokenRequest &a, RenewApplicationTokenRequest &b);

inline std::ostream& operator<<(std::ostream& out, const RenewApplicationTokenRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RenewApplicationTokenResponse__isset {
  _RenewApplicationTokenResponse__isset() : serviceToken(false) {}
  bool serviceToken :1;
} _RenewApplicationTokenResponse__isset;

class RenewApplicationTokenResponse {
 public:

  RenewApplicationTokenResponse(const RenewApplicationTokenResponse&);
  RenewApplicationTokenResponse& operator=(const RenewApplicationTokenResponse&);
  RenewApplicationTokenResponse() {
  }

  virtual ~RenewApplicationTokenResponse() throw();
  ApplicationToken serviceToken;

  _RenewApplicationTokenResponse__isset __isset;

  void __set_serviceToken(const ApplicationToken& val);

  bool operator == (const RenewApplicationTokenResponse & rhs) const
  {
    if (!(serviceToken == rhs.serviceToken))
      return false;
    return true;
  }
  bool operator != (const RenewApplicationTokenResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RenewApplicationTokenResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RenewApplicationTokenResponse &a, RenewApplicationTokenResponse &b);

inline std::ostream& operator<<(std::ostream& out, const RenewApplicationTokenResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SaveChannelRequest__isset {
  _SaveChannelRequest__isset() : token(false), channel(false) {}
  bool token :1;
  bool channel :1;
} _SaveChannelRequest__isset;

class SaveChannelRequest {
 public:

  SaveChannelRequest(const SaveChannelRequest&);
  SaveChannelRequest& operator=(const SaveChannelRequest&);
  SaveChannelRequest() {
  }

  virtual ~SaveChannelRequest() throw();
  UserToken token;
  BananaChannel channel;

  _SaveChannelRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_channel(const BananaChannel& val);

  bool operator == (const SaveChannelRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(channel == rhs.channel))
      return false;
    return true;
  }
  bool operator != (const SaveChannelRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SaveChannelRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SaveChannelRequest &a, SaveChannelRequest &b);

inline std::ostream& operator<<(std::ostream& out, const SaveChannelRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SaveChannelResponse__isset {
  _SaveChannelResponse__isset() : message(false), channel(false) {}
  bool message :1;
  bool channel :1;
} _SaveChannelResponse__isset;

class SaveChannelResponse {
 public:

  SaveChannelResponse(const SaveChannelResponse&);
  SaveChannelResponse& operator=(const SaveChannelResponse&);
  SaveChannelResponse() : message() {
  }

  virtual ~SaveChannelResponse() throw();
  std::string message;
  BananaChannel channel;

  _SaveChannelResponse__isset __isset;

  void __set_message(const std::string& val);

  void __set_channel(const BananaChannel& val);

  bool operator == (const SaveChannelResponse & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    if (__isset.channel != rhs.__isset.channel)
      return false;
    else if (__isset.channel && !(channel == rhs.channel))
      return false;
    return true;
  }
  bool operator != (const SaveChannelResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SaveChannelResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SaveChannelResponse &a, SaveChannelResponse &b);

inline std::ostream& operator<<(std::ostream& out, const SaveChannelResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SignInRequest__isset {
  _SignInRequest__isset() : credentials(false), username(false) {}
  bool credentials :1;
  bool username :1;
} _SignInRequest__isset;

class SignInRequest {
 public:

  SignInRequest(const SignInRequest&);
  SignInRequest& operator=(const SignInRequest&);
  SignInRequest() : username() {
  }

  virtual ~SignInRequest() throw();
   ::aroma::banana::thrift::authentication::Credentials credentials;
  std::string username;

  _SignInRequest__isset __isset;

  void __set_credentials(const  ::aroma::banana::thrift::authentication::Credentials& val);

  void __set_username(const std::string& val);

  bool operator == (const SignInRequest & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(username == rhs.username))
      return false;
    return true;
  }
  bool operator != (const SignInRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SignInRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SignInRequest &a, SignInRequest &b);

inline std::ostream& operator<<(std::ostream& out, const SignInRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SignInResponse__isset {
  _SignInResponse__isset() : userToken(false) {}
  bool userToken :1;
} _SignInResponse__isset;

class SignInResponse {
 public:

  SignInResponse(const SignInResponse&);
  SignInResponse& operator=(const SignInResponse&);
  SignInResponse() {
  }

  virtual ~SignInResponse() throw();
  UserToken userToken;

  _SignInResponse__isset __isset;

  void __set_userToken(const UserToken& val);

  bool operator == (const SignInResponse & rhs) const
  {
    if (!(userToken == rhs.userToken))
      return false;
    return true;
  }
  bool operator != (const SignInResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SignInResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SignInResponse &a, SignInResponse &b);

inline std::ostream& operator<<(std::ostream& out, const SignInResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SignUpRequest__isset {
  _SignUpRequest__isset() : email(false), name(false), username(false), organization(false), credentials(false) {}
  bool email :1;
  bool name :1;
  bool username :1;
  bool organization :1;
  bool credentials :1;
} _SignUpRequest__isset;

class SignUpRequest {
 public:

  SignUpRequest(const SignUpRequest&);
  SignUpRequest& operator=(const SignUpRequest&);
  SignUpRequest() : email(), name(), username(), organization() {
  }

  virtual ~SignUpRequest() throw();
  std::string email;
  std::string name;
  std::string username;
  std::string organization;
   ::aroma::banana::thrift::authentication::Credentials credentials;

  _SignUpRequest__isset __isset;

  void __set_email(const std::string& val);

  void __set_name(const std::string& val);

  void __set_username(const std::string& val);

  void __set_organization(const std::string& val);

  void __set_credentials(const  ::aroma::banana::thrift::authentication::Credentials& val);

  bool operator == (const SignUpRequest & rhs) const
  {
    if (!(email == rhs.email))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(organization == rhs.organization))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    return true;
  }
  bool operator != (const SignUpRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SignUpRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SignUpRequest &a, SignUpRequest &b);

inline std::ostream& operator<<(std::ostream& out, const SignUpRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SignUpResponse__isset {
  _SignUpResponse__isset() : userToken(false), account(false) {}
  bool userToken :1;
  bool account :1;
} _SignUpResponse__isset;

class SignUpResponse {
 public:

  SignUpResponse(const SignUpResponse&);
  SignUpResponse& operator=(const SignUpResponse&);
  SignUpResponse() {
  }

  virtual ~SignUpResponse() throw();
  UserToken userToken;
   ::aroma::banana::thrift::authentication::AromaAccount account;

  _SignUpResponse__isset __isset;

  void __set_userToken(const UserToken& val);

  void __set_account(const  ::aroma::banana::thrift::authentication::AromaAccount& val);

  bool operator == (const SignUpResponse & rhs) const
  {
    if (!(userToken == rhs.userToken))
      return false;
    if (!(account == rhs.account))
      return false;
    return true;
  }
  bool operator != (const SignUpResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SignUpResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SignUpResponse &a, SignUpResponse &b);

inline std::ostream& operator<<(std::ostream& out, const SignUpResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SnoozeChannelRequest__isset {
  _SnoozeChannelRequest__isset() : token(false), channel(false), applicationId(false) {}
  bool token :1;
  bool channel :1;
  bool applicationId :1;
} _SnoozeChannelRequest__isset;

class SnoozeChannelRequest {
 public:

  SnoozeChannelRequest(const SnoozeChannelRequest&);
  SnoozeChannelRequest& operator=(const SnoozeChannelRequest&);
  SnoozeChannelRequest() : applicationId() {
  }

  virtual ~SnoozeChannelRequest() throw();
  UserToken token;
  BananaChannel channel;
  std::string applicationId;

  _SnoozeChannelRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_channel(const BananaChannel& val);

  void __set_applicationId(const std::string& val);

  bool operator == (const SnoozeChannelRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(channel == rhs.channel))
      return false;
    if (__isset.applicationId != rhs.__isset.applicationId)
      return false;
    else if (__isset.applicationId && !(applicationId == rhs.applicationId))
      return false;
    return true;
  }
  bool operator != (const SnoozeChannelRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnoozeChannelRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SnoozeChannelRequest &a, SnoozeChannelRequest &b);

inline std::ostream& operator<<(std::ostream& out, const SnoozeChannelRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SnoozeChannelResponse__isset {
  _SnoozeChannelResponse__isset() : message(false) {}
  bool message :1;
} _SnoozeChannelResponse__isset;

class SnoozeChannelResponse {
 public:

  SnoozeChannelResponse(const SnoozeChannelResponse&);
  SnoozeChannelResponse& operator=(const SnoozeChannelResponse&);
  SnoozeChannelResponse() : message() {
  }

  virtual ~SnoozeChannelResponse() throw();
  std::string message;

  _SnoozeChannelResponse__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const SnoozeChannelResponse & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const SnoozeChannelResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnoozeChannelResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SnoozeChannelResponse &a, SnoozeChannelResponse &b);

inline std::ostream& operator<<(std::ostream& out, const SnoozeChannelResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SubscribeToApplicationRequest__isset {
  _SubscribeToApplicationRequest__isset() : token(false), applicationName(false), applicationId(false), organization(false), shared(true) {}
  bool token :1;
  bool applicationName :1;
  bool applicationId :1;
  bool organization :1;
  bool shared :1;
} _SubscribeToApplicationRequest__isset;

class SubscribeToApplicationRequest {
 public:

  SubscribeToApplicationRequest(const SubscribeToApplicationRequest&);
  SubscribeToApplicationRequest& operator=(const SubscribeToApplicationRequest&);
  SubscribeToApplicationRequest() : applicationName(), applicationId(), organization(), shared(false) {
  }

  virtual ~SubscribeToApplicationRequest() throw();
  UserToken token;
  std::string applicationName;
  std::string applicationId;
  std::string organization;
  bool shared;

  _SubscribeToApplicationRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_applicationName(const std::string& val);

  void __set_applicationId(const std::string& val);

  void __set_organization(const std::string& val);

  void __set_shared(const bool val);

  bool operator == (const SubscribeToApplicationRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(applicationName == rhs.applicationName))
      return false;
    if (!(applicationId == rhs.applicationId))
      return false;
    if (__isset.organization != rhs.__isset.organization)
      return false;
    else if (__isset.organization && !(organization == rhs.organization))
      return false;
    if (__isset.shared != rhs.__isset.shared)
      return false;
    else if (__isset.shared && !(shared == rhs.shared))
      return false;
    return true;
  }
  bool operator != (const SubscribeToApplicationRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SubscribeToApplicationRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SubscribeToApplicationRequest &a, SubscribeToApplicationRequest &b);

inline std::ostream& operator<<(std::ostream& out, const SubscribeToApplicationRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SubscribeToApplicationResponse__isset {
  _SubscribeToApplicationResponse__isset() : message(false), channel(false) {}
  bool message :1;
  bool channel :1;
} _SubscribeToApplicationResponse__isset;

class SubscribeToApplicationResponse {
 public:

  SubscribeToApplicationResponse(const SubscribeToApplicationResponse&);
  SubscribeToApplicationResponse& operator=(const SubscribeToApplicationResponse&);
  SubscribeToApplicationResponse() : message() {
  }

  virtual ~SubscribeToApplicationResponse() throw();
  std::string message;
  BananaChannel channel;

  _SubscribeToApplicationResponse__isset __isset;

  void __set_message(const std::string& val);

  void __set_channel(const BananaChannel& val);

  bool operator == (const SubscribeToApplicationResponse & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    if (!(channel == rhs.channel))
      return false;
    return true;
  }
  bool operator != (const SubscribeToApplicationResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SubscribeToApplicationResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SubscribeToApplicationResponse &a, SubscribeToApplicationResponse &b);

inline std::ostream& operator<<(std::ostream& out, const SubscribeToApplicationResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetApplicationInfoRequest__isset {
  _GetApplicationInfoRequest__isset() : token(false), applicationId(false) {}
  bool token :1;
  bool applicationId :1;
} _GetApplicationInfoRequest__isset;

class GetApplicationInfoRequest {
 public:

  GetApplicationInfoRequest(const GetApplicationInfoRequest&);
  GetApplicationInfoRequest& operator=(const GetApplicationInfoRequest&);
  GetApplicationInfoRequest() : applicationId() {
  }

  virtual ~GetApplicationInfoRequest() throw();
  UserToken token;
  std::string applicationId;

  _GetApplicationInfoRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_applicationId(const std::string& val);

  bool operator == (const GetApplicationInfoRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(applicationId == rhs.applicationId))
      return false;
    return true;
  }
  bool operator != (const GetApplicationInfoRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetApplicationInfoRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetApplicationInfoRequest &a, GetApplicationInfoRequest &b);

inline std::ostream& operator<<(std::ostream& out, const GetApplicationInfoRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetApplicationInfoResponse__isset {
  _GetApplicationInfoResponse__isset() : applicationInfo(false) {}
  bool applicationInfo :1;
} _GetApplicationInfoResponse__isset;

class GetApplicationInfoResponse {
 public:

  GetApplicationInfoResponse(const GetApplicationInfoResponse&);
  GetApplicationInfoResponse& operator=(const GetApplicationInfoResponse&);
  GetApplicationInfoResponse() {
  }

  virtual ~GetApplicationInfoResponse() throw();
  Application applicationInfo;

  _GetApplicationInfoResponse__isset __isset;

  void __set_applicationInfo(const Application& val);

  bool operator == (const GetApplicationInfoResponse & rhs) const
  {
    if (!(applicationInfo == rhs.applicationInfo))
      return false;
    return true;
  }
  bool operator != (const GetApplicationInfoResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetApplicationInfoResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetApplicationInfoResponse &a, GetApplicationInfoResponse &b);

inline std::ostream& operator<<(std::ostream& out, const GetApplicationInfoResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetDashboardRequest__isset {
  _GetDashboardRequest__isset() : token(false) {}
  bool token :1;
} _GetDashboardRequest__isset;

class GetDashboardRequest {
 public:

  GetDashboardRequest(const GetDashboardRequest&);
  GetDashboardRequest& operator=(const GetDashboardRequest&);
  GetDashboardRequest() {
  }

  virtual ~GetDashboardRequest() throw();
  UserToken token;

  _GetDashboardRequest__isset __isset;

  void __set_token(const UserToken& val);

  bool operator == (const GetDashboardRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GetDashboardRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetDashboardRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetDashboardRequest &a, GetDashboardRequest &b);

inline std::ostream& operator<<(std::ostream& out, const GetDashboardRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetDashboardResponse__isset {
  _GetDashboardResponse__isset() : unreadMessageCount(true), totalMessagesLastHour(true), totalMessagesLast24hrs(true), recentMessages(true) {}
  bool unreadMessageCount :1;
  bool totalMessagesLastHour :1;
  bool totalMessagesLast24hrs :1;
  bool recentMessages :1;
} _GetDashboardResponse__isset;

class GetDashboardResponse {
 public:

  GetDashboardResponse(const GetDashboardResponse&);
  GetDashboardResponse& operator=(const GetDashboardResponse&);
  GetDashboardResponse() : unreadMessageCount(0), totalMessagesLastHour(0), totalMessagesLast24hrs(0) {

  }

  virtual ~GetDashboardResponse() throw();
  int unreadMessageCount;
  int totalMessagesLastHour;
  int totalMessagesLast24hrs;
  std::vector< ::aroma::banana::thrift::Message>  recentMessages;

  _GetDashboardResponse__isset __isset;

  void __set_unreadMessageCount(const int val);

  void __set_totalMessagesLastHour(const int val);

  void __set_totalMessagesLast24hrs(const int val);

  void __set_recentMessages(const std::vector< ::aroma::banana::thrift::Message> & val);

  bool operator == (const GetDashboardResponse & rhs) const
  {
    if (!(unreadMessageCount == rhs.unreadMessageCount))
      return false;
    if (!(totalMessagesLastHour == rhs.totalMessagesLastHour))
      return false;
    if (!(totalMessagesLast24hrs == rhs.totalMessagesLast24hrs))
      return false;
    if (!(recentMessages == rhs.recentMessages))
      return false;
    return true;
  }
  bool operator != (const GetDashboardResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetDashboardResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetDashboardResponse &a, GetDashboardResponse &b);

inline std::ostream& operator<<(std::ostream& out, const GetDashboardResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetMessagesRequest__isset {
  _GetMessagesRequest__isset() : token(false), applicationId(false), limit(true) {}
  bool token :1;
  bool applicationId :1;
  bool limit :1;
} _GetMessagesRequest__isset;

class GetMessagesRequest {
 public:

  GetMessagesRequest(const GetMessagesRequest&);
  GetMessagesRequest& operator=(const GetMessagesRequest&);
  GetMessagesRequest() : applicationId(), limit(0) {
  }

  virtual ~GetMessagesRequest() throw();
  UserToken token;
  std::string applicationId;
  int limit;

  _GetMessagesRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_applicationId(const std::string& val);

  void __set_limit(const int val);

  bool operator == (const GetMessagesRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (__isset.applicationId != rhs.__isset.applicationId)
      return false;
    else if (__isset.applicationId && !(applicationId == rhs.applicationId))
      return false;
    if (__isset.limit != rhs.__isset.limit)
      return false;
    else if (__isset.limit && !(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const GetMessagesRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetMessagesRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetMessagesRequest &a, GetMessagesRequest &b);

inline std::ostream& operator<<(std::ostream& out, const GetMessagesRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetMessagesResponse__isset {
  _GetMessagesResponse__isset() : messages(true), totalMessagesMatching(true) {}
  bool messages :1;
  bool totalMessagesMatching :1;
} _GetMessagesResponse__isset;

class GetMessagesResponse {
 public:

  GetMessagesResponse(const GetMessagesResponse&);
  GetMessagesResponse& operator=(const GetMessagesResponse&);
  GetMessagesResponse() : totalMessagesMatching(0) {

  }

  virtual ~GetMessagesResponse() throw();
  std::vector< ::aroma::banana::thrift::Message>  messages;
  int totalMessagesMatching;

  _GetMessagesResponse__isset __isset;

  void __set_messages(const std::vector< ::aroma::banana::thrift::Message> & val);

  void __set_totalMessagesMatching(const int val);

  bool operator == (const GetMessagesResponse & rhs) const
  {
    if (!(messages == rhs.messages))
      return false;
    if (__isset.totalMessagesMatching != rhs.__isset.totalMessagesMatching)
      return false;
    else if (__isset.totalMessagesMatching && !(totalMessagesMatching == rhs.totalMessagesMatching))
      return false;
    return true;
  }
  bool operator != (const GetMessagesResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetMessagesResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetMessagesResponse &a, GetMessagesResponse &b);

inline std::ostream& operator<<(std::ostream& out, const GetMessagesResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetMyApplicationsRequest__isset {
  _GetMyApplicationsRequest__isset() : token(false) {}
  bool token :1;
} _GetMyApplicationsRequest__isset;

class GetMyApplicationsRequest {
 public:

  GetMyApplicationsRequest(const GetMyApplicationsRequest&);
  GetMyApplicationsRequest& operator=(const GetMyApplicationsRequest&);
  GetMyApplicationsRequest() {
  }

  virtual ~GetMyApplicationsRequest() throw();
  UserToken token;

  _GetMyApplicationsRequest__isset __isset;

  void __set_token(const UserToken& val);

  bool operator == (const GetMyApplicationsRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GetMyApplicationsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetMyApplicationsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetMyApplicationsRequest &a, GetMyApplicationsRequest &b);

inline std::ostream& operator<<(std::ostream& out, const GetMyApplicationsRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetMyApplicationsResponse__isset {
  _GetMyApplicationsResponse__isset() : applications(false) {}
  bool applications :1;
} _GetMyApplicationsResponse__isset;

class GetMyApplicationsResponse {
 public:

  GetMyApplicationsResponse(const GetMyApplicationsResponse&);
  GetMyApplicationsResponse& operator=(const GetMyApplicationsResponse&);
  GetMyApplicationsResponse() {
  }

  virtual ~GetMyApplicationsResponse() throw();
  std::vector<Application>  applications;

  _GetMyApplicationsResponse__isset __isset;

  void __set_applications(const std::vector<Application> & val);

  bool operator == (const GetMyApplicationsResponse & rhs) const
  {
    if (!(applications == rhs.applications))
      return false;
    return true;
  }
  bool operator != (const GetMyApplicationsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetMyApplicationsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetMyApplicationsResponse &a, GetMyApplicationsResponse &b);

inline std::ostream& operator<<(std::ostream& out, const GetMyApplicationsResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetApplicationSubscribersRequest__isset {
  _GetApplicationSubscribersRequest__isset() : token(false), applicationId(false), organization(false) {}
  bool token :1;
  bool applicationId :1;
  bool organization :1;
} _GetApplicationSubscribersRequest__isset;

class GetApplicationSubscribersRequest {
 public:

  GetApplicationSubscribersRequest(const GetApplicationSubscribersRequest&);
  GetApplicationSubscribersRequest& operator=(const GetApplicationSubscribersRequest&);
  GetApplicationSubscribersRequest() : applicationId(), organization() {
  }

  virtual ~GetApplicationSubscribersRequest() throw();
  UserToken token;
  std::string applicationId;
  std::string organization;

  _GetApplicationSubscribersRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_applicationId(const std::string& val);

  void __set_organization(const std::string& val);

  bool operator == (const GetApplicationSubscribersRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(applicationId == rhs.applicationId))
      return false;
    if (!(organization == rhs.organization))
      return false;
    return true;
  }
  bool operator != (const GetApplicationSubscribersRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetApplicationSubscribersRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetApplicationSubscribersRequest &a, GetApplicationSubscribersRequest &b);

inline std::ostream& operator<<(std::ostream& out, const GetApplicationSubscribersRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetApplicationSubscribersResponse__isset {
  _GetApplicationSubscribersResponse__isset() : subscribers(true) {}
  bool subscribers :1;
} _GetApplicationSubscribersResponse__isset;

class GetApplicationSubscribersResponse {
 public:

  GetApplicationSubscribersResponse(const GetApplicationSubscribersResponse&);
  GetApplicationSubscribersResponse& operator=(const GetApplicationSubscribersResponse&);
  GetApplicationSubscribersResponse() {

  }

  virtual ~GetApplicationSubscribersResponse() throw();
  std::vector<User>  subscribers;

  _GetApplicationSubscribersResponse__isset __isset;

  void __set_subscribers(const std::vector<User> & val);

  bool operator == (const GetApplicationSubscribersResponse & rhs) const
  {
    if (!(subscribers == rhs.subscribers))
      return false;
    return true;
  }
  bool operator != (const GetApplicationSubscribersResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetApplicationSubscribersResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetApplicationSubscribersResponse &a, GetApplicationSubscribersResponse &b);

inline std::ostream& operator<<(std::ostream& out, const GetApplicationSubscribersResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetMySavedChannelsRequest__isset {
  _GetMySavedChannelsRequest__isset() : token(false) {}
  bool token :1;
} _GetMySavedChannelsRequest__isset;

class GetMySavedChannelsRequest {
 public:

  GetMySavedChannelsRequest(const GetMySavedChannelsRequest&);
  GetMySavedChannelsRequest& operator=(const GetMySavedChannelsRequest&);
  GetMySavedChannelsRequest() {
  }

  virtual ~GetMySavedChannelsRequest() throw();
  UserToken token;

  _GetMySavedChannelsRequest__isset __isset;

  void __set_token(const UserToken& val);

  bool operator == (const GetMySavedChannelsRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GetMySavedChannelsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetMySavedChannelsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetMySavedChannelsRequest &a, GetMySavedChannelsRequest &b);

inline std::ostream& operator<<(std::ostream& out, const GetMySavedChannelsRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetMySavedChannelsResponse__isset {
  _GetMySavedChannelsResponse__isset() : channels(false) {}
  bool channels :1;
} _GetMySavedChannelsResponse__isset;

class GetMySavedChannelsResponse {
 public:

  GetMySavedChannelsResponse(const GetMySavedChannelsResponse&);
  GetMySavedChannelsResponse& operator=(const GetMySavedChannelsResponse&);
  GetMySavedChannelsResponse() {
  }

  virtual ~GetMySavedChannelsResponse() throw();
  std::vector<BananaChannel>  channels;

  _GetMySavedChannelsResponse__isset __isset;

  void __set_channels(const std::vector<BananaChannel> & val);

  bool operator == (const GetMySavedChannelsResponse & rhs) const
  {
    if (!(channels == rhs.channels))
      return false;
    return true;
  }
  bool operator != (const GetMySavedChannelsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetMySavedChannelsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetMySavedChannelsResponse &a, GetMySavedChannelsResponse &b);

inline std::ostream& operator<<(std::ostream& out, const GetMySavedChannelsResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetActivityRequest__isset {
  _GetActivityRequest__isset() : token(false), limit(true) {}
  bool token :1;
  bool limit :1;
} _GetActivityRequest__isset;

class GetActivityRequest {
 public:

  GetActivityRequest(const GetActivityRequest&);
  GetActivityRequest& operator=(const GetActivityRequest&);
  GetActivityRequest() : limit(0) {
  }

  virtual ~GetActivityRequest() throw();
  UserToken token;
  int limit;

  _GetActivityRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_limit(const int val);

  bool operator == (const GetActivityRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (__isset.limit != rhs.__isset.limit)
      return false;
    else if (__isset.limit && !(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const GetActivityRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetActivityRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetActivityRequest &a, GetActivityRequest &b);

inline std::ostream& operator<<(std::ostream& out, const GetActivityRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetActivityResponse__isset {
  _GetActivityResponse__isset() : events(true) {}
  bool events :1;
} _GetActivityResponse__isset;

class GetActivityResponse {
 public:

  GetActivityResponse(const GetActivityResponse&);
  GetActivityResponse& operator=(const GetActivityResponse&);
  GetActivityResponse() {

  }

  virtual ~GetActivityResponse() throw();
  std::vector< ::aroma::banana::thrift::notifications::Event>  events;

  _GetActivityResponse__isset __isset;

  void __set_events(const std::vector< ::aroma::banana::thrift::notifications::Event> & val);

  bool operator == (const GetActivityResponse & rhs) const
  {
    if (!(events == rhs.events))
      return false;
    return true;
  }
  bool operator != (const GetActivityResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetActivityResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetActivityResponse &a, GetActivityResponse &b);

inline std::ostream& operator<<(std::ostream& out, const GetActivityResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetServiceAnnouncementsRequest__isset {
  _GetServiceAnnouncementsRequest__isset() : token(false) {}
  bool token :1;
} _GetServiceAnnouncementsRequest__isset;

class GetServiceAnnouncementsRequest {
 public:

  GetServiceAnnouncementsRequest(const GetServiceAnnouncementsRequest&);
  GetServiceAnnouncementsRequest& operator=(const GetServiceAnnouncementsRequest&);
  GetServiceAnnouncementsRequest() {
  }

  virtual ~GetServiceAnnouncementsRequest() throw();
  UserToken token;

  _GetServiceAnnouncementsRequest__isset __isset;

  void __set_token(const UserToken& val);

  bool operator == (const GetServiceAnnouncementsRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GetServiceAnnouncementsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetServiceAnnouncementsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetServiceAnnouncementsRequest &a, GetServiceAnnouncementsRequest &b);

inline std::ostream& operator<<(std::ostream& out, const GetServiceAnnouncementsRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetServiceAnnouncementsResponse__isset {
  _GetServiceAnnouncementsResponse__isset() : serviceAnnouncements(true) {}
  bool serviceAnnouncements :1;
} _GetServiceAnnouncementsResponse__isset;

class GetServiceAnnouncementsResponse {
 public:

  GetServiceAnnouncementsResponse(const GetServiceAnnouncementsResponse&);
  GetServiceAnnouncementsResponse& operator=(const GetServiceAnnouncementsResponse&);
  GetServiceAnnouncementsResponse() {

  }

  virtual ~GetServiceAnnouncementsResponse() throw();
  std::vector< ::aroma::banana::thrift::ServiceAnnouncement>  serviceAnnouncements;

  _GetServiceAnnouncementsResponse__isset __isset;

  void __set_serviceAnnouncements(const std::vector< ::aroma::banana::thrift::ServiceAnnouncement> & val);

  bool operator == (const GetServiceAnnouncementsResponse & rhs) const
  {
    if (__isset.serviceAnnouncements != rhs.__isset.serviceAnnouncements)
      return false;
    else if (__isset.serviceAnnouncements && !(serviceAnnouncements == rhs.serviceAnnouncements))
      return false;
    return true;
  }
  bool operator != (const GetServiceAnnouncementsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetServiceAnnouncementsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetServiceAnnouncementsResponse &a, GetServiceAnnouncementsResponse &b);

inline std::ostream& operator<<(std::ostream& out, const GetServiceAnnouncementsResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SearchForApplicationsRequest__isset {
  _SearchForApplicationsRequest__isset() : token(false), applicationName(false), organization(false) {}
  bool token :1;
  bool applicationName :1;
  bool organization :1;
} _SearchForApplicationsRequest__isset;

class SearchForApplicationsRequest {
 public:

  SearchForApplicationsRequest(const SearchForApplicationsRequest&);
  SearchForApplicationsRequest& operator=(const SearchForApplicationsRequest&);
  SearchForApplicationsRequest() : applicationName(), organization() {
  }

  virtual ~SearchForApplicationsRequest() throw();
  UserToken token;
  std::string applicationName;
  std::string organization;

  _SearchForApplicationsRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_applicationName(const std::string& val);

  void __set_organization(const std::string& val);

  bool operator == (const SearchForApplicationsRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(applicationName == rhs.applicationName))
      return false;
    if (__isset.organization != rhs.__isset.organization)
      return false;
    else if (__isset.organization && !(organization == rhs.organization))
      return false;
    return true;
  }
  bool operator != (const SearchForApplicationsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SearchForApplicationsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SearchForApplicationsRequest &a, SearchForApplicationsRequest &b);

inline std::ostream& operator<<(std::ostream& out, const SearchForApplicationsRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SearchForApplicationsResponse__isset {
  _SearchForApplicationsResponse__isset() : applications(true) {}
  bool applications :1;
} _SearchForApplicationsResponse__isset;

class SearchForApplicationsResponse {
 public:

  SearchForApplicationsResponse(const SearchForApplicationsResponse&);
  SearchForApplicationsResponse& operator=(const SearchForApplicationsResponse&);
  SearchForApplicationsResponse() {

  }

  virtual ~SearchForApplicationsResponse() throw();
  std::vector<Application>  applications;

  _SearchForApplicationsResponse__isset __isset;

  void __set_applications(const std::vector<Application> & val);

  bool operator == (const SearchForApplicationsResponse & rhs) const
  {
    if (!(applications == rhs.applications))
      return false;
    return true;
  }
  bool operator != (const SearchForApplicationsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SearchForApplicationsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SearchForApplicationsResponse &a, SearchForApplicationsResponse &b);

inline std::ostream& operator<<(std::ostream& out, const SearchForApplicationsResponse& obj)
{
  obj.printTo(out);
  return out;
}

}}}} // namespace

#endif
