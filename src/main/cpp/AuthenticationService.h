/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AuthenticationService_H
#define AuthenticationService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "AuthenticationService_types.h"

namespace aroma { namespace banana { namespace thrift { namespace authentication { namespace service {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class AuthenticationServiceIf {
 public:
  virtual ~AuthenticationServiceIf() {}
  virtual double getApiVersion() = 0;

  /**
   * Create an Application Token, used to represent an Application or Computer.
   * 
   * @param request
   */
  virtual void createApplicationToken(CreateApplicationTokenResponse& _return, const CreateApplicationTokenRequest& request) = 0;

  /**
   * Create a User Token, used to represent a Human.
   * 
   * @param request
   */
  virtual void createUserToken(CreateUserTokenResponse& _return, const CreateUserTokenRequest& request) = 0;

  /**
   * Get information about an Application Token.
   * 
   * @param request
   */
  virtual void getApplicationTokenInfo(GetApplicationTokenInfoResponse& _return, const GetApplicationTokenInfoRequest& request) = 0;

  /**
   * Get information about a User Token.
   * 
   * @param request
   */
  virtual void getUserTokenInfo(GetUserTokenInfoResponse& _return, const GetUserTokenInfoRequest& request) = 0;

  /**
   * Invalidates a Token and removes it from knowledge. Any subsequent references to the Token will produce
   * an InvalidTokenException.
   * 
   * @param request
   */
  virtual void invalidateApplicationToken(InvalidateApplicationTokenResponse& _return, const InvalidateApplicationTokenRequest& request) = 0;

  /**
   * Invalidates a Token and removes it from knowledge. Any subsequent references to the Token will produce
   * an InvalidTokenException.
   * 
   * @param request
   */
  virtual void invalidateUserToken(InvalidateUserTokenResponse& _return, const InvalidateUserTokenRequest& request) = 0;

  /**
   * Verify that a Token is valid, and optionally, that it belongs to the specified application.
   * 
   * @param request
   */
  virtual void verifyApplicationToken(VerifyApplicationTokenResponse& _return, const VerifyApplicationTokenRequest& request) = 0;

  /**
   * Verify that a Token is valid, and optionally, that it belongs to the specified user.
   * 
   * @param request
   */
  virtual void verifyUserToken(VerifyUserTokenResponse& _return, const VerifyUserTokenRequest& request) = 0;
};

class AuthenticationServiceIfFactory {
 public:
  typedef AuthenticationServiceIf Handler;

  virtual ~AuthenticationServiceIfFactory() {}

  virtual AuthenticationServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AuthenticationServiceIf* /* handler */) = 0;
};

class AuthenticationServiceIfSingletonFactory : virtual public AuthenticationServiceIfFactory {
 public:
  AuthenticationServiceIfSingletonFactory(const boost::shared_ptr<AuthenticationServiceIf>& iface) : iface_(iface) {}
  virtual ~AuthenticationServiceIfSingletonFactory() {}

  virtual AuthenticationServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AuthenticationServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<AuthenticationServiceIf> iface_;
};

class AuthenticationServiceNull : virtual public AuthenticationServiceIf {
 public:
  virtual ~AuthenticationServiceNull() {}
  double getApiVersion() {
    double _return = (double)0;
    return _return;
  }
  void createApplicationToken(CreateApplicationTokenResponse& /* _return */, const CreateApplicationTokenRequest& /* request */) {
    return;
  }
  void createUserToken(CreateUserTokenResponse& /* _return */, const CreateUserTokenRequest& /* request */) {
    return;
  }
  void getApplicationTokenInfo(GetApplicationTokenInfoResponse& /* _return */, const GetApplicationTokenInfoRequest& /* request */) {
    return;
  }
  void getUserTokenInfo(GetUserTokenInfoResponse& /* _return */, const GetUserTokenInfoRequest& /* request */) {
    return;
  }
  void invalidateApplicationToken(InvalidateApplicationTokenResponse& /* _return */, const InvalidateApplicationTokenRequest& /* request */) {
    return;
  }
  void invalidateUserToken(InvalidateUserTokenResponse& /* _return */, const InvalidateUserTokenRequest& /* request */) {
    return;
  }
  void verifyApplicationToken(VerifyApplicationTokenResponse& /* _return */, const VerifyApplicationTokenRequest& /* request */) {
    return;
  }
  void verifyUserToken(VerifyUserTokenResponse& /* _return */, const VerifyUserTokenRequest& /* request */) {
    return;
  }
};


class AuthenticationService_getApiVersion_args {
 public:

  AuthenticationService_getApiVersion_args(const AuthenticationService_getApiVersion_args&);
  AuthenticationService_getApiVersion_args& operator=(const AuthenticationService_getApiVersion_args&);
  AuthenticationService_getApiVersion_args() {
  }

  virtual ~AuthenticationService_getApiVersion_args() throw();

  bool operator == (const AuthenticationService_getApiVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AuthenticationService_getApiVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthenticationService_getApiVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AuthenticationService_getApiVersion_pargs {
 public:


  virtual ~AuthenticationService_getApiVersion_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthenticationService_getApiVersion_result__isset {
  _AuthenticationService_getApiVersion_result__isset() : success(false) {}
  bool success :1;
} _AuthenticationService_getApiVersion_result__isset;

class AuthenticationService_getApiVersion_result {
 public:

  AuthenticationService_getApiVersion_result(const AuthenticationService_getApiVersion_result&);
  AuthenticationService_getApiVersion_result& operator=(const AuthenticationService_getApiVersion_result&);
  AuthenticationService_getApiVersion_result() : success(0) {
  }

  virtual ~AuthenticationService_getApiVersion_result() throw();
  double success;

  _AuthenticationService_getApiVersion_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const AuthenticationService_getApiVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AuthenticationService_getApiVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthenticationService_getApiVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthenticationService_getApiVersion_presult__isset {
  _AuthenticationService_getApiVersion_presult__isset() : success(false) {}
  bool success :1;
} _AuthenticationService_getApiVersion_presult__isset;

class AuthenticationService_getApiVersion_presult {
 public:


  virtual ~AuthenticationService_getApiVersion_presult() throw();
  double* success;

  _AuthenticationService_getApiVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AuthenticationService_createApplicationToken_args__isset {
  _AuthenticationService_createApplicationToken_args__isset() : request(false) {}
  bool request :1;
} _AuthenticationService_createApplicationToken_args__isset;

class AuthenticationService_createApplicationToken_args {
 public:

  AuthenticationService_createApplicationToken_args(const AuthenticationService_createApplicationToken_args&);
  AuthenticationService_createApplicationToken_args& operator=(const AuthenticationService_createApplicationToken_args&);
  AuthenticationService_createApplicationToken_args() {
  }

  virtual ~AuthenticationService_createApplicationToken_args() throw();
  CreateApplicationTokenRequest request;

  _AuthenticationService_createApplicationToken_args__isset __isset;

  void __set_request(const CreateApplicationTokenRequest& val);

  bool operator == (const AuthenticationService_createApplicationToken_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const AuthenticationService_createApplicationToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthenticationService_createApplicationToken_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AuthenticationService_createApplicationToken_pargs {
 public:


  virtual ~AuthenticationService_createApplicationToken_pargs() throw();
  const CreateApplicationTokenRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthenticationService_createApplicationToken_result__isset {
  _AuthenticationService_createApplicationToken_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _AuthenticationService_createApplicationToken_result__isset;

class AuthenticationService_createApplicationToken_result {
 public:

  AuthenticationService_createApplicationToken_result(const AuthenticationService_createApplicationToken_result&);
  AuthenticationService_createApplicationToken_result& operator=(const AuthenticationService_createApplicationToken_result&);
  AuthenticationService_createApplicationToken_result() {
  }

  virtual ~AuthenticationService_createApplicationToken_result() throw();
  CreateApplicationTokenResponse success;
  OperationFailedException ex;

  _AuthenticationService_createApplicationToken_result__isset __isset;

  void __set_success(const CreateApplicationTokenResponse& val);

  void __set_ex(const OperationFailedException& val);

  bool operator == (const AuthenticationService_createApplicationToken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const AuthenticationService_createApplicationToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthenticationService_createApplicationToken_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthenticationService_createApplicationToken_presult__isset {
  _AuthenticationService_createApplicationToken_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _AuthenticationService_createApplicationToken_presult__isset;

class AuthenticationService_createApplicationToken_presult {
 public:


  virtual ~AuthenticationService_createApplicationToken_presult() throw();
  CreateApplicationTokenResponse* success;
  OperationFailedException* ex;

  _AuthenticationService_createApplicationToken_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AuthenticationService_createUserToken_args__isset {
  _AuthenticationService_createUserToken_args__isset() : request(false) {}
  bool request :1;
} _AuthenticationService_createUserToken_args__isset;

class AuthenticationService_createUserToken_args {
 public:

  AuthenticationService_createUserToken_args(const AuthenticationService_createUserToken_args&);
  AuthenticationService_createUserToken_args& operator=(const AuthenticationService_createUserToken_args&);
  AuthenticationService_createUserToken_args() {
  }

  virtual ~AuthenticationService_createUserToken_args() throw();
  CreateUserTokenRequest request;

  _AuthenticationService_createUserToken_args__isset __isset;

  void __set_request(const CreateUserTokenRequest& val);

  bool operator == (const AuthenticationService_createUserToken_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const AuthenticationService_createUserToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthenticationService_createUserToken_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AuthenticationService_createUserToken_pargs {
 public:


  virtual ~AuthenticationService_createUserToken_pargs() throw();
  const CreateUserTokenRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthenticationService_createUserToken_result__isset {
  _AuthenticationService_createUserToken_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _AuthenticationService_createUserToken_result__isset;

class AuthenticationService_createUserToken_result {
 public:

  AuthenticationService_createUserToken_result(const AuthenticationService_createUserToken_result&);
  AuthenticationService_createUserToken_result& operator=(const AuthenticationService_createUserToken_result&);
  AuthenticationService_createUserToken_result() {
  }

  virtual ~AuthenticationService_createUserToken_result() throw();
  CreateUserTokenResponse success;
  OperationFailedException ex;

  _AuthenticationService_createUserToken_result__isset __isset;

  void __set_success(const CreateUserTokenResponse& val);

  void __set_ex(const OperationFailedException& val);

  bool operator == (const AuthenticationService_createUserToken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const AuthenticationService_createUserToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthenticationService_createUserToken_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthenticationService_createUserToken_presult__isset {
  _AuthenticationService_createUserToken_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _AuthenticationService_createUserToken_presult__isset;

class AuthenticationService_createUserToken_presult {
 public:


  virtual ~AuthenticationService_createUserToken_presult() throw();
  CreateUserTokenResponse* success;
  OperationFailedException* ex;

  _AuthenticationService_createUserToken_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AuthenticationService_getApplicationTokenInfo_args__isset {
  _AuthenticationService_getApplicationTokenInfo_args__isset() : request(false) {}
  bool request :1;
} _AuthenticationService_getApplicationTokenInfo_args__isset;

class AuthenticationService_getApplicationTokenInfo_args {
 public:

  AuthenticationService_getApplicationTokenInfo_args(const AuthenticationService_getApplicationTokenInfo_args&);
  AuthenticationService_getApplicationTokenInfo_args& operator=(const AuthenticationService_getApplicationTokenInfo_args&);
  AuthenticationService_getApplicationTokenInfo_args() {
  }

  virtual ~AuthenticationService_getApplicationTokenInfo_args() throw();
  GetApplicationTokenInfoRequest request;

  _AuthenticationService_getApplicationTokenInfo_args__isset __isset;

  void __set_request(const GetApplicationTokenInfoRequest& val);

  bool operator == (const AuthenticationService_getApplicationTokenInfo_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const AuthenticationService_getApplicationTokenInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthenticationService_getApplicationTokenInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AuthenticationService_getApplicationTokenInfo_pargs {
 public:


  virtual ~AuthenticationService_getApplicationTokenInfo_pargs() throw();
  const GetApplicationTokenInfoRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthenticationService_getApplicationTokenInfo_result__isset {
  _AuthenticationService_getApplicationTokenInfo_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _AuthenticationService_getApplicationTokenInfo_result__isset;

class AuthenticationService_getApplicationTokenInfo_result {
 public:

  AuthenticationService_getApplicationTokenInfo_result(const AuthenticationService_getApplicationTokenInfo_result&);
  AuthenticationService_getApplicationTokenInfo_result& operator=(const AuthenticationService_getApplicationTokenInfo_result&);
  AuthenticationService_getApplicationTokenInfo_result() {
  }

  virtual ~AuthenticationService_getApplicationTokenInfo_result() throw();
  GetApplicationTokenInfoResponse success;
  OperationFailedException ex1;
  InvalidTokenException ex2;

  _AuthenticationService_getApplicationTokenInfo_result__isset __isset;

  void __set_success(const GetApplicationTokenInfoResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidTokenException& val);

  bool operator == (const AuthenticationService_getApplicationTokenInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const AuthenticationService_getApplicationTokenInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthenticationService_getApplicationTokenInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthenticationService_getApplicationTokenInfo_presult__isset {
  _AuthenticationService_getApplicationTokenInfo_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _AuthenticationService_getApplicationTokenInfo_presult__isset;

class AuthenticationService_getApplicationTokenInfo_presult {
 public:


  virtual ~AuthenticationService_getApplicationTokenInfo_presult() throw();
  GetApplicationTokenInfoResponse* success;
  OperationFailedException* ex1;
  InvalidTokenException* ex2;

  _AuthenticationService_getApplicationTokenInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AuthenticationService_getUserTokenInfo_args__isset {
  _AuthenticationService_getUserTokenInfo_args__isset() : request(false) {}
  bool request :1;
} _AuthenticationService_getUserTokenInfo_args__isset;

class AuthenticationService_getUserTokenInfo_args {
 public:

  AuthenticationService_getUserTokenInfo_args(const AuthenticationService_getUserTokenInfo_args&);
  AuthenticationService_getUserTokenInfo_args& operator=(const AuthenticationService_getUserTokenInfo_args&);
  AuthenticationService_getUserTokenInfo_args() {
  }

  virtual ~AuthenticationService_getUserTokenInfo_args() throw();
  GetUserTokenInfoRequest request;

  _AuthenticationService_getUserTokenInfo_args__isset __isset;

  void __set_request(const GetUserTokenInfoRequest& val);

  bool operator == (const AuthenticationService_getUserTokenInfo_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const AuthenticationService_getUserTokenInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthenticationService_getUserTokenInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AuthenticationService_getUserTokenInfo_pargs {
 public:


  virtual ~AuthenticationService_getUserTokenInfo_pargs() throw();
  const GetUserTokenInfoRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthenticationService_getUserTokenInfo_result__isset {
  _AuthenticationService_getUserTokenInfo_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _AuthenticationService_getUserTokenInfo_result__isset;

class AuthenticationService_getUserTokenInfo_result {
 public:

  AuthenticationService_getUserTokenInfo_result(const AuthenticationService_getUserTokenInfo_result&);
  AuthenticationService_getUserTokenInfo_result& operator=(const AuthenticationService_getUserTokenInfo_result&);
  AuthenticationService_getUserTokenInfo_result() {
  }

  virtual ~AuthenticationService_getUserTokenInfo_result() throw();
  GetUserTokenInfoResponse success;
  OperationFailedException ex1;
  InvalidTokenException ex2;

  _AuthenticationService_getUserTokenInfo_result__isset __isset;

  void __set_success(const GetUserTokenInfoResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidTokenException& val);

  bool operator == (const AuthenticationService_getUserTokenInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const AuthenticationService_getUserTokenInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthenticationService_getUserTokenInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthenticationService_getUserTokenInfo_presult__isset {
  _AuthenticationService_getUserTokenInfo_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _AuthenticationService_getUserTokenInfo_presult__isset;

class AuthenticationService_getUserTokenInfo_presult {
 public:


  virtual ~AuthenticationService_getUserTokenInfo_presult() throw();
  GetUserTokenInfoResponse* success;
  OperationFailedException* ex1;
  InvalidTokenException* ex2;

  _AuthenticationService_getUserTokenInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AuthenticationService_invalidateApplicationToken_args__isset {
  _AuthenticationService_invalidateApplicationToken_args__isset() : request(false) {}
  bool request :1;
} _AuthenticationService_invalidateApplicationToken_args__isset;

class AuthenticationService_invalidateApplicationToken_args {
 public:

  AuthenticationService_invalidateApplicationToken_args(const AuthenticationService_invalidateApplicationToken_args&);
  AuthenticationService_invalidateApplicationToken_args& operator=(const AuthenticationService_invalidateApplicationToken_args&);
  AuthenticationService_invalidateApplicationToken_args() {
  }

  virtual ~AuthenticationService_invalidateApplicationToken_args() throw();
  InvalidateApplicationTokenRequest request;

  _AuthenticationService_invalidateApplicationToken_args__isset __isset;

  void __set_request(const InvalidateApplicationTokenRequest& val);

  bool operator == (const AuthenticationService_invalidateApplicationToken_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const AuthenticationService_invalidateApplicationToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthenticationService_invalidateApplicationToken_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AuthenticationService_invalidateApplicationToken_pargs {
 public:


  virtual ~AuthenticationService_invalidateApplicationToken_pargs() throw();
  const InvalidateApplicationTokenRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthenticationService_invalidateApplicationToken_result__isset {
  _AuthenticationService_invalidateApplicationToken_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _AuthenticationService_invalidateApplicationToken_result__isset;

class AuthenticationService_invalidateApplicationToken_result {
 public:

  AuthenticationService_invalidateApplicationToken_result(const AuthenticationService_invalidateApplicationToken_result&);
  AuthenticationService_invalidateApplicationToken_result& operator=(const AuthenticationService_invalidateApplicationToken_result&);
  AuthenticationService_invalidateApplicationToken_result() {
  }

  virtual ~AuthenticationService_invalidateApplicationToken_result() throw();
  InvalidateApplicationTokenResponse success;
  OperationFailedException ex1;
  InvalidTokenException ex2;

  _AuthenticationService_invalidateApplicationToken_result__isset __isset;

  void __set_success(const InvalidateApplicationTokenResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidTokenException& val);

  bool operator == (const AuthenticationService_invalidateApplicationToken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const AuthenticationService_invalidateApplicationToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthenticationService_invalidateApplicationToken_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthenticationService_invalidateApplicationToken_presult__isset {
  _AuthenticationService_invalidateApplicationToken_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _AuthenticationService_invalidateApplicationToken_presult__isset;

class AuthenticationService_invalidateApplicationToken_presult {
 public:


  virtual ~AuthenticationService_invalidateApplicationToken_presult() throw();
  InvalidateApplicationTokenResponse* success;
  OperationFailedException* ex1;
  InvalidTokenException* ex2;

  _AuthenticationService_invalidateApplicationToken_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AuthenticationService_invalidateUserToken_args__isset {
  _AuthenticationService_invalidateUserToken_args__isset() : request(false) {}
  bool request :1;
} _AuthenticationService_invalidateUserToken_args__isset;

class AuthenticationService_invalidateUserToken_args {
 public:

  AuthenticationService_invalidateUserToken_args(const AuthenticationService_invalidateUserToken_args&);
  AuthenticationService_invalidateUserToken_args& operator=(const AuthenticationService_invalidateUserToken_args&);
  AuthenticationService_invalidateUserToken_args() {
  }

  virtual ~AuthenticationService_invalidateUserToken_args() throw();
  InvalidateUserTokenRequest request;

  _AuthenticationService_invalidateUserToken_args__isset __isset;

  void __set_request(const InvalidateUserTokenRequest& val);

  bool operator == (const AuthenticationService_invalidateUserToken_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const AuthenticationService_invalidateUserToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthenticationService_invalidateUserToken_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AuthenticationService_invalidateUserToken_pargs {
 public:


  virtual ~AuthenticationService_invalidateUserToken_pargs() throw();
  const InvalidateUserTokenRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthenticationService_invalidateUserToken_result__isset {
  _AuthenticationService_invalidateUserToken_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _AuthenticationService_invalidateUserToken_result__isset;

class AuthenticationService_invalidateUserToken_result {
 public:

  AuthenticationService_invalidateUserToken_result(const AuthenticationService_invalidateUserToken_result&);
  AuthenticationService_invalidateUserToken_result& operator=(const AuthenticationService_invalidateUserToken_result&);
  AuthenticationService_invalidateUserToken_result() {
  }

  virtual ~AuthenticationService_invalidateUserToken_result() throw();
  InvalidateUserTokenResponse success;
  OperationFailedException ex1;
  InvalidTokenException ex2;

  _AuthenticationService_invalidateUserToken_result__isset __isset;

  void __set_success(const InvalidateUserTokenResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidTokenException& val);

  bool operator == (const AuthenticationService_invalidateUserToken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const AuthenticationService_invalidateUserToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthenticationService_invalidateUserToken_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthenticationService_invalidateUserToken_presult__isset {
  _AuthenticationService_invalidateUserToken_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _AuthenticationService_invalidateUserToken_presult__isset;

class AuthenticationService_invalidateUserToken_presult {
 public:


  virtual ~AuthenticationService_invalidateUserToken_presult() throw();
  InvalidateUserTokenResponse* success;
  OperationFailedException* ex1;
  InvalidTokenException* ex2;

  _AuthenticationService_invalidateUserToken_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AuthenticationService_verifyApplicationToken_args__isset {
  _AuthenticationService_verifyApplicationToken_args__isset() : request(false) {}
  bool request :1;
} _AuthenticationService_verifyApplicationToken_args__isset;

class AuthenticationService_verifyApplicationToken_args {
 public:

  AuthenticationService_verifyApplicationToken_args(const AuthenticationService_verifyApplicationToken_args&);
  AuthenticationService_verifyApplicationToken_args& operator=(const AuthenticationService_verifyApplicationToken_args&);
  AuthenticationService_verifyApplicationToken_args() {
  }

  virtual ~AuthenticationService_verifyApplicationToken_args() throw();
  VerifyApplicationTokenRequest request;

  _AuthenticationService_verifyApplicationToken_args__isset __isset;

  void __set_request(const VerifyApplicationTokenRequest& val);

  bool operator == (const AuthenticationService_verifyApplicationToken_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const AuthenticationService_verifyApplicationToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthenticationService_verifyApplicationToken_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AuthenticationService_verifyApplicationToken_pargs {
 public:


  virtual ~AuthenticationService_verifyApplicationToken_pargs() throw();
  const VerifyApplicationTokenRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthenticationService_verifyApplicationToken_result__isset {
  _AuthenticationService_verifyApplicationToken_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _AuthenticationService_verifyApplicationToken_result__isset;

class AuthenticationService_verifyApplicationToken_result {
 public:

  AuthenticationService_verifyApplicationToken_result(const AuthenticationService_verifyApplicationToken_result&);
  AuthenticationService_verifyApplicationToken_result& operator=(const AuthenticationService_verifyApplicationToken_result&);
  AuthenticationService_verifyApplicationToken_result() {
  }

  virtual ~AuthenticationService_verifyApplicationToken_result() throw();
  VerifyApplicationTokenResponse success;
  OperationFailedException ex1;
  InvalidTokenException ex2;

  _AuthenticationService_verifyApplicationToken_result__isset __isset;

  void __set_success(const VerifyApplicationTokenResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidTokenException& val);

  bool operator == (const AuthenticationService_verifyApplicationToken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const AuthenticationService_verifyApplicationToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthenticationService_verifyApplicationToken_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthenticationService_verifyApplicationToken_presult__isset {
  _AuthenticationService_verifyApplicationToken_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _AuthenticationService_verifyApplicationToken_presult__isset;

class AuthenticationService_verifyApplicationToken_presult {
 public:


  virtual ~AuthenticationService_verifyApplicationToken_presult() throw();
  VerifyApplicationTokenResponse* success;
  OperationFailedException* ex1;
  InvalidTokenException* ex2;

  _AuthenticationService_verifyApplicationToken_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AuthenticationService_verifyUserToken_args__isset {
  _AuthenticationService_verifyUserToken_args__isset() : request(false) {}
  bool request :1;
} _AuthenticationService_verifyUserToken_args__isset;

class AuthenticationService_verifyUserToken_args {
 public:

  AuthenticationService_verifyUserToken_args(const AuthenticationService_verifyUserToken_args&);
  AuthenticationService_verifyUserToken_args& operator=(const AuthenticationService_verifyUserToken_args&);
  AuthenticationService_verifyUserToken_args() {
  }

  virtual ~AuthenticationService_verifyUserToken_args() throw();
  VerifyUserTokenRequest request;

  _AuthenticationService_verifyUserToken_args__isset __isset;

  void __set_request(const VerifyUserTokenRequest& val);

  bool operator == (const AuthenticationService_verifyUserToken_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const AuthenticationService_verifyUserToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthenticationService_verifyUserToken_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AuthenticationService_verifyUserToken_pargs {
 public:


  virtual ~AuthenticationService_verifyUserToken_pargs() throw();
  const VerifyUserTokenRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthenticationService_verifyUserToken_result__isset {
  _AuthenticationService_verifyUserToken_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _AuthenticationService_verifyUserToken_result__isset;

class AuthenticationService_verifyUserToken_result {
 public:

  AuthenticationService_verifyUserToken_result(const AuthenticationService_verifyUserToken_result&);
  AuthenticationService_verifyUserToken_result& operator=(const AuthenticationService_verifyUserToken_result&);
  AuthenticationService_verifyUserToken_result() {
  }

  virtual ~AuthenticationService_verifyUserToken_result() throw();
  VerifyUserTokenResponse success;
  OperationFailedException ex1;
  InvalidTokenException ex2;

  _AuthenticationService_verifyUserToken_result__isset __isset;

  void __set_success(const VerifyUserTokenResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidTokenException& val);

  bool operator == (const AuthenticationService_verifyUserToken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const AuthenticationService_verifyUserToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthenticationService_verifyUserToken_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthenticationService_verifyUserToken_presult__isset {
  _AuthenticationService_verifyUserToken_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _AuthenticationService_verifyUserToken_presult__isset;

class AuthenticationService_verifyUserToken_presult {
 public:


  virtual ~AuthenticationService_verifyUserToken_presult() throw();
  VerifyUserTokenResponse* success;
  OperationFailedException* ex1;
  InvalidTokenException* ex2;

  _AuthenticationService_verifyUserToken_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AuthenticationServiceClient : virtual public AuthenticationServiceIf {
 public:
  AuthenticationServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AuthenticationServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  double getApiVersion();
  void send_getApiVersion();
  double recv_getApiVersion();
  void createApplicationToken(CreateApplicationTokenResponse& _return, const CreateApplicationTokenRequest& request);
  void send_createApplicationToken(const CreateApplicationTokenRequest& request);
  void recv_createApplicationToken(CreateApplicationTokenResponse& _return);
  void createUserToken(CreateUserTokenResponse& _return, const CreateUserTokenRequest& request);
  void send_createUserToken(const CreateUserTokenRequest& request);
  void recv_createUserToken(CreateUserTokenResponse& _return);
  void getApplicationTokenInfo(GetApplicationTokenInfoResponse& _return, const GetApplicationTokenInfoRequest& request);
  void send_getApplicationTokenInfo(const GetApplicationTokenInfoRequest& request);
  void recv_getApplicationTokenInfo(GetApplicationTokenInfoResponse& _return);
  void getUserTokenInfo(GetUserTokenInfoResponse& _return, const GetUserTokenInfoRequest& request);
  void send_getUserTokenInfo(const GetUserTokenInfoRequest& request);
  void recv_getUserTokenInfo(GetUserTokenInfoResponse& _return);
  void invalidateApplicationToken(InvalidateApplicationTokenResponse& _return, const InvalidateApplicationTokenRequest& request);
  void send_invalidateApplicationToken(const InvalidateApplicationTokenRequest& request);
  void recv_invalidateApplicationToken(InvalidateApplicationTokenResponse& _return);
  void invalidateUserToken(InvalidateUserTokenResponse& _return, const InvalidateUserTokenRequest& request);
  void send_invalidateUserToken(const InvalidateUserTokenRequest& request);
  void recv_invalidateUserToken(InvalidateUserTokenResponse& _return);
  void verifyApplicationToken(VerifyApplicationTokenResponse& _return, const VerifyApplicationTokenRequest& request);
  void send_verifyApplicationToken(const VerifyApplicationTokenRequest& request);
  void recv_verifyApplicationToken(VerifyApplicationTokenResponse& _return);
  void verifyUserToken(VerifyUserTokenResponse& _return, const VerifyUserTokenRequest& request);
  void send_verifyUserToken(const VerifyUserTokenRequest& request);
  void recv_verifyUserToken(VerifyUserTokenResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AuthenticationServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AuthenticationServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AuthenticationServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getApiVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createApplicationToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createUserToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getApplicationTokenInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserTokenInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_invalidateApplicationToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_invalidateUserToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verifyApplicationToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verifyUserToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AuthenticationServiceProcessor(boost::shared_ptr<AuthenticationServiceIf> iface) :
    iface_(iface) {
    processMap_["getApiVersion"] = &AuthenticationServiceProcessor::process_getApiVersion;
    processMap_["createApplicationToken"] = &AuthenticationServiceProcessor::process_createApplicationToken;
    processMap_["createUserToken"] = &AuthenticationServiceProcessor::process_createUserToken;
    processMap_["getApplicationTokenInfo"] = &AuthenticationServiceProcessor::process_getApplicationTokenInfo;
    processMap_["getUserTokenInfo"] = &AuthenticationServiceProcessor::process_getUserTokenInfo;
    processMap_["invalidateApplicationToken"] = &AuthenticationServiceProcessor::process_invalidateApplicationToken;
    processMap_["invalidateUserToken"] = &AuthenticationServiceProcessor::process_invalidateUserToken;
    processMap_["verifyApplicationToken"] = &AuthenticationServiceProcessor::process_verifyApplicationToken;
    processMap_["verifyUserToken"] = &AuthenticationServiceProcessor::process_verifyUserToken;
  }

  virtual ~AuthenticationServiceProcessor() {}
};

class AuthenticationServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AuthenticationServiceProcessorFactory(const ::boost::shared_ptr< AuthenticationServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AuthenticationServiceIfFactory > handlerFactory_;
};

class AuthenticationServiceMultiface : virtual public AuthenticationServiceIf {
 public:
  AuthenticationServiceMultiface(std::vector<boost::shared_ptr<AuthenticationServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AuthenticationServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AuthenticationServiceIf> > ifaces_;
  AuthenticationServiceMultiface() {}
  void add(boost::shared_ptr<AuthenticationServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  double getApiVersion() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getApiVersion();
    }
    return ifaces_[i]->getApiVersion();
  }

  void createApplicationToken(CreateApplicationTokenResponse& _return, const CreateApplicationTokenRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createApplicationToken(_return, request);
    }
    ifaces_[i]->createApplicationToken(_return, request);
    return;
  }

  void createUserToken(CreateUserTokenResponse& _return, const CreateUserTokenRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createUserToken(_return, request);
    }
    ifaces_[i]->createUserToken(_return, request);
    return;
  }

  void getApplicationTokenInfo(GetApplicationTokenInfoResponse& _return, const GetApplicationTokenInfoRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getApplicationTokenInfo(_return, request);
    }
    ifaces_[i]->getApplicationTokenInfo(_return, request);
    return;
  }

  void getUserTokenInfo(GetUserTokenInfoResponse& _return, const GetUserTokenInfoRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserTokenInfo(_return, request);
    }
    ifaces_[i]->getUserTokenInfo(_return, request);
    return;
  }

  void invalidateApplicationToken(InvalidateApplicationTokenResponse& _return, const InvalidateApplicationTokenRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->invalidateApplicationToken(_return, request);
    }
    ifaces_[i]->invalidateApplicationToken(_return, request);
    return;
  }

  void invalidateUserToken(InvalidateUserTokenResponse& _return, const InvalidateUserTokenRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->invalidateUserToken(_return, request);
    }
    ifaces_[i]->invalidateUserToken(_return, request);
    return;
  }

  void verifyApplicationToken(VerifyApplicationTokenResponse& _return, const VerifyApplicationTokenRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verifyApplicationToken(_return, request);
    }
    ifaces_[i]->verifyApplicationToken(_return, request);
    return;
  }

  void verifyUserToken(VerifyUserTokenResponse& _return, const VerifyUserTokenRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verifyUserToken(_return, request);
    }
    ifaces_[i]->verifyUserToken(_return, request);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class AuthenticationServiceConcurrentClient : virtual public AuthenticationServiceIf {
 public:
  AuthenticationServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AuthenticationServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  double getApiVersion();
  int32_t send_getApiVersion();
  double recv_getApiVersion(const int32_t seqid);
  void createApplicationToken(CreateApplicationTokenResponse& _return, const CreateApplicationTokenRequest& request);
  int32_t send_createApplicationToken(const CreateApplicationTokenRequest& request);
  void recv_createApplicationToken(CreateApplicationTokenResponse& _return, const int32_t seqid);
  void createUserToken(CreateUserTokenResponse& _return, const CreateUserTokenRequest& request);
  int32_t send_createUserToken(const CreateUserTokenRequest& request);
  void recv_createUserToken(CreateUserTokenResponse& _return, const int32_t seqid);
  void getApplicationTokenInfo(GetApplicationTokenInfoResponse& _return, const GetApplicationTokenInfoRequest& request);
  int32_t send_getApplicationTokenInfo(const GetApplicationTokenInfoRequest& request);
  void recv_getApplicationTokenInfo(GetApplicationTokenInfoResponse& _return, const int32_t seqid);
  void getUserTokenInfo(GetUserTokenInfoResponse& _return, const GetUserTokenInfoRequest& request);
  int32_t send_getUserTokenInfo(const GetUserTokenInfoRequest& request);
  void recv_getUserTokenInfo(GetUserTokenInfoResponse& _return, const int32_t seqid);
  void invalidateApplicationToken(InvalidateApplicationTokenResponse& _return, const InvalidateApplicationTokenRequest& request);
  int32_t send_invalidateApplicationToken(const InvalidateApplicationTokenRequest& request);
  void recv_invalidateApplicationToken(InvalidateApplicationTokenResponse& _return, const int32_t seqid);
  void invalidateUserToken(InvalidateUserTokenResponse& _return, const InvalidateUserTokenRequest& request);
  int32_t send_invalidateUserToken(const InvalidateUserTokenRequest& request);
  void recv_invalidateUserToken(InvalidateUserTokenResponse& _return, const int32_t seqid);
  void verifyApplicationToken(VerifyApplicationTokenResponse& _return, const VerifyApplicationTokenRequest& request);
  int32_t send_verifyApplicationToken(const VerifyApplicationTokenRequest& request);
  void recv_verifyApplicationToken(VerifyApplicationTokenResponse& _return, const int32_t seqid);
  void verifyUserToken(VerifyUserTokenResponse& _return, const VerifyUserTokenRequest& request);
  int32_t send_verifyUserToken(const VerifyUserTokenRequest& request);
  void recv_verifyUserToken(VerifyUserTokenResponse& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}}}}} // namespace

#endif
