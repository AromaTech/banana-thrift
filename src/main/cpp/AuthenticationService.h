/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AuthenticationService_H
#define AuthenticationService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "AuthenticationService_types.h"

namespace aroma { namespace banana { namespace thrift { namespace authentication { namespace service {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class AuthenticationServiceIf {
 public:
  virtual ~AuthenticationServiceIf() {}
  virtual double getApiVersion() = 0;

  /**
   * Create a User Token, used to represent a Human.
   * 
   * @param request
   */
  virtual void createUserToken(CreateUserTokenResponse& _return, const CreateUserTokenRequest& request) = 0;

  /**
   * Create an Application Token, used to represent an Application or Computer.
   * 
   * @param request
   */
  virtual void createApplicationToken(CreateApplicationTokenResponse& _return, const CreateApplicationTokenRequest& request) = 0;
};

class AuthenticationServiceIfFactory {
 public:
  typedef AuthenticationServiceIf Handler;

  virtual ~AuthenticationServiceIfFactory() {}

  virtual AuthenticationServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AuthenticationServiceIf* /* handler */) = 0;
};

class AuthenticationServiceIfSingletonFactory : virtual public AuthenticationServiceIfFactory {
 public:
  AuthenticationServiceIfSingletonFactory(const boost::shared_ptr<AuthenticationServiceIf>& iface) : iface_(iface) {}
  virtual ~AuthenticationServiceIfSingletonFactory() {}

  virtual AuthenticationServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AuthenticationServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<AuthenticationServiceIf> iface_;
};

class AuthenticationServiceNull : virtual public AuthenticationServiceIf {
 public:
  virtual ~AuthenticationServiceNull() {}
  double getApiVersion() {
    double _return = (double)0;
    return _return;
  }
  void createUserToken(CreateUserTokenResponse& /* _return */, const CreateUserTokenRequest& /* request */) {
    return;
  }
  void createApplicationToken(CreateApplicationTokenResponse& /* _return */, const CreateApplicationTokenRequest& /* request */) {
    return;
  }
};


class AuthenticationService_getApiVersion_args {
 public:

  AuthenticationService_getApiVersion_args(const AuthenticationService_getApiVersion_args&);
  AuthenticationService_getApiVersion_args& operator=(const AuthenticationService_getApiVersion_args&);
  AuthenticationService_getApiVersion_args() {
  }

  virtual ~AuthenticationService_getApiVersion_args() throw();

  bool operator == (const AuthenticationService_getApiVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AuthenticationService_getApiVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthenticationService_getApiVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AuthenticationService_getApiVersion_pargs {
 public:


  virtual ~AuthenticationService_getApiVersion_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthenticationService_getApiVersion_result__isset {
  _AuthenticationService_getApiVersion_result__isset() : success(false) {}
  bool success :1;
} _AuthenticationService_getApiVersion_result__isset;

class AuthenticationService_getApiVersion_result {
 public:

  AuthenticationService_getApiVersion_result(const AuthenticationService_getApiVersion_result&);
  AuthenticationService_getApiVersion_result& operator=(const AuthenticationService_getApiVersion_result&);
  AuthenticationService_getApiVersion_result() : success(0) {
  }

  virtual ~AuthenticationService_getApiVersion_result() throw();
  double success;

  _AuthenticationService_getApiVersion_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const AuthenticationService_getApiVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AuthenticationService_getApiVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthenticationService_getApiVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthenticationService_getApiVersion_presult__isset {
  _AuthenticationService_getApiVersion_presult__isset() : success(false) {}
  bool success :1;
} _AuthenticationService_getApiVersion_presult__isset;

class AuthenticationService_getApiVersion_presult {
 public:


  virtual ~AuthenticationService_getApiVersion_presult() throw();
  double* success;

  _AuthenticationService_getApiVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AuthenticationService_createUserToken_args__isset {
  _AuthenticationService_createUserToken_args__isset() : request(false) {}
  bool request :1;
} _AuthenticationService_createUserToken_args__isset;

class AuthenticationService_createUserToken_args {
 public:

  AuthenticationService_createUserToken_args(const AuthenticationService_createUserToken_args&);
  AuthenticationService_createUserToken_args& operator=(const AuthenticationService_createUserToken_args&);
  AuthenticationService_createUserToken_args() {
  }

  virtual ~AuthenticationService_createUserToken_args() throw();
  CreateUserTokenRequest request;

  _AuthenticationService_createUserToken_args__isset __isset;

  void __set_request(const CreateUserTokenRequest& val);

  bool operator == (const AuthenticationService_createUserToken_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const AuthenticationService_createUserToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthenticationService_createUserToken_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AuthenticationService_createUserToken_pargs {
 public:


  virtual ~AuthenticationService_createUserToken_pargs() throw();
  const CreateUserTokenRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthenticationService_createUserToken_result__isset {
  _AuthenticationService_createUserToken_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _AuthenticationService_createUserToken_result__isset;

class AuthenticationService_createUserToken_result {
 public:

  AuthenticationService_createUserToken_result(const AuthenticationService_createUserToken_result&);
  AuthenticationService_createUserToken_result& operator=(const AuthenticationService_createUserToken_result&);
  AuthenticationService_createUserToken_result() {
  }

  virtual ~AuthenticationService_createUserToken_result() throw();
  CreateUserTokenResponse success;
  OperationFailedException ex;

  _AuthenticationService_createUserToken_result__isset __isset;

  void __set_success(const CreateUserTokenResponse& val);

  void __set_ex(const OperationFailedException& val);

  bool operator == (const AuthenticationService_createUserToken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const AuthenticationService_createUserToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthenticationService_createUserToken_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthenticationService_createUserToken_presult__isset {
  _AuthenticationService_createUserToken_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _AuthenticationService_createUserToken_presult__isset;

class AuthenticationService_createUserToken_presult {
 public:


  virtual ~AuthenticationService_createUserToken_presult() throw();
  CreateUserTokenResponse* success;
  OperationFailedException* ex;

  _AuthenticationService_createUserToken_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AuthenticationService_createApplicationToken_args__isset {
  _AuthenticationService_createApplicationToken_args__isset() : request(false) {}
  bool request :1;
} _AuthenticationService_createApplicationToken_args__isset;

class AuthenticationService_createApplicationToken_args {
 public:

  AuthenticationService_createApplicationToken_args(const AuthenticationService_createApplicationToken_args&);
  AuthenticationService_createApplicationToken_args& operator=(const AuthenticationService_createApplicationToken_args&);
  AuthenticationService_createApplicationToken_args() {
  }

  virtual ~AuthenticationService_createApplicationToken_args() throw();
  CreateApplicationTokenRequest request;

  _AuthenticationService_createApplicationToken_args__isset __isset;

  void __set_request(const CreateApplicationTokenRequest& val);

  bool operator == (const AuthenticationService_createApplicationToken_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const AuthenticationService_createApplicationToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthenticationService_createApplicationToken_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AuthenticationService_createApplicationToken_pargs {
 public:


  virtual ~AuthenticationService_createApplicationToken_pargs() throw();
  const CreateApplicationTokenRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthenticationService_createApplicationToken_result__isset {
  _AuthenticationService_createApplicationToken_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _AuthenticationService_createApplicationToken_result__isset;

class AuthenticationService_createApplicationToken_result {
 public:

  AuthenticationService_createApplicationToken_result(const AuthenticationService_createApplicationToken_result&);
  AuthenticationService_createApplicationToken_result& operator=(const AuthenticationService_createApplicationToken_result&);
  AuthenticationService_createApplicationToken_result() {
  }

  virtual ~AuthenticationService_createApplicationToken_result() throw();
  CreateApplicationTokenResponse success;
  OperationFailedException ex;

  _AuthenticationService_createApplicationToken_result__isset __isset;

  void __set_success(const CreateApplicationTokenResponse& val);

  void __set_ex(const OperationFailedException& val);

  bool operator == (const AuthenticationService_createApplicationToken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const AuthenticationService_createApplicationToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthenticationService_createApplicationToken_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthenticationService_createApplicationToken_presult__isset {
  _AuthenticationService_createApplicationToken_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _AuthenticationService_createApplicationToken_presult__isset;

class AuthenticationService_createApplicationToken_presult {
 public:


  virtual ~AuthenticationService_createApplicationToken_presult() throw();
  CreateApplicationTokenResponse* success;
  OperationFailedException* ex;

  _AuthenticationService_createApplicationToken_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AuthenticationServiceClient : virtual public AuthenticationServiceIf {
 public:
  AuthenticationServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AuthenticationServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  double getApiVersion();
  void send_getApiVersion();
  double recv_getApiVersion();
  void createUserToken(CreateUserTokenResponse& _return, const CreateUserTokenRequest& request);
  void send_createUserToken(const CreateUserTokenRequest& request);
  void recv_createUserToken(CreateUserTokenResponse& _return);
  void createApplicationToken(CreateApplicationTokenResponse& _return, const CreateApplicationTokenRequest& request);
  void send_createApplicationToken(const CreateApplicationTokenRequest& request);
  void recv_createApplicationToken(CreateApplicationTokenResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AuthenticationServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AuthenticationServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AuthenticationServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getApiVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createUserToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createApplicationToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AuthenticationServiceProcessor(boost::shared_ptr<AuthenticationServiceIf> iface) :
    iface_(iface) {
    processMap_["getApiVersion"] = &AuthenticationServiceProcessor::process_getApiVersion;
    processMap_["createUserToken"] = &AuthenticationServiceProcessor::process_createUserToken;
    processMap_["createApplicationToken"] = &AuthenticationServiceProcessor::process_createApplicationToken;
  }

  virtual ~AuthenticationServiceProcessor() {}
};

class AuthenticationServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AuthenticationServiceProcessorFactory(const ::boost::shared_ptr< AuthenticationServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AuthenticationServiceIfFactory > handlerFactory_;
};

class AuthenticationServiceMultiface : virtual public AuthenticationServiceIf {
 public:
  AuthenticationServiceMultiface(std::vector<boost::shared_ptr<AuthenticationServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AuthenticationServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AuthenticationServiceIf> > ifaces_;
  AuthenticationServiceMultiface() {}
  void add(boost::shared_ptr<AuthenticationServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  double getApiVersion() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getApiVersion();
    }
    return ifaces_[i]->getApiVersion();
  }

  void createUserToken(CreateUserTokenResponse& _return, const CreateUserTokenRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createUserToken(_return, request);
    }
    ifaces_[i]->createUserToken(_return, request);
    return;
  }

  void createApplicationToken(CreateApplicationTokenResponse& _return, const CreateApplicationTokenRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createApplicationToken(_return, request);
    }
    ifaces_[i]->createApplicationToken(_return, request);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class AuthenticationServiceConcurrentClient : virtual public AuthenticationServiceIf {
 public:
  AuthenticationServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AuthenticationServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  double getApiVersion();
  int32_t send_getApiVersion();
  double recv_getApiVersion(const int32_t seqid);
  void createUserToken(CreateUserTokenResponse& _return, const CreateUserTokenRequest& request);
  int32_t send_createUserToken(const CreateUserTokenRequest& request);
  void recv_createUserToken(CreateUserTokenResponse& _return, const int32_t seqid);
  void createApplicationToken(CreateApplicationTokenResponse& _return, const CreateApplicationTokenRequest& request);
  int32_t send_createApplicationToken(const CreateApplicationTokenRequest& request);
  void recv_createApplicationToken(CreateApplicationTokenResponse& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}}}}} // namespace

#endif
