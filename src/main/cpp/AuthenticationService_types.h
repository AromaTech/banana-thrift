/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AuthenticationService_TYPES_H
#define AuthenticationService_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "Authentication_types.h"
#include "Banana_types.h"
#include "Endpoint_types.h"
#include "Exceptions_types.h"


namespace aroma { namespace banana { namespace thrift { namespace authentication { namespace service {

typedef  ::aroma::banana::thrift::int int;

typedef  ::aroma::banana::thrift::long long;

typedef  ::aroma::banana::thrift::timestamp timestamp;

typedef class  ::aroma::banana::thrift::authentication::ApplicationToken ApplicationToken;

typedef class  ::aroma::banana::thrift::authentication::UserToken UserToken;

typedef class  ::aroma::banana::thrift::exceptions::AccountAlreadyExistsException AccountAlreadyExistsException;

typedef class  ::aroma::banana::thrift::exceptions::InvalidArgumentException InvalidArgumentException;

typedef class  ::aroma::banana::thrift::exceptions::InvalidCredentialsException InvalidCredentialsException;

typedef class  ::aroma::banana::thrift::exceptions::OperationFailedException OperationFailedException;

typedef class  ::aroma::banana::thrift::exceptions::ApplicationAlreadyRegisteredException ApplicationAlreadyRegisteredException;

typedef class  ::aroma::banana::thrift::exceptions::ApplicationDoesNotExistException ApplicationDoesNotExistException;

typedef class  ::aroma::banana::thrift::exceptions::CustomChannelUnreachableException CustomChannelUnreachableException;

typedef class  ::aroma::banana::thrift::exceptions::ChannelDoesNotExistException ChannelDoesNotExistException;

typedef class  ::aroma::banana::thrift::exceptions::UnauthorizedException UnauthorizedException;

class VerifyUserTokenRequest;

class VerifyUserTokenResponse;

class VerifyApplicationTokenRequest;

class VerifyApplicationTokenResponse;

typedef struct _VerifyUserTokenRequest__isset {
  _VerifyUserTokenRequest__isset() : token(false) {}
  bool token :1;
} _VerifyUserTokenRequest__isset;

class VerifyUserTokenRequest {
 public:

  VerifyUserTokenRequest(const VerifyUserTokenRequest&);
  VerifyUserTokenRequest& operator=(const VerifyUserTokenRequest&);
  VerifyUserTokenRequest() {
  }

  virtual ~VerifyUserTokenRequest() throw();
  UserToken token;

  _VerifyUserTokenRequest__isset __isset;

  void __set_token(const UserToken& val);

  bool operator == (const VerifyUserTokenRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const VerifyUserTokenRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VerifyUserTokenRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(VerifyUserTokenRequest &a, VerifyUserTokenRequest &b);

inline std::ostream& operator<<(std::ostream& out, const VerifyUserTokenRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _VerifyUserTokenResponse__isset {
  _VerifyUserTokenResponse__isset() : message(false) {}
  bool message :1;
} _VerifyUserTokenResponse__isset;

class VerifyUserTokenResponse {
 public:

  VerifyUserTokenResponse(const VerifyUserTokenResponse&);
  VerifyUserTokenResponse& operator=(const VerifyUserTokenResponse&);
  VerifyUserTokenResponse() : message() {
  }

  virtual ~VerifyUserTokenResponse() throw();
  std::string message;

  _VerifyUserTokenResponse__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const VerifyUserTokenResponse & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const VerifyUserTokenResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VerifyUserTokenResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(VerifyUserTokenResponse &a, VerifyUserTokenResponse &b);

inline std::ostream& operator<<(std::ostream& out, const VerifyUserTokenResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _VerifyApplicationTokenRequest__isset {
  _VerifyApplicationTokenRequest__isset() : token(false) {}
  bool token :1;
} _VerifyApplicationTokenRequest__isset;

class VerifyApplicationTokenRequest {
 public:

  VerifyApplicationTokenRequest(const VerifyApplicationTokenRequest&);
  VerifyApplicationTokenRequest& operator=(const VerifyApplicationTokenRequest&);
  VerifyApplicationTokenRequest() {
  }

  virtual ~VerifyApplicationTokenRequest() throw();
  ApplicationToken token;

  _VerifyApplicationTokenRequest__isset __isset;

  void __set_token(const ApplicationToken& val);

  bool operator == (const VerifyApplicationTokenRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const VerifyApplicationTokenRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VerifyApplicationTokenRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(VerifyApplicationTokenRequest &a, VerifyApplicationTokenRequest &b);

inline std::ostream& operator<<(std::ostream& out, const VerifyApplicationTokenRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _VerifyApplicationTokenResponse__isset {
  _VerifyApplicationTokenResponse__isset() : message(false) {}
  bool message :1;
} _VerifyApplicationTokenResponse__isset;

class VerifyApplicationTokenResponse {
 public:

  VerifyApplicationTokenResponse(const VerifyApplicationTokenResponse&);
  VerifyApplicationTokenResponse& operator=(const VerifyApplicationTokenResponse&);
  VerifyApplicationTokenResponse() : message() {
  }

  virtual ~VerifyApplicationTokenResponse() throw();
  std::string message;

  _VerifyApplicationTokenResponse__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const VerifyApplicationTokenResponse & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const VerifyApplicationTokenResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VerifyApplicationTokenResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(VerifyApplicationTokenResponse &a, VerifyApplicationTokenResponse &b);

inline std::ostream& operator<<(std::ostream& out, const VerifyApplicationTokenResponse& obj)
{
  obj.printTo(out);
  return out;
}

}}}}} // namespace

#endif
