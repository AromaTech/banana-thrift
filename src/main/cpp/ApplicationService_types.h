/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ApplicationService_TYPES_H
#define ApplicationService_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "Authentication_types.h"
#include "Banana_types.h"
#include "Endpoint_types.h"
#include "Exceptions_types.h"


namespace aroma { namespace banana { namespace thrift { namespace application { namespace service {

typedef  ::aroma::banana::thrift::int int;

typedef  ::aroma::banana::thrift::long long;

typedef  ::aroma::banana::thrift::timestamp timestamp;

typedef class  ::aroma::banana::thrift::authentication::ApplicationToken ApplicationToken;

typedef class  ::aroma::banana::thrift::Application Application;

typedef  ::aroma::banana::thrift::Urgency::type Urgency;

typedef class  ::aroma::banana::thrift::exceptions::AccountAlreadyExistsException AccountAlreadyExistsException;

typedef class  ::aroma::banana::thrift::exceptions::InvalidArgumentException InvalidArgumentException;

typedef class  ::aroma::banana::thrift::exceptions::InvalidTokenException InvalidTokenException;

typedef class  ::aroma::banana::thrift::exceptions::OperationFailedException OperationFailedException;

typedef class  ::aroma::banana::thrift::exceptions::ApplicationAlreadyRegisteredException ApplicationAlreadyRegisteredException;

typedef class  ::aroma::banana::thrift::exceptions::ApplicationDoesNotExistException ApplicationDoesNotExistException;

typedef class  ::aroma::banana::thrift::exceptions::CustomChannelUnreachableException CustomChannelUnreachableException;

typedef class  ::aroma::banana::thrift::exceptions::ChannelDoesNotExistException ChannelDoesNotExistException;

typedef class  ::aroma::banana::thrift::exceptions::UnauthorizedException UnauthorizedException;

class SendMessageRequest;

class SendMessageResponse;

typedef struct _SendMessageRequest__isset {
  _SendMessageRequest__isset() : applicationToken(false), message(false), urgency(true) {}
  bool applicationToken :1;
  bool message :1;
  bool urgency :1;
} _SendMessageRequest__isset;

class SendMessageRequest {
 public:

  SendMessageRequest(const SendMessageRequest&);
  SendMessageRequest& operator=(const SendMessageRequest&);
  SendMessageRequest() : message(), urgency(( ::aroma::banana::thrift::Urgency::type)1) {
    urgency = ( ::aroma::banana::thrift::Urgency::type)1;

  }

  virtual ~SendMessageRequest() throw();
  ApplicationToken applicationToken;
  std::string message;
  Urgency urgency;

  _SendMessageRequest__isset __isset;

  void __set_applicationToken(const ApplicationToken& val);

  void __set_message(const std::string& val);

  void __set_urgency(const Urgency val);

  bool operator == (const SendMessageRequest & rhs) const
  {
    if (!(applicationToken == rhs.applicationToken))
      return false;
    if (!(message == rhs.message))
      return false;
    if (!(urgency == rhs.urgency))
      return false;
    return true;
  }
  bool operator != (const SendMessageRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SendMessageRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SendMessageRequest &a, SendMessageRequest &b);

inline std::ostream& operator<<(std::ostream& out, const SendMessageRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SendMessageResponse__isset {
  _SendMessageResponse__isset() : messageId(false) {}
  bool messageId :1;
} _SendMessageResponse__isset;

class SendMessageResponse {
 public:

  SendMessageResponse(const SendMessageResponse&);
  SendMessageResponse& operator=(const SendMessageResponse&);
  SendMessageResponse() : messageId() {
  }

  virtual ~SendMessageResponse() throw();
  std::string messageId;

  _SendMessageResponse__isset __isset;

  void __set_messageId(const std::string& val);

  bool operator == (const SendMessageResponse & rhs) const
  {
    if (!(messageId == rhs.messageId))
      return false;
    return true;
  }
  bool operator != (const SendMessageResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SendMessageResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SendMessageResponse &a, SendMessageResponse &b);

inline std::ostream& operator<<(std::ostream& out, const SendMessageResponse& obj)
{
  obj.printTo(out);
  return out;
}

}}}}} // namespace

#endif
