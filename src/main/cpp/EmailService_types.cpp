/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "EmailService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace aroma { namespace thrift { namespace email { namespace service {


SendEmailRequest::~SendEmailRequest() throw() {
}


void SendEmailRequest::__set_emailAddress(const std::string& val) {
  this->emailAddress = val;
}

void SendEmailRequest::__set_emailMessage(const EmailMessage& val) {
  this->emailMessage = val;
}

uint32_t SendEmailRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->emailAddress);
          this->__isset.emailAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->emailMessage.read(iprot);
          this->__isset.emailMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SendEmailRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SendEmailRequest");

  xfer += oprot->writeFieldBegin("emailAddress", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->emailAddress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("emailMessage", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->emailMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SendEmailRequest &a, SendEmailRequest &b) {
  using ::std::swap;
  swap(a.emailAddress, b.emailAddress);
  swap(a.emailMessage, b.emailMessage);
  swap(a.__isset, b.__isset);
}

SendEmailRequest::SendEmailRequest(const SendEmailRequest& other0) {
  emailAddress = other0.emailAddress;
  emailMessage = other0.emailMessage;
  __isset = other0.__isset;
}
SendEmailRequest& SendEmailRequest::operator=(const SendEmailRequest& other1) {
  emailAddress = other1.emailAddress;
  emailMessage = other1.emailMessage;
  __isset = other1.__isset;
  return *this;
}
void SendEmailRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SendEmailRequest(";
  out << "emailAddress=" << to_string(emailAddress);
  out << ", " << "emailMessage=" << to_string(emailMessage);
  out << ")";
}


SendEmailResponse::~SendEmailResponse() throw() {
}


uint32_t SendEmailResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SendEmailResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SendEmailResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SendEmailResponse &a, SendEmailResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

SendEmailResponse::SendEmailResponse(const SendEmailResponse& other2) {
  (void) other2;
}
SendEmailResponse& SendEmailResponse::operator=(const SendEmailResponse& other3) {
  (void) other3;
  return *this;
}
void SendEmailResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SendEmailResponse(";
  out << ")";
}

}}}} // namespace
