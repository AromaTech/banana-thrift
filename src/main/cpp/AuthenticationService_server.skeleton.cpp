// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "AuthenticationService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::aroma::thrift::authentication::service;

class AuthenticationServiceHandler : virtual public AuthenticationServiceIf {
 public:
  AuthenticationServiceHandler() {
    // Your initialization goes here
  }

  double getApiVersion() {
    // Your implementation goes here
    printf("getApiVersion\n");
  }

  /**
   * Create a Token, used to represent a User or an Application.
   * 
   * @param request
   */
  void createToken(CreateTokenResponse& _return, const CreateTokenRequest& request) {
    // Your implementation goes here
    printf("createToken\n");
  }

  /**
   * Get information about a Token.
   * 
   * @param request
   */
  void getTokenInfo(GetTokenInfoResponse& _return, const GetTokenInfoRequest& request) {
    // Your implementation goes here
    printf("getTokenInfo\n");
  }

  /**
   * Invalidates a Token and removes it from knowledge. Any subsequent references to the Token will produce
   * an InvalidTokenException.
   * 
   * @param request
   */
  void invalidateToken(InvalidateTokenResponse& _return, const InvalidateTokenRequest& request) {
    // Your implementation goes here
    printf("invalidateToken\n");
  }

  /**
   * Verify that a Token is valid, and optionally, that it belongs to the specified pwner.
   * 
   * @param request
   */
  void verifyToken(VerifyTokenResponse& _return, const VerifyTokenRequest& request) {
    // Your implementation goes here
    printf("verifyToken\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<AuthenticationServiceHandler> handler(new AuthenticationServiceHandler());
  shared_ptr<TProcessor> processor(new AuthenticationServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

