// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "AuthenticationService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::aroma::banana::thrift::authentication::service;

class AuthenticationServiceHandler : virtual public AuthenticationServiceIf {
 public:
  AuthenticationServiceHandler() {
    // Your initialization goes here
  }

  double getApiVersion() {
    // Your implementation goes here
    printf("getApiVersion\n");
  }

  /**
   * Create an Application Token, used to represent an Application or Computer.
   * 
   * @param request
   */
  void createApplicationToken(CreateApplicationTokenResponse& _return, const CreateApplicationTokenRequest& request) {
    // Your implementation goes here
    printf("createApplicationToken\n");
  }

  /**
   * Create a User Token, used to represent a Human.
   * 
   * @param request
   */
  void createUserToken(CreateUserTokenResponse& _return, const CreateUserTokenRequest& request) {
    // Your implementation goes here
    printf("createUserToken\n");
  }

  /**
   * Get information about an Application Token.
   * 
   * @param request
   */
  void getApplicationTokenInfo(GetApplicationTokenInfoResponse& _return, const GetApplicationTokenInfoRequest& request) {
    // Your implementation goes here
    printf("getApplicationTokenInfo\n");
  }

  /**
   * Get information about a User Token.
   * 
   * @param request
   */
  void getUserTokenInfo(GetUserTokenInfoResponse& _return, const GetUserTokenInfoRequest& request) {
    // Your implementation goes here
    printf("getUserTokenInfo\n");
  }

  /**
   * Invalidates a Token and removes it from knowledge. Any subsequent references to the Token will produce
   * an InvalidTokenException.
   * 
   * @param request
   */
  void invalidateApplicationToken(InvalidateApplicationTokenResponse& _return, const InvalidateApplicationTokenRequest& request) {
    // Your implementation goes here
    printf("invalidateApplicationToken\n");
  }

  /**
   * Invalidates a Token and removes it from knowledge. Any subsequent references to the Token will produce
   * an InvalidTokenException.
   * 
   * @param request
   */
  void invalidateUserToken(InvalidateUserTokenResponse& _return, const InvalidateUserTokenRequest& request) {
    // Your implementation goes here
    printf("invalidateUserToken\n");
  }

  /**
   * Verify that a Token is valid, and optionally, that it belongs to the specified application.
   * 
   * @param request
   */
  void verifyApplicationToken(VerifyApplicationTokenResponse& _return, const VerifyApplicationTokenRequest& request) {
    // Your implementation goes here
    printf("verifyApplicationToken\n");
  }

  /**
   * Verify that a Token is valid, and optionally, that it belongs to the specified user.
   * 
   * @param request
   */
  void verifyUserToken(VerifyUserTokenResponse& _return, const VerifyUserTokenRequest& request) {
    // Your implementation goes here
    printf("verifyUserToken\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<AuthenticationServiceHandler> handler(new AuthenticationServiceHandler());
  shared_ptr<TProcessor> processor(new AuthenticationServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

