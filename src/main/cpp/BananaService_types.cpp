/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "BananaService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace aroma { namespace banana { namespace thrift { namespace service {


SignInRequest::~SignInRequest() throw() {
}


void SignInRequest::__set_oathToken(const  ::aroma::banana::thrift::authentication::OauthToken& val) {
  this->oathToken = val;
}

void SignInRequest::__set_username(const std::string& val) {
  this->username = val;
}

uint32_t SignInRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->oathToken.read(iprot);
          this->__isset.oathToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SignInRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SignInRequest");

  xfer += oprot->writeFieldBegin("oathToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->oathToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SignInRequest &a, SignInRequest &b) {
  using ::std::swap;
  swap(a.oathToken, b.oathToken);
  swap(a.username, b.username);
  swap(a.__isset, b.__isset);
}

SignInRequest::SignInRequest(const SignInRequest& other0) {
  oathToken = other0.oathToken;
  username = other0.username;
  __isset = other0.__isset;
}
SignInRequest& SignInRequest::operator=(const SignInRequest& other1) {
  oathToken = other1.oathToken;
  username = other1.username;
  __isset = other1.__isset;
  return *this;
}
void SignInRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SignInRequest(";
  out << "oathToken=" << to_string(oathToken);
  out << ", " << "username=" << to_string(username);
  out << ")";
}


SignInResponse::~SignInResponse() throw() {
}


void SignInResponse::__set_developerToken(const DeveloperToken& val) {
  this->developerToken = val;
}

uint32_t SignInResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->developerToken.read(iprot);
          this->__isset.developerToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SignInResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SignInResponse");

  xfer += oprot->writeFieldBegin("developerToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->developerToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SignInResponse &a, SignInResponse &b) {
  using ::std::swap;
  swap(a.developerToken, b.developerToken);
  swap(a.__isset, b.__isset);
}

SignInResponse::SignInResponse(const SignInResponse& other2) {
  developerToken = other2.developerToken;
  __isset = other2.__isset;
}
SignInResponse& SignInResponse::operator=(const SignInResponse& other3) {
  developerToken = other3.developerToken;
  __isset = other3.__isset;
  return *this;
}
void SignInResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SignInResponse(";
  out << "developerToken=" << to_string(developerToken);
  out << ")";
}


ProvisionServiceRequest::~ProvisionServiceRequest() throw() {
}


void ProvisionServiceRequest::__set_token(const std::string& val) {
  this->token = val;
}

void ProvisionServiceRequest::__set_serviceName(const std::string& val) {
  this->serviceName = val;
}

void ProvisionServiceRequest::__set_programmingLanguage(const std::string& val) {
  this->programmingLanguage = val;
__isset.programmingLanguage = true;
}

void ProvisionServiceRequest::__set_organization(const std::string& val) {
  this->organization = val;
}

void ProvisionServiceRequest::__set_icon(const Image& val) {
  this->icon = val;
__isset.icon = true;
}

void ProvisionServiceRequest::__set_developerToken(const DeveloperToken& val) {
  this->developerToken = val;
}

uint32_t ProvisionServiceRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->token);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serviceName);
          this->__isset.serviceName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->programmingLanguage);
          this->__isset.programmingLanguage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organization);
          this->__isset.organization = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->icon.read(iprot);
          this->__isset.icon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->developerToken.read(iprot);
          this->__isset.developerToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvisionServiceRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProvisionServiceRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->serviceName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.programmingLanguage) {
    xfer += oprot->writeFieldBegin("programmingLanguage", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->programmingLanguage);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("organization", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->organization);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.icon) {
    xfer += oprot->writeFieldBegin("icon", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->icon.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("developerToken", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->developerToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProvisionServiceRequest &a, ProvisionServiceRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.serviceName, b.serviceName);
  swap(a.programmingLanguage, b.programmingLanguage);
  swap(a.organization, b.organization);
  swap(a.icon, b.icon);
  swap(a.developerToken, b.developerToken);
  swap(a.__isset, b.__isset);
}

ProvisionServiceRequest::ProvisionServiceRequest(const ProvisionServiceRequest& other4) {
  token = other4.token;
  serviceName = other4.serviceName;
  programmingLanguage = other4.programmingLanguage;
  organization = other4.organization;
  icon = other4.icon;
  developerToken = other4.developerToken;
  __isset = other4.__isset;
}
ProvisionServiceRequest& ProvisionServiceRequest::operator=(const ProvisionServiceRequest& other5) {
  token = other5.token;
  serviceName = other5.serviceName;
  programmingLanguage = other5.programmingLanguage;
  organization = other5.organization;
  icon = other5.icon;
  developerToken = other5.developerToken;
  __isset = other5.__isset;
  return *this;
}
void ProvisionServiceRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProvisionServiceRequest(";
  out << "token=" << to_string(token);
  out << ", " << "serviceName=" << to_string(serviceName);
  out << ", " << "programmingLanguage="; (__isset.programmingLanguage ? (out << to_string(programmingLanguage)) : (out << "<null>"));
  out << ", " << "organization=" << to_string(organization);
  out << ", " << "icon="; (__isset.icon ? (out << to_string(icon)) : (out << "<null>"));
  out << ", " << "developerToken=" << to_string(developerToken);
  out << ")";
}


ProvisionServiceResponse::~ProvisionServiceResponse() throw() {
}


void ProvisionServiceResponse::__set_bananaToken(const std::string& val) {
  this->bananaToken = val;
}

void ProvisionServiceResponse::__set_serviceName(const std::string& val) {
  this->serviceName = val;
}

void ProvisionServiceResponse::__set_serviceToken(const ServiceToken& val) {
  this->serviceToken = val;
}

uint32_t ProvisionServiceResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bananaToken);
          this->__isset.bananaToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serviceName);
          this->__isset.serviceName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->serviceToken.read(iprot);
          this->__isset.serviceToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvisionServiceResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProvisionServiceResponse");

  xfer += oprot->writeFieldBegin("bananaToken", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->bananaToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->serviceName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceToken", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->serviceToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProvisionServiceResponse &a, ProvisionServiceResponse &b) {
  using ::std::swap;
  swap(a.bananaToken, b.bananaToken);
  swap(a.serviceName, b.serviceName);
  swap(a.serviceToken, b.serviceToken);
  swap(a.__isset, b.__isset);
}

ProvisionServiceResponse::ProvisionServiceResponse(const ProvisionServiceResponse& other6) {
  bananaToken = other6.bananaToken;
  serviceName = other6.serviceName;
  serviceToken = other6.serviceToken;
  __isset = other6.__isset;
}
ProvisionServiceResponse& ProvisionServiceResponse::operator=(const ProvisionServiceResponse& other7) {
  bananaToken = other7.bananaToken;
  serviceName = other7.serviceName;
  serviceToken = other7.serviceToken;
  __isset = other7.__isset;
  return *this;
}
void ProvisionServiceResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProvisionServiceResponse(";
  out << "bananaToken=" << to_string(bananaToken);
  out << ", " << "serviceName=" << to_string(serviceName);
  out << ", " << "serviceToken=" << to_string(serviceToken);
  out << ")";
}


SubscribeToServiceRequest::~SubscribeToServiceRequest() throw() {
}


void SubscribeToServiceRequest::__set_token(const std::string& val) {
  this->token = val;
}

void SubscribeToServiceRequest::__set_serviceName(const std::string& val) {
  this->serviceName = val;
}

void SubscribeToServiceRequest::__set_organization(const std::string& val) {
  this->organization = val;
__isset.organization = true;
}

void SubscribeToServiceRequest::__set_shared(const bool val) {
  this->shared = val;
__isset.shared = true;
}

void SubscribeToServiceRequest::__set_developerToken(const DeveloperToken& val) {
  this->developerToken = val;
}

uint32_t SubscribeToServiceRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->token);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serviceName);
          this->__isset.serviceName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organization);
          this->__isset.organization = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->shared);
          this->__isset.shared = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->developerToken.read(iprot);
          this->__isset.developerToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SubscribeToServiceRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SubscribeToServiceRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->serviceName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.organization) {
    xfer += oprot->writeFieldBegin("organization", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->organization);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.shared) {
    xfer += oprot->writeFieldBegin("shared", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->shared);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("developerToken", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->developerToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SubscribeToServiceRequest &a, SubscribeToServiceRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.serviceName, b.serviceName);
  swap(a.organization, b.organization);
  swap(a.shared, b.shared);
  swap(a.developerToken, b.developerToken);
  swap(a.__isset, b.__isset);
}

SubscribeToServiceRequest::SubscribeToServiceRequest(const SubscribeToServiceRequest& other8) {
  token = other8.token;
  serviceName = other8.serviceName;
  organization = other8.organization;
  shared = other8.shared;
  developerToken = other8.developerToken;
  __isset = other8.__isset;
}
SubscribeToServiceRequest& SubscribeToServiceRequest::operator=(const SubscribeToServiceRequest& other9) {
  token = other9.token;
  serviceName = other9.serviceName;
  organization = other9.organization;
  shared = other9.shared;
  developerToken = other9.developerToken;
  __isset = other9.__isset;
  return *this;
}
void SubscribeToServiceRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SubscribeToServiceRequest(";
  out << "token=" << to_string(token);
  out << ", " << "serviceName=" << to_string(serviceName);
  out << ", " << "organization="; (__isset.organization ? (out << to_string(organization)) : (out << "<null>"));
  out << ", " << "shared="; (__isset.shared ? (out << to_string(shared)) : (out << "<null>"));
  out << ", " << "developerToken=" << to_string(developerToken);
  out << ")";
}


SubscribeToServiceResponse::~SubscribeToServiceResponse() throw() {
}


void SubscribeToServiceResponse::__set_message(const std::string& val) {
  this->message = val;
}

void SubscribeToServiceResponse::__set_channel(const BananaChannel& val) {
  this->channel = val;
}

uint32_t SubscribeToServiceResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->channel.read(iprot);
          this->__isset.channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SubscribeToServiceResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SubscribeToServiceResponse");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->channel.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SubscribeToServiceResponse &a, SubscribeToServiceResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.channel, b.channel);
  swap(a.__isset, b.__isset);
}

SubscribeToServiceResponse::SubscribeToServiceResponse(const SubscribeToServiceResponse& other10) {
  message = other10.message;
  channel = other10.channel;
  __isset = other10.__isset;
}
SubscribeToServiceResponse& SubscribeToServiceResponse::operator=(const SubscribeToServiceResponse& other11) {
  message = other11.message;
  channel = other11.channel;
  __isset = other11.__isset;
  return *this;
}
void SubscribeToServiceResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SubscribeToServiceResponse(";
  out << "message=" << to_string(message);
  out << ", " << "channel=" << to_string(channel);
  out << ")";
}


RegisterHealthCheckRequest::~RegisterHealthCheckRequest() throw() {
}


void RegisterHealthCheckRequest::__set_endpoint(const Endpoint& val) {
  this->endpoint = val;
}

void RegisterHealthCheckRequest::__set_developerToken(const DeveloperToken& val) {
  this->developerToken = val;
}

uint32_t RegisterHealthCheckRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->endpoint.read(iprot);
          this->__isset.endpoint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->developerToken.read(iprot);
          this->__isset.developerToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RegisterHealthCheckRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RegisterHealthCheckRequest");

  xfer += oprot->writeFieldBegin("endpoint", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->endpoint.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("developerToken", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->developerToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RegisterHealthCheckRequest &a, RegisterHealthCheckRequest &b) {
  using ::std::swap;
  swap(a.endpoint, b.endpoint);
  swap(a.developerToken, b.developerToken);
  swap(a.__isset, b.__isset);
}

RegisterHealthCheckRequest::RegisterHealthCheckRequest(const RegisterHealthCheckRequest& other12) {
  endpoint = other12.endpoint;
  developerToken = other12.developerToken;
  __isset = other12.__isset;
}
RegisterHealthCheckRequest& RegisterHealthCheckRequest::operator=(const RegisterHealthCheckRequest& other13) {
  endpoint = other13.endpoint;
  developerToken = other13.developerToken;
  __isset = other13.__isset;
  return *this;
}
void RegisterHealthCheckRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RegisterHealthCheckRequest(";
  out << "endpoint=" << to_string(endpoint);
  out << ", " << "developerToken=" << to_string(developerToken);
  out << ")";
}


RegisterHealthCheckResponse::~RegisterHealthCheckResponse() throw() {
}


void RegisterHealthCheckResponse::__set_message(const std::string& val) {
  this->message = val;
__isset.message = true;
}

uint32_t RegisterHealthCheckResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RegisterHealthCheckResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RegisterHealthCheckResponse");

  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->message);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RegisterHealthCheckResponse &a, RegisterHealthCheckResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

RegisterHealthCheckResponse::RegisterHealthCheckResponse(const RegisterHealthCheckResponse& other14) {
  message = other14.message;
  __isset = other14.__isset;
}
RegisterHealthCheckResponse& RegisterHealthCheckResponse::operator=(const RegisterHealthCheckResponse& other15) {
  message = other15.message;
  __isset = other15.__isset;
  return *this;
}
void RegisterHealthCheckResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RegisterHealthCheckResponse(";
  out << "message="; (__isset.message ? (out << to_string(message)) : (out << "<null>"));
  out << ")";
}


RenewServiceTokenRequest::~RenewServiceTokenRequest() throw() {
}


void RenewServiceTokenRequest::__set_serviceToken(const ServiceToken& val) {
  this->serviceToken = val;
}

void RenewServiceTokenRequest::__set_timePeriod(const  ::aroma::banana::thrift::TimePeriod& val) {
  this->timePeriod = val;
}

void RenewServiceTokenRequest::__set_developerToken(const DeveloperToken& val) {
  this->developerToken = val;
}

uint32_t RenewServiceTokenRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->serviceToken.read(iprot);
          this->__isset.serviceToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->timePeriod.read(iprot);
          this->__isset.timePeriod = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->developerToken.read(iprot);
          this->__isset.developerToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RenewServiceTokenRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RenewServiceTokenRequest");

  xfer += oprot->writeFieldBegin("serviceToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->serviceToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timePeriod", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->timePeriod.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("developerToken", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->developerToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RenewServiceTokenRequest &a, RenewServiceTokenRequest &b) {
  using ::std::swap;
  swap(a.serviceToken, b.serviceToken);
  swap(a.timePeriod, b.timePeriod);
  swap(a.developerToken, b.developerToken);
  swap(a.__isset, b.__isset);
}

RenewServiceTokenRequest::RenewServiceTokenRequest(const RenewServiceTokenRequest& other16) {
  serviceToken = other16.serviceToken;
  timePeriod = other16.timePeriod;
  developerToken = other16.developerToken;
  __isset = other16.__isset;
}
RenewServiceTokenRequest& RenewServiceTokenRequest::operator=(const RenewServiceTokenRequest& other17) {
  serviceToken = other17.serviceToken;
  timePeriod = other17.timePeriod;
  developerToken = other17.developerToken;
  __isset = other17.__isset;
  return *this;
}
void RenewServiceTokenRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RenewServiceTokenRequest(";
  out << "serviceToken=" << to_string(serviceToken);
  out << ", " << "timePeriod=" << to_string(timePeriod);
  out << ", " << "developerToken=" << to_string(developerToken);
  out << ")";
}


RenewServiceTokenResponse::~RenewServiceTokenResponse() throw() {
}


void RenewServiceTokenResponse::__set_serviceToken(const ServiceToken& val) {
  this->serviceToken = val;
}

uint32_t RenewServiceTokenResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->serviceToken.read(iprot);
          this->__isset.serviceToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RenewServiceTokenResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RenewServiceTokenResponse");

  xfer += oprot->writeFieldBegin("serviceToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->serviceToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RenewServiceTokenResponse &a, RenewServiceTokenResponse &b) {
  using ::std::swap;
  swap(a.serviceToken, b.serviceToken);
  swap(a.__isset, b.__isset);
}

RenewServiceTokenResponse::RenewServiceTokenResponse(const RenewServiceTokenResponse& other18) {
  serviceToken = other18.serviceToken;
  __isset = other18.__isset;
}
RenewServiceTokenResponse& RenewServiceTokenResponse::operator=(const RenewServiceTokenResponse& other19) {
  serviceToken = other19.serviceToken;
  __isset = other19.__isset;
  return *this;
}
void RenewServiceTokenResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RenewServiceTokenResponse(";
  out << "serviceToken=" << to_string(serviceToken);
  out << ")";
}


RegenerateTokenRequest::~RegenerateTokenRequest() throw() {
}


void RegenerateTokenRequest::__set_serviceId(const std::string& val) {
  this->serviceId = val;
}

void RegenerateTokenRequest::__set_developerToken(const DeveloperToken& val) {
  this->developerToken = val;
}

uint32_t RegenerateTokenRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serviceId);
          this->__isset.serviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->developerToken.read(iprot);
          this->__isset.developerToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RegenerateTokenRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RegenerateTokenRequest");

  xfer += oprot->writeFieldBegin("serviceId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->serviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("developerToken", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->developerToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RegenerateTokenRequest &a, RegenerateTokenRequest &b) {
  using ::std::swap;
  swap(a.serviceId, b.serviceId);
  swap(a.developerToken, b.developerToken);
  swap(a.__isset, b.__isset);
}

RegenerateTokenRequest::RegenerateTokenRequest(const RegenerateTokenRequest& other20) {
  serviceId = other20.serviceId;
  developerToken = other20.developerToken;
  __isset = other20.__isset;
}
RegenerateTokenRequest& RegenerateTokenRequest::operator=(const RegenerateTokenRequest& other21) {
  serviceId = other21.serviceId;
  developerToken = other21.developerToken;
  __isset = other21.__isset;
  return *this;
}
void RegenerateTokenRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RegenerateTokenRequest(";
  out << "serviceId=" << to_string(serviceId);
  out << ", " << "developerToken=" << to_string(developerToken);
  out << ")";
}


RegenerateTokenResponse::~RegenerateTokenResponse() throw() {
}


void RegenerateTokenResponse::__set_serviceToken(const ServiceToken& val) {
  this->serviceToken = val;
}

uint32_t RegenerateTokenResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->serviceToken.read(iprot);
          this->__isset.serviceToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RegenerateTokenResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RegenerateTokenResponse");

  xfer += oprot->writeFieldBegin("serviceToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->serviceToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RegenerateTokenResponse &a, RegenerateTokenResponse &b) {
  using ::std::swap;
  swap(a.serviceToken, b.serviceToken);
  swap(a.__isset, b.__isset);
}

RegenerateTokenResponse::RegenerateTokenResponse(const RegenerateTokenResponse& other22) {
  serviceToken = other22.serviceToken;
  __isset = other22.__isset;
}
RegenerateTokenResponse& RegenerateTokenResponse::operator=(const RegenerateTokenResponse& other23) {
  serviceToken = other23.serviceToken;
  __isset = other23.__isset;
  return *this;
}
void RegenerateTokenResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RegenerateTokenResponse(";
  out << "serviceToken=" << to_string(serviceToken);
  out << ")";
}


DeleteMessageRequest::~DeleteMessageRequest() throw() {
}


void DeleteMessageRequest::__set_developerToken(const DeveloperToken& val) {
  this->developerToken = val;
}

void DeleteMessageRequest::__set_messageId(const std::string& val) {
  this->messageId = val;
}

void DeleteMessageRequest::__set_serviceId(const std::string& val) {
  this->serviceId = val;
}

void DeleteMessageRequest::__set_messageIds(const std::vector<std::string> & val) {
  this->messageIds = val;
__isset.messageIds = true;
}

uint32_t DeleteMessageRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->developerToken.read(iprot);
          this->__isset.developerToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serviceId);
          this->__isset.serviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->messageIds.clear();
            uint32_t _size24;
            ::apache::thrift::protocol::TType _etype27;
            xfer += iprot->readListBegin(_etype27, _size24);
            this->messageIds.resize(_size24);
            uint32_t _i28;
            for (_i28 = 0; _i28 < _size24; ++_i28)
            {
              xfer += iprot->readString(this->messageIds[_i28]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.messageIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteMessageRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeleteMessageRequest");

  xfer += oprot->writeFieldBegin("developerToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->developerToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->messageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->serviceId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.messageIds) {
    xfer += oprot->writeFieldBegin("messageIds", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->messageIds.size()));
      std::vector<std::string> ::const_iterator _iter29;
      for (_iter29 = this->messageIds.begin(); _iter29 != this->messageIds.end(); ++_iter29)
      {
        xfer += oprot->writeString((*_iter29));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteMessageRequest &a, DeleteMessageRequest &b) {
  using ::std::swap;
  swap(a.developerToken, b.developerToken);
  swap(a.messageId, b.messageId);
  swap(a.serviceId, b.serviceId);
  swap(a.messageIds, b.messageIds);
  swap(a.__isset, b.__isset);
}

DeleteMessageRequest::DeleteMessageRequest(const DeleteMessageRequest& other30) {
  developerToken = other30.developerToken;
  messageId = other30.messageId;
  serviceId = other30.serviceId;
  messageIds = other30.messageIds;
  __isset = other30.__isset;
}
DeleteMessageRequest& DeleteMessageRequest::operator=(const DeleteMessageRequest& other31) {
  developerToken = other31.developerToken;
  messageId = other31.messageId;
  serviceId = other31.serviceId;
  messageIds = other31.messageIds;
  __isset = other31.__isset;
  return *this;
}
void DeleteMessageRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeleteMessageRequest(";
  out << "developerToken=" << to_string(developerToken);
  out << ", " << "messageId=" << to_string(messageId);
  out << ", " << "serviceId=" << to_string(serviceId);
  out << ", " << "messageIds="; (__isset.messageIds ? (out << to_string(messageIds)) : (out << "<null>"));
  out << ")";
}


DeleteMessageResponse::~DeleteMessageResponse() throw() {
}


uint32_t DeleteMessageResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteMessageResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeleteMessageResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteMessageResponse &a, DeleteMessageResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

DeleteMessageResponse::DeleteMessageResponse(const DeleteMessageResponse& other32) {
  (void) other32;
}
DeleteMessageResponse& DeleteMessageResponse::operator=(const DeleteMessageResponse& other33) {
  (void) other33;
  return *this;
}
void DeleteMessageResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeleteMessageResponse(";
  out << ")";
}


DeleteAllMessagesRequest::~DeleteAllMessagesRequest() throw() {
}


void DeleteAllMessagesRequest::__set_developerToken(const DeveloperToken& val) {
  this->developerToken = val;
}

void DeleteAllMessagesRequest::__set_serviceId(const std::string& val) {
  this->serviceId = val;
}

uint32_t DeleteAllMessagesRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->developerToken.read(iprot);
          this->__isset.developerToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serviceId);
          this->__isset.serviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteAllMessagesRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeleteAllMessagesRequest");

  xfer += oprot->writeFieldBegin("developerToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->developerToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->serviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteAllMessagesRequest &a, DeleteAllMessagesRequest &b) {
  using ::std::swap;
  swap(a.developerToken, b.developerToken);
  swap(a.serviceId, b.serviceId);
  swap(a.__isset, b.__isset);
}

DeleteAllMessagesRequest::DeleteAllMessagesRequest(const DeleteAllMessagesRequest& other34) {
  developerToken = other34.developerToken;
  serviceId = other34.serviceId;
  __isset = other34.__isset;
}
DeleteAllMessagesRequest& DeleteAllMessagesRequest::operator=(const DeleteAllMessagesRequest& other35) {
  developerToken = other35.developerToken;
  serviceId = other35.serviceId;
  __isset = other35.__isset;
  return *this;
}
void DeleteAllMessagesRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeleteAllMessagesRequest(";
  out << "developerToken=" << to_string(developerToken);
  out << ", " << "serviceId=" << to_string(serviceId);
  out << ")";
}


HideMessageRequest::~HideMessageRequest() throw() {
}


void HideMessageRequest::__set_developerToken(const DeveloperToken& val) {
  this->developerToken = val;
}

void HideMessageRequest::__set_messageId(const std::string& val) {
  this->messageId = val;
}

void HideMessageRequest::__set_serviceId(const std::string& val) {
  this->serviceId = val;
}

void HideMessageRequest::__set_messageIds(const std::vector<std::string> & val) {
  this->messageIds = val;
__isset.messageIds = true;
}

uint32_t HideMessageRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->developerToken.read(iprot);
          this->__isset.developerToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serviceId);
          this->__isset.serviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->messageIds.clear();
            uint32_t _size36;
            ::apache::thrift::protocol::TType _etype39;
            xfer += iprot->readListBegin(_etype39, _size36);
            this->messageIds.resize(_size36);
            uint32_t _i40;
            for (_i40 = 0; _i40 < _size36; ++_i40)
            {
              xfer += iprot->readString(this->messageIds[_i40]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.messageIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HideMessageRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HideMessageRequest");

  xfer += oprot->writeFieldBegin("developerToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->developerToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->messageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->serviceId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.messageIds) {
    xfer += oprot->writeFieldBegin("messageIds", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->messageIds.size()));
      std::vector<std::string> ::const_iterator _iter41;
      for (_iter41 = this->messageIds.begin(); _iter41 != this->messageIds.end(); ++_iter41)
      {
        xfer += oprot->writeString((*_iter41));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HideMessageRequest &a, HideMessageRequest &b) {
  using ::std::swap;
  swap(a.developerToken, b.developerToken);
  swap(a.messageId, b.messageId);
  swap(a.serviceId, b.serviceId);
  swap(a.messageIds, b.messageIds);
  swap(a.__isset, b.__isset);
}

HideMessageRequest::HideMessageRequest(const HideMessageRequest& other42) {
  developerToken = other42.developerToken;
  messageId = other42.messageId;
  serviceId = other42.serviceId;
  messageIds = other42.messageIds;
  __isset = other42.__isset;
}
HideMessageRequest& HideMessageRequest::operator=(const HideMessageRequest& other43) {
  developerToken = other43.developerToken;
  messageId = other43.messageId;
  serviceId = other43.serviceId;
  messageIds = other43.messageIds;
  __isset = other43.__isset;
  return *this;
}
void HideMessageRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HideMessageRequest(";
  out << "developerToken=" << to_string(developerToken);
  out << ", " << "messageId=" << to_string(messageId);
  out << ", " << "serviceId=" << to_string(serviceId);
  out << ", " << "messageIds="; (__isset.messageIds ? (out << to_string(messageIds)) : (out << "<null>"));
  out << ")";
}


HideMessageResponse::~HideMessageResponse() throw() {
}


uint32_t HideMessageResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HideMessageResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HideMessageResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HideMessageResponse &a, HideMessageResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

HideMessageResponse::HideMessageResponse(const HideMessageResponse& other44) {
  (void) other44;
}
HideMessageResponse& HideMessageResponse::operator=(const HideMessageResponse& other45) {
  (void) other45;
  return *this;
}
void HideMessageResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HideMessageResponse(";
  out << ")";
}


HideAllMessagesRequest::~HideAllMessagesRequest() throw() {
}


void HideAllMessagesRequest::__set_developerToken(const DeveloperToken& val) {
  this->developerToken = val;
}

void HideAllMessagesRequest::__set_serviceId(const std::string& val) {
  this->serviceId = val;
}

uint32_t HideAllMessagesRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->developerToken.read(iprot);
          this->__isset.developerToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serviceId);
          this->__isset.serviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HideAllMessagesRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HideAllMessagesRequest");

  xfer += oprot->writeFieldBegin("developerToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->developerToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->serviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HideAllMessagesRequest &a, HideAllMessagesRequest &b) {
  using ::std::swap;
  swap(a.developerToken, b.developerToken);
  swap(a.serviceId, b.serviceId);
  swap(a.__isset, b.__isset);
}

HideAllMessagesRequest::HideAllMessagesRequest(const HideAllMessagesRequest& other46) {
  developerToken = other46.developerToken;
  serviceId = other46.serviceId;
  __isset = other46.__isset;
}
HideAllMessagesRequest& HideAllMessagesRequest::operator=(const HideAllMessagesRequest& other47) {
  developerToken = other47.developerToken;
  serviceId = other47.serviceId;
  __isset = other47.__isset;
  return *this;
}
void HideAllMessagesRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HideAllMessagesRequest(";
  out << "developerToken=" << to_string(developerToken);
  out << ", " << "serviceId=" << to_string(serviceId);
  out << ")";
}


HideAllMessagesResponse::~HideAllMessagesResponse() throw() {
}


uint32_t HideAllMessagesResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HideAllMessagesResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HideAllMessagesResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HideAllMessagesResponse &a, HideAllMessagesResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

HideAllMessagesResponse::HideAllMessagesResponse(const HideAllMessagesResponse& other48) {
  (void) other48;
}
HideAllMessagesResponse& HideAllMessagesResponse::operator=(const HideAllMessagesResponse& other49) {
  (void) other49;
  return *this;
}
void HideAllMessagesResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HideAllMessagesResponse(";
  out << ")";
}


SaveChannelRequest::~SaveChannelRequest() throw() {
}


void SaveChannelRequest::__set_developerToken(const DeveloperToken& val) {
  this->developerToken = val;
}

void SaveChannelRequest::__set_channel(const BananaChannel& val) {
  this->channel = val;
}

uint32_t SaveChannelRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->developerToken.read(iprot);
          this->__isset.developerToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->channel.read(iprot);
          this->__isset.channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SaveChannelRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SaveChannelRequest");

  xfer += oprot->writeFieldBegin("developerToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->developerToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->channel.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SaveChannelRequest &a, SaveChannelRequest &b) {
  using ::std::swap;
  swap(a.developerToken, b.developerToken);
  swap(a.channel, b.channel);
  swap(a.__isset, b.__isset);
}

SaveChannelRequest::SaveChannelRequest(const SaveChannelRequest& other50) {
  developerToken = other50.developerToken;
  channel = other50.channel;
  __isset = other50.__isset;
}
SaveChannelRequest& SaveChannelRequest::operator=(const SaveChannelRequest& other51) {
  developerToken = other51.developerToken;
  channel = other51.channel;
  __isset = other51.__isset;
  return *this;
}
void SaveChannelRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SaveChannelRequest(";
  out << "developerToken=" << to_string(developerToken);
  out << ", " << "channel=" << to_string(channel);
  out << ")";
}


SaveChannelResponse::~SaveChannelResponse() throw() {
}


void SaveChannelResponse::__set_message(const std::string& val) {
  this->message = val;
}

void SaveChannelResponse::__set_channel(const BananaChannel& val) {
  this->channel = val;
__isset.channel = true;
}

uint32_t SaveChannelResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->channel.read(iprot);
          this->__isset.channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SaveChannelResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SaveChannelResponse");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.channel) {
    xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->channel.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SaveChannelResponse &a, SaveChannelResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.channel, b.channel);
  swap(a.__isset, b.__isset);
}

SaveChannelResponse::SaveChannelResponse(const SaveChannelResponse& other52) {
  message = other52.message;
  channel = other52.channel;
  __isset = other52.__isset;
}
SaveChannelResponse& SaveChannelResponse::operator=(const SaveChannelResponse& other53) {
  message = other53.message;
  channel = other53.channel;
  __isset = other53.__isset;
  return *this;
}
void SaveChannelResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SaveChannelResponse(";
  out << "message=" << to_string(message);
  out << ", " << "channel="; (__isset.channel ? (out << to_string(channel)) : (out << "<null>"));
  out << ")";
}


RemoveSavedChannelRequest::~RemoveSavedChannelRequest() throw() {
}


void RemoveSavedChannelRequest::__set_developerToken(const DeveloperToken& val) {
  this->developerToken = val;
}

void RemoveSavedChannelRequest::__set_channel(const BananaChannel& val) {
  this->channel = val;
}

uint32_t RemoveSavedChannelRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->developerToken.read(iprot);
          this->__isset.developerToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->channel.read(iprot);
          this->__isset.channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RemoveSavedChannelRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RemoveSavedChannelRequest");

  xfer += oprot->writeFieldBegin("developerToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->developerToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->channel.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RemoveSavedChannelRequest &a, RemoveSavedChannelRequest &b) {
  using ::std::swap;
  swap(a.developerToken, b.developerToken);
  swap(a.channel, b.channel);
  swap(a.__isset, b.__isset);
}

RemoveSavedChannelRequest::RemoveSavedChannelRequest(const RemoveSavedChannelRequest& other54) {
  developerToken = other54.developerToken;
  channel = other54.channel;
  __isset = other54.__isset;
}
RemoveSavedChannelRequest& RemoveSavedChannelRequest::operator=(const RemoveSavedChannelRequest& other55) {
  developerToken = other55.developerToken;
  channel = other55.channel;
  __isset = other55.__isset;
  return *this;
}
void RemoveSavedChannelRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RemoveSavedChannelRequest(";
  out << "developerToken=" << to_string(developerToken);
  out << ", " << "channel=" << to_string(channel);
  out << ")";
}


RemoveSavedChannelResponse::~RemoveSavedChannelResponse() throw() {
}


void RemoveSavedChannelResponse::__set_message(const std::string& val) {
  this->message = val;
}

void RemoveSavedChannelResponse::__set_channel(const BananaChannel& val) {
  this->channel = val;
__isset.channel = true;
}

uint32_t RemoveSavedChannelResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->channel.read(iprot);
          this->__isset.channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RemoveSavedChannelResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RemoveSavedChannelResponse");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.channel) {
    xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->channel.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RemoveSavedChannelResponse &a, RemoveSavedChannelResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.channel, b.channel);
  swap(a.__isset, b.__isset);
}

RemoveSavedChannelResponse::RemoveSavedChannelResponse(const RemoveSavedChannelResponse& other56) {
  message = other56.message;
  channel = other56.channel;
  __isset = other56.__isset;
}
RemoveSavedChannelResponse& RemoveSavedChannelResponse::operator=(const RemoveSavedChannelResponse& other57) {
  message = other57.message;
  channel = other57.channel;
  __isset = other57.__isset;
  return *this;
}
void RemoveSavedChannelResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RemoveSavedChannelResponse(";
  out << "message=" << to_string(message);
  out << ", " << "channel="; (__isset.channel ? (out << to_string(channel)) : (out << "<null>"));
  out << ")";
}


SnoozeChannelRequest::~SnoozeChannelRequest() throw() {
}


void SnoozeChannelRequest::__set_developerToken(const DeveloperToken& val) {
  this->developerToken = val;
}

void SnoozeChannelRequest::__set_channel(const BananaChannel& val) {
  this->channel = val;
}

uint32_t SnoozeChannelRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->developerToken.read(iprot);
          this->__isset.developerToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->channel.read(iprot);
          this->__isset.channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SnoozeChannelRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SnoozeChannelRequest");

  xfer += oprot->writeFieldBegin("developerToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->developerToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->channel.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SnoozeChannelRequest &a, SnoozeChannelRequest &b) {
  using ::std::swap;
  swap(a.developerToken, b.developerToken);
  swap(a.channel, b.channel);
  swap(a.__isset, b.__isset);
}

SnoozeChannelRequest::SnoozeChannelRequest(const SnoozeChannelRequest& other58) {
  developerToken = other58.developerToken;
  channel = other58.channel;
  __isset = other58.__isset;
}
SnoozeChannelRequest& SnoozeChannelRequest::operator=(const SnoozeChannelRequest& other59) {
  developerToken = other59.developerToken;
  channel = other59.channel;
  __isset = other59.__isset;
  return *this;
}
void SnoozeChannelRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SnoozeChannelRequest(";
  out << "developerToken=" << to_string(developerToken);
  out << ", " << "channel=" << to_string(channel);
  out << ")";
}


SnoozeChannelResponse::~SnoozeChannelResponse() throw() {
}


void SnoozeChannelResponse::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t SnoozeChannelResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SnoozeChannelResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SnoozeChannelResponse");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SnoozeChannelResponse &a, SnoozeChannelResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

SnoozeChannelResponse::SnoozeChannelResponse(const SnoozeChannelResponse& other60) {
  message = other60.message;
  __isset = other60.__isset;
}
SnoozeChannelResponse& SnoozeChannelResponse::operator=(const SnoozeChannelResponse& other61) {
  message = other61.message;
  __isset = other61.__isset;
  return *this;
}
void SnoozeChannelResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SnoozeChannelResponse(";
  out << "message=" << to_string(message);
  out << ")";
}


GetServiceInfoRequest::~GetServiceInfoRequest() throw() {
}


void GetServiceInfoRequest::__set_developerToken(const DeveloperToken& val) {
  this->developerToken = val;
}

void GetServiceInfoRequest::__set_serviceId(const std::string& val) {
  this->serviceId = val;
}

uint32_t GetServiceInfoRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->developerToken.read(iprot);
          this->__isset.developerToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serviceId);
          this->__isset.serviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetServiceInfoRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetServiceInfoRequest");

  xfer += oprot->writeFieldBegin("developerToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->developerToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->serviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetServiceInfoRequest &a, GetServiceInfoRequest &b) {
  using ::std::swap;
  swap(a.developerToken, b.developerToken);
  swap(a.serviceId, b.serviceId);
  swap(a.__isset, b.__isset);
}

GetServiceInfoRequest::GetServiceInfoRequest(const GetServiceInfoRequest& other62) {
  developerToken = other62.developerToken;
  serviceId = other62.serviceId;
  __isset = other62.__isset;
}
GetServiceInfoRequest& GetServiceInfoRequest::operator=(const GetServiceInfoRequest& other63) {
  developerToken = other63.developerToken;
  serviceId = other63.serviceId;
  __isset = other63.__isset;
  return *this;
}
void GetServiceInfoRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetServiceInfoRequest(";
  out << "developerToken=" << to_string(developerToken);
  out << ", " << "serviceId=" << to_string(serviceId);
  out << ")";
}


GetServiceInfoResponse::~GetServiceInfoResponse() throw() {
}


void GetServiceInfoResponse::__set_serviceInfo(const Service& val) {
  this->serviceInfo = val;
}

uint32_t GetServiceInfoResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->serviceInfo.read(iprot);
          this->__isset.serviceInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetServiceInfoResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetServiceInfoResponse");

  xfer += oprot->writeFieldBegin("serviceInfo", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->serviceInfo.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetServiceInfoResponse &a, GetServiceInfoResponse &b) {
  using ::std::swap;
  swap(a.serviceInfo, b.serviceInfo);
  swap(a.__isset, b.__isset);
}

GetServiceInfoResponse::GetServiceInfoResponse(const GetServiceInfoResponse& other64) {
  serviceInfo = other64.serviceInfo;
  __isset = other64.__isset;
}
GetServiceInfoResponse& GetServiceInfoResponse::operator=(const GetServiceInfoResponse& other65) {
  serviceInfo = other65.serviceInfo;
  __isset = other65.__isset;
  return *this;
}
void GetServiceInfoResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetServiceInfoResponse(";
  out << "serviceInfo=" << to_string(serviceInfo);
  out << ")";
}


SearchForServicesRequest::~SearchForServicesRequest() throw() {
}


void SearchForServicesRequest::__set_developerToken(const DeveloperToken& val) {
  this->developerToken = val;
}

void SearchForServicesRequest::__set_searchTerm(const std::string& val) {
  this->searchTerm = val;
}

void SearchForServicesRequest::__set_organization(const std::string& val) {
  this->organization = val;
__isset.organization = true;
}

uint32_t SearchForServicesRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->developerToken.read(iprot);
          this->__isset.developerToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->searchTerm);
          this->__isset.searchTerm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organization);
          this->__isset.organization = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SearchForServicesRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SearchForServicesRequest");

  xfer += oprot->writeFieldBegin("developerToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->developerToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("searchTerm", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->searchTerm);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.organization) {
    xfer += oprot->writeFieldBegin("organization", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->organization);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SearchForServicesRequest &a, SearchForServicesRequest &b) {
  using ::std::swap;
  swap(a.developerToken, b.developerToken);
  swap(a.searchTerm, b.searchTerm);
  swap(a.organization, b.organization);
  swap(a.__isset, b.__isset);
}

SearchForServicesRequest::SearchForServicesRequest(const SearchForServicesRequest& other66) {
  developerToken = other66.developerToken;
  searchTerm = other66.searchTerm;
  organization = other66.organization;
  __isset = other66.__isset;
}
SearchForServicesRequest& SearchForServicesRequest::operator=(const SearchForServicesRequest& other67) {
  developerToken = other67.developerToken;
  searchTerm = other67.searchTerm;
  organization = other67.organization;
  __isset = other67.__isset;
  return *this;
}
void SearchForServicesRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SearchForServicesRequest(";
  out << "developerToken=" << to_string(developerToken);
  out << ", " << "searchTerm=" << to_string(searchTerm);
  out << ", " << "organization="; (__isset.organization ? (out << to_string(organization)) : (out << "<null>"));
  out << ")";
}


SearchForServicesResponse::~SearchForServicesResponse() throw() {
}


void SearchForServicesResponse::__set_services(const std::vector<Service> & val) {
  this->services = val;
}

uint32_t SearchForServicesResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->services.clear();
            uint32_t _size68;
            ::apache::thrift::protocol::TType _etype71;
            xfer += iprot->readListBegin(_etype71, _size68);
            this->services.resize(_size68);
            uint32_t _i72;
            for (_i72 = 0; _i72 < _size68; ++_i72)
            {
              xfer += this->services[_i72].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.services = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SearchForServicesResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SearchForServicesResponse");

  xfer += oprot->writeFieldBegin("services", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->services.size()));
    std::vector<Service> ::const_iterator _iter73;
    for (_iter73 = this->services.begin(); _iter73 != this->services.end(); ++_iter73)
    {
      xfer += (*_iter73).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SearchForServicesResponse &a, SearchForServicesResponse &b) {
  using ::std::swap;
  swap(a.services, b.services);
  swap(a.__isset, b.__isset);
}

SearchForServicesResponse::SearchForServicesResponse(const SearchForServicesResponse& other74) {
  services = other74.services;
  __isset = other74.__isset;
}
SearchForServicesResponse& SearchForServicesResponse::operator=(const SearchForServicesResponse& other75) {
  services = other75.services;
  __isset = other75.__isset;
  return *this;
}
void SearchForServicesResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SearchForServicesResponse(";
  out << "services=" << to_string(services);
  out << ")";
}


GetServiceSubscribersRequest::~GetServiceSubscribersRequest() throw() {
}


void GetServiceSubscribersRequest::__set_developerToken(const DeveloperToken& val) {
  this->developerToken = val;
}

void GetServiceSubscribersRequest::__set_serviceId(const std::string& val) {
  this->serviceId = val;
}

void GetServiceSubscribersRequest::__set_organization(const std::string& val) {
  this->organization = val;
}

uint32_t GetServiceSubscribersRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->developerToken.read(iprot);
          this->__isset.developerToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serviceId);
          this->__isset.serviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organization);
          this->__isset.organization = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetServiceSubscribersRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetServiceSubscribersRequest");

  xfer += oprot->writeFieldBegin("developerToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->developerToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->serviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("organization", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->organization);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetServiceSubscribersRequest &a, GetServiceSubscribersRequest &b) {
  using ::std::swap;
  swap(a.developerToken, b.developerToken);
  swap(a.serviceId, b.serviceId);
  swap(a.organization, b.organization);
  swap(a.__isset, b.__isset);
}

GetServiceSubscribersRequest::GetServiceSubscribersRequest(const GetServiceSubscribersRequest& other76) {
  developerToken = other76.developerToken;
  serviceId = other76.serviceId;
  organization = other76.organization;
  __isset = other76.__isset;
}
GetServiceSubscribersRequest& GetServiceSubscribersRequest::operator=(const GetServiceSubscribersRequest& other77) {
  developerToken = other77.developerToken;
  serviceId = other77.serviceId;
  organization = other77.organization;
  __isset = other77.__isset;
  return *this;
}
void GetServiceSubscribersRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetServiceSubscribersRequest(";
  out << "developerToken=" << to_string(developerToken);
  out << ", " << "serviceId=" << to_string(serviceId);
  out << ", " << "organization=" << to_string(organization);
  out << ")";
}


GetServiceSubscribersResponse::~GetServiceSubscribersResponse() throw() {
}


void GetServiceSubscribersResponse::__set_developers(const std::vector<Developer> & val) {
  this->developers = val;
}

uint32_t GetServiceSubscribersResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->developers.clear();
            uint32_t _size78;
            ::apache::thrift::protocol::TType _etype81;
            xfer += iprot->readListBegin(_etype81, _size78);
            this->developers.resize(_size78);
            uint32_t _i82;
            for (_i82 = 0; _i82 < _size78; ++_i82)
            {
              xfer += this->developers[_i82].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.developers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetServiceSubscribersResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetServiceSubscribersResponse");

  xfer += oprot->writeFieldBegin("developers", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->developers.size()));
    std::vector<Developer> ::const_iterator _iter83;
    for (_iter83 = this->developers.begin(); _iter83 != this->developers.end(); ++_iter83)
    {
      xfer += (*_iter83).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetServiceSubscribersResponse &a, GetServiceSubscribersResponse &b) {
  using ::std::swap;
  swap(a.developers, b.developers);
  swap(a.__isset, b.__isset);
}

GetServiceSubscribersResponse::GetServiceSubscribersResponse(const GetServiceSubscribersResponse& other84) {
  developers = other84.developers;
  __isset = other84.__isset;
}
GetServiceSubscribersResponse& GetServiceSubscribersResponse::operator=(const GetServiceSubscribersResponse& other85) {
  developers = other85.developers;
  __isset = other85.__isset;
  return *this;
}
void GetServiceSubscribersResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetServiceSubscribersResponse(";
  out << "developers=" << to_string(developers);
  out << ")";
}


GetMySavedChannelsRequest::~GetMySavedChannelsRequest() throw() {
}


void GetMySavedChannelsRequest::__set_developerToken(const DeveloperToken& val) {
  this->developerToken = val;
}

uint32_t GetMySavedChannelsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->developerToken.read(iprot);
          this->__isset.developerToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetMySavedChannelsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetMySavedChannelsRequest");

  xfer += oprot->writeFieldBegin("developerToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->developerToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetMySavedChannelsRequest &a, GetMySavedChannelsRequest &b) {
  using ::std::swap;
  swap(a.developerToken, b.developerToken);
  swap(a.__isset, b.__isset);
}

GetMySavedChannelsRequest::GetMySavedChannelsRequest(const GetMySavedChannelsRequest& other86) {
  developerToken = other86.developerToken;
  __isset = other86.__isset;
}
GetMySavedChannelsRequest& GetMySavedChannelsRequest::operator=(const GetMySavedChannelsRequest& other87) {
  developerToken = other87.developerToken;
  __isset = other87.__isset;
  return *this;
}
void GetMySavedChannelsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetMySavedChannelsRequest(";
  out << "developerToken=" << to_string(developerToken);
  out << ")";
}


GetMySavedChannelsResponse::~GetMySavedChannelsResponse() throw() {
}


void GetMySavedChannelsResponse::__set_channels(const std::vector<BananaChannel> & val) {
  this->channels = val;
}

uint32_t GetMySavedChannelsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->channels.clear();
            uint32_t _size88;
            ::apache::thrift::protocol::TType _etype91;
            xfer += iprot->readListBegin(_etype91, _size88);
            this->channels.resize(_size88);
            uint32_t _i92;
            for (_i92 = 0; _i92 < _size88; ++_i92)
            {
              xfer += this->channels[_i92].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.channels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetMySavedChannelsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetMySavedChannelsResponse");

  xfer += oprot->writeFieldBegin("channels", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->channels.size()));
    std::vector<BananaChannel> ::const_iterator _iter93;
    for (_iter93 = this->channels.begin(); _iter93 != this->channels.end(); ++_iter93)
    {
      xfer += (*_iter93).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetMySavedChannelsResponse &a, GetMySavedChannelsResponse &b) {
  using ::std::swap;
  swap(a.channels, b.channels);
  swap(a.__isset, b.__isset);
}

GetMySavedChannelsResponse::GetMySavedChannelsResponse(const GetMySavedChannelsResponse& other94) {
  channels = other94.channels;
  __isset = other94.__isset;
}
GetMySavedChannelsResponse& GetMySavedChannelsResponse::operator=(const GetMySavedChannelsResponse& other95) {
  channels = other95.channels;
  __isset = other95.__isset;
  return *this;
}
void GetMySavedChannelsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetMySavedChannelsResponse(";
  out << "channels=" << to_string(channels);
  out << ")";
}


SendMessageRequest::~SendMessageRequest() throw() {
}


void SendMessageRequest::__set_serviceToken(const ServiceToken& val) {
  this->serviceToken = val;
}

void SendMessageRequest::__set_message(const std::string& val) {
  this->message = val;
}

void SendMessageRequest::__set_urgency(const Urgency val) {
  this->urgency = val;
}

uint32_t SendMessageRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->serviceToken.read(iprot);
          this->__isset.serviceToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast96;
          xfer += iprot->readI32(ecast96);
          this->urgency = ( ::aroma::banana::thrift::Urgency::type)ecast96;
          this->__isset.urgency = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SendMessageRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SendMessageRequest");

  xfer += oprot->writeFieldBegin("serviceToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->serviceToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("urgency", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->urgency);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SendMessageRequest &a, SendMessageRequest &b) {
  using ::std::swap;
  swap(a.serviceToken, b.serviceToken);
  swap(a.message, b.message);
  swap(a.urgency, b.urgency);
  swap(a.__isset, b.__isset);
}

SendMessageRequest::SendMessageRequest(const SendMessageRequest& other97) {
  serviceToken = other97.serviceToken;
  message = other97.message;
  urgency = other97.urgency;
  __isset = other97.__isset;
}
SendMessageRequest& SendMessageRequest::operator=(const SendMessageRequest& other98) {
  serviceToken = other98.serviceToken;
  message = other98.message;
  urgency = other98.urgency;
  __isset = other98.__isset;
  return *this;
}
void SendMessageRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SendMessageRequest(";
  out << "serviceToken=" << to_string(serviceToken);
  out << ", " << "message=" << to_string(message);
  out << ", " << "urgency=" << to_string(urgency);
  out << ")";
}


SendMessageResponse::~SendMessageResponse() throw() {
}


void SendMessageResponse::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t SendMessageResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SendMessageResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SendMessageResponse");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SendMessageResponse &a, SendMessageResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

SendMessageResponse::SendMessageResponse(const SendMessageResponse& other99) {
  message = other99.message;
  __isset = other99.__isset;
}
SendMessageResponse& SendMessageResponse::operator=(const SendMessageResponse& other100) {
  message = other100.message;
  __isset = other100.__isset;
  return *this;
}
void SendMessageResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SendMessageResponse(";
  out << "message=" << to_string(message);
  out << ")";
}

}}}} // namespace
