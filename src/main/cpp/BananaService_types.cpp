/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "BananaService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace aroma { namespace banana { namespace thrift { namespace service {


DeleteMessageRequest::~DeleteMessageRequest() throw() {
}


void DeleteMessageRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void DeleteMessageRequest::__set_messageId(const std::string& val) {
  this->messageId = val;
}

void DeleteMessageRequest::__set_applicationId(const std::string& val) {
  this->applicationId = val;
}

void DeleteMessageRequest::__set_messageIds(const std::vector<std::string> & val) {
  this->messageIds = val;
__isset.messageIds = true;
}

uint32_t DeleteMessageRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->messageIds.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->messageIds.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readString(this->messageIds[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.messageIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteMessageRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeleteMessageRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->messageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.messageIds) {
    xfer += oprot->writeFieldBegin("messageIds", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->messageIds.size()));
      std::vector<std::string> ::const_iterator _iter5;
      for (_iter5 = this->messageIds.begin(); _iter5 != this->messageIds.end(); ++_iter5)
      {
        xfer += oprot->writeString((*_iter5));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteMessageRequest &a, DeleteMessageRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.messageId, b.messageId);
  swap(a.applicationId, b.applicationId);
  swap(a.messageIds, b.messageIds);
  swap(a.__isset, b.__isset);
}

DeleteMessageRequest::DeleteMessageRequest(const DeleteMessageRequest& other6) {
  token = other6.token;
  messageId = other6.messageId;
  applicationId = other6.applicationId;
  messageIds = other6.messageIds;
  __isset = other6.__isset;
}
DeleteMessageRequest& DeleteMessageRequest::operator=(const DeleteMessageRequest& other7) {
  token = other7.token;
  messageId = other7.messageId;
  applicationId = other7.applicationId;
  messageIds = other7.messageIds;
  __isset = other7.__isset;
  return *this;
}
void DeleteMessageRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeleteMessageRequest(";
  out << "token=" << to_string(token);
  out << ", " << "messageId=" << to_string(messageId);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ", " << "messageIds="; (__isset.messageIds ? (out << to_string(messageIds)) : (out << "<null>"));
  out << ")";
}


DeleteMessageResponse::~DeleteMessageResponse() throw() {
}


void DeleteMessageResponse::__set_messagesDeleted(const int val) {
  this->messagesDeleted = val;
__isset.messagesDeleted = true;
}

uint32_t DeleteMessageResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->messagesDeleted);
          this->__isset.messagesDeleted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteMessageResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeleteMessageResponse");

  if (this->__isset.messagesDeleted) {
    xfer += oprot->writeFieldBegin("messagesDeleted", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->messagesDeleted);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteMessageResponse &a, DeleteMessageResponse &b) {
  using ::std::swap;
  swap(a.messagesDeleted, b.messagesDeleted);
  swap(a.__isset, b.__isset);
}

DeleteMessageResponse::DeleteMessageResponse(const DeleteMessageResponse& other8) {
  messagesDeleted = other8.messagesDeleted;
  __isset = other8.__isset;
}
DeleteMessageResponse& DeleteMessageResponse::operator=(const DeleteMessageResponse& other9) {
  messagesDeleted = other9.messagesDeleted;
  __isset = other9.__isset;
  return *this;
}
void DeleteMessageResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeleteMessageResponse(";
  out << "messagesDeleted="; (__isset.messagesDeleted ? (out << to_string(messagesDeleted)) : (out << "<null>"));
  out << ")";
}


DeleteAllMessagesRequest::~DeleteAllMessagesRequest() throw() {
}


void DeleteAllMessagesRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void DeleteAllMessagesRequest::__set_applicationId(const std::string& val) {
  this->applicationId = val;
}

void DeleteAllMessagesRequest::__set_messagesDeleted(const int val) {
  this->messagesDeleted = val;
__isset.messagesDeleted = true;
}

uint32_t DeleteAllMessagesRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->messagesDeleted);
          this->__isset.messagesDeleted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteAllMessagesRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeleteAllMessagesRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.messagesDeleted) {
    xfer += oprot->writeFieldBegin("messagesDeleted", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->messagesDeleted);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteAllMessagesRequest &a, DeleteAllMessagesRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationId, b.applicationId);
  swap(a.messagesDeleted, b.messagesDeleted);
  swap(a.__isset, b.__isset);
}

DeleteAllMessagesRequest::DeleteAllMessagesRequest(const DeleteAllMessagesRequest& other10) {
  token = other10.token;
  applicationId = other10.applicationId;
  messagesDeleted = other10.messagesDeleted;
  __isset = other10.__isset;
}
DeleteAllMessagesRequest& DeleteAllMessagesRequest::operator=(const DeleteAllMessagesRequest& other11) {
  token = other11.token;
  applicationId = other11.applicationId;
  messagesDeleted = other11.messagesDeleted;
  __isset = other11.__isset;
  return *this;
}
void DeleteAllMessagesRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeleteAllMessagesRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ", " << "messagesDeleted="; (__isset.messagesDeleted ? (out << to_string(messagesDeleted)) : (out << "<null>"));
  out << ")";
}


DismissMessageRequest::~DismissMessageRequest() throw() {
}


void DismissMessageRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void DismissMessageRequest::__set_messageId(const std::string& val) {
  this->messageId = val;
}

void DismissMessageRequest::__set_applicationId(const std::string& val) {
  this->applicationId = val;
}

void DismissMessageRequest::__set_messageIds(const std::vector<std::string> & val) {
  this->messageIds = val;
__isset.messageIds = true;
}

uint32_t DismissMessageRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->messageIds.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->messageIds.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += iprot->readString(this->messageIds[_i16]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.messageIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DismissMessageRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DismissMessageRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->messageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.messageIds) {
    xfer += oprot->writeFieldBegin("messageIds", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->messageIds.size()));
      std::vector<std::string> ::const_iterator _iter17;
      for (_iter17 = this->messageIds.begin(); _iter17 != this->messageIds.end(); ++_iter17)
      {
        xfer += oprot->writeString((*_iter17));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DismissMessageRequest &a, DismissMessageRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.messageId, b.messageId);
  swap(a.applicationId, b.applicationId);
  swap(a.messageIds, b.messageIds);
  swap(a.__isset, b.__isset);
}

DismissMessageRequest::DismissMessageRequest(const DismissMessageRequest& other18) {
  token = other18.token;
  messageId = other18.messageId;
  applicationId = other18.applicationId;
  messageIds = other18.messageIds;
  __isset = other18.__isset;
}
DismissMessageRequest& DismissMessageRequest::operator=(const DismissMessageRequest& other19) {
  token = other19.token;
  messageId = other19.messageId;
  applicationId = other19.applicationId;
  messageIds = other19.messageIds;
  __isset = other19.__isset;
  return *this;
}
void DismissMessageRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DismissMessageRequest(";
  out << "token=" << to_string(token);
  out << ", " << "messageId=" << to_string(messageId);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ", " << "messageIds="; (__isset.messageIds ? (out << to_string(messageIds)) : (out << "<null>"));
  out << ")";
}


DismissMessageResponse::~DismissMessageResponse() throw() {
}


void DismissMessageResponse::__set_messagesDismissed(const int val) {
  this->messagesDismissed = val;
__isset.messagesDismissed = true;
}

uint32_t DismissMessageResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->messagesDismissed);
          this->__isset.messagesDismissed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DismissMessageResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DismissMessageResponse");

  if (this->__isset.messagesDismissed) {
    xfer += oprot->writeFieldBegin("messagesDismissed", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->messagesDismissed);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DismissMessageResponse &a, DismissMessageResponse &b) {
  using ::std::swap;
  swap(a.messagesDismissed, b.messagesDismissed);
  swap(a.__isset, b.__isset);
}

DismissMessageResponse::DismissMessageResponse(const DismissMessageResponse& other20) {
  messagesDismissed = other20.messagesDismissed;
  __isset = other20.__isset;
}
DismissMessageResponse& DismissMessageResponse::operator=(const DismissMessageResponse& other21) {
  messagesDismissed = other21.messagesDismissed;
  __isset = other21.__isset;
  return *this;
}
void DismissMessageResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DismissMessageResponse(";
  out << "messagesDismissed="; (__isset.messagesDismissed ? (out << to_string(messagesDismissed)) : (out << "<null>"));
  out << ")";
}


DismissAllMessagesRequest::~DismissAllMessagesRequest() throw() {
}


void DismissAllMessagesRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void DismissAllMessagesRequest::__set_applicationId(const std::string& val) {
  this->applicationId = val;
}

uint32_t DismissAllMessagesRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DismissAllMessagesRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DismissAllMessagesRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DismissAllMessagesRequest &a, DismissAllMessagesRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationId, b.applicationId);
  swap(a.__isset, b.__isset);
}

DismissAllMessagesRequest::DismissAllMessagesRequest(const DismissAllMessagesRequest& other22) {
  token = other22.token;
  applicationId = other22.applicationId;
  __isset = other22.__isset;
}
DismissAllMessagesRequest& DismissAllMessagesRequest::operator=(const DismissAllMessagesRequest& other23) {
  token = other23.token;
  applicationId = other23.applicationId;
  __isset = other23.__isset;
  return *this;
}
void DismissAllMessagesRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DismissAllMessagesRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ")";
}


DismissAllMessagesResponse::~DismissAllMessagesResponse() throw() {
}


void DismissAllMessagesResponse::__set_messagesDismissed(const int val) {
  this->messagesDismissed = val;
__isset.messagesDismissed = true;
}

uint32_t DismissAllMessagesResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->messagesDismissed);
          this->__isset.messagesDismissed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DismissAllMessagesResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DismissAllMessagesResponse");

  if (this->__isset.messagesDismissed) {
    xfer += oprot->writeFieldBegin("messagesDismissed", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->messagesDismissed);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DismissAllMessagesResponse &a, DismissAllMessagesResponse &b) {
  using ::std::swap;
  swap(a.messagesDismissed, b.messagesDismissed);
  swap(a.__isset, b.__isset);
}

DismissAllMessagesResponse::DismissAllMessagesResponse(const DismissAllMessagesResponse& other24) {
  messagesDismissed = other24.messagesDismissed;
  __isset = other24.__isset;
}
DismissAllMessagesResponse& DismissAllMessagesResponse::operator=(const DismissAllMessagesResponse& other25) {
  messagesDismissed = other25.messagesDismissed;
  __isset = other25.__isset;
  return *this;
}
void DismissAllMessagesResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DismissAllMessagesResponse(";
  out << "messagesDismissed="; (__isset.messagesDismissed ? (out << to_string(messagesDismissed)) : (out << "<null>"));
  out << ")";
}


ProvisionApplicationRequest::~ProvisionApplicationRequest() throw() {
}


void ProvisionApplicationRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void ProvisionApplicationRequest::__set_applicationName(const std::string& val) {
  this->applicationName = val;
}

void ProvisionApplicationRequest::__set_programmingLanguage(const  ::aroma::banana::thrift::ProgrammingLanguage::type val) {
  this->programmingLanguage = val;
__isset.programmingLanguage = true;
}

void ProvisionApplicationRequest::__set_organization(const std::string& val) {
  this->organization = val;
}

void ProvisionApplicationRequest::__set_icon(const Image& val) {
  this->icon = val;
__isset.icon = true;
}

uint32_t ProvisionApplicationRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationName);
          this->__isset.applicationName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast26;
          xfer += iprot->readI32(ecast26);
          this->programmingLanguage = ( ::aroma::banana::thrift::ProgrammingLanguage::type)ecast26;
          this->__isset.programmingLanguage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organization);
          this->__isset.organization = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->icon.read(iprot);
          this->__isset.icon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvisionApplicationRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProvisionApplicationRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.programmingLanguage) {
    xfer += oprot->writeFieldBegin("programmingLanguage", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->programmingLanguage);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("organization", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->organization);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.icon) {
    xfer += oprot->writeFieldBegin("icon", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->icon.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProvisionApplicationRequest &a, ProvisionApplicationRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationName, b.applicationName);
  swap(a.programmingLanguage, b.programmingLanguage);
  swap(a.organization, b.organization);
  swap(a.icon, b.icon);
  swap(a.__isset, b.__isset);
}

ProvisionApplicationRequest::ProvisionApplicationRequest(const ProvisionApplicationRequest& other27) {
  token = other27.token;
  applicationName = other27.applicationName;
  programmingLanguage = other27.programmingLanguage;
  organization = other27.organization;
  icon = other27.icon;
  __isset = other27.__isset;
}
ProvisionApplicationRequest& ProvisionApplicationRequest::operator=(const ProvisionApplicationRequest& other28) {
  token = other28.token;
  applicationName = other28.applicationName;
  programmingLanguage = other28.programmingLanguage;
  organization = other28.organization;
  icon = other28.icon;
  __isset = other28.__isset;
  return *this;
}
void ProvisionApplicationRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProvisionApplicationRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationName=" << to_string(applicationName);
  out << ", " << "programmingLanguage="; (__isset.programmingLanguage ? (out << to_string(programmingLanguage)) : (out << "<null>"));
  out << ", " << "organization=" << to_string(organization);
  out << ", " << "icon="; (__isset.icon ? (out << to_string(icon)) : (out << "<null>"));
  out << ")";
}


ProvisionApplicationResponse::~ProvisionApplicationResponse() throw() {
}


void ProvisionApplicationResponse::__set_applicationId(const std::string& val) {
  this->applicationId = val;
}

void ProvisionApplicationResponse::__set_applicationName(const std::string& val) {
  this->applicationName = val;
}

void ProvisionApplicationResponse::__set_applicationToken(const ApplicationToken& val) {
  this->applicationToken = val;
}

void ProvisionApplicationResponse::__set_applicationInfo(const Application& val) {
  this->applicationInfo = val;
}

uint32_t ProvisionApplicationResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationName);
          this->__isset.applicationName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->applicationToken.read(iprot);
          this->__isset.applicationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->applicationInfo.read(iprot);
          this->__isset.applicationInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvisionApplicationResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProvisionApplicationResponse");

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationToken", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->applicationToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationInfo", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->applicationInfo.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProvisionApplicationResponse &a, ProvisionApplicationResponse &b) {
  using ::std::swap;
  swap(a.applicationId, b.applicationId);
  swap(a.applicationName, b.applicationName);
  swap(a.applicationToken, b.applicationToken);
  swap(a.applicationInfo, b.applicationInfo);
  swap(a.__isset, b.__isset);
}

ProvisionApplicationResponse::ProvisionApplicationResponse(const ProvisionApplicationResponse& other29) {
  applicationId = other29.applicationId;
  applicationName = other29.applicationName;
  applicationToken = other29.applicationToken;
  applicationInfo = other29.applicationInfo;
  __isset = other29.__isset;
}
ProvisionApplicationResponse& ProvisionApplicationResponse::operator=(const ProvisionApplicationResponse& other30) {
  applicationId = other30.applicationId;
  applicationName = other30.applicationName;
  applicationToken = other30.applicationToken;
  applicationInfo = other30.applicationInfo;
  __isset = other30.__isset;
  return *this;
}
void ProvisionApplicationResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProvisionApplicationResponse(";
  out << "applicationId=" << to_string(applicationId);
  out << ", " << "applicationName=" << to_string(applicationName);
  out << ", " << "applicationToken=" << to_string(applicationToken);
  out << ", " << "applicationInfo=" << to_string(applicationInfo);
  out << ")";
}


RegenerateApplicationTokenRequest::~RegenerateApplicationTokenRequest() throw() {
}


void RegenerateApplicationTokenRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void RegenerateApplicationTokenRequest::__set_applicationId(const std::string& val) {
  this->applicationId = val;
}

uint32_t RegenerateApplicationTokenRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RegenerateApplicationTokenRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RegenerateApplicationTokenRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RegenerateApplicationTokenRequest &a, RegenerateApplicationTokenRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationId, b.applicationId);
  swap(a.__isset, b.__isset);
}

RegenerateApplicationTokenRequest::RegenerateApplicationTokenRequest(const RegenerateApplicationTokenRequest& other31) {
  token = other31.token;
  applicationId = other31.applicationId;
  __isset = other31.__isset;
}
RegenerateApplicationTokenRequest& RegenerateApplicationTokenRequest::operator=(const RegenerateApplicationTokenRequest& other32) {
  token = other32.token;
  applicationId = other32.applicationId;
  __isset = other32.__isset;
  return *this;
}
void RegenerateApplicationTokenRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RegenerateApplicationTokenRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ")";
}


RegenerateApplicationTokenResponse::~RegenerateApplicationTokenResponse() throw() {
}


void RegenerateApplicationTokenResponse::__set_serviceToken(const ApplicationToken& val) {
  this->serviceToken = val;
}

uint32_t RegenerateApplicationTokenResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->serviceToken.read(iprot);
          this->__isset.serviceToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RegenerateApplicationTokenResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RegenerateApplicationTokenResponse");

  xfer += oprot->writeFieldBegin("serviceToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->serviceToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RegenerateApplicationTokenResponse &a, RegenerateApplicationTokenResponse &b) {
  using ::std::swap;
  swap(a.serviceToken, b.serviceToken);
  swap(a.__isset, b.__isset);
}

RegenerateApplicationTokenResponse::RegenerateApplicationTokenResponse(const RegenerateApplicationTokenResponse& other33) {
  serviceToken = other33.serviceToken;
  __isset = other33.__isset;
}
RegenerateApplicationTokenResponse& RegenerateApplicationTokenResponse::operator=(const RegenerateApplicationTokenResponse& other34) {
  serviceToken = other34.serviceToken;
  __isset = other34.__isset;
  return *this;
}
void RegenerateApplicationTokenResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RegenerateApplicationTokenResponse(";
  out << "serviceToken=" << to_string(serviceToken);
  out << ")";
}


RegisterHealthCheckRequest::~RegisterHealthCheckRequest() throw() {
}


void RegisterHealthCheckRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void RegisterHealthCheckRequest::__set_endpoint(const Endpoint& val) {
  this->endpoint = val;
}

uint32_t RegisterHealthCheckRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->endpoint.read(iprot);
          this->__isset.endpoint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RegisterHealthCheckRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RegisterHealthCheckRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endpoint", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->endpoint.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RegisterHealthCheckRequest &a, RegisterHealthCheckRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.endpoint, b.endpoint);
  swap(a.__isset, b.__isset);
}

RegisterHealthCheckRequest::RegisterHealthCheckRequest(const RegisterHealthCheckRequest& other35) {
  token = other35.token;
  endpoint = other35.endpoint;
  __isset = other35.__isset;
}
RegisterHealthCheckRequest& RegisterHealthCheckRequest::operator=(const RegisterHealthCheckRequest& other36) {
  token = other36.token;
  endpoint = other36.endpoint;
  __isset = other36.__isset;
  return *this;
}
void RegisterHealthCheckRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RegisterHealthCheckRequest(";
  out << "token=" << to_string(token);
  out << ", " << "endpoint=" << to_string(endpoint);
  out << ")";
}


RegisterHealthCheckResponse::~RegisterHealthCheckResponse() throw() {
}


void RegisterHealthCheckResponse::__set_message(const std::string& val) {
  this->message = val;
__isset.message = true;
}

void RegisterHealthCheckResponse::__set_healthCheckToken(const std::string& val) {
  this->healthCheckToken = val;
__isset.healthCheckToken = true;
}

uint32_t RegisterHealthCheckResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->healthCheckToken);
          this->__isset.healthCheckToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RegisterHealthCheckResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RegisterHealthCheckResponse");

  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->message);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.healthCheckToken) {
    xfer += oprot->writeFieldBegin("healthCheckToken", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->healthCheckToken);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RegisterHealthCheckResponse &a, RegisterHealthCheckResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.healthCheckToken, b.healthCheckToken);
  swap(a.__isset, b.__isset);
}

RegisterHealthCheckResponse::RegisterHealthCheckResponse(const RegisterHealthCheckResponse& other37) {
  message = other37.message;
  healthCheckToken = other37.healthCheckToken;
  __isset = other37.__isset;
}
RegisterHealthCheckResponse& RegisterHealthCheckResponse::operator=(const RegisterHealthCheckResponse& other38) {
  message = other38.message;
  healthCheckToken = other38.healthCheckToken;
  __isset = other38.__isset;
  return *this;
}
void RegisterHealthCheckResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RegisterHealthCheckResponse(";
  out << "message="; (__isset.message ? (out << to_string(message)) : (out << "<null>"));
  out << ", " << "healthCheckToken="; (__isset.healthCheckToken ? (out << to_string(healthCheckToken)) : (out << "<null>"));
  out << ")";
}


RemoveSavedChannelRequest::~RemoveSavedChannelRequest() throw() {
}


void RemoveSavedChannelRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void RemoveSavedChannelRequest::__set_channel(const BananaChannel& val) {
  this->channel = val;
}

uint32_t RemoveSavedChannelRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->channel.read(iprot);
          this->__isset.channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RemoveSavedChannelRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RemoveSavedChannelRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->channel.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RemoveSavedChannelRequest &a, RemoveSavedChannelRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.channel, b.channel);
  swap(a.__isset, b.__isset);
}

RemoveSavedChannelRequest::RemoveSavedChannelRequest(const RemoveSavedChannelRequest& other39) {
  token = other39.token;
  channel = other39.channel;
  __isset = other39.__isset;
}
RemoveSavedChannelRequest& RemoveSavedChannelRequest::operator=(const RemoveSavedChannelRequest& other40) {
  token = other40.token;
  channel = other40.channel;
  __isset = other40.__isset;
  return *this;
}
void RemoveSavedChannelRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RemoveSavedChannelRequest(";
  out << "token=" << to_string(token);
  out << ", " << "channel=" << to_string(channel);
  out << ")";
}


RemoveSavedChannelResponse::~RemoveSavedChannelResponse() throw() {
}


void RemoveSavedChannelResponse::__set_message(const std::string& val) {
  this->message = val;
}

void RemoveSavedChannelResponse::__set_channel(const BananaChannel& val) {
  this->channel = val;
__isset.channel = true;
}

uint32_t RemoveSavedChannelResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->channel.read(iprot);
          this->__isset.channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RemoveSavedChannelResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RemoveSavedChannelResponse");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.channel) {
    xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->channel.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RemoveSavedChannelResponse &a, RemoveSavedChannelResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.channel, b.channel);
  swap(a.__isset, b.__isset);
}

RemoveSavedChannelResponse::RemoveSavedChannelResponse(const RemoveSavedChannelResponse& other41) {
  message = other41.message;
  channel = other41.channel;
  __isset = other41.__isset;
}
RemoveSavedChannelResponse& RemoveSavedChannelResponse::operator=(const RemoveSavedChannelResponse& other42) {
  message = other42.message;
  channel = other42.channel;
  __isset = other42.__isset;
  return *this;
}
void RemoveSavedChannelResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RemoveSavedChannelResponse(";
  out << "message=" << to_string(message);
  out << ", " << "channel="; (__isset.channel ? (out << to_string(channel)) : (out << "<null>"));
  out << ")";
}


RenewApplicationTokenRequest::~RenewApplicationTokenRequest() throw() {
}


void RenewApplicationTokenRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void RenewApplicationTokenRequest::__set_applicationToken(const ApplicationToken& val) {
  this->applicationToken = val;
}

void RenewApplicationTokenRequest::__set_timePeriod(const  ::aroma::banana::thrift::TimePeriod& val) {
  this->timePeriod = val;
}

void RenewApplicationTokenRequest::__set_applicationId(const std::string& val) {
  this->applicationId = val;
}

uint32_t RenewApplicationTokenRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->applicationToken.read(iprot);
          this->__isset.applicationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->timePeriod.read(iprot);
          this->__isset.timePeriod = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RenewApplicationTokenRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RenewApplicationTokenRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationToken", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->applicationToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timePeriod", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->timePeriod.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RenewApplicationTokenRequest &a, RenewApplicationTokenRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationToken, b.applicationToken);
  swap(a.timePeriod, b.timePeriod);
  swap(a.applicationId, b.applicationId);
  swap(a.__isset, b.__isset);
}

RenewApplicationTokenRequest::RenewApplicationTokenRequest(const RenewApplicationTokenRequest& other43) {
  token = other43.token;
  applicationToken = other43.applicationToken;
  timePeriod = other43.timePeriod;
  applicationId = other43.applicationId;
  __isset = other43.__isset;
}
RenewApplicationTokenRequest& RenewApplicationTokenRequest::operator=(const RenewApplicationTokenRequest& other44) {
  token = other44.token;
  applicationToken = other44.applicationToken;
  timePeriod = other44.timePeriod;
  applicationId = other44.applicationId;
  __isset = other44.__isset;
  return *this;
}
void RenewApplicationTokenRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RenewApplicationTokenRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationToken=" << to_string(applicationToken);
  out << ", " << "timePeriod=" << to_string(timePeriod);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ")";
}


RenewApplicationTokenResponse::~RenewApplicationTokenResponse() throw() {
}


void RenewApplicationTokenResponse::__set_serviceToken(const ApplicationToken& val) {
  this->serviceToken = val;
}

uint32_t RenewApplicationTokenResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->serviceToken.read(iprot);
          this->__isset.serviceToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RenewApplicationTokenResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RenewApplicationTokenResponse");

  xfer += oprot->writeFieldBegin("serviceToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->serviceToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RenewApplicationTokenResponse &a, RenewApplicationTokenResponse &b) {
  using ::std::swap;
  swap(a.serviceToken, b.serviceToken);
  swap(a.__isset, b.__isset);
}

RenewApplicationTokenResponse::RenewApplicationTokenResponse(const RenewApplicationTokenResponse& other45) {
  serviceToken = other45.serviceToken;
  __isset = other45.__isset;
}
RenewApplicationTokenResponse& RenewApplicationTokenResponse::operator=(const RenewApplicationTokenResponse& other46) {
  serviceToken = other46.serviceToken;
  __isset = other46.__isset;
  return *this;
}
void RenewApplicationTokenResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RenewApplicationTokenResponse(";
  out << "serviceToken=" << to_string(serviceToken);
  out << ")";
}


SaveChannelRequest::~SaveChannelRequest() throw() {
}


void SaveChannelRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void SaveChannelRequest::__set_channel(const BananaChannel& val) {
  this->channel = val;
}

uint32_t SaveChannelRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->channel.read(iprot);
          this->__isset.channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SaveChannelRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SaveChannelRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->channel.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SaveChannelRequest &a, SaveChannelRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.channel, b.channel);
  swap(a.__isset, b.__isset);
}

SaveChannelRequest::SaveChannelRequest(const SaveChannelRequest& other47) {
  token = other47.token;
  channel = other47.channel;
  __isset = other47.__isset;
}
SaveChannelRequest& SaveChannelRequest::operator=(const SaveChannelRequest& other48) {
  token = other48.token;
  channel = other48.channel;
  __isset = other48.__isset;
  return *this;
}
void SaveChannelRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SaveChannelRequest(";
  out << "token=" << to_string(token);
  out << ", " << "channel=" << to_string(channel);
  out << ")";
}


SaveChannelResponse::~SaveChannelResponse() throw() {
}


void SaveChannelResponse::__set_message(const std::string& val) {
  this->message = val;
}

void SaveChannelResponse::__set_channel(const BananaChannel& val) {
  this->channel = val;
__isset.channel = true;
}

uint32_t SaveChannelResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->channel.read(iprot);
          this->__isset.channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SaveChannelResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SaveChannelResponse");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.channel) {
    xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->channel.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SaveChannelResponse &a, SaveChannelResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.channel, b.channel);
  swap(a.__isset, b.__isset);
}

SaveChannelResponse::SaveChannelResponse(const SaveChannelResponse& other49) {
  message = other49.message;
  channel = other49.channel;
  __isset = other49.__isset;
}
SaveChannelResponse& SaveChannelResponse::operator=(const SaveChannelResponse& other50) {
  message = other50.message;
  channel = other50.channel;
  __isset = other50.__isset;
  return *this;
}
void SaveChannelResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SaveChannelResponse(";
  out << "message=" << to_string(message);
  out << ", " << "channel="; (__isset.channel ? (out << to_string(channel)) : (out << "<null>"));
  out << ")";
}


SignInRequest::~SignInRequest() throw() {
}


void SignInRequest::__set_credentials(const  ::aroma::banana::thrift::authentication::Credentials& val) {
  this->credentials = val;
}

void SignInRequest::__set_username(const std::string& val) {
  this->username = val;
}

uint32_t SignInRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->credentials.read(iprot);
          this->__isset.credentials = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SignInRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SignInRequest");

  xfer += oprot->writeFieldBegin("credentials", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->credentials.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SignInRequest &a, SignInRequest &b) {
  using ::std::swap;
  swap(a.credentials, b.credentials);
  swap(a.username, b.username);
  swap(a.__isset, b.__isset);
}

SignInRequest::SignInRequest(const SignInRequest& other51) {
  credentials = other51.credentials;
  username = other51.username;
  __isset = other51.__isset;
}
SignInRequest& SignInRequest::operator=(const SignInRequest& other52) {
  credentials = other52.credentials;
  username = other52.username;
  __isset = other52.__isset;
  return *this;
}
void SignInRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SignInRequest(";
  out << "credentials=" << to_string(credentials);
  out << ", " << "username=" << to_string(username);
  out << ")";
}


SignInResponse::~SignInResponse() throw() {
}


void SignInResponse::__set_userToken(const UserToken& val) {
  this->userToken = val;
}

uint32_t SignInResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->userToken.read(iprot);
          this->__isset.userToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SignInResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SignInResponse");

  xfer += oprot->writeFieldBegin("userToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->userToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SignInResponse &a, SignInResponse &b) {
  using ::std::swap;
  swap(a.userToken, b.userToken);
  swap(a.__isset, b.__isset);
}

SignInResponse::SignInResponse(const SignInResponse& other53) {
  userToken = other53.userToken;
  __isset = other53.__isset;
}
SignInResponse& SignInResponse::operator=(const SignInResponse& other54) {
  userToken = other54.userToken;
  __isset = other54.__isset;
  return *this;
}
void SignInResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SignInResponse(";
  out << "userToken=" << to_string(userToken);
  out << ")";
}


SignUpRequest::~SignUpRequest() throw() {
}


void SignUpRequest::__set_email(const std::string& val) {
  this->email = val;
}

void SignUpRequest::__set_name(const std::string& val) {
  this->name = val;
}

void SignUpRequest::__set_username(const std::string& val) {
  this->username = val;
}

void SignUpRequest::__set_organization(const std::string& val) {
  this->organization = val;
}

void SignUpRequest::__set_credentials(const  ::aroma::banana::thrift::authentication::Credentials& val) {
  this->credentials = val;
}

uint32_t SignUpRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organization);
          this->__isset.organization = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->credentials.read(iprot);
          this->__isset.credentials = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SignUpRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SignUpRequest");

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("organization", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->organization);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("credentials", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->credentials.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SignUpRequest &a, SignUpRequest &b) {
  using ::std::swap;
  swap(a.email, b.email);
  swap(a.name, b.name);
  swap(a.username, b.username);
  swap(a.organization, b.organization);
  swap(a.credentials, b.credentials);
  swap(a.__isset, b.__isset);
}

SignUpRequest::SignUpRequest(const SignUpRequest& other55) {
  email = other55.email;
  name = other55.name;
  username = other55.username;
  organization = other55.organization;
  credentials = other55.credentials;
  __isset = other55.__isset;
}
SignUpRequest& SignUpRequest::operator=(const SignUpRequest& other56) {
  email = other56.email;
  name = other56.name;
  username = other56.username;
  organization = other56.organization;
  credentials = other56.credentials;
  __isset = other56.__isset;
  return *this;
}
void SignUpRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SignUpRequest(";
  out << "email=" << to_string(email);
  out << ", " << "name=" << to_string(name);
  out << ", " << "username=" << to_string(username);
  out << ", " << "organization=" << to_string(organization);
  out << ", " << "credentials=" << to_string(credentials);
  out << ")";
}


SignUpResponse::~SignUpResponse() throw() {
}


void SignUpResponse::__set_userToken(const UserToken& val) {
  this->userToken = val;
}

void SignUpResponse::__set_account(const  ::aroma::banana::thrift::authentication::AromaAccount& val) {
  this->account = val;
}

uint32_t SignUpResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->userToken.read(iprot);
          this->__isset.userToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->account.read(iprot);
          this->__isset.account = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SignUpResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SignUpResponse");

  xfer += oprot->writeFieldBegin("userToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->userToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("account", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->account.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SignUpResponse &a, SignUpResponse &b) {
  using ::std::swap;
  swap(a.userToken, b.userToken);
  swap(a.account, b.account);
  swap(a.__isset, b.__isset);
}

SignUpResponse::SignUpResponse(const SignUpResponse& other57) {
  userToken = other57.userToken;
  account = other57.account;
  __isset = other57.__isset;
}
SignUpResponse& SignUpResponse::operator=(const SignUpResponse& other58) {
  userToken = other58.userToken;
  account = other58.account;
  __isset = other58.__isset;
  return *this;
}
void SignUpResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SignUpResponse(";
  out << "userToken=" << to_string(userToken);
  out << ", " << "account=" << to_string(account);
  out << ")";
}


SnoozeChannelRequest::~SnoozeChannelRequest() throw() {
}


void SnoozeChannelRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void SnoozeChannelRequest::__set_channel(const BananaChannel& val) {
  this->channel = val;
}

void SnoozeChannelRequest::__set_applicationId(const std::string& val) {
  this->applicationId = val;
__isset.applicationId = true;
}

uint32_t SnoozeChannelRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->channel.read(iprot);
          this->__isset.channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SnoozeChannelRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SnoozeChannelRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->channel.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.applicationId) {
    xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->applicationId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SnoozeChannelRequest &a, SnoozeChannelRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.channel, b.channel);
  swap(a.applicationId, b.applicationId);
  swap(a.__isset, b.__isset);
}

SnoozeChannelRequest::SnoozeChannelRequest(const SnoozeChannelRequest& other59) {
  token = other59.token;
  channel = other59.channel;
  applicationId = other59.applicationId;
  __isset = other59.__isset;
}
SnoozeChannelRequest& SnoozeChannelRequest::operator=(const SnoozeChannelRequest& other60) {
  token = other60.token;
  channel = other60.channel;
  applicationId = other60.applicationId;
  __isset = other60.__isset;
  return *this;
}
void SnoozeChannelRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SnoozeChannelRequest(";
  out << "token=" << to_string(token);
  out << ", " << "channel=" << to_string(channel);
  out << ", " << "applicationId="; (__isset.applicationId ? (out << to_string(applicationId)) : (out << "<null>"));
  out << ")";
}


SnoozeChannelResponse::~SnoozeChannelResponse() throw() {
}


void SnoozeChannelResponse::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t SnoozeChannelResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SnoozeChannelResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SnoozeChannelResponse");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SnoozeChannelResponse &a, SnoozeChannelResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

SnoozeChannelResponse::SnoozeChannelResponse(const SnoozeChannelResponse& other61) {
  message = other61.message;
  __isset = other61.__isset;
}
SnoozeChannelResponse& SnoozeChannelResponse::operator=(const SnoozeChannelResponse& other62) {
  message = other62.message;
  __isset = other62.__isset;
  return *this;
}
void SnoozeChannelResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SnoozeChannelResponse(";
  out << "message=" << to_string(message);
  out << ")";
}


SubscribeToApplicationRequest::~SubscribeToApplicationRequest() throw() {
}


void SubscribeToApplicationRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void SubscribeToApplicationRequest::__set_applicationName(const std::string& val) {
  this->applicationName = val;
}

void SubscribeToApplicationRequest::__set_applicationId(const std::string& val) {
  this->applicationId = val;
}

void SubscribeToApplicationRequest::__set_organization(const std::string& val) {
  this->organization = val;
__isset.organization = true;
}

void SubscribeToApplicationRequest::__set_shared(const bool val) {
  this->shared = val;
__isset.shared = true;
}

uint32_t SubscribeToApplicationRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationName);
          this->__isset.applicationName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organization);
          this->__isset.organization = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->shared);
          this->__isset.shared = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SubscribeToApplicationRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SubscribeToApplicationRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.organization) {
    xfer += oprot->writeFieldBegin("organization", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->organization);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.shared) {
    xfer += oprot->writeFieldBegin("shared", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->shared);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SubscribeToApplicationRequest &a, SubscribeToApplicationRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationName, b.applicationName);
  swap(a.applicationId, b.applicationId);
  swap(a.organization, b.organization);
  swap(a.shared, b.shared);
  swap(a.__isset, b.__isset);
}

SubscribeToApplicationRequest::SubscribeToApplicationRequest(const SubscribeToApplicationRequest& other63) {
  token = other63.token;
  applicationName = other63.applicationName;
  applicationId = other63.applicationId;
  organization = other63.organization;
  shared = other63.shared;
  __isset = other63.__isset;
}
SubscribeToApplicationRequest& SubscribeToApplicationRequest::operator=(const SubscribeToApplicationRequest& other64) {
  token = other64.token;
  applicationName = other64.applicationName;
  applicationId = other64.applicationId;
  organization = other64.organization;
  shared = other64.shared;
  __isset = other64.__isset;
  return *this;
}
void SubscribeToApplicationRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SubscribeToApplicationRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationName=" << to_string(applicationName);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ", " << "organization="; (__isset.organization ? (out << to_string(organization)) : (out << "<null>"));
  out << ", " << "shared="; (__isset.shared ? (out << to_string(shared)) : (out << "<null>"));
  out << ")";
}


SubscribeToApplicationResponse::~SubscribeToApplicationResponse() throw() {
}


void SubscribeToApplicationResponse::__set_message(const std::string& val) {
  this->message = val;
}

void SubscribeToApplicationResponse::__set_channel(const BananaChannel& val) {
  this->channel = val;
}

uint32_t SubscribeToApplicationResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->channel.read(iprot);
          this->__isset.channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SubscribeToApplicationResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SubscribeToApplicationResponse");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->channel.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SubscribeToApplicationResponse &a, SubscribeToApplicationResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.channel, b.channel);
  swap(a.__isset, b.__isset);
}

SubscribeToApplicationResponse::SubscribeToApplicationResponse(const SubscribeToApplicationResponse& other65) {
  message = other65.message;
  channel = other65.channel;
  __isset = other65.__isset;
}
SubscribeToApplicationResponse& SubscribeToApplicationResponse::operator=(const SubscribeToApplicationResponse& other66) {
  message = other66.message;
  channel = other66.channel;
  __isset = other66.__isset;
  return *this;
}
void SubscribeToApplicationResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SubscribeToApplicationResponse(";
  out << "message=" << to_string(message);
  out << ", " << "channel=" << to_string(channel);
  out << ")";
}


GetApplicationInfoRequest::~GetApplicationInfoRequest() throw() {
}


void GetApplicationInfoRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void GetApplicationInfoRequest::__set_applicationId(const std::string& val) {
  this->applicationId = val;
}

uint32_t GetApplicationInfoRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetApplicationInfoRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetApplicationInfoRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetApplicationInfoRequest &a, GetApplicationInfoRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationId, b.applicationId);
  swap(a.__isset, b.__isset);
}

GetApplicationInfoRequest::GetApplicationInfoRequest(const GetApplicationInfoRequest& other67) {
  token = other67.token;
  applicationId = other67.applicationId;
  __isset = other67.__isset;
}
GetApplicationInfoRequest& GetApplicationInfoRequest::operator=(const GetApplicationInfoRequest& other68) {
  token = other68.token;
  applicationId = other68.applicationId;
  __isset = other68.__isset;
  return *this;
}
void GetApplicationInfoRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetApplicationInfoRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ")";
}


GetApplicationInfoResponse::~GetApplicationInfoResponse() throw() {
}


void GetApplicationInfoResponse::__set_applicationInfo(const Application& val) {
  this->applicationInfo = val;
}

uint32_t GetApplicationInfoResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->applicationInfo.read(iprot);
          this->__isset.applicationInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetApplicationInfoResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetApplicationInfoResponse");

  xfer += oprot->writeFieldBegin("applicationInfo", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->applicationInfo.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetApplicationInfoResponse &a, GetApplicationInfoResponse &b) {
  using ::std::swap;
  swap(a.applicationInfo, b.applicationInfo);
  swap(a.__isset, b.__isset);
}

GetApplicationInfoResponse::GetApplicationInfoResponse(const GetApplicationInfoResponse& other69) {
  applicationInfo = other69.applicationInfo;
  __isset = other69.__isset;
}
GetApplicationInfoResponse& GetApplicationInfoResponse::operator=(const GetApplicationInfoResponse& other70) {
  applicationInfo = other70.applicationInfo;
  __isset = other70.__isset;
  return *this;
}
void GetApplicationInfoResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetApplicationInfoResponse(";
  out << "applicationInfo=" << to_string(applicationInfo);
  out << ")";
}


GetDashboardRequest::~GetDashboardRequest() throw() {
}


void GetDashboardRequest::__set_token(const UserToken& val) {
  this->token = val;
}

uint32_t GetDashboardRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetDashboardRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetDashboardRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetDashboardRequest &a, GetDashboardRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.__isset, b.__isset);
}

GetDashboardRequest::GetDashboardRequest(const GetDashboardRequest& other71) {
  token = other71.token;
  __isset = other71.__isset;
}
GetDashboardRequest& GetDashboardRequest::operator=(const GetDashboardRequest& other72) {
  token = other72.token;
  __isset = other72.__isset;
  return *this;
}
void GetDashboardRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetDashboardRequest(";
  out << "token=" << to_string(token);
  out << ")";
}


GetDashboardResponse::~GetDashboardResponse() throw() {
}


void GetDashboardResponse::__set_unreadMessageCount(const int val) {
  this->unreadMessageCount = val;
}

void GetDashboardResponse::__set_totalMessagesLastHour(const int val) {
  this->totalMessagesLastHour = val;
}

void GetDashboardResponse::__set_totalMessagesLast24hrs(const int val) {
  this->totalMessagesLast24hrs = val;
}

void GetDashboardResponse::__set_recentMessages(const std::vector< ::aroma::banana::thrift::Message> & val) {
  this->recentMessages = val;
}

uint32_t GetDashboardResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unreadMessageCount);
          this->__isset.unreadMessageCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalMessagesLastHour);
          this->__isset.totalMessagesLastHour = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalMessagesLast24hrs);
          this->__isset.totalMessagesLast24hrs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->recentMessages.clear();
            uint32_t _size73;
            ::apache::thrift::protocol::TType _etype76;
            xfer += iprot->readListBegin(_etype76, _size73);
            this->recentMessages.resize(_size73);
            uint32_t _i77;
            for (_i77 = 0; _i77 < _size73; ++_i77)
            {
              xfer += this->recentMessages[_i77].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.recentMessages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetDashboardResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetDashboardResponse");

  xfer += oprot->writeFieldBegin("unreadMessageCount", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->unreadMessageCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalMessagesLastHour", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->totalMessagesLastHour);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalMessagesLast24hrs", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->totalMessagesLast24hrs);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recentMessages", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->recentMessages.size()));
    std::vector< ::aroma::banana::thrift::Message> ::const_iterator _iter78;
    for (_iter78 = this->recentMessages.begin(); _iter78 != this->recentMessages.end(); ++_iter78)
    {
      xfer += (*_iter78).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetDashboardResponse &a, GetDashboardResponse &b) {
  using ::std::swap;
  swap(a.unreadMessageCount, b.unreadMessageCount);
  swap(a.totalMessagesLastHour, b.totalMessagesLastHour);
  swap(a.totalMessagesLast24hrs, b.totalMessagesLast24hrs);
  swap(a.recentMessages, b.recentMessages);
  swap(a.__isset, b.__isset);
}

GetDashboardResponse::GetDashboardResponse(const GetDashboardResponse& other79) {
  unreadMessageCount = other79.unreadMessageCount;
  totalMessagesLastHour = other79.totalMessagesLastHour;
  totalMessagesLast24hrs = other79.totalMessagesLast24hrs;
  recentMessages = other79.recentMessages;
  __isset = other79.__isset;
}
GetDashboardResponse& GetDashboardResponse::operator=(const GetDashboardResponse& other80) {
  unreadMessageCount = other80.unreadMessageCount;
  totalMessagesLastHour = other80.totalMessagesLastHour;
  totalMessagesLast24hrs = other80.totalMessagesLast24hrs;
  recentMessages = other80.recentMessages;
  __isset = other80.__isset;
  return *this;
}
void GetDashboardResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetDashboardResponse(";
  out << "unreadMessageCount=" << to_string(unreadMessageCount);
  out << ", " << "totalMessagesLastHour=" << to_string(totalMessagesLastHour);
  out << ", " << "totalMessagesLast24hrs=" << to_string(totalMessagesLast24hrs);
  out << ", " << "recentMessages=" << to_string(recentMessages);
  out << ")";
}


GetMessagesRequest::~GetMessagesRequest() throw() {
}


void GetMessagesRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void GetMessagesRequest::__set_applicationId(const std::string& val) {
  this->applicationId = val;
__isset.applicationId = true;
}

void GetMessagesRequest::__set_limit(const int val) {
  this->limit = val;
__isset.limit = true;
}

uint32_t GetMessagesRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetMessagesRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetMessagesRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.applicationId) {
    xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->applicationId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.limit) {
    xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->limit);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetMessagesRequest &a, GetMessagesRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationId, b.applicationId);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

GetMessagesRequest::GetMessagesRequest(const GetMessagesRequest& other81) {
  token = other81.token;
  applicationId = other81.applicationId;
  limit = other81.limit;
  __isset = other81.__isset;
}
GetMessagesRequest& GetMessagesRequest::operator=(const GetMessagesRequest& other82) {
  token = other82.token;
  applicationId = other82.applicationId;
  limit = other82.limit;
  __isset = other82.__isset;
  return *this;
}
void GetMessagesRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetMessagesRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationId="; (__isset.applicationId ? (out << to_string(applicationId)) : (out << "<null>"));
  out << ", " << "limit="; (__isset.limit ? (out << to_string(limit)) : (out << "<null>"));
  out << ")";
}


GetMessagesResponse::~GetMessagesResponse() throw() {
}


void GetMessagesResponse::__set_messages(const std::vector< ::aroma::banana::thrift::Message> & val) {
  this->messages = val;
}

void GetMessagesResponse::__set_totalMessagesMatching(const int val) {
  this->totalMessagesMatching = val;
__isset.totalMessagesMatching = true;
}

uint32_t GetMessagesResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->messages.clear();
            uint32_t _size83;
            ::apache::thrift::protocol::TType _etype86;
            xfer += iprot->readListBegin(_etype86, _size83);
            this->messages.resize(_size83);
            uint32_t _i87;
            for (_i87 = 0; _i87 < _size83; ++_i87)
            {
              xfer += this->messages[_i87].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.messages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalMessagesMatching);
          this->__isset.totalMessagesMatching = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetMessagesResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetMessagesResponse");

  xfer += oprot->writeFieldBegin("messages", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->messages.size()));
    std::vector< ::aroma::banana::thrift::Message> ::const_iterator _iter88;
    for (_iter88 = this->messages.begin(); _iter88 != this->messages.end(); ++_iter88)
    {
      xfer += (*_iter88).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.totalMessagesMatching) {
    xfer += oprot->writeFieldBegin("totalMessagesMatching", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->totalMessagesMatching);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetMessagesResponse &a, GetMessagesResponse &b) {
  using ::std::swap;
  swap(a.messages, b.messages);
  swap(a.totalMessagesMatching, b.totalMessagesMatching);
  swap(a.__isset, b.__isset);
}

GetMessagesResponse::GetMessagesResponse(const GetMessagesResponse& other89) {
  messages = other89.messages;
  totalMessagesMatching = other89.totalMessagesMatching;
  __isset = other89.__isset;
}
GetMessagesResponse& GetMessagesResponse::operator=(const GetMessagesResponse& other90) {
  messages = other90.messages;
  totalMessagesMatching = other90.totalMessagesMatching;
  __isset = other90.__isset;
  return *this;
}
void GetMessagesResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetMessagesResponse(";
  out << "messages=" << to_string(messages);
  out << ", " << "totalMessagesMatching="; (__isset.totalMessagesMatching ? (out << to_string(totalMessagesMatching)) : (out << "<null>"));
  out << ")";
}


GetMyApplicationsRequest::~GetMyApplicationsRequest() throw() {
}


void GetMyApplicationsRequest::__set_token(const UserToken& val) {
  this->token = val;
}

uint32_t GetMyApplicationsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetMyApplicationsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetMyApplicationsRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetMyApplicationsRequest &a, GetMyApplicationsRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.__isset, b.__isset);
}

GetMyApplicationsRequest::GetMyApplicationsRequest(const GetMyApplicationsRequest& other91) {
  token = other91.token;
  __isset = other91.__isset;
}
GetMyApplicationsRequest& GetMyApplicationsRequest::operator=(const GetMyApplicationsRequest& other92) {
  token = other92.token;
  __isset = other92.__isset;
  return *this;
}
void GetMyApplicationsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetMyApplicationsRequest(";
  out << "token=" << to_string(token);
  out << ")";
}


GetMyApplicationsResponse::~GetMyApplicationsResponse() throw() {
}


void GetMyApplicationsResponse::__set_applications(const std::vector<Application> & val) {
  this->applications = val;
}

uint32_t GetMyApplicationsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->applications.clear();
            uint32_t _size93;
            ::apache::thrift::protocol::TType _etype96;
            xfer += iprot->readListBegin(_etype96, _size93);
            this->applications.resize(_size93);
            uint32_t _i97;
            for (_i97 = 0; _i97 < _size93; ++_i97)
            {
              xfer += this->applications[_i97].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.applications = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetMyApplicationsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetMyApplicationsResponse");

  xfer += oprot->writeFieldBegin("applications", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->applications.size()));
    std::vector<Application> ::const_iterator _iter98;
    for (_iter98 = this->applications.begin(); _iter98 != this->applications.end(); ++_iter98)
    {
      xfer += (*_iter98).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetMyApplicationsResponse &a, GetMyApplicationsResponse &b) {
  using ::std::swap;
  swap(a.applications, b.applications);
  swap(a.__isset, b.__isset);
}

GetMyApplicationsResponse::GetMyApplicationsResponse(const GetMyApplicationsResponse& other99) {
  applications = other99.applications;
  __isset = other99.__isset;
}
GetMyApplicationsResponse& GetMyApplicationsResponse::operator=(const GetMyApplicationsResponse& other100) {
  applications = other100.applications;
  __isset = other100.__isset;
  return *this;
}
void GetMyApplicationsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetMyApplicationsResponse(";
  out << "applications=" << to_string(applications);
  out << ")";
}


GetApplicationSubscribersRequest::~GetApplicationSubscribersRequest() throw() {
}


void GetApplicationSubscribersRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void GetApplicationSubscribersRequest::__set_applicationId(const std::string& val) {
  this->applicationId = val;
}

void GetApplicationSubscribersRequest::__set_organization(const std::string& val) {
  this->organization = val;
}

uint32_t GetApplicationSubscribersRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organization);
          this->__isset.organization = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetApplicationSubscribersRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetApplicationSubscribersRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("organization", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->organization);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetApplicationSubscribersRequest &a, GetApplicationSubscribersRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationId, b.applicationId);
  swap(a.organization, b.organization);
  swap(a.__isset, b.__isset);
}

GetApplicationSubscribersRequest::GetApplicationSubscribersRequest(const GetApplicationSubscribersRequest& other101) {
  token = other101.token;
  applicationId = other101.applicationId;
  organization = other101.organization;
  __isset = other101.__isset;
}
GetApplicationSubscribersRequest& GetApplicationSubscribersRequest::operator=(const GetApplicationSubscribersRequest& other102) {
  token = other102.token;
  applicationId = other102.applicationId;
  organization = other102.organization;
  __isset = other102.__isset;
  return *this;
}
void GetApplicationSubscribersRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetApplicationSubscribersRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ", " << "organization=" << to_string(organization);
  out << ")";
}


GetApplicationSubscribersResponse::~GetApplicationSubscribersResponse() throw() {
}


void GetApplicationSubscribersResponse::__set_subscribers(const std::vector<User> & val) {
  this->subscribers = val;
}

uint32_t GetApplicationSubscribersResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->subscribers.clear();
            uint32_t _size103;
            ::apache::thrift::protocol::TType _etype106;
            xfer += iprot->readListBegin(_etype106, _size103);
            this->subscribers.resize(_size103);
            uint32_t _i107;
            for (_i107 = 0; _i107 < _size103; ++_i107)
            {
              xfer += this->subscribers[_i107].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.subscribers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetApplicationSubscribersResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetApplicationSubscribersResponse");

  xfer += oprot->writeFieldBegin("subscribers", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->subscribers.size()));
    std::vector<User> ::const_iterator _iter108;
    for (_iter108 = this->subscribers.begin(); _iter108 != this->subscribers.end(); ++_iter108)
    {
      xfer += (*_iter108).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetApplicationSubscribersResponse &a, GetApplicationSubscribersResponse &b) {
  using ::std::swap;
  swap(a.subscribers, b.subscribers);
  swap(a.__isset, b.__isset);
}

GetApplicationSubscribersResponse::GetApplicationSubscribersResponse(const GetApplicationSubscribersResponse& other109) {
  subscribers = other109.subscribers;
  __isset = other109.__isset;
}
GetApplicationSubscribersResponse& GetApplicationSubscribersResponse::operator=(const GetApplicationSubscribersResponse& other110) {
  subscribers = other110.subscribers;
  __isset = other110.__isset;
  return *this;
}
void GetApplicationSubscribersResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetApplicationSubscribersResponse(";
  out << "subscribers=" << to_string(subscribers);
  out << ")";
}


GetMySavedChannelsRequest::~GetMySavedChannelsRequest() throw() {
}


void GetMySavedChannelsRequest::__set_token(const UserToken& val) {
  this->token = val;
}

uint32_t GetMySavedChannelsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetMySavedChannelsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetMySavedChannelsRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetMySavedChannelsRequest &a, GetMySavedChannelsRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.__isset, b.__isset);
}

GetMySavedChannelsRequest::GetMySavedChannelsRequest(const GetMySavedChannelsRequest& other111) {
  token = other111.token;
  __isset = other111.__isset;
}
GetMySavedChannelsRequest& GetMySavedChannelsRequest::operator=(const GetMySavedChannelsRequest& other112) {
  token = other112.token;
  __isset = other112.__isset;
  return *this;
}
void GetMySavedChannelsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetMySavedChannelsRequest(";
  out << "token=" << to_string(token);
  out << ")";
}


GetMySavedChannelsResponse::~GetMySavedChannelsResponse() throw() {
}


void GetMySavedChannelsResponse::__set_channels(const std::vector<BananaChannel> & val) {
  this->channels = val;
}

uint32_t GetMySavedChannelsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->channels.clear();
            uint32_t _size113;
            ::apache::thrift::protocol::TType _etype116;
            xfer += iprot->readListBegin(_etype116, _size113);
            this->channels.resize(_size113);
            uint32_t _i117;
            for (_i117 = 0; _i117 < _size113; ++_i117)
            {
              xfer += this->channels[_i117].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.channels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetMySavedChannelsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetMySavedChannelsResponse");

  xfer += oprot->writeFieldBegin("channels", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->channels.size()));
    std::vector<BananaChannel> ::const_iterator _iter118;
    for (_iter118 = this->channels.begin(); _iter118 != this->channels.end(); ++_iter118)
    {
      xfer += (*_iter118).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetMySavedChannelsResponse &a, GetMySavedChannelsResponse &b) {
  using ::std::swap;
  swap(a.channels, b.channels);
  swap(a.__isset, b.__isset);
}

GetMySavedChannelsResponse::GetMySavedChannelsResponse(const GetMySavedChannelsResponse& other119) {
  channels = other119.channels;
  __isset = other119.__isset;
}
GetMySavedChannelsResponse& GetMySavedChannelsResponse::operator=(const GetMySavedChannelsResponse& other120) {
  channels = other120.channels;
  __isset = other120.__isset;
  return *this;
}
void GetMySavedChannelsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetMySavedChannelsResponse(";
  out << "channels=" << to_string(channels);
  out << ")";
}


GetActivityRequest::~GetActivityRequest() throw() {
}


void GetActivityRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void GetActivityRequest::__set_limit(const int val) {
  this->limit = val;
__isset.limit = true;
}

uint32_t GetActivityRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetActivityRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetActivityRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.limit) {
    xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->limit);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetActivityRequest &a, GetActivityRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

GetActivityRequest::GetActivityRequest(const GetActivityRequest& other121) {
  token = other121.token;
  limit = other121.limit;
  __isset = other121.__isset;
}
GetActivityRequest& GetActivityRequest::operator=(const GetActivityRequest& other122) {
  token = other122.token;
  limit = other122.limit;
  __isset = other122.__isset;
  return *this;
}
void GetActivityRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetActivityRequest(";
  out << "token=" << to_string(token);
  out << ", " << "limit="; (__isset.limit ? (out << to_string(limit)) : (out << "<null>"));
  out << ")";
}


GetActivityResponse::~GetActivityResponse() throw() {
}


void GetActivityResponse::__set_events(const std::vector< ::aroma::banana::thrift::notifications::Event> & val) {
  this->events = val;
}

uint32_t GetActivityResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->events.clear();
            uint32_t _size123;
            ::apache::thrift::protocol::TType _etype126;
            xfer += iprot->readListBegin(_etype126, _size123);
            this->events.resize(_size123);
            uint32_t _i127;
            for (_i127 = 0; _i127 < _size123; ++_i127)
            {
              xfer += this->events[_i127].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.events = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetActivityResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetActivityResponse");

  xfer += oprot->writeFieldBegin("events", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->events.size()));
    std::vector< ::aroma::banana::thrift::notifications::Event> ::const_iterator _iter128;
    for (_iter128 = this->events.begin(); _iter128 != this->events.end(); ++_iter128)
    {
      xfer += (*_iter128).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetActivityResponse &a, GetActivityResponse &b) {
  using ::std::swap;
  swap(a.events, b.events);
  swap(a.__isset, b.__isset);
}

GetActivityResponse::GetActivityResponse(const GetActivityResponse& other129) {
  events = other129.events;
  __isset = other129.__isset;
}
GetActivityResponse& GetActivityResponse::operator=(const GetActivityResponse& other130) {
  events = other130.events;
  __isset = other130.__isset;
  return *this;
}
void GetActivityResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetActivityResponse(";
  out << "events=" << to_string(events);
  out << ")";
}


GetServiceAnnouncementsRequest::~GetServiceAnnouncementsRequest() throw() {
}


void GetServiceAnnouncementsRequest::__set_token(const UserToken& val) {
  this->token = val;
}

uint32_t GetServiceAnnouncementsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetServiceAnnouncementsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetServiceAnnouncementsRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetServiceAnnouncementsRequest &a, GetServiceAnnouncementsRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.__isset, b.__isset);
}

GetServiceAnnouncementsRequest::GetServiceAnnouncementsRequest(const GetServiceAnnouncementsRequest& other131) {
  token = other131.token;
  __isset = other131.__isset;
}
GetServiceAnnouncementsRequest& GetServiceAnnouncementsRequest::operator=(const GetServiceAnnouncementsRequest& other132) {
  token = other132.token;
  __isset = other132.__isset;
  return *this;
}
void GetServiceAnnouncementsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetServiceAnnouncementsRequest(";
  out << "token=" << to_string(token);
  out << ")";
}


GetServiceAnnouncementsResponse::~GetServiceAnnouncementsResponse() throw() {
}


void GetServiceAnnouncementsResponse::__set_serviceAnnouncements(const std::vector< ::aroma::banana::thrift::ServiceAnnouncement> & val) {
  this->serviceAnnouncements = val;
__isset.serviceAnnouncements = true;
}

uint32_t GetServiceAnnouncementsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->serviceAnnouncements.clear();
            uint32_t _size133;
            ::apache::thrift::protocol::TType _etype136;
            xfer += iprot->readListBegin(_etype136, _size133);
            this->serviceAnnouncements.resize(_size133);
            uint32_t _i137;
            for (_i137 = 0; _i137 < _size133; ++_i137)
            {
              xfer += this->serviceAnnouncements[_i137].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.serviceAnnouncements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetServiceAnnouncementsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetServiceAnnouncementsResponse");

  if (this->__isset.serviceAnnouncements) {
    xfer += oprot->writeFieldBegin("serviceAnnouncements", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->serviceAnnouncements.size()));
      std::vector< ::aroma::banana::thrift::ServiceAnnouncement> ::const_iterator _iter138;
      for (_iter138 = this->serviceAnnouncements.begin(); _iter138 != this->serviceAnnouncements.end(); ++_iter138)
      {
        xfer += (*_iter138).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetServiceAnnouncementsResponse &a, GetServiceAnnouncementsResponse &b) {
  using ::std::swap;
  swap(a.serviceAnnouncements, b.serviceAnnouncements);
  swap(a.__isset, b.__isset);
}

GetServiceAnnouncementsResponse::GetServiceAnnouncementsResponse(const GetServiceAnnouncementsResponse& other139) {
  serviceAnnouncements = other139.serviceAnnouncements;
  __isset = other139.__isset;
}
GetServiceAnnouncementsResponse& GetServiceAnnouncementsResponse::operator=(const GetServiceAnnouncementsResponse& other140) {
  serviceAnnouncements = other140.serviceAnnouncements;
  __isset = other140.__isset;
  return *this;
}
void GetServiceAnnouncementsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetServiceAnnouncementsResponse(";
  out << "serviceAnnouncements="; (__isset.serviceAnnouncements ? (out << to_string(serviceAnnouncements)) : (out << "<null>"));
  out << ")";
}


SearchForApplicationsRequest::~SearchForApplicationsRequest() throw() {
}


void SearchForApplicationsRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void SearchForApplicationsRequest::__set_applicationName(const std::string& val) {
  this->applicationName = val;
}

void SearchForApplicationsRequest::__set_organization(const std::string& val) {
  this->organization = val;
__isset.organization = true;
}

uint32_t SearchForApplicationsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationName);
          this->__isset.applicationName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organization);
          this->__isset.organization = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SearchForApplicationsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SearchForApplicationsRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.organization) {
    xfer += oprot->writeFieldBegin("organization", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->organization);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SearchForApplicationsRequest &a, SearchForApplicationsRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationName, b.applicationName);
  swap(a.organization, b.organization);
  swap(a.__isset, b.__isset);
}

SearchForApplicationsRequest::SearchForApplicationsRequest(const SearchForApplicationsRequest& other141) {
  token = other141.token;
  applicationName = other141.applicationName;
  organization = other141.organization;
  __isset = other141.__isset;
}
SearchForApplicationsRequest& SearchForApplicationsRequest::operator=(const SearchForApplicationsRequest& other142) {
  token = other142.token;
  applicationName = other142.applicationName;
  organization = other142.organization;
  __isset = other142.__isset;
  return *this;
}
void SearchForApplicationsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SearchForApplicationsRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationName=" << to_string(applicationName);
  out << ", " << "organization="; (__isset.organization ? (out << to_string(organization)) : (out << "<null>"));
  out << ")";
}


SearchForApplicationsResponse::~SearchForApplicationsResponse() throw() {
}


void SearchForApplicationsResponse::__set_applications(const std::vector<Application> & val) {
  this->applications = val;
}

uint32_t SearchForApplicationsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->applications.clear();
            uint32_t _size143;
            ::apache::thrift::protocol::TType _etype146;
            xfer += iprot->readListBegin(_etype146, _size143);
            this->applications.resize(_size143);
            uint32_t _i147;
            for (_i147 = 0; _i147 < _size143; ++_i147)
            {
              xfer += this->applications[_i147].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.applications = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SearchForApplicationsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SearchForApplicationsResponse");

  xfer += oprot->writeFieldBegin("applications", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->applications.size()));
    std::vector<Application> ::const_iterator _iter148;
    for (_iter148 = this->applications.begin(); _iter148 != this->applications.end(); ++_iter148)
    {
      xfer += (*_iter148).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SearchForApplicationsResponse &a, SearchForApplicationsResponse &b) {
  using ::std::swap;
  swap(a.applications, b.applications);
  swap(a.__isset, b.__isset);
}

SearchForApplicationsResponse::SearchForApplicationsResponse(const SearchForApplicationsResponse& other149) {
  applications = other149.applications;
  __isset = other149.__isset;
}
SearchForApplicationsResponse& SearchForApplicationsResponse::operator=(const SearchForApplicationsResponse& other150) {
  applications = other150.applications;
  __isset = other150.__isset;
  return *this;
}
void SearchForApplicationsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SearchForApplicationsResponse(";
  out << "applications=" << to_string(applications);
  out << ")";
}

}}}} // namespace
