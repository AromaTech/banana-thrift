/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "BananaService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace aroma { namespace banana { namespace thrift { namespace service {


DeleteMessageRequest::~DeleteMessageRequest() throw() {
}


void DeleteMessageRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void DeleteMessageRequest::__set_messageId(const std::string& val) {
  this->messageId = val;
}

void DeleteMessageRequest::__set_applicationId(const std::string& val) {
  this->applicationId = val;
}

void DeleteMessageRequest::__set_messageIds(const std::vector<std::string> & val) {
  this->messageIds = val;
__isset.messageIds = true;
}

uint32_t DeleteMessageRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->messageIds.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->messageIds.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readString(this->messageIds[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.messageIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteMessageRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeleteMessageRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->messageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.messageIds) {
    xfer += oprot->writeFieldBegin("messageIds", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->messageIds.size()));
      std::vector<std::string> ::const_iterator _iter5;
      for (_iter5 = this->messageIds.begin(); _iter5 != this->messageIds.end(); ++_iter5)
      {
        xfer += oprot->writeString((*_iter5));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteMessageRequest &a, DeleteMessageRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.messageId, b.messageId);
  swap(a.applicationId, b.applicationId);
  swap(a.messageIds, b.messageIds);
  swap(a.__isset, b.__isset);
}

DeleteMessageRequest::DeleteMessageRequest(const DeleteMessageRequest& other6) {
  token = other6.token;
  messageId = other6.messageId;
  applicationId = other6.applicationId;
  messageIds = other6.messageIds;
  __isset = other6.__isset;
}
DeleteMessageRequest& DeleteMessageRequest::operator=(const DeleteMessageRequest& other7) {
  token = other7.token;
  messageId = other7.messageId;
  applicationId = other7.applicationId;
  messageIds = other7.messageIds;
  __isset = other7.__isset;
  return *this;
}
void DeleteMessageRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeleteMessageRequest(";
  out << "token=" << to_string(token);
  out << ", " << "messageId=" << to_string(messageId);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ", " << "messageIds="; (__isset.messageIds ? (out << to_string(messageIds)) : (out << "<null>"));
  out << ")";
}


DeleteMessageResponse::~DeleteMessageResponse() throw() {
}


void DeleteMessageResponse::__set_messagesDeleted(const int val) {
  this->messagesDeleted = val;
__isset.messagesDeleted = true;
}

uint32_t DeleteMessageResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->messagesDeleted);
          this->__isset.messagesDeleted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteMessageResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeleteMessageResponse");

  if (this->__isset.messagesDeleted) {
    xfer += oprot->writeFieldBegin("messagesDeleted", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->messagesDeleted);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteMessageResponse &a, DeleteMessageResponse &b) {
  using ::std::swap;
  swap(a.messagesDeleted, b.messagesDeleted);
  swap(a.__isset, b.__isset);
}

DeleteMessageResponse::DeleteMessageResponse(const DeleteMessageResponse& other8) {
  messagesDeleted = other8.messagesDeleted;
  __isset = other8.__isset;
}
DeleteMessageResponse& DeleteMessageResponse::operator=(const DeleteMessageResponse& other9) {
  messagesDeleted = other9.messagesDeleted;
  __isset = other9.__isset;
  return *this;
}
void DeleteMessageResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeleteMessageResponse(";
  out << "messagesDeleted="; (__isset.messagesDeleted ? (out << to_string(messagesDeleted)) : (out << "<null>"));
  out << ")";
}


DismissMessageRequest::~DismissMessageRequest() throw() {
}


void DismissMessageRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void DismissMessageRequest::__set_messageId(const std::string& val) {
  this->messageId = val;
}

void DismissMessageRequest::__set_applicationId(const std::string& val) {
  this->applicationId = val;
}

void DismissMessageRequest::__set_messageIds(const std::vector<std::string> & val) {
  this->messageIds = val;
__isset.messageIds = true;
}

uint32_t DismissMessageRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->messageIds.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _etype13;
            xfer += iprot->readListBegin(_etype13, _size10);
            this->messageIds.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += iprot->readString(this->messageIds[_i14]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.messageIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DismissMessageRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DismissMessageRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->messageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.messageIds) {
    xfer += oprot->writeFieldBegin("messageIds", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->messageIds.size()));
      std::vector<std::string> ::const_iterator _iter15;
      for (_iter15 = this->messageIds.begin(); _iter15 != this->messageIds.end(); ++_iter15)
      {
        xfer += oprot->writeString((*_iter15));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DismissMessageRequest &a, DismissMessageRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.messageId, b.messageId);
  swap(a.applicationId, b.applicationId);
  swap(a.messageIds, b.messageIds);
  swap(a.__isset, b.__isset);
}

DismissMessageRequest::DismissMessageRequest(const DismissMessageRequest& other16) {
  token = other16.token;
  messageId = other16.messageId;
  applicationId = other16.applicationId;
  messageIds = other16.messageIds;
  __isset = other16.__isset;
}
DismissMessageRequest& DismissMessageRequest::operator=(const DismissMessageRequest& other17) {
  token = other17.token;
  messageId = other17.messageId;
  applicationId = other17.applicationId;
  messageIds = other17.messageIds;
  __isset = other17.__isset;
  return *this;
}
void DismissMessageRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DismissMessageRequest(";
  out << "token=" << to_string(token);
  out << ", " << "messageId=" << to_string(messageId);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ", " << "messageIds="; (__isset.messageIds ? (out << to_string(messageIds)) : (out << "<null>"));
  out << ")";
}


DismissMessageResponse::~DismissMessageResponse() throw() {
}


void DismissMessageResponse::__set_messagesDismissed(const int val) {
  this->messagesDismissed = val;
__isset.messagesDismissed = true;
}

uint32_t DismissMessageResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->messagesDismissed);
          this->__isset.messagesDismissed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DismissMessageResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DismissMessageResponse");

  if (this->__isset.messagesDismissed) {
    xfer += oprot->writeFieldBegin("messagesDismissed", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->messagesDismissed);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DismissMessageResponse &a, DismissMessageResponse &b) {
  using ::std::swap;
  swap(a.messagesDismissed, b.messagesDismissed);
  swap(a.__isset, b.__isset);
}

DismissMessageResponse::DismissMessageResponse(const DismissMessageResponse& other18) {
  messagesDismissed = other18.messagesDismissed;
  __isset = other18.__isset;
}
DismissMessageResponse& DismissMessageResponse::operator=(const DismissMessageResponse& other19) {
  messagesDismissed = other19.messagesDismissed;
  __isset = other19.__isset;
  return *this;
}
void DismissMessageResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DismissMessageResponse(";
  out << "messagesDismissed="; (__isset.messagesDismissed ? (out << to_string(messagesDismissed)) : (out << "<null>"));
  out << ")";
}


ProvisionApplicationRequest::~ProvisionApplicationRequest() throw() {
}


void ProvisionApplicationRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void ProvisionApplicationRequest::__set_applicationName(const std::string& val) {
  this->applicationName = val;
}

void ProvisionApplicationRequest::__set_programmingLanguage(const  ::aroma::banana::thrift::ProgrammingLanguage::type val) {
  this->programmingLanguage = val;
__isset.programmingLanguage = true;
}

void ProvisionApplicationRequest::__set_organization(const std::string& val) {
  this->organization = val;
}

void ProvisionApplicationRequest::__set_icon(const Image& val) {
  this->icon = val;
__isset.icon = true;
}

uint32_t ProvisionApplicationRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationName);
          this->__isset.applicationName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast20;
          xfer += iprot->readI32(ecast20);
          this->programmingLanguage = ( ::aroma::banana::thrift::ProgrammingLanguage::type)ecast20;
          this->__isset.programmingLanguage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organization);
          this->__isset.organization = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->icon.read(iprot);
          this->__isset.icon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvisionApplicationRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProvisionApplicationRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.programmingLanguage) {
    xfer += oprot->writeFieldBegin("programmingLanguage", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->programmingLanguage);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("organization", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->organization);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.icon) {
    xfer += oprot->writeFieldBegin("icon", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->icon.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProvisionApplicationRequest &a, ProvisionApplicationRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationName, b.applicationName);
  swap(a.programmingLanguage, b.programmingLanguage);
  swap(a.organization, b.organization);
  swap(a.icon, b.icon);
  swap(a.__isset, b.__isset);
}

ProvisionApplicationRequest::ProvisionApplicationRequest(const ProvisionApplicationRequest& other21) {
  token = other21.token;
  applicationName = other21.applicationName;
  programmingLanguage = other21.programmingLanguage;
  organization = other21.organization;
  icon = other21.icon;
  __isset = other21.__isset;
}
ProvisionApplicationRequest& ProvisionApplicationRequest::operator=(const ProvisionApplicationRequest& other22) {
  token = other22.token;
  applicationName = other22.applicationName;
  programmingLanguage = other22.programmingLanguage;
  organization = other22.organization;
  icon = other22.icon;
  __isset = other22.__isset;
  return *this;
}
void ProvisionApplicationRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProvisionApplicationRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationName=" << to_string(applicationName);
  out << ", " << "programmingLanguage="; (__isset.programmingLanguage ? (out << to_string(programmingLanguage)) : (out << "<null>"));
  out << ", " << "organization=" << to_string(organization);
  out << ", " << "icon="; (__isset.icon ? (out << to_string(icon)) : (out << "<null>"));
  out << ")";
}


ProvisionApplicationResponse::~ProvisionApplicationResponse() throw() {
}


void ProvisionApplicationResponse::__set_applicationId(const std::string& val) {
  this->applicationId = val;
}

void ProvisionApplicationResponse::__set_applicationName(const std::string& val) {
  this->applicationName = val;
}

void ProvisionApplicationResponse::__set_applicationToken(const ApplicationToken& val) {
  this->applicationToken = val;
}

void ProvisionApplicationResponse::__set_applicationInfo(const Application& val) {
  this->applicationInfo = val;
}

uint32_t ProvisionApplicationResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationName);
          this->__isset.applicationName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->applicationToken.read(iprot);
          this->__isset.applicationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->applicationInfo.read(iprot);
          this->__isset.applicationInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvisionApplicationResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProvisionApplicationResponse");

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationToken", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->applicationToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationInfo", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->applicationInfo.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProvisionApplicationResponse &a, ProvisionApplicationResponse &b) {
  using ::std::swap;
  swap(a.applicationId, b.applicationId);
  swap(a.applicationName, b.applicationName);
  swap(a.applicationToken, b.applicationToken);
  swap(a.applicationInfo, b.applicationInfo);
  swap(a.__isset, b.__isset);
}

ProvisionApplicationResponse::ProvisionApplicationResponse(const ProvisionApplicationResponse& other23) {
  applicationId = other23.applicationId;
  applicationName = other23.applicationName;
  applicationToken = other23.applicationToken;
  applicationInfo = other23.applicationInfo;
  __isset = other23.__isset;
}
ProvisionApplicationResponse& ProvisionApplicationResponse::operator=(const ProvisionApplicationResponse& other24) {
  applicationId = other24.applicationId;
  applicationName = other24.applicationName;
  applicationToken = other24.applicationToken;
  applicationInfo = other24.applicationInfo;
  __isset = other24.__isset;
  return *this;
}
void ProvisionApplicationResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProvisionApplicationResponse(";
  out << "applicationId=" << to_string(applicationId);
  out << ", " << "applicationName=" << to_string(applicationName);
  out << ", " << "applicationToken=" << to_string(applicationToken);
  out << ", " << "applicationInfo=" << to_string(applicationInfo);
  out << ")";
}


RegenerateApplicationTokenRequest::~RegenerateApplicationTokenRequest() throw() {
}


void RegenerateApplicationTokenRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void RegenerateApplicationTokenRequest::__set_applicationId(const std::string& val) {
  this->applicationId = val;
}

uint32_t RegenerateApplicationTokenRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RegenerateApplicationTokenRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RegenerateApplicationTokenRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RegenerateApplicationTokenRequest &a, RegenerateApplicationTokenRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationId, b.applicationId);
  swap(a.__isset, b.__isset);
}

RegenerateApplicationTokenRequest::RegenerateApplicationTokenRequest(const RegenerateApplicationTokenRequest& other25) {
  token = other25.token;
  applicationId = other25.applicationId;
  __isset = other25.__isset;
}
RegenerateApplicationTokenRequest& RegenerateApplicationTokenRequest::operator=(const RegenerateApplicationTokenRequest& other26) {
  token = other26.token;
  applicationId = other26.applicationId;
  __isset = other26.__isset;
  return *this;
}
void RegenerateApplicationTokenRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RegenerateApplicationTokenRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ")";
}


RegenerateApplicationTokenResponse::~RegenerateApplicationTokenResponse() throw() {
}


void RegenerateApplicationTokenResponse::__set_serviceToken(const ApplicationToken& val) {
  this->serviceToken = val;
}

uint32_t RegenerateApplicationTokenResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->serviceToken.read(iprot);
          this->__isset.serviceToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RegenerateApplicationTokenResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RegenerateApplicationTokenResponse");

  xfer += oprot->writeFieldBegin("serviceToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->serviceToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RegenerateApplicationTokenResponse &a, RegenerateApplicationTokenResponse &b) {
  using ::std::swap;
  swap(a.serviceToken, b.serviceToken);
  swap(a.__isset, b.__isset);
}

RegenerateApplicationTokenResponse::RegenerateApplicationTokenResponse(const RegenerateApplicationTokenResponse& other27) {
  serviceToken = other27.serviceToken;
  __isset = other27.__isset;
}
RegenerateApplicationTokenResponse& RegenerateApplicationTokenResponse::operator=(const RegenerateApplicationTokenResponse& other28) {
  serviceToken = other28.serviceToken;
  __isset = other28.__isset;
  return *this;
}
void RegenerateApplicationTokenResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RegenerateApplicationTokenResponse(";
  out << "serviceToken=" << to_string(serviceToken);
  out << ")";
}


RegisterHealthCheckRequest::~RegisterHealthCheckRequest() throw() {
}


void RegisterHealthCheckRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void RegisterHealthCheckRequest::__set_endpoint(const Endpoint& val) {
  this->endpoint = val;
}

uint32_t RegisterHealthCheckRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->endpoint.read(iprot);
          this->__isset.endpoint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RegisterHealthCheckRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RegisterHealthCheckRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endpoint", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->endpoint.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RegisterHealthCheckRequest &a, RegisterHealthCheckRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.endpoint, b.endpoint);
  swap(a.__isset, b.__isset);
}

RegisterHealthCheckRequest::RegisterHealthCheckRequest(const RegisterHealthCheckRequest& other29) {
  token = other29.token;
  endpoint = other29.endpoint;
  __isset = other29.__isset;
}
RegisterHealthCheckRequest& RegisterHealthCheckRequest::operator=(const RegisterHealthCheckRequest& other30) {
  token = other30.token;
  endpoint = other30.endpoint;
  __isset = other30.__isset;
  return *this;
}
void RegisterHealthCheckRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RegisterHealthCheckRequest(";
  out << "token=" << to_string(token);
  out << ", " << "endpoint=" << to_string(endpoint);
  out << ")";
}


RegisterHealthCheckResponse::~RegisterHealthCheckResponse() throw() {
}


void RegisterHealthCheckResponse::__set_message(const std::string& val) {
  this->message = val;
__isset.message = true;
}

void RegisterHealthCheckResponse::__set_healthCheckToken(const std::string& val) {
  this->healthCheckToken = val;
__isset.healthCheckToken = true;
}

uint32_t RegisterHealthCheckResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->healthCheckToken);
          this->__isset.healthCheckToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RegisterHealthCheckResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RegisterHealthCheckResponse");

  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->message);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.healthCheckToken) {
    xfer += oprot->writeFieldBegin("healthCheckToken", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->healthCheckToken);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RegisterHealthCheckResponse &a, RegisterHealthCheckResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.healthCheckToken, b.healthCheckToken);
  swap(a.__isset, b.__isset);
}

RegisterHealthCheckResponse::RegisterHealthCheckResponse(const RegisterHealthCheckResponse& other31) {
  message = other31.message;
  healthCheckToken = other31.healthCheckToken;
  __isset = other31.__isset;
}
RegisterHealthCheckResponse& RegisterHealthCheckResponse::operator=(const RegisterHealthCheckResponse& other32) {
  message = other32.message;
  healthCheckToken = other32.healthCheckToken;
  __isset = other32.__isset;
  return *this;
}
void RegisterHealthCheckResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RegisterHealthCheckResponse(";
  out << "message="; (__isset.message ? (out << to_string(message)) : (out << "<null>"));
  out << ", " << "healthCheckToken="; (__isset.healthCheckToken ? (out << to_string(healthCheckToken)) : (out << "<null>"));
  out << ")";
}


RemoveSavedChannelRequest::~RemoveSavedChannelRequest() throw() {
}


void RemoveSavedChannelRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void RemoveSavedChannelRequest::__set_channel(const BananaChannel& val) {
  this->channel = val;
}

uint32_t RemoveSavedChannelRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->channel.read(iprot);
          this->__isset.channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RemoveSavedChannelRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RemoveSavedChannelRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->channel.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RemoveSavedChannelRequest &a, RemoveSavedChannelRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.channel, b.channel);
  swap(a.__isset, b.__isset);
}

RemoveSavedChannelRequest::RemoveSavedChannelRequest(const RemoveSavedChannelRequest& other33) {
  token = other33.token;
  channel = other33.channel;
  __isset = other33.__isset;
}
RemoveSavedChannelRequest& RemoveSavedChannelRequest::operator=(const RemoveSavedChannelRequest& other34) {
  token = other34.token;
  channel = other34.channel;
  __isset = other34.__isset;
  return *this;
}
void RemoveSavedChannelRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RemoveSavedChannelRequest(";
  out << "token=" << to_string(token);
  out << ", " << "channel=" << to_string(channel);
  out << ")";
}


RemoveSavedChannelResponse::~RemoveSavedChannelResponse() throw() {
}


void RemoveSavedChannelResponse::__set_message(const std::string& val) {
  this->message = val;
}

void RemoveSavedChannelResponse::__set_channel(const BananaChannel& val) {
  this->channel = val;
__isset.channel = true;
}

uint32_t RemoveSavedChannelResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->channel.read(iprot);
          this->__isset.channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RemoveSavedChannelResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RemoveSavedChannelResponse");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.channel) {
    xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->channel.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RemoveSavedChannelResponse &a, RemoveSavedChannelResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.channel, b.channel);
  swap(a.__isset, b.__isset);
}

RemoveSavedChannelResponse::RemoveSavedChannelResponse(const RemoveSavedChannelResponse& other35) {
  message = other35.message;
  channel = other35.channel;
  __isset = other35.__isset;
}
RemoveSavedChannelResponse& RemoveSavedChannelResponse::operator=(const RemoveSavedChannelResponse& other36) {
  message = other36.message;
  channel = other36.channel;
  __isset = other36.__isset;
  return *this;
}
void RemoveSavedChannelResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RemoveSavedChannelResponse(";
  out << "message=" << to_string(message);
  out << ", " << "channel="; (__isset.channel ? (out << to_string(channel)) : (out << "<null>"));
  out << ")";
}


RenewApplicationTokenRequest::~RenewApplicationTokenRequest() throw() {
}


void RenewApplicationTokenRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void RenewApplicationTokenRequest::__set_applicationToken(const ApplicationToken& val) {
  this->applicationToken = val;
}

void RenewApplicationTokenRequest::__set_newLifetime(const  ::aroma::banana::thrift::LengthOfTime& val) {
  this->newLifetime = val;
}

void RenewApplicationTokenRequest::__set_applicationId(const std::string& val) {
  this->applicationId = val;
}

uint32_t RenewApplicationTokenRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->applicationToken.read(iprot);
          this->__isset.applicationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->newLifetime.read(iprot);
          this->__isset.newLifetime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RenewApplicationTokenRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RenewApplicationTokenRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationToken", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->applicationToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("newLifetime", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->newLifetime.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RenewApplicationTokenRequest &a, RenewApplicationTokenRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationToken, b.applicationToken);
  swap(a.newLifetime, b.newLifetime);
  swap(a.applicationId, b.applicationId);
  swap(a.__isset, b.__isset);
}

RenewApplicationTokenRequest::RenewApplicationTokenRequest(const RenewApplicationTokenRequest& other37) {
  token = other37.token;
  applicationToken = other37.applicationToken;
  newLifetime = other37.newLifetime;
  applicationId = other37.applicationId;
  __isset = other37.__isset;
}
RenewApplicationTokenRequest& RenewApplicationTokenRequest::operator=(const RenewApplicationTokenRequest& other38) {
  token = other38.token;
  applicationToken = other38.applicationToken;
  newLifetime = other38.newLifetime;
  applicationId = other38.applicationId;
  __isset = other38.__isset;
  return *this;
}
void RenewApplicationTokenRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RenewApplicationTokenRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationToken=" << to_string(applicationToken);
  out << ", " << "newLifetime=" << to_string(newLifetime);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ")";
}


RenewApplicationTokenResponse::~RenewApplicationTokenResponse() throw() {
}


void RenewApplicationTokenResponse::__set_serviceToken(const ApplicationToken& val) {
  this->serviceToken = val;
}

uint32_t RenewApplicationTokenResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->serviceToken.read(iprot);
          this->__isset.serviceToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RenewApplicationTokenResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RenewApplicationTokenResponse");

  xfer += oprot->writeFieldBegin("serviceToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->serviceToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RenewApplicationTokenResponse &a, RenewApplicationTokenResponse &b) {
  using ::std::swap;
  swap(a.serviceToken, b.serviceToken);
  swap(a.__isset, b.__isset);
}

RenewApplicationTokenResponse::RenewApplicationTokenResponse(const RenewApplicationTokenResponse& other39) {
  serviceToken = other39.serviceToken;
  __isset = other39.__isset;
}
RenewApplicationTokenResponse& RenewApplicationTokenResponse::operator=(const RenewApplicationTokenResponse& other40) {
  serviceToken = other40.serviceToken;
  __isset = other40.__isset;
  return *this;
}
void RenewApplicationTokenResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RenewApplicationTokenResponse(";
  out << "serviceToken=" << to_string(serviceToken);
  out << ")";
}


SaveChannelRequest::~SaveChannelRequest() throw() {
}


void SaveChannelRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void SaveChannelRequest::__set_channel(const BananaChannel& val) {
  this->channel = val;
}

uint32_t SaveChannelRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->channel.read(iprot);
          this->__isset.channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SaveChannelRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SaveChannelRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->channel.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SaveChannelRequest &a, SaveChannelRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.channel, b.channel);
  swap(a.__isset, b.__isset);
}

SaveChannelRequest::SaveChannelRequest(const SaveChannelRequest& other41) {
  token = other41.token;
  channel = other41.channel;
  __isset = other41.__isset;
}
SaveChannelRequest& SaveChannelRequest::operator=(const SaveChannelRequest& other42) {
  token = other42.token;
  channel = other42.channel;
  __isset = other42.__isset;
  return *this;
}
void SaveChannelRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SaveChannelRequest(";
  out << "token=" << to_string(token);
  out << ", " << "channel=" << to_string(channel);
  out << ")";
}


SaveChannelResponse::~SaveChannelResponse() throw() {
}


void SaveChannelResponse::__set_message(const std::string& val) {
  this->message = val;
}

void SaveChannelResponse::__set_channel(const BananaChannel& val) {
  this->channel = val;
__isset.channel = true;
}

uint32_t SaveChannelResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->channel.read(iprot);
          this->__isset.channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SaveChannelResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SaveChannelResponse");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.channel) {
    xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->channel.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SaveChannelResponse &a, SaveChannelResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.channel, b.channel);
  swap(a.__isset, b.__isset);
}

SaveChannelResponse::SaveChannelResponse(const SaveChannelResponse& other43) {
  message = other43.message;
  channel = other43.channel;
  __isset = other43.__isset;
}
SaveChannelResponse& SaveChannelResponse::operator=(const SaveChannelResponse& other44) {
  message = other44.message;
  channel = other44.channel;
  __isset = other44.__isset;
  return *this;
}
void SaveChannelResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SaveChannelResponse(";
  out << "message=" << to_string(message);
  out << ", " << "channel="; (__isset.channel ? (out << to_string(channel)) : (out << "<null>"));
  out << ")";
}


SignInRequest::~SignInRequest() throw() {
}


void SignInRequest::__set_credentials(const  ::aroma::banana::thrift::authentication::Credentials& val) {
  this->credentials = val;
}

void SignInRequest::__set_username(const std::string& val) {
  this->username = val;
}

uint32_t SignInRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->credentials.read(iprot);
          this->__isset.credentials = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SignInRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SignInRequest");

  xfer += oprot->writeFieldBegin("credentials", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->credentials.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SignInRequest &a, SignInRequest &b) {
  using ::std::swap;
  swap(a.credentials, b.credentials);
  swap(a.username, b.username);
  swap(a.__isset, b.__isset);
}

SignInRequest::SignInRequest(const SignInRequest& other45) {
  credentials = other45.credentials;
  username = other45.username;
  __isset = other45.__isset;
}
SignInRequest& SignInRequest::operator=(const SignInRequest& other46) {
  credentials = other46.credentials;
  username = other46.username;
  __isset = other46.__isset;
  return *this;
}
void SignInRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SignInRequest(";
  out << "credentials=" << to_string(credentials);
  out << ", " << "username=" << to_string(username);
  out << ")";
}


SignInResponse::~SignInResponse() throw() {
}


void SignInResponse::__set_userToken(const UserToken& val) {
  this->userToken = val;
}

uint32_t SignInResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->userToken.read(iprot);
          this->__isset.userToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SignInResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SignInResponse");

  xfer += oprot->writeFieldBegin("userToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->userToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SignInResponse &a, SignInResponse &b) {
  using ::std::swap;
  swap(a.userToken, b.userToken);
  swap(a.__isset, b.__isset);
}

SignInResponse::SignInResponse(const SignInResponse& other47) {
  userToken = other47.userToken;
  __isset = other47.__isset;
}
SignInResponse& SignInResponse::operator=(const SignInResponse& other48) {
  userToken = other48.userToken;
  __isset = other48.__isset;
  return *this;
}
void SignInResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SignInResponse(";
  out << "userToken=" << to_string(userToken);
  out << ")";
}


SignUpRequest::~SignUpRequest() throw() {
}


void SignUpRequest::__set_email(const std::string& val) {
  this->email = val;
}

void SignUpRequest::__set_name(const std::string& val) {
  this->name = val;
}

void SignUpRequest::__set_username(const std::string& val) {
  this->username = val;
}

void SignUpRequest::__set_organization(const std::string& val) {
  this->organization = val;
}

void SignUpRequest::__set_credentials(const  ::aroma::banana::thrift::authentication::Credentials& val) {
  this->credentials = val;
}

uint32_t SignUpRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organization);
          this->__isset.organization = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->credentials.read(iprot);
          this->__isset.credentials = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SignUpRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SignUpRequest");

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("organization", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->organization);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("credentials", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->credentials.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SignUpRequest &a, SignUpRequest &b) {
  using ::std::swap;
  swap(a.email, b.email);
  swap(a.name, b.name);
  swap(a.username, b.username);
  swap(a.organization, b.organization);
  swap(a.credentials, b.credentials);
  swap(a.__isset, b.__isset);
}

SignUpRequest::SignUpRequest(const SignUpRequest& other49) {
  email = other49.email;
  name = other49.name;
  username = other49.username;
  organization = other49.organization;
  credentials = other49.credentials;
  __isset = other49.__isset;
}
SignUpRequest& SignUpRequest::operator=(const SignUpRequest& other50) {
  email = other50.email;
  name = other50.name;
  username = other50.username;
  organization = other50.organization;
  credentials = other50.credentials;
  __isset = other50.__isset;
  return *this;
}
void SignUpRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SignUpRequest(";
  out << "email=" << to_string(email);
  out << ", " << "name=" << to_string(name);
  out << ", " << "username=" << to_string(username);
  out << ", " << "organization=" << to_string(organization);
  out << ", " << "credentials=" << to_string(credentials);
  out << ")";
}


SignUpResponse::~SignUpResponse() throw() {
}


void SignUpResponse::__set_userToken(const UserToken& val) {
  this->userToken = val;
}

void SignUpResponse::__set_account(const  ::aroma::banana::thrift::authentication::AromaAccount& val) {
  this->account = val;
}

uint32_t SignUpResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->userToken.read(iprot);
          this->__isset.userToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->account.read(iprot);
          this->__isset.account = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SignUpResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SignUpResponse");

  xfer += oprot->writeFieldBegin("userToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->userToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("account", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->account.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SignUpResponse &a, SignUpResponse &b) {
  using ::std::swap;
  swap(a.userToken, b.userToken);
  swap(a.account, b.account);
  swap(a.__isset, b.__isset);
}

SignUpResponse::SignUpResponse(const SignUpResponse& other51) {
  userToken = other51.userToken;
  account = other51.account;
  __isset = other51.__isset;
}
SignUpResponse& SignUpResponse::operator=(const SignUpResponse& other52) {
  userToken = other52.userToken;
  account = other52.account;
  __isset = other52.__isset;
  return *this;
}
void SignUpResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SignUpResponse(";
  out << "userToken=" << to_string(userToken);
  out << ", " << "account=" << to_string(account);
  out << ")";
}


SnoozeChannelRequest::~SnoozeChannelRequest() throw() {
}


void SnoozeChannelRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void SnoozeChannelRequest::__set_channel(const BananaChannel& val) {
  this->channel = val;
}

void SnoozeChannelRequest::__set_applicationId(const std::string& val) {
  this->applicationId = val;
__isset.applicationId = true;
}

void SnoozeChannelRequest::__set_lengthOfTime(const  ::aroma::banana::thrift::LengthOfTime& val) {
  this->lengthOfTime = val;
__isset.lengthOfTime = true;
}

uint32_t SnoozeChannelRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->channel.read(iprot);
          this->__isset.channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->lengthOfTime.read(iprot);
          this->__isset.lengthOfTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SnoozeChannelRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SnoozeChannelRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->channel.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.applicationId) {
    xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->applicationId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lengthOfTime) {
    xfer += oprot->writeFieldBegin("lengthOfTime", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->lengthOfTime.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SnoozeChannelRequest &a, SnoozeChannelRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.channel, b.channel);
  swap(a.applicationId, b.applicationId);
  swap(a.lengthOfTime, b.lengthOfTime);
  swap(a.__isset, b.__isset);
}

SnoozeChannelRequest::SnoozeChannelRequest(const SnoozeChannelRequest& other54) {
  token = other54.token;
  channel = other54.channel;
  applicationId = other54.applicationId;
  lengthOfTime = other54.lengthOfTime;
  __isset = other54.__isset;
}
SnoozeChannelRequest& SnoozeChannelRequest::operator=(const SnoozeChannelRequest& other55) {
  token = other55.token;
  channel = other55.channel;
  applicationId = other55.applicationId;
  lengthOfTime = other55.lengthOfTime;
  __isset = other55.__isset;
  return *this;
}
void SnoozeChannelRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SnoozeChannelRequest(";
  out << "token=" << to_string(token);
  out << ", " << "channel=" << to_string(channel);
  out << ", " << "applicationId="; (__isset.applicationId ? (out << to_string(applicationId)) : (out << "<null>"));
  out << ", " << "lengthOfTime="; (__isset.lengthOfTime ? (out << to_string(lengthOfTime)) : (out << "<null>"));
  out << ")";
}


SnoozeChannelResponse::~SnoozeChannelResponse() throw() {
}


void SnoozeChannelResponse::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t SnoozeChannelResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SnoozeChannelResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SnoozeChannelResponse");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SnoozeChannelResponse &a, SnoozeChannelResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

SnoozeChannelResponse::SnoozeChannelResponse(const SnoozeChannelResponse& other56) {
  message = other56.message;
  __isset = other56.__isset;
}
SnoozeChannelResponse& SnoozeChannelResponse::operator=(const SnoozeChannelResponse& other57) {
  message = other57.message;
  __isset = other57.__isset;
  return *this;
}
void SnoozeChannelResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SnoozeChannelResponse(";
  out << "message=" << to_string(message);
  out << ")";
}


SubscribeToApplicationRequest::~SubscribeToApplicationRequest() throw() {
}


void SubscribeToApplicationRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void SubscribeToApplicationRequest::__set_applicationName(const std::string& val) {
  this->applicationName = val;
}

void SubscribeToApplicationRequest::__set_applicationId(const std::string& val) {
  this->applicationId = val;
}

void SubscribeToApplicationRequest::__set_organization(const std::string& val) {
  this->organization = val;
__isset.organization = true;
}

void SubscribeToApplicationRequest::__set_shared(const bool val) {
  this->shared = val;
__isset.shared = true;
}

uint32_t SubscribeToApplicationRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationName);
          this->__isset.applicationName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organization);
          this->__isset.organization = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->shared);
          this->__isset.shared = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SubscribeToApplicationRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SubscribeToApplicationRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.organization) {
    xfer += oprot->writeFieldBegin("organization", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->organization);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.shared) {
    xfer += oprot->writeFieldBegin("shared", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->shared);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SubscribeToApplicationRequest &a, SubscribeToApplicationRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationName, b.applicationName);
  swap(a.applicationId, b.applicationId);
  swap(a.organization, b.organization);
  swap(a.shared, b.shared);
  swap(a.__isset, b.__isset);
}

SubscribeToApplicationRequest::SubscribeToApplicationRequest(const SubscribeToApplicationRequest& other58) {
  token = other58.token;
  applicationName = other58.applicationName;
  applicationId = other58.applicationId;
  organization = other58.organization;
  shared = other58.shared;
  __isset = other58.__isset;
}
SubscribeToApplicationRequest& SubscribeToApplicationRequest::operator=(const SubscribeToApplicationRequest& other59) {
  token = other59.token;
  applicationName = other59.applicationName;
  applicationId = other59.applicationId;
  organization = other59.organization;
  shared = other59.shared;
  __isset = other59.__isset;
  return *this;
}
void SubscribeToApplicationRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SubscribeToApplicationRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationName=" << to_string(applicationName);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ", " << "organization="; (__isset.organization ? (out << to_string(organization)) : (out << "<null>"));
  out << ", " << "shared="; (__isset.shared ? (out << to_string(shared)) : (out << "<null>"));
  out << ")";
}


SubscribeToApplicationResponse::~SubscribeToApplicationResponse() throw() {
}


void SubscribeToApplicationResponse::__set_message(const std::string& val) {
  this->message = val;
}

void SubscribeToApplicationResponse::__set_channel(const BananaChannel& val) {
  this->channel = val;
}

uint32_t SubscribeToApplicationResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->channel.read(iprot);
          this->__isset.channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SubscribeToApplicationResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SubscribeToApplicationResponse");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->channel.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SubscribeToApplicationResponse &a, SubscribeToApplicationResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.channel, b.channel);
  swap(a.__isset, b.__isset);
}

SubscribeToApplicationResponse::SubscribeToApplicationResponse(const SubscribeToApplicationResponse& other60) {
  message = other60.message;
  channel = other60.channel;
  __isset = other60.__isset;
}
SubscribeToApplicationResponse& SubscribeToApplicationResponse::operator=(const SubscribeToApplicationResponse& other61) {
  message = other61.message;
  channel = other61.channel;
  __isset = other61.__isset;
  return *this;
}
void SubscribeToApplicationResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SubscribeToApplicationResponse(";
  out << "message=" << to_string(message);
  out << ", " << "channel=" << to_string(channel);
  out << ")";
}


GetApplicationInfoRequest::~GetApplicationInfoRequest() throw() {
}


void GetApplicationInfoRequest::__set_token(const AuthenticationToken& val) {
  this->token = val;
}

void GetApplicationInfoRequest::__set_applicationId(const std::string& val) {
  this->applicationId = val;
}

uint32_t GetApplicationInfoRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetApplicationInfoRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetApplicationInfoRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetApplicationInfoRequest &a, GetApplicationInfoRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationId, b.applicationId);
  swap(a.__isset, b.__isset);
}

GetApplicationInfoRequest::GetApplicationInfoRequest(const GetApplicationInfoRequest& other62) {
  token = other62.token;
  applicationId = other62.applicationId;
  __isset = other62.__isset;
}
GetApplicationInfoRequest& GetApplicationInfoRequest::operator=(const GetApplicationInfoRequest& other63) {
  token = other63.token;
  applicationId = other63.applicationId;
  __isset = other63.__isset;
  return *this;
}
void GetApplicationInfoRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetApplicationInfoRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ")";
}


GetApplicationInfoResponse::~GetApplicationInfoResponse() throw() {
}


void GetApplicationInfoResponse::__set_applicationInfo(const Application& val) {
  this->applicationInfo = val;
}

void GetApplicationInfoResponse::__set_registeredChannels(const std::vector<BananaChannel> & val) {
  this->registeredChannels = val;
}

uint32_t GetApplicationInfoResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->applicationInfo.read(iprot);
          this->__isset.applicationInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->registeredChannels.clear();
            uint32_t _size64;
            ::apache::thrift::protocol::TType _etype67;
            xfer += iprot->readListBegin(_etype67, _size64);
            this->registeredChannels.resize(_size64);
            uint32_t _i68;
            for (_i68 = 0; _i68 < _size64; ++_i68)
            {
              xfer += this->registeredChannels[_i68].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.registeredChannels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetApplicationInfoResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetApplicationInfoResponse");

  xfer += oprot->writeFieldBegin("applicationInfo", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->applicationInfo.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("registeredChannels", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->registeredChannels.size()));
    std::vector<BananaChannel> ::const_iterator _iter69;
    for (_iter69 = this->registeredChannels.begin(); _iter69 != this->registeredChannels.end(); ++_iter69)
    {
      xfer += (*_iter69).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetApplicationInfoResponse &a, GetApplicationInfoResponse &b) {
  using ::std::swap;
  swap(a.applicationInfo, b.applicationInfo);
  swap(a.registeredChannels, b.registeredChannels);
  swap(a.__isset, b.__isset);
}

GetApplicationInfoResponse::GetApplicationInfoResponse(const GetApplicationInfoResponse& other70) {
  applicationInfo = other70.applicationInfo;
  registeredChannels = other70.registeredChannels;
  __isset = other70.__isset;
}
GetApplicationInfoResponse& GetApplicationInfoResponse::operator=(const GetApplicationInfoResponse& other71) {
  applicationInfo = other71.applicationInfo;
  registeredChannels = other71.registeredChannels;
  __isset = other71.__isset;
  return *this;
}
void GetApplicationInfoResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetApplicationInfoResponse(";
  out << "applicationInfo=" << to_string(applicationInfo);
  out << ", " << "registeredChannels=" << to_string(registeredChannels);
  out << ")";
}


GetDashboardRequest::~GetDashboardRequest() throw() {
}


void GetDashboardRequest::__set_token(const UserToken& val) {
  this->token = val;
}

uint32_t GetDashboardRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetDashboardRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetDashboardRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetDashboardRequest &a, GetDashboardRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.__isset, b.__isset);
}

GetDashboardRequest::GetDashboardRequest(const GetDashboardRequest& other72) {
  token = other72.token;
  __isset = other72.__isset;
}
GetDashboardRequest& GetDashboardRequest::operator=(const GetDashboardRequest& other73) {
  token = other73.token;
  __isset = other73.__isset;
  return *this;
}
void GetDashboardRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetDashboardRequest(";
  out << "token=" << to_string(token);
  out << ")";
}


GetDashboardResponse::~GetDashboardResponse() throw() {
}


void GetDashboardResponse::__set_unreadMessageCount(const int val) {
  this->unreadMessageCount = val;
}

void GetDashboardResponse::__set_totalMessagesLastHour(const int val) {
  this->totalMessagesLastHour = val;
}

void GetDashboardResponse::__set_totalMessagesLast24hrs(const int val) {
  this->totalMessagesLast24hrs = val;
}

void GetDashboardResponse::__set_recentMessages(const std::vector< ::aroma::banana::thrift::Message> & val) {
  this->recentMessages = val;
}

void GetDashboardResponse::__set_numberOfLowUrgencyMessages(const int val) {
  this->numberOfLowUrgencyMessages = val;
}

void GetDashboardResponse::__set_numberOfMediumUrgencyMessages(const int val) {
  this->numberOfMediumUrgencyMessages = val;
}

void GetDashboardResponse::__set_numberOfHighUrgencyMessages(const int val) {
  this->numberOfHighUrgencyMessages = val;
}

uint32_t GetDashboardResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unreadMessageCount);
          this->__isset.unreadMessageCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalMessagesLastHour);
          this->__isset.totalMessagesLastHour = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalMessagesLast24hrs);
          this->__isset.totalMessagesLast24hrs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->recentMessages.clear();
            uint32_t _size74;
            ::apache::thrift::protocol::TType _etype77;
            xfer += iprot->readListBegin(_etype77, _size74);
            this->recentMessages.resize(_size74);
            uint32_t _i78;
            for (_i78 = 0; _i78 < _size74; ++_i78)
            {
              xfer += this->recentMessages[_i78].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.recentMessages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numberOfLowUrgencyMessages);
          this->__isset.numberOfLowUrgencyMessages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numberOfMediumUrgencyMessages);
          this->__isset.numberOfMediumUrgencyMessages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numberOfHighUrgencyMessages);
          this->__isset.numberOfHighUrgencyMessages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetDashboardResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetDashboardResponse");

  xfer += oprot->writeFieldBegin("unreadMessageCount", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->unreadMessageCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalMessagesLastHour", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->totalMessagesLastHour);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalMessagesLast24hrs", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->totalMessagesLast24hrs);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recentMessages", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->recentMessages.size()));
    std::vector< ::aroma::banana::thrift::Message> ::const_iterator _iter79;
    for (_iter79 = this->recentMessages.begin(); _iter79 != this->recentMessages.end(); ++_iter79)
    {
      xfer += (*_iter79).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numberOfLowUrgencyMessages", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->numberOfLowUrgencyMessages);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numberOfMediumUrgencyMessages", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->numberOfMediumUrgencyMessages);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numberOfHighUrgencyMessages", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->numberOfHighUrgencyMessages);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetDashboardResponse &a, GetDashboardResponse &b) {
  using ::std::swap;
  swap(a.unreadMessageCount, b.unreadMessageCount);
  swap(a.totalMessagesLastHour, b.totalMessagesLastHour);
  swap(a.totalMessagesLast24hrs, b.totalMessagesLast24hrs);
  swap(a.recentMessages, b.recentMessages);
  swap(a.numberOfLowUrgencyMessages, b.numberOfLowUrgencyMessages);
  swap(a.numberOfMediumUrgencyMessages, b.numberOfMediumUrgencyMessages);
  swap(a.numberOfHighUrgencyMessages, b.numberOfHighUrgencyMessages);
  swap(a.__isset, b.__isset);
}

GetDashboardResponse::GetDashboardResponse(const GetDashboardResponse& other80) {
  unreadMessageCount = other80.unreadMessageCount;
  totalMessagesLastHour = other80.totalMessagesLastHour;
  totalMessagesLast24hrs = other80.totalMessagesLast24hrs;
  recentMessages = other80.recentMessages;
  numberOfLowUrgencyMessages = other80.numberOfLowUrgencyMessages;
  numberOfMediumUrgencyMessages = other80.numberOfMediumUrgencyMessages;
  numberOfHighUrgencyMessages = other80.numberOfHighUrgencyMessages;
  __isset = other80.__isset;
}
GetDashboardResponse& GetDashboardResponse::operator=(const GetDashboardResponse& other81) {
  unreadMessageCount = other81.unreadMessageCount;
  totalMessagesLastHour = other81.totalMessagesLastHour;
  totalMessagesLast24hrs = other81.totalMessagesLast24hrs;
  recentMessages = other81.recentMessages;
  numberOfLowUrgencyMessages = other81.numberOfLowUrgencyMessages;
  numberOfMediumUrgencyMessages = other81.numberOfMediumUrgencyMessages;
  numberOfHighUrgencyMessages = other81.numberOfHighUrgencyMessages;
  __isset = other81.__isset;
  return *this;
}
void GetDashboardResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetDashboardResponse(";
  out << "unreadMessageCount=" << to_string(unreadMessageCount);
  out << ", " << "totalMessagesLastHour=" << to_string(totalMessagesLastHour);
  out << ", " << "totalMessagesLast24hrs=" << to_string(totalMessagesLast24hrs);
  out << ", " << "recentMessages=" << to_string(recentMessages);
  out << ", " << "numberOfLowUrgencyMessages=" << to_string(numberOfLowUrgencyMessages);
  out << ", " << "numberOfMediumUrgencyMessages=" << to_string(numberOfMediumUrgencyMessages);
  out << ", " << "numberOfHighUrgencyMessages=" << to_string(numberOfHighUrgencyMessages);
  out << ")";
}


GetMessagesRequest::~GetMessagesRequest() throw() {
}


void GetMessagesRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void GetMessagesRequest::__set_applicationId(const std::string& val) {
  this->applicationId = val;
__isset.applicationId = true;
}

void GetMessagesRequest::__set_limit(const int val) {
  this->limit = val;
__isset.limit = true;
}

uint32_t GetMessagesRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetMessagesRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetMessagesRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.applicationId) {
    xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->applicationId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.limit) {
    xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->limit);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetMessagesRequest &a, GetMessagesRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationId, b.applicationId);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

GetMessagesRequest::GetMessagesRequest(const GetMessagesRequest& other82) {
  token = other82.token;
  applicationId = other82.applicationId;
  limit = other82.limit;
  __isset = other82.__isset;
}
GetMessagesRequest& GetMessagesRequest::operator=(const GetMessagesRequest& other83) {
  token = other83.token;
  applicationId = other83.applicationId;
  limit = other83.limit;
  __isset = other83.__isset;
  return *this;
}
void GetMessagesRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetMessagesRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationId="; (__isset.applicationId ? (out << to_string(applicationId)) : (out << "<null>"));
  out << ", " << "limit="; (__isset.limit ? (out << to_string(limit)) : (out << "<null>"));
  out << ")";
}


GetMessagesResponse::~GetMessagesResponse() throw() {
}


void GetMessagesResponse::__set_messages(const std::vector< ::aroma::banana::thrift::Message> & val) {
  this->messages = val;
}

void GetMessagesResponse::__set_totalMessagesMatching(const int val) {
  this->totalMessagesMatching = val;
__isset.totalMessagesMatching = true;
}

uint32_t GetMessagesResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->messages.clear();
            uint32_t _size84;
            ::apache::thrift::protocol::TType _etype87;
            xfer += iprot->readListBegin(_etype87, _size84);
            this->messages.resize(_size84);
            uint32_t _i88;
            for (_i88 = 0; _i88 < _size84; ++_i88)
            {
              xfer += this->messages[_i88].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.messages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalMessagesMatching);
          this->__isset.totalMessagesMatching = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetMessagesResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetMessagesResponse");

  xfer += oprot->writeFieldBegin("messages", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->messages.size()));
    std::vector< ::aroma::banana::thrift::Message> ::const_iterator _iter89;
    for (_iter89 = this->messages.begin(); _iter89 != this->messages.end(); ++_iter89)
    {
      xfer += (*_iter89).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.totalMessagesMatching) {
    xfer += oprot->writeFieldBegin("totalMessagesMatching", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->totalMessagesMatching);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetMessagesResponse &a, GetMessagesResponse &b) {
  using ::std::swap;
  swap(a.messages, b.messages);
  swap(a.totalMessagesMatching, b.totalMessagesMatching);
  swap(a.__isset, b.__isset);
}

GetMessagesResponse::GetMessagesResponse(const GetMessagesResponse& other90) {
  messages = other90.messages;
  totalMessagesMatching = other90.totalMessagesMatching;
  __isset = other90.__isset;
}
GetMessagesResponse& GetMessagesResponse::operator=(const GetMessagesResponse& other91) {
  messages = other91.messages;
  totalMessagesMatching = other91.totalMessagesMatching;
  __isset = other91.__isset;
  return *this;
}
void GetMessagesResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetMessagesResponse(";
  out << "messages=" << to_string(messages);
  out << ", " << "totalMessagesMatching="; (__isset.totalMessagesMatching ? (out << to_string(totalMessagesMatching)) : (out << "<null>"));
  out << ")";
}


GetFullMessageRequest::~GetFullMessageRequest() throw() {
}


void GetFullMessageRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void GetFullMessageRequest::__set_messageId(const std::string& val) {
  this->messageId = val;
}

uint32_t GetFullMessageRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetFullMessageRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetFullMessageRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->messageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetFullMessageRequest &a, GetFullMessageRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.messageId, b.messageId);
  swap(a.__isset, b.__isset);
}

GetFullMessageRequest::GetFullMessageRequest(const GetFullMessageRequest& other92) {
  token = other92.token;
  messageId = other92.messageId;
  __isset = other92.__isset;
}
GetFullMessageRequest& GetFullMessageRequest::operator=(const GetFullMessageRequest& other93) {
  token = other93.token;
  messageId = other93.messageId;
  __isset = other93.__isset;
  return *this;
}
void GetFullMessageRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetFullMessageRequest(";
  out << "token=" << to_string(token);
  out << ", " << "messageId=" << to_string(messageId);
  out << ")";
}


GetFullMessageResponse::~GetFullMessageResponse() throw() {
}


void GetFullMessageResponse::__set_fullBody(const std::string& val) {
  this->fullBody = val;
}

uint32_t GetFullMessageResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fullBody);
          this->__isset.fullBody = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetFullMessageResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetFullMessageResponse");

  xfer += oprot->writeFieldBegin("fullBody", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->fullBody);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetFullMessageResponse &a, GetFullMessageResponse &b) {
  using ::std::swap;
  swap(a.fullBody, b.fullBody);
  swap(a.__isset, b.__isset);
}

GetFullMessageResponse::GetFullMessageResponse(const GetFullMessageResponse& other94) {
  fullBody = other94.fullBody;
  __isset = other94.__isset;
}
GetFullMessageResponse& GetFullMessageResponse::operator=(const GetFullMessageResponse& other95) {
  fullBody = other95.fullBody;
  __isset = other95.__isset;
  return *this;
}
void GetFullMessageResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetFullMessageResponse(";
  out << "fullBody=" << to_string(fullBody);
  out << ")";
}


GetMyApplicationsRequest::~GetMyApplicationsRequest() throw() {
}


void GetMyApplicationsRequest::__set_token(const UserToken& val) {
  this->token = val;
}

uint32_t GetMyApplicationsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetMyApplicationsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetMyApplicationsRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetMyApplicationsRequest &a, GetMyApplicationsRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.__isset, b.__isset);
}

GetMyApplicationsRequest::GetMyApplicationsRequest(const GetMyApplicationsRequest& other96) {
  token = other96.token;
  __isset = other96.__isset;
}
GetMyApplicationsRequest& GetMyApplicationsRequest::operator=(const GetMyApplicationsRequest& other97) {
  token = other97.token;
  __isset = other97.__isset;
  return *this;
}
void GetMyApplicationsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetMyApplicationsRequest(";
  out << "token=" << to_string(token);
  out << ")";
}


GetMyApplicationsResponse::~GetMyApplicationsResponse() throw() {
}


void GetMyApplicationsResponse::__set_applications(const std::vector<Application> & val) {
  this->applications = val;
}

uint32_t GetMyApplicationsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->applications.clear();
            uint32_t _size98;
            ::apache::thrift::protocol::TType _etype101;
            xfer += iprot->readListBegin(_etype101, _size98);
            this->applications.resize(_size98);
            uint32_t _i102;
            for (_i102 = 0; _i102 < _size98; ++_i102)
            {
              xfer += this->applications[_i102].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.applications = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetMyApplicationsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetMyApplicationsResponse");

  xfer += oprot->writeFieldBegin("applications", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->applications.size()));
    std::vector<Application> ::const_iterator _iter103;
    for (_iter103 = this->applications.begin(); _iter103 != this->applications.end(); ++_iter103)
    {
      xfer += (*_iter103).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetMyApplicationsResponse &a, GetMyApplicationsResponse &b) {
  using ::std::swap;
  swap(a.applications, b.applications);
  swap(a.__isset, b.__isset);
}

GetMyApplicationsResponse::GetMyApplicationsResponse(const GetMyApplicationsResponse& other104) {
  applications = other104.applications;
  __isset = other104.__isset;
}
GetMyApplicationsResponse& GetMyApplicationsResponse::operator=(const GetMyApplicationsResponse& other105) {
  applications = other105.applications;
  __isset = other105.__isset;
  return *this;
}
void GetMyApplicationsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetMyApplicationsResponse(";
  out << "applications=" << to_string(applications);
  out << ")";
}


GetMySavedChannelsRequest::~GetMySavedChannelsRequest() throw() {
}


void GetMySavedChannelsRequest::__set_token(const UserToken& val) {
  this->token = val;
}

uint32_t GetMySavedChannelsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetMySavedChannelsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetMySavedChannelsRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetMySavedChannelsRequest &a, GetMySavedChannelsRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.__isset, b.__isset);
}

GetMySavedChannelsRequest::GetMySavedChannelsRequest(const GetMySavedChannelsRequest& other106) {
  token = other106.token;
  __isset = other106.__isset;
}
GetMySavedChannelsRequest& GetMySavedChannelsRequest::operator=(const GetMySavedChannelsRequest& other107) {
  token = other107.token;
  __isset = other107.__isset;
  return *this;
}
void GetMySavedChannelsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetMySavedChannelsRequest(";
  out << "token=" << to_string(token);
  out << ")";
}


GetMySavedChannelsResponse::~GetMySavedChannelsResponse() throw() {
}


void GetMySavedChannelsResponse::__set_channels(const std::vector<BananaChannel> & val) {
  this->channels = val;
}

uint32_t GetMySavedChannelsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->channels.clear();
            uint32_t _size108;
            ::apache::thrift::protocol::TType _etype111;
            xfer += iprot->readListBegin(_etype111, _size108);
            this->channels.resize(_size108);
            uint32_t _i112;
            for (_i112 = 0; _i112 < _size108; ++_i112)
            {
              xfer += this->channels[_i112].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.channels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetMySavedChannelsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetMySavedChannelsResponse");

  xfer += oprot->writeFieldBegin("channels", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->channels.size()));
    std::vector<BananaChannel> ::const_iterator _iter113;
    for (_iter113 = this->channels.begin(); _iter113 != this->channels.end(); ++_iter113)
    {
      xfer += (*_iter113).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetMySavedChannelsResponse &a, GetMySavedChannelsResponse &b) {
  using ::std::swap;
  swap(a.channels, b.channels);
  swap(a.__isset, b.__isset);
}

GetMySavedChannelsResponse::GetMySavedChannelsResponse(const GetMySavedChannelsResponse& other114) {
  channels = other114.channels;
  __isset = other114.__isset;
}
GetMySavedChannelsResponse& GetMySavedChannelsResponse::operator=(const GetMySavedChannelsResponse& other115) {
  channels = other115.channels;
  __isset = other115.__isset;
  return *this;
}
void GetMySavedChannelsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetMySavedChannelsResponse(";
  out << "channels=" << to_string(channels);
  out << ")";
}


GetActivityRequest::~GetActivityRequest() throw() {
}


void GetActivityRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void GetActivityRequest::__set_limit(const int val) {
  this->limit = val;
__isset.limit = true;
}

uint32_t GetActivityRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetActivityRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetActivityRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.limit) {
    xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->limit);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetActivityRequest &a, GetActivityRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

GetActivityRequest::GetActivityRequest(const GetActivityRequest& other116) {
  token = other116.token;
  limit = other116.limit;
  __isset = other116.__isset;
}
GetActivityRequest& GetActivityRequest::operator=(const GetActivityRequest& other117) {
  token = other117.token;
  limit = other117.limit;
  __isset = other117.__isset;
  return *this;
}
void GetActivityRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetActivityRequest(";
  out << "token=" << to_string(token);
  out << ", " << "limit="; (__isset.limit ? (out << to_string(limit)) : (out << "<null>"));
  out << ")";
}


GetActivityResponse::~GetActivityResponse() throw() {
}


void GetActivityResponse::__set_events(const std::vector< ::aroma::banana::thrift::events::Event> & val) {
  this->events = val;
}

uint32_t GetActivityResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->events.clear();
            uint32_t _size118;
            ::apache::thrift::protocol::TType _etype121;
            xfer += iprot->readListBegin(_etype121, _size118);
            this->events.resize(_size118);
            uint32_t _i122;
            for (_i122 = 0; _i122 < _size118; ++_i122)
            {
              xfer += this->events[_i122].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.events = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetActivityResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetActivityResponse");

  xfer += oprot->writeFieldBegin("events", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->events.size()));
    std::vector< ::aroma::banana::thrift::events::Event> ::const_iterator _iter123;
    for (_iter123 = this->events.begin(); _iter123 != this->events.end(); ++_iter123)
    {
      xfer += (*_iter123).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetActivityResponse &a, GetActivityResponse &b) {
  using ::std::swap;
  swap(a.events, b.events);
  swap(a.__isset, b.__isset);
}

GetActivityResponse::GetActivityResponse(const GetActivityResponse& other124) {
  events = other124.events;
  __isset = other124.__isset;
}
GetActivityResponse& GetActivityResponse::operator=(const GetActivityResponse& other125) {
  events = other125.events;
  __isset = other125.__isset;
  return *this;
}
void GetActivityResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetActivityResponse(";
  out << "events=" << to_string(events);
  out << ")";
}


GetServiceAnnouncementsRequest::~GetServiceAnnouncementsRequest() throw() {
}


void GetServiceAnnouncementsRequest::__set_token(const UserToken& val) {
  this->token = val;
}

uint32_t GetServiceAnnouncementsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetServiceAnnouncementsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetServiceAnnouncementsRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetServiceAnnouncementsRequest &a, GetServiceAnnouncementsRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.__isset, b.__isset);
}

GetServiceAnnouncementsRequest::GetServiceAnnouncementsRequest(const GetServiceAnnouncementsRequest& other126) {
  token = other126.token;
  __isset = other126.__isset;
}
GetServiceAnnouncementsRequest& GetServiceAnnouncementsRequest::operator=(const GetServiceAnnouncementsRequest& other127) {
  token = other127.token;
  __isset = other127.__isset;
  return *this;
}
void GetServiceAnnouncementsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetServiceAnnouncementsRequest(";
  out << "token=" << to_string(token);
  out << ")";
}


GetServiceAnnouncementsResponse::~GetServiceAnnouncementsResponse() throw() {
}


void GetServiceAnnouncementsResponse::__set_serviceAnnouncements(const std::vector< ::aroma::banana::thrift::ServiceAnnouncement> & val) {
  this->serviceAnnouncements = val;
__isset.serviceAnnouncements = true;
}

uint32_t GetServiceAnnouncementsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->serviceAnnouncements.clear();
            uint32_t _size128;
            ::apache::thrift::protocol::TType _etype131;
            xfer += iprot->readListBegin(_etype131, _size128);
            this->serviceAnnouncements.resize(_size128);
            uint32_t _i132;
            for (_i132 = 0; _i132 < _size128; ++_i132)
            {
              xfer += this->serviceAnnouncements[_i132].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.serviceAnnouncements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetServiceAnnouncementsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetServiceAnnouncementsResponse");

  if (this->__isset.serviceAnnouncements) {
    xfer += oprot->writeFieldBegin("serviceAnnouncements", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->serviceAnnouncements.size()));
      std::vector< ::aroma::banana::thrift::ServiceAnnouncement> ::const_iterator _iter133;
      for (_iter133 = this->serviceAnnouncements.begin(); _iter133 != this->serviceAnnouncements.end(); ++_iter133)
      {
        xfer += (*_iter133).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetServiceAnnouncementsResponse &a, GetServiceAnnouncementsResponse &b) {
  using ::std::swap;
  swap(a.serviceAnnouncements, b.serviceAnnouncements);
  swap(a.__isset, b.__isset);
}

GetServiceAnnouncementsResponse::GetServiceAnnouncementsResponse(const GetServiceAnnouncementsResponse& other134) {
  serviceAnnouncements = other134.serviceAnnouncements;
  __isset = other134.__isset;
}
GetServiceAnnouncementsResponse& GetServiceAnnouncementsResponse::operator=(const GetServiceAnnouncementsResponse& other135) {
  serviceAnnouncements = other135.serviceAnnouncements;
  __isset = other135.__isset;
  return *this;
}
void GetServiceAnnouncementsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetServiceAnnouncementsResponse(";
  out << "serviceAnnouncements="; (__isset.serviceAnnouncements ? (out << to_string(serviceAnnouncements)) : (out << "<null>"));
  out << ")";
}


GetUserInfoRequest::~GetUserInfoRequest() throw() {
}


void GetUserInfoRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void GetUserInfoRequest::__set_userId(const std::string& val) {
  this->userId = val;
}

uint32_t GetUserInfoRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userId);
          this->__isset.userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetUserInfoRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetUserInfoRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->userId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetUserInfoRequest &a, GetUserInfoRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.userId, b.userId);
  swap(a.__isset, b.__isset);
}

GetUserInfoRequest::GetUserInfoRequest(const GetUserInfoRequest& other136) {
  token = other136.token;
  userId = other136.userId;
  __isset = other136.__isset;
}
GetUserInfoRequest& GetUserInfoRequest::operator=(const GetUserInfoRequest& other137) {
  token = other137.token;
  userId = other137.userId;
  __isset = other137.__isset;
  return *this;
}
void GetUserInfoRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetUserInfoRequest(";
  out << "token=" << to_string(token);
  out << ", " << "userId=" << to_string(userId);
  out << ")";
}


GetUserInfoResponse::~GetUserInfoResponse() throw() {
}


void GetUserInfoResponse::__set_userInfo(const User& val) {
  this->userInfo = val;
}

uint32_t GetUserInfoResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->userInfo.read(iprot);
          this->__isset.userInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetUserInfoResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetUserInfoResponse");

  xfer += oprot->writeFieldBegin("userInfo", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->userInfo.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetUserInfoResponse &a, GetUserInfoResponse &b) {
  using ::std::swap;
  swap(a.userInfo, b.userInfo);
  swap(a.__isset, b.__isset);
}

GetUserInfoResponse::GetUserInfoResponse(const GetUserInfoResponse& other138) {
  userInfo = other138.userInfo;
  __isset = other138.__isset;
}
GetUserInfoResponse& GetUserInfoResponse::operator=(const GetUserInfoResponse& other139) {
  userInfo = other139.userInfo;
  __isset = other139.__isset;
  return *this;
}
void GetUserInfoResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetUserInfoResponse(";
  out << "userInfo=" << to_string(userInfo);
  out << ")";
}


SearchForApplicationsRequest::~SearchForApplicationsRequest() throw() {
}


void SearchForApplicationsRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void SearchForApplicationsRequest::__set_applicationName(const std::string& val) {
  this->applicationName = val;
}

void SearchForApplicationsRequest::__set_organization(const std::string& val) {
  this->organization = val;
__isset.organization = true;
}

uint32_t SearchForApplicationsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationName);
          this->__isset.applicationName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organization);
          this->__isset.organization = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SearchForApplicationsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SearchForApplicationsRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.organization) {
    xfer += oprot->writeFieldBegin("organization", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->organization);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SearchForApplicationsRequest &a, SearchForApplicationsRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationName, b.applicationName);
  swap(a.organization, b.organization);
  swap(a.__isset, b.__isset);
}

SearchForApplicationsRequest::SearchForApplicationsRequest(const SearchForApplicationsRequest& other140) {
  token = other140.token;
  applicationName = other140.applicationName;
  organization = other140.organization;
  __isset = other140.__isset;
}
SearchForApplicationsRequest& SearchForApplicationsRequest::operator=(const SearchForApplicationsRequest& other141) {
  token = other141.token;
  applicationName = other141.applicationName;
  organization = other141.organization;
  __isset = other141.__isset;
  return *this;
}
void SearchForApplicationsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SearchForApplicationsRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationName=" << to_string(applicationName);
  out << ", " << "organization="; (__isset.organization ? (out << to_string(organization)) : (out << "<null>"));
  out << ")";
}


SearchForApplicationsResponse::~SearchForApplicationsResponse() throw() {
}


void SearchForApplicationsResponse::__set_applications(const std::vector<Application> & val) {
  this->applications = val;
}

uint32_t SearchForApplicationsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->applications.clear();
            uint32_t _size142;
            ::apache::thrift::protocol::TType _etype145;
            xfer += iprot->readListBegin(_etype145, _size142);
            this->applications.resize(_size142);
            uint32_t _i146;
            for (_i146 = 0; _i146 < _size142; ++_i146)
            {
              xfer += this->applications[_i146].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.applications = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SearchForApplicationsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SearchForApplicationsResponse");

  xfer += oprot->writeFieldBegin("applications", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->applications.size()));
    std::vector<Application> ::const_iterator _iter147;
    for (_iter147 = this->applications.begin(); _iter147 != this->applications.end(); ++_iter147)
    {
      xfer += (*_iter147).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SearchForApplicationsResponse &a, SearchForApplicationsResponse &b) {
  using ::std::swap;
  swap(a.applications, b.applications);
  swap(a.__isset, b.__isset);
}

SearchForApplicationsResponse::SearchForApplicationsResponse(const SearchForApplicationsResponse& other148) {
  applications = other148.applications;
  __isset = other148.__isset;
}
SearchForApplicationsResponse& SearchForApplicationsResponse::operator=(const SearchForApplicationsResponse& other149) {
  applications = other149.applications;
  __isset = other149.__isset;
  return *this;
}
void SearchForApplicationsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SearchForApplicationsResponse(";
  out << "applications=" << to_string(applications);
  out << ")";
}

}}}} // namespace
