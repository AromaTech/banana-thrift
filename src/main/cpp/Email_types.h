/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Email_TYPES_H
#define Email_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "Aroma_types.h"
#include "Authentication_types.h"


namespace aroma { namespace thrift { namespace email {

typedef  ::tech::aroma::thrift::int int;

typedef  ::tech::aroma::thrift::long long;

typedef  ::tech::aroma::thrift::timestamp timestamp;

typedef class  ::tech::aroma::thrift::Application Application;

typedef class  ::tech::aroma::thrift::User User;

typedef class  ::aroma::thrift::authentication::ApplicationToken ApplicationToken;

class EmailNewApplication;

class EmailNewUserRegistration;

class EmailMessage;

typedef struct _EmailNewApplication__isset {
  _EmailNewApplication__isset() : creator(false), app(false), appToken(false) {}
  bool creator :1;
  bool app :1;
  bool appToken :1;
} _EmailNewApplication__isset;

class EmailNewApplication : public virtual ::apache::thrift::TBase {
 public:

  EmailNewApplication(const EmailNewApplication&);
  EmailNewApplication& operator=(const EmailNewApplication&);
  EmailNewApplication() {
  }

  virtual ~EmailNewApplication() throw();
  User creator;
  Application app;
  ApplicationToken appToken;

  _EmailNewApplication__isset __isset;

  void __set_creator(const User& val);

  void __set_app(const Application& val);

  void __set_appToken(const ApplicationToken& val);

  bool operator == (const EmailNewApplication & rhs) const
  {
    if (!(creator == rhs.creator))
      return false;
    if (!(app == rhs.app))
      return false;
    if (!(appToken == rhs.appToken))
      return false;
    return true;
  }
  bool operator != (const EmailNewApplication &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EmailNewApplication & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(EmailNewApplication &a, EmailNewApplication &b);

std::ostream& operator<<(std::ostream& out, const EmailNewApplication& obj);

typedef struct _EmailNewUserRegistration__isset {
  _EmailNewUserRegistration__isset() : infoOfNewUser(false) {}
  bool infoOfNewUser :1;
} _EmailNewUserRegistration__isset;

class EmailNewUserRegistration : public virtual ::apache::thrift::TBase {
 public:

  EmailNewUserRegistration(const EmailNewUserRegistration&);
  EmailNewUserRegistration& operator=(const EmailNewUserRegistration&);
  EmailNewUserRegistration() {
  }

  virtual ~EmailNewUserRegistration() throw();
  User infoOfNewUser;

  _EmailNewUserRegistration__isset __isset;

  void __set_infoOfNewUser(const User& val);

  bool operator == (const EmailNewUserRegistration & rhs) const
  {
    if (!(infoOfNewUser == rhs.infoOfNewUser))
      return false;
    return true;
  }
  bool operator != (const EmailNewUserRegistration &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EmailNewUserRegistration & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(EmailNewUserRegistration &a, EmailNewUserRegistration &b);

std::ostream& operator<<(std::ostream& out, const EmailNewUserRegistration& obj);

typedef struct _EmailMessage__isset {
  _EmailMessage__isset() : newApp(false), newUser(false) {}
  bool newApp :1;
  bool newUser :1;
} _EmailMessage__isset;

class EmailMessage : public virtual ::apache::thrift::TBase {
 public:

  EmailMessage(const EmailMessage&);
  EmailMessage& operator=(const EmailMessage&);
  EmailMessage() {
  }

  virtual ~EmailMessage() throw();
  EmailNewApplication newApp;
  EmailNewUserRegistration newUser;

  _EmailMessage__isset __isset;

  void __set_newApp(const EmailNewApplication& val);

  void __set_newUser(const EmailNewUserRegistration& val);

  bool operator == (const EmailMessage & rhs) const
  {
    if (__isset.newApp != rhs.__isset.newApp)
      return false;
    else if (__isset.newApp && !(newApp == rhs.newApp))
      return false;
    if (__isset.newUser != rhs.__isset.newUser)
      return false;
    else if (__isset.newUser && !(newUser == rhs.newUser))
      return false;
    return true;
  }
  bool operator != (const EmailMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EmailMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(EmailMessage &a, EmailMessage &b);

std::ostream& operator<<(std::ostream& out, const EmailMessage& obj);

}}} // namespace

#endif
