/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Email_TYPES_H
#define Email_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "Aroma_types.h"


namespace aroma { namespace thrift { namespace email {

typedef  ::tech::aroma::thrift::int int;

typedef  ::tech::aroma::thrift::long long;

typedef  ::tech::aroma::thrift::timestamp timestamp;

typedef class  ::tech::aroma::thrift::User User;

class EmailNewRegistration;

class EmailMessage;

typedef struct _EmailNewRegistration__isset {
  _EmailNewRegistration__isset() : infoOfNewUser(false) {}
  bool infoOfNewUser :1;
} _EmailNewRegistration__isset;

class EmailNewRegistration {
 public:

  EmailNewRegistration(const EmailNewRegistration&);
  EmailNewRegistration& operator=(const EmailNewRegistration&);
  EmailNewRegistration() {
  }

  virtual ~EmailNewRegistration() throw();
  User infoOfNewUser;

  _EmailNewRegistration__isset __isset;

  void __set_infoOfNewUser(const User& val);

  bool operator == (const EmailNewRegistration & rhs) const
  {
    if (!(infoOfNewUser == rhs.infoOfNewUser))
      return false;
    return true;
  }
  bool operator != (const EmailNewRegistration &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EmailNewRegistration & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(EmailNewRegistration &a, EmailNewRegistration &b);

inline std::ostream& operator<<(std::ostream& out, const EmailNewRegistration& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _EmailMessage__isset {
  _EmailMessage__isset() : newRegistration(false) {}
  bool newRegistration :1;
} _EmailMessage__isset;

class EmailMessage {
 public:

  EmailMessage(const EmailMessage&);
  EmailMessage& operator=(const EmailMessage&);
  EmailMessage() {
  }

  virtual ~EmailMessage() throw();
  EmailNewRegistration newRegistration;

  _EmailMessage__isset __isset;

  void __set_newRegistration(const EmailNewRegistration& val);

  bool operator == (const EmailMessage & rhs) const
  {
    if (!(newRegistration == rhs.newRegistration))
      return false;
    return true;
  }
  bool operator != (const EmailMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EmailMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(EmailMessage &a, EmailMessage &b);

inline std::ostream& operator<<(std::ostream& out, const EmailMessage& obj)
{
  obj.printTo(out);
  return out;
}

}}} // namespace

#endif
