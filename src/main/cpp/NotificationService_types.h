/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef NotificationService_TYPES_H
#define NotificationService_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "Authentication_types.h"
#include "Aroma_types.h"
#include "Channels_types.h"
#include "Endpoint_types.h"
#include "Events_types.h"
#include "Exceptions_types.h"


namespace aroma { namespace thrift { namespace notification { namespace service {

typedef  ::tech::aroma::thrift::int int;

typedef  ::tech::aroma::thrift::long long;

typedef  ::tech::aroma::thrift::timestamp timestamp;

typedef  ::tech::aroma::thrift::uuid uuid;

typedef class  ::aroma::thrift::authentication::AuthenticationToken AuthenticationToken;

typedef class  ::aroma::thrift::authentication::UserToken UserToken;

typedef class  ::tech::aroma::thrift::Application Application;

typedef  ::tech::aroma::thrift::Urgency::type Urgency;

typedef class  ::tech::aroma::thrift::User User;

typedef class  ::aroma::thrift::channels::AromaChannel AromaChannel;

typedef class  ::aroma::thrift::events::Event Event;

typedef class  ::aroma::thrift::exceptions::AccountAlreadyExistsException AccountAlreadyExistsException;

typedef class  ::aroma::thrift::exceptions::InvalidArgumentException InvalidArgumentException;

typedef class  ::aroma::thrift::exceptions::InvalidCredentialsException InvalidCredentialsException;

typedef class  ::aroma::thrift::exceptions::InvalidTokenException InvalidTokenException;

typedef class  ::aroma::thrift::exceptions::OperationFailedException OperationFailedException;

typedef class  ::aroma::thrift::exceptions::ApplicationAlreadyRegisteredException ApplicationAlreadyRegisteredException;

typedef class  ::aroma::thrift::exceptions::ApplicationDoesNotExistException ApplicationDoesNotExistException;

typedef class  ::aroma::thrift::exceptions::CustomChannelUnreachableException CustomChannelUnreachableException;

typedef class  ::aroma::thrift::exceptions::ChannelDoesNotExistException ChannelDoesNotExistException;

typedef class  ::aroma::thrift::exceptions::UnauthorizedException UnauthorizedException;

class GetEventsRequest;

class GetEventsResponse;

class SendNotificationRequest;

class SendNotificationResponse;

typedef struct _GetEventsRequest__isset {
  _GetEventsRequest__isset() : token(false), forUser(false), byApplication(false) {}
  bool token :1;
  bool forUser :1;
  bool byApplication :1;
} _GetEventsRequest__isset;

class GetEventsRequest {
 public:

  GetEventsRequest(const GetEventsRequest&);
  GetEventsRequest& operator=(const GetEventsRequest&);
  GetEventsRequest() : forUser(), byApplication() {
  }

  virtual ~GetEventsRequest() throw();
  UserToken token;
  uuid forUser;
  uuid byApplication;

  _GetEventsRequest__isset __isset;

  void __set_token(const UserToken& val);

  void __set_forUser(const uuid& val);

  void __set_byApplication(const uuid& val);

  bool operator == (const GetEventsRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(forUser == rhs.forUser))
      return false;
    if (__isset.byApplication != rhs.__isset.byApplication)
      return false;
    else if (__isset.byApplication && !(byApplication == rhs.byApplication))
      return false;
    return true;
  }
  bool operator != (const GetEventsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetEventsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetEventsRequest &a, GetEventsRequest &b);

inline std::ostream& operator<<(std::ostream& out, const GetEventsRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetEventsResponse__isset {
  _GetEventsResponse__isset() : events(false) {}
  bool events :1;
} _GetEventsResponse__isset;

class GetEventsResponse {
 public:

  GetEventsResponse(const GetEventsResponse&);
  GetEventsResponse& operator=(const GetEventsResponse&);
  GetEventsResponse() {
  }

  virtual ~GetEventsResponse() throw();
  std::vector<Event>  events;

  _GetEventsResponse__isset __isset;

  void __set_events(const std::vector<Event> & val);

  bool operator == (const GetEventsResponse & rhs) const
  {
    if (!(events == rhs.events))
      return false;
    return true;
  }
  bool operator != (const GetEventsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetEventsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetEventsResponse &a, GetEventsResponse &b);

inline std::ostream& operator<<(std::ostream& out, const GetEventsResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SendNotificationRequest__isset {
  _SendNotificationRequest__isset() : token(false), event(false), channelsByUser(false), storeEvent(true) {}
  bool token :1;
  bool event :1;
  bool channelsByUser :1;
  bool storeEvent :1;
} _SendNotificationRequest__isset;

class SendNotificationRequest {
 public:

  SendNotificationRequest(const SendNotificationRequest&);
  SendNotificationRequest& operator=(const SendNotificationRequest&);
  SendNotificationRequest() : storeEvent(false) {
  }

  virtual ~SendNotificationRequest() throw();
  AuthenticationToken token;
  Event event;
  std::map<User, std::vector<AromaChannel> >  channelsByUser;
  bool storeEvent;

  _SendNotificationRequest__isset __isset;

  void __set_token(const AuthenticationToken& val);

  void __set_event(const Event& val);

  void __set_channelsByUser(const std::map<User, std::vector<AromaChannel> > & val);

  void __set_storeEvent(const bool val);

  bool operator == (const SendNotificationRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(event == rhs.event))
      return false;
    if (!(channelsByUser == rhs.channelsByUser))
      return false;
    if (__isset.storeEvent != rhs.__isset.storeEvent)
      return false;
    else if (__isset.storeEvent && !(storeEvent == rhs.storeEvent))
      return false;
    return true;
  }
  bool operator != (const SendNotificationRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SendNotificationRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SendNotificationRequest &a, SendNotificationRequest &b);

inline std::ostream& operator<<(std::ostream& out, const SendNotificationRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SendNotificationResponse__isset {
  _SendNotificationResponse__isset() : notificationId(false) {}
  bool notificationId :1;
} _SendNotificationResponse__isset;

class SendNotificationResponse {
 public:

  SendNotificationResponse(const SendNotificationResponse&);
  SendNotificationResponse& operator=(const SendNotificationResponse&);
  SendNotificationResponse() : notificationId() {
  }

  virtual ~SendNotificationResponse() throw();
  uuid notificationId;

  _SendNotificationResponse__isset __isset;

  void __set_notificationId(const uuid& val);

  bool operator == (const SendNotificationResponse & rhs) const
  {
    if (__isset.notificationId != rhs.__isset.notificationId)
      return false;
    else if (__isset.notificationId && !(notificationId == rhs.notificationId))
      return false;
    return true;
  }
  bool operator != (const SendNotificationResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SendNotificationResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SendNotificationResponse &a, SendNotificationResponse &b);

inline std::ostream& operator<<(std::ostream& out, const SendNotificationResponse& obj)
{
  obj.printTo(out);
  return out;
}

}}}} // namespace

#endif
