/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef NotificationService_TYPES_H
#define NotificationService_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "Authentication_types.h"
#include "Aroma_types.h"
#include "Channels_types.h"
#include "Endpoint_types.h"
#include "Events_types.h"
#include "Exceptions_types.h"


namespace aroma { namespace thrift { namespace notification { namespace service {

typedef  ::tech::aroma::thrift::int int;

typedef  ::tech::aroma::thrift::long long;

typedef  ::tech::aroma::thrift::timestamp timestamp;

typedef  ::tech::aroma::thrift::uuid uuid;

typedef class  ::aroma::thrift::authentication::AuthenticationToken AuthenticationToken;

typedef class  ::tech::aroma::thrift::Application Application;

typedef  ::tech::aroma::thrift::Urgency::type Urgency;

typedef class  ::tech::aroma::thrift::User User;

typedef class  ::aroma::thrift::channels::AromaChannel AromaChannel;

typedef class  ::aroma::thrift::events::Event Event;

typedef class  ::aroma::thrift::exceptions::AccountAlreadyExistsException AccountAlreadyExistsException;

typedef class  ::aroma::thrift::exceptions::InvalidArgumentException InvalidArgumentException;

typedef class  ::aroma::thrift::exceptions::InvalidCredentialsException InvalidCredentialsException;

typedef class  ::aroma::thrift::exceptions::InvalidTokenException InvalidTokenException;

typedef class  ::aroma::thrift::exceptions::OperationFailedException OperationFailedException;

typedef class  ::aroma::thrift::exceptions::ApplicationAlreadyRegisteredException ApplicationAlreadyRegisteredException;

typedef class  ::aroma::thrift::exceptions::ApplicationDoesNotExistException ApplicationDoesNotExistException;

typedef class  ::aroma::thrift::exceptions::CustomChannelUnreachableException CustomChannelUnreachableException;

typedef class  ::aroma::thrift::exceptions::ChannelDoesNotExistException ChannelDoesNotExistException;

typedef class  ::aroma::thrift::exceptions::UnauthorizedException UnauthorizedException;

class SendNotificationRequest;

class SendNotificationResponse;

class EmailNewRegistration;

class EmailMessage;

class SendEmailRequest;

class SendEmailResponse;

typedef struct _SendNotificationRequest__isset {
  _SendNotificationRequest__isset() : token(false), event(false), channels(false) {}
  bool token :1;
  bool event :1;
  bool channels :1;
} _SendNotificationRequest__isset;

class SendNotificationRequest {
 public:

  SendNotificationRequest(const SendNotificationRequest&);
  SendNotificationRequest& operator=(const SendNotificationRequest&);
  SendNotificationRequest() {
  }

  virtual ~SendNotificationRequest() throw();
  AuthenticationToken token;
  Event event;
  std::vector<AromaChannel>  channels;

  _SendNotificationRequest__isset __isset;

  void __set_token(const AuthenticationToken& val);

  void __set_event(const Event& val);

  void __set_channels(const std::vector<AromaChannel> & val);

  bool operator == (const SendNotificationRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(event == rhs.event))
      return false;
    if (!(channels == rhs.channels))
      return false;
    return true;
  }
  bool operator != (const SendNotificationRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SendNotificationRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SendNotificationRequest &a, SendNotificationRequest &b);

inline std::ostream& operator<<(std::ostream& out, const SendNotificationRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SendNotificationResponse__isset {
  _SendNotificationResponse__isset() : notificationId(false) {}
  bool notificationId :1;
} _SendNotificationResponse__isset;

class SendNotificationResponse {
 public:

  SendNotificationResponse(const SendNotificationResponse&);
  SendNotificationResponse& operator=(const SendNotificationResponse&);
  SendNotificationResponse() : notificationId() {
  }

  virtual ~SendNotificationResponse() throw();
  uuid notificationId;

  _SendNotificationResponse__isset __isset;

  void __set_notificationId(const uuid& val);

  bool operator == (const SendNotificationResponse & rhs) const
  {
    if (__isset.notificationId != rhs.__isset.notificationId)
      return false;
    else if (__isset.notificationId && !(notificationId == rhs.notificationId))
      return false;
    return true;
  }
  bool operator != (const SendNotificationResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SendNotificationResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SendNotificationResponse &a, SendNotificationResponse &b);

inline std::ostream& operator<<(std::ostream& out, const SendNotificationResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _EmailNewRegistration__isset {
  _EmailNewRegistration__isset() : infoOfNewUser(false) {}
  bool infoOfNewUser :1;
} _EmailNewRegistration__isset;

class EmailNewRegistration {
 public:

  EmailNewRegistration(const EmailNewRegistration&);
  EmailNewRegistration& operator=(const EmailNewRegistration&);
  EmailNewRegistration() {
  }

  virtual ~EmailNewRegistration() throw();
  User infoOfNewUser;

  _EmailNewRegistration__isset __isset;

  void __set_infoOfNewUser(const User& val);

  bool operator == (const EmailNewRegistration & rhs) const
  {
    if (!(infoOfNewUser == rhs.infoOfNewUser))
      return false;
    return true;
  }
  bool operator != (const EmailNewRegistration &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EmailNewRegistration & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(EmailNewRegistration &a, EmailNewRegistration &b);

inline std::ostream& operator<<(std::ostream& out, const EmailNewRegistration& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _EmailMessage__isset {
  _EmailMessage__isset() : newRegistration(false) {}
  bool newRegistration :1;
} _EmailMessage__isset;

class EmailMessage {
 public:

  EmailMessage(const EmailMessage&);
  EmailMessage& operator=(const EmailMessage&);
  EmailMessage() {
  }

  virtual ~EmailMessage() throw();
  EmailNewRegistration newRegistration;

  _EmailMessage__isset __isset;

  void __set_newRegistration(const EmailNewRegistration& val);

  bool operator == (const EmailMessage & rhs) const
  {
    if (!(newRegistration == rhs.newRegistration))
      return false;
    return true;
  }
  bool operator != (const EmailMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EmailMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(EmailMessage &a, EmailMessage &b);

inline std::ostream& operator<<(std::ostream& out, const EmailMessage& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SendEmailRequest__isset {
  _SendEmailRequest__isset() : emailAddress(false), emailMessage(false) {}
  bool emailAddress :1;
  bool emailMessage :1;
} _SendEmailRequest__isset;

class SendEmailRequest {
 public:

  SendEmailRequest(const SendEmailRequest&);
  SendEmailRequest& operator=(const SendEmailRequest&);
  SendEmailRequest() : emailAddress() {
  }

  virtual ~SendEmailRequest() throw();
  std::string emailAddress;
  EmailMessage emailMessage;

  _SendEmailRequest__isset __isset;

  void __set_emailAddress(const std::string& val);

  void __set_emailMessage(const EmailMessage& val);

  bool operator == (const SendEmailRequest & rhs) const
  {
    if (!(emailAddress == rhs.emailAddress))
      return false;
    if (!(emailMessage == rhs.emailMessage))
      return false;
    return true;
  }
  bool operator != (const SendEmailRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SendEmailRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SendEmailRequest &a, SendEmailRequest &b);

inline std::ostream& operator<<(std::ostream& out, const SendEmailRequest& obj)
{
  obj.printTo(out);
  return out;
}


class SendEmailResponse {
 public:

  SendEmailResponse(const SendEmailResponse&);
  SendEmailResponse& operator=(const SendEmailResponse&);
  SendEmailResponse() {
  }

  virtual ~SendEmailResponse() throw();

  bool operator == (const SendEmailResponse & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SendEmailResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SendEmailResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SendEmailResponse &a, SendEmailResponse &b);

inline std::ostream& operator<<(std::ostream& out, const SendEmailResponse& obj)
{
  obj.printTo(out);
  return out;
}

}}}} // namespace

#endif
