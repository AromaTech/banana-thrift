/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "AuthenticationService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace aroma { namespace banana { namespace thrift { namespace authentication { namespace service {

int _kTokenTypeValues[] = {
  TokenType::APPLICATION,
  TokenType::USER
};
const char* _kTokenTypeNames[] = {
  "APPLICATION",
  "USER"
};
const std::map<int, const char*> _TokenType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTokenTypeValues, _kTokenTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


AuthenticationToken::~AuthenticationToken() throw() {
}


void AuthenticationToken::__set_applicationToken(const ApplicationToken& val) {
  this->applicationToken = val;
}

void AuthenticationToken::__set_userToken(const UserToken& val) {
  this->userToken = val;
}

uint32_t AuthenticationToken::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->applicationToken.read(iprot);
          this->__isset.applicationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->userToken.read(iprot);
          this->__isset.userToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AuthenticationToken::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AuthenticationToken");

  xfer += oprot->writeFieldBegin("applicationToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->applicationToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userToken", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->userToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AuthenticationToken &a, AuthenticationToken &b) {
  using ::std::swap;
  swap(a.applicationToken, b.applicationToken);
  swap(a.userToken, b.userToken);
  swap(a.__isset, b.__isset);
}

AuthenticationToken::AuthenticationToken(const AuthenticationToken& other0) {
  applicationToken = other0.applicationToken;
  userToken = other0.userToken;
  __isset = other0.__isset;
}
AuthenticationToken& AuthenticationToken::operator=(const AuthenticationToken& other1) {
  applicationToken = other1.applicationToken;
  userToken = other1.userToken;
  __isset = other1.__isset;
  return *this;
}
void AuthenticationToken::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AuthenticationToken(";
  out << "applicationToken=" << to_string(applicationToken);
  out << ", " << "userToken=" << to_string(userToken);
  out << ")";
}


CreateTokenRequest::~CreateTokenRequest() throw() {
}


void CreateTokenRequest::__set_ownerId(const std::string& val) {
  this->ownerId = val;
}

void CreateTokenRequest::__set_lifetime(const LengthOfTime& val) {
  this->lifetime = val;
}

void CreateTokenRequest::__set_desiredTokenType(const TokenType::type val) {
  this->desiredTokenType = val;
}

uint32_t CreateTokenRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ownerId);
          this->__isset.ownerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->lifetime.read(iprot);
          this->__isset.lifetime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->desiredTokenType = (TokenType::type)ecast2;
          this->__isset.desiredTokenType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateTokenRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CreateTokenRequest");

  xfer += oprot->writeFieldBegin("ownerId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->ownerId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lifetime", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->lifetime.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("desiredTokenType", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->desiredTokenType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CreateTokenRequest &a, CreateTokenRequest &b) {
  using ::std::swap;
  swap(a.ownerId, b.ownerId);
  swap(a.lifetime, b.lifetime);
  swap(a.desiredTokenType, b.desiredTokenType);
  swap(a.__isset, b.__isset);
}

CreateTokenRequest::CreateTokenRequest(const CreateTokenRequest& other3) {
  ownerId = other3.ownerId;
  lifetime = other3.lifetime;
  desiredTokenType = other3.desiredTokenType;
  __isset = other3.__isset;
}
CreateTokenRequest& CreateTokenRequest::operator=(const CreateTokenRequest& other4) {
  ownerId = other4.ownerId;
  lifetime = other4.lifetime;
  desiredTokenType = other4.desiredTokenType;
  __isset = other4.__isset;
  return *this;
}
void CreateTokenRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreateTokenRequest(";
  out << "ownerId=" << to_string(ownerId);
  out << ", " << "lifetime=" << to_string(lifetime);
  out << ", " << "desiredTokenType=" << to_string(desiredTokenType);
  out << ")";
}


CreateTokenResponse::~CreateTokenResponse() throw() {
}


void CreateTokenResponse::__set_token(const AuthenticationToken& val) {
  this->token = val;
}

uint32_t CreateTokenResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateTokenResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CreateTokenResponse");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CreateTokenResponse &a, CreateTokenResponse &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.__isset, b.__isset);
}

CreateTokenResponse::CreateTokenResponse(const CreateTokenResponse& other5) {
  token = other5.token;
  __isset = other5.__isset;
}
CreateTokenResponse& CreateTokenResponse::operator=(const CreateTokenResponse& other6) {
  token = other6.token;
  __isset = other6.__isset;
  return *this;
}
void CreateTokenResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreateTokenResponse(";
  out << "token=" << to_string(token);
  out << ")";
}


GetTokenInfoRequest::~GetTokenInfoRequest() throw() {
}


void GetTokenInfoRequest::__set_tokenId(const std::string& val) {
  this->tokenId = val;
}

void GetTokenInfoRequest::__set_tokenType(const TokenType::type val) {
  this->tokenType = val;
}

uint32_t GetTokenInfoRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tokenId);
          this->__isset.tokenId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast7;
          xfer += iprot->readI32(ecast7);
          this->tokenType = (TokenType::type)ecast7;
          this->__isset.tokenType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetTokenInfoRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetTokenInfoRequest");

  xfer += oprot->writeFieldBegin("tokenId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->tokenId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->tokenType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetTokenInfoRequest &a, GetTokenInfoRequest &b) {
  using ::std::swap;
  swap(a.tokenId, b.tokenId);
  swap(a.tokenType, b.tokenType);
  swap(a.__isset, b.__isset);
}

GetTokenInfoRequest::GetTokenInfoRequest(const GetTokenInfoRequest& other8) {
  tokenId = other8.tokenId;
  tokenType = other8.tokenType;
  __isset = other8.__isset;
}
GetTokenInfoRequest& GetTokenInfoRequest::operator=(const GetTokenInfoRequest& other9) {
  tokenId = other9.tokenId;
  tokenType = other9.tokenType;
  __isset = other9.__isset;
  return *this;
}
void GetTokenInfoRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetTokenInfoRequest(";
  out << "tokenId=" << to_string(tokenId);
  out << ", " << "tokenType=" << to_string(tokenType);
  out << ")";
}


GetTokenInfoResponse::~GetTokenInfoResponse() throw() {
}


void GetTokenInfoResponse::__set_token(const AuthenticationToken& val) {
  this->token = val;
}

uint32_t GetTokenInfoResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetTokenInfoResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetTokenInfoResponse");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetTokenInfoResponse &a, GetTokenInfoResponse &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.__isset, b.__isset);
}

GetTokenInfoResponse::GetTokenInfoResponse(const GetTokenInfoResponse& other10) {
  token = other10.token;
  __isset = other10.__isset;
}
GetTokenInfoResponse& GetTokenInfoResponse::operator=(const GetTokenInfoResponse& other11) {
  token = other11.token;
  __isset = other11.__isset;
  return *this;
}
void GetTokenInfoResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetTokenInfoResponse(";
  out << "token=" << to_string(token);
  out << ")";
}


InvalidateTokenRequest::~InvalidateTokenRequest() throw() {
}


void InvalidateTokenRequest::__set_token(const AuthenticationToken& val) {
  this->token = val;
}

uint32_t InvalidateTokenRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidateTokenRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InvalidateTokenRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InvalidateTokenRequest &a, InvalidateTokenRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.__isset, b.__isset);
}

InvalidateTokenRequest::InvalidateTokenRequest(const InvalidateTokenRequest& other12) {
  token = other12.token;
  __isset = other12.__isset;
}
InvalidateTokenRequest& InvalidateTokenRequest::operator=(const InvalidateTokenRequest& other13) {
  token = other13.token;
  __isset = other13.__isset;
  return *this;
}
void InvalidateTokenRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InvalidateTokenRequest(";
  out << "token=" << to_string(token);
  out << ")";
}


InvalidateTokenResponse::~InvalidateTokenResponse() throw() {
}


void InvalidateTokenResponse::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t InvalidateTokenResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidateTokenResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InvalidateTokenResponse");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InvalidateTokenResponse &a, InvalidateTokenResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

InvalidateTokenResponse::InvalidateTokenResponse(const InvalidateTokenResponse& other14) {
  message = other14.message;
  __isset = other14.__isset;
}
InvalidateTokenResponse& InvalidateTokenResponse::operator=(const InvalidateTokenResponse& other15) {
  message = other15.message;
  __isset = other15.__isset;
  return *this;
}
void InvalidateTokenResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InvalidateTokenResponse(";
  out << "message=" << to_string(message);
  out << ")";
}


VerifyTokenRequest::~VerifyTokenRequest() throw() {
}


void VerifyTokenRequest::__set_tokenId(const std::string& val) {
  this->tokenId = val;
}

void VerifyTokenRequest::__set_ownerId(const std::string& val) {
  this->ownerId = val;
__isset.ownerId = true;
}

uint32_t VerifyTokenRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tokenId);
          this->__isset.tokenId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ownerId);
          this->__isset.ownerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VerifyTokenRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("VerifyTokenRequest");

  xfer += oprot->writeFieldBegin("tokenId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->tokenId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.ownerId) {
    xfer += oprot->writeFieldBegin("ownerId", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->ownerId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(VerifyTokenRequest &a, VerifyTokenRequest &b) {
  using ::std::swap;
  swap(a.tokenId, b.tokenId);
  swap(a.ownerId, b.ownerId);
  swap(a.__isset, b.__isset);
}

VerifyTokenRequest::VerifyTokenRequest(const VerifyTokenRequest& other16) {
  tokenId = other16.tokenId;
  ownerId = other16.ownerId;
  __isset = other16.__isset;
}
VerifyTokenRequest& VerifyTokenRequest::operator=(const VerifyTokenRequest& other17) {
  tokenId = other17.tokenId;
  ownerId = other17.ownerId;
  __isset = other17.__isset;
  return *this;
}
void VerifyTokenRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "VerifyTokenRequest(";
  out << "tokenId=" << to_string(tokenId);
  out << ", " << "ownerId="; (__isset.ownerId ? (out << to_string(ownerId)) : (out << "<null>"));
  out << ")";
}


VerifyTokenResponse::~VerifyTokenResponse() throw() {
}


void VerifyTokenResponse::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t VerifyTokenResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VerifyTokenResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("VerifyTokenResponse");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(VerifyTokenResponse &a, VerifyTokenResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

VerifyTokenResponse::VerifyTokenResponse(const VerifyTokenResponse& other18) {
  message = other18.message;
  __isset = other18.__isset;
}
VerifyTokenResponse& VerifyTokenResponse::operator=(const VerifyTokenResponse& other19) {
  message = other19.message;
  __isset = other19.__isset;
  return *this;
}
void VerifyTokenResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "VerifyTokenResponse(";
  out << "message=" << to_string(message);
  out << ")";
}

}}}}} // namespace
