/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ServiceEndpoint_H
#define ServiceEndpoint_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "Endpoint_types.h"

namespace tech { namespace aroma { namespace banana { namespace thrift { namespace endpoint {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ServiceEndpointIf {
 public:
  virtual ~ServiceEndpointIf() {}
  virtual void healthPoke(HealthPokeResponse& _return, const HealthPokeRequest& request) = 0;
};

class ServiceEndpointIfFactory {
 public:
  typedef ServiceEndpointIf Handler;

  virtual ~ServiceEndpointIfFactory() {}

  virtual ServiceEndpointIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ServiceEndpointIf* /* handler */) = 0;
};

class ServiceEndpointIfSingletonFactory : virtual public ServiceEndpointIfFactory {
 public:
  ServiceEndpointIfSingletonFactory(const boost::shared_ptr<ServiceEndpointIf>& iface) : iface_(iface) {}
  virtual ~ServiceEndpointIfSingletonFactory() {}

  virtual ServiceEndpointIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ServiceEndpointIf* /* handler */) {}

 protected:
  boost::shared_ptr<ServiceEndpointIf> iface_;
};

class ServiceEndpointNull : virtual public ServiceEndpointIf {
 public:
  virtual ~ServiceEndpointNull() {}
  void healthPoke(HealthPokeResponse& /* _return */, const HealthPokeRequest& /* request */) {
    return;
  }
};

typedef struct _ServiceEndpoint_healthPoke_args__isset {
  _ServiceEndpoint_healthPoke_args__isset() : request(false) {}
  bool request :1;
} _ServiceEndpoint_healthPoke_args__isset;

class ServiceEndpoint_healthPoke_args {
 public:

  ServiceEndpoint_healthPoke_args(const ServiceEndpoint_healthPoke_args&);
  ServiceEndpoint_healthPoke_args& operator=(const ServiceEndpoint_healthPoke_args&);
  ServiceEndpoint_healthPoke_args() {
  }

  virtual ~ServiceEndpoint_healthPoke_args() throw();
  HealthPokeRequest request;

  _ServiceEndpoint_healthPoke_args__isset __isset;

  void __set_request(const HealthPokeRequest& val);

  bool operator == (const ServiceEndpoint_healthPoke_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const ServiceEndpoint_healthPoke_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceEndpoint_healthPoke_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ServiceEndpoint_healthPoke_pargs {
 public:


  virtual ~ServiceEndpoint_healthPoke_pargs() throw();
  const HealthPokeRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServiceEndpoint_healthPoke_result__isset {
  _ServiceEndpoint_healthPoke_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _ServiceEndpoint_healthPoke_result__isset;

class ServiceEndpoint_healthPoke_result {
 public:

  ServiceEndpoint_healthPoke_result(const ServiceEndpoint_healthPoke_result&);
  ServiceEndpoint_healthPoke_result& operator=(const ServiceEndpoint_healthPoke_result&);
  ServiceEndpoint_healthPoke_result() {
  }

  virtual ~ServiceEndpoint_healthPoke_result() throw();
  HealthPokeResponse success;
  OperationFailedException ex1;

  _ServiceEndpoint_healthPoke_result__isset __isset;

  void __set_success(const HealthPokeResponse& val);

  void __set_ex1(const OperationFailedException& val);

  bool operator == (const ServiceEndpoint_healthPoke_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const ServiceEndpoint_healthPoke_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceEndpoint_healthPoke_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServiceEndpoint_healthPoke_presult__isset {
  _ServiceEndpoint_healthPoke_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _ServiceEndpoint_healthPoke_presult__isset;

class ServiceEndpoint_healthPoke_presult {
 public:


  virtual ~ServiceEndpoint_healthPoke_presult() throw();
  HealthPokeResponse* success;
  OperationFailedException* ex1;

  _ServiceEndpoint_healthPoke_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ServiceEndpointClient : virtual public ServiceEndpointIf {
 public:
  ServiceEndpointClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ServiceEndpointClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void healthPoke(HealthPokeResponse& _return, const HealthPokeRequest& request);
  void send_healthPoke(const HealthPokeRequest& request);
  void recv_healthPoke(HealthPokeResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ServiceEndpointProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ServiceEndpointIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ServiceEndpointProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_healthPoke(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ServiceEndpointProcessor(boost::shared_ptr<ServiceEndpointIf> iface) :
    iface_(iface) {
    processMap_["healthPoke"] = &ServiceEndpointProcessor::process_healthPoke;
  }

  virtual ~ServiceEndpointProcessor() {}
};

class ServiceEndpointProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ServiceEndpointProcessorFactory(const ::boost::shared_ptr< ServiceEndpointIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ServiceEndpointIfFactory > handlerFactory_;
};

class ServiceEndpointMultiface : virtual public ServiceEndpointIf {
 public:
  ServiceEndpointMultiface(std::vector<boost::shared_ptr<ServiceEndpointIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ServiceEndpointMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ServiceEndpointIf> > ifaces_;
  ServiceEndpointMultiface() {}
  void add(boost::shared_ptr<ServiceEndpointIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void healthPoke(HealthPokeResponse& _return, const HealthPokeRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->healthPoke(_return, request);
    }
    ifaces_[i]->healthPoke(_return, request);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ServiceEndpointConcurrentClient : virtual public ServiceEndpointIf {
 public:
  ServiceEndpointConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ServiceEndpointConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void healthPoke(HealthPokeResponse& _return, const HealthPokeRequest& request);
  int32_t send_healthPoke(const HealthPokeRequest& request);
  void recv_healthPoke(HealthPokeResponse& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}}}}} // namespace

#endif
