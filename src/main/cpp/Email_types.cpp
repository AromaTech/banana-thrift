/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Email_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace aroma { namespace thrift { namespace email {


EmailNewUserRegistration::~EmailNewUserRegistration() throw() {
}


void EmailNewUserRegistration::__set_infoOfNewUser(const User& val) {
  this->infoOfNewUser = val;
}

uint32_t EmailNewUserRegistration::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->infoOfNewUser.read(iprot);
          this->__isset.infoOfNewUser = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EmailNewUserRegistration::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("EmailNewUserRegistration");

  xfer += oprot->writeFieldBegin("infoOfNewUser", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->infoOfNewUser.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EmailNewUserRegistration &a, EmailNewUserRegistration &b) {
  using ::std::swap;
  swap(a.infoOfNewUser, b.infoOfNewUser);
  swap(a.__isset, b.__isset);
}

EmailNewUserRegistration::EmailNewUserRegistration(const EmailNewUserRegistration& other0) {
  infoOfNewUser = other0.infoOfNewUser;
  __isset = other0.__isset;
}
EmailNewUserRegistration& EmailNewUserRegistration::operator=(const EmailNewUserRegistration& other1) {
  infoOfNewUser = other1.infoOfNewUser;
  __isset = other1.__isset;
  return *this;
}
void EmailNewUserRegistration::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EmailNewUserRegistration(";
  out << "infoOfNewUser=" << to_string(infoOfNewUser);
  out << ")";
}


EmailMessage::~EmailMessage() throw() {
}


void EmailMessage::__set_newUser(const EmailNewUserRegistration& val) {
  this->newUser = val;
}

uint32_t EmailMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->newUser.read(iprot);
          this->__isset.newUser = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EmailMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("EmailMessage");

  xfer += oprot->writeFieldBegin("newUser", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->newUser.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EmailMessage &a, EmailMessage &b) {
  using ::std::swap;
  swap(a.newUser, b.newUser);
  swap(a.__isset, b.__isset);
}

EmailMessage::EmailMessage(const EmailMessage& other2) {
  newUser = other2.newUser;
  __isset = other2.__isset;
}
EmailMessage& EmailMessage::operator=(const EmailMessage& other3) {
  newUser = other3.newUser;
  __isset = other3.__isset;
  return *this;
}
void EmailMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EmailMessage(";
  out << "newUser=" << to_string(newUser);
  out << ")";
}

}}} // namespace
