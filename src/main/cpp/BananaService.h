/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BananaService_H
#define BananaService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "BananaService_types.h"

namespace aroma { namespace banana { namespace thrift { namespace service {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class BananaServiceIf {
 public:
  virtual ~BananaServiceIf() {}
  virtual double getApiVersion() = 0;

  /**
   * Provision a New Application to keep tabs on.
   * 
   * #user
   * 
   * @param request
   */
  virtual void provisionApplication(ProvisionApplicationResponse& _return, const ProvisionApplicationRequest& request) = 0;

  /**
   * Regenerate an Application Token in case the existing one is lost, forgotten, or compromised.
   * Keep in mind that this will invalidate any prior existing Application Tokens.
   * Only an "owner" can perform this operation.
   * 
   * #owner
   * 
   * @param request
   */
  virtual void regenerateToken(RegenerateApplicationTokenResponse& _return, const RegenerateApplicationTokenRequest& request) = 0;

  /**
   * Register an existing Application for Health Pokes. The Banana Service
   * will then periodically poke the Application for health status.
   * 
   * #owner
   * 
   * @param request
   */
  virtual void registerHealthCheck(RegisterHealthCheckResponse& _return, const RegisterHealthCheckRequest& request) = 0;

  /**
   * Removes a previously saved channel.
   * 
   * @param request
   */
  virtual void removeSavedChannel(RemoveSavedChannelResponse& _return, const RemoveSavedChannelRequest& request) = 0;

  /**
   * Renew an Application Token that is close to being expired.
   * Only an "owner" can perform this operation.
   * 
   * #owner
   * 
   * @param request
   */
  virtual void renewApplicationToken(RenewApplicationTokenResponse& _return, const RenewApplicationTokenRequest& request) = 0;

  /**
   * Saves a user's channel for future reference.
   * 
   * @param request
   */
  virtual void saveChannel(SaveChannelResponse& _return, const SaveChannelRequest& request) = 0;

  /**
   * Sign in to the App and get a User Token in return.
   * 
   * #user
   * 
   * @param request
   */
  virtual void signIn(SignInResponse& _return, const SignInRequest& request) = 0;

  /**
   * Sign Up for an Aroma Account.
   * 
   * @param request
   */
  virtual void signUp(SignUpResponse& _return, const SignUpRequest& request) = 0;

  /**
   * Snoozes a Channel momentarily, so that it won't be notified of new alerts and messages.
   * 
   * @param request
   */
  virtual void snoozeChannel(SnoozeChannelResponse& _return, const SnoozeChannelRequest& request) = 0;

  /**
   * Subscribe to an existing application to get notifications.
   * 
   * #user
   * 
   * @param request
   */
  virtual void subscribeToApplication(SubscribeToApplicationResponse& _return, const SubscribeToApplicationRequest& request) = 0;

  /**
   * Get all of the User-Related activities that have happened recently.
   * 
   * #user
   * 
   * @param request
   */
  virtual void getActivity(GetActivityResponse& _return, const GetActivityRequest& request) = 0;

  /**
   * Get details about an Application from it's unique ID
   * 
   * #user
   * 
   * @param request
   */
  virtual void getApplicationInfo(GetApplicationInfoResponse& _return, const GetApplicationInfoRequest& request) = 0;
  virtual void getDashboard(GetDashboardResponse& _return, const GetDashboardRequest& request) = 0;

  /**
   * Get an Application's Messages.
   * 
   * @param request
   */
  virtual void getMessages(GetMessagesResponse& _return, const GetMessagesRequest& request) = 0;

  /**
   * In case the Message body has been truncated, use this operation
   * to load the full message.
   * 
   * @param request
   */
  virtual void getFullMessage(GetFullMessageResponse& _return, const GetFullMessageRequest& request) = 0;
  virtual void getMyApplications(GetMyApplicationsResponse& _return, const GetMyApplicationsRequest& request) = 0;
  virtual void getMySavedChannels(GetMySavedChannelsResponse& _return, const GetMySavedChannelsRequest& request) = 0;
  virtual void getUserInfo(GetUserInfoResponse& _return, const GetUserInfoRequest& request) = 0;

  /**
   * Perform a Search on all the applications registered to the Banana Service by searching for its title.
   * 
   * #user
   * 
   * @param request
   */
  virtual void searchForApplications(SearchForApplicationsResponse& _return, const SearchForApplicationsRequest& request) = 0;
};

class BananaServiceIfFactory {
 public:
  typedef BananaServiceIf Handler;

  virtual ~BananaServiceIfFactory() {}

  virtual BananaServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(BananaServiceIf* /* handler */) = 0;
};

class BananaServiceIfSingletonFactory : virtual public BananaServiceIfFactory {
 public:
  BananaServiceIfSingletonFactory(const boost::shared_ptr<BananaServiceIf>& iface) : iface_(iface) {}
  virtual ~BananaServiceIfSingletonFactory() {}

  virtual BananaServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(BananaServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<BananaServiceIf> iface_;
};

class BananaServiceNull : virtual public BananaServiceIf {
 public:
  virtual ~BananaServiceNull() {}
  double getApiVersion() {
    double _return = (double)0;
    return _return;
  }
  void provisionApplication(ProvisionApplicationResponse& /* _return */, const ProvisionApplicationRequest& /* request */) {
    return;
  }
  void regenerateToken(RegenerateApplicationTokenResponse& /* _return */, const RegenerateApplicationTokenRequest& /* request */) {
    return;
  }
  void registerHealthCheck(RegisterHealthCheckResponse& /* _return */, const RegisterHealthCheckRequest& /* request */) {
    return;
  }
  void removeSavedChannel(RemoveSavedChannelResponse& /* _return */, const RemoveSavedChannelRequest& /* request */) {
    return;
  }
  void renewApplicationToken(RenewApplicationTokenResponse& /* _return */, const RenewApplicationTokenRequest& /* request */) {
    return;
  }
  void saveChannel(SaveChannelResponse& /* _return */, const SaveChannelRequest& /* request */) {
    return;
  }
  void signIn(SignInResponse& /* _return */, const SignInRequest& /* request */) {
    return;
  }
  void signUp(SignUpResponse& /* _return */, const SignUpRequest& /* request */) {
    return;
  }
  void snoozeChannel(SnoozeChannelResponse& /* _return */, const SnoozeChannelRequest& /* request */) {
    return;
  }
  void subscribeToApplication(SubscribeToApplicationResponse& /* _return */, const SubscribeToApplicationRequest& /* request */) {
    return;
  }
  void getActivity(GetActivityResponse& /* _return */, const GetActivityRequest& /* request */) {
    return;
  }
  void getApplicationInfo(GetApplicationInfoResponse& /* _return */, const GetApplicationInfoRequest& /* request */) {
    return;
  }
  void getDashboard(GetDashboardResponse& /* _return */, const GetDashboardRequest& /* request */) {
    return;
  }
  void getMessages(GetMessagesResponse& /* _return */, const GetMessagesRequest& /* request */) {
    return;
  }
  void getFullMessage(GetFullMessageResponse& /* _return */, const GetFullMessageRequest& /* request */) {
    return;
  }
  void getMyApplications(GetMyApplicationsResponse& /* _return */, const GetMyApplicationsRequest& /* request */) {
    return;
  }
  void getMySavedChannels(GetMySavedChannelsResponse& /* _return */, const GetMySavedChannelsRequest& /* request */) {
    return;
  }
  void getUserInfo(GetUserInfoResponse& /* _return */, const GetUserInfoRequest& /* request */) {
    return;
  }
  void searchForApplications(SearchForApplicationsResponse& /* _return */, const SearchForApplicationsRequest& /* request */) {
    return;
  }
};


class BananaService_getApiVersion_args {
 public:

  BananaService_getApiVersion_args(const BananaService_getApiVersion_args&);
  BananaService_getApiVersion_args& operator=(const BananaService_getApiVersion_args&);
  BananaService_getApiVersion_args() {
  }

  virtual ~BananaService_getApiVersion_args() throw();

  bool operator == (const BananaService_getApiVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BananaService_getApiVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_getApiVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BananaService_getApiVersion_pargs {
 public:


  virtual ~BananaService_getApiVersion_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_getApiVersion_result__isset {
  _BananaService_getApiVersion_result__isset() : success(false) {}
  bool success :1;
} _BananaService_getApiVersion_result__isset;

class BananaService_getApiVersion_result {
 public:

  BananaService_getApiVersion_result(const BananaService_getApiVersion_result&);
  BananaService_getApiVersion_result& operator=(const BananaService_getApiVersion_result&);
  BananaService_getApiVersion_result() : success(0) {
  }

  virtual ~BananaService_getApiVersion_result() throw();
  double success;

  _BananaService_getApiVersion_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const BananaService_getApiVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BananaService_getApiVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_getApiVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_getApiVersion_presult__isset {
  _BananaService_getApiVersion_presult__isset() : success(false) {}
  bool success :1;
} _BananaService_getApiVersion_presult__isset;

class BananaService_getApiVersion_presult {
 public:


  virtual ~BananaService_getApiVersion_presult() throw();
  double* success;

  _BananaService_getApiVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BananaService_provisionApplication_args__isset {
  _BananaService_provisionApplication_args__isset() : request(false) {}
  bool request :1;
} _BananaService_provisionApplication_args__isset;

class BananaService_provisionApplication_args {
 public:

  BananaService_provisionApplication_args(const BananaService_provisionApplication_args&);
  BananaService_provisionApplication_args& operator=(const BananaService_provisionApplication_args&);
  BananaService_provisionApplication_args() {
  }

  virtual ~BananaService_provisionApplication_args() throw();
  ProvisionApplicationRequest request;

  _BananaService_provisionApplication_args__isset __isset;

  void __set_request(const ProvisionApplicationRequest& val);

  bool operator == (const BananaService_provisionApplication_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BananaService_provisionApplication_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_provisionApplication_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BananaService_provisionApplication_pargs {
 public:


  virtual ~BananaService_provisionApplication_pargs() throw();
  const ProvisionApplicationRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_provisionApplication_result__isset {
  _BananaService_provisionApplication_result__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false), ex5(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
  bool ex5 :1;
} _BananaService_provisionApplication_result__isset;

class BananaService_provisionApplication_result {
 public:

  BananaService_provisionApplication_result(const BananaService_provisionApplication_result&);
  BananaService_provisionApplication_result& operator=(const BananaService_provisionApplication_result&);
  BananaService_provisionApplication_result() {
  }

  virtual ~BananaService_provisionApplication_result() throw();
  ProvisionApplicationResponse success;
  OperationFailedException ex1;
  InvalidArgumentException ex2;
  InvalidCredentialsException ex3;
  ApplicationDoesNotExistException ex4;
  UnauthorizedException ex5;

  _BananaService_provisionApplication_result__isset __isset;

  void __set_success(const ProvisionApplicationResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidArgumentException& val);

  void __set_ex3(const InvalidCredentialsException& val);

  void __set_ex4(const ApplicationDoesNotExistException& val);

  void __set_ex5(const UnauthorizedException& val);

  bool operator == (const BananaService_provisionApplication_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    if (!(ex3 == rhs.ex3))
      return false;
    if (!(ex4 == rhs.ex4))
      return false;
    if (!(ex5 == rhs.ex5))
      return false;
    return true;
  }
  bool operator != (const BananaService_provisionApplication_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_provisionApplication_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_provisionApplication_presult__isset {
  _BananaService_provisionApplication_presult__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false), ex5(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
  bool ex5 :1;
} _BananaService_provisionApplication_presult__isset;

class BananaService_provisionApplication_presult {
 public:


  virtual ~BananaService_provisionApplication_presult() throw();
  ProvisionApplicationResponse* success;
  OperationFailedException* ex1;
  InvalidArgumentException* ex2;
  InvalidCredentialsException* ex3;
  ApplicationDoesNotExistException* ex4;
  UnauthorizedException* ex5;

  _BananaService_provisionApplication_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BananaService_regenerateToken_args__isset {
  _BananaService_regenerateToken_args__isset() : request(false) {}
  bool request :1;
} _BananaService_regenerateToken_args__isset;

class BananaService_regenerateToken_args {
 public:

  BananaService_regenerateToken_args(const BananaService_regenerateToken_args&);
  BananaService_regenerateToken_args& operator=(const BananaService_regenerateToken_args&);
  BananaService_regenerateToken_args() {
  }

  virtual ~BananaService_regenerateToken_args() throw();
  RegenerateApplicationTokenRequest request;

  _BananaService_regenerateToken_args__isset __isset;

  void __set_request(const RegenerateApplicationTokenRequest& val);

  bool operator == (const BananaService_regenerateToken_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BananaService_regenerateToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_regenerateToken_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BananaService_regenerateToken_pargs {
 public:


  virtual ~BananaService_regenerateToken_pargs() throw();
  const RegenerateApplicationTokenRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_regenerateToken_result__isset {
  _BananaService_regenerateToken_result__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false), ex5(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
  bool ex5 :1;
} _BananaService_regenerateToken_result__isset;

class BananaService_regenerateToken_result {
 public:

  BananaService_regenerateToken_result(const BananaService_regenerateToken_result&);
  BananaService_regenerateToken_result& operator=(const BananaService_regenerateToken_result&);
  BananaService_regenerateToken_result() {
  }

  virtual ~BananaService_regenerateToken_result() throw();
  RegenerateApplicationTokenResponse success;
  OperationFailedException ex1;
  InvalidArgumentException ex2;
  InvalidCredentialsException ex3;
  ApplicationDoesNotExistException ex4;
  UnauthorizedException ex5;

  _BananaService_regenerateToken_result__isset __isset;

  void __set_success(const RegenerateApplicationTokenResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidArgumentException& val);

  void __set_ex3(const InvalidCredentialsException& val);

  void __set_ex4(const ApplicationDoesNotExistException& val);

  void __set_ex5(const UnauthorizedException& val);

  bool operator == (const BananaService_regenerateToken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    if (!(ex3 == rhs.ex3))
      return false;
    if (!(ex4 == rhs.ex4))
      return false;
    if (!(ex5 == rhs.ex5))
      return false;
    return true;
  }
  bool operator != (const BananaService_regenerateToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_regenerateToken_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_regenerateToken_presult__isset {
  _BananaService_regenerateToken_presult__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false), ex5(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
  bool ex5 :1;
} _BananaService_regenerateToken_presult__isset;

class BananaService_regenerateToken_presult {
 public:


  virtual ~BananaService_regenerateToken_presult() throw();
  RegenerateApplicationTokenResponse* success;
  OperationFailedException* ex1;
  InvalidArgumentException* ex2;
  InvalidCredentialsException* ex3;
  ApplicationDoesNotExistException* ex4;
  UnauthorizedException* ex5;

  _BananaService_regenerateToken_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BananaService_registerHealthCheck_args__isset {
  _BananaService_registerHealthCheck_args__isset() : request(false) {}
  bool request :1;
} _BananaService_registerHealthCheck_args__isset;

class BananaService_registerHealthCheck_args {
 public:

  BananaService_registerHealthCheck_args(const BananaService_registerHealthCheck_args&);
  BananaService_registerHealthCheck_args& operator=(const BananaService_registerHealthCheck_args&);
  BananaService_registerHealthCheck_args() {
  }

  virtual ~BananaService_registerHealthCheck_args() throw();
  RegisterHealthCheckRequest request;

  _BananaService_registerHealthCheck_args__isset __isset;

  void __set_request(const RegisterHealthCheckRequest& val);

  bool operator == (const BananaService_registerHealthCheck_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BananaService_registerHealthCheck_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_registerHealthCheck_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BananaService_registerHealthCheck_pargs {
 public:


  virtual ~BananaService_registerHealthCheck_pargs() throw();
  const RegisterHealthCheckRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_registerHealthCheck_result__isset {
  _BananaService_registerHealthCheck_result__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false), ex5(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
  bool ex5 :1;
} _BananaService_registerHealthCheck_result__isset;

class BananaService_registerHealthCheck_result {
 public:

  BananaService_registerHealthCheck_result(const BananaService_registerHealthCheck_result&);
  BananaService_registerHealthCheck_result& operator=(const BananaService_registerHealthCheck_result&);
  BananaService_registerHealthCheck_result() {
  }

  virtual ~BananaService_registerHealthCheck_result() throw();
  RegisterHealthCheckResponse success;
  OperationFailedException ex1;
  InvalidArgumentException ex2;
  InvalidCredentialsException ex3;
  ApplicationDoesNotExistException ex4;
  UnauthorizedException ex5;

  _BananaService_registerHealthCheck_result__isset __isset;

  void __set_success(const RegisterHealthCheckResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidArgumentException& val);

  void __set_ex3(const InvalidCredentialsException& val);

  void __set_ex4(const ApplicationDoesNotExistException& val);

  void __set_ex5(const UnauthorizedException& val);

  bool operator == (const BananaService_registerHealthCheck_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    if (!(ex3 == rhs.ex3))
      return false;
    if (!(ex4 == rhs.ex4))
      return false;
    if (!(ex5 == rhs.ex5))
      return false;
    return true;
  }
  bool operator != (const BananaService_registerHealthCheck_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_registerHealthCheck_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_registerHealthCheck_presult__isset {
  _BananaService_registerHealthCheck_presult__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false), ex5(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
  bool ex5 :1;
} _BananaService_registerHealthCheck_presult__isset;

class BananaService_registerHealthCheck_presult {
 public:


  virtual ~BananaService_registerHealthCheck_presult() throw();
  RegisterHealthCheckResponse* success;
  OperationFailedException* ex1;
  InvalidArgumentException* ex2;
  InvalidCredentialsException* ex3;
  ApplicationDoesNotExistException* ex4;
  UnauthorizedException* ex5;

  _BananaService_registerHealthCheck_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BananaService_removeSavedChannel_args__isset {
  _BananaService_removeSavedChannel_args__isset() : request(false) {}
  bool request :1;
} _BananaService_removeSavedChannel_args__isset;

class BananaService_removeSavedChannel_args {
 public:

  BananaService_removeSavedChannel_args(const BananaService_removeSavedChannel_args&);
  BananaService_removeSavedChannel_args& operator=(const BananaService_removeSavedChannel_args&);
  BananaService_removeSavedChannel_args() {
  }

  virtual ~BananaService_removeSavedChannel_args() throw();
  RemoveSavedChannelRequest request;

  _BananaService_removeSavedChannel_args__isset __isset;

  void __set_request(const RemoveSavedChannelRequest& val);

  bool operator == (const BananaService_removeSavedChannel_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BananaService_removeSavedChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_removeSavedChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BananaService_removeSavedChannel_pargs {
 public:


  virtual ~BananaService_removeSavedChannel_pargs() throw();
  const RemoveSavedChannelRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_removeSavedChannel_result__isset {
  _BananaService_removeSavedChannel_result__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false), ex5(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
  bool ex5 :1;
} _BananaService_removeSavedChannel_result__isset;

class BananaService_removeSavedChannel_result {
 public:

  BananaService_removeSavedChannel_result(const BananaService_removeSavedChannel_result&);
  BananaService_removeSavedChannel_result& operator=(const BananaService_removeSavedChannel_result&);
  BananaService_removeSavedChannel_result() {
  }

  virtual ~BananaService_removeSavedChannel_result() throw();
  RemoveSavedChannelResponse success;
  OperationFailedException ex1;
  InvalidArgumentException ex2;
  InvalidCredentialsException ex3;
  UnauthorizedException ex4;
  ChannelDoesNotExistException ex5;

  _BananaService_removeSavedChannel_result__isset __isset;

  void __set_success(const RemoveSavedChannelResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidArgumentException& val);

  void __set_ex3(const InvalidCredentialsException& val);

  void __set_ex4(const UnauthorizedException& val);

  void __set_ex5(const ChannelDoesNotExistException& val);

  bool operator == (const BananaService_removeSavedChannel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    if (!(ex3 == rhs.ex3))
      return false;
    if (!(ex4 == rhs.ex4))
      return false;
    if (!(ex5 == rhs.ex5))
      return false;
    return true;
  }
  bool operator != (const BananaService_removeSavedChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_removeSavedChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_removeSavedChannel_presult__isset {
  _BananaService_removeSavedChannel_presult__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false), ex5(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
  bool ex5 :1;
} _BananaService_removeSavedChannel_presult__isset;

class BananaService_removeSavedChannel_presult {
 public:


  virtual ~BananaService_removeSavedChannel_presult() throw();
  RemoveSavedChannelResponse* success;
  OperationFailedException* ex1;
  InvalidArgumentException* ex2;
  InvalidCredentialsException* ex3;
  UnauthorizedException* ex4;
  ChannelDoesNotExistException* ex5;

  _BananaService_removeSavedChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BananaService_renewApplicationToken_args__isset {
  _BananaService_renewApplicationToken_args__isset() : request(false) {}
  bool request :1;
} _BananaService_renewApplicationToken_args__isset;

class BananaService_renewApplicationToken_args {
 public:

  BananaService_renewApplicationToken_args(const BananaService_renewApplicationToken_args&);
  BananaService_renewApplicationToken_args& operator=(const BananaService_renewApplicationToken_args&);
  BananaService_renewApplicationToken_args() {
  }

  virtual ~BananaService_renewApplicationToken_args() throw();
  RenewApplicationTokenRequest request;

  _BananaService_renewApplicationToken_args__isset __isset;

  void __set_request(const RenewApplicationTokenRequest& val);

  bool operator == (const BananaService_renewApplicationToken_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BananaService_renewApplicationToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_renewApplicationToken_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BananaService_renewApplicationToken_pargs {
 public:


  virtual ~BananaService_renewApplicationToken_pargs() throw();
  const RenewApplicationTokenRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_renewApplicationToken_result__isset {
  _BananaService_renewApplicationToken_result__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false), ex5(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
  bool ex5 :1;
} _BananaService_renewApplicationToken_result__isset;

class BananaService_renewApplicationToken_result {
 public:

  BananaService_renewApplicationToken_result(const BananaService_renewApplicationToken_result&);
  BananaService_renewApplicationToken_result& operator=(const BananaService_renewApplicationToken_result&);
  BananaService_renewApplicationToken_result() {
  }

  virtual ~BananaService_renewApplicationToken_result() throw();
  RenewApplicationTokenResponse success;
  OperationFailedException ex1;
  InvalidArgumentException ex2;
  InvalidCredentialsException ex3;
  ApplicationDoesNotExistException ex4;
  UnauthorizedException ex5;

  _BananaService_renewApplicationToken_result__isset __isset;

  void __set_success(const RenewApplicationTokenResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidArgumentException& val);

  void __set_ex3(const InvalidCredentialsException& val);

  void __set_ex4(const ApplicationDoesNotExistException& val);

  void __set_ex5(const UnauthorizedException& val);

  bool operator == (const BananaService_renewApplicationToken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    if (!(ex3 == rhs.ex3))
      return false;
    if (!(ex4 == rhs.ex4))
      return false;
    if (!(ex5 == rhs.ex5))
      return false;
    return true;
  }
  bool operator != (const BananaService_renewApplicationToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_renewApplicationToken_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_renewApplicationToken_presult__isset {
  _BananaService_renewApplicationToken_presult__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false), ex5(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
  bool ex5 :1;
} _BananaService_renewApplicationToken_presult__isset;

class BananaService_renewApplicationToken_presult {
 public:


  virtual ~BananaService_renewApplicationToken_presult() throw();
  RenewApplicationTokenResponse* success;
  OperationFailedException* ex1;
  InvalidArgumentException* ex2;
  InvalidCredentialsException* ex3;
  ApplicationDoesNotExistException* ex4;
  UnauthorizedException* ex5;

  _BananaService_renewApplicationToken_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BananaService_saveChannel_args__isset {
  _BananaService_saveChannel_args__isset() : request(false) {}
  bool request :1;
} _BananaService_saveChannel_args__isset;

class BananaService_saveChannel_args {
 public:

  BananaService_saveChannel_args(const BananaService_saveChannel_args&);
  BananaService_saveChannel_args& operator=(const BananaService_saveChannel_args&);
  BananaService_saveChannel_args() {
  }

  virtual ~BananaService_saveChannel_args() throw();
  SaveChannelRequest request;

  _BananaService_saveChannel_args__isset __isset;

  void __set_request(const SaveChannelRequest& val);

  bool operator == (const BananaService_saveChannel_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BananaService_saveChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_saveChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BananaService_saveChannel_pargs {
 public:


  virtual ~BananaService_saveChannel_pargs() throw();
  const SaveChannelRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_saveChannel_result__isset {
  _BananaService_saveChannel_result__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
} _BananaService_saveChannel_result__isset;

class BananaService_saveChannel_result {
 public:

  BananaService_saveChannel_result(const BananaService_saveChannel_result&);
  BananaService_saveChannel_result& operator=(const BananaService_saveChannel_result&);
  BananaService_saveChannel_result() {
  }

  virtual ~BananaService_saveChannel_result() throw();
  SaveChannelResponse success;
  OperationFailedException ex1;
  InvalidArgumentException ex2;
  InvalidCredentialsException ex3;
  UnauthorizedException ex4;

  _BananaService_saveChannel_result__isset __isset;

  void __set_success(const SaveChannelResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidArgumentException& val);

  void __set_ex3(const InvalidCredentialsException& val);

  void __set_ex4(const UnauthorizedException& val);

  bool operator == (const BananaService_saveChannel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    if (!(ex3 == rhs.ex3))
      return false;
    if (!(ex4 == rhs.ex4))
      return false;
    return true;
  }
  bool operator != (const BananaService_saveChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_saveChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_saveChannel_presult__isset {
  _BananaService_saveChannel_presult__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
} _BananaService_saveChannel_presult__isset;

class BananaService_saveChannel_presult {
 public:


  virtual ~BananaService_saveChannel_presult() throw();
  SaveChannelResponse* success;
  OperationFailedException* ex1;
  InvalidArgumentException* ex2;
  InvalidCredentialsException* ex3;
  UnauthorizedException* ex4;

  _BananaService_saveChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BananaService_signIn_args__isset {
  _BananaService_signIn_args__isset() : request(false) {}
  bool request :1;
} _BananaService_signIn_args__isset;

class BananaService_signIn_args {
 public:

  BananaService_signIn_args(const BananaService_signIn_args&);
  BananaService_signIn_args& operator=(const BananaService_signIn_args&);
  BananaService_signIn_args() {
  }

  virtual ~BananaService_signIn_args() throw();
  SignInRequest request;

  _BananaService_signIn_args__isset __isset;

  void __set_request(const SignInRequest& val);

  bool operator == (const BananaService_signIn_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BananaService_signIn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_signIn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BananaService_signIn_pargs {
 public:


  virtual ~BananaService_signIn_pargs() throw();
  const SignInRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_signIn_result__isset {
  _BananaService_signIn_result__isset() : success(false), ex1(false), ex2(false), ex3(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
} _BananaService_signIn_result__isset;

class BananaService_signIn_result {
 public:

  BananaService_signIn_result(const BananaService_signIn_result&);
  BananaService_signIn_result& operator=(const BananaService_signIn_result&);
  BananaService_signIn_result() {
  }

  virtual ~BananaService_signIn_result() throw();
  SignInResponse success;
  OperationFailedException ex1;
  InvalidArgumentException ex2;
  InvalidCredentialsException ex3;

  _BananaService_signIn_result__isset __isset;

  void __set_success(const SignInResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidArgumentException& val);

  void __set_ex3(const InvalidCredentialsException& val);

  bool operator == (const BananaService_signIn_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    if (!(ex3 == rhs.ex3))
      return false;
    return true;
  }
  bool operator != (const BananaService_signIn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_signIn_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_signIn_presult__isset {
  _BananaService_signIn_presult__isset() : success(false), ex1(false), ex2(false), ex3(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
} _BananaService_signIn_presult__isset;

class BananaService_signIn_presult {
 public:


  virtual ~BananaService_signIn_presult() throw();
  SignInResponse* success;
  OperationFailedException* ex1;
  InvalidArgumentException* ex2;
  InvalidCredentialsException* ex3;

  _BananaService_signIn_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BananaService_signUp_args__isset {
  _BananaService_signUp_args__isset() : request(false) {}
  bool request :1;
} _BananaService_signUp_args__isset;

class BananaService_signUp_args {
 public:

  BananaService_signUp_args(const BananaService_signUp_args&);
  BananaService_signUp_args& operator=(const BananaService_signUp_args&);
  BananaService_signUp_args() {
  }

  virtual ~BananaService_signUp_args() throw();
  SignUpRequest request;

  _BananaService_signUp_args__isset __isset;

  void __set_request(const SignUpRequest& val);

  bool operator == (const BananaService_signUp_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BananaService_signUp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_signUp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BananaService_signUp_pargs {
 public:


  virtual ~BananaService_signUp_pargs() throw();
  const SignUpRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_signUp_result__isset {
  _BananaService_signUp_result__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
} _BananaService_signUp_result__isset;

class BananaService_signUp_result {
 public:

  BananaService_signUp_result(const BananaService_signUp_result&);
  BananaService_signUp_result& operator=(const BananaService_signUp_result&);
  BananaService_signUp_result() {
  }

  virtual ~BananaService_signUp_result() throw();
  SignUpResponse success;
  OperationFailedException ex1;
  InvalidArgumentException ex2;
  InvalidCredentialsException ex3;
  AccountAlreadyExistsException ex4;

  _BananaService_signUp_result__isset __isset;

  void __set_success(const SignUpResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidArgumentException& val);

  void __set_ex3(const InvalidCredentialsException& val);

  void __set_ex4(const AccountAlreadyExistsException& val);

  bool operator == (const BananaService_signUp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    if (!(ex3 == rhs.ex3))
      return false;
    if (!(ex4 == rhs.ex4))
      return false;
    return true;
  }
  bool operator != (const BananaService_signUp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_signUp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_signUp_presult__isset {
  _BananaService_signUp_presult__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
} _BananaService_signUp_presult__isset;

class BananaService_signUp_presult {
 public:


  virtual ~BananaService_signUp_presult() throw();
  SignUpResponse* success;
  OperationFailedException* ex1;
  InvalidArgumentException* ex2;
  InvalidCredentialsException* ex3;
  AccountAlreadyExistsException* ex4;

  _BananaService_signUp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BananaService_snoozeChannel_args__isset {
  _BananaService_snoozeChannel_args__isset() : request(false) {}
  bool request :1;
} _BananaService_snoozeChannel_args__isset;

class BananaService_snoozeChannel_args {
 public:

  BananaService_snoozeChannel_args(const BananaService_snoozeChannel_args&);
  BananaService_snoozeChannel_args& operator=(const BananaService_snoozeChannel_args&);
  BananaService_snoozeChannel_args() {
  }

  virtual ~BananaService_snoozeChannel_args() throw();
  SnoozeChannelRequest request;

  _BananaService_snoozeChannel_args__isset __isset;

  void __set_request(const SnoozeChannelRequest& val);

  bool operator == (const BananaService_snoozeChannel_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BananaService_snoozeChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_snoozeChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BananaService_snoozeChannel_pargs {
 public:


  virtual ~BananaService_snoozeChannel_pargs() throw();
  const SnoozeChannelRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_snoozeChannel_result__isset {
  _BananaService_snoozeChannel_result__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false), ex5(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
  bool ex5 :1;
} _BananaService_snoozeChannel_result__isset;

class BananaService_snoozeChannel_result {
 public:

  BananaService_snoozeChannel_result(const BananaService_snoozeChannel_result&);
  BananaService_snoozeChannel_result& operator=(const BananaService_snoozeChannel_result&);
  BananaService_snoozeChannel_result() {
  }

  virtual ~BananaService_snoozeChannel_result() throw();
  SnoozeChannelResponse success;
  OperationFailedException ex1;
  InvalidArgumentException ex2;
  InvalidCredentialsException ex3;
  UnauthorizedException ex4;
  ChannelDoesNotExistException ex5;

  _BananaService_snoozeChannel_result__isset __isset;

  void __set_success(const SnoozeChannelResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidArgumentException& val);

  void __set_ex3(const InvalidCredentialsException& val);

  void __set_ex4(const UnauthorizedException& val);

  void __set_ex5(const ChannelDoesNotExistException& val);

  bool operator == (const BananaService_snoozeChannel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    if (!(ex3 == rhs.ex3))
      return false;
    if (!(ex4 == rhs.ex4))
      return false;
    if (!(ex5 == rhs.ex5))
      return false;
    return true;
  }
  bool operator != (const BananaService_snoozeChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_snoozeChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_snoozeChannel_presult__isset {
  _BananaService_snoozeChannel_presult__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false), ex5(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
  bool ex5 :1;
} _BananaService_snoozeChannel_presult__isset;

class BananaService_snoozeChannel_presult {
 public:


  virtual ~BananaService_snoozeChannel_presult() throw();
  SnoozeChannelResponse* success;
  OperationFailedException* ex1;
  InvalidArgumentException* ex2;
  InvalidCredentialsException* ex3;
  UnauthorizedException* ex4;
  ChannelDoesNotExistException* ex5;

  _BananaService_snoozeChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BananaService_subscribeToApplication_args__isset {
  _BananaService_subscribeToApplication_args__isset() : request(false) {}
  bool request :1;
} _BananaService_subscribeToApplication_args__isset;

class BananaService_subscribeToApplication_args {
 public:

  BananaService_subscribeToApplication_args(const BananaService_subscribeToApplication_args&);
  BananaService_subscribeToApplication_args& operator=(const BananaService_subscribeToApplication_args&);
  BananaService_subscribeToApplication_args() {
  }

  virtual ~BananaService_subscribeToApplication_args() throw();
  SubscribeToApplicationRequest request;

  _BananaService_subscribeToApplication_args__isset __isset;

  void __set_request(const SubscribeToApplicationRequest& val);

  bool operator == (const BananaService_subscribeToApplication_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BananaService_subscribeToApplication_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_subscribeToApplication_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BananaService_subscribeToApplication_pargs {
 public:


  virtual ~BananaService_subscribeToApplication_pargs() throw();
  const SubscribeToApplicationRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_subscribeToApplication_result__isset {
  _BananaService_subscribeToApplication_result__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false), ex5(false), ex6(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
  bool ex5 :1;
  bool ex6 :1;
} _BananaService_subscribeToApplication_result__isset;

class BananaService_subscribeToApplication_result {
 public:

  BananaService_subscribeToApplication_result(const BananaService_subscribeToApplication_result&);
  BananaService_subscribeToApplication_result& operator=(const BananaService_subscribeToApplication_result&);
  BananaService_subscribeToApplication_result() {
  }

  virtual ~BananaService_subscribeToApplication_result() throw();
  SubscribeToApplicationResponse success;
  OperationFailedException ex1;
  InvalidArgumentException ex2;
  InvalidCredentialsException ex3;
  ApplicationDoesNotExistException ex4;
  ApplicationAlreadyRegisteredException ex5;
  CustomChannelUnreachableException ex6;

  _BananaService_subscribeToApplication_result__isset __isset;

  void __set_success(const SubscribeToApplicationResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidArgumentException& val);

  void __set_ex3(const InvalidCredentialsException& val);

  void __set_ex4(const ApplicationDoesNotExistException& val);

  void __set_ex5(const ApplicationAlreadyRegisteredException& val);

  void __set_ex6(const CustomChannelUnreachableException& val);

  bool operator == (const BananaService_subscribeToApplication_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    if (!(ex3 == rhs.ex3))
      return false;
    if (!(ex4 == rhs.ex4))
      return false;
    if (!(ex5 == rhs.ex5))
      return false;
    if (!(ex6 == rhs.ex6))
      return false;
    return true;
  }
  bool operator != (const BananaService_subscribeToApplication_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_subscribeToApplication_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_subscribeToApplication_presult__isset {
  _BananaService_subscribeToApplication_presult__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false), ex5(false), ex6(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
  bool ex5 :1;
  bool ex6 :1;
} _BananaService_subscribeToApplication_presult__isset;

class BananaService_subscribeToApplication_presult {
 public:


  virtual ~BananaService_subscribeToApplication_presult() throw();
  SubscribeToApplicationResponse* success;
  OperationFailedException* ex1;
  InvalidArgumentException* ex2;
  InvalidCredentialsException* ex3;
  ApplicationDoesNotExistException* ex4;
  ApplicationAlreadyRegisteredException* ex5;
  CustomChannelUnreachableException* ex6;

  _BananaService_subscribeToApplication_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BananaService_getActivity_args__isset {
  _BananaService_getActivity_args__isset() : request(false) {}
  bool request :1;
} _BananaService_getActivity_args__isset;

class BananaService_getActivity_args {
 public:

  BananaService_getActivity_args(const BananaService_getActivity_args&);
  BananaService_getActivity_args& operator=(const BananaService_getActivity_args&);
  BananaService_getActivity_args() {
  }

  virtual ~BananaService_getActivity_args() throw();
  GetActivityRequest request;

  _BananaService_getActivity_args__isset __isset;

  void __set_request(const GetActivityRequest& val);

  bool operator == (const BananaService_getActivity_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BananaService_getActivity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_getActivity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BananaService_getActivity_pargs {
 public:


  virtual ~BananaService_getActivity_pargs() throw();
  const GetActivityRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_getActivity_result__isset {
  _BananaService_getActivity_result__isset() : success(false), ex1(false), ex2(false), ex3(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
} _BananaService_getActivity_result__isset;

class BananaService_getActivity_result {
 public:

  BananaService_getActivity_result(const BananaService_getActivity_result&);
  BananaService_getActivity_result& operator=(const BananaService_getActivity_result&);
  BananaService_getActivity_result() {
  }

  virtual ~BananaService_getActivity_result() throw();
  GetActivityResponse success;
  OperationFailedException ex1;
  InvalidArgumentException ex2;
  InvalidCredentialsException ex3;

  _BananaService_getActivity_result__isset __isset;

  void __set_success(const GetActivityResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidArgumentException& val);

  void __set_ex3(const InvalidCredentialsException& val);

  bool operator == (const BananaService_getActivity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    if (!(ex3 == rhs.ex3))
      return false;
    return true;
  }
  bool operator != (const BananaService_getActivity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_getActivity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_getActivity_presult__isset {
  _BananaService_getActivity_presult__isset() : success(false), ex1(false), ex2(false), ex3(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
} _BananaService_getActivity_presult__isset;

class BananaService_getActivity_presult {
 public:


  virtual ~BananaService_getActivity_presult() throw();
  GetActivityResponse* success;
  OperationFailedException* ex1;
  InvalidArgumentException* ex2;
  InvalidCredentialsException* ex3;

  _BananaService_getActivity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BananaService_getApplicationInfo_args__isset {
  _BananaService_getApplicationInfo_args__isset() : request(false) {}
  bool request :1;
} _BananaService_getApplicationInfo_args__isset;

class BananaService_getApplicationInfo_args {
 public:

  BananaService_getApplicationInfo_args(const BananaService_getApplicationInfo_args&);
  BananaService_getApplicationInfo_args& operator=(const BananaService_getApplicationInfo_args&);
  BananaService_getApplicationInfo_args() {
  }

  virtual ~BananaService_getApplicationInfo_args() throw();
  GetApplicationInfoRequest request;

  _BananaService_getApplicationInfo_args__isset __isset;

  void __set_request(const GetApplicationInfoRequest& val);

  bool operator == (const BananaService_getApplicationInfo_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BananaService_getApplicationInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_getApplicationInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BananaService_getApplicationInfo_pargs {
 public:


  virtual ~BananaService_getApplicationInfo_pargs() throw();
  const GetApplicationInfoRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_getApplicationInfo_result__isset {
  _BananaService_getApplicationInfo_result__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false), ex5(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
  bool ex5 :1;
} _BananaService_getApplicationInfo_result__isset;

class BananaService_getApplicationInfo_result {
 public:

  BananaService_getApplicationInfo_result(const BananaService_getApplicationInfo_result&);
  BananaService_getApplicationInfo_result& operator=(const BananaService_getApplicationInfo_result&);
  BananaService_getApplicationInfo_result() {
  }

  virtual ~BananaService_getApplicationInfo_result() throw();
  GetApplicationInfoResponse success;
  OperationFailedException ex1;
  InvalidArgumentException ex2;
  InvalidCredentialsException ex3;
  ApplicationDoesNotExistException ex4;
  UnauthorizedException ex5;

  _BananaService_getApplicationInfo_result__isset __isset;

  void __set_success(const GetApplicationInfoResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidArgumentException& val);

  void __set_ex3(const InvalidCredentialsException& val);

  void __set_ex4(const ApplicationDoesNotExistException& val);

  void __set_ex5(const UnauthorizedException& val);

  bool operator == (const BananaService_getApplicationInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    if (!(ex3 == rhs.ex3))
      return false;
    if (!(ex4 == rhs.ex4))
      return false;
    if (!(ex5 == rhs.ex5))
      return false;
    return true;
  }
  bool operator != (const BananaService_getApplicationInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_getApplicationInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_getApplicationInfo_presult__isset {
  _BananaService_getApplicationInfo_presult__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false), ex5(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
  bool ex5 :1;
} _BananaService_getApplicationInfo_presult__isset;

class BananaService_getApplicationInfo_presult {
 public:


  virtual ~BananaService_getApplicationInfo_presult() throw();
  GetApplicationInfoResponse* success;
  OperationFailedException* ex1;
  InvalidArgumentException* ex2;
  InvalidCredentialsException* ex3;
  ApplicationDoesNotExistException* ex4;
  UnauthorizedException* ex5;

  _BananaService_getApplicationInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BananaService_getDashboard_args__isset {
  _BananaService_getDashboard_args__isset() : request(false) {}
  bool request :1;
} _BananaService_getDashboard_args__isset;

class BananaService_getDashboard_args {
 public:

  BananaService_getDashboard_args(const BananaService_getDashboard_args&);
  BananaService_getDashboard_args& operator=(const BananaService_getDashboard_args&);
  BananaService_getDashboard_args() {
  }

  virtual ~BananaService_getDashboard_args() throw();
  GetDashboardRequest request;

  _BananaService_getDashboard_args__isset __isset;

  void __set_request(const GetDashboardRequest& val);

  bool operator == (const BananaService_getDashboard_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BananaService_getDashboard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_getDashboard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BananaService_getDashboard_pargs {
 public:


  virtual ~BananaService_getDashboard_pargs() throw();
  const GetDashboardRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_getDashboard_result__isset {
  _BananaService_getDashboard_result__isset() : success(false), ex1(false), ex2(false), ex3(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
} _BananaService_getDashboard_result__isset;

class BananaService_getDashboard_result {
 public:

  BananaService_getDashboard_result(const BananaService_getDashboard_result&);
  BananaService_getDashboard_result& operator=(const BananaService_getDashboard_result&);
  BananaService_getDashboard_result() {
  }

  virtual ~BananaService_getDashboard_result() throw();
  GetDashboardResponse success;
  OperationFailedException ex1;
  InvalidArgumentException ex2;
  InvalidCredentialsException ex3;

  _BananaService_getDashboard_result__isset __isset;

  void __set_success(const GetDashboardResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidArgumentException& val);

  void __set_ex3(const InvalidCredentialsException& val);

  bool operator == (const BananaService_getDashboard_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    if (!(ex3 == rhs.ex3))
      return false;
    return true;
  }
  bool operator != (const BananaService_getDashboard_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_getDashboard_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_getDashboard_presult__isset {
  _BananaService_getDashboard_presult__isset() : success(false), ex1(false), ex2(false), ex3(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
} _BananaService_getDashboard_presult__isset;

class BananaService_getDashboard_presult {
 public:


  virtual ~BananaService_getDashboard_presult() throw();
  GetDashboardResponse* success;
  OperationFailedException* ex1;
  InvalidArgumentException* ex2;
  InvalidCredentialsException* ex3;

  _BananaService_getDashboard_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BananaService_getMessages_args__isset {
  _BananaService_getMessages_args__isset() : request(false) {}
  bool request :1;
} _BananaService_getMessages_args__isset;

class BananaService_getMessages_args {
 public:

  BananaService_getMessages_args(const BananaService_getMessages_args&);
  BananaService_getMessages_args& operator=(const BananaService_getMessages_args&);
  BananaService_getMessages_args() {
  }

  virtual ~BananaService_getMessages_args() throw();
  GetMessagesRequest request;

  _BananaService_getMessages_args__isset __isset;

  void __set_request(const GetMessagesRequest& val);

  bool operator == (const BananaService_getMessages_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BananaService_getMessages_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_getMessages_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BananaService_getMessages_pargs {
 public:


  virtual ~BananaService_getMessages_pargs() throw();
  const GetMessagesRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_getMessages_result__isset {
  _BananaService_getMessages_result__isset() : success(false), ex1(false), ex2(false), ex3(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
} _BananaService_getMessages_result__isset;

class BananaService_getMessages_result {
 public:

  BananaService_getMessages_result(const BananaService_getMessages_result&);
  BananaService_getMessages_result& operator=(const BananaService_getMessages_result&);
  BananaService_getMessages_result() {
  }

  virtual ~BananaService_getMessages_result() throw();
  GetMessagesResponse success;
  OperationFailedException ex1;
  InvalidArgumentException ex2;
  InvalidCredentialsException ex3;

  _BananaService_getMessages_result__isset __isset;

  void __set_success(const GetMessagesResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidArgumentException& val);

  void __set_ex3(const InvalidCredentialsException& val);

  bool operator == (const BananaService_getMessages_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    if (!(ex3 == rhs.ex3))
      return false;
    return true;
  }
  bool operator != (const BananaService_getMessages_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_getMessages_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_getMessages_presult__isset {
  _BananaService_getMessages_presult__isset() : success(false), ex1(false), ex2(false), ex3(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
} _BananaService_getMessages_presult__isset;

class BananaService_getMessages_presult {
 public:


  virtual ~BananaService_getMessages_presult() throw();
  GetMessagesResponse* success;
  OperationFailedException* ex1;
  InvalidArgumentException* ex2;
  InvalidCredentialsException* ex3;

  _BananaService_getMessages_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BananaService_getFullMessage_args__isset {
  _BananaService_getFullMessage_args__isset() : request(false) {}
  bool request :1;
} _BananaService_getFullMessage_args__isset;

class BananaService_getFullMessage_args {
 public:

  BananaService_getFullMessage_args(const BananaService_getFullMessage_args&);
  BananaService_getFullMessage_args& operator=(const BananaService_getFullMessage_args&);
  BananaService_getFullMessage_args() {
  }

  virtual ~BananaService_getFullMessage_args() throw();
  GetFullMessageRequest request;

  _BananaService_getFullMessage_args__isset __isset;

  void __set_request(const GetFullMessageRequest& val);

  bool operator == (const BananaService_getFullMessage_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BananaService_getFullMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_getFullMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BananaService_getFullMessage_pargs {
 public:


  virtual ~BananaService_getFullMessage_pargs() throw();
  const GetFullMessageRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_getFullMessage_result__isset {
  _BananaService_getFullMessage_result__isset() : success(false), ex1(false), ex2(false), ex3(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
} _BananaService_getFullMessage_result__isset;

class BananaService_getFullMessage_result {
 public:

  BananaService_getFullMessage_result(const BananaService_getFullMessage_result&);
  BananaService_getFullMessage_result& operator=(const BananaService_getFullMessage_result&);
  BananaService_getFullMessage_result() {
  }

  virtual ~BananaService_getFullMessage_result() throw();
  GetFullMessageResponse success;
  OperationFailedException ex1;
  InvalidArgumentException ex2;
  InvalidCredentialsException ex3;

  _BananaService_getFullMessage_result__isset __isset;

  void __set_success(const GetFullMessageResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidArgumentException& val);

  void __set_ex3(const InvalidCredentialsException& val);

  bool operator == (const BananaService_getFullMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    if (!(ex3 == rhs.ex3))
      return false;
    return true;
  }
  bool operator != (const BananaService_getFullMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_getFullMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_getFullMessage_presult__isset {
  _BananaService_getFullMessage_presult__isset() : success(false), ex1(false), ex2(false), ex3(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
} _BananaService_getFullMessage_presult__isset;

class BananaService_getFullMessage_presult {
 public:


  virtual ~BananaService_getFullMessage_presult() throw();
  GetFullMessageResponse* success;
  OperationFailedException* ex1;
  InvalidArgumentException* ex2;
  InvalidCredentialsException* ex3;

  _BananaService_getFullMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BananaService_getMyApplications_args__isset {
  _BananaService_getMyApplications_args__isset() : request(false) {}
  bool request :1;
} _BananaService_getMyApplications_args__isset;

class BananaService_getMyApplications_args {
 public:

  BananaService_getMyApplications_args(const BananaService_getMyApplications_args&);
  BananaService_getMyApplications_args& operator=(const BananaService_getMyApplications_args&);
  BananaService_getMyApplications_args() {
  }

  virtual ~BananaService_getMyApplications_args() throw();
  GetMyApplicationsRequest request;

  _BananaService_getMyApplications_args__isset __isset;

  void __set_request(const GetMyApplicationsRequest& val);

  bool operator == (const BananaService_getMyApplications_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BananaService_getMyApplications_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_getMyApplications_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BananaService_getMyApplications_pargs {
 public:


  virtual ~BananaService_getMyApplications_pargs() throw();
  const GetMyApplicationsRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_getMyApplications_result__isset {
  _BananaService_getMyApplications_result__isset() : success(false), ex1(false), ex2(false), ex3(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
} _BananaService_getMyApplications_result__isset;

class BananaService_getMyApplications_result {
 public:

  BananaService_getMyApplications_result(const BananaService_getMyApplications_result&);
  BananaService_getMyApplications_result& operator=(const BananaService_getMyApplications_result&);
  BananaService_getMyApplications_result() {
  }

  virtual ~BananaService_getMyApplications_result() throw();
  GetMyApplicationsResponse success;
  OperationFailedException ex1;
  InvalidArgumentException ex2;
  InvalidCredentialsException ex3;

  _BananaService_getMyApplications_result__isset __isset;

  void __set_success(const GetMyApplicationsResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidArgumentException& val);

  void __set_ex3(const InvalidCredentialsException& val);

  bool operator == (const BananaService_getMyApplications_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    if (!(ex3 == rhs.ex3))
      return false;
    return true;
  }
  bool operator != (const BananaService_getMyApplications_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_getMyApplications_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_getMyApplications_presult__isset {
  _BananaService_getMyApplications_presult__isset() : success(false), ex1(false), ex2(false), ex3(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
} _BananaService_getMyApplications_presult__isset;

class BananaService_getMyApplications_presult {
 public:


  virtual ~BananaService_getMyApplications_presult() throw();
  GetMyApplicationsResponse* success;
  OperationFailedException* ex1;
  InvalidArgumentException* ex2;
  InvalidCredentialsException* ex3;

  _BananaService_getMyApplications_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BananaService_getMySavedChannels_args__isset {
  _BananaService_getMySavedChannels_args__isset() : request(false) {}
  bool request :1;
} _BananaService_getMySavedChannels_args__isset;

class BananaService_getMySavedChannels_args {
 public:

  BananaService_getMySavedChannels_args(const BananaService_getMySavedChannels_args&);
  BananaService_getMySavedChannels_args& operator=(const BananaService_getMySavedChannels_args&);
  BananaService_getMySavedChannels_args() {
  }

  virtual ~BananaService_getMySavedChannels_args() throw();
  GetMySavedChannelsRequest request;

  _BananaService_getMySavedChannels_args__isset __isset;

  void __set_request(const GetMySavedChannelsRequest& val);

  bool operator == (const BananaService_getMySavedChannels_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BananaService_getMySavedChannels_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_getMySavedChannels_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BananaService_getMySavedChannels_pargs {
 public:


  virtual ~BananaService_getMySavedChannels_pargs() throw();
  const GetMySavedChannelsRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_getMySavedChannels_result__isset {
  _BananaService_getMySavedChannels_result__isset() : success(false), ex1(false), ex2(false), ex3(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
} _BananaService_getMySavedChannels_result__isset;

class BananaService_getMySavedChannels_result {
 public:

  BananaService_getMySavedChannels_result(const BananaService_getMySavedChannels_result&);
  BananaService_getMySavedChannels_result& operator=(const BananaService_getMySavedChannels_result&);
  BananaService_getMySavedChannels_result() {
  }

  virtual ~BananaService_getMySavedChannels_result() throw();
  GetMySavedChannelsResponse success;
  OperationFailedException ex1;
  InvalidArgumentException ex2;
  InvalidCredentialsException ex3;

  _BananaService_getMySavedChannels_result__isset __isset;

  void __set_success(const GetMySavedChannelsResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidArgumentException& val);

  void __set_ex3(const InvalidCredentialsException& val);

  bool operator == (const BananaService_getMySavedChannels_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    if (!(ex3 == rhs.ex3))
      return false;
    return true;
  }
  bool operator != (const BananaService_getMySavedChannels_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_getMySavedChannels_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_getMySavedChannels_presult__isset {
  _BananaService_getMySavedChannels_presult__isset() : success(false), ex1(false), ex2(false), ex3(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
} _BananaService_getMySavedChannels_presult__isset;

class BananaService_getMySavedChannels_presult {
 public:


  virtual ~BananaService_getMySavedChannels_presult() throw();
  GetMySavedChannelsResponse* success;
  OperationFailedException* ex1;
  InvalidArgumentException* ex2;
  InvalidCredentialsException* ex3;

  _BananaService_getMySavedChannels_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BananaService_getUserInfo_args__isset {
  _BananaService_getUserInfo_args__isset() : request(false) {}
  bool request :1;
} _BananaService_getUserInfo_args__isset;

class BananaService_getUserInfo_args {
 public:

  BananaService_getUserInfo_args(const BananaService_getUserInfo_args&);
  BananaService_getUserInfo_args& operator=(const BananaService_getUserInfo_args&);
  BananaService_getUserInfo_args() {
  }

  virtual ~BananaService_getUserInfo_args() throw();
  GetUserInfoRequest request;

  _BananaService_getUserInfo_args__isset __isset;

  void __set_request(const GetUserInfoRequest& val);

  bool operator == (const BananaService_getUserInfo_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BananaService_getUserInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_getUserInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BananaService_getUserInfo_pargs {
 public:


  virtual ~BananaService_getUserInfo_pargs() throw();
  const GetUserInfoRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_getUserInfo_result__isset {
  _BananaService_getUserInfo_result__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
} _BananaService_getUserInfo_result__isset;

class BananaService_getUserInfo_result {
 public:

  BananaService_getUserInfo_result(const BananaService_getUserInfo_result&);
  BananaService_getUserInfo_result& operator=(const BananaService_getUserInfo_result&);
  BananaService_getUserInfo_result() {
  }

  virtual ~BananaService_getUserInfo_result() throw();
  GetUserInfoResponse success;
  OperationFailedException ex1;
  InvalidArgumentException ex2;
  InvalidCredentialsException ex3;
  UnauthorizedException ex4;

  _BananaService_getUserInfo_result__isset __isset;

  void __set_success(const GetUserInfoResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidArgumentException& val);

  void __set_ex3(const InvalidCredentialsException& val);

  void __set_ex4(const UnauthorizedException& val);

  bool operator == (const BananaService_getUserInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    if (!(ex3 == rhs.ex3))
      return false;
    if (!(ex4 == rhs.ex4))
      return false;
    return true;
  }
  bool operator != (const BananaService_getUserInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_getUserInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_getUserInfo_presult__isset {
  _BananaService_getUserInfo_presult__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
} _BananaService_getUserInfo_presult__isset;

class BananaService_getUserInfo_presult {
 public:


  virtual ~BananaService_getUserInfo_presult() throw();
  GetUserInfoResponse* success;
  OperationFailedException* ex1;
  InvalidArgumentException* ex2;
  InvalidCredentialsException* ex3;
  UnauthorizedException* ex4;

  _BananaService_getUserInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BananaService_searchForApplications_args__isset {
  _BananaService_searchForApplications_args__isset() : request(false) {}
  bool request :1;
} _BananaService_searchForApplications_args__isset;

class BananaService_searchForApplications_args {
 public:

  BananaService_searchForApplications_args(const BananaService_searchForApplications_args&);
  BananaService_searchForApplications_args& operator=(const BananaService_searchForApplications_args&);
  BananaService_searchForApplications_args() {
  }

  virtual ~BananaService_searchForApplications_args() throw();
  SearchForApplicationsRequest request;

  _BananaService_searchForApplications_args__isset __isset;

  void __set_request(const SearchForApplicationsRequest& val);

  bool operator == (const BananaService_searchForApplications_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BananaService_searchForApplications_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_searchForApplications_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BananaService_searchForApplications_pargs {
 public:


  virtual ~BananaService_searchForApplications_pargs() throw();
  const SearchForApplicationsRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_searchForApplications_result__isset {
  _BananaService_searchForApplications_result__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
} _BananaService_searchForApplications_result__isset;

class BananaService_searchForApplications_result {
 public:

  BananaService_searchForApplications_result(const BananaService_searchForApplications_result&);
  BananaService_searchForApplications_result& operator=(const BananaService_searchForApplications_result&);
  BananaService_searchForApplications_result() {
  }

  virtual ~BananaService_searchForApplications_result() throw();
  SearchForApplicationsResponse success;
  OperationFailedException ex1;
  InvalidArgumentException ex2;
  InvalidCredentialsException ex3;
  UnauthorizedException ex4;

  _BananaService_searchForApplications_result__isset __isset;

  void __set_success(const SearchForApplicationsResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidArgumentException& val);

  void __set_ex3(const InvalidCredentialsException& val);

  void __set_ex4(const UnauthorizedException& val);

  bool operator == (const BananaService_searchForApplications_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    if (!(ex3 == rhs.ex3))
      return false;
    if (!(ex4 == rhs.ex4))
      return false;
    return true;
  }
  bool operator != (const BananaService_searchForApplications_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_searchForApplications_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_searchForApplications_presult__isset {
  _BananaService_searchForApplications_presult__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
} _BananaService_searchForApplications_presult__isset;

class BananaService_searchForApplications_presult {
 public:


  virtual ~BananaService_searchForApplications_presult() throw();
  SearchForApplicationsResponse* success;
  OperationFailedException* ex1;
  InvalidArgumentException* ex2;
  InvalidCredentialsException* ex3;
  UnauthorizedException* ex4;

  _BananaService_searchForApplications_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class BananaServiceClient : virtual public BananaServiceIf {
 public:
  BananaServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  BananaServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  double getApiVersion();
  void send_getApiVersion();
  double recv_getApiVersion();
  void provisionApplication(ProvisionApplicationResponse& _return, const ProvisionApplicationRequest& request);
  void send_provisionApplication(const ProvisionApplicationRequest& request);
  void recv_provisionApplication(ProvisionApplicationResponse& _return);
  void regenerateToken(RegenerateApplicationTokenResponse& _return, const RegenerateApplicationTokenRequest& request);
  void send_regenerateToken(const RegenerateApplicationTokenRequest& request);
  void recv_regenerateToken(RegenerateApplicationTokenResponse& _return);
  void registerHealthCheck(RegisterHealthCheckResponse& _return, const RegisterHealthCheckRequest& request);
  void send_registerHealthCheck(const RegisterHealthCheckRequest& request);
  void recv_registerHealthCheck(RegisterHealthCheckResponse& _return);
  void removeSavedChannel(RemoveSavedChannelResponse& _return, const RemoveSavedChannelRequest& request);
  void send_removeSavedChannel(const RemoveSavedChannelRequest& request);
  void recv_removeSavedChannel(RemoveSavedChannelResponse& _return);
  void renewApplicationToken(RenewApplicationTokenResponse& _return, const RenewApplicationTokenRequest& request);
  void send_renewApplicationToken(const RenewApplicationTokenRequest& request);
  void recv_renewApplicationToken(RenewApplicationTokenResponse& _return);
  void saveChannel(SaveChannelResponse& _return, const SaveChannelRequest& request);
  void send_saveChannel(const SaveChannelRequest& request);
  void recv_saveChannel(SaveChannelResponse& _return);
  void signIn(SignInResponse& _return, const SignInRequest& request);
  void send_signIn(const SignInRequest& request);
  void recv_signIn(SignInResponse& _return);
  void signUp(SignUpResponse& _return, const SignUpRequest& request);
  void send_signUp(const SignUpRequest& request);
  void recv_signUp(SignUpResponse& _return);
  void snoozeChannel(SnoozeChannelResponse& _return, const SnoozeChannelRequest& request);
  void send_snoozeChannel(const SnoozeChannelRequest& request);
  void recv_snoozeChannel(SnoozeChannelResponse& _return);
  void subscribeToApplication(SubscribeToApplicationResponse& _return, const SubscribeToApplicationRequest& request);
  void send_subscribeToApplication(const SubscribeToApplicationRequest& request);
  void recv_subscribeToApplication(SubscribeToApplicationResponse& _return);
  void getActivity(GetActivityResponse& _return, const GetActivityRequest& request);
  void send_getActivity(const GetActivityRequest& request);
  void recv_getActivity(GetActivityResponse& _return);
  void getApplicationInfo(GetApplicationInfoResponse& _return, const GetApplicationInfoRequest& request);
  void send_getApplicationInfo(const GetApplicationInfoRequest& request);
  void recv_getApplicationInfo(GetApplicationInfoResponse& _return);
  void getDashboard(GetDashboardResponse& _return, const GetDashboardRequest& request);
  void send_getDashboard(const GetDashboardRequest& request);
  void recv_getDashboard(GetDashboardResponse& _return);
  void getMessages(GetMessagesResponse& _return, const GetMessagesRequest& request);
  void send_getMessages(const GetMessagesRequest& request);
  void recv_getMessages(GetMessagesResponse& _return);
  void getFullMessage(GetFullMessageResponse& _return, const GetFullMessageRequest& request);
  void send_getFullMessage(const GetFullMessageRequest& request);
  void recv_getFullMessage(GetFullMessageResponse& _return);
  void getMyApplications(GetMyApplicationsResponse& _return, const GetMyApplicationsRequest& request);
  void send_getMyApplications(const GetMyApplicationsRequest& request);
  void recv_getMyApplications(GetMyApplicationsResponse& _return);
  void getMySavedChannels(GetMySavedChannelsResponse& _return, const GetMySavedChannelsRequest& request);
  void send_getMySavedChannels(const GetMySavedChannelsRequest& request);
  void recv_getMySavedChannels(GetMySavedChannelsResponse& _return);
  void getUserInfo(GetUserInfoResponse& _return, const GetUserInfoRequest& request);
  void send_getUserInfo(const GetUserInfoRequest& request);
  void recv_getUserInfo(GetUserInfoResponse& _return);
  void searchForApplications(SearchForApplicationsResponse& _return, const SearchForApplicationsRequest& request);
  void send_searchForApplications(const SearchForApplicationsRequest& request);
  void recv_searchForApplications(SearchForApplicationsResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class BananaServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<BananaServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (BananaServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getApiVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_provisionApplication(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_regenerateToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerHealthCheck(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeSavedChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_renewApplicationToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_signIn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_signUp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_snoozeChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_subscribeToApplication(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getActivity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getApplicationInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDashboard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMessages(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFullMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMyApplications(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMySavedChannels(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchForApplications(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  BananaServiceProcessor(boost::shared_ptr<BananaServiceIf> iface) :
    iface_(iface) {
    processMap_["getApiVersion"] = &BananaServiceProcessor::process_getApiVersion;
    processMap_["provisionApplication"] = &BananaServiceProcessor::process_provisionApplication;
    processMap_["regenerateToken"] = &BananaServiceProcessor::process_regenerateToken;
    processMap_["registerHealthCheck"] = &BananaServiceProcessor::process_registerHealthCheck;
    processMap_["removeSavedChannel"] = &BananaServiceProcessor::process_removeSavedChannel;
    processMap_["renewApplicationToken"] = &BananaServiceProcessor::process_renewApplicationToken;
    processMap_["saveChannel"] = &BananaServiceProcessor::process_saveChannel;
    processMap_["signIn"] = &BananaServiceProcessor::process_signIn;
    processMap_["signUp"] = &BananaServiceProcessor::process_signUp;
    processMap_["snoozeChannel"] = &BananaServiceProcessor::process_snoozeChannel;
    processMap_["subscribeToApplication"] = &BananaServiceProcessor::process_subscribeToApplication;
    processMap_["getActivity"] = &BananaServiceProcessor::process_getActivity;
    processMap_["getApplicationInfo"] = &BananaServiceProcessor::process_getApplicationInfo;
    processMap_["getDashboard"] = &BananaServiceProcessor::process_getDashboard;
    processMap_["getMessages"] = &BananaServiceProcessor::process_getMessages;
    processMap_["getFullMessage"] = &BananaServiceProcessor::process_getFullMessage;
    processMap_["getMyApplications"] = &BananaServiceProcessor::process_getMyApplications;
    processMap_["getMySavedChannels"] = &BananaServiceProcessor::process_getMySavedChannels;
    processMap_["getUserInfo"] = &BananaServiceProcessor::process_getUserInfo;
    processMap_["searchForApplications"] = &BananaServiceProcessor::process_searchForApplications;
  }

  virtual ~BananaServiceProcessor() {}
};

class BananaServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BananaServiceProcessorFactory(const ::boost::shared_ptr< BananaServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< BananaServiceIfFactory > handlerFactory_;
};

class BananaServiceMultiface : virtual public BananaServiceIf {
 public:
  BananaServiceMultiface(std::vector<boost::shared_ptr<BananaServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~BananaServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<BananaServiceIf> > ifaces_;
  BananaServiceMultiface() {}
  void add(boost::shared_ptr<BananaServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  double getApiVersion() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getApiVersion();
    }
    return ifaces_[i]->getApiVersion();
  }

  void provisionApplication(ProvisionApplicationResponse& _return, const ProvisionApplicationRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->provisionApplication(_return, request);
    }
    ifaces_[i]->provisionApplication(_return, request);
    return;
  }

  void regenerateToken(RegenerateApplicationTokenResponse& _return, const RegenerateApplicationTokenRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->regenerateToken(_return, request);
    }
    ifaces_[i]->regenerateToken(_return, request);
    return;
  }

  void registerHealthCheck(RegisterHealthCheckResponse& _return, const RegisterHealthCheckRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerHealthCheck(_return, request);
    }
    ifaces_[i]->registerHealthCheck(_return, request);
    return;
  }

  void removeSavedChannel(RemoveSavedChannelResponse& _return, const RemoveSavedChannelRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeSavedChannel(_return, request);
    }
    ifaces_[i]->removeSavedChannel(_return, request);
    return;
  }

  void renewApplicationToken(RenewApplicationTokenResponse& _return, const RenewApplicationTokenRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->renewApplicationToken(_return, request);
    }
    ifaces_[i]->renewApplicationToken(_return, request);
    return;
  }

  void saveChannel(SaveChannelResponse& _return, const SaveChannelRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveChannel(_return, request);
    }
    ifaces_[i]->saveChannel(_return, request);
    return;
  }

  void signIn(SignInResponse& _return, const SignInRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->signIn(_return, request);
    }
    ifaces_[i]->signIn(_return, request);
    return;
  }

  void signUp(SignUpResponse& _return, const SignUpRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->signUp(_return, request);
    }
    ifaces_[i]->signUp(_return, request);
    return;
  }

  void snoozeChannel(SnoozeChannelResponse& _return, const SnoozeChannelRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->snoozeChannel(_return, request);
    }
    ifaces_[i]->snoozeChannel(_return, request);
    return;
  }

  void subscribeToApplication(SubscribeToApplicationResponse& _return, const SubscribeToApplicationRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->subscribeToApplication(_return, request);
    }
    ifaces_[i]->subscribeToApplication(_return, request);
    return;
  }

  void getActivity(GetActivityResponse& _return, const GetActivityRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getActivity(_return, request);
    }
    ifaces_[i]->getActivity(_return, request);
    return;
  }

  void getApplicationInfo(GetApplicationInfoResponse& _return, const GetApplicationInfoRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getApplicationInfo(_return, request);
    }
    ifaces_[i]->getApplicationInfo(_return, request);
    return;
  }

  void getDashboard(GetDashboardResponse& _return, const GetDashboardRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDashboard(_return, request);
    }
    ifaces_[i]->getDashboard(_return, request);
    return;
  }

  void getMessages(GetMessagesResponse& _return, const GetMessagesRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMessages(_return, request);
    }
    ifaces_[i]->getMessages(_return, request);
    return;
  }

  void getFullMessage(GetFullMessageResponse& _return, const GetFullMessageRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFullMessage(_return, request);
    }
    ifaces_[i]->getFullMessage(_return, request);
    return;
  }

  void getMyApplications(GetMyApplicationsResponse& _return, const GetMyApplicationsRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMyApplications(_return, request);
    }
    ifaces_[i]->getMyApplications(_return, request);
    return;
  }

  void getMySavedChannels(GetMySavedChannelsResponse& _return, const GetMySavedChannelsRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMySavedChannels(_return, request);
    }
    ifaces_[i]->getMySavedChannels(_return, request);
    return;
  }

  void getUserInfo(GetUserInfoResponse& _return, const GetUserInfoRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserInfo(_return, request);
    }
    ifaces_[i]->getUserInfo(_return, request);
    return;
  }

  void searchForApplications(SearchForApplicationsResponse& _return, const SearchForApplicationsRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchForApplications(_return, request);
    }
    ifaces_[i]->searchForApplications(_return, request);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class BananaServiceConcurrentClient : virtual public BananaServiceIf {
 public:
  BananaServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  BananaServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  double getApiVersion();
  int32_t send_getApiVersion();
  double recv_getApiVersion(const int32_t seqid);
  void provisionApplication(ProvisionApplicationResponse& _return, const ProvisionApplicationRequest& request);
  int32_t send_provisionApplication(const ProvisionApplicationRequest& request);
  void recv_provisionApplication(ProvisionApplicationResponse& _return, const int32_t seqid);
  void regenerateToken(RegenerateApplicationTokenResponse& _return, const RegenerateApplicationTokenRequest& request);
  int32_t send_regenerateToken(const RegenerateApplicationTokenRequest& request);
  void recv_regenerateToken(RegenerateApplicationTokenResponse& _return, const int32_t seqid);
  void registerHealthCheck(RegisterHealthCheckResponse& _return, const RegisterHealthCheckRequest& request);
  int32_t send_registerHealthCheck(const RegisterHealthCheckRequest& request);
  void recv_registerHealthCheck(RegisterHealthCheckResponse& _return, const int32_t seqid);
  void removeSavedChannel(RemoveSavedChannelResponse& _return, const RemoveSavedChannelRequest& request);
  int32_t send_removeSavedChannel(const RemoveSavedChannelRequest& request);
  void recv_removeSavedChannel(RemoveSavedChannelResponse& _return, const int32_t seqid);
  void renewApplicationToken(RenewApplicationTokenResponse& _return, const RenewApplicationTokenRequest& request);
  int32_t send_renewApplicationToken(const RenewApplicationTokenRequest& request);
  void recv_renewApplicationToken(RenewApplicationTokenResponse& _return, const int32_t seqid);
  void saveChannel(SaveChannelResponse& _return, const SaveChannelRequest& request);
  int32_t send_saveChannel(const SaveChannelRequest& request);
  void recv_saveChannel(SaveChannelResponse& _return, const int32_t seqid);
  void signIn(SignInResponse& _return, const SignInRequest& request);
  int32_t send_signIn(const SignInRequest& request);
  void recv_signIn(SignInResponse& _return, const int32_t seqid);
  void signUp(SignUpResponse& _return, const SignUpRequest& request);
  int32_t send_signUp(const SignUpRequest& request);
  void recv_signUp(SignUpResponse& _return, const int32_t seqid);
  void snoozeChannel(SnoozeChannelResponse& _return, const SnoozeChannelRequest& request);
  int32_t send_snoozeChannel(const SnoozeChannelRequest& request);
  void recv_snoozeChannel(SnoozeChannelResponse& _return, const int32_t seqid);
  void subscribeToApplication(SubscribeToApplicationResponse& _return, const SubscribeToApplicationRequest& request);
  int32_t send_subscribeToApplication(const SubscribeToApplicationRequest& request);
  void recv_subscribeToApplication(SubscribeToApplicationResponse& _return, const int32_t seqid);
  void getActivity(GetActivityResponse& _return, const GetActivityRequest& request);
  int32_t send_getActivity(const GetActivityRequest& request);
  void recv_getActivity(GetActivityResponse& _return, const int32_t seqid);
  void getApplicationInfo(GetApplicationInfoResponse& _return, const GetApplicationInfoRequest& request);
  int32_t send_getApplicationInfo(const GetApplicationInfoRequest& request);
  void recv_getApplicationInfo(GetApplicationInfoResponse& _return, const int32_t seqid);
  void getDashboard(GetDashboardResponse& _return, const GetDashboardRequest& request);
  int32_t send_getDashboard(const GetDashboardRequest& request);
  void recv_getDashboard(GetDashboardResponse& _return, const int32_t seqid);
  void getMessages(GetMessagesResponse& _return, const GetMessagesRequest& request);
  int32_t send_getMessages(const GetMessagesRequest& request);
  void recv_getMessages(GetMessagesResponse& _return, const int32_t seqid);
  void getFullMessage(GetFullMessageResponse& _return, const GetFullMessageRequest& request);
  int32_t send_getFullMessage(const GetFullMessageRequest& request);
  void recv_getFullMessage(GetFullMessageResponse& _return, const int32_t seqid);
  void getMyApplications(GetMyApplicationsResponse& _return, const GetMyApplicationsRequest& request);
  int32_t send_getMyApplications(const GetMyApplicationsRequest& request);
  void recv_getMyApplications(GetMyApplicationsResponse& _return, const int32_t seqid);
  void getMySavedChannels(GetMySavedChannelsResponse& _return, const GetMySavedChannelsRequest& request);
  int32_t send_getMySavedChannels(const GetMySavedChannelsRequest& request);
  void recv_getMySavedChannels(GetMySavedChannelsResponse& _return, const int32_t seqid);
  void getUserInfo(GetUserInfoResponse& _return, const GetUserInfoRequest& request);
  int32_t send_getUserInfo(const GetUserInfoRequest& request);
  void recv_getUserInfo(GetUserInfoResponse& _return, const int32_t seqid);
  void searchForApplications(SearchForApplicationsResponse& _return, const SearchForApplicationsRequest& request);
  int32_t send_searchForApplications(const SearchForApplicationsRequest& request);
  void recv_searchForApplications(SearchForApplicationsResponse& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}}}} // namespace

#endif
