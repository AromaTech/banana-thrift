/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BananaService_H
#define BananaService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "BananaService_types.h"

namespace aroma { namespace banana { namespace thrift { namespace service {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class BananaServiceIf {
 public:
  virtual ~BananaServiceIf() {}

  /**
   * Sign in to the App and using a valid OAUTH Token.
   * 
   * #developer
   * 
   * @param request
   */
  virtual void signIn(SignInResponse& _return, const SignInRequest& request) = 0;

  /**
   * Provision a New Service to keep tabs on.
   * 
   * #developer
   * 
   * @param request
   */
  virtual void provisionService(ProvisionServiceResponse& _return, const ProvisionServiceRequest& request) = 0;

  /**
   * Subscribe to an existing service to get notifications.
   * 
   * #developer
   * 
   * @param request
   */
  virtual void subscribeToService(SubscribeToServiceResponse& _return, const SubscribeToServiceRequest& request) = 0;

  /**
   * Register an existing Service for Health Pokes. The Banana Service
   * will then periodically poke the Service for health status.
   * 
   * #developer
   * #owner
   * 
   * @param request
   */
  virtual void registerHealthCheck(RegisterHealthCheckResponse& _return, const RegisterHealthCheckRequest& request) = 0;

  /**
   * Renew a Service Token that is close to being expired.
   * Only an "owner" can perform this operation.
   * 
   * #developer
   * #owner
   * 
   * @param request
   */
  virtual void renewServiceToken(RenewServiceTokenResponse& _return, const RenewServiceTokenRequest& request) = 0;

  /**
   * Regenerate a Token in case the existing one is lost or forgetten.
   * Keep in mind that this will invalidate the existing ServiceToken.
   * Only an "owner" can perform this opeartion.
   * 
   * #developer
   * #owner
   * 
   * @param request
   */
  virtual void regenerateToken(RegenerateTokenResponse& _return, const RegenerateTokenRequest& request) = 0;

  /**
   * 
   * #service
   * 
   * @param request
   */
  virtual void sendMessage(SendMessageResponse& _return, const SendMessageRequest& request) = 0;

  /**
   * 
   * #service
   * 
   * @param request
   */
  virtual void sendMessageAsync(const SendMessageRequest& request) = 0;
};

class BananaServiceIfFactory {
 public:
  typedef BananaServiceIf Handler;

  virtual ~BananaServiceIfFactory() {}

  virtual BananaServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(BananaServiceIf* /* handler */) = 0;
};

class BananaServiceIfSingletonFactory : virtual public BananaServiceIfFactory {
 public:
  BananaServiceIfSingletonFactory(const boost::shared_ptr<BananaServiceIf>& iface) : iface_(iface) {}
  virtual ~BananaServiceIfSingletonFactory() {}

  virtual BananaServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(BananaServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<BananaServiceIf> iface_;
};

class BananaServiceNull : virtual public BananaServiceIf {
 public:
  virtual ~BananaServiceNull() {}
  void signIn(SignInResponse& /* _return */, const SignInRequest& /* request */) {
    return;
  }
  void provisionService(ProvisionServiceResponse& /* _return */, const ProvisionServiceRequest& /* request */) {
    return;
  }
  void subscribeToService(SubscribeToServiceResponse& /* _return */, const SubscribeToServiceRequest& /* request */) {
    return;
  }
  void registerHealthCheck(RegisterHealthCheckResponse& /* _return */, const RegisterHealthCheckRequest& /* request */) {
    return;
  }
  void renewServiceToken(RenewServiceTokenResponse& /* _return */, const RenewServiceTokenRequest& /* request */) {
    return;
  }
  void regenerateToken(RegenerateTokenResponse& /* _return */, const RegenerateTokenRequest& /* request */) {
    return;
  }
  void sendMessage(SendMessageResponse& /* _return */, const SendMessageRequest& /* request */) {
    return;
  }
  void sendMessageAsync(const SendMessageRequest& /* request */) {
    return;
  }
};

typedef struct _BananaService_signIn_args__isset {
  _BananaService_signIn_args__isset() : request(false) {}
  bool request :1;
} _BananaService_signIn_args__isset;

class BananaService_signIn_args {
 public:

  BananaService_signIn_args(const BananaService_signIn_args&);
  BananaService_signIn_args& operator=(const BananaService_signIn_args&);
  BananaService_signIn_args() {
  }

  virtual ~BananaService_signIn_args() throw();
  SignInRequest request;

  _BananaService_signIn_args__isset __isset;

  void __set_request(const SignInRequest& val);

  bool operator == (const BananaService_signIn_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BananaService_signIn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_signIn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BananaService_signIn_pargs {
 public:


  virtual ~BananaService_signIn_pargs() throw();
  const SignInRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_signIn_result__isset {
  _BananaService_signIn_result__isset() : success(false), ex1(false), ex2(false), ex3(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
} _BananaService_signIn_result__isset;

class BananaService_signIn_result {
 public:

  BananaService_signIn_result(const BananaService_signIn_result&);
  BananaService_signIn_result& operator=(const BananaService_signIn_result&);
  BananaService_signIn_result() {
  }

  virtual ~BananaService_signIn_result() throw();
  SignInResponse success;
  OperationFailedException ex1;
  InvalidArgumentException ex2;
  InvalidCredentialsException ex3;

  _BananaService_signIn_result__isset __isset;

  void __set_success(const SignInResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidArgumentException& val);

  void __set_ex3(const InvalidCredentialsException& val);

  bool operator == (const BananaService_signIn_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    if (!(ex3 == rhs.ex3))
      return false;
    return true;
  }
  bool operator != (const BananaService_signIn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_signIn_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_signIn_presult__isset {
  _BananaService_signIn_presult__isset() : success(false), ex1(false), ex2(false), ex3(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
} _BananaService_signIn_presult__isset;

class BananaService_signIn_presult {
 public:


  virtual ~BananaService_signIn_presult() throw();
  SignInResponse* success;
  OperationFailedException* ex1;
  InvalidArgumentException* ex2;
  InvalidCredentialsException* ex3;

  _BananaService_signIn_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BananaService_provisionService_args__isset {
  _BananaService_provisionService_args__isset() : request(false) {}
  bool request :1;
} _BananaService_provisionService_args__isset;

class BananaService_provisionService_args {
 public:

  BananaService_provisionService_args(const BananaService_provisionService_args&);
  BananaService_provisionService_args& operator=(const BananaService_provisionService_args&);
  BananaService_provisionService_args() {
  }

  virtual ~BananaService_provisionService_args() throw();
  ProvisionServiceRequest request;

  _BananaService_provisionService_args__isset __isset;

  void __set_request(const ProvisionServiceRequest& val);

  bool operator == (const BananaService_provisionService_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BananaService_provisionService_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_provisionService_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BananaService_provisionService_pargs {
 public:


  virtual ~BananaService_provisionService_pargs() throw();
  const ProvisionServiceRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_provisionService_result__isset {
  _BananaService_provisionService_result__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
} _BananaService_provisionService_result__isset;

class BananaService_provisionService_result {
 public:

  BananaService_provisionService_result(const BananaService_provisionService_result&);
  BananaService_provisionService_result& operator=(const BananaService_provisionService_result&);
  BananaService_provisionService_result() {
  }

  virtual ~BananaService_provisionService_result() throw();
  ProvisionServiceResponse success;
  OperationFailedException ex1;
  InvalidArgumentException ex2;
  InvalidCredentialsException ex3;
  ServiceDoesNotExistException ex4;

  _BananaService_provisionService_result__isset __isset;

  void __set_success(const ProvisionServiceResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidArgumentException& val);

  void __set_ex3(const InvalidCredentialsException& val);

  void __set_ex4(const ServiceDoesNotExistException& val);

  bool operator == (const BananaService_provisionService_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    if (!(ex3 == rhs.ex3))
      return false;
    if (!(ex4 == rhs.ex4))
      return false;
    return true;
  }
  bool operator != (const BananaService_provisionService_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_provisionService_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_provisionService_presult__isset {
  _BananaService_provisionService_presult__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
} _BananaService_provisionService_presult__isset;

class BananaService_provisionService_presult {
 public:


  virtual ~BananaService_provisionService_presult() throw();
  ProvisionServiceResponse* success;
  OperationFailedException* ex1;
  InvalidArgumentException* ex2;
  InvalidCredentialsException* ex3;
  ServiceDoesNotExistException* ex4;

  _BananaService_provisionService_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BananaService_subscribeToService_args__isset {
  _BananaService_subscribeToService_args__isset() : request(false) {}
  bool request :1;
} _BananaService_subscribeToService_args__isset;

class BananaService_subscribeToService_args {
 public:

  BananaService_subscribeToService_args(const BananaService_subscribeToService_args&);
  BananaService_subscribeToService_args& operator=(const BananaService_subscribeToService_args&);
  BananaService_subscribeToService_args() {
  }

  virtual ~BananaService_subscribeToService_args() throw();
  SubscribeToServiceRequest request;

  _BananaService_subscribeToService_args__isset __isset;

  void __set_request(const SubscribeToServiceRequest& val);

  bool operator == (const BananaService_subscribeToService_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BananaService_subscribeToService_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_subscribeToService_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BananaService_subscribeToService_pargs {
 public:


  virtual ~BananaService_subscribeToService_pargs() throw();
  const SubscribeToServiceRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_subscribeToService_result__isset {
  _BananaService_subscribeToService_result__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false), ex5(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
  bool ex5 :1;
} _BananaService_subscribeToService_result__isset;

class BananaService_subscribeToService_result {
 public:

  BananaService_subscribeToService_result(const BananaService_subscribeToService_result&);
  BananaService_subscribeToService_result& operator=(const BananaService_subscribeToService_result&);
  BananaService_subscribeToService_result() {
  }

  virtual ~BananaService_subscribeToService_result() throw();
  SubscribeToServiceResponse success;
  OperationFailedException ex1;
  InvalidArgumentException ex2;
  InvalidCredentialsException ex3;
  ServiceDoesNotExistException ex4;
  ServiceAlreadyRegisteredException ex5;

  _BananaService_subscribeToService_result__isset __isset;

  void __set_success(const SubscribeToServiceResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidArgumentException& val);

  void __set_ex3(const InvalidCredentialsException& val);

  void __set_ex4(const ServiceDoesNotExistException& val);

  void __set_ex5(const ServiceAlreadyRegisteredException& val);

  bool operator == (const BananaService_subscribeToService_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    if (!(ex3 == rhs.ex3))
      return false;
    if (!(ex4 == rhs.ex4))
      return false;
    if (!(ex5 == rhs.ex5))
      return false;
    return true;
  }
  bool operator != (const BananaService_subscribeToService_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_subscribeToService_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_subscribeToService_presult__isset {
  _BananaService_subscribeToService_presult__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false), ex5(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
  bool ex5 :1;
} _BananaService_subscribeToService_presult__isset;

class BananaService_subscribeToService_presult {
 public:


  virtual ~BananaService_subscribeToService_presult() throw();
  SubscribeToServiceResponse* success;
  OperationFailedException* ex1;
  InvalidArgumentException* ex2;
  InvalidCredentialsException* ex3;
  ServiceDoesNotExistException* ex4;
  ServiceAlreadyRegisteredException* ex5;

  _BananaService_subscribeToService_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BananaService_registerHealthCheck_args__isset {
  _BananaService_registerHealthCheck_args__isset() : request(false) {}
  bool request :1;
} _BananaService_registerHealthCheck_args__isset;

class BananaService_registerHealthCheck_args {
 public:

  BananaService_registerHealthCheck_args(const BananaService_registerHealthCheck_args&);
  BananaService_registerHealthCheck_args& operator=(const BananaService_registerHealthCheck_args&);
  BananaService_registerHealthCheck_args() {
  }

  virtual ~BananaService_registerHealthCheck_args() throw();
  RegisterHealthCheckRequest request;

  _BananaService_registerHealthCheck_args__isset __isset;

  void __set_request(const RegisterHealthCheckRequest& val);

  bool operator == (const BananaService_registerHealthCheck_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BananaService_registerHealthCheck_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_registerHealthCheck_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BananaService_registerHealthCheck_pargs {
 public:


  virtual ~BananaService_registerHealthCheck_pargs() throw();
  const RegisterHealthCheckRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_registerHealthCheck_result__isset {
  _BananaService_registerHealthCheck_result__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false), ex5(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
  bool ex5 :1;
} _BananaService_registerHealthCheck_result__isset;

class BananaService_registerHealthCheck_result {
 public:

  BananaService_registerHealthCheck_result(const BananaService_registerHealthCheck_result&);
  BananaService_registerHealthCheck_result& operator=(const BananaService_registerHealthCheck_result&);
  BananaService_registerHealthCheck_result() {
  }

  virtual ~BananaService_registerHealthCheck_result() throw();
  RegisterHealthCheckResponse success;
  OperationFailedException ex1;
  InvalidArgumentException ex2;
  InvalidCredentialsException ex3;
  ServiceDoesNotExistException ex4;
  UnauthorizedException ex5;

  _BananaService_registerHealthCheck_result__isset __isset;

  void __set_success(const RegisterHealthCheckResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidArgumentException& val);

  void __set_ex3(const InvalidCredentialsException& val);

  void __set_ex4(const ServiceDoesNotExistException& val);

  void __set_ex5(const UnauthorizedException& val);

  bool operator == (const BananaService_registerHealthCheck_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    if (!(ex3 == rhs.ex3))
      return false;
    if (!(ex4 == rhs.ex4))
      return false;
    if (!(ex5 == rhs.ex5))
      return false;
    return true;
  }
  bool operator != (const BananaService_registerHealthCheck_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_registerHealthCheck_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_registerHealthCheck_presult__isset {
  _BananaService_registerHealthCheck_presult__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false), ex5(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
  bool ex5 :1;
} _BananaService_registerHealthCheck_presult__isset;

class BananaService_registerHealthCheck_presult {
 public:


  virtual ~BananaService_registerHealthCheck_presult() throw();
  RegisterHealthCheckResponse* success;
  OperationFailedException* ex1;
  InvalidArgumentException* ex2;
  InvalidCredentialsException* ex3;
  ServiceDoesNotExistException* ex4;
  UnauthorizedException* ex5;

  _BananaService_registerHealthCheck_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BananaService_renewServiceToken_args__isset {
  _BananaService_renewServiceToken_args__isset() : request(false) {}
  bool request :1;
} _BananaService_renewServiceToken_args__isset;

class BananaService_renewServiceToken_args {
 public:

  BananaService_renewServiceToken_args(const BananaService_renewServiceToken_args&);
  BananaService_renewServiceToken_args& operator=(const BananaService_renewServiceToken_args&);
  BananaService_renewServiceToken_args() {
  }

  virtual ~BananaService_renewServiceToken_args() throw();
  RenewServiceTokenRequest request;

  _BananaService_renewServiceToken_args__isset __isset;

  void __set_request(const RenewServiceTokenRequest& val);

  bool operator == (const BananaService_renewServiceToken_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BananaService_renewServiceToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_renewServiceToken_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BananaService_renewServiceToken_pargs {
 public:


  virtual ~BananaService_renewServiceToken_pargs() throw();
  const RenewServiceTokenRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_renewServiceToken_result__isset {
  _BananaService_renewServiceToken_result__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false), ex5(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
  bool ex5 :1;
} _BananaService_renewServiceToken_result__isset;

class BananaService_renewServiceToken_result {
 public:

  BananaService_renewServiceToken_result(const BananaService_renewServiceToken_result&);
  BananaService_renewServiceToken_result& operator=(const BananaService_renewServiceToken_result&);
  BananaService_renewServiceToken_result() {
  }

  virtual ~BananaService_renewServiceToken_result() throw();
  RenewServiceTokenResponse success;
  OperationFailedException ex1;
  InvalidArgumentException ex2;
  InvalidCredentialsException ex3;
  ServiceDoesNotExistException ex4;
  UnauthorizedException ex5;

  _BananaService_renewServiceToken_result__isset __isset;

  void __set_success(const RenewServiceTokenResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidArgumentException& val);

  void __set_ex3(const InvalidCredentialsException& val);

  void __set_ex4(const ServiceDoesNotExistException& val);

  void __set_ex5(const UnauthorizedException& val);

  bool operator == (const BananaService_renewServiceToken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    if (!(ex3 == rhs.ex3))
      return false;
    if (!(ex4 == rhs.ex4))
      return false;
    if (!(ex5 == rhs.ex5))
      return false;
    return true;
  }
  bool operator != (const BananaService_renewServiceToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_renewServiceToken_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_renewServiceToken_presult__isset {
  _BananaService_renewServiceToken_presult__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false), ex5(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
  bool ex5 :1;
} _BananaService_renewServiceToken_presult__isset;

class BananaService_renewServiceToken_presult {
 public:


  virtual ~BananaService_renewServiceToken_presult() throw();
  RenewServiceTokenResponse* success;
  OperationFailedException* ex1;
  InvalidArgumentException* ex2;
  InvalidCredentialsException* ex3;
  ServiceDoesNotExistException* ex4;
  UnauthorizedException* ex5;

  _BananaService_renewServiceToken_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BananaService_regenerateToken_args__isset {
  _BananaService_regenerateToken_args__isset() : request(false) {}
  bool request :1;
} _BananaService_regenerateToken_args__isset;

class BananaService_regenerateToken_args {
 public:

  BananaService_regenerateToken_args(const BananaService_regenerateToken_args&);
  BananaService_regenerateToken_args& operator=(const BananaService_regenerateToken_args&);
  BananaService_regenerateToken_args() {
  }

  virtual ~BananaService_regenerateToken_args() throw();
  RegenerateTokenRequest request;

  _BananaService_regenerateToken_args__isset __isset;

  void __set_request(const RegenerateTokenRequest& val);

  bool operator == (const BananaService_regenerateToken_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BananaService_regenerateToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_regenerateToken_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BananaService_regenerateToken_pargs {
 public:


  virtual ~BananaService_regenerateToken_pargs() throw();
  const RegenerateTokenRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_regenerateToken_result__isset {
  _BananaService_regenerateToken_result__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false), ex5(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
  bool ex5 :1;
} _BananaService_regenerateToken_result__isset;

class BananaService_regenerateToken_result {
 public:

  BananaService_regenerateToken_result(const BananaService_regenerateToken_result&);
  BananaService_regenerateToken_result& operator=(const BananaService_regenerateToken_result&);
  BananaService_regenerateToken_result() {
  }

  virtual ~BananaService_regenerateToken_result() throw();
  RegenerateTokenResponse success;
  OperationFailedException ex1;
  InvalidArgumentException ex2;
  InvalidCredentialsException ex3;
  ServiceDoesNotExistException ex4;
  UnauthorizedException ex5;

  _BananaService_regenerateToken_result__isset __isset;

  void __set_success(const RegenerateTokenResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidArgumentException& val);

  void __set_ex3(const InvalidCredentialsException& val);

  void __set_ex4(const ServiceDoesNotExistException& val);

  void __set_ex5(const UnauthorizedException& val);

  bool operator == (const BananaService_regenerateToken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    if (!(ex3 == rhs.ex3))
      return false;
    if (!(ex4 == rhs.ex4))
      return false;
    if (!(ex5 == rhs.ex5))
      return false;
    return true;
  }
  bool operator != (const BananaService_regenerateToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_regenerateToken_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_regenerateToken_presult__isset {
  _BananaService_regenerateToken_presult__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false), ex5(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
  bool ex5 :1;
} _BananaService_regenerateToken_presult__isset;

class BananaService_regenerateToken_presult {
 public:


  virtual ~BananaService_regenerateToken_presult() throw();
  RegenerateTokenResponse* success;
  OperationFailedException* ex1;
  InvalidArgumentException* ex2;
  InvalidCredentialsException* ex3;
  ServiceDoesNotExistException* ex4;
  UnauthorizedException* ex5;

  _BananaService_regenerateToken_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BananaService_sendMessage_args__isset {
  _BananaService_sendMessage_args__isset() : request(false) {}
  bool request :1;
} _BananaService_sendMessage_args__isset;

class BananaService_sendMessage_args {
 public:

  BananaService_sendMessage_args(const BananaService_sendMessage_args&);
  BananaService_sendMessage_args& operator=(const BananaService_sendMessage_args&);
  BananaService_sendMessage_args() {
  }

  virtual ~BananaService_sendMessage_args() throw();
  SendMessageRequest request;

  _BananaService_sendMessage_args__isset __isset;

  void __set_request(const SendMessageRequest& val);

  bool operator == (const BananaService_sendMessage_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BananaService_sendMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_sendMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BananaService_sendMessage_pargs {
 public:


  virtual ~BananaService_sendMessage_pargs() throw();
  const SendMessageRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_sendMessage_result__isset {
  _BananaService_sendMessage_result__isset() : success(false), ex1(false), ex2(false), ex3(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
} _BananaService_sendMessage_result__isset;

class BananaService_sendMessage_result {
 public:

  BananaService_sendMessage_result(const BananaService_sendMessage_result&);
  BananaService_sendMessage_result& operator=(const BananaService_sendMessage_result&);
  BananaService_sendMessage_result() {
  }

  virtual ~BananaService_sendMessage_result() throw();
  SendMessageResponse success;
  OperationFailedException ex1;
  InvalidArgumentException ex2;
  InvalidCredentialsException ex3;

  _BananaService_sendMessage_result__isset __isset;

  void __set_success(const SendMessageResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidArgumentException& val);

  void __set_ex3(const InvalidCredentialsException& val);

  bool operator == (const BananaService_sendMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    if (!(ex3 == rhs.ex3))
      return false;
    return true;
  }
  bool operator != (const BananaService_sendMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_sendMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_sendMessage_presult__isset {
  _BananaService_sendMessage_presult__isset() : success(false), ex1(false), ex2(false), ex3(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
} _BananaService_sendMessage_presult__isset;

class BananaService_sendMessage_presult {
 public:


  virtual ~BananaService_sendMessage_presult() throw();
  SendMessageResponse* success;
  OperationFailedException* ex1;
  InvalidArgumentException* ex2;
  InvalidCredentialsException* ex3;

  _BananaService_sendMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BananaService_sendMessageAsync_args__isset {
  _BananaService_sendMessageAsync_args__isset() : request(false) {}
  bool request :1;
} _BananaService_sendMessageAsync_args__isset;

class BananaService_sendMessageAsync_args {
 public:

  BananaService_sendMessageAsync_args(const BananaService_sendMessageAsync_args&);
  BananaService_sendMessageAsync_args& operator=(const BananaService_sendMessageAsync_args&);
  BananaService_sendMessageAsync_args() {
  }

  virtual ~BananaService_sendMessageAsync_args() throw();
  SendMessageRequest request;

  _BananaService_sendMessageAsync_args__isset __isset;

  void __set_request(const SendMessageRequest& val);

  bool operator == (const BananaService_sendMessageAsync_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BananaService_sendMessageAsync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_sendMessageAsync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BananaService_sendMessageAsync_pargs {
 public:


  virtual ~BananaService_sendMessageAsync_pargs() throw();
  const SendMessageRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class BananaServiceClient : virtual public BananaServiceIf {
 public:
  BananaServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  BananaServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void signIn(SignInResponse& _return, const SignInRequest& request);
  void send_signIn(const SignInRequest& request);
  void recv_signIn(SignInResponse& _return);
  void provisionService(ProvisionServiceResponse& _return, const ProvisionServiceRequest& request);
  void send_provisionService(const ProvisionServiceRequest& request);
  void recv_provisionService(ProvisionServiceResponse& _return);
  void subscribeToService(SubscribeToServiceResponse& _return, const SubscribeToServiceRequest& request);
  void send_subscribeToService(const SubscribeToServiceRequest& request);
  void recv_subscribeToService(SubscribeToServiceResponse& _return);
  void registerHealthCheck(RegisterHealthCheckResponse& _return, const RegisterHealthCheckRequest& request);
  void send_registerHealthCheck(const RegisterHealthCheckRequest& request);
  void recv_registerHealthCheck(RegisterHealthCheckResponse& _return);
  void renewServiceToken(RenewServiceTokenResponse& _return, const RenewServiceTokenRequest& request);
  void send_renewServiceToken(const RenewServiceTokenRequest& request);
  void recv_renewServiceToken(RenewServiceTokenResponse& _return);
  void regenerateToken(RegenerateTokenResponse& _return, const RegenerateTokenRequest& request);
  void send_regenerateToken(const RegenerateTokenRequest& request);
  void recv_regenerateToken(RegenerateTokenResponse& _return);
  void sendMessage(SendMessageResponse& _return, const SendMessageRequest& request);
  void send_sendMessage(const SendMessageRequest& request);
  void recv_sendMessage(SendMessageResponse& _return);
  void sendMessageAsync(const SendMessageRequest& request);
  void send_sendMessageAsync(const SendMessageRequest& request);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class BananaServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<BananaServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (BananaServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_signIn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_provisionService(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_subscribeToService(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerHealthCheck(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_renewServiceToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_regenerateToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendMessageAsync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  BananaServiceProcessor(boost::shared_ptr<BananaServiceIf> iface) :
    iface_(iface) {
    processMap_["signIn"] = &BananaServiceProcessor::process_signIn;
    processMap_["provisionService"] = &BananaServiceProcessor::process_provisionService;
    processMap_["subscribeToService"] = &BananaServiceProcessor::process_subscribeToService;
    processMap_["registerHealthCheck"] = &BananaServiceProcessor::process_registerHealthCheck;
    processMap_["renewServiceToken"] = &BananaServiceProcessor::process_renewServiceToken;
    processMap_["regenerateToken"] = &BananaServiceProcessor::process_regenerateToken;
    processMap_["sendMessage"] = &BananaServiceProcessor::process_sendMessage;
    processMap_["sendMessageAsync"] = &BananaServiceProcessor::process_sendMessageAsync;
  }

  virtual ~BananaServiceProcessor() {}
};

class BananaServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BananaServiceProcessorFactory(const ::boost::shared_ptr< BananaServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< BananaServiceIfFactory > handlerFactory_;
};

class BananaServiceMultiface : virtual public BananaServiceIf {
 public:
  BananaServiceMultiface(std::vector<boost::shared_ptr<BananaServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~BananaServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<BananaServiceIf> > ifaces_;
  BananaServiceMultiface() {}
  void add(boost::shared_ptr<BananaServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void signIn(SignInResponse& _return, const SignInRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->signIn(_return, request);
    }
    ifaces_[i]->signIn(_return, request);
    return;
  }

  void provisionService(ProvisionServiceResponse& _return, const ProvisionServiceRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->provisionService(_return, request);
    }
    ifaces_[i]->provisionService(_return, request);
    return;
  }

  void subscribeToService(SubscribeToServiceResponse& _return, const SubscribeToServiceRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->subscribeToService(_return, request);
    }
    ifaces_[i]->subscribeToService(_return, request);
    return;
  }

  void registerHealthCheck(RegisterHealthCheckResponse& _return, const RegisterHealthCheckRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerHealthCheck(_return, request);
    }
    ifaces_[i]->registerHealthCheck(_return, request);
    return;
  }

  void renewServiceToken(RenewServiceTokenResponse& _return, const RenewServiceTokenRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->renewServiceToken(_return, request);
    }
    ifaces_[i]->renewServiceToken(_return, request);
    return;
  }

  void regenerateToken(RegenerateTokenResponse& _return, const RegenerateTokenRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->regenerateToken(_return, request);
    }
    ifaces_[i]->regenerateToken(_return, request);
    return;
  }

  void sendMessage(SendMessageResponse& _return, const SendMessageRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendMessage(_return, request);
    }
    ifaces_[i]->sendMessage(_return, request);
    return;
  }

  void sendMessageAsync(const SendMessageRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendMessageAsync(request);
    }
    ifaces_[i]->sendMessageAsync(request);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class BananaServiceConcurrentClient : virtual public BananaServiceIf {
 public:
  BananaServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  BananaServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void signIn(SignInResponse& _return, const SignInRequest& request);
  int32_t send_signIn(const SignInRequest& request);
  void recv_signIn(SignInResponse& _return, const int32_t seqid);
  void provisionService(ProvisionServiceResponse& _return, const ProvisionServiceRequest& request);
  int32_t send_provisionService(const ProvisionServiceRequest& request);
  void recv_provisionService(ProvisionServiceResponse& _return, const int32_t seqid);
  void subscribeToService(SubscribeToServiceResponse& _return, const SubscribeToServiceRequest& request);
  int32_t send_subscribeToService(const SubscribeToServiceRequest& request);
  void recv_subscribeToService(SubscribeToServiceResponse& _return, const int32_t seqid);
  void registerHealthCheck(RegisterHealthCheckResponse& _return, const RegisterHealthCheckRequest& request);
  int32_t send_registerHealthCheck(const RegisterHealthCheckRequest& request);
  void recv_registerHealthCheck(RegisterHealthCheckResponse& _return, const int32_t seqid);
  void renewServiceToken(RenewServiceTokenResponse& _return, const RenewServiceTokenRequest& request);
  int32_t send_renewServiceToken(const RenewServiceTokenRequest& request);
  void recv_renewServiceToken(RenewServiceTokenResponse& _return, const int32_t seqid);
  void regenerateToken(RegenerateTokenResponse& _return, const RegenerateTokenRequest& request);
  int32_t send_regenerateToken(const RegenerateTokenRequest& request);
  void recv_regenerateToken(RegenerateTokenResponse& _return, const int32_t seqid);
  void sendMessage(SendMessageResponse& _return, const SendMessageRequest& request);
  int32_t send_sendMessage(const SendMessageRequest& request);
  void recv_sendMessage(SendMessageResponse& _return, const int32_t seqid);
  void sendMessageAsync(const SendMessageRequest& request);
  void send_sendMessageAsync(const SendMessageRequest& request);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}}}} // namespace

#endif
