/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BananaService_H
#define BananaService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "BananaService_types.h"

namespace tech { namespace aroma { namespace banana { namespace thrift { namespace service {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class BananaServiceIf {
 public:
  virtual ~BananaServiceIf() {}
  virtual void registerHealthCheck(RegisterHealthCheckResponse& _return, const RegisterHealthCheckRequest& request) = 0;
};

class BananaServiceIfFactory {
 public:
  typedef BananaServiceIf Handler;

  virtual ~BananaServiceIfFactory() {}

  virtual BananaServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(BananaServiceIf* /* handler */) = 0;
};

class BananaServiceIfSingletonFactory : virtual public BananaServiceIfFactory {
 public:
  BananaServiceIfSingletonFactory(const boost::shared_ptr<BananaServiceIf>& iface) : iface_(iface) {}
  virtual ~BananaServiceIfSingletonFactory() {}

  virtual BananaServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(BananaServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<BananaServiceIf> iface_;
};

class BananaServiceNull : virtual public BananaServiceIf {
 public:
  virtual ~BananaServiceNull() {}
  void registerHealthCheck(RegisterHealthCheckResponse& /* _return */, const RegisterHealthCheckRequest& /* request */) {
    return;
  }
};

typedef struct _BananaService_registerHealthCheck_args__isset {
  _BananaService_registerHealthCheck_args__isset() : request(false) {}
  bool request :1;
} _BananaService_registerHealthCheck_args__isset;

class BananaService_registerHealthCheck_args {
 public:

  BananaService_registerHealthCheck_args(const BananaService_registerHealthCheck_args&);
  BananaService_registerHealthCheck_args& operator=(const BananaService_registerHealthCheck_args&);
  BananaService_registerHealthCheck_args() {
  }

  virtual ~BananaService_registerHealthCheck_args() throw();
  RegisterHealthCheckRequest request;

  _BananaService_registerHealthCheck_args__isset __isset;

  void __set_request(const RegisterHealthCheckRequest& val);

  bool operator == (const BananaService_registerHealthCheck_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BananaService_registerHealthCheck_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_registerHealthCheck_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BananaService_registerHealthCheck_pargs {
 public:


  virtual ~BananaService_registerHealthCheck_pargs() throw();
  const RegisterHealthCheckRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_registerHealthCheck_result__isset {
  _BananaService_registerHealthCheck_result__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
} _BananaService_registerHealthCheck_result__isset;

class BananaService_registerHealthCheck_result {
 public:

  BananaService_registerHealthCheck_result(const BananaService_registerHealthCheck_result&);
  BananaService_registerHealthCheck_result& operator=(const BananaService_registerHealthCheck_result&);
  BananaService_registerHealthCheck_result() {
  }

  virtual ~BananaService_registerHealthCheck_result() throw();
  RegisterHealthCheckResponse success;
  OperationFailedException ex1;
  InvalidArgumentException ex2;
  InvalidCredentialsException ex3;
  ServiceDoesNotExistException ex4;

  _BananaService_registerHealthCheck_result__isset __isset;

  void __set_success(const RegisterHealthCheckResponse& val);

  void __set_ex1(const OperationFailedException& val);

  void __set_ex2(const InvalidArgumentException& val);

  void __set_ex3(const InvalidCredentialsException& val);

  void __set_ex4(const ServiceDoesNotExistException& val);

  bool operator == (const BananaService_registerHealthCheck_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    if (!(ex3 == rhs.ex3))
      return false;
    if (!(ex4 == rhs.ex4))
      return false;
    return true;
  }
  bool operator != (const BananaService_registerHealthCheck_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BananaService_registerHealthCheck_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BananaService_registerHealthCheck_presult__isset {
  _BananaService_registerHealthCheck_presult__isset() : success(false), ex1(false), ex2(false), ex3(false), ex4(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
  bool ex3 :1;
  bool ex4 :1;
} _BananaService_registerHealthCheck_presult__isset;

class BananaService_registerHealthCheck_presult {
 public:


  virtual ~BananaService_registerHealthCheck_presult() throw();
  RegisterHealthCheckResponse* success;
  OperationFailedException* ex1;
  InvalidArgumentException* ex2;
  InvalidCredentialsException* ex3;
  ServiceDoesNotExistException* ex4;

  _BananaService_registerHealthCheck_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class BananaServiceClient : virtual public BananaServiceIf {
 public:
  BananaServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  BananaServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void registerHealthCheck(RegisterHealthCheckResponse& _return, const RegisterHealthCheckRequest& request);
  void send_registerHealthCheck(const RegisterHealthCheckRequest& request);
  void recv_registerHealthCheck(RegisterHealthCheckResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class BananaServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<BananaServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (BananaServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_registerHealthCheck(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  BananaServiceProcessor(boost::shared_ptr<BananaServiceIf> iface) :
    iface_(iface) {
    processMap_["registerHealthCheck"] = &BananaServiceProcessor::process_registerHealthCheck;
  }

  virtual ~BananaServiceProcessor() {}
};

class BananaServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BananaServiceProcessorFactory(const ::boost::shared_ptr< BananaServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< BananaServiceIfFactory > handlerFactory_;
};

class BananaServiceMultiface : virtual public BananaServiceIf {
 public:
  BananaServiceMultiface(std::vector<boost::shared_ptr<BananaServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~BananaServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<BananaServiceIf> > ifaces_;
  BananaServiceMultiface() {}
  void add(boost::shared_ptr<BananaServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void registerHealthCheck(RegisterHealthCheckResponse& _return, const RegisterHealthCheckRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerHealthCheck(_return, request);
    }
    ifaces_[i]->registerHealthCheck(_return, request);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class BananaServiceConcurrentClient : virtual public BananaServiceIf {
 public:
  BananaServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  BananaServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void registerHealthCheck(RegisterHealthCheckResponse& _return, const RegisterHealthCheckRequest& request);
  int32_t send_registerHealthCheck(const RegisterHealthCheckRequest& request);
  void recv_registerHealthCheck(RegisterHealthCheckResponse& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}}}}} // namespace

#endif
