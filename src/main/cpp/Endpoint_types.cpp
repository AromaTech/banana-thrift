/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Endpoint_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace tech { namespace aroma { namespace banana { namespace thrift { namespace endpoint {


TcpEndpoint::~TcpEndpoint() throw() {
}


void TcpEndpoint::__set_hostname(const std::string& val) {
  this->hostname = val;
}

void TcpEndpoint::__set_port(const int val) {
  this->port = val;
}

uint32_t TcpEndpoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_hostname = false;
  bool isset_port = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hostname);
          isset_hostname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->port);
          isset_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_hostname)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_port)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TcpEndpoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TcpEndpoint");

  xfer += oprot->writeFieldBegin("hostname", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->hostname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TcpEndpoint &a, TcpEndpoint &b) {
  using ::std::swap;
  swap(a.hostname, b.hostname);
  swap(a.port, b.port);
}

TcpEndpoint::TcpEndpoint(const TcpEndpoint& other0) {
  hostname = other0.hostname;
  port = other0.port;
}
TcpEndpoint& TcpEndpoint::operator=(const TcpEndpoint& other1) {
  hostname = other1.hostname;
  port = other1.port;
  return *this;
}
void TcpEndpoint::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TcpEndpoint(";
  out << "hostname=" << to_string(hostname);
  out << ", " << "port=" << to_string(port);
  out << ")";
}


ThriftHttpEndpoint::~ThriftHttpEndpoint() throw() {
}


void ThriftHttpEndpoint::__set_url(const std::string& val) {
  this->url = val;
}

uint32_t ThriftHttpEndpoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_url = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          isset_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_url)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ThriftHttpEndpoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThriftHttpEndpoint");

  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftHttpEndpoint &a, ThriftHttpEndpoint &b) {
  using ::std::swap;
  swap(a.url, b.url);
}

ThriftHttpEndpoint::ThriftHttpEndpoint(const ThriftHttpEndpoint& other2) {
  url = other2.url;
}
ThriftHttpEndpoint& ThriftHttpEndpoint::operator=(const ThriftHttpEndpoint& other3) {
  url = other3.url;
  return *this;
}
void ThriftHttpEndpoint::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThriftHttpEndpoint(";
  out << "url=" << to_string(url);
  out << ")";
}


RestHttpEndpoint::~RestHttpEndpoint() throw() {
}


void RestHttpEndpoint::__set_url(const std::string& val) {
  this->url = val;
}

uint32_t RestHttpEndpoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_url = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          isset_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_url)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RestHttpEndpoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RestHttpEndpoint");

  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RestHttpEndpoint &a, RestHttpEndpoint &b) {
  using ::std::swap;
  swap(a.url, b.url);
}

RestHttpEndpoint::RestHttpEndpoint(const RestHttpEndpoint& other4) {
  url = other4.url;
}
RestHttpEndpoint& RestHttpEndpoint::operator=(const RestHttpEndpoint& other5) {
  url = other5.url;
  return *this;
}
void RestHttpEndpoint::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RestHttpEndpoint(";
  out << "url=" << to_string(url);
  out << ")";
}


Endpoint::~Endpoint() throw() {
}


void Endpoint::__set_tcp(const TcpEndpoint& val) {
  this->tcp = val;
}

void Endpoint::__set_thriftHttp(const ThriftHttpEndpoint& val) {
  this->thriftHttp = val;
}

void Endpoint::__set_restHttp(const RestHttpEndpoint& val) {
  this->restHttp = val;
}

uint32_t Endpoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tcp.read(iprot);
          this->__isset.tcp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thriftHttp.read(iprot);
          this->__isset.thriftHttp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->restHttp.read(iprot);
          this->__isset.restHttp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Endpoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Endpoint");

  xfer += oprot->writeFieldBegin("tcp", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->tcp.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thriftHttp", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thriftHttp.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("restHttp", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->restHttp.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Endpoint &a, Endpoint &b) {
  using ::std::swap;
  swap(a.tcp, b.tcp);
  swap(a.thriftHttp, b.thriftHttp);
  swap(a.restHttp, b.restHttp);
  swap(a.__isset, b.__isset);
}

Endpoint::Endpoint(const Endpoint& other6) {
  tcp = other6.tcp;
  thriftHttp = other6.thriftHttp;
  restHttp = other6.restHttp;
  __isset = other6.__isset;
}
Endpoint& Endpoint::operator=(const Endpoint& other7) {
  tcp = other7.tcp;
  thriftHttp = other7.thriftHttp;
  restHttp = other7.restHttp;
  __isset = other7.__isset;
  return *this;
}
void Endpoint::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Endpoint(";
  out << "tcp=" << to_string(tcp);
  out << ", " << "thriftHttp=" << to_string(thriftHttp);
  out << ", " << "restHttp=" << to_string(restHttp);
  out << ")";
}


HealthPokeRequest::~HealthPokeRequest() throw() {
}


void HealthPokeRequest::__set_serviceName(const std::string& val) {
  this->serviceName = val;
}

void HealthPokeRequest::__set_serviceToken(const  ::ServiceToken& val) {
  this->serviceToken = val;
}

uint32_t HealthPokeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serviceName);
          this->__isset.serviceName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->serviceToken.read(iprot);
          this->__isset.serviceToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HealthPokeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HealthPokeRequest");

  xfer += oprot->writeFieldBegin("serviceName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->serviceName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceToken", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->serviceToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HealthPokeRequest &a, HealthPokeRequest &b) {
  using ::std::swap;
  swap(a.serviceName, b.serviceName);
  swap(a.serviceToken, b.serviceToken);
  swap(a.__isset, b.__isset);
}

HealthPokeRequest::HealthPokeRequest(const HealthPokeRequest& other8) {
  serviceName = other8.serviceName;
  serviceToken = other8.serviceToken;
  __isset = other8.__isset;
}
HealthPokeRequest& HealthPokeRequest::operator=(const HealthPokeRequest& other9) {
  serviceName = other9.serviceName;
  serviceToken = other9.serviceToken;
  __isset = other9.__isset;
  return *this;
}
void HealthPokeRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HealthPokeRequest(";
  out << "serviceName=" << to_string(serviceName);
  out << ", " << "serviceToken=" << to_string(serviceToken);
  out << ")";
}


HealthPokeResponse::~HealthPokeResponse() throw() {
}


void HealthPokeResponse::__set_message(const std::string& val) {
  this->message = val;
}

void HealthPokeResponse::__set_healthy(const bool val) {
  this->healthy = val;
}

uint32_t HealthPokeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->healthy);
          this->__isset.healthy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HealthPokeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HealthPokeResponse");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("healthy", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->healthy);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HealthPokeResponse &a, HealthPokeResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.healthy, b.healthy);
  swap(a.__isset, b.__isset);
}

HealthPokeResponse::HealthPokeResponse(const HealthPokeResponse& other10) {
  message = other10.message;
  healthy = other10.healthy;
  __isset = other10.__isset;
}
HealthPokeResponse& HealthPokeResponse::operator=(const HealthPokeResponse& other11) {
  message = other11.message;
  healthy = other11.healthy;
  __isset = other11.__isset;
  return *this;
}
void HealthPokeResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HealthPokeResponse(";
  out << "message=" << to_string(message);
  out << ", " << "healthy=" << to_string(healthy);
  out << ")";
}

}}}}} // namespace
