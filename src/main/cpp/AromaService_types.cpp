/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "AromaService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace aroma { namespace thrift { namespace service {


CheckExistsRequest::~CheckExistsRequest() throw() {
}


void CheckExistsRequest::__set_emailAddress(const std::string& val) {
  this->emailAddress = val;
}

uint32_t CheckExistsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->emailAddress);
          this->__isset.emailAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CheckExistsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CheckExistsRequest");

  xfer += oprot->writeFieldBegin("emailAddress", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->emailAddress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CheckExistsRequest &a, CheckExistsRequest &b) {
  using ::std::swap;
  swap(a.emailAddress, b.emailAddress);
  swap(a.__isset, b.__isset);
}

CheckExistsRequest::CheckExistsRequest(const CheckExistsRequest& other0) {
  emailAddress = other0.emailAddress;
  __isset = other0.__isset;
}
CheckExistsRequest& CheckExistsRequest::operator=(const CheckExistsRequest& other1) {
  emailAddress = other1.emailAddress;
  __isset = other1.__isset;
  return *this;
}
void CheckExistsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CheckExistsRequest(";
  out << "emailAddress=" << to_string(emailAddress);
  out << ")";
}


CheckExistsResponse::~CheckExistsResponse() throw() {
}


void CheckExistsResponse::__set_exists(const bool val) {
  this->exists = val;
}

void CheckExistsResponse::__set_message(const std::string& val) {
  this->message = val;
__isset.message = true;
}

uint32_t CheckExistsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->exists);
          this->__isset.exists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CheckExistsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CheckExistsResponse");

  xfer += oprot->writeFieldBegin("exists", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->exists);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->message);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CheckExistsResponse &a, CheckExistsResponse &b) {
  using ::std::swap;
  swap(a.exists, b.exists);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

CheckExistsResponse::CheckExistsResponse(const CheckExistsResponse& other2) {
  exists = other2.exists;
  message = other2.message;
  __isset = other2.__isset;
}
CheckExistsResponse& CheckExistsResponse::operator=(const CheckExistsResponse& other3) {
  exists = other3.exists;
  message = other3.message;
  __isset = other3.__isset;
  return *this;
}
void CheckExistsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CheckExistsResponse(";
  out << "exists=" << to_string(exists);
  out << ", " << "message="; (__isset.message ? (out << to_string(message)) : (out << "<null>"));
  out << ")";
}


DeleteActivityRequest::~DeleteActivityRequest() throw() {
}


void DeleteActivityRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void DeleteActivityRequest::__set_eventId(const uuid& val) {
  this->eventId = val;
}

void DeleteActivityRequest::__set_deleteAll(const bool val) {
  this->deleteAll = val;
__isset.deleteAll = true;
}

void DeleteActivityRequest::__set_multipleEventIds(const std::vector<uuid> & val) {
  this->multipleEventIds = val;
__isset.multipleEventIds = true;
}

uint32_t DeleteActivityRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventId);
          this->__isset.eventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->deleteAll);
          this->__isset.deleteAll = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->multipleEventIds.clear();
            uint32_t _size4;
            ::apache::thrift::protocol::TType _etype7;
            xfer += iprot->readListBegin(_etype7, _size4);
            this->multipleEventIds.resize(_size4);
            uint32_t _i8;
            for (_i8 = 0; _i8 < _size4; ++_i8)
            {
              xfer += iprot->readString(this->multipleEventIds[_i8]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.multipleEventIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteActivityRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeleteActivityRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->eventId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.deleteAll) {
    xfer += oprot->writeFieldBegin("deleteAll", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->deleteAll);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.multipleEventIds) {
    xfer += oprot->writeFieldBegin("multipleEventIds", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->multipleEventIds.size()));
      std::vector<uuid> ::const_iterator _iter9;
      for (_iter9 = this->multipleEventIds.begin(); _iter9 != this->multipleEventIds.end(); ++_iter9)
      {
        xfer += oprot->writeString((*_iter9));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteActivityRequest &a, DeleteActivityRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.eventId, b.eventId);
  swap(a.deleteAll, b.deleteAll);
  swap(a.multipleEventIds, b.multipleEventIds);
  swap(a.__isset, b.__isset);
}

DeleteActivityRequest::DeleteActivityRequest(const DeleteActivityRequest& other10) {
  token = other10.token;
  eventId = other10.eventId;
  deleteAll = other10.deleteAll;
  multipleEventIds = other10.multipleEventIds;
  __isset = other10.__isset;
}
DeleteActivityRequest& DeleteActivityRequest::operator=(const DeleteActivityRequest& other11) {
  token = other11.token;
  eventId = other11.eventId;
  deleteAll = other11.deleteAll;
  multipleEventIds = other11.multipleEventIds;
  __isset = other11.__isset;
  return *this;
}
void DeleteActivityRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeleteActivityRequest(";
  out << "token=" << to_string(token);
  out << ", " << "eventId=" << to_string(eventId);
  out << ", " << "deleteAll="; (__isset.deleteAll ? (out << to_string(deleteAll)) : (out << "<null>"));
  out << ", " << "multipleEventIds="; (__isset.multipleEventIds ? (out << to_string(multipleEventIds)) : (out << "<null>"));
  out << ")";
}


DeleteActivityResponse::~DeleteActivityResponse() throw() {
}


void DeleteActivityResponse::__set_totalEventsDeleted(const int val) {
  this->totalEventsDeleted = val;
__isset.totalEventsDeleted = true;
}

uint32_t DeleteActivityResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalEventsDeleted);
          this->__isset.totalEventsDeleted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteActivityResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeleteActivityResponse");

  if (this->__isset.totalEventsDeleted) {
    xfer += oprot->writeFieldBegin("totalEventsDeleted", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->totalEventsDeleted);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteActivityResponse &a, DeleteActivityResponse &b) {
  using ::std::swap;
  swap(a.totalEventsDeleted, b.totalEventsDeleted);
  swap(a.__isset, b.__isset);
}

DeleteActivityResponse::DeleteActivityResponse(const DeleteActivityResponse& other12) {
  totalEventsDeleted = other12.totalEventsDeleted;
  __isset = other12.__isset;
}
DeleteActivityResponse& DeleteActivityResponse::operator=(const DeleteActivityResponse& other13) {
  totalEventsDeleted = other13.totalEventsDeleted;
  __isset = other13.__isset;
  return *this;
}
void DeleteActivityResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeleteActivityResponse(";
  out << "totalEventsDeleted="; (__isset.totalEventsDeleted ? (out << to_string(totalEventsDeleted)) : (out << "<null>"));
  out << ")";
}


DeleteApplicationRequest::~DeleteApplicationRequest() throw() {
}


void DeleteApplicationRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void DeleteApplicationRequest::__set_applicationId(const uuid& val) {
  this->applicationId = val;
}

uint32_t DeleteApplicationRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteApplicationRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeleteApplicationRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteApplicationRequest &a, DeleteApplicationRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationId, b.applicationId);
  swap(a.__isset, b.__isset);
}

DeleteApplicationRequest::DeleteApplicationRequest(const DeleteApplicationRequest& other14) {
  token = other14.token;
  applicationId = other14.applicationId;
  __isset = other14.__isset;
}
DeleteApplicationRequest& DeleteApplicationRequest::operator=(const DeleteApplicationRequest& other15) {
  token = other15.token;
  applicationId = other15.applicationId;
  __isset = other15.__isset;
  return *this;
}
void DeleteApplicationRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeleteApplicationRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ")";
}


DeleteApplicationResponse::~DeleteApplicationResponse() throw() {
}


void DeleteApplicationResponse::__set_message(const std::string& val) {
  this->message = val;
__isset.message = true;
}

uint32_t DeleteApplicationResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteApplicationResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeleteApplicationResponse");

  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->message);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteApplicationResponse &a, DeleteApplicationResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

DeleteApplicationResponse::DeleteApplicationResponse(const DeleteApplicationResponse& other16) {
  message = other16.message;
  __isset = other16.__isset;
}
DeleteApplicationResponse& DeleteApplicationResponse::operator=(const DeleteApplicationResponse& other17) {
  message = other17.message;
  __isset = other17.__isset;
  return *this;
}
void DeleteApplicationResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeleteApplicationResponse(";
  out << "message="; (__isset.message ? (out << to_string(message)) : (out << "<null>"));
  out << ")";
}


DeleteMessageRequest::~DeleteMessageRequest() throw() {
}


void DeleteMessageRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void DeleteMessageRequest::__set_messageId(const uuid& val) {
  this->messageId = val;
}

void DeleteMessageRequest::__set_applicationId(const uuid& val) {
  this->applicationId = val;
}

void DeleteMessageRequest::__set_messageIds(const std::vector<uuid> & val) {
  this->messageIds = val;
__isset.messageIds = true;
}

void DeleteMessageRequest::__set_deleteAll(const bool val) {
  this->deleteAll = val;
__isset.deleteAll = true;
}

uint32_t DeleteMessageRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->messageIds.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            xfer += iprot->readListBegin(_etype21, _size18);
            this->messageIds.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += iprot->readString(this->messageIds[_i22]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.messageIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->deleteAll);
          this->__isset.deleteAll = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteMessageRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeleteMessageRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->messageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.messageIds) {
    xfer += oprot->writeFieldBegin("messageIds", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->messageIds.size()));
      std::vector<uuid> ::const_iterator _iter23;
      for (_iter23 = this->messageIds.begin(); _iter23 != this->messageIds.end(); ++_iter23)
      {
        xfer += oprot->writeString((*_iter23));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deleteAll) {
    xfer += oprot->writeFieldBegin("deleteAll", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->deleteAll);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteMessageRequest &a, DeleteMessageRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.messageId, b.messageId);
  swap(a.applicationId, b.applicationId);
  swap(a.messageIds, b.messageIds);
  swap(a.deleteAll, b.deleteAll);
  swap(a.__isset, b.__isset);
}

DeleteMessageRequest::DeleteMessageRequest(const DeleteMessageRequest& other24) {
  token = other24.token;
  messageId = other24.messageId;
  applicationId = other24.applicationId;
  messageIds = other24.messageIds;
  deleteAll = other24.deleteAll;
  __isset = other24.__isset;
}
DeleteMessageRequest& DeleteMessageRequest::operator=(const DeleteMessageRequest& other25) {
  token = other25.token;
  messageId = other25.messageId;
  applicationId = other25.applicationId;
  messageIds = other25.messageIds;
  deleteAll = other25.deleteAll;
  __isset = other25.__isset;
  return *this;
}
void DeleteMessageRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeleteMessageRequest(";
  out << "token=" << to_string(token);
  out << ", " << "messageId=" << to_string(messageId);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ", " << "messageIds="; (__isset.messageIds ? (out << to_string(messageIds)) : (out << "<null>"));
  out << ", " << "deleteAll="; (__isset.deleteAll ? (out << to_string(deleteAll)) : (out << "<null>"));
  out << ")";
}


DeleteMessageResponse::~DeleteMessageResponse() throw() {
}


void DeleteMessageResponse::__set_messagesDeleted(const int val) {
  this->messagesDeleted = val;
__isset.messagesDeleted = true;
}

uint32_t DeleteMessageResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->messagesDeleted);
          this->__isset.messagesDeleted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteMessageResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeleteMessageResponse");

  if (this->__isset.messagesDeleted) {
    xfer += oprot->writeFieldBegin("messagesDeleted", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->messagesDeleted);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteMessageResponse &a, DeleteMessageResponse &b) {
  using ::std::swap;
  swap(a.messagesDeleted, b.messagesDeleted);
  swap(a.__isset, b.__isset);
}

DeleteMessageResponse::DeleteMessageResponse(const DeleteMessageResponse& other26) {
  messagesDeleted = other26.messagesDeleted;
  __isset = other26.__isset;
}
DeleteMessageResponse& DeleteMessageResponse::operator=(const DeleteMessageResponse& other27) {
  messagesDeleted = other27.messagesDeleted;
  __isset = other27.__isset;
  return *this;
}
void DeleteMessageResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeleteMessageResponse(";
  out << "messagesDeleted="; (__isset.messagesDeleted ? (out << to_string(messagesDeleted)) : (out << "<null>"));
  out << ")";
}


DismissMessageRequest::~DismissMessageRequest() throw() {
}


void DismissMessageRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void DismissMessageRequest::__set_messageId(const uuid& val) {
  this->messageId = val;
}

void DismissMessageRequest::__set_applicationId(const uuid& val) {
  this->applicationId = val;
}

void DismissMessageRequest::__set_messageIds(const std::vector<uuid> & val) {
  this->messageIds = val;
__isset.messageIds = true;
}

void DismissMessageRequest::__set_dismissAll(const bool val) {
  this->dismissAll = val;
__isset.dismissAll = true;
}

uint32_t DismissMessageRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->messageIds.clear();
            uint32_t _size28;
            ::apache::thrift::protocol::TType _etype31;
            xfer += iprot->readListBegin(_etype31, _size28);
            this->messageIds.resize(_size28);
            uint32_t _i32;
            for (_i32 = 0; _i32 < _size28; ++_i32)
            {
              xfer += iprot->readString(this->messageIds[_i32]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.messageIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->dismissAll);
          this->__isset.dismissAll = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DismissMessageRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DismissMessageRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->messageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.messageIds) {
    xfer += oprot->writeFieldBegin("messageIds", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->messageIds.size()));
      std::vector<uuid> ::const_iterator _iter33;
      for (_iter33 = this->messageIds.begin(); _iter33 != this->messageIds.end(); ++_iter33)
      {
        xfer += oprot->writeString((*_iter33));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dismissAll) {
    xfer += oprot->writeFieldBegin("dismissAll", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->dismissAll);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DismissMessageRequest &a, DismissMessageRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.messageId, b.messageId);
  swap(a.applicationId, b.applicationId);
  swap(a.messageIds, b.messageIds);
  swap(a.dismissAll, b.dismissAll);
  swap(a.__isset, b.__isset);
}

DismissMessageRequest::DismissMessageRequest(const DismissMessageRequest& other34) {
  token = other34.token;
  messageId = other34.messageId;
  applicationId = other34.applicationId;
  messageIds = other34.messageIds;
  dismissAll = other34.dismissAll;
  __isset = other34.__isset;
}
DismissMessageRequest& DismissMessageRequest::operator=(const DismissMessageRequest& other35) {
  token = other35.token;
  messageId = other35.messageId;
  applicationId = other35.applicationId;
  messageIds = other35.messageIds;
  dismissAll = other35.dismissAll;
  __isset = other35.__isset;
  return *this;
}
void DismissMessageRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DismissMessageRequest(";
  out << "token=" << to_string(token);
  out << ", " << "messageId=" << to_string(messageId);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ", " << "messageIds="; (__isset.messageIds ? (out << to_string(messageIds)) : (out << "<null>"));
  out << ", " << "dismissAll="; (__isset.dismissAll ? (out << to_string(dismissAll)) : (out << "<null>"));
  out << ")";
}


DismissMessageResponse::~DismissMessageResponse() throw() {
}


void DismissMessageResponse::__set_messagesDismissed(const int val) {
  this->messagesDismissed = val;
__isset.messagesDismissed = true;
}

uint32_t DismissMessageResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->messagesDismissed);
          this->__isset.messagesDismissed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DismissMessageResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DismissMessageResponse");

  if (this->__isset.messagesDismissed) {
    xfer += oprot->writeFieldBegin("messagesDismissed", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->messagesDismissed);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DismissMessageResponse &a, DismissMessageResponse &b) {
  using ::std::swap;
  swap(a.messagesDismissed, b.messagesDismissed);
  swap(a.__isset, b.__isset);
}

DismissMessageResponse::DismissMessageResponse(const DismissMessageResponse& other36) {
  messagesDismissed = other36.messagesDismissed;
  __isset = other36.__isset;
}
DismissMessageResponse& DismissMessageResponse::operator=(const DismissMessageResponse& other37) {
  messagesDismissed = other37.messagesDismissed;
  __isset = other37.__isset;
  return *this;
}
void DismissMessageResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DismissMessageResponse(";
  out << "messagesDismissed="; (__isset.messagesDismissed ? (out << to_string(messagesDismissed)) : (out << "<null>"));
  out << ")";
}


ProvisionApplicationRequest::~ProvisionApplicationRequest() throw() {
}


void ProvisionApplicationRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void ProvisionApplicationRequest::__set_applicationName(const std::string& val) {
  this->applicationName = val;
}

void ProvisionApplicationRequest::__set_programmingLanguage(const  ::tech::aroma::thrift::ProgrammingLanguage::type val) {
  this->programmingLanguage = val;
__isset.programmingLanguage = true;
}

void ProvisionApplicationRequest::__set_organizationId(const uuid& val) {
  this->organizationId = val;
}

void ProvisionApplicationRequest::__set_icon(const Image& val) {
  this->icon = val;
__isset.icon = true;
}

void ProvisionApplicationRequest::__set_owners(const std::set<uuid> & val) {
  this->owners = val;
__isset.owners = true;
}

void ProvisionApplicationRequest::__set_applicationDescription(const std::string& val) {
  this->applicationDescription = val;
__isset.applicationDescription = true;
}

void ProvisionApplicationRequest::__set_tier(const  ::tech::aroma::thrift::Tier::type val) {
  this->tier = val;
__isset.tier = true;
}

uint32_t ProvisionApplicationRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationName);
          this->__isset.applicationName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast38;
          xfer += iprot->readI32(ecast38);
          this->programmingLanguage = ( ::tech::aroma::thrift::ProgrammingLanguage::type)ecast38;
          this->__isset.programmingLanguage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organizationId);
          this->__isset.organizationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->icon.read(iprot);
          this->__isset.icon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->owners.clear();
            uint32_t _size39;
            ::apache::thrift::protocol::TType _etype42;
            xfer += iprot->readSetBegin(_etype42, _size39);
            uint32_t _i43;
            for (_i43 = 0; _i43 < _size39; ++_i43)
            {
              uuid _elem44;
              xfer += iprot->readString(_elem44);
              this->owners.insert(_elem44);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.owners = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationDescription);
          this->__isset.applicationDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast45;
          xfer += iprot->readI32(ecast45);
          this->tier = ( ::tech::aroma::thrift::Tier::type)ecast45;
          this->__isset.tier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvisionApplicationRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProvisionApplicationRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.programmingLanguage) {
    xfer += oprot->writeFieldBegin("programmingLanguage", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->programmingLanguage);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("organizationId", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->organizationId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.icon) {
    xfer += oprot->writeFieldBegin("icon", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->icon.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.owners) {
    xfer += oprot->writeFieldBegin("owners", ::apache::thrift::protocol::T_SET, 6);
    {
      xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->owners.size()));
      std::set<uuid> ::const_iterator _iter46;
      for (_iter46 = this->owners.begin(); _iter46 != this->owners.end(); ++_iter46)
      {
        xfer += oprot->writeString((*_iter46));
      }
      xfer += oprot->writeSetEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.applicationDescription) {
    xfer += oprot->writeFieldBegin("applicationDescription", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->applicationDescription);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tier) {
    xfer += oprot->writeFieldBegin("tier", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32((int32_t)this->tier);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProvisionApplicationRequest &a, ProvisionApplicationRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationName, b.applicationName);
  swap(a.programmingLanguage, b.programmingLanguage);
  swap(a.organizationId, b.organizationId);
  swap(a.icon, b.icon);
  swap(a.owners, b.owners);
  swap(a.applicationDescription, b.applicationDescription);
  swap(a.tier, b.tier);
  swap(a.__isset, b.__isset);
}

ProvisionApplicationRequest::ProvisionApplicationRequest(const ProvisionApplicationRequest& other47) {
  token = other47.token;
  applicationName = other47.applicationName;
  programmingLanguage = other47.programmingLanguage;
  organizationId = other47.organizationId;
  icon = other47.icon;
  owners = other47.owners;
  applicationDescription = other47.applicationDescription;
  tier = other47.tier;
  __isset = other47.__isset;
}
ProvisionApplicationRequest& ProvisionApplicationRequest::operator=(const ProvisionApplicationRequest& other48) {
  token = other48.token;
  applicationName = other48.applicationName;
  programmingLanguage = other48.programmingLanguage;
  organizationId = other48.organizationId;
  icon = other48.icon;
  owners = other48.owners;
  applicationDescription = other48.applicationDescription;
  tier = other48.tier;
  __isset = other48.__isset;
  return *this;
}
void ProvisionApplicationRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProvisionApplicationRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationName=" << to_string(applicationName);
  out << ", " << "programmingLanguage="; (__isset.programmingLanguage ? (out << to_string(programmingLanguage)) : (out << "<null>"));
  out << ", " << "organizationId=" << to_string(organizationId);
  out << ", " << "icon="; (__isset.icon ? (out << to_string(icon)) : (out << "<null>"));
  out << ", " << "owners="; (__isset.owners ? (out << to_string(owners)) : (out << "<null>"));
  out << ", " << "applicationDescription="; (__isset.applicationDescription ? (out << to_string(applicationDescription)) : (out << "<null>"));
  out << ", " << "tier="; (__isset.tier ? (out << to_string(tier)) : (out << "<null>"));
  out << ")";
}


ProvisionApplicationResponse::~ProvisionApplicationResponse() throw() {
}


void ProvisionApplicationResponse::__set_applicationToken(const ApplicationToken& val) {
  this->applicationToken = val;
}

void ProvisionApplicationResponse::__set_applicationInfo(const Application& val) {
  this->applicationInfo = val;
}

uint32_t ProvisionApplicationResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->applicationToken.read(iprot);
          this->__isset.applicationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->applicationInfo.read(iprot);
          this->__isset.applicationInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvisionApplicationResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProvisionApplicationResponse");

  xfer += oprot->writeFieldBegin("applicationToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->applicationToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationInfo", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->applicationInfo.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProvisionApplicationResponse &a, ProvisionApplicationResponse &b) {
  using ::std::swap;
  swap(a.applicationToken, b.applicationToken);
  swap(a.applicationInfo, b.applicationInfo);
  swap(a.__isset, b.__isset);
}

ProvisionApplicationResponse::ProvisionApplicationResponse(const ProvisionApplicationResponse& other49) {
  applicationToken = other49.applicationToken;
  applicationInfo = other49.applicationInfo;
  __isset = other49.__isset;
}
ProvisionApplicationResponse& ProvisionApplicationResponse::operator=(const ProvisionApplicationResponse& other50) {
  applicationToken = other50.applicationToken;
  applicationInfo = other50.applicationInfo;
  __isset = other50.__isset;
  return *this;
}
void ProvisionApplicationResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProvisionApplicationResponse(";
  out << "applicationToken=" << to_string(applicationToken);
  out << ", " << "applicationInfo=" << to_string(applicationInfo);
  out << ")";
}


RegenerateApplicationTokenRequest::~RegenerateApplicationTokenRequest() throw() {
}


void RegenerateApplicationTokenRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void RegenerateApplicationTokenRequest::__set_applicationId(const uuid& val) {
  this->applicationId = val;
}

uint32_t RegenerateApplicationTokenRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RegenerateApplicationTokenRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RegenerateApplicationTokenRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RegenerateApplicationTokenRequest &a, RegenerateApplicationTokenRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationId, b.applicationId);
  swap(a.__isset, b.__isset);
}

RegenerateApplicationTokenRequest::RegenerateApplicationTokenRequest(const RegenerateApplicationTokenRequest& other51) {
  token = other51.token;
  applicationId = other51.applicationId;
  __isset = other51.__isset;
}
RegenerateApplicationTokenRequest& RegenerateApplicationTokenRequest::operator=(const RegenerateApplicationTokenRequest& other52) {
  token = other52.token;
  applicationId = other52.applicationId;
  __isset = other52.__isset;
  return *this;
}
void RegenerateApplicationTokenRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RegenerateApplicationTokenRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ")";
}


RegenerateApplicationTokenResponse::~RegenerateApplicationTokenResponse() throw() {
}


void RegenerateApplicationTokenResponse::__set_applicationToken(const ApplicationToken& val) {
  this->applicationToken = val;
}

uint32_t RegenerateApplicationTokenResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->applicationToken.read(iprot);
          this->__isset.applicationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RegenerateApplicationTokenResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RegenerateApplicationTokenResponse");

  xfer += oprot->writeFieldBegin("applicationToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->applicationToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RegenerateApplicationTokenResponse &a, RegenerateApplicationTokenResponse &b) {
  using ::std::swap;
  swap(a.applicationToken, b.applicationToken);
  swap(a.__isset, b.__isset);
}

RegenerateApplicationTokenResponse::RegenerateApplicationTokenResponse(const RegenerateApplicationTokenResponse& other53) {
  applicationToken = other53.applicationToken;
  __isset = other53.__isset;
}
RegenerateApplicationTokenResponse& RegenerateApplicationTokenResponse::operator=(const RegenerateApplicationTokenResponse& other54) {
  applicationToken = other54.applicationToken;
  __isset = other54.__isset;
  return *this;
}
void RegenerateApplicationTokenResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RegenerateApplicationTokenResponse(";
  out << "applicationToken=" << to_string(applicationToken);
  out << ")";
}


RegisterHealthCheckRequest::~RegisterHealthCheckRequest() throw() {
}


void RegisterHealthCheckRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void RegisterHealthCheckRequest::__set_endpoint(const Endpoint& val) {
  this->endpoint = val;
}

uint32_t RegisterHealthCheckRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->endpoint.read(iprot);
          this->__isset.endpoint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RegisterHealthCheckRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RegisterHealthCheckRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endpoint", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->endpoint.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RegisterHealthCheckRequest &a, RegisterHealthCheckRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.endpoint, b.endpoint);
  swap(a.__isset, b.__isset);
}

RegisterHealthCheckRequest::RegisterHealthCheckRequest(const RegisterHealthCheckRequest& other55) {
  token = other55.token;
  endpoint = other55.endpoint;
  __isset = other55.__isset;
}
RegisterHealthCheckRequest& RegisterHealthCheckRequest::operator=(const RegisterHealthCheckRequest& other56) {
  token = other56.token;
  endpoint = other56.endpoint;
  __isset = other56.__isset;
  return *this;
}
void RegisterHealthCheckRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RegisterHealthCheckRequest(";
  out << "token=" << to_string(token);
  out << ", " << "endpoint=" << to_string(endpoint);
  out << ")";
}


RegisterHealthCheckResponse::~RegisterHealthCheckResponse() throw() {
}


void RegisterHealthCheckResponse::__set_message(const std::string& val) {
  this->message = val;
__isset.message = true;
}

void RegisterHealthCheckResponse::__set_healthCheckToken(const std::string& val) {
  this->healthCheckToken = val;
__isset.healthCheckToken = true;
}

uint32_t RegisterHealthCheckResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->healthCheckToken);
          this->__isset.healthCheckToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RegisterHealthCheckResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RegisterHealthCheckResponse");

  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->message);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.healthCheckToken) {
    xfer += oprot->writeFieldBegin("healthCheckToken", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->healthCheckToken);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RegisterHealthCheckResponse &a, RegisterHealthCheckResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.healthCheckToken, b.healthCheckToken);
  swap(a.__isset, b.__isset);
}

RegisterHealthCheckResponse::RegisterHealthCheckResponse(const RegisterHealthCheckResponse& other57) {
  message = other57.message;
  healthCheckToken = other57.healthCheckToken;
  __isset = other57.__isset;
}
RegisterHealthCheckResponse& RegisterHealthCheckResponse::operator=(const RegisterHealthCheckResponse& other58) {
  message = other58.message;
  healthCheckToken = other58.healthCheckToken;
  __isset = other58.__isset;
  return *this;
}
void RegisterHealthCheckResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RegisterHealthCheckResponse(";
  out << "message="; (__isset.message ? (out << to_string(message)) : (out << "<null>"));
  out << ", " << "healthCheckToken="; (__isset.healthCheckToken ? (out << to_string(healthCheckToken)) : (out << "<null>"));
  out << ")";
}


RemoveSavedChannelRequest::~RemoveSavedChannelRequest() throw() {
}


void RemoveSavedChannelRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void RemoveSavedChannelRequest::__set_channel(const AromaChannel& val) {
  this->channel = val;
}

uint32_t RemoveSavedChannelRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->channel.read(iprot);
          this->__isset.channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RemoveSavedChannelRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RemoveSavedChannelRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->channel.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RemoveSavedChannelRequest &a, RemoveSavedChannelRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.channel, b.channel);
  swap(a.__isset, b.__isset);
}

RemoveSavedChannelRequest::RemoveSavedChannelRequest(const RemoveSavedChannelRequest& other59) {
  token = other59.token;
  channel = other59.channel;
  __isset = other59.__isset;
}
RemoveSavedChannelRequest& RemoveSavedChannelRequest::operator=(const RemoveSavedChannelRequest& other60) {
  token = other60.token;
  channel = other60.channel;
  __isset = other60.__isset;
  return *this;
}
void RemoveSavedChannelRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RemoveSavedChannelRequest(";
  out << "token=" << to_string(token);
  out << ", " << "channel=" << to_string(channel);
  out << ")";
}


RemoveSavedChannelResponse::~RemoveSavedChannelResponse() throw() {
}


void RemoveSavedChannelResponse::__set_message(const std::string& val) {
  this->message = val;
}

void RemoveSavedChannelResponse::__set_channel(const AromaChannel& val) {
  this->channel = val;
__isset.channel = true;
}

uint32_t RemoveSavedChannelResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->channel.read(iprot);
          this->__isset.channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RemoveSavedChannelResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RemoveSavedChannelResponse");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.channel) {
    xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->channel.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RemoveSavedChannelResponse &a, RemoveSavedChannelResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.channel, b.channel);
  swap(a.__isset, b.__isset);
}

RemoveSavedChannelResponse::RemoveSavedChannelResponse(const RemoveSavedChannelResponse& other61) {
  message = other61.message;
  channel = other61.channel;
  __isset = other61.__isset;
}
RemoveSavedChannelResponse& RemoveSavedChannelResponse::operator=(const RemoveSavedChannelResponse& other62) {
  message = other62.message;
  channel = other62.channel;
  __isset = other62.__isset;
  return *this;
}
void RemoveSavedChannelResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RemoveSavedChannelResponse(";
  out << "message=" << to_string(message);
  out << ", " << "channel="; (__isset.channel ? (out << to_string(channel)) : (out << "<null>"));
  out << ")";
}


RenewApplicationTokenRequest::~RenewApplicationTokenRequest() throw() {
}


void RenewApplicationTokenRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void RenewApplicationTokenRequest::__set_applicationToken(const ApplicationToken& val) {
  this->applicationToken = val;
}

void RenewApplicationTokenRequest::__set_newLifetime(const  ::tech::aroma::thrift::LengthOfTime& val) {
  this->newLifetime = val;
}

void RenewApplicationTokenRequest::__set_applicationId(const uuid& val) {
  this->applicationId = val;
}

uint32_t RenewApplicationTokenRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->applicationToken.read(iprot);
          this->__isset.applicationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->newLifetime.read(iprot);
          this->__isset.newLifetime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RenewApplicationTokenRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RenewApplicationTokenRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationToken", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->applicationToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("newLifetime", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->newLifetime.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RenewApplicationTokenRequest &a, RenewApplicationTokenRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationToken, b.applicationToken);
  swap(a.newLifetime, b.newLifetime);
  swap(a.applicationId, b.applicationId);
  swap(a.__isset, b.__isset);
}

RenewApplicationTokenRequest::RenewApplicationTokenRequest(const RenewApplicationTokenRequest& other63) {
  token = other63.token;
  applicationToken = other63.applicationToken;
  newLifetime = other63.newLifetime;
  applicationId = other63.applicationId;
  __isset = other63.__isset;
}
RenewApplicationTokenRequest& RenewApplicationTokenRequest::operator=(const RenewApplicationTokenRequest& other64) {
  token = other64.token;
  applicationToken = other64.applicationToken;
  newLifetime = other64.newLifetime;
  applicationId = other64.applicationId;
  __isset = other64.__isset;
  return *this;
}
void RenewApplicationTokenRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RenewApplicationTokenRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationToken=" << to_string(applicationToken);
  out << ", " << "newLifetime=" << to_string(newLifetime);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ")";
}


RenewApplicationTokenResponse::~RenewApplicationTokenResponse() throw() {
}


void RenewApplicationTokenResponse::__set_serviceToken(const ApplicationToken& val) {
  this->serviceToken = val;
}

uint32_t RenewApplicationTokenResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->serviceToken.read(iprot);
          this->__isset.serviceToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RenewApplicationTokenResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RenewApplicationTokenResponse");

  xfer += oprot->writeFieldBegin("serviceToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->serviceToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RenewApplicationTokenResponse &a, RenewApplicationTokenResponse &b) {
  using ::std::swap;
  swap(a.serviceToken, b.serviceToken);
  swap(a.__isset, b.__isset);
}

RenewApplicationTokenResponse::RenewApplicationTokenResponse(const RenewApplicationTokenResponse& other65) {
  serviceToken = other65.serviceToken;
  __isset = other65.__isset;
}
RenewApplicationTokenResponse& RenewApplicationTokenResponse::operator=(const RenewApplicationTokenResponse& other66) {
  serviceToken = other66.serviceToken;
  __isset = other66.__isset;
  return *this;
}
void RenewApplicationTokenResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RenewApplicationTokenResponse(";
  out << "serviceToken=" << to_string(serviceToken);
  out << ")";
}


SignInRequest::~SignInRequest() throw() {
}


void SignInRequest::__set_credentials(const  ::aroma::thrift::authentication::Credentials& val) {
  this->credentials = val;
}

void SignInRequest::__set_emailAddress(const std::string& val) {
  this->emailAddress = val;
}

uint32_t SignInRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->credentials.read(iprot);
          this->__isset.credentials = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->emailAddress);
          this->__isset.emailAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SignInRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SignInRequest");

  xfer += oprot->writeFieldBegin("credentials", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->credentials.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("emailAddress", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->emailAddress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SignInRequest &a, SignInRequest &b) {
  using ::std::swap;
  swap(a.credentials, b.credentials);
  swap(a.emailAddress, b.emailAddress);
  swap(a.__isset, b.__isset);
}

SignInRequest::SignInRequest(const SignInRequest& other67) {
  credentials = other67.credentials;
  emailAddress = other67.emailAddress;
  __isset = other67.__isset;
}
SignInRequest& SignInRequest::operator=(const SignInRequest& other68) {
  credentials = other68.credentials;
  emailAddress = other68.emailAddress;
  __isset = other68.__isset;
  return *this;
}
void SignInRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SignInRequest(";
  out << "credentials=" << to_string(credentials);
  out << ", " << "emailAddress=" << to_string(emailAddress);
  out << ")";
}


SignInResponse::~SignInResponse() throw() {
}


void SignInResponse::__set_userToken(const UserToken& val) {
  this->userToken = val;
}

uint32_t SignInResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->userToken.read(iprot);
          this->__isset.userToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SignInResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SignInResponse");

  xfer += oprot->writeFieldBegin("userToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->userToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SignInResponse &a, SignInResponse &b) {
  using ::std::swap;
  swap(a.userToken, b.userToken);
  swap(a.__isset, b.__isset);
}

SignInResponse::SignInResponse(const SignInResponse& other69) {
  userToken = other69.userToken;
  __isset = other69.__isset;
}
SignInResponse& SignInResponse::operator=(const SignInResponse& other70) {
  userToken = other70.userToken;
  __isset = other70.__isset;
  return *this;
}
void SignInResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SignInResponse(";
  out << "userToken=" << to_string(userToken);
  out << ")";
}


SignUpRequest::~SignUpRequest() throw() {
}


void SignUpRequest::__set_email(const std::string& val) {
  this->email = val;
}

void SignUpRequest::__set_name(const std::string& val) {
  this->name = val;
}

void SignUpRequest::__set_firstName(const std::string& val) {
  this->firstName = val;
}

void SignUpRequest::__set_middleName(const std::string& val) {
  this->middleName = val;
}

void SignUpRequest::__set_lastName(const std::string& val) {
  this->lastName = val;
}

void SignUpRequest::__set_username(const std::string& val) {
  this->username = val;
}

void SignUpRequest::__set_organizationId(const uuid& val) {
  this->organizationId = val;
}

void SignUpRequest::__set_credentials(const  ::aroma::thrift::authentication::Credentials& val) {
  this->credentials = val;
}

void SignUpRequest::__set_mainRole(const  ::tech::aroma::thrift::Role::type val) {
  this->mainRole = val;
}

void SignUpRequest::__set_birthDate(const timestamp val) {
  this->birthDate = val;
__isset.birthDate = true;
}

void SignUpRequest::__set_githubProfile(const std::string& val) {
  this->githubProfile = val;
__isset.githubProfile = true;
}

void SignUpRequest::__set_profileImage(const Image& val) {
  this->profileImage = val;
__isset.profileImage = true;
}

uint32_t SignUpRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->firstName);
          this->__isset.firstName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->middleName);
          this->__isset.middleName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lastName);
          this->__isset.lastName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organizationId);
          this->__isset.organizationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->credentials.read(iprot);
          this->__isset.credentials = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast71;
          xfer += iprot->readI32(ecast71);
          this->mainRole = ( ::tech::aroma::thrift::Role::type)ecast71;
          this->__isset.mainRole = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->birthDate);
          this->__isset.birthDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->githubProfile);
          this->__isset.githubProfile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->profileImage.read(iprot);
          this->__isset.profileImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SignUpRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SignUpRequest");

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("firstName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->firstName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("middleName", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->middleName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastName", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->lastName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("organizationId", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->organizationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("credentials", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->credentials.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mainRole", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32((int32_t)this->mainRole);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.birthDate) {
    xfer += oprot->writeFieldBegin("birthDate", ::apache::thrift::protocol::T_I64, 10);
    xfer += oprot->writeI64(this->birthDate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.githubProfile) {
    xfer += oprot->writeFieldBegin("githubProfile", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->githubProfile);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.profileImage) {
    xfer += oprot->writeFieldBegin("profileImage", ::apache::thrift::protocol::T_STRUCT, 12);
    xfer += this->profileImage.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SignUpRequest &a, SignUpRequest &b) {
  using ::std::swap;
  swap(a.email, b.email);
  swap(a.name, b.name);
  swap(a.firstName, b.firstName);
  swap(a.middleName, b.middleName);
  swap(a.lastName, b.lastName);
  swap(a.username, b.username);
  swap(a.organizationId, b.organizationId);
  swap(a.credentials, b.credentials);
  swap(a.mainRole, b.mainRole);
  swap(a.birthDate, b.birthDate);
  swap(a.githubProfile, b.githubProfile);
  swap(a.profileImage, b.profileImage);
  swap(a.__isset, b.__isset);
}

SignUpRequest::SignUpRequest(const SignUpRequest& other72) {
  email = other72.email;
  name = other72.name;
  firstName = other72.firstName;
  middleName = other72.middleName;
  lastName = other72.lastName;
  username = other72.username;
  organizationId = other72.organizationId;
  credentials = other72.credentials;
  mainRole = other72.mainRole;
  birthDate = other72.birthDate;
  githubProfile = other72.githubProfile;
  profileImage = other72.profileImage;
  __isset = other72.__isset;
}
SignUpRequest& SignUpRequest::operator=(const SignUpRequest& other73) {
  email = other73.email;
  name = other73.name;
  firstName = other73.firstName;
  middleName = other73.middleName;
  lastName = other73.lastName;
  username = other73.username;
  organizationId = other73.organizationId;
  credentials = other73.credentials;
  mainRole = other73.mainRole;
  birthDate = other73.birthDate;
  githubProfile = other73.githubProfile;
  profileImage = other73.profileImage;
  __isset = other73.__isset;
  return *this;
}
void SignUpRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SignUpRequest(";
  out << "email=" << to_string(email);
  out << ", " << "name=" << to_string(name);
  out << ", " << "firstName=" << to_string(firstName);
  out << ", " << "middleName=" << to_string(middleName);
  out << ", " << "lastName=" << to_string(lastName);
  out << ", " << "username=" << to_string(username);
  out << ", " << "organizationId=" << to_string(organizationId);
  out << ", " << "credentials=" << to_string(credentials);
  out << ", " << "mainRole=" << to_string(mainRole);
  out << ", " << "birthDate="; (__isset.birthDate ? (out << to_string(birthDate)) : (out << "<null>"));
  out << ", " << "githubProfile="; (__isset.githubProfile ? (out << to_string(githubProfile)) : (out << "<null>"));
  out << ", " << "profileImage="; (__isset.profileImage ? (out << to_string(profileImage)) : (out << "<null>"));
  out << ")";
}


SignUpResponse::~SignUpResponse() throw() {
}


void SignUpResponse::__set_userToken(const UserToken& val) {
  this->userToken = val;
}

void SignUpResponse::__set_account(const  ::aroma::thrift::authentication::AromaAccount& val) {
  this->account = val;
}

void SignUpResponse::__set_userId(const uuid& val) {
  this->userId = val;
}

uint32_t SignUpResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->userToken.read(iprot);
          this->__isset.userToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->account.read(iprot);
          this->__isset.account = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userId);
          this->__isset.userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SignUpResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SignUpResponse");

  xfer += oprot->writeFieldBegin("userToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->userToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("account", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->account.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->userId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SignUpResponse &a, SignUpResponse &b) {
  using ::std::swap;
  swap(a.userToken, b.userToken);
  swap(a.account, b.account);
  swap(a.userId, b.userId);
  swap(a.__isset, b.__isset);
}

SignUpResponse::SignUpResponse(const SignUpResponse& other74) {
  userToken = other74.userToken;
  account = other74.account;
  userId = other74.userId;
  __isset = other74.__isset;
}
SignUpResponse& SignUpResponse::operator=(const SignUpResponse& other75) {
  userToken = other75.userToken;
  account = other75.account;
  userId = other75.userId;
  __isset = other75.__isset;
  return *this;
}
void SignUpResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SignUpResponse(";
  out << "userToken=" << to_string(userToken);
  out << ", " << "account=" << to_string(account);
  out << ", " << "userId=" << to_string(userId);
  out << ")";
}


FollowApplicationRequest::~FollowApplicationRequest() throw() {
}


void FollowApplicationRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void FollowApplicationRequest::__set_applicationId(const uuid& val) {
  this->applicationId = val;
}

void FollowApplicationRequest::__set_organizationId(const uuid& val) {
  this->organizationId = val;
__isset.organizationId = true;
}

uint32_t FollowApplicationRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organizationId);
          this->__isset.organizationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FollowApplicationRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FollowApplicationRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.organizationId) {
    xfer += oprot->writeFieldBegin("organizationId", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->organizationId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FollowApplicationRequest &a, FollowApplicationRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationId, b.applicationId);
  swap(a.organizationId, b.organizationId);
  swap(a.__isset, b.__isset);
}

FollowApplicationRequest::FollowApplicationRequest(const FollowApplicationRequest& other76) {
  token = other76.token;
  applicationId = other76.applicationId;
  organizationId = other76.organizationId;
  __isset = other76.__isset;
}
FollowApplicationRequest& FollowApplicationRequest::operator=(const FollowApplicationRequest& other77) {
  token = other77.token;
  applicationId = other77.applicationId;
  organizationId = other77.organizationId;
  __isset = other77.__isset;
  return *this;
}
void FollowApplicationRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FollowApplicationRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ", " << "organizationId="; (__isset.organizationId ? (out << to_string(organizationId)) : (out << "<null>"));
  out << ")";
}


FollowApplicationResponse::~FollowApplicationResponse() throw() {
}


void FollowApplicationResponse::__set_message(const std::string& val) {
  this->message = val;
__isset.message = true;
}

uint32_t FollowApplicationResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FollowApplicationResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FollowApplicationResponse");

  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->message);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FollowApplicationResponse &a, FollowApplicationResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

FollowApplicationResponse::FollowApplicationResponse(const FollowApplicationResponse& other78) {
  message = other78.message;
  __isset = other78.__isset;
}
FollowApplicationResponse& FollowApplicationResponse::operator=(const FollowApplicationResponse& other79) {
  message = other79.message;
  __isset = other79.__isset;
  return *this;
}
void FollowApplicationResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FollowApplicationResponse(";
  out << "message="; (__isset.message ? (out << to_string(message)) : (out << "<null>"));
  out << ")";
}


UnfollowApplicationRequest::~UnfollowApplicationRequest() throw() {
}


void UnfollowApplicationRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void UnfollowApplicationRequest::__set_applicationId(const uuid& val) {
  this->applicationId = val;
}

void UnfollowApplicationRequest::__set_organizationId(const uuid& val) {
  this->organizationId = val;
__isset.organizationId = true;
}

uint32_t UnfollowApplicationRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organizationId);
          this->__isset.organizationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UnfollowApplicationRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UnfollowApplicationRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.organizationId) {
    xfer += oprot->writeFieldBegin("organizationId", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->organizationId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UnfollowApplicationRequest &a, UnfollowApplicationRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationId, b.applicationId);
  swap(a.organizationId, b.organizationId);
  swap(a.__isset, b.__isset);
}

UnfollowApplicationRequest::UnfollowApplicationRequest(const UnfollowApplicationRequest& other80) {
  token = other80.token;
  applicationId = other80.applicationId;
  organizationId = other80.organizationId;
  __isset = other80.__isset;
}
UnfollowApplicationRequest& UnfollowApplicationRequest::operator=(const UnfollowApplicationRequest& other81) {
  token = other81.token;
  applicationId = other81.applicationId;
  organizationId = other81.organizationId;
  __isset = other81.__isset;
  return *this;
}
void UnfollowApplicationRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UnfollowApplicationRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ", " << "organizationId="; (__isset.organizationId ? (out << to_string(organizationId)) : (out << "<null>"));
  out << ")";
}


UnfollowApplicationResponse::~UnfollowApplicationResponse() throw() {
}


void UnfollowApplicationResponse::__set_message(const std::string& val) {
  this->message = val;
__isset.message = true;
}

uint32_t UnfollowApplicationResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UnfollowApplicationResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UnfollowApplicationResponse");

  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->message);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UnfollowApplicationResponse &a, UnfollowApplicationResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

UnfollowApplicationResponse::UnfollowApplicationResponse(const UnfollowApplicationResponse& other82) {
  message = other82.message;
  __isset = other82.__isset;
}
UnfollowApplicationResponse& UnfollowApplicationResponse::operator=(const UnfollowApplicationResponse& other83) {
  message = other83.message;
  __isset = other83.__isset;
  return *this;
}
void UnfollowApplicationResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UnfollowApplicationResponse(";
  out << "message="; (__isset.message ? (out << to_string(message)) : (out << "<null>"));
  out << ")";
}


UpdateApplicationRequest::~UpdateApplicationRequest() throw() {
}


void UpdateApplicationRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void UpdateApplicationRequest::__set_updatedApplication(const Application& val) {
  this->updatedApplication = val;
}

uint32_t UpdateApplicationRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->updatedApplication.read(iprot);
          this->__isset.updatedApplication = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateApplicationRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateApplicationRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("updatedApplication", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->updatedApplication.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateApplicationRequest &a, UpdateApplicationRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.updatedApplication, b.updatedApplication);
  swap(a.__isset, b.__isset);
}

UpdateApplicationRequest::UpdateApplicationRequest(const UpdateApplicationRequest& other84) {
  token = other84.token;
  updatedApplication = other84.updatedApplication;
  __isset = other84.__isset;
}
UpdateApplicationRequest& UpdateApplicationRequest::operator=(const UpdateApplicationRequest& other85) {
  token = other85.token;
  updatedApplication = other85.updatedApplication;
  __isset = other85.__isset;
  return *this;
}
void UpdateApplicationRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateApplicationRequest(";
  out << "token=" << to_string(token);
  out << ", " << "updatedApplication=" << to_string(updatedApplication);
  out << ")";
}


UpdateApplicationResponse::~UpdateApplicationResponse() throw() {
}


void UpdateApplicationResponse::__set_application(const Application& val) {
  this->application = val;
}

uint32_t UpdateApplicationResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->application.read(iprot);
          this->__isset.application = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateApplicationResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateApplicationResponse");

  xfer += oprot->writeFieldBegin("application", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->application.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateApplicationResponse &a, UpdateApplicationResponse &b) {
  using ::std::swap;
  swap(a.application, b.application);
  swap(a.__isset, b.__isset);
}

UpdateApplicationResponse::UpdateApplicationResponse(const UpdateApplicationResponse& other86) {
  application = other86.application;
  __isset = other86.__isset;
}
UpdateApplicationResponse& UpdateApplicationResponse::operator=(const UpdateApplicationResponse& other87) {
  application = other87.application;
  __isset = other87.__isset;
  return *this;
}
void UpdateApplicationResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateApplicationResponse(";
  out << "application=" << to_string(application);
  out << ")";
}


UpdateReactionsRequest::~UpdateReactionsRequest() throw() {
}


void UpdateReactionsRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void UpdateReactionsRequest::__set_forAppId(const uuid& val) {
  this->forAppId = val;
__isset.forAppId = true;
}

void UpdateReactionsRequest::__set_reactions(const std::vector<Reaction> & val) {
  this->reactions = val;
}

uint32_t UpdateReactionsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->forAppId);
          this->__isset.forAppId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->reactions.clear();
            uint32_t _size88;
            ::apache::thrift::protocol::TType _etype91;
            xfer += iprot->readListBegin(_etype91, _size88);
            this->reactions.resize(_size88);
            uint32_t _i92;
            for (_i92 = 0; _i92 < _size88; ++_i92)
            {
              xfer += this->reactions[_i92].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.reactions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateReactionsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateReactionsRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.forAppId) {
    xfer += oprot->writeFieldBegin("forAppId", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->forAppId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("reactions", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->reactions.size()));
    std::vector<Reaction> ::const_iterator _iter93;
    for (_iter93 = this->reactions.begin(); _iter93 != this->reactions.end(); ++_iter93)
    {
      xfer += (*_iter93).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateReactionsRequest &a, UpdateReactionsRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.forAppId, b.forAppId);
  swap(a.reactions, b.reactions);
  swap(a.__isset, b.__isset);
}

UpdateReactionsRequest::UpdateReactionsRequest(const UpdateReactionsRequest& other94) {
  token = other94.token;
  forAppId = other94.forAppId;
  reactions = other94.reactions;
  __isset = other94.__isset;
}
UpdateReactionsRequest& UpdateReactionsRequest::operator=(const UpdateReactionsRequest& other95) {
  token = other95.token;
  forAppId = other95.forAppId;
  reactions = other95.reactions;
  __isset = other95.__isset;
  return *this;
}
void UpdateReactionsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateReactionsRequest(";
  out << "token=" << to_string(token);
  out << ", " << "forAppId="; (__isset.forAppId ? (out << to_string(forAppId)) : (out << "<null>"));
  out << ", " << "reactions=" << to_string(reactions);
  out << ")";
}


UpdateReactionsResponse::~UpdateReactionsResponse() throw() {
}


void UpdateReactionsResponse::__set_reactions(const std::vector<Reaction> & val) {
  this->reactions = val;
__isset.reactions = true;
}

uint32_t UpdateReactionsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->reactions.clear();
            uint32_t _size96;
            ::apache::thrift::protocol::TType _etype99;
            xfer += iprot->readListBegin(_etype99, _size96);
            this->reactions.resize(_size96);
            uint32_t _i100;
            for (_i100 = 0; _i100 < _size96; ++_i100)
            {
              xfer += this->reactions[_i100].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.reactions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateReactionsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateReactionsResponse");

  if (this->__isset.reactions) {
    xfer += oprot->writeFieldBegin("reactions", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->reactions.size()));
      std::vector<Reaction> ::const_iterator _iter101;
      for (_iter101 = this->reactions.begin(); _iter101 != this->reactions.end(); ++_iter101)
      {
        xfer += (*_iter101).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateReactionsResponse &a, UpdateReactionsResponse &b) {
  using ::std::swap;
  swap(a.reactions, b.reactions);
  swap(a.__isset, b.__isset);
}

UpdateReactionsResponse::UpdateReactionsResponse(const UpdateReactionsResponse& other102) {
  reactions = other102.reactions;
  __isset = other102.__isset;
}
UpdateReactionsResponse& UpdateReactionsResponse::operator=(const UpdateReactionsResponse& other103) {
  reactions = other103.reactions;
  __isset = other103.__isset;
  return *this;
}
void UpdateReactionsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateReactionsResponse(";
  out << "reactions="; (__isset.reactions ? (out << to_string(reactions)) : (out << "<null>"));
  out << ")";
}


GetApplicationInfoRequest::~GetApplicationInfoRequest() throw() {
}


void GetApplicationInfoRequest::__set_token(const AuthenticationToken& val) {
  this->token = val;
}

void GetApplicationInfoRequest::__set_applicationId(const uuid& val) {
  this->applicationId = val;
}

void GetApplicationInfoRequest::__set_includeFollowingInfo(const bool val) {
  this->includeFollowingInfo = val;
__isset.includeFollowingInfo = true;
}

uint32_t GetApplicationInfoRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->includeFollowingInfo);
          this->__isset.includeFollowingInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetApplicationInfoRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetApplicationInfoRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.includeFollowingInfo) {
    xfer += oprot->writeFieldBegin("includeFollowingInfo", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->includeFollowingInfo);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetApplicationInfoRequest &a, GetApplicationInfoRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationId, b.applicationId);
  swap(a.includeFollowingInfo, b.includeFollowingInfo);
  swap(a.__isset, b.__isset);
}

GetApplicationInfoRequest::GetApplicationInfoRequest(const GetApplicationInfoRequest& other104) {
  token = other104.token;
  applicationId = other104.applicationId;
  includeFollowingInfo = other104.includeFollowingInfo;
  __isset = other104.__isset;
}
GetApplicationInfoRequest& GetApplicationInfoRequest::operator=(const GetApplicationInfoRequest& other105) {
  token = other105.token;
  applicationId = other105.applicationId;
  includeFollowingInfo = other105.includeFollowingInfo;
  __isset = other105.__isset;
  return *this;
}
void GetApplicationInfoRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetApplicationInfoRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ", " << "includeFollowingInfo="; (__isset.includeFollowingInfo ? (out << to_string(includeFollowingInfo)) : (out << "<null>"));
  out << ")";
}


GetApplicationInfoResponse::~GetApplicationInfoResponse() throw() {
}


void GetApplicationInfoResponse::__set_applicationInfo(const Application& val) {
  this->applicationInfo = val;
}

uint32_t GetApplicationInfoResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->applicationInfo.read(iprot);
          this->__isset.applicationInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetApplicationInfoResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetApplicationInfoResponse");

  xfer += oprot->writeFieldBegin("applicationInfo", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->applicationInfo.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetApplicationInfoResponse &a, GetApplicationInfoResponse &b) {
  using ::std::swap;
  swap(a.applicationInfo, b.applicationInfo);
  swap(a.__isset, b.__isset);
}

GetApplicationInfoResponse::GetApplicationInfoResponse(const GetApplicationInfoResponse& other106) {
  applicationInfo = other106.applicationInfo;
  __isset = other106.__isset;
}
GetApplicationInfoResponse& GetApplicationInfoResponse::operator=(const GetApplicationInfoResponse& other107) {
  applicationInfo = other107.applicationInfo;
  __isset = other107.__isset;
  return *this;
}
void GetApplicationInfoResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetApplicationInfoResponse(";
  out << "applicationInfo=" << to_string(applicationInfo);
  out << ")";
}


GetBuzzRequest::~GetBuzzRequest() throw() {
}


void GetBuzzRequest::__set_token(const UserToken& val) {
  this->token = val;
}

uint32_t GetBuzzRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetBuzzRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetBuzzRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetBuzzRequest &a, GetBuzzRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.__isset, b.__isset);
}

GetBuzzRequest::GetBuzzRequest(const GetBuzzRequest& other108) {
  token = other108.token;
  __isset = other108.__isset;
}
GetBuzzRequest& GetBuzzRequest::operator=(const GetBuzzRequest& other109) {
  token = other109.token;
  __isset = other109.__isset;
  return *this;
}
void GetBuzzRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetBuzzRequest(";
  out << "token=" << to_string(token);
  out << ")";
}


GetBuzzResponse::~GetBuzzResponse() throw() {
}


void GetBuzzResponse::__set_freshUsers(const std::vector<User> & val) {
  this->freshUsers = val;
}

void GetBuzzResponse::__set_freshApplications(const std::vector<Application> & val) {
  this->freshApplications = val;
}

void GetBuzzResponse::__set_failedHealthChecks(const std::vector<HealthCheckFailed> & val) {
  this->failedHealthChecks = val;
}

void GetBuzzResponse::__set_generalEvents(const std::vector< ::aroma::thrift::events::Event> & val) {
  this->generalEvents = val;
}

uint32_t GetBuzzResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->freshUsers.clear();
            uint32_t _size110;
            ::apache::thrift::protocol::TType _etype113;
            xfer += iprot->readListBegin(_etype113, _size110);
            this->freshUsers.resize(_size110);
            uint32_t _i114;
            for (_i114 = 0; _i114 < _size110; ++_i114)
            {
              xfer += this->freshUsers[_i114].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.freshUsers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->freshApplications.clear();
            uint32_t _size115;
            ::apache::thrift::protocol::TType _etype118;
            xfer += iprot->readListBegin(_etype118, _size115);
            this->freshApplications.resize(_size115);
            uint32_t _i119;
            for (_i119 = 0; _i119 < _size115; ++_i119)
            {
              xfer += this->freshApplications[_i119].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.freshApplications = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->failedHealthChecks.clear();
            uint32_t _size120;
            ::apache::thrift::protocol::TType _etype123;
            xfer += iprot->readListBegin(_etype123, _size120);
            this->failedHealthChecks.resize(_size120);
            uint32_t _i124;
            for (_i124 = 0; _i124 < _size120; ++_i124)
            {
              xfer += this->failedHealthChecks[_i124].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.failedHealthChecks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->generalEvents.clear();
            uint32_t _size125;
            ::apache::thrift::protocol::TType _etype128;
            xfer += iprot->readListBegin(_etype128, _size125);
            this->generalEvents.resize(_size125);
            uint32_t _i129;
            for (_i129 = 0; _i129 < _size125; ++_i129)
            {
              xfer += this->generalEvents[_i129].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.generalEvents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetBuzzResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetBuzzResponse");

  xfer += oprot->writeFieldBegin("freshUsers", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->freshUsers.size()));
    std::vector<User> ::const_iterator _iter130;
    for (_iter130 = this->freshUsers.begin(); _iter130 != this->freshUsers.end(); ++_iter130)
    {
      xfer += (*_iter130).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("freshApplications", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->freshApplications.size()));
    std::vector<Application> ::const_iterator _iter131;
    for (_iter131 = this->freshApplications.begin(); _iter131 != this->freshApplications.end(); ++_iter131)
    {
      xfer += (*_iter131).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("failedHealthChecks", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->failedHealthChecks.size()));
    std::vector<HealthCheckFailed> ::const_iterator _iter132;
    for (_iter132 = this->failedHealthChecks.begin(); _iter132 != this->failedHealthChecks.end(); ++_iter132)
    {
      xfer += (*_iter132).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("generalEvents", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->generalEvents.size()));
    std::vector< ::aroma::thrift::events::Event> ::const_iterator _iter133;
    for (_iter133 = this->generalEvents.begin(); _iter133 != this->generalEvents.end(); ++_iter133)
    {
      xfer += (*_iter133).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetBuzzResponse &a, GetBuzzResponse &b) {
  using ::std::swap;
  swap(a.freshUsers, b.freshUsers);
  swap(a.freshApplications, b.freshApplications);
  swap(a.failedHealthChecks, b.failedHealthChecks);
  swap(a.generalEvents, b.generalEvents);
  swap(a.__isset, b.__isset);
}

GetBuzzResponse::GetBuzzResponse(const GetBuzzResponse& other134) {
  freshUsers = other134.freshUsers;
  freshApplications = other134.freshApplications;
  failedHealthChecks = other134.failedHealthChecks;
  generalEvents = other134.generalEvents;
  __isset = other134.__isset;
}
GetBuzzResponse& GetBuzzResponse::operator=(const GetBuzzResponse& other135) {
  freshUsers = other135.freshUsers;
  freshApplications = other135.freshApplications;
  failedHealthChecks = other135.failedHealthChecks;
  generalEvents = other135.generalEvents;
  __isset = other135.__isset;
  return *this;
}
void GetBuzzResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetBuzzResponse(";
  out << "freshUsers=" << to_string(freshUsers);
  out << ", " << "freshApplications=" << to_string(freshApplications);
  out << ", " << "failedHealthChecks=" << to_string(failedHealthChecks);
  out << ", " << "generalEvents=" << to_string(generalEvents);
  out << ")";
}


GetDashboardRequest::~GetDashboardRequest() throw() {
}


void GetDashboardRequest::__set_token(const UserToken& val) {
  this->token = val;
}

uint32_t GetDashboardRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetDashboardRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetDashboardRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetDashboardRequest &a, GetDashboardRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.__isset, b.__isset);
}

GetDashboardRequest::GetDashboardRequest(const GetDashboardRequest& other136) {
  token = other136.token;
  __isset = other136.__isset;
}
GetDashboardRequest& GetDashboardRequest::operator=(const GetDashboardRequest& other137) {
  token = other137.token;
  __isset = other137.__isset;
  return *this;
}
void GetDashboardRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetDashboardRequest(";
  out << "token=" << to_string(token);
  out << ")";
}


GetDashboardResponse::~GetDashboardResponse() throw() {
}


void GetDashboardResponse::__set_unreadMessageCount(const int val) {
  this->unreadMessageCount = val;
}

void GetDashboardResponse::__set_totalMessagesLastHour(const int val) {
  this->totalMessagesLastHour = val;
}

void GetDashboardResponse::__set_totalMessagesLast24hrs(const int val) {
  this->totalMessagesLast24hrs = val;
}

void GetDashboardResponse::__set_recentMessages(const std::vector< ::tech::aroma::thrift::Message> & val) {
  this->recentMessages = val;
}

void GetDashboardResponse::__set_numberOfLowUrgencyMessages(const int val) {
  this->numberOfLowUrgencyMessages = val;
}

void GetDashboardResponse::__set_numberOfMediumUrgencyMessages(const int val) {
  this->numberOfMediumUrgencyMessages = val;
}

void GetDashboardResponse::__set_numberOfHighUrgencyMessages(const int val) {
  this->numberOfHighUrgencyMessages = val;
}

uint32_t GetDashboardResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unreadMessageCount);
          this->__isset.unreadMessageCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalMessagesLastHour);
          this->__isset.totalMessagesLastHour = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalMessagesLast24hrs);
          this->__isset.totalMessagesLast24hrs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->recentMessages.clear();
            uint32_t _size138;
            ::apache::thrift::protocol::TType _etype141;
            xfer += iprot->readListBegin(_etype141, _size138);
            this->recentMessages.resize(_size138);
            uint32_t _i142;
            for (_i142 = 0; _i142 < _size138; ++_i142)
            {
              xfer += this->recentMessages[_i142].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.recentMessages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numberOfLowUrgencyMessages);
          this->__isset.numberOfLowUrgencyMessages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numberOfMediumUrgencyMessages);
          this->__isset.numberOfMediumUrgencyMessages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numberOfHighUrgencyMessages);
          this->__isset.numberOfHighUrgencyMessages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetDashboardResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetDashboardResponse");

  xfer += oprot->writeFieldBegin("unreadMessageCount", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->unreadMessageCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalMessagesLastHour", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->totalMessagesLastHour);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalMessagesLast24hrs", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->totalMessagesLast24hrs);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recentMessages", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->recentMessages.size()));
    std::vector< ::tech::aroma::thrift::Message> ::const_iterator _iter143;
    for (_iter143 = this->recentMessages.begin(); _iter143 != this->recentMessages.end(); ++_iter143)
    {
      xfer += (*_iter143).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numberOfLowUrgencyMessages", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->numberOfLowUrgencyMessages);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numberOfMediumUrgencyMessages", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->numberOfMediumUrgencyMessages);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numberOfHighUrgencyMessages", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->numberOfHighUrgencyMessages);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetDashboardResponse &a, GetDashboardResponse &b) {
  using ::std::swap;
  swap(a.unreadMessageCount, b.unreadMessageCount);
  swap(a.totalMessagesLastHour, b.totalMessagesLastHour);
  swap(a.totalMessagesLast24hrs, b.totalMessagesLast24hrs);
  swap(a.recentMessages, b.recentMessages);
  swap(a.numberOfLowUrgencyMessages, b.numberOfLowUrgencyMessages);
  swap(a.numberOfMediumUrgencyMessages, b.numberOfMediumUrgencyMessages);
  swap(a.numberOfHighUrgencyMessages, b.numberOfHighUrgencyMessages);
  swap(a.__isset, b.__isset);
}

GetDashboardResponse::GetDashboardResponse(const GetDashboardResponse& other144) {
  unreadMessageCount = other144.unreadMessageCount;
  totalMessagesLastHour = other144.totalMessagesLastHour;
  totalMessagesLast24hrs = other144.totalMessagesLast24hrs;
  recentMessages = other144.recentMessages;
  numberOfLowUrgencyMessages = other144.numberOfLowUrgencyMessages;
  numberOfMediumUrgencyMessages = other144.numberOfMediumUrgencyMessages;
  numberOfHighUrgencyMessages = other144.numberOfHighUrgencyMessages;
  __isset = other144.__isset;
}
GetDashboardResponse& GetDashboardResponse::operator=(const GetDashboardResponse& other145) {
  unreadMessageCount = other145.unreadMessageCount;
  totalMessagesLastHour = other145.totalMessagesLastHour;
  totalMessagesLast24hrs = other145.totalMessagesLast24hrs;
  recentMessages = other145.recentMessages;
  numberOfLowUrgencyMessages = other145.numberOfLowUrgencyMessages;
  numberOfMediumUrgencyMessages = other145.numberOfMediumUrgencyMessages;
  numberOfHighUrgencyMessages = other145.numberOfHighUrgencyMessages;
  __isset = other145.__isset;
  return *this;
}
void GetDashboardResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetDashboardResponse(";
  out << "unreadMessageCount=" << to_string(unreadMessageCount);
  out << ", " << "totalMessagesLastHour=" << to_string(totalMessagesLastHour);
  out << ", " << "totalMessagesLast24hrs=" << to_string(totalMessagesLast24hrs);
  out << ", " << "recentMessages=" << to_string(recentMessages);
  out << ", " << "numberOfLowUrgencyMessages=" << to_string(numberOfLowUrgencyMessages);
  out << ", " << "numberOfMediumUrgencyMessages=" << to_string(numberOfMediumUrgencyMessages);
  out << ", " << "numberOfHighUrgencyMessages=" << to_string(numberOfHighUrgencyMessages);
  out << ")";
}


GetInboxRequest::~GetInboxRequest() throw() {
}


void GetInboxRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void GetInboxRequest::__set_limit(const int val) {
  this->limit = val;
__isset.limit = true;
}

uint32_t GetInboxRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetInboxRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetInboxRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.limit) {
    xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->limit);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetInboxRequest &a, GetInboxRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

GetInboxRequest::GetInboxRequest(const GetInboxRequest& other146) {
  token = other146.token;
  limit = other146.limit;
  __isset = other146.__isset;
}
GetInboxRequest& GetInboxRequest::operator=(const GetInboxRequest& other147) {
  token = other147.token;
  limit = other147.limit;
  __isset = other147.__isset;
  return *this;
}
void GetInboxRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetInboxRequest(";
  out << "token=" << to_string(token);
  out << ", " << "limit="; (__isset.limit ? (out << to_string(limit)) : (out << "<null>"));
  out << ")";
}


GetInboxResponse::~GetInboxResponse() throw() {
}


void GetInboxResponse::__set_messages(const std::vector< ::tech::aroma::thrift::Message> & val) {
  this->messages = val;
}

uint32_t GetInboxResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->messages.clear();
            uint32_t _size148;
            ::apache::thrift::protocol::TType _etype151;
            xfer += iprot->readListBegin(_etype151, _size148);
            this->messages.resize(_size148);
            uint32_t _i152;
            for (_i152 = 0; _i152 < _size148; ++_i152)
            {
              xfer += this->messages[_i152].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.messages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetInboxResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetInboxResponse");

  xfer += oprot->writeFieldBegin("messages", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->messages.size()));
    std::vector< ::tech::aroma::thrift::Message> ::const_iterator _iter153;
    for (_iter153 = this->messages.begin(); _iter153 != this->messages.end(); ++_iter153)
    {
      xfer += (*_iter153).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetInboxResponse &a, GetInboxResponse &b) {
  using ::std::swap;
  swap(a.messages, b.messages);
  swap(a.__isset, b.__isset);
}

GetInboxResponse::GetInboxResponse(const GetInboxResponse& other154) {
  messages = other154.messages;
  __isset = other154.__isset;
}
GetInboxResponse& GetInboxResponse::operator=(const GetInboxResponse& other155) {
  messages = other155.messages;
  __isset = other155.__isset;
  return *this;
}
void GetInboxResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetInboxResponse(";
  out << "messages=" << to_string(messages);
  out << ")";
}


GetApplicationMessagesRequest::~GetApplicationMessagesRequest() throw() {
}


void GetApplicationMessagesRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void GetApplicationMessagesRequest::__set_applicationId(const uuid& val) {
  this->applicationId = val;
}

void GetApplicationMessagesRequest::__set_limit(const int val) {
  this->limit = val;
__isset.limit = true;
}

uint32_t GetApplicationMessagesRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetApplicationMessagesRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetApplicationMessagesRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.limit) {
    xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->limit);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetApplicationMessagesRequest &a, GetApplicationMessagesRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationId, b.applicationId);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

GetApplicationMessagesRequest::GetApplicationMessagesRequest(const GetApplicationMessagesRequest& other156) {
  token = other156.token;
  applicationId = other156.applicationId;
  limit = other156.limit;
  __isset = other156.__isset;
}
GetApplicationMessagesRequest& GetApplicationMessagesRequest::operator=(const GetApplicationMessagesRequest& other157) {
  token = other157.token;
  applicationId = other157.applicationId;
  limit = other157.limit;
  __isset = other157.__isset;
  return *this;
}
void GetApplicationMessagesRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetApplicationMessagesRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ", " << "limit="; (__isset.limit ? (out << to_string(limit)) : (out << "<null>"));
  out << ")";
}


GetApplicationMessagesResponse::~GetApplicationMessagesResponse() throw() {
}


void GetApplicationMessagesResponse::__set_messages(const std::vector< ::tech::aroma::thrift::Message> & val) {
  this->messages = val;
}

void GetApplicationMessagesResponse::__set_totalMessagesMatching(const int val) {
  this->totalMessagesMatching = val;
__isset.totalMessagesMatching = true;
}

uint32_t GetApplicationMessagesResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->messages.clear();
            uint32_t _size158;
            ::apache::thrift::protocol::TType _etype161;
            xfer += iprot->readListBegin(_etype161, _size158);
            this->messages.resize(_size158);
            uint32_t _i162;
            for (_i162 = 0; _i162 < _size158; ++_i162)
            {
              xfer += this->messages[_i162].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.messages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalMessagesMatching);
          this->__isset.totalMessagesMatching = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetApplicationMessagesResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetApplicationMessagesResponse");

  xfer += oprot->writeFieldBegin("messages", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->messages.size()));
    std::vector< ::tech::aroma::thrift::Message> ::const_iterator _iter163;
    for (_iter163 = this->messages.begin(); _iter163 != this->messages.end(); ++_iter163)
    {
      xfer += (*_iter163).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.totalMessagesMatching) {
    xfer += oprot->writeFieldBegin("totalMessagesMatching", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->totalMessagesMatching);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetApplicationMessagesResponse &a, GetApplicationMessagesResponse &b) {
  using ::std::swap;
  swap(a.messages, b.messages);
  swap(a.totalMessagesMatching, b.totalMessagesMatching);
  swap(a.__isset, b.__isset);
}

GetApplicationMessagesResponse::GetApplicationMessagesResponse(const GetApplicationMessagesResponse& other164) {
  messages = other164.messages;
  totalMessagesMatching = other164.totalMessagesMatching;
  __isset = other164.__isset;
}
GetApplicationMessagesResponse& GetApplicationMessagesResponse::operator=(const GetApplicationMessagesResponse& other165) {
  messages = other165.messages;
  totalMessagesMatching = other165.totalMessagesMatching;
  __isset = other165.__isset;
  return *this;
}
void GetApplicationMessagesResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetApplicationMessagesResponse(";
  out << "messages=" << to_string(messages);
  out << ", " << "totalMessagesMatching="; (__isset.totalMessagesMatching ? (out << to_string(totalMessagesMatching)) : (out << "<null>"));
  out << ")";
}


GetFullMessageRequest::~GetFullMessageRequest() throw() {
}


void GetFullMessageRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void GetFullMessageRequest::__set_messageId(const uuid& val) {
  this->messageId = val;
}

void GetFullMessageRequest::__set_applicationId(const uuid& val) {
  this->applicationId = val;
}

uint32_t GetFullMessageRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetFullMessageRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetFullMessageRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->messageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetFullMessageRequest &a, GetFullMessageRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.messageId, b.messageId);
  swap(a.applicationId, b.applicationId);
  swap(a.__isset, b.__isset);
}

GetFullMessageRequest::GetFullMessageRequest(const GetFullMessageRequest& other166) {
  token = other166.token;
  messageId = other166.messageId;
  applicationId = other166.applicationId;
  __isset = other166.__isset;
}
GetFullMessageRequest& GetFullMessageRequest::operator=(const GetFullMessageRequest& other167) {
  token = other167.token;
  messageId = other167.messageId;
  applicationId = other167.applicationId;
  __isset = other167.__isset;
  return *this;
}
void GetFullMessageRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetFullMessageRequest(";
  out << "token=" << to_string(token);
  out << ", " << "messageId=" << to_string(messageId);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ")";
}


GetFullMessageResponse::~GetFullMessageResponse() throw() {
}


void GetFullMessageResponse::__set_fullMessage(const  ::tech::aroma::thrift::Message& val) {
  this->fullMessage = val;
}

uint32_t GetFullMessageResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->fullMessage.read(iprot);
          this->__isset.fullMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetFullMessageResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetFullMessageResponse");

  xfer += oprot->writeFieldBegin("fullMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->fullMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetFullMessageResponse &a, GetFullMessageResponse &b) {
  using ::std::swap;
  swap(a.fullMessage, b.fullMessage);
  swap(a.__isset, b.__isset);
}

GetFullMessageResponse::GetFullMessageResponse(const GetFullMessageResponse& other168) {
  fullMessage = other168.fullMessage;
  __isset = other168.__isset;
}
GetFullMessageResponse& GetFullMessageResponse::operator=(const GetFullMessageResponse& other169) {
  fullMessage = other169.fullMessage;
  __isset = other169.__isset;
  return *this;
}
void GetFullMessageResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetFullMessageResponse(";
  out << "fullMessage=" << to_string(fullMessage);
  out << ")";
}


GetMediaRequest::~GetMediaRequest() throw() {
}


void GetMediaRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void GetMediaRequest::__set_mediaId(const uuid& val) {
  this->mediaId = val;
}

void GetMediaRequest::__set_desiredThumbnailSize(const  ::tech::aroma::thrift::Dimension& val) {
  this->desiredThumbnailSize = val;
__isset.desiredThumbnailSize = true;
}

uint32_t GetMediaRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mediaId);
          this->__isset.mediaId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->desiredThumbnailSize.read(iprot);
          this->__isset.desiredThumbnailSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetMediaRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetMediaRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mediaId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->mediaId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.desiredThumbnailSize) {
    xfer += oprot->writeFieldBegin("desiredThumbnailSize", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->desiredThumbnailSize.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetMediaRequest &a, GetMediaRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.mediaId, b.mediaId);
  swap(a.desiredThumbnailSize, b.desiredThumbnailSize);
  swap(a.__isset, b.__isset);
}

GetMediaRequest::GetMediaRequest(const GetMediaRequest& other170) {
  token = other170.token;
  mediaId = other170.mediaId;
  desiredThumbnailSize = other170.desiredThumbnailSize;
  __isset = other170.__isset;
}
GetMediaRequest& GetMediaRequest::operator=(const GetMediaRequest& other171) {
  token = other171.token;
  mediaId = other171.mediaId;
  desiredThumbnailSize = other171.desiredThumbnailSize;
  __isset = other171.__isset;
  return *this;
}
void GetMediaRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetMediaRequest(";
  out << "token=" << to_string(token);
  out << ", " << "mediaId=" << to_string(mediaId);
  out << ", " << "desiredThumbnailSize="; (__isset.desiredThumbnailSize ? (out << to_string(desiredThumbnailSize)) : (out << "<null>"));
  out << ")";
}


GetMediaResponse::~GetMediaResponse() throw() {
}


void GetMediaResponse::__set_image(const  ::tech::aroma::thrift::Image& val) {
  this->image = val;
}

uint32_t GetMediaResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->image.read(iprot);
          this->__isset.image = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetMediaResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetMediaResponse");

  xfer += oprot->writeFieldBegin("image", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->image.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetMediaResponse &a, GetMediaResponse &b) {
  using ::std::swap;
  swap(a.image, b.image);
  swap(a.__isset, b.__isset);
}

GetMediaResponse::GetMediaResponse(const GetMediaResponse& other172) {
  image = other172.image;
  __isset = other172.__isset;
}
GetMediaResponse& GetMediaResponse::operator=(const GetMediaResponse& other173) {
  image = other173.image;
  __isset = other173.__isset;
  return *this;
}
void GetMediaResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetMediaResponse(";
  out << "image=" << to_string(image);
  out << ")";
}


GetApplicationsFollowedByRequest::~GetApplicationsFollowedByRequest() throw() {
}


void GetApplicationsFollowedByRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void GetApplicationsFollowedByRequest::__set_userId(const uuid& val) {
  this->userId = val;
__isset.userId = true;
}

uint32_t GetApplicationsFollowedByRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userId);
          this->__isset.userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetApplicationsFollowedByRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetApplicationsFollowedByRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.userId) {
    xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->userId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetApplicationsFollowedByRequest &a, GetApplicationsFollowedByRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.userId, b.userId);
  swap(a.__isset, b.__isset);
}

GetApplicationsFollowedByRequest::GetApplicationsFollowedByRequest(const GetApplicationsFollowedByRequest& other174) {
  token = other174.token;
  userId = other174.userId;
  __isset = other174.__isset;
}
GetApplicationsFollowedByRequest& GetApplicationsFollowedByRequest::operator=(const GetApplicationsFollowedByRequest& other175) {
  token = other175.token;
  userId = other175.userId;
  __isset = other175.__isset;
  return *this;
}
void GetApplicationsFollowedByRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetApplicationsFollowedByRequest(";
  out << "token=" << to_string(token);
  out << ", " << "userId="; (__isset.userId ? (out << to_string(userId)) : (out << "<null>"));
  out << ")";
}


GetApplicationsFollowedByResponse::~GetApplicationsFollowedByResponse() throw() {
}


void GetApplicationsFollowedByResponse::__set_applications(const std::vector<Application> & val) {
  this->applications = val;
}

uint32_t GetApplicationsFollowedByResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->applications.clear();
            uint32_t _size176;
            ::apache::thrift::protocol::TType _etype179;
            xfer += iprot->readListBegin(_etype179, _size176);
            this->applications.resize(_size176);
            uint32_t _i180;
            for (_i180 = 0; _i180 < _size176; ++_i180)
            {
              xfer += this->applications[_i180].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.applications = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetApplicationsFollowedByResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetApplicationsFollowedByResponse");

  xfer += oprot->writeFieldBegin("applications", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->applications.size()));
    std::vector<Application> ::const_iterator _iter181;
    for (_iter181 = this->applications.begin(); _iter181 != this->applications.end(); ++_iter181)
    {
      xfer += (*_iter181).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetApplicationsFollowedByResponse &a, GetApplicationsFollowedByResponse &b) {
  using ::std::swap;
  swap(a.applications, b.applications);
  swap(a.__isset, b.__isset);
}

GetApplicationsFollowedByResponse::GetApplicationsFollowedByResponse(const GetApplicationsFollowedByResponse& other182) {
  applications = other182.applications;
  __isset = other182.__isset;
}
GetApplicationsFollowedByResponse& GetApplicationsFollowedByResponse::operator=(const GetApplicationsFollowedByResponse& other183) {
  applications = other183.applications;
  __isset = other183.__isset;
  return *this;
}
void GetApplicationsFollowedByResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetApplicationsFollowedByResponse(";
  out << "applications=" << to_string(applications);
  out << ")";
}


GetApplicationsOwnedByRequest::~GetApplicationsOwnedByRequest() throw() {
}


void GetApplicationsOwnedByRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void GetApplicationsOwnedByRequest::__set_userId(const uuid& val) {
  this->userId = val;
__isset.userId = true;
}

uint32_t GetApplicationsOwnedByRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userId);
          this->__isset.userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetApplicationsOwnedByRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetApplicationsOwnedByRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.userId) {
    xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->userId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetApplicationsOwnedByRequest &a, GetApplicationsOwnedByRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.userId, b.userId);
  swap(a.__isset, b.__isset);
}

GetApplicationsOwnedByRequest::GetApplicationsOwnedByRequest(const GetApplicationsOwnedByRequest& other184) {
  token = other184.token;
  userId = other184.userId;
  __isset = other184.__isset;
}
GetApplicationsOwnedByRequest& GetApplicationsOwnedByRequest::operator=(const GetApplicationsOwnedByRequest& other185) {
  token = other185.token;
  userId = other185.userId;
  __isset = other185.__isset;
  return *this;
}
void GetApplicationsOwnedByRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetApplicationsOwnedByRequest(";
  out << "token=" << to_string(token);
  out << ", " << "userId="; (__isset.userId ? (out << to_string(userId)) : (out << "<null>"));
  out << ")";
}


GetApplicationsOwnedByResponse::~GetApplicationsOwnedByResponse() throw() {
}


void GetApplicationsOwnedByResponse::__set_applications(const std::vector<Application> & val) {
  this->applications = val;
}

uint32_t GetApplicationsOwnedByResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->applications.clear();
            uint32_t _size186;
            ::apache::thrift::protocol::TType _etype189;
            xfer += iprot->readListBegin(_etype189, _size186);
            this->applications.resize(_size186);
            uint32_t _i190;
            for (_i190 = 0; _i190 < _size186; ++_i190)
            {
              xfer += this->applications[_i190].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.applications = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetApplicationsOwnedByResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetApplicationsOwnedByResponse");

  xfer += oprot->writeFieldBegin("applications", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->applications.size()));
    std::vector<Application> ::const_iterator _iter191;
    for (_iter191 = this->applications.begin(); _iter191 != this->applications.end(); ++_iter191)
    {
      xfer += (*_iter191).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetApplicationsOwnedByResponse &a, GetApplicationsOwnedByResponse &b) {
  using ::std::swap;
  swap(a.applications, b.applications);
  swap(a.__isset, b.__isset);
}

GetApplicationsOwnedByResponse::GetApplicationsOwnedByResponse(const GetApplicationsOwnedByResponse& other192) {
  applications = other192.applications;
  __isset = other192.__isset;
}
GetApplicationsOwnedByResponse& GetApplicationsOwnedByResponse::operator=(const GetApplicationsOwnedByResponse& other193) {
  applications = other193.applications;
  __isset = other193.__isset;
  return *this;
}
void GetApplicationsOwnedByResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetApplicationsOwnedByResponse(";
  out << "applications=" << to_string(applications);
  out << ")";
}


GetActivityRequest::~GetActivityRequest() throw() {
}


void GetActivityRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void GetActivityRequest::__set_limit(const int val) {
  this->limit = val;
__isset.limit = true;
}

uint32_t GetActivityRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetActivityRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetActivityRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.limit) {
    xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->limit);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetActivityRequest &a, GetActivityRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

GetActivityRequest::GetActivityRequest(const GetActivityRequest& other194) {
  token = other194.token;
  limit = other194.limit;
  __isset = other194.__isset;
}
GetActivityRequest& GetActivityRequest::operator=(const GetActivityRequest& other195) {
  token = other195.token;
  limit = other195.limit;
  __isset = other195.__isset;
  return *this;
}
void GetActivityRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetActivityRequest(";
  out << "token=" << to_string(token);
  out << ", " << "limit="; (__isset.limit ? (out << to_string(limit)) : (out << "<null>"));
  out << ")";
}


GetActivityResponse::~GetActivityResponse() throw() {
}


void GetActivityResponse::__set_events(const std::vector< ::aroma::thrift::events::Event> & val) {
  this->events = val;
}

uint32_t GetActivityResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->events.clear();
            uint32_t _size196;
            ::apache::thrift::protocol::TType _etype199;
            xfer += iprot->readListBegin(_etype199, _size196);
            this->events.resize(_size196);
            uint32_t _i200;
            for (_i200 = 0; _i200 < _size196; ++_i200)
            {
              xfer += this->events[_i200].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.events = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetActivityResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetActivityResponse");

  xfer += oprot->writeFieldBegin("events", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->events.size()));
    std::vector< ::aroma::thrift::events::Event> ::const_iterator _iter201;
    for (_iter201 = this->events.begin(); _iter201 != this->events.end(); ++_iter201)
    {
      xfer += (*_iter201).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetActivityResponse &a, GetActivityResponse &b) {
  using ::std::swap;
  swap(a.events, b.events);
  swap(a.__isset, b.__isset);
}

GetActivityResponse::GetActivityResponse(const GetActivityResponse& other202) {
  events = other202.events;
  __isset = other202.__isset;
}
GetActivityResponse& GetActivityResponse::operator=(const GetActivityResponse& other203) {
  events = other203.events;
  __isset = other203.__isset;
  return *this;
}
void GetActivityResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetActivityResponse(";
  out << "events=" << to_string(events);
  out << ")";
}


GetReactionsRequest::~GetReactionsRequest() throw() {
}


void GetReactionsRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void GetReactionsRequest::__set_forAppId(const uuid& val) {
  this->forAppId = val;
__isset.forAppId = true;
}

uint32_t GetReactionsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->forAppId);
          this->__isset.forAppId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetReactionsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetReactionsRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.forAppId) {
    xfer += oprot->writeFieldBegin("forAppId", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->forAppId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetReactionsRequest &a, GetReactionsRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.forAppId, b.forAppId);
  swap(a.__isset, b.__isset);
}

GetReactionsRequest::GetReactionsRequest(const GetReactionsRequest& other204) {
  token = other204.token;
  forAppId = other204.forAppId;
  __isset = other204.__isset;
}
GetReactionsRequest& GetReactionsRequest::operator=(const GetReactionsRequest& other205) {
  token = other205.token;
  forAppId = other205.forAppId;
  __isset = other205.__isset;
  return *this;
}
void GetReactionsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetReactionsRequest(";
  out << "token=" << to_string(token);
  out << ", " << "forAppId="; (__isset.forAppId ? (out << to_string(forAppId)) : (out << "<null>"));
  out << ")";
}


GetReactionsResponse::~GetReactionsResponse() throw() {
}


void GetReactionsResponse::__set_reactions(const std::vector<Reaction> & val) {
  this->reactions = val;
}

uint32_t GetReactionsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->reactions.clear();
            uint32_t _size206;
            ::apache::thrift::protocol::TType _etype209;
            xfer += iprot->readListBegin(_etype209, _size206);
            this->reactions.resize(_size206);
            uint32_t _i210;
            for (_i210 = 0; _i210 < _size206; ++_i210)
            {
              xfer += this->reactions[_i210].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.reactions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetReactionsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetReactionsResponse");

  xfer += oprot->writeFieldBegin("reactions", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->reactions.size()));
    std::vector<Reaction> ::const_iterator _iter211;
    for (_iter211 = this->reactions.begin(); _iter211 != this->reactions.end(); ++_iter211)
    {
      xfer += (*_iter211).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetReactionsResponse &a, GetReactionsResponse &b) {
  using ::std::swap;
  swap(a.reactions, b.reactions);
  swap(a.__isset, b.__isset);
}

GetReactionsResponse::GetReactionsResponse(const GetReactionsResponse& other212) {
  reactions = other212.reactions;
  __isset = other212.__isset;
}
GetReactionsResponse& GetReactionsResponse::operator=(const GetReactionsResponse& other213) {
  reactions = other213.reactions;
  __isset = other213.__isset;
  return *this;
}
void GetReactionsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetReactionsResponse(";
  out << "reactions=" << to_string(reactions);
  out << ")";
}


GetServiceAnnouncementsRequest::~GetServiceAnnouncementsRequest() throw() {
}


void GetServiceAnnouncementsRequest::__set_token(const UserToken& val) {
  this->token = val;
}

uint32_t GetServiceAnnouncementsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetServiceAnnouncementsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetServiceAnnouncementsRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetServiceAnnouncementsRequest &a, GetServiceAnnouncementsRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.__isset, b.__isset);
}

GetServiceAnnouncementsRequest::GetServiceAnnouncementsRequest(const GetServiceAnnouncementsRequest& other214) {
  token = other214.token;
  __isset = other214.__isset;
}
GetServiceAnnouncementsRequest& GetServiceAnnouncementsRequest::operator=(const GetServiceAnnouncementsRequest& other215) {
  token = other215.token;
  __isset = other215.__isset;
  return *this;
}
void GetServiceAnnouncementsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetServiceAnnouncementsRequest(";
  out << "token=" << to_string(token);
  out << ")";
}


GetServiceAnnouncementsResponse::~GetServiceAnnouncementsResponse() throw() {
}


void GetServiceAnnouncementsResponse::__set_serviceAnnouncements(const std::vector< ::tech::aroma::thrift::ServiceAnnouncement> & val) {
  this->serviceAnnouncements = val;
__isset.serviceAnnouncements = true;
}

uint32_t GetServiceAnnouncementsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->serviceAnnouncements.clear();
            uint32_t _size216;
            ::apache::thrift::protocol::TType _etype219;
            xfer += iprot->readListBegin(_etype219, _size216);
            this->serviceAnnouncements.resize(_size216);
            uint32_t _i220;
            for (_i220 = 0; _i220 < _size216; ++_i220)
            {
              xfer += this->serviceAnnouncements[_i220].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.serviceAnnouncements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetServiceAnnouncementsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetServiceAnnouncementsResponse");

  if (this->__isset.serviceAnnouncements) {
    xfer += oprot->writeFieldBegin("serviceAnnouncements", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->serviceAnnouncements.size()));
      std::vector< ::tech::aroma::thrift::ServiceAnnouncement> ::const_iterator _iter221;
      for (_iter221 = this->serviceAnnouncements.begin(); _iter221 != this->serviceAnnouncements.end(); ++_iter221)
      {
        xfer += (*_iter221).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetServiceAnnouncementsResponse &a, GetServiceAnnouncementsResponse &b) {
  using ::std::swap;
  swap(a.serviceAnnouncements, b.serviceAnnouncements);
  swap(a.__isset, b.__isset);
}

GetServiceAnnouncementsResponse::GetServiceAnnouncementsResponse(const GetServiceAnnouncementsResponse& other222) {
  serviceAnnouncements = other222.serviceAnnouncements;
  __isset = other222.__isset;
}
GetServiceAnnouncementsResponse& GetServiceAnnouncementsResponse::operator=(const GetServiceAnnouncementsResponse& other223) {
  serviceAnnouncements = other223.serviceAnnouncements;
  __isset = other223.__isset;
  return *this;
}
void GetServiceAnnouncementsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetServiceAnnouncementsResponse(";
  out << "serviceAnnouncements="; (__isset.serviceAnnouncements ? (out << to_string(serviceAnnouncements)) : (out << "<null>"));
  out << ")";
}


GetUserInfoRequest::~GetUserInfoRequest() throw() {
}


void GetUserInfoRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void GetUserInfoRequest::__set_userId(const uuid& val) {
  this->userId = val;
}

void GetUserInfoRequest::__set_email(const std::string& val) {
  this->email = val;
__isset.email = true;
}

uint32_t GetUserInfoRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userId);
          this->__isset.userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetUserInfoRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetUserInfoRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->userId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.email) {
    xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->email);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetUserInfoRequest &a, GetUserInfoRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.userId, b.userId);
  swap(a.email, b.email);
  swap(a.__isset, b.__isset);
}

GetUserInfoRequest::GetUserInfoRequest(const GetUserInfoRequest& other224) {
  token = other224.token;
  userId = other224.userId;
  email = other224.email;
  __isset = other224.__isset;
}
GetUserInfoRequest& GetUserInfoRequest::operator=(const GetUserInfoRequest& other225) {
  token = other225.token;
  userId = other225.userId;
  email = other225.email;
  __isset = other225.__isset;
  return *this;
}
void GetUserInfoRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetUserInfoRequest(";
  out << "token=" << to_string(token);
  out << ", " << "userId=" << to_string(userId);
  out << ", " << "email="; (__isset.email ? (out << to_string(email)) : (out << "<null>"));
  out << ")";
}


GetUserInfoResponse::~GetUserInfoResponse() throw() {
}


void GetUserInfoResponse::__set_userInfo(const User& val) {
  this->userInfo = val;
}

uint32_t GetUserInfoResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->userInfo.read(iprot);
          this->__isset.userInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetUserInfoResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetUserInfoResponse");

  xfer += oprot->writeFieldBegin("userInfo", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->userInfo.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetUserInfoResponse &a, GetUserInfoResponse &b) {
  using ::std::swap;
  swap(a.userInfo, b.userInfo);
  swap(a.__isset, b.__isset);
}

GetUserInfoResponse::GetUserInfoResponse(const GetUserInfoResponse& other226) {
  userInfo = other226.userInfo;
  __isset = other226.__isset;
}
GetUserInfoResponse& GetUserInfoResponse::operator=(const GetUserInfoResponse& other227) {
  userInfo = other227.userInfo;
  __isset = other227.__isset;
  return *this;
}
void GetUserInfoResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetUserInfoResponse(";
  out << "userInfo=" << to_string(userInfo);
  out << ")";
}


SearchForApplicationsRequest::~SearchForApplicationsRequest() throw() {
}


void SearchForApplicationsRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void SearchForApplicationsRequest::__set_applicationName(const std::string& val) {
  this->applicationName = val;
}

void SearchForApplicationsRequest::__set_organizationId(const uuid& val) {
  this->organizationId = val;
__isset.organizationId = true;
}

uint32_t SearchForApplicationsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationName);
          this->__isset.applicationName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organizationId);
          this->__isset.organizationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SearchForApplicationsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SearchForApplicationsRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.organizationId) {
    xfer += oprot->writeFieldBegin("organizationId", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->organizationId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SearchForApplicationsRequest &a, SearchForApplicationsRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationName, b.applicationName);
  swap(a.organizationId, b.organizationId);
  swap(a.__isset, b.__isset);
}

SearchForApplicationsRequest::SearchForApplicationsRequest(const SearchForApplicationsRequest& other228) {
  token = other228.token;
  applicationName = other228.applicationName;
  organizationId = other228.organizationId;
  __isset = other228.__isset;
}
SearchForApplicationsRequest& SearchForApplicationsRequest::operator=(const SearchForApplicationsRequest& other229) {
  token = other229.token;
  applicationName = other229.applicationName;
  organizationId = other229.organizationId;
  __isset = other229.__isset;
  return *this;
}
void SearchForApplicationsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SearchForApplicationsRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationName=" << to_string(applicationName);
  out << ", " << "organizationId="; (__isset.organizationId ? (out << to_string(organizationId)) : (out << "<null>"));
  out << ")";
}


SearchForApplicationsResponse::~SearchForApplicationsResponse() throw() {
}


void SearchForApplicationsResponse::__set_applications(const std::vector<Application> & val) {
  this->applications = val;
}

uint32_t SearchForApplicationsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->applications.clear();
            uint32_t _size230;
            ::apache::thrift::protocol::TType _etype233;
            xfer += iprot->readListBegin(_etype233, _size230);
            this->applications.resize(_size230);
            uint32_t _i234;
            for (_i234 = 0; _i234 < _size230; ++_i234)
            {
              xfer += this->applications[_i234].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.applications = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SearchForApplicationsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SearchForApplicationsResponse");

  xfer += oprot->writeFieldBegin("applications", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->applications.size()));
    std::vector<Application> ::const_iterator _iter235;
    for (_iter235 = this->applications.begin(); _iter235 != this->applications.end(); ++_iter235)
    {
      xfer += (*_iter235).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SearchForApplicationsResponse &a, SearchForApplicationsResponse &b) {
  using ::std::swap;
  swap(a.applications, b.applications);
  swap(a.__isset, b.__isset);
}

SearchForApplicationsResponse::SearchForApplicationsResponse(const SearchForApplicationsResponse& other236) {
  applications = other236.applications;
  __isset = other236.__isset;
}
SearchForApplicationsResponse& SearchForApplicationsResponse::operator=(const SearchForApplicationsResponse& other237) {
  applications = other237.applications;
  __isset = other237.__isset;
  return *this;
}
void SearchForApplicationsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SearchForApplicationsResponse(";
  out << "applications=" << to_string(applications);
  out << ")";
}

}}} // namespace
