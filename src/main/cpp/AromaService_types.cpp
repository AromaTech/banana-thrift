/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "AromaService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace aroma { namespace thrift { namespace service {


CheckExistsRequest::~CheckExistsRequest() throw() {
}


void CheckExistsRequest::__set_emailAddress(const std::string& val) {
  this->emailAddress = val;
}

uint32_t CheckExistsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->emailAddress);
          this->__isset.emailAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CheckExistsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CheckExistsRequest");

  xfer += oprot->writeFieldBegin("emailAddress", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->emailAddress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CheckExistsRequest &a, CheckExistsRequest &b) {
  using ::std::swap;
  swap(a.emailAddress, b.emailAddress);
  swap(a.__isset, b.__isset);
}

CheckExistsRequest::CheckExistsRequest(const CheckExistsRequest& other0) {
  emailAddress = other0.emailAddress;
  __isset = other0.__isset;
}
CheckExistsRequest& CheckExistsRequest::operator=(const CheckExistsRequest& other1) {
  emailAddress = other1.emailAddress;
  __isset = other1.__isset;
  return *this;
}
void CheckExistsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CheckExistsRequest(";
  out << "emailAddress=" << to_string(emailAddress);
  out << ")";
}


CheckExistsResponse::~CheckExistsResponse() throw() {
}


void CheckExistsResponse::__set_exists(const bool val) {
  this->exists = val;
}

void CheckExistsResponse::__set_message(const std::string& val) {
  this->message = val;
__isset.message = true;
}

uint32_t CheckExistsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->exists);
          this->__isset.exists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CheckExistsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CheckExistsResponse");

  xfer += oprot->writeFieldBegin("exists", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->exists);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->message);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CheckExistsResponse &a, CheckExistsResponse &b) {
  using ::std::swap;
  swap(a.exists, b.exists);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

CheckExistsResponse::CheckExistsResponse(const CheckExistsResponse& other2) {
  exists = other2.exists;
  message = other2.message;
  __isset = other2.__isset;
}
CheckExistsResponse& CheckExistsResponse::operator=(const CheckExistsResponse& other3) {
  exists = other3.exists;
  message = other3.message;
  __isset = other3.__isset;
  return *this;
}
void CheckExistsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CheckExistsResponse(";
  out << "exists=" << to_string(exists);
  out << ", " << "message="; (__isset.message ? (out << to_string(message)) : (out << "<null>"));
  out << ")";
}


DeleteApplicationRequest::~DeleteApplicationRequest() throw() {
}


void DeleteApplicationRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void DeleteApplicationRequest::__set_applicationId(const uuid& val) {
  this->applicationId = val;
}

uint32_t DeleteApplicationRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteApplicationRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeleteApplicationRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteApplicationRequest &a, DeleteApplicationRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationId, b.applicationId);
  swap(a.__isset, b.__isset);
}

DeleteApplicationRequest::DeleteApplicationRequest(const DeleteApplicationRequest& other4) {
  token = other4.token;
  applicationId = other4.applicationId;
  __isset = other4.__isset;
}
DeleteApplicationRequest& DeleteApplicationRequest::operator=(const DeleteApplicationRequest& other5) {
  token = other5.token;
  applicationId = other5.applicationId;
  __isset = other5.__isset;
  return *this;
}
void DeleteApplicationRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeleteApplicationRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ")";
}


DeleteApplicationResponse::~DeleteApplicationResponse() throw() {
}


void DeleteApplicationResponse::__set_message(const std::string& val) {
  this->message = val;
__isset.message = true;
}

uint32_t DeleteApplicationResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteApplicationResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeleteApplicationResponse");

  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->message);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteApplicationResponse &a, DeleteApplicationResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

DeleteApplicationResponse::DeleteApplicationResponse(const DeleteApplicationResponse& other6) {
  message = other6.message;
  __isset = other6.__isset;
}
DeleteApplicationResponse& DeleteApplicationResponse::operator=(const DeleteApplicationResponse& other7) {
  message = other7.message;
  __isset = other7.__isset;
  return *this;
}
void DeleteApplicationResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeleteApplicationResponse(";
  out << "message="; (__isset.message ? (out << to_string(message)) : (out << "<null>"));
  out << ")";
}


DeleteMessageRequest::~DeleteMessageRequest() throw() {
}


void DeleteMessageRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void DeleteMessageRequest::__set_messageId(const uuid& val) {
  this->messageId = val;
}

void DeleteMessageRequest::__set_applicationId(const uuid& val) {
  this->applicationId = val;
}

void DeleteMessageRequest::__set_messageIds(const std::vector<uuid> & val) {
  this->messageIds = val;
__isset.messageIds = true;
}

void DeleteMessageRequest::__set_deleteAll(const bool val) {
  this->deleteAll = val;
__isset.deleteAll = true;
}

uint32_t DeleteMessageRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->messageIds.clear();
            uint32_t _size8;
            ::apache::thrift::protocol::TType _etype11;
            xfer += iprot->readListBegin(_etype11, _size8);
            this->messageIds.resize(_size8);
            uint32_t _i12;
            for (_i12 = 0; _i12 < _size8; ++_i12)
            {
              xfer += iprot->readString(this->messageIds[_i12]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.messageIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->deleteAll);
          this->__isset.deleteAll = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteMessageRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeleteMessageRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->messageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.messageIds) {
    xfer += oprot->writeFieldBegin("messageIds", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->messageIds.size()));
      std::vector<uuid> ::const_iterator _iter13;
      for (_iter13 = this->messageIds.begin(); _iter13 != this->messageIds.end(); ++_iter13)
      {
        xfer += oprot->writeString((*_iter13));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deleteAll) {
    xfer += oprot->writeFieldBegin("deleteAll", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->deleteAll);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteMessageRequest &a, DeleteMessageRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.messageId, b.messageId);
  swap(a.applicationId, b.applicationId);
  swap(a.messageIds, b.messageIds);
  swap(a.deleteAll, b.deleteAll);
  swap(a.__isset, b.__isset);
}

DeleteMessageRequest::DeleteMessageRequest(const DeleteMessageRequest& other14) {
  token = other14.token;
  messageId = other14.messageId;
  applicationId = other14.applicationId;
  messageIds = other14.messageIds;
  deleteAll = other14.deleteAll;
  __isset = other14.__isset;
}
DeleteMessageRequest& DeleteMessageRequest::operator=(const DeleteMessageRequest& other15) {
  token = other15.token;
  messageId = other15.messageId;
  applicationId = other15.applicationId;
  messageIds = other15.messageIds;
  deleteAll = other15.deleteAll;
  __isset = other15.__isset;
  return *this;
}
void DeleteMessageRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeleteMessageRequest(";
  out << "token=" << to_string(token);
  out << ", " << "messageId=" << to_string(messageId);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ", " << "messageIds="; (__isset.messageIds ? (out << to_string(messageIds)) : (out << "<null>"));
  out << ", " << "deleteAll="; (__isset.deleteAll ? (out << to_string(deleteAll)) : (out << "<null>"));
  out << ")";
}


DeleteMessageResponse::~DeleteMessageResponse() throw() {
}


void DeleteMessageResponse::__set_messagesDeleted(const int val) {
  this->messagesDeleted = val;
__isset.messagesDeleted = true;
}

uint32_t DeleteMessageResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->messagesDeleted);
          this->__isset.messagesDeleted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteMessageResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeleteMessageResponse");

  if (this->__isset.messagesDeleted) {
    xfer += oprot->writeFieldBegin("messagesDeleted", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->messagesDeleted);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteMessageResponse &a, DeleteMessageResponse &b) {
  using ::std::swap;
  swap(a.messagesDeleted, b.messagesDeleted);
  swap(a.__isset, b.__isset);
}

DeleteMessageResponse::DeleteMessageResponse(const DeleteMessageResponse& other16) {
  messagesDeleted = other16.messagesDeleted;
  __isset = other16.__isset;
}
DeleteMessageResponse& DeleteMessageResponse::operator=(const DeleteMessageResponse& other17) {
  messagesDeleted = other17.messagesDeleted;
  __isset = other17.__isset;
  return *this;
}
void DeleteMessageResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeleteMessageResponse(";
  out << "messagesDeleted="; (__isset.messagesDeleted ? (out << to_string(messagesDeleted)) : (out << "<null>"));
  out << ")";
}


DismissMessageRequest::~DismissMessageRequest() throw() {
}


void DismissMessageRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void DismissMessageRequest::__set_messageId(const uuid& val) {
  this->messageId = val;
}

void DismissMessageRequest::__set_applicationId(const uuid& val) {
  this->applicationId = val;
}

void DismissMessageRequest::__set_messageIds(const std::vector<uuid> & val) {
  this->messageIds = val;
__isset.messageIds = true;
}

void DismissMessageRequest::__set_dismissAll(const bool val) {
  this->dismissAll = val;
__isset.dismissAll = true;
}

uint32_t DismissMessageRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->messageIds.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            xfer += iprot->readListBegin(_etype21, _size18);
            this->messageIds.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += iprot->readString(this->messageIds[_i22]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.messageIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->dismissAll);
          this->__isset.dismissAll = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DismissMessageRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DismissMessageRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->messageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.messageIds) {
    xfer += oprot->writeFieldBegin("messageIds", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->messageIds.size()));
      std::vector<uuid> ::const_iterator _iter23;
      for (_iter23 = this->messageIds.begin(); _iter23 != this->messageIds.end(); ++_iter23)
      {
        xfer += oprot->writeString((*_iter23));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dismissAll) {
    xfer += oprot->writeFieldBegin("dismissAll", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->dismissAll);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DismissMessageRequest &a, DismissMessageRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.messageId, b.messageId);
  swap(a.applicationId, b.applicationId);
  swap(a.messageIds, b.messageIds);
  swap(a.dismissAll, b.dismissAll);
  swap(a.__isset, b.__isset);
}

DismissMessageRequest::DismissMessageRequest(const DismissMessageRequest& other24) {
  token = other24.token;
  messageId = other24.messageId;
  applicationId = other24.applicationId;
  messageIds = other24.messageIds;
  dismissAll = other24.dismissAll;
  __isset = other24.__isset;
}
DismissMessageRequest& DismissMessageRequest::operator=(const DismissMessageRequest& other25) {
  token = other25.token;
  messageId = other25.messageId;
  applicationId = other25.applicationId;
  messageIds = other25.messageIds;
  dismissAll = other25.dismissAll;
  __isset = other25.__isset;
  return *this;
}
void DismissMessageRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DismissMessageRequest(";
  out << "token=" << to_string(token);
  out << ", " << "messageId=" << to_string(messageId);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ", " << "messageIds="; (__isset.messageIds ? (out << to_string(messageIds)) : (out << "<null>"));
  out << ", " << "dismissAll="; (__isset.dismissAll ? (out << to_string(dismissAll)) : (out << "<null>"));
  out << ")";
}


DismissMessageResponse::~DismissMessageResponse() throw() {
}


void DismissMessageResponse::__set_messagesDismissed(const int val) {
  this->messagesDismissed = val;
__isset.messagesDismissed = true;
}

uint32_t DismissMessageResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->messagesDismissed);
          this->__isset.messagesDismissed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DismissMessageResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DismissMessageResponse");

  if (this->__isset.messagesDismissed) {
    xfer += oprot->writeFieldBegin("messagesDismissed", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->messagesDismissed);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DismissMessageResponse &a, DismissMessageResponse &b) {
  using ::std::swap;
  swap(a.messagesDismissed, b.messagesDismissed);
  swap(a.__isset, b.__isset);
}

DismissMessageResponse::DismissMessageResponse(const DismissMessageResponse& other26) {
  messagesDismissed = other26.messagesDismissed;
  __isset = other26.__isset;
}
DismissMessageResponse& DismissMessageResponse::operator=(const DismissMessageResponse& other27) {
  messagesDismissed = other27.messagesDismissed;
  __isset = other27.__isset;
  return *this;
}
void DismissMessageResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DismissMessageResponse(";
  out << "messagesDismissed="; (__isset.messagesDismissed ? (out << to_string(messagesDismissed)) : (out << "<null>"));
  out << ")";
}


ProvisionApplicationRequest::~ProvisionApplicationRequest() throw() {
}


void ProvisionApplicationRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void ProvisionApplicationRequest::__set_applicationName(const std::string& val) {
  this->applicationName = val;
}

void ProvisionApplicationRequest::__set_programmingLanguage(const  ::tech::aroma::thrift::ProgrammingLanguage::type val) {
  this->programmingLanguage = val;
__isset.programmingLanguage = true;
}

void ProvisionApplicationRequest::__set_organizationId(const uuid& val) {
  this->organizationId = val;
}

void ProvisionApplicationRequest::__set_icon(const Image& val) {
  this->icon = val;
__isset.icon = true;
}

void ProvisionApplicationRequest::__set_owners(const std::set<uuid> & val) {
  this->owners = val;
__isset.owners = true;
}

void ProvisionApplicationRequest::__set_applicationDescription(const std::string& val) {
  this->applicationDescription = val;
__isset.applicationDescription = true;
}

void ProvisionApplicationRequest::__set_tier(const  ::tech::aroma::thrift::Tier::type val) {
  this->tier = val;
__isset.tier = true;
}

uint32_t ProvisionApplicationRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationName);
          this->__isset.applicationName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast28;
          xfer += iprot->readI32(ecast28);
          this->programmingLanguage = ( ::tech::aroma::thrift::ProgrammingLanguage::type)ecast28;
          this->__isset.programmingLanguage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organizationId);
          this->__isset.organizationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->icon.read(iprot);
          this->__isset.icon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->owners.clear();
            uint32_t _size29;
            ::apache::thrift::protocol::TType _etype32;
            xfer += iprot->readSetBegin(_etype32, _size29);
            uint32_t _i33;
            for (_i33 = 0; _i33 < _size29; ++_i33)
            {
              uuid _elem34;
              xfer += iprot->readString(_elem34);
              this->owners.insert(_elem34);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.owners = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationDescription);
          this->__isset.applicationDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast35;
          xfer += iprot->readI32(ecast35);
          this->tier = ( ::tech::aroma::thrift::Tier::type)ecast35;
          this->__isset.tier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvisionApplicationRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProvisionApplicationRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.programmingLanguage) {
    xfer += oprot->writeFieldBegin("programmingLanguage", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->programmingLanguage);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("organizationId", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->organizationId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.icon) {
    xfer += oprot->writeFieldBegin("icon", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->icon.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.owners) {
    xfer += oprot->writeFieldBegin("owners", ::apache::thrift::protocol::T_SET, 6);
    {
      xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->owners.size()));
      std::set<uuid> ::const_iterator _iter36;
      for (_iter36 = this->owners.begin(); _iter36 != this->owners.end(); ++_iter36)
      {
        xfer += oprot->writeString((*_iter36));
      }
      xfer += oprot->writeSetEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.applicationDescription) {
    xfer += oprot->writeFieldBegin("applicationDescription", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->applicationDescription);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tier) {
    xfer += oprot->writeFieldBegin("tier", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32((int32_t)this->tier);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProvisionApplicationRequest &a, ProvisionApplicationRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationName, b.applicationName);
  swap(a.programmingLanguage, b.programmingLanguage);
  swap(a.organizationId, b.organizationId);
  swap(a.icon, b.icon);
  swap(a.owners, b.owners);
  swap(a.applicationDescription, b.applicationDescription);
  swap(a.tier, b.tier);
  swap(a.__isset, b.__isset);
}

ProvisionApplicationRequest::ProvisionApplicationRequest(const ProvisionApplicationRequest& other37) {
  token = other37.token;
  applicationName = other37.applicationName;
  programmingLanguage = other37.programmingLanguage;
  organizationId = other37.organizationId;
  icon = other37.icon;
  owners = other37.owners;
  applicationDescription = other37.applicationDescription;
  tier = other37.tier;
  __isset = other37.__isset;
}
ProvisionApplicationRequest& ProvisionApplicationRequest::operator=(const ProvisionApplicationRequest& other38) {
  token = other38.token;
  applicationName = other38.applicationName;
  programmingLanguage = other38.programmingLanguage;
  organizationId = other38.organizationId;
  icon = other38.icon;
  owners = other38.owners;
  applicationDescription = other38.applicationDescription;
  tier = other38.tier;
  __isset = other38.__isset;
  return *this;
}
void ProvisionApplicationRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProvisionApplicationRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationName=" << to_string(applicationName);
  out << ", " << "programmingLanguage="; (__isset.programmingLanguage ? (out << to_string(programmingLanguage)) : (out << "<null>"));
  out << ", " << "organizationId=" << to_string(organizationId);
  out << ", " << "icon="; (__isset.icon ? (out << to_string(icon)) : (out << "<null>"));
  out << ", " << "owners="; (__isset.owners ? (out << to_string(owners)) : (out << "<null>"));
  out << ", " << "applicationDescription="; (__isset.applicationDescription ? (out << to_string(applicationDescription)) : (out << "<null>"));
  out << ", " << "tier="; (__isset.tier ? (out << to_string(tier)) : (out << "<null>"));
  out << ")";
}


ProvisionApplicationResponse::~ProvisionApplicationResponse() throw() {
}


void ProvisionApplicationResponse::__set_applicationToken(const ApplicationToken& val) {
  this->applicationToken = val;
}

void ProvisionApplicationResponse::__set_applicationInfo(const Application& val) {
  this->applicationInfo = val;
}

uint32_t ProvisionApplicationResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->applicationToken.read(iprot);
          this->__isset.applicationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->applicationInfo.read(iprot);
          this->__isset.applicationInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvisionApplicationResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProvisionApplicationResponse");

  xfer += oprot->writeFieldBegin("applicationToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->applicationToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationInfo", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->applicationInfo.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProvisionApplicationResponse &a, ProvisionApplicationResponse &b) {
  using ::std::swap;
  swap(a.applicationToken, b.applicationToken);
  swap(a.applicationInfo, b.applicationInfo);
  swap(a.__isset, b.__isset);
}

ProvisionApplicationResponse::ProvisionApplicationResponse(const ProvisionApplicationResponse& other39) {
  applicationToken = other39.applicationToken;
  applicationInfo = other39.applicationInfo;
  __isset = other39.__isset;
}
ProvisionApplicationResponse& ProvisionApplicationResponse::operator=(const ProvisionApplicationResponse& other40) {
  applicationToken = other40.applicationToken;
  applicationInfo = other40.applicationInfo;
  __isset = other40.__isset;
  return *this;
}
void ProvisionApplicationResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProvisionApplicationResponse(";
  out << "applicationToken=" << to_string(applicationToken);
  out << ", " << "applicationInfo=" << to_string(applicationInfo);
  out << ")";
}


RegenerateApplicationTokenRequest::~RegenerateApplicationTokenRequest() throw() {
}


void RegenerateApplicationTokenRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void RegenerateApplicationTokenRequest::__set_applicationId(const uuid& val) {
  this->applicationId = val;
}

uint32_t RegenerateApplicationTokenRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RegenerateApplicationTokenRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RegenerateApplicationTokenRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RegenerateApplicationTokenRequest &a, RegenerateApplicationTokenRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationId, b.applicationId);
  swap(a.__isset, b.__isset);
}

RegenerateApplicationTokenRequest::RegenerateApplicationTokenRequest(const RegenerateApplicationTokenRequest& other41) {
  token = other41.token;
  applicationId = other41.applicationId;
  __isset = other41.__isset;
}
RegenerateApplicationTokenRequest& RegenerateApplicationTokenRequest::operator=(const RegenerateApplicationTokenRequest& other42) {
  token = other42.token;
  applicationId = other42.applicationId;
  __isset = other42.__isset;
  return *this;
}
void RegenerateApplicationTokenRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RegenerateApplicationTokenRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ")";
}


RegenerateApplicationTokenResponse::~RegenerateApplicationTokenResponse() throw() {
}


void RegenerateApplicationTokenResponse::__set_applicationToken(const ApplicationToken& val) {
  this->applicationToken = val;
}

uint32_t RegenerateApplicationTokenResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->applicationToken.read(iprot);
          this->__isset.applicationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RegenerateApplicationTokenResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RegenerateApplicationTokenResponse");

  xfer += oprot->writeFieldBegin("applicationToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->applicationToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RegenerateApplicationTokenResponse &a, RegenerateApplicationTokenResponse &b) {
  using ::std::swap;
  swap(a.applicationToken, b.applicationToken);
  swap(a.__isset, b.__isset);
}

RegenerateApplicationTokenResponse::RegenerateApplicationTokenResponse(const RegenerateApplicationTokenResponse& other43) {
  applicationToken = other43.applicationToken;
  __isset = other43.__isset;
}
RegenerateApplicationTokenResponse& RegenerateApplicationTokenResponse::operator=(const RegenerateApplicationTokenResponse& other44) {
  applicationToken = other44.applicationToken;
  __isset = other44.__isset;
  return *this;
}
void RegenerateApplicationTokenResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RegenerateApplicationTokenResponse(";
  out << "applicationToken=" << to_string(applicationToken);
  out << ")";
}


RegisterHealthCheckRequest::~RegisterHealthCheckRequest() throw() {
}


void RegisterHealthCheckRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void RegisterHealthCheckRequest::__set_endpoint(const Endpoint& val) {
  this->endpoint = val;
}

uint32_t RegisterHealthCheckRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->endpoint.read(iprot);
          this->__isset.endpoint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RegisterHealthCheckRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RegisterHealthCheckRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endpoint", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->endpoint.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RegisterHealthCheckRequest &a, RegisterHealthCheckRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.endpoint, b.endpoint);
  swap(a.__isset, b.__isset);
}

RegisterHealthCheckRequest::RegisterHealthCheckRequest(const RegisterHealthCheckRequest& other45) {
  token = other45.token;
  endpoint = other45.endpoint;
  __isset = other45.__isset;
}
RegisterHealthCheckRequest& RegisterHealthCheckRequest::operator=(const RegisterHealthCheckRequest& other46) {
  token = other46.token;
  endpoint = other46.endpoint;
  __isset = other46.__isset;
  return *this;
}
void RegisterHealthCheckRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RegisterHealthCheckRequest(";
  out << "token=" << to_string(token);
  out << ", " << "endpoint=" << to_string(endpoint);
  out << ")";
}


RegisterHealthCheckResponse::~RegisterHealthCheckResponse() throw() {
}


void RegisterHealthCheckResponse::__set_message(const std::string& val) {
  this->message = val;
__isset.message = true;
}

void RegisterHealthCheckResponse::__set_healthCheckToken(const std::string& val) {
  this->healthCheckToken = val;
__isset.healthCheckToken = true;
}

uint32_t RegisterHealthCheckResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->healthCheckToken);
          this->__isset.healthCheckToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RegisterHealthCheckResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RegisterHealthCheckResponse");

  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->message);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.healthCheckToken) {
    xfer += oprot->writeFieldBegin("healthCheckToken", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->healthCheckToken);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RegisterHealthCheckResponse &a, RegisterHealthCheckResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.healthCheckToken, b.healthCheckToken);
  swap(a.__isset, b.__isset);
}

RegisterHealthCheckResponse::RegisterHealthCheckResponse(const RegisterHealthCheckResponse& other47) {
  message = other47.message;
  healthCheckToken = other47.healthCheckToken;
  __isset = other47.__isset;
}
RegisterHealthCheckResponse& RegisterHealthCheckResponse::operator=(const RegisterHealthCheckResponse& other48) {
  message = other48.message;
  healthCheckToken = other48.healthCheckToken;
  __isset = other48.__isset;
  return *this;
}
void RegisterHealthCheckResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RegisterHealthCheckResponse(";
  out << "message="; (__isset.message ? (out << to_string(message)) : (out << "<null>"));
  out << ", " << "healthCheckToken="; (__isset.healthCheckToken ? (out << to_string(healthCheckToken)) : (out << "<null>"));
  out << ")";
}


RemoveSavedChannelRequest::~RemoveSavedChannelRequest() throw() {
}


void RemoveSavedChannelRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void RemoveSavedChannelRequest::__set_channel(const AromaChannel& val) {
  this->channel = val;
}

uint32_t RemoveSavedChannelRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->channel.read(iprot);
          this->__isset.channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RemoveSavedChannelRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RemoveSavedChannelRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->channel.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RemoveSavedChannelRequest &a, RemoveSavedChannelRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.channel, b.channel);
  swap(a.__isset, b.__isset);
}

RemoveSavedChannelRequest::RemoveSavedChannelRequest(const RemoveSavedChannelRequest& other49) {
  token = other49.token;
  channel = other49.channel;
  __isset = other49.__isset;
}
RemoveSavedChannelRequest& RemoveSavedChannelRequest::operator=(const RemoveSavedChannelRequest& other50) {
  token = other50.token;
  channel = other50.channel;
  __isset = other50.__isset;
  return *this;
}
void RemoveSavedChannelRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RemoveSavedChannelRequest(";
  out << "token=" << to_string(token);
  out << ", " << "channel=" << to_string(channel);
  out << ")";
}


RemoveSavedChannelResponse::~RemoveSavedChannelResponse() throw() {
}


void RemoveSavedChannelResponse::__set_message(const std::string& val) {
  this->message = val;
}

void RemoveSavedChannelResponse::__set_channel(const AromaChannel& val) {
  this->channel = val;
__isset.channel = true;
}

uint32_t RemoveSavedChannelResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->channel.read(iprot);
          this->__isset.channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RemoveSavedChannelResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RemoveSavedChannelResponse");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.channel) {
    xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->channel.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RemoveSavedChannelResponse &a, RemoveSavedChannelResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.channel, b.channel);
  swap(a.__isset, b.__isset);
}

RemoveSavedChannelResponse::RemoveSavedChannelResponse(const RemoveSavedChannelResponse& other51) {
  message = other51.message;
  channel = other51.channel;
  __isset = other51.__isset;
}
RemoveSavedChannelResponse& RemoveSavedChannelResponse::operator=(const RemoveSavedChannelResponse& other52) {
  message = other52.message;
  channel = other52.channel;
  __isset = other52.__isset;
  return *this;
}
void RemoveSavedChannelResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RemoveSavedChannelResponse(";
  out << "message=" << to_string(message);
  out << ", " << "channel="; (__isset.channel ? (out << to_string(channel)) : (out << "<null>"));
  out << ")";
}


RenewApplicationTokenRequest::~RenewApplicationTokenRequest() throw() {
}


void RenewApplicationTokenRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void RenewApplicationTokenRequest::__set_applicationToken(const ApplicationToken& val) {
  this->applicationToken = val;
}

void RenewApplicationTokenRequest::__set_newLifetime(const  ::tech::aroma::thrift::LengthOfTime& val) {
  this->newLifetime = val;
}

void RenewApplicationTokenRequest::__set_applicationId(const uuid& val) {
  this->applicationId = val;
}

uint32_t RenewApplicationTokenRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->applicationToken.read(iprot);
          this->__isset.applicationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->newLifetime.read(iprot);
          this->__isset.newLifetime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RenewApplicationTokenRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RenewApplicationTokenRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationToken", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->applicationToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("newLifetime", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->newLifetime.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RenewApplicationTokenRequest &a, RenewApplicationTokenRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationToken, b.applicationToken);
  swap(a.newLifetime, b.newLifetime);
  swap(a.applicationId, b.applicationId);
  swap(a.__isset, b.__isset);
}

RenewApplicationTokenRequest::RenewApplicationTokenRequest(const RenewApplicationTokenRequest& other53) {
  token = other53.token;
  applicationToken = other53.applicationToken;
  newLifetime = other53.newLifetime;
  applicationId = other53.applicationId;
  __isset = other53.__isset;
}
RenewApplicationTokenRequest& RenewApplicationTokenRequest::operator=(const RenewApplicationTokenRequest& other54) {
  token = other54.token;
  applicationToken = other54.applicationToken;
  newLifetime = other54.newLifetime;
  applicationId = other54.applicationId;
  __isset = other54.__isset;
  return *this;
}
void RenewApplicationTokenRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RenewApplicationTokenRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationToken=" << to_string(applicationToken);
  out << ", " << "newLifetime=" << to_string(newLifetime);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ")";
}


RenewApplicationTokenResponse::~RenewApplicationTokenResponse() throw() {
}


void RenewApplicationTokenResponse::__set_serviceToken(const ApplicationToken& val) {
  this->serviceToken = val;
}

uint32_t RenewApplicationTokenResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->serviceToken.read(iprot);
          this->__isset.serviceToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RenewApplicationTokenResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RenewApplicationTokenResponse");

  xfer += oprot->writeFieldBegin("serviceToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->serviceToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RenewApplicationTokenResponse &a, RenewApplicationTokenResponse &b) {
  using ::std::swap;
  swap(a.serviceToken, b.serviceToken);
  swap(a.__isset, b.__isset);
}

RenewApplicationTokenResponse::RenewApplicationTokenResponse(const RenewApplicationTokenResponse& other55) {
  serviceToken = other55.serviceToken;
  __isset = other55.__isset;
}
RenewApplicationTokenResponse& RenewApplicationTokenResponse::operator=(const RenewApplicationTokenResponse& other56) {
  serviceToken = other56.serviceToken;
  __isset = other56.__isset;
  return *this;
}
void RenewApplicationTokenResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RenewApplicationTokenResponse(";
  out << "serviceToken=" << to_string(serviceToken);
  out << ")";
}


SaveChannelRequest::~SaveChannelRequest() throw() {
}


void SaveChannelRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void SaveChannelRequest::__set_channel(const AromaChannel& val) {
  this->channel = val;
}

uint32_t SaveChannelRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->channel.read(iprot);
          this->__isset.channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SaveChannelRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SaveChannelRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->channel.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SaveChannelRequest &a, SaveChannelRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.channel, b.channel);
  swap(a.__isset, b.__isset);
}

SaveChannelRequest::SaveChannelRequest(const SaveChannelRequest& other57) {
  token = other57.token;
  channel = other57.channel;
  __isset = other57.__isset;
}
SaveChannelRequest& SaveChannelRequest::operator=(const SaveChannelRequest& other58) {
  token = other58.token;
  channel = other58.channel;
  __isset = other58.__isset;
  return *this;
}
void SaveChannelRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SaveChannelRequest(";
  out << "token=" << to_string(token);
  out << ", " << "channel=" << to_string(channel);
  out << ")";
}


SaveChannelResponse::~SaveChannelResponse() throw() {
}


void SaveChannelResponse::__set_message(const std::string& val) {
  this->message = val;
}

void SaveChannelResponse::__set_channel(const AromaChannel& val) {
  this->channel = val;
__isset.channel = true;
}

uint32_t SaveChannelResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->channel.read(iprot);
          this->__isset.channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SaveChannelResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SaveChannelResponse");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.channel) {
    xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->channel.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SaveChannelResponse &a, SaveChannelResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.channel, b.channel);
  swap(a.__isset, b.__isset);
}

SaveChannelResponse::SaveChannelResponse(const SaveChannelResponse& other59) {
  message = other59.message;
  channel = other59.channel;
  __isset = other59.__isset;
}
SaveChannelResponse& SaveChannelResponse::operator=(const SaveChannelResponse& other60) {
  message = other60.message;
  channel = other60.channel;
  __isset = other60.__isset;
  return *this;
}
void SaveChannelResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SaveChannelResponse(";
  out << "message=" << to_string(message);
  out << ", " << "channel="; (__isset.channel ? (out << to_string(channel)) : (out << "<null>"));
  out << ")";
}


SignInRequest::~SignInRequest() throw() {
}


void SignInRequest::__set_credentials(const  ::aroma::thrift::authentication::Credentials& val) {
  this->credentials = val;
}

void SignInRequest::__set_emailAddress(const std::string& val) {
  this->emailAddress = val;
}

uint32_t SignInRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->credentials.read(iprot);
          this->__isset.credentials = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->emailAddress);
          this->__isset.emailAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SignInRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SignInRequest");

  xfer += oprot->writeFieldBegin("credentials", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->credentials.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("emailAddress", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->emailAddress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SignInRequest &a, SignInRequest &b) {
  using ::std::swap;
  swap(a.credentials, b.credentials);
  swap(a.emailAddress, b.emailAddress);
  swap(a.__isset, b.__isset);
}

SignInRequest::SignInRequest(const SignInRequest& other61) {
  credentials = other61.credentials;
  emailAddress = other61.emailAddress;
  __isset = other61.__isset;
}
SignInRequest& SignInRequest::operator=(const SignInRequest& other62) {
  credentials = other62.credentials;
  emailAddress = other62.emailAddress;
  __isset = other62.__isset;
  return *this;
}
void SignInRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SignInRequest(";
  out << "credentials=" << to_string(credentials);
  out << ", " << "emailAddress=" << to_string(emailAddress);
  out << ")";
}


SignInResponse::~SignInResponse() throw() {
}


void SignInResponse::__set_userToken(const UserToken& val) {
  this->userToken = val;
}

uint32_t SignInResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->userToken.read(iprot);
          this->__isset.userToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SignInResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SignInResponse");

  xfer += oprot->writeFieldBegin("userToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->userToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SignInResponse &a, SignInResponse &b) {
  using ::std::swap;
  swap(a.userToken, b.userToken);
  swap(a.__isset, b.__isset);
}

SignInResponse::SignInResponse(const SignInResponse& other63) {
  userToken = other63.userToken;
  __isset = other63.__isset;
}
SignInResponse& SignInResponse::operator=(const SignInResponse& other64) {
  userToken = other64.userToken;
  __isset = other64.__isset;
  return *this;
}
void SignInResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SignInResponse(";
  out << "userToken=" << to_string(userToken);
  out << ")";
}


SignUpRequest::~SignUpRequest() throw() {
}


void SignUpRequest::__set_email(const std::string& val) {
  this->email = val;
}

void SignUpRequest::__set_name(const std::string& val) {
  this->name = val;
}

void SignUpRequest::__set_firstName(const std::string& val) {
  this->firstName = val;
}

void SignUpRequest::__set_middleName(const std::string& val) {
  this->middleName = val;
}

void SignUpRequest::__set_lastName(const std::string& val) {
  this->lastName = val;
}

void SignUpRequest::__set_username(const std::string& val) {
  this->username = val;
}

void SignUpRequest::__set_organizationId(const uuid& val) {
  this->organizationId = val;
}

void SignUpRequest::__set_credentials(const  ::aroma::thrift::authentication::Credentials& val) {
  this->credentials = val;
}

void SignUpRequest::__set_mainRole(const  ::tech::aroma::thrift::Role::type val) {
  this->mainRole = val;
}

void SignUpRequest::__set_birthDate(const timestamp val) {
  this->birthDate = val;
__isset.birthDate = true;
}

void SignUpRequest::__set_githubProfile(const std::string& val) {
  this->githubProfile = val;
__isset.githubProfile = true;
}

void SignUpRequest::__set_profileImage(const Image& val) {
  this->profileImage = val;
__isset.profileImage = true;
}

uint32_t SignUpRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->firstName);
          this->__isset.firstName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->middleName);
          this->__isset.middleName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lastName);
          this->__isset.lastName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organizationId);
          this->__isset.organizationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->credentials.read(iprot);
          this->__isset.credentials = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast65;
          xfer += iprot->readI32(ecast65);
          this->mainRole = ( ::tech::aroma::thrift::Role::type)ecast65;
          this->__isset.mainRole = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->birthDate);
          this->__isset.birthDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->githubProfile);
          this->__isset.githubProfile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->profileImage.read(iprot);
          this->__isset.profileImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SignUpRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SignUpRequest");

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("firstName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->firstName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("middleName", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->middleName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastName", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->lastName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("organizationId", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->organizationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("credentials", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->credentials.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mainRole", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32((int32_t)this->mainRole);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.birthDate) {
    xfer += oprot->writeFieldBegin("birthDate", ::apache::thrift::protocol::T_I64, 10);
    xfer += oprot->writeI64(this->birthDate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.githubProfile) {
    xfer += oprot->writeFieldBegin("githubProfile", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->githubProfile);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.profileImage) {
    xfer += oprot->writeFieldBegin("profileImage", ::apache::thrift::protocol::T_STRUCT, 12);
    xfer += this->profileImage.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SignUpRequest &a, SignUpRequest &b) {
  using ::std::swap;
  swap(a.email, b.email);
  swap(a.name, b.name);
  swap(a.firstName, b.firstName);
  swap(a.middleName, b.middleName);
  swap(a.lastName, b.lastName);
  swap(a.username, b.username);
  swap(a.organizationId, b.organizationId);
  swap(a.credentials, b.credentials);
  swap(a.mainRole, b.mainRole);
  swap(a.birthDate, b.birthDate);
  swap(a.githubProfile, b.githubProfile);
  swap(a.profileImage, b.profileImage);
  swap(a.__isset, b.__isset);
}

SignUpRequest::SignUpRequest(const SignUpRequest& other66) {
  email = other66.email;
  name = other66.name;
  firstName = other66.firstName;
  middleName = other66.middleName;
  lastName = other66.lastName;
  username = other66.username;
  organizationId = other66.organizationId;
  credentials = other66.credentials;
  mainRole = other66.mainRole;
  birthDate = other66.birthDate;
  githubProfile = other66.githubProfile;
  profileImage = other66.profileImage;
  __isset = other66.__isset;
}
SignUpRequest& SignUpRequest::operator=(const SignUpRequest& other67) {
  email = other67.email;
  name = other67.name;
  firstName = other67.firstName;
  middleName = other67.middleName;
  lastName = other67.lastName;
  username = other67.username;
  organizationId = other67.organizationId;
  credentials = other67.credentials;
  mainRole = other67.mainRole;
  birthDate = other67.birthDate;
  githubProfile = other67.githubProfile;
  profileImage = other67.profileImage;
  __isset = other67.__isset;
  return *this;
}
void SignUpRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SignUpRequest(";
  out << "email=" << to_string(email);
  out << ", " << "name=" << to_string(name);
  out << ", " << "firstName=" << to_string(firstName);
  out << ", " << "middleName=" << to_string(middleName);
  out << ", " << "lastName=" << to_string(lastName);
  out << ", " << "username=" << to_string(username);
  out << ", " << "organizationId=" << to_string(organizationId);
  out << ", " << "credentials=" << to_string(credentials);
  out << ", " << "mainRole=" << to_string(mainRole);
  out << ", " << "birthDate="; (__isset.birthDate ? (out << to_string(birthDate)) : (out << "<null>"));
  out << ", " << "githubProfile="; (__isset.githubProfile ? (out << to_string(githubProfile)) : (out << "<null>"));
  out << ", " << "profileImage="; (__isset.profileImage ? (out << to_string(profileImage)) : (out << "<null>"));
  out << ")";
}


SignUpResponse::~SignUpResponse() throw() {
}


void SignUpResponse::__set_userToken(const UserToken& val) {
  this->userToken = val;
}

void SignUpResponse::__set_account(const  ::aroma::thrift::authentication::AromaAccount& val) {
  this->account = val;
}

void SignUpResponse::__set_userId(const uuid& val) {
  this->userId = val;
}

uint32_t SignUpResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->userToken.read(iprot);
          this->__isset.userToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->account.read(iprot);
          this->__isset.account = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userId);
          this->__isset.userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SignUpResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SignUpResponse");

  xfer += oprot->writeFieldBegin("userToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->userToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("account", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->account.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->userId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SignUpResponse &a, SignUpResponse &b) {
  using ::std::swap;
  swap(a.userToken, b.userToken);
  swap(a.account, b.account);
  swap(a.userId, b.userId);
  swap(a.__isset, b.__isset);
}

SignUpResponse::SignUpResponse(const SignUpResponse& other68) {
  userToken = other68.userToken;
  account = other68.account;
  userId = other68.userId;
  __isset = other68.__isset;
}
SignUpResponse& SignUpResponse::operator=(const SignUpResponse& other69) {
  userToken = other69.userToken;
  account = other69.account;
  userId = other69.userId;
  __isset = other69.__isset;
  return *this;
}
void SignUpResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SignUpResponse(";
  out << "userToken=" << to_string(userToken);
  out << ", " << "account=" << to_string(account);
  out << ", " << "userId=" << to_string(userId);
  out << ")";
}


SnoozeChannelRequest::~SnoozeChannelRequest() throw() {
}


void SnoozeChannelRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void SnoozeChannelRequest::__set_channel(const AromaChannel& val) {
  this->channel = val;
}

void SnoozeChannelRequest::__set_applicationId(const uuid& val) {
  this->applicationId = val;
__isset.applicationId = true;
}

void SnoozeChannelRequest::__set_lengthOfTime(const  ::tech::aroma::thrift::LengthOfTime& val) {
  this->lengthOfTime = val;
__isset.lengthOfTime = true;
}

uint32_t SnoozeChannelRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->channel.read(iprot);
          this->__isset.channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->lengthOfTime.read(iprot);
          this->__isset.lengthOfTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SnoozeChannelRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SnoozeChannelRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->channel.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.applicationId) {
    xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->applicationId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lengthOfTime) {
    xfer += oprot->writeFieldBegin("lengthOfTime", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->lengthOfTime.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SnoozeChannelRequest &a, SnoozeChannelRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.channel, b.channel);
  swap(a.applicationId, b.applicationId);
  swap(a.lengthOfTime, b.lengthOfTime);
  swap(a.__isset, b.__isset);
}

SnoozeChannelRequest::SnoozeChannelRequest(const SnoozeChannelRequest& other71) {
  token = other71.token;
  channel = other71.channel;
  applicationId = other71.applicationId;
  lengthOfTime = other71.lengthOfTime;
  __isset = other71.__isset;
}
SnoozeChannelRequest& SnoozeChannelRequest::operator=(const SnoozeChannelRequest& other72) {
  token = other72.token;
  channel = other72.channel;
  applicationId = other72.applicationId;
  lengthOfTime = other72.lengthOfTime;
  __isset = other72.__isset;
  return *this;
}
void SnoozeChannelRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SnoozeChannelRequest(";
  out << "token=" << to_string(token);
  out << ", " << "channel=" << to_string(channel);
  out << ", " << "applicationId="; (__isset.applicationId ? (out << to_string(applicationId)) : (out << "<null>"));
  out << ", " << "lengthOfTime="; (__isset.lengthOfTime ? (out << to_string(lengthOfTime)) : (out << "<null>"));
  out << ")";
}


SnoozeChannelResponse::~SnoozeChannelResponse() throw() {
}


void SnoozeChannelResponse::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t SnoozeChannelResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SnoozeChannelResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SnoozeChannelResponse");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SnoozeChannelResponse &a, SnoozeChannelResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

SnoozeChannelResponse::SnoozeChannelResponse(const SnoozeChannelResponse& other73) {
  message = other73.message;
  __isset = other73.__isset;
}
SnoozeChannelResponse& SnoozeChannelResponse::operator=(const SnoozeChannelResponse& other74) {
  message = other74.message;
  __isset = other74.__isset;
  return *this;
}
void SnoozeChannelResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SnoozeChannelResponse(";
  out << "message=" << to_string(message);
  out << ")";
}


FollowApplicationRequest::~FollowApplicationRequest() throw() {
}


void FollowApplicationRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void FollowApplicationRequest::__set_applicationId(const uuid& val) {
  this->applicationId = val;
}

void FollowApplicationRequest::__set_organizationId(const uuid& val) {
  this->organizationId = val;
__isset.organizationId = true;
}

uint32_t FollowApplicationRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organizationId);
          this->__isset.organizationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FollowApplicationRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FollowApplicationRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.organizationId) {
    xfer += oprot->writeFieldBegin("organizationId", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->organizationId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FollowApplicationRequest &a, FollowApplicationRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationId, b.applicationId);
  swap(a.organizationId, b.organizationId);
  swap(a.__isset, b.__isset);
}

FollowApplicationRequest::FollowApplicationRequest(const FollowApplicationRequest& other75) {
  token = other75.token;
  applicationId = other75.applicationId;
  organizationId = other75.organizationId;
  __isset = other75.__isset;
}
FollowApplicationRequest& FollowApplicationRequest::operator=(const FollowApplicationRequest& other76) {
  token = other76.token;
  applicationId = other76.applicationId;
  organizationId = other76.organizationId;
  __isset = other76.__isset;
  return *this;
}
void FollowApplicationRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FollowApplicationRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ", " << "organizationId="; (__isset.organizationId ? (out << to_string(organizationId)) : (out << "<null>"));
  out << ")";
}


FollowApplicationResponse::~FollowApplicationResponse() throw() {
}


void FollowApplicationResponse::__set_message(const std::string& val) {
  this->message = val;
__isset.message = true;
}

uint32_t FollowApplicationResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FollowApplicationResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FollowApplicationResponse");

  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->message);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FollowApplicationResponse &a, FollowApplicationResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

FollowApplicationResponse::FollowApplicationResponse(const FollowApplicationResponse& other77) {
  message = other77.message;
  __isset = other77.__isset;
}
FollowApplicationResponse& FollowApplicationResponse::operator=(const FollowApplicationResponse& other78) {
  message = other78.message;
  __isset = other78.__isset;
  return *this;
}
void FollowApplicationResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FollowApplicationResponse(";
  out << "message="; (__isset.message ? (out << to_string(message)) : (out << "<null>"));
  out << ")";
}


UnfollowApplicationRequest::~UnfollowApplicationRequest() throw() {
}


void UnfollowApplicationRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void UnfollowApplicationRequest::__set_applicationId(const uuid& val) {
  this->applicationId = val;
}

void UnfollowApplicationRequest::__set_organizationId(const uuid& val) {
  this->organizationId = val;
__isset.organizationId = true;
}

uint32_t UnfollowApplicationRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organizationId);
          this->__isset.organizationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UnfollowApplicationRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UnfollowApplicationRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.organizationId) {
    xfer += oprot->writeFieldBegin("organizationId", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->organizationId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UnfollowApplicationRequest &a, UnfollowApplicationRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationId, b.applicationId);
  swap(a.organizationId, b.organizationId);
  swap(a.__isset, b.__isset);
}

UnfollowApplicationRequest::UnfollowApplicationRequest(const UnfollowApplicationRequest& other79) {
  token = other79.token;
  applicationId = other79.applicationId;
  organizationId = other79.organizationId;
  __isset = other79.__isset;
}
UnfollowApplicationRequest& UnfollowApplicationRequest::operator=(const UnfollowApplicationRequest& other80) {
  token = other80.token;
  applicationId = other80.applicationId;
  organizationId = other80.organizationId;
  __isset = other80.__isset;
  return *this;
}
void UnfollowApplicationRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UnfollowApplicationRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ", " << "organizationId="; (__isset.organizationId ? (out << to_string(organizationId)) : (out << "<null>"));
  out << ")";
}


UnfollowApplicationResponse::~UnfollowApplicationResponse() throw() {
}


void UnfollowApplicationResponse::__set_message(const std::string& val) {
  this->message = val;
__isset.message = true;
}

uint32_t UnfollowApplicationResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UnfollowApplicationResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UnfollowApplicationResponse");

  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->message);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UnfollowApplicationResponse &a, UnfollowApplicationResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

UnfollowApplicationResponse::UnfollowApplicationResponse(const UnfollowApplicationResponse& other81) {
  message = other81.message;
  __isset = other81.__isset;
}
UnfollowApplicationResponse& UnfollowApplicationResponse::operator=(const UnfollowApplicationResponse& other82) {
  message = other82.message;
  __isset = other82.__isset;
  return *this;
}
void UnfollowApplicationResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UnfollowApplicationResponse(";
  out << "message="; (__isset.message ? (out << to_string(message)) : (out << "<null>"));
  out << ")";
}


UpdateApplicationRequest::~UpdateApplicationRequest() throw() {
}


void UpdateApplicationRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void UpdateApplicationRequest::__set_updatedApplication(const Application& val) {
  this->updatedApplication = val;
}

uint32_t UpdateApplicationRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->updatedApplication.read(iprot);
          this->__isset.updatedApplication = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateApplicationRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateApplicationRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("updatedApplication", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->updatedApplication.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateApplicationRequest &a, UpdateApplicationRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.updatedApplication, b.updatedApplication);
  swap(a.__isset, b.__isset);
}

UpdateApplicationRequest::UpdateApplicationRequest(const UpdateApplicationRequest& other83) {
  token = other83.token;
  updatedApplication = other83.updatedApplication;
  __isset = other83.__isset;
}
UpdateApplicationRequest& UpdateApplicationRequest::operator=(const UpdateApplicationRequest& other84) {
  token = other84.token;
  updatedApplication = other84.updatedApplication;
  __isset = other84.__isset;
  return *this;
}
void UpdateApplicationRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateApplicationRequest(";
  out << "token=" << to_string(token);
  out << ", " << "updatedApplication=" << to_string(updatedApplication);
  out << ")";
}


UpdateApplicationResponse::~UpdateApplicationResponse() throw() {
}


void UpdateApplicationResponse::__set_application(const Application& val) {
  this->application = val;
}

uint32_t UpdateApplicationResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->application.read(iprot);
          this->__isset.application = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateApplicationResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateApplicationResponse");

  xfer += oprot->writeFieldBegin("application", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->application.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateApplicationResponse &a, UpdateApplicationResponse &b) {
  using ::std::swap;
  swap(a.application, b.application);
  swap(a.__isset, b.__isset);
}

UpdateApplicationResponse::UpdateApplicationResponse(const UpdateApplicationResponse& other85) {
  application = other85.application;
  __isset = other85.__isset;
}
UpdateApplicationResponse& UpdateApplicationResponse::operator=(const UpdateApplicationResponse& other86) {
  application = other86.application;
  __isset = other86.__isset;
  return *this;
}
void UpdateApplicationResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateApplicationResponse(";
  out << "application=" << to_string(application);
  out << ")";
}


GetApplicationInfoRequest::~GetApplicationInfoRequest() throw() {
}


void GetApplicationInfoRequest::__set_token(const AuthenticationToken& val) {
  this->token = val;
}

void GetApplicationInfoRequest::__set_applicationId(const uuid& val) {
  this->applicationId = val;
}

void GetApplicationInfoRequest::__set_includeFollowingInfo(const bool val) {
  this->includeFollowingInfo = val;
__isset.includeFollowingInfo = true;
}

uint32_t GetApplicationInfoRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->includeFollowingInfo);
          this->__isset.includeFollowingInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetApplicationInfoRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetApplicationInfoRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.includeFollowingInfo) {
    xfer += oprot->writeFieldBegin("includeFollowingInfo", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->includeFollowingInfo);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetApplicationInfoRequest &a, GetApplicationInfoRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationId, b.applicationId);
  swap(a.includeFollowingInfo, b.includeFollowingInfo);
  swap(a.__isset, b.__isset);
}

GetApplicationInfoRequest::GetApplicationInfoRequest(const GetApplicationInfoRequest& other87) {
  token = other87.token;
  applicationId = other87.applicationId;
  includeFollowingInfo = other87.includeFollowingInfo;
  __isset = other87.__isset;
}
GetApplicationInfoRequest& GetApplicationInfoRequest::operator=(const GetApplicationInfoRequest& other88) {
  token = other88.token;
  applicationId = other88.applicationId;
  includeFollowingInfo = other88.includeFollowingInfo;
  __isset = other88.__isset;
  return *this;
}
void GetApplicationInfoRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetApplicationInfoRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ", " << "includeFollowingInfo="; (__isset.includeFollowingInfo ? (out << to_string(includeFollowingInfo)) : (out << "<null>"));
  out << ")";
}


GetApplicationInfoResponse::~GetApplicationInfoResponse() throw() {
}


void GetApplicationInfoResponse::__set_applicationInfo(const Application& val) {
  this->applicationInfo = val;
}

void GetApplicationInfoResponse::__set_registeredChannels(const std::vector<AromaChannel> & val) {
  this->registeredChannels = val;
}

uint32_t GetApplicationInfoResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->applicationInfo.read(iprot);
          this->__isset.applicationInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->registeredChannels.clear();
            uint32_t _size89;
            ::apache::thrift::protocol::TType _etype92;
            xfer += iprot->readListBegin(_etype92, _size89);
            this->registeredChannels.resize(_size89);
            uint32_t _i93;
            for (_i93 = 0; _i93 < _size89; ++_i93)
            {
              xfer += this->registeredChannels[_i93].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.registeredChannels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetApplicationInfoResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetApplicationInfoResponse");

  xfer += oprot->writeFieldBegin("applicationInfo", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->applicationInfo.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("registeredChannels", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->registeredChannels.size()));
    std::vector<AromaChannel> ::const_iterator _iter94;
    for (_iter94 = this->registeredChannels.begin(); _iter94 != this->registeredChannels.end(); ++_iter94)
    {
      xfer += (*_iter94).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetApplicationInfoResponse &a, GetApplicationInfoResponse &b) {
  using ::std::swap;
  swap(a.applicationInfo, b.applicationInfo);
  swap(a.registeredChannels, b.registeredChannels);
  swap(a.__isset, b.__isset);
}

GetApplicationInfoResponse::GetApplicationInfoResponse(const GetApplicationInfoResponse& other95) {
  applicationInfo = other95.applicationInfo;
  registeredChannels = other95.registeredChannels;
  __isset = other95.__isset;
}
GetApplicationInfoResponse& GetApplicationInfoResponse::operator=(const GetApplicationInfoResponse& other96) {
  applicationInfo = other96.applicationInfo;
  registeredChannels = other96.registeredChannels;
  __isset = other96.__isset;
  return *this;
}
void GetApplicationInfoResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetApplicationInfoResponse(";
  out << "applicationInfo=" << to_string(applicationInfo);
  out << ", " << "registeredChannels=" << to_string(registeredChannels);
  out << ")";
}


GetBuzzRequest::~GetBuzzRequest() throw() {
}


void GetBuzzRequest::__set_token(const UserToken& val) {
  this->token = val;
}

uint32_t GetBuzzRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetBuzzRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetBuzzRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetBuzzRequest &a, GetBuzzRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.__isset, b.__isset);
}

GetBuzzRequest::GetBuzzRequest(const GetBuzzRequest& other97) {
  token = other97.token;
  __isset = other97.__isset;
}
GetBuzzRequest& GetBuzzRequest::operator=(const GetBuzzRequest& other98) {
  token = other98.token;
  __isset = other98.__isset;
  return *this;
}
void GetBuzzRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetBuzzRequest(";
  out << "token=" << to_string(token);
  out << ")";
}


GetBuzzResponse::~GetBuzzResponse() throw() {
}


void GetBuzzResponse::__set_freshUsers(const std::vector<User> & val) {
  this->freshUsers = val;
}

void GetBuzzResponse::__set_freshApplications(const std::vector<Application> & val) {
  this->freshApplications = val;
}

void GetBuzzResponse::__set_failedHealthChecks(const std::vector<HealthCheckFailed> & val) {
  this->failedHealthChecks = val;
}

void GetBuzzResponse::__set_generalEvents(const std::vector< ::aroma::thrift::events::GeneralEvent> & val) {
  this->generalEvents = val;
}

uint32_t GetBuzzResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->freshUsers.clear();
            uint32_t _size99;
            ::apache::thrift::protocol::TType _etype102;
            xfer += iprot->readListBegin(_etype102, _size99);
            this->freshUsers.resize(_size99);
            uint32_t _i103;
            for (_i103 = 0; _i103 < _size99; ++_i103)
            {
              xfer += this->freshUsers[_i103].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.freshUsers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->freshApplications.clear();
            uint32_t _size104;
            ::apache::thrift::protocol::TType _etype107;
            xfer += iprot->readListBegin(_etype107, _size104);
            this->freshApplications.resize(_size104);
            uint32_t _i108;
            for (_i108 = 0; _i108 < _size104; ++_i108)
            {
              xfer += this->freshApplications[_i108].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.freshApplications = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->failedHealthChecks.clear();
            uint32_t _size109;
            ::apache::thrift::protocol::TType _etype112;
            xfer += iprot->readListBegin(_etype112, _size109);
            this->failedHealthChecks.resize(_size109);
            uint32_t _i113;
            for (_i113 = 0; _i113 < _size109; ++_i113)
            {
              xfer += this->failedHealthChecks[_i113].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.failedHealthChecks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->generalEvents.clear();
            uint32_t _size114;
            ::apache::thrift::protocol::TType _etype117;
            xfer += iprot->readListBegin(_etype117, _size114);
            this->generalEvents.resize(_size114);
            uint32_t _i118;
            for (_i118 = 0; _i118 < _size114; ++_i118)
            {
              xfer += this->generalEvents[_i118].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.generalEvents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetBuzzResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetBuzzResponse");

  xfer += oprot->writeFieldBegin("freshUsers", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->freshUsers.size()));
    std::vector<User> ::const_iterator _iter119;
    for (_iter119 = this->freshUsers.begin(); _iter119 != this->freshUsers.end(); ++_iter119)
    {
      xfer += (*_iter119).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("freshApplications", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->freshApplications.size()));
    std::vector<Application> ::const_iterator _iter120;
    for (_iter120 = this->freshApplications.begin(); _iter120 != this->freshApplications.end(); ++_iter120)
    {
      xfer += (*_iter120).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("failedHealthChecks", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->failedHealthChecks.size()));
    std::vector<HealthCheckFailed> ::const_iterator _iter121;
    for (_iter121 = this->failedHealthChecks.begin(); _iter121 != this->failedHealthChecks.end(); ++_iter121)
    {
      xfer += (*_iter121).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("generalEvents", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->generalEvents.size()));
    std::vector< ::aroma::thrift::events::GeneralEvent> ::const_iterator _iter122;
    for (_iter122 = this->generalEvents.begin(); _iter122 != this->generalEvents.end(); ++_iter122)
    {
      xfer += (*_iter122).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetBuzzResponse &a, GetBuzzResponse &b) {
  using ::std::swap;
  swap(a.freshUsers, b.freshUsers);
  swap(a.freshApplications, b.freshApplications);
  swap(a.failedHealthChecks, b.failedHealthChecks);
  swap(a.generalEvents, b.generalEvents);
  swap(a.__isset, b.__isset);
}

GetBuzzResponse::GetBuzzResponse(const GetBuzzResponse& other123) {
  freshUsers = other123.freshUsers;
  freshApplications = other123.freshApplications;
  failedHealthChecks = other123.failedHealthChecks;
  generalEvents = other123.generalEvents;
  __isset = other123.__isset;
}
GetBuzzResponse& GetBuzzResponse::operator=(const GetBuzzResponse& other124) {
  freshUsers = other124.freshUsers;
  freshApplications = other124.freshApplications;
  failedHealthChecks = other124.failedHealthChecks;
  generalEvents = other124.generalEvents;
  __isset = other124.__isset;
  return *this;
}
void GetBuzzResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetBuzzResponse(";
  out << "freshUsers=" << to_string(freshUsers);
  out << ", " << "freshApplications=" << to_string(freshApplications);
  out << ", " << "failedHealthChecks=" << to_string(failedHealthChecks);
  out << ", " << "generalEvents=" << to_string(generalEvents);
  out << ")";
}


GetDashboardRequest::~GetDashboardRequest() throw() {
}


void GetDashboardRequest::__set_token(const UserToken& val) {
  this->token = val;
}

uint32_t GetDashboardRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetDashboardRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetDashboardRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetDashboardRequest &a, GetDashboardRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.__isset, b.__isset);
}

GetDashboardRequest::GetDashboardRequest(const GetDashboardRequest& other125) {
  token = other125.token;
  __isset = other125.__isset;
}
GetDashboardRequest& GetDashboardRequest::operator=(const GetDashboardRequest& other126) {
  token = other126.token;
  __isset = other126.__isset;
  return *this;
}
void GetDashboardRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetDashboardRequest(";
  out << "token=" << to_string(token);
  out << ")";
}


GetDashboardResponse::~GetDashboardResponse() throw() {
}


void GetDashboardResponse::__set_unreadMessageCount(const int val) {
  this->unreadMessageCount = val;
}

void GetDashboardResponse::__set_totalMessagesLastHour(const int val) {
  this->totalMessagesLastHour = val;
}

void GetDashboardResponse::__set_totalMessagesLast24hrs(const int val) {
  this->totalMessagesLast24hrs = val;
}

void GetDashboardResponse::__set_recentMessages(const std::vector< ::tech::aroma::thrift::Message> & val) {
  this->recentMessages = val;
}

void GetDashboardResponse::__set_numberOfLowUrgencyMessages(const int val) {
  this->numberOfLowUrgencyMessages = val;
}

void GetDashboardResponse::__set_numberOfMediumUrgencyMessages(const int val) {
  this->numberOfMediumUrgencyMessages = val;
}

void GetDashboardResponse::__set_numberOfHighUrgencyMessages(const int val) {
  this->numberOfHighUrgencyMessages = val;
}

uint32_t GetDashboardResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unreadMessageCount);
          this->__isset.unreadMessageCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalMessagesLastHour);
          this->__isset.totalMessagesLastHour = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalMessagesLast24hrs);
          this->__isset.totalMessagesLast24hrs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->recentMessages.clear();
            uint32_t _size127;
            ::apache::thrift::protocol::TType _etype130;
            xfer += iprot->readListBegin(_etype130, _size127);
            this->recentMessages.resize(_size127);
            uint32_t _i131;
            for (_i131 = 0; _i131 < _size127; ++_i131)
            {
              xfer += this->recentMessages[_i131].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.recentMessages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numberOfLowUrgencyMessages);
          this->__isset.numberOfLowUrgencyMessages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numberOfMediumUrgencyMessages);
          this->__isset.numberOfMediumUrgencyMessages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numberOfHighUrgencyMessages);
          this->__isset.numberOfHighUrgencyMessages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetDashboardResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetDashboardResponse");

  xfer += oprot->writeFieldBegin("unreadMessageCount", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->unreadMessageCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalMessagesLastHour", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->totalMessagesLastHour);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalMessagesLast24hrs", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->totalMessagesLast24hrs);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recentMessages", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->recentMessages.size()));
    std::vector< ::tech::aroma::thrift::Message> ::const_iterator _iter132;
    for (_iter132 = this->recentMessages.begin(); _iter132 != this->recentMessages.end(); ++_iter132)
    {
      xfer += (*_iter132).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numberOfLowUrgencyMessages", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->numberOfLowUrgencyMessages);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numberOfMediumUrgencyMessages", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->numberOfMediumUrgencyMessages);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numberOfHighUrgencyMessages", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->numberOfHighUrgencyMessages);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetDashboardResponse &a, GetDashboardResponse &b) {
  using ::std::swap;
  swap(a.unreadMessageCount, b.unreadMessageCount);
  swap(a.totalMessagesLastHour, b.totalMessagesLastHour);
  swap(a.totalMessagesLast24hrs, b.totalMessagesLast24hrs);
  swap(a.recentMessages, b.recentMessages);
  swap(a.numberOfLowUrgencyMessages, b.numberOfLowUrgencyMessages);
  swap(a.numberOfMediumUrgencyMessages, b.numberOfMediumUrgencyMessages);
  swap(a.numberOfHighUrgencyMessages, b.numberOfHighUrgencyMessages);
  swap(a.__isset, b.__isset);
}

GetDashboardResponse::GetDashboardResponse(const GetDashboardResponse& other133) {
  unreadMessageCount = other133.unreadMessageCount;
  totalMessagesLastHour = other133.totalMessagesLastHour;
  totalMessagesLast24hrs = other133.totalMessagesLast24hrs;
  recentMessages = other133.recentMessages;
  numberOfLowUrgencyMessages = other133.numberOfLowUrgencyMessages;
  numberOfMediumUrgencyMessages = other133.numberOfMediumUrgencyMessages;
  numberOfHighUrgencyMessages = other133.numberOfHighUrgencyMessages;
  __isset = other133.__isset;
}
GetDashboardResponse& GetDashboardResponse::operator=(const GetDashboardResponse& other134) {
  unreadMessageCount = other134.unreadMessageCount;
  totalMessagesLastHour = other134.totalMessagesLastHour;
  totalMessagesLast24hrs = other134.totalMessagesLast24hrs;
  recentMessages = other134.recentMessages;
  numberOfLowUrgencyMessages = other134.numberOfLowUrgencyMessages;
  numberOfMediumUrgencyMessages = other134.numberOfMediumUrgencyMessages;
  numberOfHighUrgencyMessages = other134.numberOfHighUrgencyMessages;
  __isset = other134.__isset;
  return *this;
}
void GetDashboardResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetDashboardResponse(";
  out << "unreadMessageCount=" << to_string(unreadMessageCount);
  out << ", " << "totalMessagesLastHour=" << to_string(totalMessagesLastHour);
  out << ", " << "totalMessagesLast24hrs=" << to_string(totalMessagesLast24hrs);
  out << ", " << "recentMessages=" << to_string(recentMessages);
  out << ", " << "numberOfLowUrgencyMessages=" << to_string(numberOfLowUrgencyMessages);
  out << ", " << "numberOfMediumUrgencyMessages=" << to_string(numberOfMediumUrgencyMessages);
  out << ", " << "numberOfHighUrgencyMessages=" << to_string(numberOfHighUrgencyMessages);
  out << ")";
}


GetInboxRequest::~GetInboxRequest() throw() {
}


void GetInboxRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void GetInboxRequest::__set_limit(const int val) {
  this->limit = val;
__isset.limit = true;
}

uint32_t GetInboxRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetInboxRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetInboxRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.limit) {
    xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->limit);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetInboxRequest &a, GetInboxRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

GetInboxRequest::GetInboxRequest(const GetInboxRequest& other135) {
  token = other135.token;
  limit = other135.limit;
  __isset = other135.__isset;
}
GetInboxRequest& GetInboxRequest::operator=(const GetInboxRequest& other136) {
  token = other136.token;
  limit = other136.limit;
  __isset = other136.__isset;
  return *this;
}
void GetInboxRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetInboxRequest(";
  out << "token=" << to_string(token);
  out << ", " << "limit="; (__isset.limit ? (out << to_string(limit)) : (out << "<null>"));
  out << ")";
}


GetInboxResponse::~GetInboxResponse() throw() {
}


void GetInboxResponse::__set_messages(const std::vector< ::tech::aroma::thrift::Message> & val) {
  this->messages = val;
}

uint32_t GetInboxResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->messages.clear();
            uint32_t _size137;
            ::apache::thrift::protocol::TType _etype140;
            xfer += iprot->readListBegin(_etype140, _size137);
            this->messages.resize(_size137);
            uint32_t _i141;
            for (_i141 = 0; _i141 < _size137; ++_i141)
            {
              xfer += this->messages[_i141].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.messages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetInboxResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetInboxResponse");

  xfer += oprot->writeFieldBegin("messages", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->messages.size()));
    std::vector< ::tech::aroma::thrift::Message> ::const_iterator _iter142;
    for (_iter142 = this->messages.begin(); _iter142 != this->messages.end(); ++_iter142)
    {
      xfer += (*_iter142).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetInboxResponse &a, GetInboxResponse &b) {
  using ::std::swap;
  swap(a.messages, b.messages);
  swap(a.__isset, b.__isset);
}

GetInboxResponse::GetInboxResponse(const GetInboxResponse& other143) {
  messages = other143.messages;
  __isset = other143.__isset;
}
GetInboxResponse& GetInboxResponse::operator=(const GetInboxResponse& other144) {
  messages = other144.messages;
  __isset = other144.__isset;
  return *this;
}
void GetInboxResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetInboxResponse(";
  out << "messages=" << to_string(messages);
  out << ")";
}


GetApplicationMessagesRequest::~GetApplicationMessagesRequest() throw() {
}


void GetApplicationMessagesRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void GetApplicationMessagesRequest::__set_applicationId(const uuid& val) {
  this->applicationId = val;
}

void GetApplicationMessagesRequest::__set_limit(const int val) {
  this->limit = val;
__isset.limit = true;
}

uint32_t GetApplicationMessagesRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetApplicationMessagesRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetApplicationMessagesRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.limit) {
    xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->limit);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetApplicationMessagesRequest &a, GetApplicationMessagesRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationId, b.applicationId);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

GetApplicationMessagesRequest::GetApplicationMessagesRequest(const GetApplicationMessagesRequest& other145) {
  token = other145.token;
  applicationId = other145.applicationId;
  limit = other145.limit;
  __isset = other145.__isset;
}
GetApplicationMessagesRequest& GetApplicationMessagesRequest::operator=(const GetApplicationMessagesRequest& other146) {
  token = other146.token;
  applicationId = other146.applicationId;
  limit = other146.limit;
  __isset = other146.__isset;
  return *this;
}
void GetApplicationMessagesRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetApplicationMessagesRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ", " << "limit="; (__isset.limit ? (out << to_string(limit)) : (out << "<null>"));
  out << ")";
}


GetApplicationMessagesResponse::~GetApplicationMessagesResponse() throw() {
}


void GetApplicationMessagesResponse::__set_messages(const std::vector< ::tech::aroma::thrift::Message> & val) {
  this->messages = val;
}

void GetApplicationMessagesResponse::__set_totalMessagesMatching(const int val) {
  this->totalMessagesMatching = val;
__isset.totalMessagesMatching = true;
}

uint32_t GetApplicationMessagesResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->messages.clear();
            uint32_t _size147;
            ::apache::thrift::protocol::TType _etype150;
            xfer += iprot->readListBegin(_etype150, _size147);
            this->messages.resize(_size147);
            uint32_t _i151;
            for (_i151 = 0; _i151 < _size147; ++_i151)
            {
              xfer += this->messages[_i151].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.messages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalMessagesMatching);
          this->__isset.totalMessagesMatching = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetApplicationMessagesResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetApplicationMessagesResponse");

  xfer += oprot->writeFieldBegin("messages", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->messages.size()));
    std::vector< ::tech::aroma::thrift::Message> ::const_iterator _iter152;
    for (_iter152 = this->messages.begin(); _iter152 != this->messages.end(); ++_iter152)
    {
      xfer += (*_iter152).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.totalMessagesMatching) {
    xfer += oprot->writeFieldBegin("totalMessagesMatching", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->totalMessagesMatching);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetApplicationMessagesResponse &a, GetApplicationMessagesResponse &b) {
  using ::std::swap;
  swap(a.messages, b.messages);
  swap(a.totalMessagesMatching, b.totalMessagesMatching);
  swap(a.__isset, b.__isset);
}

GetApplicationMessagesResponse::GetApplicationMessagesResponse(const GetApplicationMessagesResponse& other153) {
  messages = other153.messages;
  totalMessagesMatching = other153.totalMessagesMatching;
  __isset = other153.__isset;
}
GetApplicationMessagesResponse& GetApplicationMessagesResponse::operator=(const GetApplicationMessagesResponse& other154) {
  messages = other154.messages;
  totalMessagesMatching = other154.totalMessagesMatching;
  __isset = other154.__isset;
  return *this;
}
void GetApplicationMessagesResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetApplicationMessagesResponse(";
  out << "messages=" << to_string(messages);
  out << ", " << "totalMessagesMatching="; (__isset.totalMessagesMatching ? (out << to_string(totalMessagesMatching)) : (out << "<null>"));
  out << ")";
}


GetFullMessageRequest::~GetFullMessageRequest() throw() {
}


void GetFullMessageRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void GetFullMessageRequest::__set_messageId(const uuid& val) {
  this->messageId = val;
}

void GetFullMessageRequest::__set_applicationId(const uuid& val) {
  this->applicationId = val;
}

uint32_t GetFullMessageRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetFullMessageRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetFullMessageRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->messageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->applicationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetFullMessageRequest &a, GetFullMessageRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.messageId, b.messageId);
  swap(a.applicationId, b.applicationId);
  swap(a.__isset, b.__isset);
}

GetFullMessageRequest::GetFullMessageRequest(const GetFullMessageRequest& other155) {
  token = other155.token;
  messageId = other155.messageId;
  applicationId = other155.applicationId;
  __isset = other155.__isset;
}
GetFullMessageRequest& GetFullMessageRequest::operator=(const GetFullMessageRequest& other156) {
  token = other156.token;
  messageId = other156.messageId;
  applicationId = other156.applicationId;
  __isset = other156.__isset;
  return *this;
}
void GetFullMessageRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetFullMessageRequest(";
  out << "token=" << to_string(token);
  out << ", " << "messageId=" << to_string(messageId);
  out << ", " << "applicationId=" << to_string(applicationId);
  out << ")";
}


GetFullMessageResponse::~GetFullMessageResponse() throw() {
}


void GetFullMessageResponse::__set_fullMessage(const  ::tech::aroma::thrift::Message& val) {
  this->fullMessage = val;
}

uint32_t GetFullMessageResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->fullMessage.read(iprot);
          this->__isset.fullMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetFullMessageResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetFullMessageResponse");

  xfer += oprot->writeFieldBegin("fullMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->fullMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetFullMessageResponse &a, GetFullMessageResponse &b) {
  using ::std::swap;
  swap(a.fullMessage, b.fullMessage);
  swap(a.__isset, b.__isset);
}

GetFullMessageResponse::GetFullMessageResponse(const GetFullMessageResponse& other157) {
  fullMessage = other157.fullMessage;
  __isset = other157.__isset;
}
GetFullMessageResponse& GetFullMessageResponse::operator=(const GetFullMessageResponse& other158) {
  fullMessage = other158.fullMessage;
  __isset = other158.__isset;
  return *this;
}
void GetFullMessageResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetFullMessageResponse(";
  out << "fullMessage=" << to_string(fullMessage);
  out << ")";
}


GetMediaRequest::~GetMediaRequest() throw() {
}


void GetMediaRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void GetMediaRequest::__set_mediaId(const uuid& val) {
  this->mediaId = val;
}

uint32_t GetMediaRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mediaId);
          this->__isset.mediaId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetMediaRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetMediaRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mediaId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->mediaId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetMediaRequest &a, GetMediaRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.mediaId, b.mediaId);
  swap(a.__isset, b.__isset);
}

GetMediaRequest::GetMediaRequest(const GetMediaRequest& other159) {
  token = other159.token;
  mediaId = other159.mediaId;
  __isset = other159.__isset;
}
GetMediaRequest& GetMediaRequest::operator=(const GetMediaRequest& other160) {
  token = other160.token;
  mediaId = other160.mediaId;
  __isset = other160.__isset;
  return *this;
}
void GetMediaRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetMediaRequest(";
  out << "token=" << to_string(token);
  out << ", " << "mediaId=" << to_string(mediaId);
  out << ")";
}


GetMediaResponse::~GetMediaResponse() throw() {
}


void GetMediaResponse::__set_image(const  ::tech::aroma::thrift::Image& val) {
  this->image = val;
}

uint32_t GetMediaResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->image.read(iprot);
          this->__isset.image = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetMediaResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetMediaResponse");

  xfer += oprot->writeFieldBegin("image", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->image.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetMediaResponse &a, GetMediaResponse &b) {
  using ::std::swap;
  swap(a.image, b.image);
  swap(a.__isset, b.__isset);
}

GetMediaResponse::GetMediaResponse(const GetMediaResponse& other161) {
  image = other161.image;
  __isset = other161.__isset;
}
GetMediaResponse& GetMediaResponse::operator=(const GetMediaResponse& other162) {
  image = other162.image;
  __isset = other162.__isset;
  return *this;
}
void GetMediaResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetMediaResponse(";
  out << "image=" << to_string(image);
  out << ")";
}


GetApplicationsFollowedByRequest::~GetApplicationsFollowedByRequest() throw() {
}


void GetApplicationsFollowedByRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void GetApplicationsFollowedByRequest::__set_userId(const uuid& val) {
  this->userId = val;
__isset.userId = true;
}

uint32_t GetApplicationsFollowedByRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userId);
          this->__isset.userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetApplicationsFollowedByRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetApplicationsFollowedByRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.userId) {
    xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->userId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetApplicationsFollowedByRequest &a, GetApplicationsFollowedByRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.userId, b.userId);
  swap(a.__isset, b.__isset);
}

GetApplicationsFollowedByRequest::GetApplicationsFollowedByRequest(const GetApplicationsFollowedByRequest& other163) {
  token = other163.token;
  userId = other163.userId;
  __isset = other163.__isset;
}
GetApplicationsFollowedByRequest& GetApplicationsFollowedByRequest::operator=(const GetApplicationsFollowedByRequest& other164) {
  token = other164.token;
  userId = other164.userId;
  __isset = other164.__isset;
  return *this;
}
void GetApplicationsFollowedByRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetApplicationsFollowedByRequest(";
  out << "token=" << to_string(token);
  out << ", " << "userId="; (__isset.userId ? (out << to_string(userId)) : (out << "<null>"));
  out << ")";
}


GetApplicationsFollowedByResponse::~GetApplicationsFollowedByResponse() throw() {
}


void GetApplicationsFollowedByResponse::__set_applications(const std::vector<Application> & val) {
  this->applications = val;
}

uint32_t GetApplicationsFollowedByResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->applications.clear();
            uint32_t _size165;
            ::apache::thrift::protocol::TType _etype168;
            xfer += iprot->readListBegin(_etype168, _size165);
            this->applications.resize(_size165);
            uint32_t _i169;
            for (_i169 = 0; _i169 < _size165; ++_i169)
            {
              xfer += this->applications[_i169].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.applications = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetApplicationsFollowedByResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetApplicationsFollowedByResponse");

  xfer += oprot->writeFieldBegin("applications", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->applications.size()));
    std::vector<Application> ::const_iterator _iter170;
    for (_iter170 = this->applications.begin(); _iter170 != this->applications.end(); ++_iter170)
    {
      xfer += (*_iter170).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetApplicationsFollowedByResponse &a, GetApplicationsFollowedByResponse &b) {
  using ::std::swap;
  swap(a.applications, b.applications);
  swap(a.__isset, b.__isset);
}

GetApplicationsFollowedByResponse::GetApplicationsFollowedByResponse(const GetApplicationsFollowedByResponse& other171) {
  applications = other171.applications;
  __isset = other171.__isset;
}
GetApplicationsFollowedByResponse& GetApplicationsFollowedByResponse::operator=(const GetApplicationsFollowedByResponse& other172) {
  applications = other172.applications;
  __isset = other172.__isset;
  return *this;
}
void GetApplicationsFollowedByResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetApplicationsFollowedByResponse(";
  out << "applications=" << to_string(applications);
  out << ")";
}


GetApplicationsOwnedByRequest::~GetApplicationsOwnedByRequest() throw() {
}


void GetApplicationsOwnedByRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void GetApplicationsOwnedByRequest::__set_userId(const uuid& val) {
  this->userId = val;
__isset.userId = true;
}

uint32_t GetApplicationsOwnedByRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userId);
          this->__isset.userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetApplicationsOwnedByRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetApplicationsOwnedByRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.userId) {
    xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->userId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetApplicationsOwnedByRequest &a, GetApplicationsOwnedByRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.userId, b.userId);
  swap(a.__isset, b.__isset);
}

GetApplicationsOwnedByRequest::GetApplicationsOwnedByRequest(const GetApplicationsOwnedByRequest& other173) {
  token = other173.token;
  userId = other173.userId;
  __isset = other173.__isset;
}
GetApplicationsOwnedByRequest& GetApplicationsOwnedByRequest::operator=(const GetApplicationsOwnedByRequest& other174) {
  token = other174.token;
  userId = other174.userId;
  __isset = other174.__isset;
  return *this;
}
void GetApplicationsOwnedByRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetApplicationsOwnedByRequest(";
  out << "token=" << to_string(token);
  out << ", " << "userId="; (__isset.userId ? (out << to_string(userId)) : (out << "<null>"));
  out << ")";
}


GetApplicationsOwnedByResponse::~GetApplicationsOwnedByResponse() throw() {
}


void GetApplicationsOwnedByResponse::__set_applications(const std::vector<Application> & val) {
  this->applications = val;
}

uint32_t GetApplicationsOwnedByResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->applications.clear();
            uint32_t _size175;
            ::apache::thrift::protocol::TType _etype178;
            xfer += iprot->readListBegin(_etype178, _size175);
            this->applications.resize(_size175);
            uint32_t _i179;
            for (_i179 = 0; _i179 < _size175; ++_i179)
            {
              xfer += this->applications[_i179].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.applications = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetApplicationsOwnedByResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetApplicationsOwnedByResponse");

  xfer += oprot->writeFieldBegin("applications", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->applications.size()));
    std::vector<Application> ::const_iterator _iter180;
    for (_iter180 = this->applications.begin(); _iter180 != this->applications.end(); ++_iter180)
    {
      xfer += (*_iter180).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetApplicationsOwnedByResponse &a, GetApplicationsOwnedByResponse &b) {
  using ::std::swap;
  swap(a.applications, b.applications);
  swap(a.__isset, b.__isset);
}

GetApplicationsOwnedByResponse::GetApplicationsOwnedByResponse(const GetApplicationsOwnedByResponse& other181) {
  applications = other181.applications;
  __isset = other181.__isset;
}
GetApplicationsOwnedByResponse& GetApplicationsOwnedByResponse::operator=(const GetApplicationsOwnedByResponse& other182) {
  applications = other182.applications;
  __isset = other182.__isset;
  return *this;
}
void GetApplicationsOwnedByResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetApplicationsOwnedByResponse(";
  out << "applications=" << to_string(applications);
  out << ")";
}


GetMySavedChannelsRequest::~GetMySavedChannelsRequest() throw() {
}


void GetMySavedChannelsRequest::__set_token(const UserToken& val) {
  this->token = val;
}

uint32_t GetMySavedChannelsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetMySavedChannelsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetMySavedChannelsRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetMySavedChannelsRequest &a, GetMySavedChannelsRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.__isset, b.__isset);
}

GetMySavedChannelsRequest::GetMySavedChannelsRequest(const GetMySavedChannelsRequest& other183) {
  token = other183.token;
  __isset = other183.__isset;
}
GetMySavedChannelsRequest& GetMySavedChannelsRequest::operator=(const GetMySavedChannelsRequest& other184) {
  token = other184.token;
  __isset = other184.__isset;
  return *this;
}
void GetMySavedChannelsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetMySavedChannelsRequest(";
  out << "token=" << to_string(token);
  out << ")";
}


GetMySavedChannelsResponse::~GetMySavedChannelsResponse() throw() {
}


void GetMySavedChannelsResponse::__set_channels(const std::vector<AromaChannel> & val) {
  this->channels = val;
}

uint32_t GetMySavedChannelsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->channels.clear();
            uint32_t _size185;
            ::apache::thrift::protocol::TType _etype188;
            xfer += iprot->readListBegin(_etype188, _size185);
            this->channels.resize(_size185);
            uint32_t _i189;
            for (_i189 = 0; _i189 < _size185; ++_i189)
            {
              xfer += this->channels[_i189].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.channels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetMySavedChannelsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetMySavedChannelsResponse");

  xfer += oprot->writeFieldBegin("channels", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->channels.size()));
    std::vector<AromaChannel> ::const_iterator _iter190;
    for (_iter190 = this->channels.begin(); _iter190 != this->channels.end(); ++_iter190)
    {
      xfer += (*_iter190).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetMySavedChannelsResponse &a, GetMySavedChannelsResponse &b) {
  using ::std::swap;
  swap(a.channels, b.channels);
  swap(a.__isset, b.__isset);
}

GetMySavedChannelsResponse::GetMySavedChannelsResponse(const GetMySavedChannelsResponse& other191) {
  channels = other191.channels;
  __isset = other191.__isset;
}
GetMySavedChannelsResponse& GetMySavedChannelsResponse::operator=(const GetMySavedChannelsResponse& other192) {
  channels = other192.channels;
  __isset = other192.__isset;
  return *this;
}
void GetMySavedChannelsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetMySavedChannelsResponse(";
  out << "channels=" << to_string(channels);
  out << ")";
}


GetActivityRequest::~GetActivityRequest() throw() {
}


void GetActivityRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void GetActivityRequest::__set_limit(const int val) {
  this->limit = val;
__isset.limit = true;
}

uint32_t GetActivityRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetActivityRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetActivityRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.limit) {
    xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->limit);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetActivityRequest &a, GetActivityRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

GetActivityRequest::GetActivityRequest(const GetActivityRequest& other193) {
  token = other193.token;
  limit = other193.limit;
  __isset = other193.__isset;
}
GetActivityRequest& GetActivityRequest::operator=(const GetActivityRequest& other194) {
  token = other194.token;
  limit = other194.limit;
  __isset = other194.__isset;
  return *this;
}
void GetActivityRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetActivityRequest(";
  out << "token=" << to_string(token);
  out << ", " << "limit="; (__isset.limit ? (out << to_string(limit)) : (out << "<null>"));
  out << ")";
}


GetActivityResponse::~GetActivityResponse() throw() {
}


void GetActivityResponse::__set_events(const std::vector< ::aroma::thrift::events::Event> & val) {
  this->events = val;
}

uint32_t GetActivityResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->events.clear();
            uint32_t _size195;
            ::apache::thrift::protocol::TType _etype198;
            xfer += iprot->readListBegin(_etype198, _size195);
            this->events.resize(_size195);
            uint32_t _i199;
            for (_i199 = 0; _i199 < _size195; ++_i199)
            {
              xfer += this->events[_i199].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.events = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetActivityResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetActivityResponse");

  xfer += oprot->writeFieldBegin("events", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->events.size()));
    std::vector< ::aroma::thrift::events::Event> ::const_iterator _iter200;
    for (_iter200 = this->events.begin(); _iter200 != this->events.end(); ++_iter200)
    {
      xfer += (*_iter200).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetActivityResponse &a, GetActivityResponse &b) {
  using ::std::swap;
  swap(a.events, b.events);
  swap(a.__isset, b.__isset);
}

GetActivityResponse::GetActivityResponse(const GetActivityResponse& other201) {
  events = other201.events;
  __isset = other201.__isset;
}
GetActivityResponse& GetActivityResponse::operator=(const GetActivityResponse& other202) {
  events = other202.events;
  __isset = other202.__isset;
  return *this;
}
void GetActivityResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetActivityResponse(";
  out << "events=" << to_string(events);
  out << ")";
}


GetServiceAnnouncementsRequest::~GetServiceAnnouncementsRequest() throw() {
}


void GetServiceAnnouncementsRequest::__set_token(const UserToken& val) {
  this->token = val;
}

uint32_t GetServiceAnnouncementsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetServiceAnnouncementsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetServiceAnnouncementsRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetServiceAnnouncementsRequest &a, GetServiceAnnouncementsRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.__isset, b.__isset);
}

GetServiceAnnouncementsRequest::GetServiceAnnouncementsRequest(const GetServiceAnnouncementsRequest& other203) {
  token = other203.token;
  __isset = other203.__isset;
}
GetServiceAnnouncementsRequest& GetServiceAnnouncementsRequest::operator=(const GetServiceAnnouncementsRequest& other204) {
  token = other204.token;
  __isset = other204.__isset;
  return *this;
}
void GetServiceAnnouncementsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetServiceAnnouncementsRequest(";
  out << "token=" << to_string(token);
  out << ")";
}


GetServiceAnnouncementsResponse::~GetServiceAnnouncementsResponse() throw() {
}


void GetServiceAnnouncementsResponse::__set_serviceAnnouncements(const std::vector< ::tech::aroma::thrift::ServiceAnnouncement> & val) {
  this->serviceAnnouncements = val;
__isset.serviceAnnouncements = true;
}

uint32_t GetServiceAnnouncementsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->serviceAnnouncements.clear();
            uint32_t _size205;
            ::apache::thrift::protocol::TType _etype208;
            xfer += iprot->readListBegin(_etype208, _size205);
            this->serviceAnnouncements.resize(_size205);
            uint32_t _i209;
            for (_i209 = 0; _i209 < _size205; ++_i209)
            {
              xfer += this->serviceAnnouncements[_i209].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.serviceAnnouncements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetServiceAnnouncementsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetServiceAnnouncementsResponse");

  if (this->__isset.serviceAnnouncements) {
    xfer += oprot->writeFieldBegin("serviceAnnouncements", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->serviceAnnouncements.size()));
      std::vector< ::tech::aroma::thrift::ServiceAnnouncement> ::const_iterator _iter210;
      for (_iter210 = this->serviceAnnouncements.begin(); _iter210 != this->serviceAnnouncements.end(); ++_iter210)
      {
        xfer += (*_iter210).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetServiceAnnouncementsResponse &a, GetServiceAnnouncementsResponse &b) {
  using ::std::swap;
  swap(a.serviceAnnouncements, b.serviceAnnouncements);
  swap(a.__isset, b.__isset);
}

GetServiceAnnouncementsResponse::GetServiceAnnouncementsResponse(const GetServiceAnnouncementsResponse& other211) {
  serviceAnnouncements = other211.serviceAnnouncements;
  __isset = other211.__isset;
}
GetServiceAnnouncementsResponse& GetServiceAnnouncementsResponse::operator=(const GetServiceAnnouncementsResponse& other212) {
  serviceAnnouncements = other212.serviceAnnouncements;
  __isset = other212.__isset;
  return *this;
}
void GetServiceAnnouncementsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetServiceAnnouncementsResponse(";
  out << "serviceAnnouncements="; (__isset.serviceAnnouncements ? (out << to_string(serviceAnnouncements)) : (out << "<null>"));
  out << ")";
}


GetUserInfoRequest::~GetUserInfoRequest() throw() {
}


void GetUserInfoRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void GetUserInfoRequest::__set_userId(const uuid& val) {
  this->userId = val;
}

void GetUserInfoRequest::__set_email(const std::string& val) {
  this->email = val;
__isset.email = true;
}

uint32_t GetUserInfoRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userId);
          this->__isset.userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetUserInfoRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetUserInfoRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->userId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.email) {
    xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->email);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetUserInfoRequest &a, GetUserInfoRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.userId, b.userId);
  swap(a.email, b.email);
  swap(a.__isset, b.__isset);
}

GetUserInfoRequest::GetUserInfoRequest(const GetUserInfoRequest& other213) {
  token = other213.token;
  userId = other213.userId;
  email = other213.email;
  __isset = other213.__isset;
}
GetUserInfoRequest& GetUserInfoRequest::operator=(const GetUserInfoRequest& other214) {
  token = other214.token;
  userId = other214.userId;
  email = other214.email;
  __isset = other214.__isset;
  return *this;
}
void GetUserInfoRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetUserInfoRequest(";
  out << "token=" << to_string(token);
  out << ", " << "userId=" << to_string(userId);
  out << ", " << "email="; (__isset.email ? (out << to_string(email)) : (out << "<null>"));
  out << ")";
}


GetUserInfoResponse::~GetUserInfoResponse() throw() {
}


void GetUserInfoResponse::__set_userInfo(const User& val) {
  this->userInfo = val;
}

uint32_t GetUserInfoResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->userInfo.read(iprot);
          this->__isset.userInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetUserInfoResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetUserInfoResponse");

  xfer += oprot->writeFieldBegin("userInfo", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->userInfo.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetUserInfoResponse &a, GetUserInfoResponse &b) {
  using ::std::swap;
  swap(a.userInfo, b.userInfo);
  swap(a.__isset, b.__isset);
}

GetUserInfoResponse::GetUserInfoResponse(const GetUserInfoResponse& other215) {
  userInfo = other215.userInfo;
  __isset = other215.__isset;
}
GetUserInfoResponse& GetUserInfoResponse::operator=(const GetUserInfoResponse& other216) {
  userInfo = other216.userInfo;
  __isset = other216.__isset;
  return *this;
}
void GetUserInfoResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetUserInfoResponse(";
  out << "userInfo=" << to_string(userInfo);
  out << ")";
}


SearchForApplicationsRequest::~SearchForApplicationsRequest() throw() {
}


void SearchForApplicationsRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void SearchForApplicationsRequest::__set_applicationName(const std::string& val) {
  this->applicationName = val;
}

void SearchForApplicationsRequest::__set_organizationId(const uuid& val) {
  this->organizationId = val;
__isset.organizationId = true;
}

uint32_t SearchForApplicationsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationName);
          this->__isset.applicationName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organizationId);
          this->__isset.organizationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SearchForApplicationsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SearchForApplicationsRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.organizationId) {
    xfer += oprot->writeFieldBegin("organizationId", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->organizationId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SearchForApplicationsRequest &a, SearchForApplicationsRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.applicationName, b.applicationName);
  swap(a.organizationId, b.organizationId);
  swap(a.__isset, b.__isset);
}

SearchForApplicationsRequest::SearchForApplicationsRequest(const SearchForApplicationsRequest& other217) {
  token = other217.token;
  applicationName = other217.applicationName;
  organizationId = other217.organizationId;
  __isset = other217.__isset;
}
SearchForApplicationsRequest& SearchForApplicationsRequest::operator=(const SearchForApplicationsRequest& other218) {
  token = other218.token;
  applicationName = other218.applicationName;
  organizationId = other218.organizationId;
  __isset = other218.__isset;
  return *this;
}
void SearchForApplicationsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SearchForApplicationsRequest(";
  out << "token=" << to_string(token);
  out << ", " << "applicationName=" << to_string(applicationName);
  out << ", " << "organizationId="; (__isset.organizationId ? (out << to_string(organizationId)) : (out << "<null>"));
  out << ")";
}


SearchForApplicationsResponse::~SearchForApplicationsResponse() throw() {
}


void SearchForApplicationsResponse::__set_applications(const std::vector<Application> & val) {
  this->applications = val;
}

uint32_t SearchForApplicationsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->applications.clear();
            uint32_t _size219;
            ::apache::thrift::protocol::TType _etype222;
            xfer += iprot->readListBegin(_etype222, _size219);
            this->applications.resize(_size219);
            uint32_t _i223;
            for (_i223 = 0; _i223 < _size219; ++_i223)
            {
              xfer += this->applications[_i223].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.applications = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SearchForApplicationsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SearchForApplicationsResponse");

  xfer += oprot->writeFieldBegin("applications", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->applications.size()));
    std::vector<Application> ::const_iterator _iter224;
    for (_iter224 = this->applications.begin(); _iter224 != this->applications.end(); ++_iter224)
    {
      xfer += (*_iter224).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SearchForApplicationsResponse &a, SearchForApplicationsResponse &b) {
  using ::std::swap;
  swap(a.applications, b.applications);
  swap(a.__isset, b.__isset);
}

SearchForApplicationsResponse::SearchForApplicationsResponse(const SearchForApplicationsResponse& other225) {
  applications = other225.applications;
  __isset = other225.__isset;
}
SearchForApplicationsResponse& SearchForApplicationsResponse::operator=(const SearchForApplicationsResponse& other226) {
  applications = other226.applications;
  __isset = other226.__isset;
  return *this;
}
void SearchForApplicationsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SearchForApplicationsResponse(";
  out << "applications=" << to_string(applications);
  out << ")";
}

}}} // namespace
