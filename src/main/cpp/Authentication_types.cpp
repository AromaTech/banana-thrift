/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Authentication_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>



int _kRoleValues[] = {
  Role::DEV,
  Role::OWNER
};
const char* _kRoleNames[] = {
  "DEV",
  "OWNER"
};
const std::map<int, const char*> _Role_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kRoleValues, _kRoleNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


Developer::~Developer() throw() {
}


void Developer::__set_email(const std::string& val) {
  this->email = val;
}

void Developer::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void Developer::__set_username(const std::string& val) {
  this->username = val;
__isset.username = true;
}

void Developer::__set_role(const Role::type val) {
  this->role = val;
}

uint32_t Developer::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->role = (Role::type)ecast0;
          this->__isset.role = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Developer::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Developer");

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.username) {
    xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->username);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("role", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->role);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Developer &a, Developer &b) {
  using ::std::swap;
  swap(a.email, b.email);
  swap(a.name, b.name);
  swap(a.username, b.username);
  swap(a.role, b.role);
  swap(a.__isset, b.__isset);
}

Developer::Developer(const Developer& other1) {
  email = other1.email;
  name = other1.name;
  username = other1.username;
  role = other1.role;
  __isset = other1.__isset;
}
Developer& Developer::operator=(const Developer& other2) {
  email = other2.email;
  name = other2.name;
  username = other2.username;
  role = other2.role;
  __isset = other2.__isset;
  return *this;
}
void Developer::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Developer(";
  out << "email=" << to_string(email);
  out << ", " << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "username="; (__isset.username ? (out << to_string(username)) : (out << "<null>"));
  out << ", " << "role=" << to_string(role);
  out << ")";
}


ServiceToken::~ServiceToken() throw() {
}


void ServiceToken::__set_id(const std::string& val) {
  this->id = val;
}

void ServiceToken::__set_serviceName(const std::string& val) {
  this->serviceName = val;
}

void ServiceToken::__set_organization(const std::string& val) {
  this->organization = val;
__isset.organization = true;
}

void ServiceToken::__set_timeOfExpiration(const timestamp val) {
  this->timeOfExpiration = val;
}

uint32_t ServiceToken::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serviceName);
          this->__isset.serviceName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organization);
          this->__isset.organization = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timeOfExpiration);
          this->__isset.timeOfExpiration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceToken::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ServiceToken");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->serviceName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.organization) {
    xfer += oprot->writeFieldBegin("organization", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->organization);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("timeOfExpiration", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->timeOfExpiration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceToken &a, ServiceToken &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.serviceName, b.serviceName);
  swap(a.organization, b.organization);
  swap(a.timeOfExpiration, b.timeOfExpiration);
  swap(a.__isset, b.__isset);
}

ServiceToken::ServiceToken(const ServiceToken& other3) {
  id = other3.id;
  serviceName = other3.serviceName;
  organization = other3.organization;
  timeOfExpiration = other3.timeOfExpiration;
  __isset = other3.__isset;
}
ServiceToken& ServiceToken::operator=(const ServiceToken& other4) {
  id = other4.id;
  serviceName = other4.serviceName;
  organization = other4.organization;
  timeOfExpiration = other4.timeOfExpiration;
  __isset = other4.__isset;
  return *this;
}
void ServiceToken::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ServiceToken(";
  out << "id=" << to_string(id);
  out << ", " << "serviceName=" << to_string(serviceName);
  out << ", " << "organization="; (__isset.organization ? (out << to_string(organization)) : (out << "<null>"));
  out << ", " << "timeOfExpiration=" << to_string(timeOfExpiration);
  out << ")";
}


DeveloperToken::~DeveloperToken() throw() {
}


void DeveloperToken::__set_id(const std::string& val) {
  this->id = val;
}

void DeveloperToken::__set_oauthProvider(const std::string& val) {
  this->oauthProvider = val;
__isset.oauthProvider = true;
}

void DeveloperToken::__set_timeOfExpiration(const timestamp val) {
  this->timeOfExpiration = val;
}

void DeveloperToken::__set_organization(const std::string& val) {
  this->organization = val;
__isset.organization = true;
}

uint32_t DeveloperToken::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->oauthProvider);
          this->__isset.oauthProvider = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timeOfExpiration);
          this->__isset.timeOfExpiration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organization);
          this->__isset.organization = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeveloperToken::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeveloperToken");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.oauthProvider) {
    xfer += oprot->writeFieldBegin("oauthProvider", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->oauthProvider);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("timeOfExpiration", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->timeOfExpiration);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.organization) {
    xfer += oprot->writeFieldBegin("organization", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->organization);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeveloperToken &a, DeveloperToken &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.oauthProvider, b.oauthProvider);
  swap(a.timeOfExpiration, b.timeOfExpiration);
  swap(a.organization, b.organization);
  swap(a.__isset, b.__isset);
}

DeveloperToken::DeveloperToken(const DeveloperToken& other5) {
  id = other5.id;
  oauthProvider = other5.oauthProvider;
  timeOfExpiration = other5.timeOfExpiration;
  organization = other5.organization;
  __isset = other5.__isset;
}
DeveloperToken& DeveloperToken::operator=(const DeveloperToken& other6) {
  id = other6.id;
  oauthProvider = other6.oauthProvider;
  timeOfExpiration = other6.timeOfExpiration;
  organization = other6.organization;
  __isset = other6.__isset;
  return *this;
}
void DeveloperToken::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeveloperToken(";
  out << "id=" << to_string(id);
  out << ", " << "oauthProvider="; (__isset.oauthProvider ? (out << to_string(oauthProvider)) : (out << "<null>"));
  out << ", " << "timeOfExpiration=" << to_string(timeOfExpiration);
  out << ", " << "organization="; (__isset.organization ? (out << to_string(organization)) : (out << "<null>"));
  out << ")";
}


GithubToken::~GithubToken() throw() {
}


void GithubToken::__set_username(const std::string& val) {
  this->username = val;
}

void GithubToken::__set_email(const std::string& val) {
  this->email = val;
__isset.email = true;
}

void GithubToken::__set_oauthToken(const std::string& val) {
  this->oauthToken = val;
}

uint32_t GithubToken::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_oauthToken = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->oauthToken);
          isset_oauthToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_oauthToken)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GithubToken::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GithubToken");

  xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->username);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.email) {
    xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->email);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("oauthToken", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->oauthToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GithubToken &a, GithubToken &b) {
  using ::std::swap;
  swap(a.username, b.username);
  swap(a.email, b.email);
  swap(a.oauthToken, b.oauthToken);
  swap(a.__isset, b.__isset);
}

GithubToken::GithubToken(const GithubToken& other7) {
  username = other7.username;
  email = other7.email;
  oauthToken = other7.oauthToken;
  __isset = other7.__isset;
}
GithubToken& GithubToken::operator=(const GithubToken& other8) {
  username = other8.username;
  email = other8.email;
  oauthToken = other8.oauthToken;
  __isset = other8.__isset;
  return *this;
}
void GithubToken::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GithubToken(";
  out << "username=" << to_string(username);
  out << ", " << "email="; (__isset.email ? (out << to_string(email)) : (out << "<null>"));
  out << ", " << "oauthToken=" << to_string(oauthToken);
  out << ")";
}


OauthToken::~OauthToken() throw() {
}


void OauthToken::__set_githubToken(const GithubToken& val) {
  this->githubToken = val;
}

uint32_t OauthToken::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->githubToken.read(iprot);
          this->__isset.githubToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OauthToken::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("OauthToken");

  xfer += oprot->writeFieldBegin("githubToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->githubToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OauthToken &a, OauthToken &b) {
  using ::std::swap;
  swap(a.githubToken, b.githubToken);
  swap(a.__isset, b.__isset);
}

OauthToken::OauthToken(const OauthToken& other9) {
  githubToken = other9.githubToken;
  __isset = other9.__isset;
}
OauthToken& OauthToken::operator=(const OauthToken& other10) {
  githubToken = other10.githubToken;
  __isset = other10.__isset;
  return *this;
}
void OauthToken::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "OauthToken(";
  out << "githubToken=" << to_string(githubToken);
  out << ")";
}


