/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Authentication_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace aroma { namespace thrift { namespace authentication {

int _kTokenStatusValues[] = {
  TokenStatus::ACTIVE,
  TokenStatus::EXPIRED
};
const char* _kTokenStatusNames[] = {
  "ACTIVE",
  "EXPIRED"
};
const std::map<int, const char*> _TokenStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTokenStatusValues, _kTokenStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TokenStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _TokenStatus_VALUES_TO_NAMES.find(val);
  if (it != _TokenStatus_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTokenTypeValues[] = {
  TokenType::APPLICATION,
  TokenType::USER
};
const char* _kTokenTypeNames[] = {
  "APPLICATION",
  "USER"
};
const std::map<int, const char*> _TokenType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTokenTypeValues, _kTokenTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TokenType::type& val) {
  std::map<int, const char*>::const_iterator it = _TokenType_VALUES_TO_NAMES.find(val);
  if (it != _TokenType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


ApplicationToken::~ApplicationToken() throw() {
}


void ApplicationToken::__set_tokenId(const std::string& val) {
  this->tokenId = val;
}

void ApplicationToken::__set_organization(const std::string& val) {
  this->organization = val;
__isset.organization = true;
}

void ApplicationToken::__set_timeOfExpiration(const timestamp val) {
  this->timeOfExpiration = val;
}

void ApplicationToken::__set_applicationId(const uuid& val) {
  this->applicationId = val;
__isset.applicationId = true;
}

void ApplicationToken::__set_applicationName(const std::string& val) {
  this->applicationName = val;
__isset.applicationName = true;
}

void ApplicationToken::__set_status(const TokenStatus::type val) {
  this->status = val;
__isset.status = true;
}
std::ostream& operator<<(std::ostream& out, const ApplicationToken& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ApplicationToken::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tokenId);
          this->__isset.tokenId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organization);
          this->__isset.organization = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timeOfExpiration);
          this->__isset.timeOfExpiration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationId);
          this->__isset.applicationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationName);
          this->__isset.applicationName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->status = (TokenStatus::type)ecast0;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ApplicationToken::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ApplicationToken");

  xfer += oprot->writeFieldBegin("tokenId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->tokenId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.organization) {
    xfer += oprot->writeFieldBegin("organization", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->organization);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("timeOfExpiration", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->timeOfExpiration);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.applicationId) {
    xfer += oprot->writeFieldBegin("applicationId", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->applicationId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.applicationName) {
    xfer += oprot->writeFieldBegin("applicationName", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->applicationName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.status) {
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32((int32_t)this->status);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ApplicationToken &a, ApplicationToken &b) {
  using ::std::swap;
  swap(a.tokenId, b.tokenId);
  swap(a.organization, b.organization);
  swap(a.timeOfExpiration, b.timeOfExpiration);
  swap(a.applicationId, b.applicationId);
  swap(a.applicationName, b.applicationName);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

ApplicationToken::ApplicationToken(const ApplicationToken& other1) {
  tokenId = other1.tokenId;
  organization = other1.organization;
  timeOfExpiration = other1.timeOfExpiration;
  applicationId = other1.applicationId;
  applicationName = other1.applicationName;
  status = other1.status;
  __isset = other1.__isset;
}
ApplicationToken& ApplicationToken::operator=(const ApplicationToken& other2) {
  tokenId = other2.tokenId;
  organization = other2.organization;
  timeOfExpiration = other2.timeOfExpiration;
  applicationId = other2.applicationId;
  applicationName = other2.applicationName;
  status = other2.status;
  __isset = other2.__isset;
  return *this;
}
void ApplicationToken::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ApplicationToken(";
  out << "tokenId=" << to_string(tokenId);
  out << ", " << "organization="; (__isset.organization ? (out << to_string(organization)) : (out << "<null>"));
  out << ", " << "timeOfExpiration=" << to_string(timeOfExpiration);
  out << ", " << "applicationId="; (__isset.applicationId ? (out << to_string(applicationId)) : (out << "<null>"));
  out << ", " << "applicationName="; (__isset.applicationName ? (out << to_string(applicationName)) : (out << "<null>"));
  out << ", " << "status="; (__isset.status ? (out << to_string(status)) : (out << "<null>"));
  out << ")";
}


UserToken::~UserToken() throw() {
}


void UserToken::__set_tokenId(const std::string& val) {
  this->tokenId = val;
}

void UserToken::__set_timeOfExpiration(const timestamp val) {
  this->timeOfExpiration = val;
}

void UserToken::__set_organization(const std::string& val) {
  this->organization = val;
__isset.organization = true;
}

void UserToken::__set_isOauthToken(const bool val) {
  this->isOauthToken = val;
__isset.isOauthToken = true;
}

void UserToken::__set_oauthProvider(const std::string& val) {
  this->oauthProvider = val;
__isset.oauthProvider = true;
}

void UserToken::__set_userId(const uuid& val) {
  this->userId = val;
}

void UserToken::__set_status(const TokenStatus::type val) {
  this->status = val;
__isset.status = true;
}
std::ostream& operator<<(std::ostream& out, const UserToken& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UserToken::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tokenId);
          this->__isset.tokenId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timeOfExpiration);
          this->__isset.timeOfExpiration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organization);
          this->__isset.organization = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isOauthToken);
          this->__isset.isOauthToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->oauthProvider);
          this->__isset.oauthProvider = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userId);
          this->__isset.userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->status = (TokenStatus::type)ecast3;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserToken::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UserToken");

  xfer += oprot->writeFieldBegin("tokenId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->tokenId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeOfExpiration", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->timeOfExpiration);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.organization) {
    xfer += oprot->writeFieldBegin("organization", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->organization);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isOauthToken) {
    xfer += oprot->writeFieldBegin("isOauthToken", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->isOauthToken);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.oauthProvider) {
    xfer += oprot->writeFieldBegin("oauthProvider", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->oauthProvider);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->userId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.status) {
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32((int32_t)this->status);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserToken &a, UserToken &b) {
  using ::std::swap;
  swap(a.tokenId, b.tokenId);
  swap(a.timeOfExpiration, b.timeOfExpiration);
  swap(a.organization, b.organization);
  swap(a.isOauthToken, b.isOauthToken);
  swap(a.oauthProvider, b.oauthProvider);
  swap(a.userId, b.userId);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

UserToken::UserToken(const UserToken& other4) {
  tokenId = other4.tokenId;
  timeOfExpiration = other4.timeOfExpiration;
  organization = other4.organization;
  isOauthToken = other4.isOauthToken;
  oauthProvider = other4.oauthProvider;
  userId = other4.userId;
  status = other4.status;
  __isset = other4.__isset;
}
UserToken& UserToken::operator=(const UserToken& other5) {
  tokenId = other5.tokenId;
  timeOfExpiration = other5.timeOfExpiration;
  organization = other5.organization;
  isOauthToken = other5.isOauthToken;
  oauthProvider = other5.oauthProvider;
  userId = other5.userId;
  status = other5.status;
  __isset = other5.__isset;
  return *this;
}
void UserToken::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UserToken(";
  out << "tokenId=" << to_string(tokenId);
  out << ", " << "timeOfExpiration=" << to_string(timeOfExpiration);
  out << ", " << "organization="; (__isset.organization ? (out << to_string(organization)) : (out << "<null>"));
  out << ", " << "isOauthToken="; (__isset.isOauthToken ? (out << to_string(isOauthToken)) : (out << "<null>"));
  out << ", " << "oauthProvider="; (__isset.oauthProvider ? (out << to_string(oauthProvider)) : (out << "<null>"));
  out << ", " << "userId=" << to_string(userId);
  out << ", " << "status="; (__isset.status ? (out << to_string(status)) : (out << "<null>"));
  out << ")";
}


GithubToken::~GithubToken() throw() {
}


void GithubToken::__set_username(const std::string& val) {
  this->username = val;
}

void GithubToken::__set_email(const std::string& val) {
  this->email = val;
}

void GithubToken::__set_oauthToken(const std::string& val) {
  this->oauthToken = val;
}
std::ostream& operator<<(std::ostream& out, const GithubToken& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GithubToken::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_oauthToken = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->oauthToken);
          isset_oauthToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_oauthToken)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GithubToken::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GithubToken");

  xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("oauthToken", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->oauthToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GithubToken &a, GithubToken &b) {
  using ::std::swap;
  swap(a.username, b.username);
  swap(a.email, b.email);
  swap(a.oauthToken, b.oauthToken);
  swap(a.__isset, b.__isset);
}

GithubToken::GithubToken(const GithubToken& other6) {
  username = other6.username;
  email = other6.email;
  oauthToken = other6.oauthToken;
  __isset = other6.__isset;
}
GithubToken& GithubToken::operator=(const GithubToken& other7) {
  username = other7.username;
  email = other7.email;
  oauthToken = other7.oauthToken;
  __isset = other7.__isset;
  return *this;
}
void GithubToken::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GithubToken(";
  out << "username=" << to_string(username);
  out << ", " << "email=" << to_string(email);
  out << ", " << "oauthToken=" << to_string(oauthToken);
  out << ")";
}


Password::~Password() throw() {
}


void Password::__set_encryptedPassword(const std::string& val) {
  this->encryptedPassword = val;
}
std::ostream& operator<<(std::ostream& out, const Password& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Password::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->encryptedPassword);
          this->__isset.encryptedPassword = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Password::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Password");

  xfer += oprot->writeFieldBegin("encryptedPassword", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->encryptedPassword);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Password &a, Password &b) {
  using ::std::swap;
  swap(a.encryptedPassword, b.encryptedPassword);
  swap(a.__isset, b.__isset);
}

Password::Password(const Password& other8) {
  encryptedPassword = other8.encryptedPassword;
  __isset = other8.__isset;
}
Password& Password::operator=(const Password& other9) {
  encryptedPassword = other9.encryptedPassword;
  __isset = other9.__isset;
  return *this;
}
void Password::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Password(";
  out << "encryptedPassword=" << to_string(encryptedPassword);
  out << ")";
}


AromaAccount::~AromaAccount() throw() {
}


void AromaAccount::__set_email(const std::string& val) {
  this->email = val;
}

void AromaAccount::__set_password(const Password& val) {
  this->password = val;
}

void AromaAccount::__set_name(const std::string& val) {
  this->name = val;
}

void AromaAccount::__set_profileImage(const  ::tech::aroma::thrift::Image& val) {
  this->profileImage = val;
}

void AromaAccount::__set_role(const  ::tech::aroma::thrift::Role::type val) {
  this->role = val;
__isset.role = true;
}
std::ostream& operator<<(std::ostream& out, const AromaAccount& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AromaAccount::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->password.read(iprot);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->profileImage.read(iprot);
          this->__isset.profileImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast10;
          xfer += iprot->readI32(ecast10);
          this->role = ( ::tech::aroma::thrift::Role::type)ecast10;
          this->__isset.role = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AromaAccount::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AromaAccount");

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->password.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("profileImage", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->profileImage.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.role) {
    xfer += oprot->writeFieldBegin("role", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32((int32_t)this->role);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AromaAccount &a, AromaAccount &b) {
  using ::std::swap;
  swap(a.email, b.email);
  swap(a.password, b.password);
  swap(a.name, b.name);
  swap(a.profileImage, b.profileImage);
  swap(a.role, b.role);
  swap(a.__isset, b.__isset);
}

AromaAccount::AromaAccount(const AromaAccount& other11) {
  email = other11.email;
  password = other11.password;
  name = other11.name;
  profileImage = other11.profileImage;
  role = other11.role;
  __isset = other11.__isset;
}
AromaAccount& AromaAccount::operator=(const AromaAccount& other12) {
  email = other12.email;
  password = other12.password;
  name = other12.name;
  profileImage = other12.profileImage;
  role = other12.role;
  __isset = other12.__isset;
  return *this;
}
void AromaAccount::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AromaAccount(";
  out << "email=" << to_string(email);
  out << ", " << "password=" << to_string(password);
  out << ", " << "name=" << to_string(name);
  out << ", " << "profileImage=" << to_string(profileImage);
  out << ", " << "role="; (__isset.role ? (out << to_string(role)) : (out << "<null>"));
  out << ")";
}


Credentials::~Credentials() throw() {
}


void Credentials::__set_githubToken(const GithubToken& val) {
  this->githubToken = val;
__isset.githubToken = true;
}

void Credentials::__set_aromaPassword(const Password& val) {
  this->aromaPassword = val;
__isset.aromaPassword = true;
}
std::ostream& operator<<(std::ostream& out, const Credentials& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Credentials::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->githubToken.read(iprot);
          this->__isset.githubToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->aromaPassword.read(iprot);
          this->__isset.aromaPassword = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Credentials::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Credentials");

  if (this->__isset.githubToken) {
    xfer += oprot->writeFieldBegin("githubToken", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->githubToken.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.aromaPassword) {
    xfer += oprot->writeFieldBegin("aromaPassword", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->aromaPassword.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Credentials &a, Credentials &b) {
  using ::std::swap;
  swap(a.githubToken, b.githubToken);
  swap(a.aromaPassword, b.aromaPassword);
  swap(a.__isset, b.__isset);
}

Credentials::Credentials(const Credentials& other13) {
  githubToken = other13.githubToken;
  aromaPassword = other13.aromaPassword;
  __isset = other13.__isset;
}
Credentials& Credentials::operator=(const Credentials& other14) {
  githubToken = other14.githubToken;
  aromaPassword = other14.aromaPassword;
  __isset = other14.__isset;
  return *this;
}
void Credentials::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Credentials(";
  out << "githubToken="; (__isset.githubToken ? (out << to_string(githubToken)) : (out << "<null>"));
  out << ", " << "aromaPassword="; (__isset.aromaPassword ? (out << to_string(aromaPassword)) : (out << "<null>"));
  out << ")";
}


AuthenticationToken::~AuthenticationToken() throw() {
}


void AuthenticationToken::__set_tokenId(const std::string& val) {
  this->tokenId = val;
}

void AuthenticationToken::__set_ownerId(const uuid& val) {
  this->ownerId = val;
}

void AuthenticationToken::__set_timeOfCreation(const timestamp val) {
  this->timeOfCreation = val;
}

void AuthenticationToken::__set_timeOfExpiration(const timestamp val) {
  this->timeOfExpiration = val;
}

void AuthenticationToken::__set_tokenType(const TokenType::type val) {
  this->tokenType = val;
}

void AuthenticationToken::__set_organizationId(const uuid& val) {
  this->organizationId = val;
}

void AuthenticationToken::__set_ownerName(const std::string& val) {
  this->ownerName = val;
}

void AuthenticationToken::__set_organizationName(const std::string& val) {
  this->organizationName = val;
}

void AuthenticationToken::__set_status(const TokenStatus::type val) {
  this->status = val;
__isset.status = true;
}
std::ostream& operator<<(std::ostream& out, const AuthenticationToken& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AuthenticationToken::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tokenId);
          this->__isset.tokenId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ownerId);
          this->__isset.ownerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timeOfCreation);
          this->__isset.timeOfCreation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timeOfExpiration);
          this->__isset.timeOfExpiration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast15;
          xfer += iprot->readI32(ecast15);
          this->tokenType = (TokenType::type)ecast15;
          this->__isset.tokenType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organizationId);
          this->__isset.organizationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ownerName);
          this->__isset.ownerName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organizationName);
          this->__isset.organizationName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast16;
          xfer += iprot->readI32(ecast16);
          this->status = (TokenStatus::type)ecast16;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AuthenticationToken::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AuthenticationToken");

  xfer += oprot->writeFieldBegin("tokenId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->tokenId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ownerId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->ownerId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeOfCreation", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->timeOfCreation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeOfExpiration", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->timeOfExpiration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tokenType", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->tokenType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("organizationId", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->organizationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ownerName", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->ownerName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("organizationName", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->organizationName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.status) {
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32((int32_t)this->status);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AuthenticationToken &a, AuthenticationToken &b) {
  using ::std::swap;
  swap(a.tokenId, b.tokenId);
  swap(a.ownerId, b.ownerId);
  swap(a.timeOfCreation, b.timeOfCreation);
  swap(a.timeOfExpiration, b.timeOfExpiration);
  swap(a.tokenType, b.tokenType);
  swap(a.organizationId, b.organizationId);
  swap(a.ownerName, b.ownerName);
  swap(a.organizationName, b.organizationName);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

AuthenticationToken::AuthenticationToken(const AuthenticationToken& other17) {
  tokenId = other17.tokenId;
  ownerId = other17.ownerId;
  timeOfCreation = other17.timeOfCreation;
  timeOfExpiration = other17.timeOfExpiration;
  tokenType = other17.tokenType;
  organizationId = other17.organizationId;
  ownerName = other17.ownerName;
  organizationName = other17.organizationName;
  status = other17.status;
  __isset = other17.__isset;
}
AuthenticationToken& AuthenticationToken::operator=(const AuthenticationToken& other18) {
  tokenId = other18.tokenId;
  ownerId = other18.ownerId;
  timeOfCreation = other18.timeOfCreation;
  timeOfExpiration = other18.timeOfExpiration;
  tokenType = other18.tokenType;
  organizationId = other18.organizationId;
  ownerName = other18.ownerName;
  organizationName = other18.organizationName;
  status = other18.status;
  __isset = other18.__isset;
  return *this;
}
void AuthenticationToken::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AuthenticationToken(";
  out << "tokenId=" << to_string(tokenId);
  out << ", " << "ownerId=" << to_string(ownerId);
  out << ", " << "timeOfCreation=" << to_string(timeOfCreation);
  out << ", " << "timeOfExpiration=" << to_string(timeOfExpiration);
  out << ", " << "tokenType=" << to_string(tokenType);
  out << ", " << "organizationId=" << to_string(organizationId);
  out << ", " << "ownerName=" << to_string(ownerName);
  out << ", " << "organizationName=" << to_string(organizationName);
  out << ", " << "status="; (__isset.status ? (out << to_string(status)) : (out << "<null>"));
  out << ")";
}

}}} // namespace
