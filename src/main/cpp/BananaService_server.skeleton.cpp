// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "BananaService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::aroma::banana::thrift::service;

class BananaServiceHandler : virtual public BananaServiceIf {
 public:
  BananaServiceHandler() {
    // Your initialization goes here
  }

  /**
   * 
   * #service
   * 
   * @param request
   */
  void sendMessage(SendMessageResponse& _return, const SendMessageRequest& request) {
    // Your implementation goes here
    printf("sendMessage\n");
  }

  /**
   * 
   * #service
   * 
   * @param request
   */
  void sendMessageAsync(const SendMessageRequest& request) {
    // Your implementation goes here
    printf("sendMessageAsync\n");
  }

  /**
   * Sign in to the App and using a valid OAUTH Token.
   * 
   * #developer
   * 
   * @param request
   */
  void signIn(SignInResponse& _return, const SignInRequest& request) {
    // Your implementation goes here
    printf("signIn\n");
  }

  /**
   * Sign Up for an Aroma Account.
   * 
   * @param request
   */
  void signUp(SignUpResponse& _return, const SignUpRequest& request) {
    // Your implementation goes here
    printf("signUp\n");
  }

  /**
   * Provision a New Service to keep tabs on.
   * 
   * #developer
   * 
   * @param request
   */
  void provisionService(ProvisionServiceResponse& _return, const ProvisionServiceRequest& request) {
    // Your implementation goes here
    printf("provisionService\n");
  }

  /**
   * Subscribe to an existing service to get notifications.
   * 
   * #developer
   * 
   * @param request
   */
  void subscribeToService(SubscribeToServiceResponse& _return, const SubscribeToServiceRequest& request) {
    // Your implementation goes here
    printf("subscribeToService\n");
  }

  /**
   * Register an existing Service for Health Pokes. The Banana Service
   * will then periodically poke the Service for health status.
   * 
   * #developer
   * #owner
   * 
   * @param request
   */
  void registerHealthCheck(RegisterHealthCheckResponse& _return, const RegisterHealthCheckRequest& request) {
    // Your implementation goes here
    printf("registerHealthCheck\n");
  }

  /**
   * Renew a Service Token that is close to being expired.
   * Only an "owner" can perform this operation.
   * 
   * #developer
   * #owner
   * 
   * @param request
   */
  void renewServiceToken(RenewServiceTokenResponse& _return, const RenewServiceTokenRequest& request) {
    // Your implementation goes here
    printf("renewServiceToken\n");
  }

  /**
   * Regenerate a Token in case the existing one is lost or forgetten.
   * Keep in mind that this will invalidate the existing ServiceToken.
   * Only an "owner" can perform this opeartion.
   * 
   * #developer
   * #owner
   * 
   * @param request
   */
  void regenerateToken(RegenerateTokenResponse& _return, const RegenerateTokenRequest& request) {
    // Your implementation goes here
    printf("regenerateToken\n");
  }

  /**
   * Get details about a Service from it's unique ID
   * 
   * #developer
   * 
   * @param request
   */
  void getServiceInfo(GetServiceInfoResponse& _return, const GetServiceInfoRequest& request) {
    // Your implementation goes here
    printf("getServiceInfo\n");
  }

  /**
   * Perform a Search on all the services registered to the Banana Service by searching for its title.
   * 
   * #developer
   * 
   * @param request
   */
  void searchForServices(SearchForServicesResponse& _return, const SearchForServicesRequest& request) {
    // Your implementation goes here
    printf("searchForServices\n");
  }

  /**
   * Get a list of all Developers subscribed to a Service.
   * 
   * #developer
   * 
   * @param request
   */
  void getServiceSubscribers(GetServiceSubscribersResponse& _return, const GetServiceSubscribersRequest& request) {
    // Your implementation goes here
    printf("getServiceSubscribers\n");
  }

  void saveChannel(SaveChannelResponse& _return, const SaveChannelRequest& request) {
    // Your implementation goes here
    printf("saveChannel\n");
  }

  void removeSavedChannel(RemoveSavedChannelResponse& _return, const RemoveSavedChannelRequest& request) {
    // Your implementation goes here
    printf("removeSavedChannel\n");
  }

  void getMySavedChannels(GetMySavedChannelsResponse& _return, const GetMySavedChannelsRequest& request) {
    // Your implementation goes here
    printf("getMySavedChannels\n");
  }

  void getMyServices(GetMyServicesResponse& _return, const GetMyServicesRequest& request) {
    // Your implementation goes here
    printf("getMyServices\n");
  }

  void snoozeChannel(SnoozeChannelResponse& _return, const SnoozeChannelRequest& request) {
    // Your implementation goes here
    printf("snoozeChannel\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<BananaServiceHandler> handler(new BananaServiceHandler());
  shared_ptr<TProcessor> processor(new BananaServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

