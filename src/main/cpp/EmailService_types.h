/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef EmailService_TYPES_H
#define EmailService_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "Authentication_types.h"
#include "Aroma_types.h"
#include "Channels_types.h"
#include "Endpoint_types.h"
#include "Email_types.h"
#include "Exceptions_types.h"


namespace aroma { namespace thrift { namespace email { namespace service {

typedef  ::tech::aroma::thrift::int int;

typedef  ::tech::aroma::thrift::long long;

typedef  ::tech::aroma::thrift::timestamp timestamp;

typedef  ::tech::aroma::thrift::uuid uuid;

typedef class  ::aroma::thrift::authentication::AuthenticationToken AuthenticationToken;

typedef class  ::tech::aroma::thrift::Application Application;

typedef  ::tech::aroma::thrift::Urgency::type Urgency;

typedef class  ::tech::aroma::thrift::User User;

typedef class  ::aroma::thrift::channels::AromaChannel AromaChannel;

typedef class  ::aroma::thrift::email::EmailMessage EmailMessage;

typedef class  ::aroma::thrift::exceptions::AccountAlreadyExistsException AccountAlreadyExistsException;

typedef class  ::aroma::thrift::exceptions::InvalidArgumentException InvalidArgumentException;

typedef class  ::aroma::thrift::exceptions::InvalidCredentialsException InvalidCredentialsException;

typedef class  ::aroma::thrift::exceptions::InvalidTokenException InvalidTokenException;

typedef class  ::aroma::thrift::exceptions::OperationFailedException OperationFailedException;

typedef class  ::aroma::thrift::exceptions::ApplicationAlreadyRegisteredException ApplicationAlreadyRegisteredException;

typedef class  ::aroma::thrift::exceptions::ApplicationDoesNotExistException ApplicationDoesNotExistException;

typedef class  ::aroma::thrift::exceptions::CustomChannelUnreachableException CustomChannelUnreachableException;

typedef class  ::aroma::thrift::exceptions::ChannelDoesNotExistException ChannelDoesNotExistException;

typedef class  ::aroma::thrift::exceptions::UnauthorizedException UnauthorizedException;

class SendEmailRequest;

class SendEmailResponse;

typedef struct _SendEmailRequest__isset {
  _SendEmailRequest__isset() : token(false), emailAddress(false), emailMessage(false) {}
  bool token :1;
  bool emailAddress :1;
  bool emailMessage :1;
} _SendEmailRequest__isset;

class SendEmailRequest {
 public:

  SendEmailRequest(const SendEmailRequest&);
  SendEmailRequest& operator=(const SendEmailRequest&);
  SendEmailRequest() : emailAddress() {
  }

  virtual ~SendEmailRequest() throw();
  AuthenticationToken token;
  std::string emailAddress;
  EmailMessage emailMessage;

  _SendEmailRequest__isset __isset;

  void __set_token(const AuthenticationToken& val);

  void __set_emailAddress(const std::string& val);

  void __set_emailMessage(const EmailMessage& val);

  bool operator == (const SendEmailRequest & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(emailAddress == rhs.emailAddress))
      return false;
    if (!(emailMessage == rhs.emailMessage))
      return false;
    return true;
  }
  bool operator != (const SendEmailRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SendEmailRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SendEmailRequest &a, SendEmailRequest &b);

inline std::ostream& operator<<(std::ostream& out, const SendEmailRequest& obj)
{
  obj.printTo(out);
  return out;
}


class SendEmailResponse {
 public:

  SendEmailResponse(const SendEmailResponse&);
  SendEmailResponse& operator=(const SendEmailResponse&);
  SendEmailResponse() {
  }

  virtual ~SendEmailResponse() throw();

  bool operator == (const SendEmailResponse & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SendEmailResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SendEmailResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SendEmailResponse &a, SendEmailResponse &b);

inline std::ostream& operator<<(std::ostream& out, const SendEmailResponse& obj)
{
  obj.printTo(out);
  return out;
}

}}}} // namespace

#endif
