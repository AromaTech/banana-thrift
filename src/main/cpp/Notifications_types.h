/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Notifications_TYPES_H
#define Notifications_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "Authentication_types.h"
#include "Banana_types.h"


namespace aroma { namespace banana { namespace thrift { namespace notifications {

typedef  ::aroma::banana::thrift::int int;

typedef  ::aroma::banana::thrift::long long;

typedef  ::aroma::banana::thrift::timestamp timestamp;

typedef class  ::aroma::banana::thrift::authentication::Developer Developer;

typedef class  ::aroma::banana::thrift::authentication::Service Service;

typedef class  ::aroma::banana::thrift::authentication::ServiceToken ServiceToken;

class HealthCheckFailed;

class HealthCheckBackToNormal;

class ServiceTokenRenewed;

class ServiceTokenRegenerated;

class ServiceSentMessage;

class Event;

class Notification;


class HealthCheckFailed {
 public:

  HealthCheckFailed(const HealthCheckFailed&);
  HealthCheckFailed& operator=(const HealthCheckFailed&);
  HealthCheckFailed() {
  }

  virtual ~HealthCheckFailed() throw();

  bool operator == (const HealthCheckFailed & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HealthCheckFailed &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HealthCheckFailed & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HealthCheckFailed &a, HealthCheckFailed &b);

inline std::ostream& operator<<(std::ostream& out, const HealthCheckFailed& obj)
{
  obj.printTo(out);
  return out;
}


class HealthCheckBackToNormal {
 public:

  HealthCheckBackToNormal(const HealthCheckBackToNormal&);
  HealthCheckBackToNormal& operator=(const HealthCheckBackToNormal&);
  HealthCheckBackToNormal() {
  }

  virtual ~HealthCheckBackToNormal() throw();

  bool operator == (const HealthCheckBackToNormal & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HealthCheckBackToNormal &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HealthCheckBackToNormal & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HealthCheckBackToNormal &a, HealthCheckBackToNormal &b);

inline std::ostream& operator<<(std::ostream& out, const HealthCheckBackToNormal& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ServiceTokenRenewed__isset {
  _ServiceTokenRenewed__isset() : developer(false), serviceToken(false) {}
  bool developer :1;
  bool serviceToken :1;
} _ServiceTokenRenewed__isset;

class ServiceTokenRenewed {
 public:

  ServiceTokenRenewed(const ServiceTokenRenewed&);
  ServiceTokenRenewed& operator=(const ServiceTokenRenewed&);
  ServiceTokenRenewed() {
  }

  virtual ~ServiceTokenRenewed() throw();
  Developer developer;
  ServiceToken serviceToken;

  _ServiceTokenRenewed__isset __isset;

  void __set_developer(const Developer& val);

  void __set_serviceToken(const ServiceToken& val);

  bool operator == (const ServiceTokenRenewed & rhs) const
  {
    if (!(developer == rhs.developer))
      return false;
    if (__isset.serviceToken != rhs.__isset.serviceToken)
      return false;
    else if (__isset.serviceToken && !(serviceToken == rhs.serviceToken))
      return false;
    return true;
  }
  bool operator != (const ServiceTokenRenewed &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceTokenRenewed & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ServiceTokenRenewed &a, ServiceTokenRenewed &b);

inline std::ostream& operator<<(std::ostream& out, const ServiceTokenRenewed& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ServiceTokenRegenerated__isset {
  _ServiceTokenRegenerated__isset() : developer(false), serviceToken(false) {}
  bool developer :1;
  bool serviceToken :1;
} _ServiceTokenRegenerated__isset;

class ServiceTokenRegenerated {
 public:

  ServiceTokenRegenerated(const ServiceTokenRegenerated&);
  ServiceTokenRegenerated& operator=(const ServiceTokenRegenerated&);
  ServiceTokenRegenerated() {
  }

  virtual ~ServiceTokenRegenerated() throw();
  Developer developer;
  ServiceToken serviceToken;

  _ServiceTokenRegenerated__isset __isset;

  void __set_developer(const Developer& val);

  void __set_serviceToken(const ServiceToken& val);

  bool operator == (const ServiceTokenRegenerated & rhs) const
  {
    if (!(developer == rhs.developer))
      return false;
    if (__isset.serviceToken != rhs.__isset.serviceToken)
      return false;
    else if (__isset.serviceToken && !(serviceToken == rhs.serviceToken))
      return false;
    return true;
  }
  bool operator != (const ServiceTokenRegenerated &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceTokenRegenerated & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ServiceTokenRegenerated &a, ServiceTokenRegenerated &b);

inline std::ostream& operator<<(std::ostream& out, const ServiceTokenRegenerated& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ServiceSentMessage__isset {
  _ServiceSentMessage__isset() : message(false) {}
  bool message :1;
} _ServiceSentMessage__isset;

class ServiceSentMessage {
 public:

  ServiceSentMessage(const ServiceSentMessage&);
  ServiceSentMessage& operator=(const ServiceSentMessage&);
  ServiceSentMessage() {
  }

  virtual ~ServiceSentMessage() throw();
   ::aroma::banana::thrift::Message message;

  _ServiceSentMessage__isset __isset;

  void __set_message(const  ::aroma::banana::thrift::Message& val);

  bool operator == (const ServiceSentMessage & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ServiceSentMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceSentMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ServiceSentMessage &a, ServiceSentMessage &b);

inline std::ostream& operator<<(std::ostream& out, const ServiceSentMessage& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Event__isset {
  _Event__isset() : healthCheckFailed(false) {}
  bool healthCheckFailed :1;
} _Event__isset;

class Event {
 public:

  Event(const Event&);
  Event& operator=(const Event&);
  Event() {
  }

  virtual ~Event() throw();
  HealthCheckFailed healthCheckFailed;

  _Event__isset __isset;

  void __set_healthCheckFailed(const HealthCheckFailed& val);

  bool operator == (const Event & rhs) const
  {
    if (!(healthCheckFailed == rhs.healthCheckFailed))
      return false;
    return true;
  }
  bool operator != (const Event &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Event & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Event &a, Event &b);

inline std::ostream& operator<<(std::ostream& out, const Event& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Notification__isset {
  _Notification__isset() : event(false), timestamp(false) {}
  bool event :1;
  bool timestamp :1;
} _Notification__isset;

class Notification {
 public:

  Notification(const Notification&);
  Notification& operator=(const Notification&);
  Notification() : timestamp(0) {
  }

  virtual ~Notification() throw();
  Event event;
  timestamp timestamp;

  _Notification__isset __isset;

  void __set_event(const Event& val);

  void __set_timestamp(const timestamp val);

  bool operator == (const Notification & rhs) const
  {
    if (!(event == rhs.event))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const Notification &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Notification & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Notification &a, Notification &b);

inline std::ostream& operator<<(std::ostream& out, const Notification& obj)
{
  obj.printTo(out);
  return out;
}

}}}} // namespace

#endif
