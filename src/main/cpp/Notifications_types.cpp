/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Notifications_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace aroma { namespace banana { namespace thrift { namespace notifications {


HealthCheckFailed::~HealthCheckFailed() throw() {
}


uint32_t HealthCheckFailed::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HealthCheckFailed::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HealthCheckFailed");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HealthCheckFailed &a, HealthCheckFailed &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

HealthCheckFailed::HealthCheckFailed(const HealthCheckFailed& other0) {
  (void) other0;
}
HealthCheckFailed& HealthCheckFailed::operator=(const HealthCheckFailed& other1) {
  (void) other1;
  return *this;
}
void HealthCheckFailed::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HealthCheckFailed(";
  out << ")";
}


HealthCheckBackToNormal::~HealthCheckBackToNormal() throw() {
}


uint32_t HealthCheckBackToNormal::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HealthCheckBackToNormal::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HealthCheckBackToNormal");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HealthCheckBackToNormal &a, HealthCheckBackToNormal &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

HealthCheckBackToNormal::HealthCheckBackToNormal(const HealthCheckBackToNormal& other2) {
  (void) other2;
}
HealthCheckBackToNormal& HealthCheckBackToNormal::operator=(const HealthCheckBackToNormal& other3) {
  (void) other3;
  return *this;
}
void HealthCheckBackToNormal::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HealthCheckBackToNormal(";
  out << ")";
}


ServiceTokenRenewed::~ServiceTokenRenewed() throw() {
}


void ServiceTokenRenewed::__set_developer(const Developer& val) {
  this->developer = val;
}

void ServiceTokenRenewed::__set_serviceToken(const ServiceToken& val) {
  this->serviceToken = val;
__isset.serviceToken = true;
}

uint32_t ServiceTokenRenewed::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->developer.read(iprot);
          this->__isset.developer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->serviceToken.read(iprot);
          this->__isset.serviceToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceTokenRenewed::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ServiceTokenRenewed");

  xfer += oprot->writeFieldBegin("developer", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->developer.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.serviceToken) {
    xfer += oprot->writeFieldBegin("serviceToken", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->serviceToken.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceTokenRenewed &a, ServiceTokenRenewed &b) {
  using ::std::swap;
  swap(a.developer, b.developer);
  swap(a.serviceToken, b.serviceToken);
  swap(a.__isset, b.__isset);
}

ServiceTokenRenewed::ServiceTokenRenewed(const ServiceTokenRenewed& other4) {
  developer = other4.developer;
  serviceToken = other4.serviceToken;
  __isset = other4.__isset;
}
ServiceTokenRenewed& ServiceTokenRenewed::operator=(const ServiceTokenRenewed& other5) {
  developer = other5.developer;
  serviceToken = other5.serviceToken;
  __isset = other5.__isset;
  return *this;
}
void ServiceTokenRenewed::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ServiceTokenRenewed(";
  out << "developer=" << to_string(developer);
  out << ", " << "serviceToken="; (__isset.serviceToken ? (out << to_string(serviceToken)) : (out << "<null>"));
  out << ")";
}


ServiceTokenRegenerated::~ServiceTokenRegenerated() throw() {
}


void ServiceTokenRegenerated::__set_developer(const Developer& val) {
  this->developer = val;
}

void ServiceTokenRegenerated::__set_serviceToken(const ServiceToken& val) {
  this->serviceToken = val;
__isset.serviceToken = true;
}

uint32_t ServiceTokenRegenerated::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->developer.read(iprot);
          this->__isset.developer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->serviceToken.read(iprot);
          this->__isset.serviceToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceTokenRegenerated::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ServiceTokenRegenerated");

  xfer += oprot->writeFieldBegin("developer", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->developer.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.serviceToken) {
    xfer += oprot->writeFieldBegin("serviceToken", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->serviceToken.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceTokenRegenerated &a, ServiceTokenRegenerated &b) {
  using ::std::swap;
  swap(a.developer, b.developer);
  swap(a.serviceToken, b.serviceToken);
  swap(a.__isset, b.__isset);
}

ServiceTokenRegenerated::ServiceTokenRegenerated(const ServiceTokenRegenerated& other6) {
  developer = other6.developer;
  serviceToken = other6.serviceToken;
  __isset = other6.__isset;
}
ServiceTokenRegenerated& ServiceTokenRegenerated::operator=(const ServiceTokenRegenerated& other7) {
  developer = other7.developer;
  serviceToken = other7.serviceToken;
  __isset = other7.__isset;
  return *this;
}
void ServiceTokenRegenerated::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ServiceTokenRegenerated(";
  out << "developer=" << to_string(developer);
  out << ", " << "serviceToken="; (__isset.serviceToken ? (out << to_string(serviceToken)) : (out << "<null>"));
  out << ")";
}


ServiceSentMessage::~ServiceSentMessage() throw() {
}


void ServiceSentMessage::__set_message(const  ::aroma::banana::thrift::Message& val) {
  this->message = val;
}

uint32_t ServiceSentMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->message.read(iprot);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceSentMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ServiceSentMessage");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->message.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceSentMessage &a, ServiceSentMessage &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

ServiceSentMessage::ServiceSentMessage(const ServiceSentMessage& other8) {
  message = other8.message;
  __isset = other8.__isset;
}
ServiceSentMessage& ServiceSentMessage::operator=(const ServiceSentMessage& other9) {
  message = other9.message;
  __isset = other9.__isset;
  return *this;
}
void ServiceSentMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ServiceSentMessage(";
  out << "message=" << to_string(message);
  out << ")";
}


Event::~Event() throw() {
}


void Event::__set_healthCheckFailed(const HealthCheckFailed& val) {
  this->healthCheckFailed = val;
}

uint32_t Event::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->healthCheckFailed.read(iprot);
          this->__isset.healthCheckFailed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Event::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Event");

  xfer += oprot->writeFieldBegin("healthCheckFailed", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->healthCheckFailed.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Event &a, Event &b) {
  using ::std::swap;
  swap(a.healthCheckFailed, b.healthCheckFailed);
  swap(a.__isset, b.__isset);
}

Event::Event(const Event& other10) {
  healthCheckFailed = other10.healthCheckFailed;
  __isset = other10.__isset;
}
Event& Event::operator=(const Event& other11) {
  healthCheckFailed = other11.healthCheckFailed;
  __isset = other11.__isset;
  return *this;
}
void Event::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Event(";
  out << "healthCheckFailed=" << to_string(healthCheckFailed);
  out << ")";
}


Notification::~Notification() throw() {
}


void Notification::__set_event(const Event& val) {
  this->event = val;
}

void Notification::__set_timestamp(const timestamp val) {
  this->timestamp = val;
}

uint32_t Notification::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->event.read(iprot);
          this->__isset.event = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Notification::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Notification");

  xfer += oprot->writeFieldBegin("event", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->event.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Notification &a, Notification &b) {
  using ::std::swap;
  swap(a.event, b.event);
  swap(a.timestamp, b.timestamp);
  swap(a.__isset, b.__isset);
}

Notification::Notification(const Notification& other12) {
  event = other12.event;
  timestamp = other12.timestamp;
  __isset = other12.__isset;
}
Notification& Notification::operator=(const Notification& other13) {
  event = other13.event;
  timestamp = other13.timestamp;
  __isset = other13.__isset;
  return *this;
}
void Notification::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Notification(";
  out << "event=" << to_string(event);
  out << ", " << "timestamp=" << to_string(timestamp);
  out << ")";
}

}}}} // namespace
