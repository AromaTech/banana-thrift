/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Notifications_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace aroma { namespace banana { namespace thrift { namespace notifications {


HealthCheckFailed::~HealthCheckFailed() throw() {
}


void HealthCheckFailed::__set_message(const std::string& val) {
  this->message = val;
__isset.message = true;
}

void HealthCheckFailed::__set_hostname(const std::string& val) {
  this->hostname = val;
__isset.hostname = true;
}

void HealthCheckFailed::__set_application(const Application& val) {
  this->application = val;
}

uint32_t HealthCheckFailed::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hostname);
          this->__isset.hostname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->application.read(iprot);
          this->__isset.application = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HealthCheckFailed::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HealthCheckFailed");

  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->message);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hostname) {
    xfer += oprot->writeFieldBegin("hostname", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->hostname);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("application", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->application.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HealthCheckFailed &a, HealthCheckFailed &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.hostname, b.hostname);
  swap(a.application, b.application);
  swap(a.__isset, b.__isset);
}

HealthCheckFailed::HealthCheckFailed(const HealthCheckFailed& other0) {
  message = other0.message;
  hostname = other0.hostname;
  application = other0.application;
  __isset = other0.__isset;
}
HealthCheckFailed& HealthCheckFailed::operator=(const HealthCheckFailed& other1) {
  message = other1.message;
  hostname = other1.hostname;
  application = other1.application;
  __isset = other1.__isset;
  return *this;
}
void HealthCheckFailed::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HealthCheckFailed(";
  out << "message="; (__isset.message ? (out << to_string(message)) : (out << "<null>"));
  out << ", " << "hostname="; (__isset.hostname ? (out << to_string(hostname)) : (out << "<null>"));
  out << ", " << "application=" << to_string(application);
  out << ")";
}


HealthCheckBackToNormal::~HealthCheckBackToNormal() throw() {
}


void HealthCheckBackToNormal::__set_message(const std::string& val) {
  this->message = val;
__isset.message = true;
}

void HealthCheckBackToNormal::__set_application(const Application& val) {
  this->application = val;
}

uint32_t HealthCheckBackToNormal::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->application.read(iprot);
          this->__isset.application = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HealthCheckBackToNormal::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HealthCheckBackToNormal");

  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->message);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("application", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->application.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HealthCheckBackToNormal &a, HealthCheckBackToNormal &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.application, b.application);
  swap(a.__isset, b.__isset);
}

HealthCheckBackToNormal::HealthCheckBackToNormal(const HealthCheckBackToNormal& other2) {
  message = other2.message;
  application = other2.application;
  __isset = other2.__isset;
}
HealthCheckBackToNormal& HealthCheckBackToNormal::operator=(const HealthCheckBackToNormal& other3) {
  message = other3.message;
  application = other3.application;
  __isset = other3.__isset;
  return *this;
}
void HealthCheckBackToNormal::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HealthCheckBackToNormal(";
  out << "message="; (__isset.message ? (out << to_string(message)) : (out << "<null>"));
  out << ", " << "application=" << to_string(application);
  out << ")";
}


ApplicationTokenRenewed::~ApplicationTokenRenewed() throw() {
}


void ApplicationTokenRenewed::__set_human(const Human& val) {
  this->human = val;
}

void ApplicationTokenRenewed::__set_applicationToken(const ApplicationToken& val) {
  this->applicationToken = val;
__isset.applicationToken = true;
}

void ApplicationTokenRenewed::__set_application(const Application& val) {
  this->application = val;
__isset.application = true;
}

uint32_t ApplicationTokenRenewed::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->human.read(iprot);
          this->__isset.human = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->applicationToken.read(iprot);
          this->__isset.applicationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->application.read(iprot);
          this->__isset.application = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ApplicationTokenRenewed::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ApplicationTokenRenewed");

  xfer += oprot->writeFieldBegin("human", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->human.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.applicationToken) {
    xfer += oprot->writeFieldBegin("applicationToken", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->applicationToken.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.application) {
    xfer += oprot->writeFieldBegin("application", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->application.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ApplicationTokenRenewed &a, ApplicationTokenRenewed &b) {
  using ::std::swap;
  swap(a.human, b.human);
  swap(a.applicationToken, b.applicationToken);
  swap(a.application, b.application);
  swap(a.__isset, b.__isset);
}

ApplicationTokenRenewed::ApplicationTokenRenewed(const ApplicationTokenRenewed& other4) {
  human = other4.human;
  applicationToken = other4.applicationToken;
  application = other4.application;
  __isset = other4.__isset;
}
ApplicationTokenRenewed& ApplicationTokenRenewed::operator=(const ApplicationTokenRenewed& other5) {
  human = other5.human;
  applicationToken = other5.applicationToken;
  application = other5.application;
  __isset = other5.__isset;
  return *this;
}
void ApplicationTokenRenewed::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ApplicationTokenRenewed(";
  out << "human=" << to_string(human);
  out << ", " << "applicationToken="; (__isset.applicationToken ? (out << to_string(applicationToken)) : (out << "<null>"));
  out << ", " << "application="; (__isset.application ? (out << to_string(application)) : (out << "<null>"));
  out << ")";
}


ApplicationTokenRegenerated::~ApplicationTokenRegenerated() throw() {
}


void ApplicationTokenRegenerated::__set_human(const Human& val) {
  this->human = val;
}

void ApplicationTokenRegenerated::__set_applicationToken(const ApplicationToken& val) {
  this->applicationToken = val;
__isset.applicationToken = true;
}

void ApplicationTokenRegenerated::__set_application(const Application& val) {
  this->application = val;
}

uint32_t ApplicationTokenRegenerated::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->human.read(iprot);
          this->__isset.human = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->applicationToken.read(iprot);
          this->__isset.applicationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->application.read(iprot);
          this->__isset.application = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ApplicationTokenRegenerated::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ApplicationTokenRegenerated");

  xfer += oprot->writeFieldBegin("human", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->human.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.applicationToken) {
    xfer += oprot->writeFieldBegin("applicationToken", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->applicationToken.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("application", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->application.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ApplicationTokenRegenerated &a, ApplicationTokenRegenerated &b) {
  using ::std::swap;
  swap(a.human, b.human);
  swap(a.applicationToken, b.applicationToken);
  swap(a.application, b.application);
  swap(a.__isset, b.__isset);
}

ApplicationTokenRegenerated::ApplicationTokenRegenerated(const ApplicationTokenRegenerated& other6) {
  human = other6.human;
  applicationToken = other6.applicationToken;
  application = other6.application;
  __isset = other6.__isset;
}
ApplicationTokenRegenerated& ApplicationTokenRegenerated::operator=(const ApplicationTokenRegenerated& other7) {
  human = other7.human;
  applicationToken = other7.applicationToken;
  application = other7.application;
  __isset = other7.__isset;
  return *this;
}
void ApplicationTokenRegenerated::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ApplicationTokenRegenerated(";
  out << "human=" << to_string(human);
  out << ", " << "applicationToken="; (__isset.applicationToken ? (out << to_string(applicationToken)) : (out << "<null>"));
  out << ", " << "application=" << to_string(application);
  out << ")";
}


ApplicationSentMessage::~ApplicationSentMessage() throw() {
}


void ApplicationSentMessage::__set_message(const  ::aroma::banana::thrift::Message& val) {
  this->message = val;
__isset.message = true;
}

void ApplicationSentMessage::__set_application(const Application& val) {
  this->application = val;
}

uint32_t ApplicationSentMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->message.read(iprot);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->application.read(iprot);
          this->__isset.application = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ApplicationSentMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ApplicationSentMessage");

  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->message.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("application", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->application.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ApplicationSentMessage &a, ApplicationSentMessage &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.application, b.application);
  swap(a.__isset, b.__isset);
}

ApplicationSentMessage::ApplicationSentMessage(const ApplicationSentMessage& other8) {
  message = other8.message;
  application = other8.application;
  __isset = other8.__isset;
}
ApplicationSentMessage& ApplicationSentMessage::operator=(const ApplicationSentMessage& other9) {
  message = other9.message;
  application = other9.application;
  __isset = other9.__isset;
  return *this;
}
void ApplicationSentMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ApplicationSentMessage(";
  out << "message="; (__isset.message ? (out << to_string(message)) : (out << "<null>"));
  out << ", " << "application=" << to_string(application);
  out << ")";
}


Event::~Event() throw() {
}


void Event::__set_healthCheckFailed(const HealthCheckFailed& val) {
  this->healthCheckFailed = val;
}

void Event::__set_healthCheckBackToNormal(const HealthCheckBackToNormal& val) {
  this->healthCheckBackToNormal = val;
}

void Event::__set_applicationTokenRenewed(const ApplicationTokenRenewed& val) {
  this->applicationTokenRenewed = val;
}

void Event::__set_applicationTokenRegenerated(const ApplicationTokenRegenerated& val) {
  this->applicationTokenRegenerated = val;
}

void Event::__set_applicationSentMessage(const ApplicationSentMessage& val) {
  this->applicationSentMessage = val;
}

uint32_t Event::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->healthCheckFailed.read(iprot);
          this->__isset.healthCheckFailed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->healthCheckBackToNormal.read(iprot);
          this->__isset.healthCheckBackToNormal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->applicationTokenRenewed.read(iprot);
          this->__isset.applicationTokenRenewed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->applicationTokenRegenerated.read(iprot);
          this->__isset.applicationTokenRegenerated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->applicationSentMessage.read(iprot);
          this->__isset.applicationSentMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Event::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Event");

  xfer += oprot->writeFieldBegin("healthCheckFailed", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->healthCheckFailed.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("healthCheckBackToNormal", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->healthCheckBackToNormal.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationTokenRenewed", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->applicationTokenRenewed.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationTokenRegenerated", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->applicationTokenRegenerated.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationSentMessage", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->applicationSentMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Event &a, Event &b) {
  using ::std::swap;
  swap(a.healthCheckFailed, b.healthCheckFailed);
  swap(a.healthCheckBackToNormal, b.healthCheckBackToNormal);
  swap(a.applicationTokenRenewed, b.applicationTokenRenewed);
  swap(a.applicationTokenRegenerated, b.applicationTokenRegenerated);
  swap(a.applicationSentMessage, b.applicationSentMessage);
  swap(a.__isset, b.__isset);
}

Event::Event(const Event& other10) {
  healthCheckFailed = other10.healthCheckFailed;
  healthCheckBackToNormal = other10.healthCheckBackToNormal;
  applicationTokenRenewed = other10.applicationTokenRenewed;
  applicationTokenRegenerated = other10.applicationTokenRegenerated;
  applicationSentMessage = other10.applicationSentMessage;
  __isset = other10.__isset;
}
Event& Event::operator=(const Event& other11) {
  healthCheckFailed = other11.healthCheckFailed;
  healthCheckBackToNormal = other11.healthCheckBackToNormal;
  applicationTokenRenewed = other11.applicationTokenRenewed;
  applicationTokenRegenerated = other11.applicationTokenRegenerated;
  applicationSentMessage = other11.applicationSentMessage;
  __isset = other11.__isset;
  return *this;
}
void Event::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Event(";
  out << "healthCheckFailed=" << to_string(healthCheckFailed);
  out << ", " << "healthCheckBackToNormal=" << to_string(healthCheckBackToNormal);
  out << ", " << "applicationTokenRenewed=" << to_string(applicationTokenRenewed);
  out << ", " << "applicationTokenRegenerated=" << to_string(applicationTokenRegenerated);
  out << ", " << "applicationSentMessage=" << to_string(applicationSentMessage);
  out << ")";
}


Notification::~Notification() throw() {
}


void Notification::__set_event(const Event& val) {
  this->event = val;
}

void Notification::__set_timestamp(const timestamp val) {
  this->timestamp = val;
}

uint32_t Notification::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->event.read(iprot);
          this->__isset.event = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Notification::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Notification");

  xfer += oprot->writeFieldBegin("event", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->event.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Notification &a, Notification &b) {
  using ::std::swap;
  swap(a.event, b.event);
  swap(a.timestamp, b.timestamp);
  swap(a.__isset, b.__isset);
}

Notification::Notification(const Notification& other12) {
  event = other12.event;
  timestamp = other12.timestamp;
  __isset = other12.__isset;
}
Notification& Notification::operator=(const Notification& other13) {
  event = other13.event;
  timestamp = other13.timestamp;
  __isset = other13.__isset;
  return *this;
}
void Notification::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Notification(";
  out << "event=" << to_string(event);
  out << ", " << "timestamp=" << to_string(timestamp);
  out << ")";
}

}}}} // namespace
