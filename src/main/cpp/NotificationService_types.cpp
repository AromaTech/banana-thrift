/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "NotificationService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace aroma { namespace thrift { namespace notification { namespace service {


GetEventsRequest::~GetEventsRequest() throw() {
}


void GetEventsRequest::__set_token(const UserToken& val) {
  this->token = val;
}

void GetEventsRequest::__set_forUser(const uuid& val) {
  this->forUser = val;
}

void GetEventsRequest::__set_byApplication(const uuid& val) {
  this->byApplication = val;
__isset.byApplication = true;
}

uint32_t GetEventsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->forUser);
          this->__isset.forUser = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->byApplication);
          this->__isset.byApplication = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetEventsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetEventsRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("forUser", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->forUser);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.byApplication) {
    xfer += oprot->writeFieldBegin("byApplication", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->byApplication);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetEventsRequest &a, GetEventsRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.forUser, b.forUser);
  swap(a.byApplication, b.byApplication);
  swap(a.__isset, b.__isset);
}

GetEventsRequest::GetEventsRequest(const GetEventsRequest& other0) {
  token = other0.token;
  forUser = other0.forUser;
  byApplication = other0.byApplication;
  __isset = other0.__isset;
}
GetEventsRequest& GetEventsRequest::operator=(const GetEventsRequest& other1) {
  token = other1.token;
  forUser = other1.forUser;
  byApplication = other1.byApplication;
  __isset = other1.__isset;
  return *this;
}
void GetEventsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetEventsRequest(";
  out << "token=" << to_string(token);
  out << ", " << "forUser=" << to_string(forUser);
  out << ", " << "byApplication="; (__isset.byApplication ? (out << to_string(byApplication)) : (out << "<null>"));
  out << ")";
}


GetEventsResponse::~GetEventsResponse() throw() {
}


void GetEventsResponse::__set_events(const std::vector<Event> & val) {
  this->events = val;
}

uint32_t GetEventsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->events.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->events.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += this->events[_i6].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.events = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetEventsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetEventsResponse");

  xfer += oprot->writeFieldBegin("events", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->events.size()));
    std::vector<Event> ::const_iterator _iter7;
    for (_iter7 = this->events.begin(); _iter7 != this->events.end(); ++_iter7)
    {
      xfer += (*_iter7).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetEventsResponse &a, GetEventsResponse &b) {
  using ::std::swap;
  swap(a.events, b.events);
  swap(a.__isset, b.__isset);
}

GetEventsResponse::GetEventsResponse(const GetEventsResponse& other8) {
  events = other8.events;
  __isset = other8.__isset;
}
GetEventsResponse& GetEventsResponse::operator=(const GetEventsResponse& other9) {
  events = other9.events;
  __isset = other9.__isset;
  return *this;
}
void GetEventsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetEventsResponse(";
  out << "events=" << to_string(events);
  out << ")";
}


SendNotificationRequest::~SendNotificationRequest() throw() {
}


void SendNotificationRequest::__set_token(const AuthenticationToken& val) {
  this->token = val;
}

void SendNotificationRequest::__set_event(const Event& val) {
  this->event = val;
}

void SendNotificationRequest::__set_channelsByUser(const std::map<User, std::vector<AromaChannel> > & val) {
  this->channelsByUser = val;
}

void SendNotificationRequest::__set_storeEvent(const bool val) {
  this->storeEvent = val;
__isset.storeEvent = true;
}

uint32_t SendNotificationRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->event.read(iprot);
          this->__isset.event = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->channelsByUser.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _ktype11;
            ::apache::thrift::protocol::TType _vtype12;
            xfer += iprot->readMapBegin(_ktype11, _vtype12, _size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              User _key15;
              xfer += _key15.read(iprot);
              std::vector<AromaChannel> & _val16 = this->channelsByUser[_key15];
              {
                _val16.clear();
                uint32_t _size17;
                ::apache::thrift::protocol::TType _etype20;
                xfer += iprot->readListBegin(_etype20, _size17);
                _val16.resize(_size17);
                uint32_t _i21;
                for (_i21 = 0; _i21 < _size17; ++_i21)
                {
                  xfer += _val16[_i21].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.channelsByUser = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->storeEvent);
          this->__isset.storeEvent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SendNotificationRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SendNotificationRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("event", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->event.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channelsByUser", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRUCT, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->channelsByUser.size()));
    std::map<User, std::vector<AromaChannel> > ::const_iterator _iter22;
    for (_iter22 = this->channelsByUser.begin(); _iter22 != this->channelsByUser.end(); ++_iter22)
    {
      xfer += _iter22->first.write(oprot);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter22->second.size()));
        std::vector<AromaChannel> ::const_iterator _iter23;
        for (_iter23 = _iter22->second.begin(); _iter23 != _iter22->second.end(); ++_iter23)
        {
          xfer += (*_iter23).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.storeEvent) {
    xfer += oprot->writeFieldBegin("storeEvent", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->storeEvent);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SendNotificationRequest &a, SendNotificationRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.event, b.event);
  swap(a.channelsByUser, b.channelsByUser);
  swap(a.storeEvent, b.storeEvent);
  swap(a.__isset, b.__isset);
}

SendNotificationRequest::SendNotificationRequest(const SendNotificationRequest& other24) {
  token = other24.token;
  event = other24.event;
  channelsByUser = other24.channelsByUser;
  storeEvent = other24.storeEvent;
  __isset = other24.__isset;
}
SendNotificationRequest& SendNotificationRequest::operator=(const SendNotificationRequest& other25) {
  token = other25.token;
  event = other25.event;
  channelsByUser = other25.channelsByUser;
  storeEvent = other25.storeEvent;
  __isset = other25.__isset;
  return *this;
}
void SendNotificationRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SendNotificationRequest(";
  out << "token=" << to_string(token);
  out << ", " << "event=" << to_string(event);
  out << ", " << "channelsByUser=" << to_string(channelsByUser);
  out << ", " << "storeEvent="; (__isset.storeEvent ? (out << to_string(storeEvent)) : (out << "<null>"));
  out << ")";
}


SendNotificationResponse::~SendNotificationResponse() throw() {
}


void SendNotificationResponse::__set_notificationId(const uuid& val) {
  this->notificationId = val;
__isset.notificationId = true;
}

uint32_t SendNotificationResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->notificationId);
          this->__isset.notificationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SendNotificationResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SendNotificationResponse");

  if (this->__isset.notificationId) {
    xfer += oprot->writeFieldBegin("notificationId", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->notificationId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SendNotificationResponse &a, SendNotificationResponse &b) {
  using ::std::swap;
  swap(a.notificationId, b.notificationId);
  swap(a.__isset, b.__isset);
}

SendNotificationResponse::SendNotificationResponse(const SendNotificationResponse& other26) {
  notificationId = other26.notificationId;
  __isset = other26.__isset;
}
SendNotificationResponse& SendNotificationResponse::operator=(const SendNotificationResponse& other27) {
  notificationId = other27.notificationId;
  __isset = other27.__isset;
  return *this;
}
void SendNotificationResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SendNotificationResponse(";
  out << "notificationId="; (__isset.notificationId ? (out << to_string(notificationId)) : (out << "<null>"));
  out << ")";
}

}}}} // namespace
