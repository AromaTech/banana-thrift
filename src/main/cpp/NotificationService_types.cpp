/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "NotificationService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace aroma { namespace banana { namespace thrift { namespace notification { namespace service {


SendNotificationRequest::~SendNotificationRequest() throw() {
}


void SendNotificationRequest::__set_token(const AuthenticationToken& val) {
  this->token = val;
}

void SendNotificationRequest::__set_event(const Event& val) {
  this->event = val;
}

uint32_t SendNotificationRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->event.read(iprot);
          this->__isset.event = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SendNotificationRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SendNotificationRequest");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("event", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->event.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SendNotificationRequest &a, SendNotificationRequest &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.event, b.event);
  swap(a.__isset, b.__isset);
}

SendNotificationRequest::SendNotificationRequest(const SendNotificationRequest& other0) {
  token = other0.token;
  event = other0.event;
  __isset = other0.__isset;
}
SendNotificationRequest& SendNotificationRequest::operator=(const SendNotificationRequest& other1) {
  token = other1.token;
  event = other1.event;
  __isset = other1.__isset;
  return *this;
}
void SendNotificationRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SendNotificationRequest(";
  out << "token=" << to_string(token);
  out << ", " << "event=" << to_string(event);
  out << ")";
}


SendNotificationResponse::~SendNotificationResponse() throw() {
}


uint32_t SendNotificationResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SendNotificationResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SendNotificationResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SendNotificationResponse &a, SendNotificationResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

SendNotificationResponse::SendNotificationResponse(const SendNotificationResponse& other2) {
  (void) other2;
}
SendNotificationResponse& SendNotificationResponse::operator=(const SendNotificationResponse& other3) {
  (void) other3;
  return *this;
}
void SendNotificationResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SendNotificationResponse(";
  out << ")";
}

}}}}} // namespace
