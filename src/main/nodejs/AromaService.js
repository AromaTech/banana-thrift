//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Authentication_ttypes = require('./Authentication_types')
var Aroma_ttypes = require('./Aroma_types')
var Channels_ttypes = require('./Channels_types')
var Endpoint_ttypes = require('./Endpoint_types')
var Events_ttypes = require('./Events_types')
var Exceptions_ttypes = require('./Exceptions_types')
var Reactions_ttypes = require('./Reactions_types')


var ttypes = require('./AromaService_types');
//HELPER FUNCTIONS AND STRUCTURES

AromaService_getApiVersion_args = function(args) {
};
AromaService_getApiVersion_args.prototype = {};
AromaService_getApiVersion_args.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  input.skip(ftype);
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_getApiVersion_args.prototype.write = function(output) {
                output.writeStructBegin('AromaService_getApiVersion_args');
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_getApiVersion_result = function(args) {
                this.success = null;
                if (args) {
                                if (args.success !== undefined && args.success !== null) {
                                                this.success = args.success;
                                }
                }
};
AromaService_getApiVersion_result.prototype = {};
AromaService_getApiVersion_result.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 0:
                    if (ftype == Thrift.Type.DOUBLE) {
                      this.success = input.readDouble();
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 0:
                      input.skip(ftype);
                      break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_getApiVersion_result.prototype.write = function(output) {
                output.writeStructBegin('AromaService_getApiVersion_result');
                if (this.success !== null && this.success !== undefined) {
                  output.writeFieldBegin('success', Thrift.Type.DOUBLE, 0);
                  output.writeDouble(this.success);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_deleteApplication_args = function(args) {
                this.request = null;
                if (args) {
                                if (args.request !== undefined && args.request !== null) {
                                                this.request = new ttypes.DeleteApplicationRequest(args.request);
                                }
                }
};
AromaService_deleteApplication_args.prototype = {};
AromaService_deleteApplication_args.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.request = new ttypes.DeleteApplicationRequest();
                      this.request.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 0:
                      input.skip(ftype);
                      break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_deleteApplication_args.prototype.write = function(output) {
                output.writeStructBegin('AromaService_deleteApplication_args');
                if (this.request !== null && this.request !== undefined) {
                  output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                  this.request.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_deleteApplication_result = function(args) {
                this.success = null;
                this.ex1 = null;
                this.ex2 = null;
                this.ex3 = null;
                this.ex4 = null;
                this.ex5 = null;
                if (args instanceof Exceptions_ttypes.OperationFailedException) {
                                this.ex1 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                                this.ex2 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidTokenException) {
                                this.ex3 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.ApplicationDoesNotExistException) {
                                this.ex4 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.UnauthorizedException) {
                                this.ex5 = args;
                                return;
                }
                if (args) {
                                if (args.success !== undefined && args.success !== null) {
                                                this.success = new ttypes.DeleteApplicationResponse(args.success);
                                }
                                if (args.ex1 !== undefined && args.ex1 !== null) {
                                                this.ex1 = args.ex1;
                                }
                                if (args.ex2 !== undefined && args.ex2 !== null) {
                                                this.ex2 = args.ex2;
                                }
                                if (args.ex3 !== undefined && args.ex3 !== null) {
                                                this.ex3 = args.ex3;
                                }
                                if (args.ex4 !== undefined && args.ex4 !== null) {
                                                this.ex4 = args.ex4;
                                }
                                if (args.ex5 !== undefined && args.ex5 !== null) {
                                                this.ex5 = args.ex5;
                                }
                }
};
AromaService_deleteApplication_result.prototype = {};
AromaService_deleteApplication_result.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 0:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.success = new ttypes.DeleteApplicationResponse();
                      this.success.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex1 = new Exceptions_ttypes.OperationFailedException();
                      this.ex1.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 2:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
                      this.ex2.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 3:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex3 = new Exceptions_ttypes.InvalidTokenException();
                      this.ex3.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 4:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex4 = new Exceptions_ttypes.ApplicationDoesNotExistException();
                      this.ex4.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 5:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex5 = new Exceptions_ttypes.UnauthorizedException();
                      this.ex5.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_deleteApplication_result.prototype.write = function(output) {
                output.writeStructBegin('AromaService_deleteApplication_result');
                if (this.success !== null && this.success !== undefined) {
                  output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                  this.success.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex1 !== null && this.ex1 !== undefined) {
                  output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                  this.ex1.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex2 !== null && this.ex2 !== undefined) {
                  output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                  this.ex2.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex3 !== null && this.ex3 !== undefined) {
                  output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                  this.ex3.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex4 !== null && this.ex4 !== undefined) {
                  output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                  this.ex4.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex5 !== null && this.ex5 !== undefined) {
                  output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                  this.ex5.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_deleteMessage_args = function(args) {
                this.request = null;
                if (args) {
                                if (args.request !== undefined && args.request !== null) {
                                                this.request = new ttypes.DeleteMessageRequest(args.request);
                                }
                }
};
AromaService_deleteMessage_args.prototype = {};
AromaService_deleteMessage_args.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.request = new ttypes.DeleteMessageRequest();
                      this.request.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 0:
                      input.skip(ftype);
                      break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_deleteMessage_args.prototype.write = function(output) {
                output.writeStructBegin('AromaService_deleteMessage_args');
                if (this.request !== null && this.request !== undefined) {
                  output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                  this.request.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_deleteMessage_result = function(args) {
                this.success = null;
                this.ex1 = null;
                this.ex2 = null;
                this.ex3 = null;
                this.ex4 = null;
                this.ex5 = null;
                if (args instanceof Exceptions_ttypes.OperationFailedException) {
                                this.ex1 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                                this.ex2 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidTokenException) {
                                this.ex3 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.MessageDoesNotExistException) {
                                this.ex4 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.UnauthorizedException) {
                                this.ex5 = args;
                                return;
                }
                if (args) {
                                if (args.success !== undefined && args.success !== null) {
                                                this.success = new ttypes.DeleteMessageResponse(args.success);
                                }
                                if (args.ex1 !== undefined && args.ex1 !== null) {
                                                this.ex1 = args.ex1;
                                }
                                if (args.ex2 !== undefined && args.ex2 !== null) {
                                                this.ex2 = args.ex2;
                                }
                                if (args.ex3 !== undefined && args.ex3 !== null) {
                                                this.ex3 = args.ex3;
                                }
                                if (args.ex4 !== undefined && args.ex4 !== null) {
                                                this.ex4 = args.ex4;
                                }
                                if (args.ex5 !== undefined && args.ex5 !== null) {
                                                this.ex5 = args.ex5;
                                }
                }
};
AromaService_deleteMessage_result.prototype = {};
AromaService_deleteMessage_result.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 0:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.success = new ttypes.DeleteMessageResponse();
                      this.success.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex1 = new Exceptions_ttypes.OperationFailedException();
                      this.ex1.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 2:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
                      this.ex2.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 3:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex3 = new Exceptions_ttypes.InvalidTokenException();
                      this.ex3.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 4:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex4 = new Exceptions_ttypes.MessageDoesNotExistException();
                      this.ex4.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 5:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex5 = new Exceptions_ttypes.UnauthorizedException();
                      this.ex5.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_deleteMessage_result.prototype.write = function(output) {
                output.writeStructBegin('AromaService_deleteMessage_result');
                if (this.success !== null && this.success !== undefined) {
                  output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                  this.success.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex1 !== null && this.ex1 !== undefined) {
                  output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                  this.ex1.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex2 !== null && this.ex2 !== undefined) {
                  output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                  this.ex2.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex3 !== null && this.ex3 !== undefined) {
                  output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                  this.ex3.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex4 !== null && this.ex4 !== undefined) {
                  output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                  this.ex4.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex5 !== null && this.ex5 !== undefined) {
                  output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                  this.ex5.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_dismissMessage_args = function(args) {
                this.request = null;
                if (args) {
                                if (args.request !== undefined && args.request !== null) {
                                                this.request = new ttypes.DismissMessageRequest(args.request);
                                }
                }
};
AromaService_dismissMessage_args.prototype = {};
AromaService_dismissMessage_args.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.request = new ttypes.DismissMessageRequest();
                      this.request.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 0:
                      input.skip(ftype);
                      break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_dismissMessage_args.prototype.write = function(output) {
                output.writeStructBegin('AromaService_dismissMessage_args');
                if (this.request !== null && this.request !== undefined) {
                  output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                  this.request.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_dismissMessage_result = function(args) {
                this.success = null;
                this.ex1 = null;
                this.ex2 = null;
                this.ex3 = null;
                this.ex4 = null;
                this.ex5 = null;
                if (args instanceof Exceptions_ttypes.OperationFailedException) {
                                this.ex1 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                                this.ex2 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidTokenException) {
                                this.ex3 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.MessageDoesNotExistException) {
                                this.ex4 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.UnauthorizedException) {
                                this.ex5 = args;
                                return;
                }
                if (args) {
                                if (args.success !== undefined && args.success !== null) {
                                                this.success = new ttypes.DismissMessageResponse(args.success);
                                }
                                if (args.ex1 !== undefined && args.ex1 !== null) {
                                                this.ex1 = args.ex1;
                                }
                                if (args.ex2 !== undefined && args.ex2 !== null) {
                                                this.ex2 = args.ex2;
                                }
                                if (args.ex3 !== undefined && args.ex3 !== null) {
                                                this.ex3 = args.ex3;
                                }
                                if (args.ex4 !== undefined && args.ex4 !== null) {
                                                this.ex4 = args.ex4;
                                }
                                if (args.ex5 !== undefined && args.ex5 !== null) {
                                                this.ex5 = args.ex5;
                                }
                }
};
AromaService_dismissMessage_result.prototype = {};
AromaService_dismissMessage_result.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 0:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.success = new ttypes.DismissMessageResponse();
                      this.success.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex1 = new Exceptions_ttypes.OperationFailedException();
                      this.ex1.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 2:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
                      this.ex2.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 3:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex3 = new Exceptions_ttypes.InvalidTokenException();
                      this.ex3.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 4:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex4 = new Exceptions_ttypes.MessageDoesNotExistException();
                      this.ex4.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 5:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex5 = new Exceptions_ttypes.UnauthorizedException();
                      this.ex5.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_dismissMessage_result.prototype.write = function(output) {
                output.writeStructBegin('AromaService_dismissMessage_result');
                if (this.success !== null && this.success !== undefined) {
                  output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                  this.success.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex1 !== null && this.ex1 !== undefined) {
                  output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                  this.ex1.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex2 !== null && this.ex2 !== undefined) {
                  output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                  this.ex2.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex3 !== null && this.ex3 !== undefined) {
                  output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                  this.ex3.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex4 !== null && this.ex4 !== undefined) {
                  output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                  this.ex4.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex5 !== null && this.ex5 !== undefined) {
                  output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                  this.ex5.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_provisionApplication_args = function(args) {
                this.request = null;
                if (args) {
                                if (args.request !== undefined && args.request !== null) {
                                                this.request = new ttypes.ProvisionApplicationRequest(args.request);
                                }
                }
};
AromaService_provisionApplication_args.prototype = {};
AromaService_provisionApplication_args.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.request = new ttypes.ProvisionApplicationRequest();
                      this.request.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 0:
                      input.skip(ftype);
                      break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_provisionApplication_args.prototype.write = function(output) {
                output.writeStructBegin('AromaService_provisionApplication_args');
                if (this.request !== null && this.request !== undefined) {
                  output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                  this.request.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_provisionApplication_result = function(args) {
                this.success = null;
                this.ex1 = null;
                this.ex2 = null;
                this.ex3 = null;
                this.ex4 = null;
                this.ex5 = null;
                if (args instanceof Exceptions_ttypes.OperationFailedException) {
                                this.ex1 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                                this.ex2 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidTokenException) {
                                this.ex3 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.ApplicationDoesNotExistException) {
                                this.ex4 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.UnauthorizedException) {
                                this.ex5 = args;
                                return;
                }
                if (args) {
                                if (args.success !== undefined && args.success !== null) {
                                                this.success = new ttypes.ProvisionApplicationResponse(args.success);
                                }
                                if (args.ex1 !== undefined && args.ex1 !== null) {
                                                this.ex1 = args.ex1;
                                }
                                if (args.ex2 !== undefined && args.ex2 !== null) {
                                                this.ex2 = args.ex2;
                                }
                                if (args.ex3 !== undefined && args.ex3 !== null) {
                                                this.ex3 = args.ex3;
                                }
                                if (args.ex4 !== undefined && args.ex4 !== null) {
                                                this.ex4 = args.ex4;
                                }
                                if (args.ex5 !== undefined && args.ex5 !== null) {
                                                this.ex5 = args.ex5;
                                }
                }
};
AromaService_provisionApplication_result.prototype = {};
AromaService_provisionApplication_result.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 0:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.success = new ttypes.ProvisionApplicationResponse();
                      this.success.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex1 = new Exceptions_ttypes.OperationFailedException();
                      this.ex1.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 2:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
                      this.ex2.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 3:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex3 = new Exceptions_ttypes.InvalidTokenException();
                      this.ex3.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 4:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex4 = new Exceptions_ttypes.ApplicationDoesNotExistException();
                      this.ex4.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 5:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex5 = new Exceptions_ttypes.UnauthorizedException();
                      this.ex5.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_provisionApplication_result.prototype.write = function(output) {
                output.writeStructBegin('AromaService_provisionApplication_result');
                if (this.success !== null && this.success !== undefined) {
                  output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                  this.success.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex1 !== null && this.ex1 !== undefined) {
                  output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                  this.ex1.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex2 !== null && this.ex2 !== undefined) {
                  output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                  this.ex2.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex3 !== null && this.ex3 !== undefined) {
                  output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                  this.ex3.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex4 !== null && this.ex4 !== undefined) {
                  output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                  this.ex4.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex5 !== null && this.ex5 !== undefined) {
                  output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                  this.ex5.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_regenerateToken_args = function(args) {
                this.request = null;
                if (args) {
                                if (args.request !== undefined && args.request !== null) {
                                                this.request = new ttypes.RegenerateApplicationTokenRequest(args.request);
                                }
                }
};
AromaService_regenerateToken_args.prototype = {};
AromaService_regenerateToken_args.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.request = new ttypes.RegenerateApplicationTokenRequest();
                      this.request.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 0:
                      input.skip(ftype);
                      break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_regenerateToken_args.prototype.write = function(output) {
                output.writeStructBegin('AromaService_regenerateToken_args');
                if (this.request !== null && this.request !== undefined) {
                  output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                  this.request.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_regenerateToken_result = function(args) {
                this.success = null;
                this.ex1 = null;
                this.ex2 = null;
                this.ex3 = null;
                this.ex4 = null;
                this.ex5 = null;
                if (args instanceof Exceptions_ttypes.OperationFailedException) {
                                this.ex1 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                                this.ex2 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidTokenException) {
                                this.ex3 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.ApplicationDoesNotExistException) {
                                this.ex4 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.UnauthorizedException) {
                                this.ex5 = args;
                                return;
                }
                if (args) {
                                if (args.success !== undefined && args.success !== null) {
                                                this.success = new ttypes.RegenerateApplicationTokenResponse(args.success);
                                }
                                if (args.ex1 !== undefined && args.ex1 !== null) {
                                                this.ex1 = args.ex1;
                                }
                                if (args.ex2 !== undefined && args.ex2 !== null) {
                                                this.ex2 = args.ex2;
                                }
                                if (args.ex3 !== undefined && args.ex3 !== null) {
                                                this.ex3 = args.ex3;
                                }
                                if (args.ex4 !== undefined && args.ex4 !== null) {
                                                this.ex4 = args.ex4;
                                }
                                if (args.ex5 !== undefined && args.ex5 !== null) {
                                                this.ex5 = args.ex5;
                                }
                }
};
AromaService_regenerateToken_result.prototype = {};
AromaService_regenerateToken_result.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 0:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.success = new ttypes.RegenerateApplicationTokenResponse();
                      this.success.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex1 = new Exceptions_ttypes.OperationFailedException();
                      this.ex1.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 2:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
                      this.ex2.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 3:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex3 = new Exceptions_ttypes.InvalidTokenException();
                      this.ex3.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 4:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex4 = new Exceptions_ttypes.ApplicationDoesNotExistException();
                      this.ex4.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 5:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex5 = new Exceptions_ttypes.UnauthorizedException();
                      this.ex5.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_regenerateToken_result.prototype.write = function(output) {
                output.writeStructBegin('AromaService_regenerateToken_result');
                if (this.success !== null && this.success !== undefined) {
                  output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                  this.success.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex1 !== null && this.ex1 !== undefined) {
                  output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                  this.ex1.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex2 !== null && this.ex2 !== undefined) {
                  output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                  this.ex2.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex3 !== null && this.ex3 !== undefined) {
                  output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                  this.ex3.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex4 !== null && this.ex4 !== undefined) {
                  output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                  this.ex4.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex5 !== null && this.ex5 !== undefined) {
                  output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                  this.ex5.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_registerHealthCheck_args = function(args) {
                this.request = null;
                if (args) {
                                if (args.request !== undefined && args.request !== null) {
                                                this.request = new ttypes.RegisterHealthCheckRequest(args.request);
                                }
                }
};
AromaService_registerHealthCheck_args.prototype = {};
AromaService_registerHealthCheck_args.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.request = new ttypes.RegisterHealthCheckRequest();
                      this.request.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 0:
                      input.skip(ftype);
                      break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_registerHealthCheck_args.prototype.write = function(output) {
                output.writeStructBegin('AromaService_registerHealthCheck_args');
                if (this.request !== null && this.request !== undefined) {
                  output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                  this.request.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_registerHealthCheck_result = function(args) {
                this.success = null;
                this.ex1 = null;
                this.ex2 = null;
                this.ex3 = null;
                this.ex4 = null;
                this.ex5 = null;
                if (args instanceof Exceptions_ttypes.OperationFailedException) {
                                this.ex1 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                                this.ex2 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidTokenException) {
                                this.ex3 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.ApplicationDoesNotExistException) {
                                this.ex4 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.UnauthorizedException) {
                                this.ex5 = args;
                                return;
                }
                if (args) {
                                if (args.success !== undefined && args.success !== null) {
                                                this.success = new ttypes.RegisterHealthCheckResponse(args.success);
                                }
                                if (args.ex1 !== undefined && args.ex1 !== null) {
                                                this.ex1 = args.ex1;
                                }
                                if (args.ex2 !== undefined && args.ex2 !== null) {
                                                this.ex2 = args.ex2;
                                }
                                if (args.ex3 !== undefined && args.ex3 !== null) {
                                                this.ex3 = args.ex3;
                                }
                                if (args.ex4 !== undefined && args.ex4 !== null) {
                                                this.ex4 = args.ex4;
                                }
                                if (args.ex5 !== undefined && args.ex5 !== null) {
                                                this.ex5 = args.ex5;
                                }
                }
};
AromaService_registerHealthCheck_result.prototype = {};
AromaService_registerHealthCheck_result.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 0:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.success = new ttypes.RegisterHealthCheckResponse();
                      this.success.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex1 = new Exceptions_ttypes.OperationFailedException();
                      this.ex1.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 2:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
                      this.ex2.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 3:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex3 = new Exceptions_ttypes.InvalidTokenException();
                      this.ex3.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 4:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex4 = new Exceptions_ttypes.ApplicationDoesNotExistException();
                      this.ex4.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 5:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex5 = new Exceptions_ttypes.UnauthorizedException();
                      this.ex5.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_registerHealthCheck_result.prototype.write = function(output) {
                output.writeStructBegin('AromaService_registerHealthCheck_result');
                if (this.success !== null && this.success !== undefined) {
                  output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                  this.success.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex1 !== null && this.ex1 !== undefined) {
                  output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                  this.ex1.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex2 !== null && this.ex2 !== undefined) {
                  output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                  this.ex2.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex3 !== null && this.ex3 !== undefined) {
                  output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                  this.ex3.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex4 !== null && this.ex4 !== undefined) {
                  output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                  this.ex4.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex5 !== null && this.ex5 !== undefined) {
                  output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                  this.ex5.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_removeSavedChannel_args = function(args) {
                this.request = null;
                if (args) {
                                if (args.request !== undefined && args.request !== null) {
                                                this.request = new ttypes.RemoveSavedChannelRequest(args.request);
                                }
                }
};
AromaService_removeSavedChannel_args.prototype = {};
AromaService_removeSavedChannel_args.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.request = new ttypes.RemoveSavedChannelRequest();
                      this.request.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 0:
                      input.skip(ftype);
                      break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_removeSavedChannel_args.prototype.write = function(output) {
                output.writeStructBegin('AromaService_removeSavedChannel_args');
                if (this.request !== null && this.request !== undefined) {
                  output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                  this.request.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_removeSavedChannel_result = function(args) {
                this.success = null;
                this.ex1 = null;
                this.ex2 = null;
                this.ex3 = null;
                this.ex4 = null;
                this.ex5 = null;
                if (args instanceof Exceptions_ttypes.OperationFailedException) {
                                this.ex1 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                                this.ex2 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidTokenException) {
                                this.ex3 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.UnauthorizedException) {
                                this.ex4 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.ChannelDoesNotExistException) {
                                this.ex5 = args;
                                return;
                }
                if (args) {
                                if (args.success !== undefined && args.success !== null) {
                                                this.success = new ttypes.RemoveSavedChannelResponse(args.success);
                                }
                                if (args.ex1 !== undefined && args.ex1 !== null) {
                                                this.ex1 = args.ex1;
                                }
                                if (args.ex2 !== undefined && args.ex2 !== null) {
                                                this.ex2 = args.ex2;
                                }
                                if (args.ex3 !== undefined && args.ex3 !== null) {
                                                this.ex3 = args.ex3;
                                }
                                if (args.ex4 !== undefined && args.ex4 !== null) {
                                                this.ex4 = args.ex4;
                                }
                                if (args.ex5 !== undefined && args.ex5 !== null) {
                                                this.ex5 = args.ex5;
                                }
                }
};
AromaService_removeSavedChannel_result.prototype = {};
AromaService_removeSavedChannel_result.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 0:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.success = new ttypes.RemoveSavedChannelResponse();
                      this.success.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex1 = new Exceptions_ttypes.OperationFailedException();
                      this.ex1.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 2:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
                      this.ex2.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 3:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex3 = new Exceptions_ttypes.InvalidTokenException();
                      this.ex3.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 4:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex4 = new Exceptions_ttypes.UnauthorizedException();
                      this.ex4.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 5:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex5 = new Exceptions_ttypes.ChannelDoesNotExistException();
                      this.ex5.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_removeSavedChannel_result.prototype.write = function(output) {
                output.writeStructBegin('AromaService_removeSavedChannel_result');
                if (this.success !== null && this.success !== undefined) {
                  output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                  this.success.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex1 !== null && this.ex1 !== undefined) {
                  output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                  this.ex1.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex2 !== null && this.ex2 !== undefined) {
                  output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                  this.ex2.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex3 !== null && this.ex3 !== undefined) {
                  output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                  this.ex3.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex4 !== null && this.ex4 !== undefined) {
                  output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                  this.ex4.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex5 !== null && this.ex5 !== undefined) {
                  output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                  this.ex5.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_renewApplicationToken_args = function(args) {
                this.request = null;
                if (args) {
                                if (args.request !== undefined && args.request !== null) {
                                                this.request = new ttypes.RenewApplicationTokenRequest(args.request);
                                }
                }
};
AromaService_renewApplicationToken_args.prototype = {};
AromaService_renewApplicationToken_args.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.request = new ttypes.RenewApplicationTokenRequest();
                      this.request.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 0:
                      input.skip(ftype);
                      break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_renewApplicationToken_args.prototype.write = function(output) {
                output.writeStructBegin('AromaService_renewApplicationToken_args');
                if (this.request !== null && this.request !== undefined) {
                  output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                  this.request.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_renewApplicationToken_result = function(args) {
                this.success = null;
                this.ex1 = null;
                this.ex2 = null;
                this.ex3 = null;
                this.ex4 = null;
                this.ex5 = null;
                if (args instanceof Exceptions_ttypes.OperationFailedException) {
                                this.ex1 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                                this.ex2 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidTokenException) {
                                this.ex3 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.ApplicationDoesNotExistException) {
                                this.ex4 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.UnauthorizedException) {
                                this.ex5 = args;
                                return;
                }
                if (args) {
                                if (args.success !== undefined && args.success !== null) {
                                                this.success = new ttypes.RenewApplicationTokenResponse(args.success);
                                }
                                if (args.ex1 !== undefined && args.ex1 !== null) {
                                                this.ex1 = args.ex1;
                                }
                                if (args.ex2 !== undefined && args.ex2 !== null) {
                                                this.ex2 = args.ex2;
                                }
                                if (args.ex3 !== undefined && args.ex3 !== null) {
                                                this.ex3 = args.ex3;
                                }
                                if (args.ex4 !== undefined && args.ex4 !== null) {
                                                this.ex4 = args.ex4;
                                }
                                if (args.ex5 !== undefined && args.ex5 !== null) {
                                                this.ex5 = args.ex5;
                                }
                }
};
AromaService_renewApplicationToken_result.prototype = {};
AromaService_renewApplicationToken_result.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 0:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.success = new ttypes.RenewApplicationTokenResponse();
                      this.success.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex1 = new Exceptions_ttypes.OperationFailedException();
                      this.ex1.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 2:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
                      this.ex2.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 3:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex3 = new Exceptions_ttypes.InvalidTokenException();
                      this.ex3.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 4:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex4 = new Exceptions_ttypes.ApplicationDoesNotExistException();
                      this.ex4.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 5:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex5 = new Exceptions_ttypes.UnauthorizedException();
                      this.ex5.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_renewApplicationToken_result.prototype.write = function(output) {
                output.writeStructBegin('AromaService_renewApplicationToken_result');
                if (this.success !== null && this.success !== undefined) {
                  output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                  this.success.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex1 !== null && this.ex1 !== undefined) {
                  output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                  this.ex1.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex2 !== null && this.ex2 !== undefined) {
                  output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                  this.ex2.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex3 !== null && this.ex3 !== undefined) {
                  output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                  this.ex3.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex4 !== null && this.ex4 !== undefined) {
                  output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                  this.ex4.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex5 !== null && this.ex5 !== undefined) {
                  output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                  this.ex5.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_saveChannel_args = function(args) {
                this.request = null;
                if (args) {
                                if (args.request !== undefined && args.request !== null) {
                                                this.request = new ttypes.SaveChannelRequest(args.request);
                                }
                }
};
AromaService_saveChannel_args.prototype = {};
AromaService_saveChannel_args.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.request = new ttypes.SaveChannelRequest();
                      this.request.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 0:
                      input.skip(ftype);
                      break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_saveChannel_args.prototype.write = function(output) {
                output.writeStructBegin('AromaService_saveChannel_args');
                if (this.request !== null && this.request !== undefined) {
                  output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                  this.request.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_saveChannel_result = function(args) {
                this.success = null;
                this.ex1 = null;
                this.ex2 = null;
                this.ex3 = null;
                this.ex4 = null;
                if (args instanceof Exceptions_ttypes.OperationFailedException) {
                                this.ex1 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                                this.ex2 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidTokenException) {
                                this.ex3 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.UnauthorizedException) {
                                this.ex4 = args;
                                return;
                }
                if (args) {
                                if (args.success !== undefined && args.success !== null) {
                                                this.success = new ttypes.SaveChannelResponse(args.success);
                                }
                                if (args.ex1 !== undefined && args.ex1 !== null) {
                                                this.ex1 = args.ex1;
                                }
                                if (args.ex2 !== undefined && args.ex2 !== null) {
                                                this.ex2 = args.ex2;
                                }
                                if (args.ex3 !== undefined && args.ex3 !== null) {
                                                this.ex3 = args.ex3;
                                }
                                if (args.ex4 !== undefined && args.ex4 !== null) {
                                                this.ex4 = args.ex4;
                                }
                }
};
AromaService_saveChannel_result.prototype = {};
AromaService_saveChannel_result.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 0:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.success = new ttypes.SaveChannelResponse();
                      this.success.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex1 = new Exceptions_ttypes.OperationFailedException();
                      this.ex1.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 2:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
                      this.ex2.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 3:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex3 = new Exceptions_ttypes.InvalidTokenException();
                      this.ex3.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 4:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex4 = new Exceptions_ttypes.UnauthorizedException();
                      this.ex4.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_saveChannel_result.prototype.write = function(output) {
                output.writeStructBegin('AromaService_saveChannel_result');
                if (this.success !== null && this.success !== undefined) {
                  output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                  this.success.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex1 !== null && this.ex1 !== undefined) {
                  output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                  this.ex1.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex2 !== null && this.ex2 !== undefined) {
                  output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                  this.ex2.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex3 !== null && this.ex3 !== undefined) {
                  output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                  this.ex3.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex4 !== null && this.ex4 !== undefined) {
                  output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                  this.ex4.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_signIn_args = function(args) {
                this.request = null;
                if (args) {
                                if (args.request !== undefined && args.request !== null) {
                                                this.request = new ttypes.SignInRequest(args.request);
                                }
                }
};
AromaService_signIn_args.prototype = {};
AromaService_signIn_args.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.request = new ttypes.SignInRequest();
                      this.request.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 0:
                      input.skip(ftype);
                      break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_signIn_args.prototype.write = function(output) {
                output.writeStructBegin('AromaService_signIn_args');
                if (this.request !== null && this.request !== undefined) {
                  output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                  this.request.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_signIn_result = function(args) {
                this.success = null;
                this.ex1 = null;
                this.ex2 = null;
                this.ex3 = null;
                this.ex4 = null;
                if (args instanceof Exceptions_ttypes.OperationFailedException) {
                                this.ex1 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                                this.ex2 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidCredentialsException) {
                                this.ex3 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.UserDoesNotExistException) {
                                this.ex4 = args;
                                return;
                }
                if (args) {
                                if (args.success !== undefined && args.success !== null) {
                                                this.success = new ttypes.SignInResponse(args.success);
                                }
                                if (args.ex1 !== undefined && args.ex1 !== null) {
                                                this.ex1 = args.ex1;
                                }
                                if (args.ex2 !== undefined && args.ex2 !== null) {
                                                this.ex2 = args.ex2;
                                }
                                if (args.ex3 !== undefined && args.ex3 !== null) {
                                                this.ex3 = args.ex3;
                                }
                                if (args.ex4 !== undefined && args.ex4 !== null) {
                                                this.ex4 = args.ex4;
                                }
                }
};
AromaService_signIn_result.prototype = {};
AromaService_signIn_result.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 0:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.success = new ttypes.SignInResponse();
                      this.success.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex1 = new Exceptions_ttypes.OperationFailedException();
                      this.ex1.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 2:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
                      this.ex2.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 3:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex3 = new Exceptions_ttypes.InvalidCredentialsException();
                      this.ex3.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 4:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex4 = new Exceptions_ttypes.UserDoesNotExistException();
                      this.ex4.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_signIn_result.prototype.write = function(output) {
                output.writeStructBegin('AromaService_signIn_result');
                if (this.success !== null && this.success !== undefined) {
                  output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                  this.success.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex1 !== null && this.ex1 !== undefined) {
                  output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                  this.ex1.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex2 !== null && this.ex2 !== undefined) {
                  output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                  this.ex2.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex3 !== null && this.ex3 !== undefined) {
                  output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                  this.ex3.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex4 !== null && this.ex4 !== undefined) {
                  output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                  this.ex4.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_signUp_args = function(args) {
                this.request = null;
                if (args) {
                                if (args.request !== undefined && args.request !== null) {
                                                this.request = new ttypes.SignUpRequest(args.request);
                                }
                }
};
AromaService_signUp_args.prototype = {};
AromaService_signUp_args.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.request = new ttypes.SignUpRequest();
                      this.request.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 0:
                      input.skip(ftype);
                      break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_signUp_args.prototype.write = function(output) {
                output.writeStructBegin('AromaService_signUp_args');
                if (this.request !== null && this.request !== undefined) {
                  output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                  this.request.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_signUp_result = function(args) {
                this.success = null;
                this.ex1 = null;
                this.ex2 = null;
                this.ex3 = null;
                this.ex4 = null;
                if (args instanceof Exceptions_ttypes.OperationFailedException) {
                                this.ex1 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                                this.ex2 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidCredentialsException) {
                                this.ex3 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.AccountAlreadyExistsException) {
                                this.ex4 = args;
                                return;
                }
                if (args) {
                                if (args.success !== undefined && args.success !== null) {
                                                this.success = new ttypes.SignUpResponse(args.success);
                                }
                                if (args.ex1 !== undefined && args.ex1 !== null) {
                                                this.ex1 = args.ex1;
                                }
                                if (args.ex2 !== undefined && args.ex2 !== null) {
                                                this.ex2 = args.ex2;
                                }
                                if (args.ex3 !== undefined && args.ex3 !== null) {
                                                this.ex3 = args.ex3;
                                }
                                if (args.ex4 !== undefined && args.ex4 !== null) {
                                                this.ex4 = args.ex4;
                                }
                }
};
AromaService_signUp_result.prototype = {};
AromaService_signUp_result.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 0:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.success = new ttypes.SignUpResponse();
                      this.success.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex1 = new Exceptions_ttypes.OperationFailedException();
                      this.ex1.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 2:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
                      this.ex2.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 3:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex3 = new Exceptions_ttypes.InvalidCredentialsException();
                      this.ex3.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 4:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex4 = new Exceptions_ttypes.AccountAlreadyExistsException();
                      this.ex4.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_signUp_result.prototype.write = function(output) {
                output.writeStructBegin('AromaService_signUp_result');
                if (this.success !== null && this.success !== undefined) {
                  output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                  this.success.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex1 !== null && this.ex1 !== undefined) {
                  output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                  this.ex1.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex2 !== null && this.ex2 !== undefined) {
                  output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                  this.ex2.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex3 !== null && this.ex3 !== undefined) {
                  output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                  this.ex3.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex4 !== null && this.ex4 !== undefined) {
                  output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                  this.ex4.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_snoozeChannel_args = function(args) {
                this.request = null;
                if (args) {
                                if (args.request !== undefined && args.request !== null) {
                                                this.request = new ttypes.SnoozeChannelRequest(args.request);
                                }
                }
};
AromaService_snoozeChannel_args.prototype = {};
AromaService_snoozeChannel_args.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.request = new ttypes.SnoozeChannelRequest();
                      this.request.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 0:
                      input.skip(ftype);
                      break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_snoozeChannel_args.prototype.write = function(output) {
                output.writeStructBegin('AromaService_snoozeChannel_args');
                if (this.request !== null && this.request !== undefined) {
                  output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                  this.request.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_snoozeChannel_result = function(args) {
                this.success = null;
                this.ex1 = null;
                this.ex2 = null;
                this.ex3 = null;
                this.ex4 = null;
                this.ex5 = null;
                if (args instanceof Exceptions_ttypes.OperationFailedException) {
                                this.ex1 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                                this.ex2 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidTokenException) {
                                this.ex3 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.UnauthorizedException) {
                                this.ex4 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.ChannelDoesNotExistException) {
                                this.ex5 = args;
                                return;
                }
                if (args) {
                                if (args.success !== undefined && args.success !== null) {
                                                this.success = new ttypes.SnoozeChannelResponse(args.success);
                                }
                                if (args.ex1 !== undefined && args.ex1 !== null) {
                                                this.ex1 = args.ex1;
                                }
                                if (args.ex2 !== undefined && args.ex2 !== null) {
                                                this.ex2 = args.ex2;
                                }
                                if (args.ex3 !== undefined && args.ex3 !== null) {
                                                this.ex3 = args.ex3;
                                }
                                if (args.ex4 !== undefined && args.ex4 !== null) {
                                                this.ex4 = args.ex4;
                                }
                                if (args.ex5 !== undefined && args.ex5 !== null) {
                                                this.ex5 = args.ex5;
                                }
                }
};
AromaService_snoozeChannel_result.prototype = {};
AromaService_snoozeChannel_result.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 0:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.success = new ttypes.SnoozeChannelResponse();
                      this.success.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex1 = new Exceptions_ttypes.OperationFailedException();
                      this.ex1.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 2:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
                      this.ex2.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 3:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex3 = new Exceptions_ttypes.InvalidTokenException();
                      this.ex3.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 4:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex4 = new Exceptions_ttypes.UnauthorizedException();
                      this.ex4.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 5:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex5 = new Exceptions_ttypes.ChannelDoesNotExistException();
                      this.ex5.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_snoozeChannel_result.prototype.write = function(output) {
                output.writeStructBegin('AromaService_snoozeChannel_result');
                if (this.success !== null && this.success !== undefined) {
                  output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                  this.success.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex1 !== null && this.ex1 !== undefined) {
                  output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                  this.ex1.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex2 !== null && this.ex2 !== undefined) {
                  output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                  this.ex2.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex3 !== null && this.ex3 !== undefined) {
                  output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                  this.ex3.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex4 !== null && this.ex4 !== undefined) {
                  output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                  this.ex4.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex5 !== null && this.ex5 !== undefined) {
                  output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                  this.ex5.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_followApplication_args = function(args) {
                this.request = null;
                if (args) {
                                if (args.request !== undefined && args.request !== null) {
                                                this.request = new ttypes.FollowApplicationRequest(args.request);
                                }
                }
};
AromaService_followApplication_args.prototype = {};
AromaService_followApplication_args.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.request = new ttypes.FollowApplicationRequest();
                      this.request.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 0:
                      input.skip(ftype);
                      break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_followApplication_args.prototype.write = function(output) {
                output.writeStructBegin('AromaService_followApplication_args');
                if (this.request !== null && this.request !== undefined) {
                  output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                  this.request.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_followApplication_result = function(args) {
                this.success = null;
                this.ex1 = null;
                this.ex2 = null;
                this.ex3 = null;
                this.ex4 = null;
                this.ex5 = null;
                if (args instanceof Exceptions_ttypes.OperationFailedException) {
                                this.ex1 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                                this.ex2 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidTokenException) {
                                this.ex3 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.ApplicationDoesNotExistException) {
                                this.ex4 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.UnauthorizedException) {
                                this.ex5 = args;
                                return;
                }
                if (args) {
                                if (args.success !== undefined && args.success !== null) {
                                                this.success = new ttypes.FollowApplicationResponse(args.success);
                                }
                                if (args.ex1 !== undefined && args.ex1 !== null) {
                                                this.ex1 = args.ex1;
                                }
                                if (args.ex2 !== undefined && args.ex2 !== null) {
                                                this.ex2 = args.ex2;
                                }
                                if (args.ex3 !== undefined && args.ex3 !== null) {
                                                this.ex3 = args.ex3;
                                }
                                if (args.ex4 !== undefined && args.ex4 !== null) {
                                                this.ex4 = args.ex4;
                                }
                                if (args.ex5 !== undefined && args.ex5 !== null) {
                                                this.ex5 = args.ex5;
                                }
                }
};
AromaService_followApplication_result.prototype = {};
AromaService_followApplication_result.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 0:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.success = new ttypes.FollowApplicationResponse();
                      this.success.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex1 = new Exceptions_ttypes.OperationFailedException();
                      this.ex1.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 2:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
                      this.ex2.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 3:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex3 = new Exceptions_ttypes.InvalidTokenException();
                      this.ex3.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 4:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex4 = new Exceptions_ttypes.ApplicationDoesNotExistException();
                      this.ex4.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 5:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex5 = new Exceptions_ttypes.UnauthorizedException();
                      this.ex5.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_followApplication_result.prototype.write = function(output) {
                output.writeStructBegin('AromaService_followApplication_result');
                if (this.success !== null && this.success !== undefined) {
                  output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                  this.success.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex1 !== null && this.ex1 !== undefined) {
                  output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                  this.ex1.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex2 !== null && this.ex2 !== undefined) {
                  output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                  this.ex2.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex3 !== null && this.ex3 !== undefined) {
                  output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                  this.ex3.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex4 !== null && this.ex4 !== undefined) {
                  output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                  this.ex4.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex5 !== null && this.ex5 !== undefined) {
                  output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                  this.ex5.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_unfollowApplication_args = function(args) {
                this.request = null;
                if (args) {
                                if (args.request !== undefined && args.request !== null) {
                                                this.request = new ttypes.UnfollowApplicationRequest(args.request);
                                }
                }
};
AromaService_unfollowApplication_args.prototype = {};
AromaService_unfollowApplication_args.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.request = new ttypes.UnfollowApplicationRequest();
                      this.request.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 0:
                      input.skip(ftype);
                      break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_unfollowApplication_args.prototype.write = function(output) {
                output.writeStructBegin('AromaService_unfollowApplication_args');
                if (this.request !== null && this.request !== undefined) {
                  output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                  this.request.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_unfollowApplication_result = function(args) {
                this.success = null;
                this.ex1 = null;
                this.ex2 = null;
                this.ex3 = null;
                this.ex4 = null;
                this.ex5 = null;
                if (args instanceof Exceptions_ttypes.OperationFailedException) {
                                this.ex1 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                                this.ex2 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidTokenException) {
                                this.ex3 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.ApplicationDoesNotExistException) {
                                this.ex4 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.UnauthorizedException) {
                                this.ex5 = args;
                                return;
                }
                if (args) {
                                if (args.success !== undefined && args.success !== null) {
                                                this.success = new ttypes.UnfollowApplicationResponse(args.success);
                                }
                                if (args.ex1 !== undefined && args.ex1 !== null) {
                                                this.ex1 = args.ex1;
                                }
                                if (args.ex2 !== undefined && args.ex2 !== null) {
                                                this.ex2 = args.ex2;
                                }
                                if (args.ex3 !== undefined && args.ex3 !== null) {
                                                this.ex3 = args.ex3;
                                }
                                if (args.ex4 !== undefined && args.ex4 !== null) {
                                                this.ex4 = args.ex4;
                                }
                                if (args.ex5 !== undefined && args.ex5 !== null) {
                                                this.ex5 = args.ex5;
                                }
                }
};
AromaService_unfollowApplication_result.prototype = {};
AromaService_unfollowApplication_result.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 0:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.success = new ttypes.UnfollowApplicationResponse();
                      this.success.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex1 = new Exceptions_ttypes.OperationFailedException();
                      this.ex1.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 2:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
                      this.ex2.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 3:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex3 = new Exceptions_ttypes.InvalidTokenException();
                      this.ex3.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 4:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex4 = new Exceptions_ttypes.ApplicationDoesNotExistException();
                      this.ex4.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 5:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex5 = new Exceptions_ttypes.UnauthorizedException();
                      this.ex5.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_unfollowApplication_result.prototype.write = function(output) {
                output.writeStructBegin('AromaService_unfollowApplication_result');
                if (this.success !== null && this.success !== undefined) {
                  output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                  this.success.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex1 !== null && this.ex1 !== undefined) {
                  output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                  this.ex1.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex2 !== null && this.ex2 !== undefined) {
                  output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                  this.ex2.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex3 !== null && this.ex3 !== undefined) {
                  output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                  this.ex3.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex4 !== null && this.ex4 !== undefined) {
                  output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                  this.ex4.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex5 !== null && this.ex5 !== undefined) {
                  output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                  this.ex5.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_updateApplication_args = function(args) {
                this.request = null;
                if (args) {
                                if (args.request !== undefined && args.request !== null) {
                                                this.request = new ttypes.UpdateApplicationRequest(args.request);
                                }
                }
};
AromaService_updateApplication_args.prototype = {};
AromaService_updateApplication_args.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.request = new ttypes.UpdateApplicationRequest();
                      this.request.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 0:
                      input.skip(ftype);
                      break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_updateApplication_args.prototype.write = function(output) {
                output.writeStructBegin('AromaService_updateApplication_args');
                if (this.request !== null && this.request !== undefined) {
                  output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                  this.request.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_updateApplication_result = function(args) {
                this.success = null;
                this.ex1 = null;
                this.ex2 = null;
                this.ex3 = null;
                this.ex4 = null;
                this.ex5 = null;
                if (args instanceof Exceptions_ttypes.OperationFailedException) {
                                this.ex1 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                                this.ex2 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidTokenException) {
                                this.ex3 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.ApplicationDoesNotExistException) {
                                this.ex4 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.UnauthorizedException) {
                                this.ex5 = args;
                                return;
                }
                if (args) {
                                if (args.success !== undefined && args.success !== null) {
                                                this.success = new ttypes.UpdateApplicationResponse(args.success);
                                }
                                if (args.ex1 !== undefined && args.ex1 !== null) {
                                                this.ex1 = args.ex1;
                                }
                                if (args.ex2 !== undefined && args.ex2 !== null) {
                                                this.ex2 = args.ex2;
                                }
                                if (args.ex3 !== undefined && args.ex3 !== null) {
                                                this.ex3 = args.ex3;
                                }
                                if (args.ex4 !== undefined && args.ex4 !== null) {
                                                this.ex4 = args.ex4;
                                }
                                if (args.ex5 !== undefined && args.ex5 !== null) {
                                                this.ex5 = args.ex5;
                                }
                }
};
AromaService_updateApplication_result.prototype = {};
AromaService_updateApplication_result.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 0:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.success = new ttypes.UpdateApplicationResponse();
                      this.success.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex1 = new Exceptions_ttypes.OperationFailedException();
                      this.ex1.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 2:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
                      this.ex2.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 3:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex3 = new Exceptions_ttypes.InvalidTokenException();
                      this.ex3.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 4:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex4 = new Exceptions_ttypes.ApplicationDoesNotExistException();
                      this.ex4.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 5:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex5 = new Exceptions_ttypes.UnauthorizedException();
                      this.ex5.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_updateApplication_result.prototype.write = function(output) {
                output.writeStructBegin('AromaService_updateApplication_result');
                if (this.success !== null && this.success !== undefined) {
                  output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                  this.success.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex1 !== null && this.ex1 !== undefined) {
                  output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                  this.ex1.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex2 !== null && this.ex2 !== undefined) {
                  output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                  this.ex2.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex3 !== null && this.ex3 !== undefined) {
                  output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                  this.ex3.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex4 !== null && this.ex4 !== undefined) {
                  output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                  this.ex4.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex5 !== null && this.ex5 !== undefined) {
                  output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                  this.ex5.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_getActivity_args = function(args) {
                this.request = null;
                if (args) {
                                if (args.request !== undefined && args.request !== null) {
                                                this.request = new ttypes.GetActivityRequest(args.request);
                                }
                }
};
AromaService_getActivity_args.prototype = {};
AromaService_getActivity_args.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.request = new ttypes.GetActivityRequest();
                      this.request.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 0:
                      input.skip(ftype);
                      break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_getActivity_args.prototype.write = function(output) {
                output.writeStructBegin('AromaService_getActivity_args');
                if (this.request !== null && this.request !== undefined) {
                  output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                  this.request.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_getActivity_result = function(args) {
                this.success = null;
                this.ex1 = null;
                this.ex2 = null;
                this.ex3 = null;
                if (args instanceof Exceptions_ttypes.OperationFailedException) {
                                this.ex1 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                                this.ex2 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidTokenException) {
                                this.ex3 = args;
                                return;
                }
                if (args) {
                                if (args.success !== undefined && args.success !== null) {
                                                this.success = new ttypes.GetActivityResponse(args.success);
                                }
                                if (args.ex1 !== undefined && args.ex1 !== null) {
                                                this.ex1 = args.ex1;
                                }
                                if (args.ex2 !== undefined && args.ex2 !== null) {
                                                this.ex2 = args.ex2;
                                }
                                if (args.ex3 !== undefined && args.ex3 !== null) {
                                                this.ex3 = args.ex3;
                                }
                }
};
AromaService_getActivity_result.prototype = {};
AromaService_getActivity_result.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 0:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.success = new ttypes.GetActivityResponse();
                      this.success.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex1 = new Exceptions_ttypes.OperationFailedException();
                      this.ex1.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 2:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
                      this.ex2.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 3:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex3 = new Exceptions_ttypes.InvalidTokenException();
                      this.ex3.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_getActivity_result.prototype.write = function(output) {
                output.writeStructBegin('AromaService_getActivity_result');
                if (this.success !== null && this.success !== undefined) {
                  output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                  this.success.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex1 !== null && this.ex1 !== undefined) {
                  output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                  this.ex1.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex2 !== null && this.ex2 !== undefined) {
                  output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                  this.ex2.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex3 !== null && this.ex3 !== undefined) {
                  output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                  this.ex3.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_getApplicationInfo_args = function(args) {
                this.request = null;
                if (args) {
                                if (args.request !== undefined && args.request !== null) {
                                                this.request = new ttypes.GetApplicationInfoRequest(args.request);
                                }
                }
};
AromaService_getApplicationInfo_args.prototype = {};
AromaService_getApplicationInfo_args.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.request = new ttypes.GetApplicationInfoRequest();
                      this.request.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 0:
                      input.skip(ftype);
                      break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_getApplicationInfo_args.prototype.write = function(output) {
                output.writeStructBegin('AromaService_getApplicationInfo_args');
                if (this.request !== null && this.request !== undefined) {
                  output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                  this.request.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_getApplicationInfo_result = function(args) {
                this.success = null;
                this.ex1 = null;
                this.ex2 = null;
                this.ex3 = null;
                this.ex4 = null;
                this.ex5 = null;
                if (args instanceof Exceptions_ttypes.OperationFailedException) {
                                this.ex1 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                                this.ex2 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidTokenException) {
                                this.ex3 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.ApplicationDoesNotExistException) {
                                this.ex4 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.UnauthorizedException) {
                                this.ex5 = args;
                                return;
                }
                if (args) {
                                if (args.success !== undefined && args.success !== null) {
                                                this.success = new ttypes.GetApplicationInfoResponse(args.success);
                                }
                                if (args.ex1 !== undefined && args.ex1 !== null) {
                                                this.ex1 = args.ex1;
                                }
                                if (args.ex2 !== undefined && args.ex2 !== null) {
                                                this.ex2 = args.ex2;
                                }
                                if (args.ex3 !== undefined && args.ex3 !== null) {
                                                this.ex3 = args.ex3;
                                }
                                if (args.ex4 !== undefined && args.ex4 !== null) {
                                                this.ex4 = args.ex4;
                                }
                                if (args.ex5 !== undefined && args.ex5 !== null) {
                                                this.ex5 = args.ex5;
                                }
                }
};
AromaService_getApplicationInfo_result.prototype = {};
AromaService_getApplicationInfo_result.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 0:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.success = new ttypes.GetApplicationInfoResponse();
                      this.success.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex1 = new Exceptions_ttypes.OperationFailedException();
                      this.ex1.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 2:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
                      this.ex2.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 3:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex3 = new Exceptions_ttypes.InvalidTokenException();
                      this.ex3.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 4:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex4 = new Exceptions_ttypes.ApplicationDoesNotExistException();
                      this.ex4.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 5:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex5 = new Exceptions_ttypes.UnauthorizedException();
                      this.ex5.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_getApplicationInfo_result.prototype.write = function(output) {
                output.writeStructBegin('AromaService_getApplicationInfo_result');
                if (this.success !== null && this.success !== undefined) {
                  output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                  this.success.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex1 !== null && this.ex1 !== undefined) {
                  output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                  this.ex1.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex2 !== null && this.ex2 !== undefined) {
                  output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                  this.ex2.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex3 !== null && this.ex3 !== undefined) {
                  output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                  this.ex3.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex4 !== null && this.ex4 !== undefined) {
                  output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                  this.ex4.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex5 !== null && this.ex5 !== undefined) {
                  output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                  this.ex5.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_getBuzz_args = function(args) {
                this.request = null;
                if (args) {
                                if (args.request !== undefined && args.request !== null) {
                                                this.request = new ttypes.GetBuzzRequest(args.request);
                                }
                }
};
AromaService_getBuzz_args.prototype = {};
AromaService_getBuzz_args.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.request = new ttypes.GetBuzzRequest();
                      this.request.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 0:
                      input.skip(ftype);
                      break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_getBuzz_args.prototype.write = function(output) {
                output.writeStructBegin('AromaService_getBuzz_args');
                if (this.request !== null && this.request !== undefined) {
                  output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                  this.request.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_getBuzz_result = function(args) {
                this.success = null;
                this.ex1 = null;
                this.ex2 = null;
                this.ex3 = null;
                this.ex4 = null;
                this.ex5 = null;
                if (args instanceof Exceptions_ttypes.OperationFailedException) {
                                this.ex1 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                                this.ex2 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidTokenException) {
                                this.ex3 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.ApplicationDoesNotExistException) {
                                this.ex4 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.UnauthorizedException) {
                                this.ex5 = args;
                                return;
                }
                if (args) {
                                if (args.success !== undefined && args.success !== null) {
                                                this.success = new ttypes.GetBuzzResponse(args.success);
                                }
                                if (args.ex1 !== undefined && args.ex1 !== null) {
                                                this.ex1 = args.ex1;
                                }
                                if (args.ex2 !== undefined && args.ex2 !== null) {
                                                this.ex2 = args.ex2;
                                }
                                if (args.ex3 !== undefined && args.ex3 !== null) {
                                                this.ex3 = args.ex3;
                                }
                                if (args.ex4 !== undefined && args.ex4 !== null) {
                                                this.ex4 = args.ex4;
                                }
                                if (args.ex5 !== undefined && args.ex5 !== null) {
                                                this.ex5 = args.ex5;
                                }
                }
};
AromaService_getBuzz_result.prototype = {};
AromaService_getBuzz_result.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 0:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.success = new ttypes.GetBuzzResponse();
                      this.success.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex1 = new Exceptions_ttypes.OperationFailedException();
                      this.ex1.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 2:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
                      this.ex2.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 3:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex3 = new Exceptions_ttypes.InvalidTokenException();
                      this.ex3.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 4:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex4 = new Exceptions_ttypes.ApplicationDoesNotExistException();
                      this.ex4.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 5:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex5 = new Exceptions_ttypes.UnauthorizedException();
                      this.ex5.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_getBuzz_result.prototype.write = function(output) {
                output.writeStructBegin('AromaService_getBuzz_result');
                if (this.success !== null && this.success !== undefined) {
                  output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                  this.success.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex1 !== null && this.ex1 !== undefined) {
                  output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                  this.ex1.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex2 !== null && this.ex2 !== undefined) {
                  output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                  this.ex2.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex3 !== null && this.ex3 !== undefined) {
                  output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                  this.ex3.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex4 !== null && this.ex4 !== undefined) {
                  output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                  this.ex4.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex5 !== null && this.ex5 !== undefined) {
                  output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                  this.ex5.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_getDashboard_args = function(args) {
                this.request = null;
                if (args) {
                                if (args.request !== undefined && args.request !== null) {
                                                this.request = new ttypes.GetDashboardRequest(args.request);
                                }
                }
};
AromaService_getDashboard_args.prototype = {};
AromaService_getDashboard_args.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.request = new ttypes.GetDashboardRequest();
                      this.request.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 0:
                      input.skip(ftype);
                      break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_getDashboard_args.prototype.write = function(output) {
                output.writeStructBegin('AromaService_getDashboard_args');
                if (this.request !== null && this.request !== undefined) {
                  output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                  this.request.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_getDashboard_result = function(args) {
                this.success = null;
                this.ex1 = null;
                this.ex2 = null;
                this.ex3 = null;
                if (args instanceof Exceptions_ttypes.OperationFailedException) {
                                this.ex1 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                                this.ex2 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidTokenException) {
                                this.ex3 = args;
                                return;
                }
                if (args) {
                                if (args.success !== undefined && args.success !== null) {
                                                this.success = new ttypes.GetDashboardResponse(args.success);
                                }
                                if (args.ex1 !== undefined && args.ex1 !== null) {
                                                this.ex1 = args.ex1;
                                }
                                if (args.ex2 !== undefined && args.ex2 !== null) {
                                                this.ex2 = args.ex2;
                                }
                                if (args.ex3 !== undefined && args.ex3 !== null) {
                                                this.ex3 = args.ex3;
                                }
                }
};
AromaService_getDashboard_result.prototype = {};
AromaService_getDashboard_result.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 0:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.success = new ttypes.GetDashboardResponse();
                      this.success.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex1 = new Exceptions_ttypes.OperationFailedException();
                      this.ex1.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 2:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
                      this.ex2.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 3:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex3 = new Exceptions_ttypes.InvalidTokenException();
                      this.ex3.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_getDashboard_result.prototype.write = function(output) {
                output.writeStructBegin('AromaService_getDashboard_result');
                if (this.success !== null && this.success !== undefined) {
                  output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                  this.success.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex1 !== null && this.ex1 !== undefined) {
                  output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                  this.ex1.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex2 !== null && this.ex2 !== undefined) {
                  output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                  this.ex2.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex3 !== null && this.ex3 !== undefined) {
                  output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                  this.ex3.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_getApplicationMessages_args = function(args) {
                this.request = null;
                if (args) {
                                if (args.request !== undefined && args.request !== null) {
                                                this.request = new ttypes.GetApplicationMessagesRequest(args.request);
                                }
                }
};
AromaService_getApplicationMessages_args.prototype = {};
AromaService_getApplicationMessages_args.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.request = new ttypes.GetApplicationMessagesRequest();
                      this.request.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 0:
                      input.skip(ftype);
                      break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_getApplicationMessages_args.prototype.write = function(output) {
                output.writeStructBegin('AromaService_getApplicationMessages_args');
                if (this.request !== null && this.request !== undefined) {
                  output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                  this.request.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_getApplicationMessages_result = function(args) {
                this.success = null;
                this.ex1 = null;
                this.ex2 = null;
                this.ex3 = null;
                this.ex4 = null;
                this.ex5 = null;
                if (args instanceof Exceptions_ttypes.OperationFailedException) {
                                this.ex1 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                                this.ex2 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidTokenException) {
                                this.ex3 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.UnauthorizedException) {
                                this.ex4 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.ApplicationDoesNotExistException) {
                                this.ex5 = args;
                                return;
                }
                if (args) {
                                if (args.success !== undefined && args.success !== null) {
                                                this.success = new ttypes.GetApplicationMessagesResponse(args.success);
                                }
                                if (args.ex1 !== undefined && args.ex1 !== null) {
                                                this.ex1 = args.ex1;
                                }
                                if (args.ex2 !== undefined && args.ex2 !== null) {
                                                this.ex2 = args.ex2;
                                }
                                if (args.ex3 !== undefined && args.ex3 !== null) {
                                                this.ex3 = args.ex3;
                                }
                                if (args.ex4 !== undefined && args.ex4 !== null) {
                                                this.ex4 = args.ex4;
                                }
                                if (args.ex5 !== undefined && args.ex5 !== null) {
                                                this.ex5 = args.ex5;
                                }
                }
};
AromaService_getApplicationMessages_result.prototype = {};
AromaService_getApplicationMessages_result.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 0:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.success = new ttypes.GetApplicationMessagesResponse();
                      this.success.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex1 = new Exceptions_ttypes.OperationFailedException();
                      this.ex1.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 2:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
                      this.ex2.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 3:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex3 = new Exceptions_ttypes.InvalidTokenException();
                      this.ex3.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 4:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex4 = new Exceptions_ttypes.UnauthorizedException();
                      this.ex4.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 5:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex5 = new Exceptions_ttypes.ApplicationDoesNotExistException();
                      this.ex5.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_getApplicationMessages_result.prototype.write = function(output) {
                output.writeStructBegin('AromaService_getApplicationMessages_result');
                if (this.success !== null && this.success !== undefined) {
                  output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                  this.success.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex1 !== null && this.ex1 !== undefined) {
                  output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                  this.ex1.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex2 !== null && this.ex2 !== undefined) {
                  output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                  this.ex2.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex3 !== null && this.ex3 !== undefined) {
                  output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                  this.ex3.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex4 !== null && this.ex4 !== undefined) {
                  output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                  this.ex4.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex5 !== null && this.ex5 !== undefined) {
                  output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                  this.ex5.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_getInbox_args = function(args) {
                this.request = null;
                if (args) {
                                if (args.request !== undefined && args.request !== null) {
                                                this.request = new ttypes.GetInboxRequest(args.request);
                                }
                }
};
AromaService_getInbox_args.prototype = {};
AromaService_getInbox_args.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.request = new ttypes.GetInboxRequest();
                      this.request.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 0:
                      input.skip(ftype);
                      break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_getInbox_args.prototype.write = function(output) {
                output.writeStructBegin('AromaService_getInbox_args');
                if (this.request !== null && this.request !== undefined) {
                  output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                  this.request.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_getInbox_result = function(args) {
                this.success = null;
                this.ex1 = null;
                this.ex2 = null;
                this.ex3 = null;
                if (args instanceof Exceptions_ttypes.OperationFailedException) {
                                this.ex1 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                                this.ex2 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidTokenException) {
                                this.ex3 = args;
                                return;
                }
                if (args) {
                                if (args.success !== undefined && args.success !== null) {
                                                this.success = new ttypes.GetInboxResponse(args.success);
                                }
                                if (args.ex1 !== undefined && args.ex1 !== null) {
                                                this.ex1 = args.ex1;
                                }
                                if (args.ex2 !== undefined && args.ex2 !== null) {
                                                this.ex2 = args.ex2;
                                }
                                if (args.ex3 !== undefined && args.ex3 !== null) {
                                                this.ex3 = args.ex3;
                                }
                }
};
AromaService_getInbox_result.prototype = {};
AromaService_getInbox_result.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 0:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.success = new ttypes.GetInboxResponse();
                      this.success.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex1 = new Exceptions_ttypes.OperationFailedException();
                      this.ex1.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 2:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
                      this.ex2.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 3:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex3 = new Exceptions_ttypes.InvalidTokenException();
                      this.ex3.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_getInbox_result.prototype.write = function(output) {
                output.writeStructBegin('AromaService_getInbox_result');
                if (this.success !== null && this.success !== undefined) {
                  output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                  this.success.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex1 !== null && this.ex1 !== undefined) {
                  output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                  this.ex1.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex2 !== null && this.ex2 !== undefined) {
                  output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                  this.ex2.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex3 !== null && this.ex3 !== undefined) {
                  output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                  this.ex3.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_getFullMessage_args = function(args) {
                this.request = null;
                if (args) {
                                if (args.request !== undefined && args.request !== null) {
                                                this.request = new ttypes.GetFullMessageRequest(args.request);
                                }
                }
};
AromaService_getFullMessage_args.prototype = {};
AromaService_getFullMessage_args.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.request = new ttypes.GetFullMessageRequest();
                      this.request.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 0:
                      input.skip(ftype);
                      break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_getFullMessage_args.prototype.write = function(output) {
                output.writeStructBegin('AromaService_getFullMessage_args');
                if (this.request !== null && this.request !== undefined) {
                  output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                  this.request.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_getFullMessage_result = function(args) {
                this.success = null;
                this.ex1 = null;
                this.ex2 = null;
                this.ex3 = null;
                if (args instanceof Exceptions_ttypes.OperationFailedException) {
                                this.ex1 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                                this.ex2 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidTokenException) {
                                this.ex3 = args;
                                return;
                }
                if (args) {
                                if (args.success !== undefined && args.success !== null) {
                                                this.success = new ttypes.GetFullMessageResponse(args.success);
                                }
                                if (args.ex1 !== undefined && args.ex1 !== null) {
                                                this.ex1 = args.ex1;
                                }
                                if (args.ex2 !== undefined && args.ex2 !== null) {
                                                this.ex2 = args.ex2;
                                }
                                if (args.ex3 !== undefined && args.ex3 !== null) {
                                                this.ex3 = args.ex3;
                                }
                }
};
AromaService_getFullMessage_result.prototype = {};
AromaService_getFullMessage_result.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 0:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.success = new ttypes.GetFullMessageResponse();
                      this.success.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex1 = new Exceptions_ttypes.OperationFailedException();
                      this.ex1.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 2:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
                      this.ex2.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 3:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex3 = new Exceptions_ttypes.InvalidTokenException();
                      this.ex3.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_getFullMessage_result.prototype.write = function(output) {
                output.writeStructBegin('AromaService_getFullMessage_result');
                if (this.success !== null && this.success !== undefined) {
                  output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                  this.success.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex1 !== null && this.ex1 !== undefined) {
                  output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                  this.ex1.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex2 !== null && this.ex2 !== undefined) {
                  output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                  this.ex2.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex3 !== null && this.ex3 !== undefined) {
                  output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                  this.ex3.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_getMedia_args = function(args) {
                this.request = null;
                if (args) {
                                if (args.request !== undefined && args.request !== null) {
                                                this.request = new ttypes.GetMediaRequest(args.request);
                                }
                }
};
AromaService_getMedia_args.prototype = {};
AromaService_getMedia_args.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.request = new ttypes.GetMediaRequest();
                      this.request.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 0:
                      input.skip(ftype);
                      break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_getMedia_args.prototype.write = function(output) {
                output.writeStructBegin('AromaService_getMedia_args');
                if (this.request !== null && this.request !== undefined) {
                  output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                  this.request.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_getMedia_result = function(args) {
                this.success = null;
                this.ex1 = null;
                this.ex2 = null;
                this.ex3 = null;
                this.ex4 = null;
                this.ex5 = null;
                if (args instanceof Exceptions_ttypes.OperationFailedException) {
                                this.ex1 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                                this.ex2 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidTokenException) {
                                this.ex3 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.DoesNotExistException) {
                                this.ex4 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.UnauthorizedException) {
                                this.ex5 = args;
                                return;
                }
                if (args) {
                                if (args.success !== undefined && args.success !== null) {
                                                this.success = new ttypes.GetMediaResponse(args.success);
                                }
                                if (args.ex1 !== undefined && args.ex1 !== null) {
                                                this.ex1 = args.ex1;
                                }
                                if (args.ex2 !== undefined && args.ex2 !== null) {
                                                this.ex2 = args.ex2;
                                }
                                if (args.ex3 !== undefined && args.ex3 !== null) {
                                                this.ex3 = args.ex3;
                                }
                                if (args.ex4 !== undefined && args.ex4 !== null) {
                                                this.ex4 = args.ex4;
                                }
                                if (args.ex5 !== undefined && args.ex5 !== null) {
                                                this.ex5 = args.ex5;
                                }
                }
};
AromaService_getMedia_result.prototype = {};
AromaService_getMedia_result.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 0:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.success = new ttypes.GetMediaResponse();
                      this.success.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex1 = new Exceptions_ttypes.OperationFailedException();
                      this.ex1.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 2:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
                      this.ex2.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 3:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex3 = new Exceptions_ttypes.InvalidTokenException();
                      this.ex3.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 4:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex4 = new Exceptions_ttypes.DoesNotExistException();
                      this.ex4.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 5:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex5 = new Exceptions_ttypes.UnauthorizedException();
                      this.ex5.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_getMedia_result.prototype.write = function(output) {
                output.writeStructBegin('AromaService_getMedia_result');
                if (this.success !== null && this.success !== undefined) {
                  output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                  this.success.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex1 !== null && this.ex1 !== undefined) {
                  output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                  this.ex1.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex2 !== null && this.ex2 !== undefined) {
                  output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                  this.ex2.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex3 !== null && this.ex3 !== undefined) {
                  output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                  this.ex3.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex4 !== null && this.ex4 !== undefined) {
                  output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                  this.ex4.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex5 !== null && this.ex5 !== undefined) {
                  output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                  this.ex5.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_getApplicationsOwnedBy_args = function(args) {
                this.request = null;
                if (args) {
                                if (args.request !== undefined && args.request !== null) {
                                                this.request = new ttypes.GetApplicationsOwnedByRequest(args.request);
                                }
                }
};
AromaService_getApplicationsOwnedBy_args.prototype = {};
AromaService_getApplicationsOwnedBy_args.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.request = new ttypes.GetApplicationsOwnedByRequest();
                      this.request.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 0:
                      input.skip(ftype);
                      break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_getApplicationsOwnedBy_args.prototype.write = function(output) {
                output.writeStructBegin('AromaService_getApplicationsOwnedBy_args');
                if (this.request !== null && this.request !== undefined) {
                  output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                  this.request.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_getApplicationsOwnedBy_result = function(args) {
                this.success = null;
                this.ex1 = null;
                this.ex2 = null;
                this.ex3 = null;
                if (args instanceof Exceptions_ttypes.OperationFailedException) {
                                this.ex1 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                                this.ex2 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidTokenException) {
                                this.ex3 = args;
                                return;
                }
                if (args) {
                                if (args.success !== undefined && args.success !== null) {
                                                this.success = new ttypes.GetApplicationsOwnedByResponse(args.success);
                                }
                                if (args.ex1 !== undefined && args.ex1 !== null) {
                                                this.ex1 = args.ex1;
                                }
                                if (args.ex2 !== undefined && args.ex2 !== null) {
                                                this.ex2 = args.ex2;
                                }
                                if (args.ex3 !== undefined && args.ex3 !== null) {
                                                this.ex3 = args.ex3;
                                }
                }
};
AromaService_getApplicationsOwnedBy_result.prototype = {};
AromaService_getApplicationsOwnedBy_result.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 0:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.success = new ttypes.GetApplicationsOwnedByResponse();
                      this.success.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex1 = new Exceptions_ttypes.OperationFailedException();
                      this.ex1.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 2:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
                      this.ex2.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 3:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex3 = new Exceptions_ttypes.InvalidTokenException();
                      this.ex3.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_getApplicationsOwnedBy_result.prototype.write = function(output) {
                output.writeStructBegin('AromaService_getApplicationsOwnedBy_result');
                if (this.success !== null && this.success !== undefined) {
                  output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                  this.success.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex1 !== null && this.ex1 !== undefined) {
                  output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                  this.ex1.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex2 !== null && this.ex2 !== undefined) {
                  output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                  this.ex2.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex3 !== null && this.ex3 !== undefined) {
                  output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                  this.ex3.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_getApplicationsFollowedBy_args = function(args) {
                this.request = null;
                if (args) {
                                if (args.request !== undefined && args.request !== null) {
                                                this.request = new ttypes.GetApplicationsFollowedByRequest(args.request);
                                }
                }
};
AromaService_getApplicationsFollowedBy_args.prototype = {};
AromaService_getApplicationsFollowedBy_args.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.request = new ttypes.GetApplicationsFollowedByRequest();
                      this.request.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 0:
                      input.skip(ftype);
                      break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_getApplicationsFollowedBy_args.prototype.write = function(output) {
                output.writeStructBegin('AromaService_getApplicationsFollowedBy_args');
                if (this.request !== null && this.request !== undefined) {
                  output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                  this.request.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_getApplicationsFollowedBy_result = function(args) {
                this.success = null;
                this.ex1 = null;
                this.ex2 = null;
                this.ex3 = null;
                if (args instanceof Exceptions_ttypes.OperationFailedException) {
                                this.ex1 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                                this.ex2 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidTokenException) {
                                this.ex3 = args;
                                return;
                }
                if (args) {
                                if (args.success !== undefined && args.success !== null) {
                                                this.success = new ttypes.GetApplicationsFollowedByResponse(args.success);
                                }
                                if (args.ex1 !== undefined && args.ex1 !== null) {
                                                this.ex1 = args.ex1;
                                }
                                if (args.ex2 !== undefined && args.ex2 !== null) {
                                                this.ex2 = args.ex2;
                                }
                                if (args.ex3 !== undefined && args.ex3 !== null) {
                                                this.ex3 = args.ex3;
                                }
                }
};
AromaService_getApplicationsFollowedBy_result.prototype = {};
AromaService_getApplicationsFollowedBy_result.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 0:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.success = new ttypes.GetApplicationsFollowedByResponse();
                      this.success.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex1 = new Exceptions_ttypes.OperationFailedException();
                      this.ex1.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 2:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
                      this.ex2.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 3:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex3 = new Exceptions_ttypes.InvalidTokenException();
                      this.ex3.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_getApplicationsFollowedBy_result.prototype.write = function(output) {
                output.writeStructBegin('AromaService_getApplicationsFollowedBy_result');
                if (this.success !== null && this.success !== undefined) {
                  output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                  this.success.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex1 !== null && this.ex1 !== undefined) {
                  output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                  this.ex1.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex2 !== null && this.ex2 !== undefined) {
                  output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                  this.ex2.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex3 !== null && this.ex3 !== undefined) {
                  output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                  this.ex3.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_getMySavedChannels_args = function(args) {
                this.request = null;
                if (args) {
                                if (args.request !== undefined && args.request !== null) {
                                                this.request = new ttypes.GetMySavedChannelsRequest(args.request);
                                }
                }
};
AromaService_getMySavedChannels_args.prototype = {};
AromaService_getMySavedChannels_args.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.request = new ttypes.GetMySavedChannelsRequest();
                      this.request.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 0:
                      input.skip(ftype);
                      break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_getMySavedChannels_args.prototype.write = function(output) {
                output.writeStructBegin('AromaService_getMySavedChannels_args');
                if (this.request !== null && this.request !== undefined) {
                  output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                  this.request.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_getMySavedChannels_result = function(args) {
                this.success = null;
                this.ex1 = null;
                this.ex2 = null;
                this.ex3 = null;
                if (args instanceof Exceptions_ttypes.OperationFailedException) {
                                this.ex1 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                                this.ex2 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidTokenException) {
                                this.ex3 = args;
                                return;
                }
                if (args) {
                                if (args.success !== undefined && args.success !== null) {
                                                this.success = new ttypes.GetMySavedChannelsResponse(args.success);
                                }
                                if (args.ex1 !== undefined && args.ex1 !== null) {
                                                this.ex1 = args.ex1;
                                }
                                if (args.ex2 !== undefined && args.ex2 !== null) {
                                                this.ex2 = args.ex2;
                                }
                                if (args.ex3 !== undefined && args.ex3 !== null) {
                                                this.ex3 = args.ex3;
                                }
                }
};
AromaService_getMySavedChannels_result.prototype = {};
AromaService_getMySavedChannels_result.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 0:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.success = new ttypes.GetMySavedChannelsResponse();
                      this.success.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex1 = new Exceptions_ttypes.OperationFailedException();
                      this.ex1.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 2:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
                      this.ex2.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 3:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex3 = new Exceptions_ttypes.InvalidTokenException();
                      this.ex3.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_getMySavedChannels_result.prototype.write = function(output) {
                output.writeStructBegin('AromaService_getMySavedChannels_result');
                if (this.success !== null && this.success !== undefined) {
                  output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                  this.success.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex1 !== null && this.ex1 !== undefined) {
                  output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                  this.ex1.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex2 !== null && this.ex2 !== undefined) {
                  output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                  this.ex2.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex3 !== null && this.ex3 !== undefined) {
                  output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                  this.ex3.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_getUserInfo_args = function(args) {
                this.request = null;
                if (args) {
                                if (args.request !== undefined && args.request !== null) {
                                                this.request = new ttypes.GetUserInfoRequest(args.request);
                                }
                }
};
AromaService_getUserInfo_args.prototype = {};
AromaService_getUserInfo_args.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.request = new ttypes.GetUserInfoRequest();
                      this.request.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 0:
                      input.skip(ftype);
                      break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_getUserInfo_args.prototype.write = function(output) {
                output.writeStructBegin('AromaService_getUserInfo_args');
                if (this.request !== null && this.request !== undefined) {
                  output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                  this.request.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_getUserInfo_result = function(args) {
                this.success = null;
                this.ex1 = null;
                this.ex2 = null;
                this.ex3 = null;
                this.ex4 = null;
                this.ex5 = null;
                if (args instanceof Exceptions_ttypes.OperationFailedException) {
                                this.ex1 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                                this.ex2 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidTokenException) {
                                this.ex3 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.UnauthorizedException) {
                                this.ex4 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.UserDoesNotExistException) {
                                this.ex5 = args;
                                return;
                }
                if (args) {
                                if (args.success !== undefined && args.success !== null) {
                                                this.success = new ttypes.GetUserInfoResponse(args.success);
                                }
                                if (args.ex1 !== undefined && args.ex1 !== null) {
                                                this.ex1 = args.ex1;
                                }
                                if (args.ex2 !== undefined && args.ex2 !== null) {
                                                this.ex2 = args.ex2;
                                }
                                if (args.ex3 !== undefined && args.ex3 !== null) {
                                                this.ex3 = args.ex3;
                                }
                                if (args.ex4 !== undefined && args.ex4 !== null) {
                                                this.ex4 = args.ex4;
                                }
                                if (args.ex5 !== undefined && args.ex5 !== null) {
                                                this.ex5 = args.ex5;
                                }
                }
};
AromaService_getUserInfo_result.prototype = {};
AromaService_getUserInfo_result.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 0:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.success = new ttypes.GetUserInfoResponse();
                      this.success.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex1 = new Exceptions_ttypes.OperationFailedException();
                      this.ex1.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 2:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
                      this.ex2.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 3:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex3 = new Exceptions_ttypes.InvalidTokenException();
                      this.ex3.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 4:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex4 = new Exceptions_ttypes.UnauthorizedException();
                      this.ex4.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 5:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex5 = new Exceptions_ttypes.UserDoesNotExistException();
                      this.ex5.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_getUserInfo_result.prototype.write = function(output) {
                output.writeStructBegin('AromaService_getUserInfo_result');
                if (this.success !== null && this.success !== undefined) {
                  output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                  this.success.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex1 !== null && this.ex1 !== undefined) {
                  output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                  this.ex1.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex2 !== null && this.ex2 !== undefined) {
                  output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                  this.ex2.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex3 !== null && this.ex3 !== undefined) {
                  output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                  this.ex3.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex4 !== null && this.ex4 !== undefined) {
                  output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                  this.ex4.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex5 !== null && this.ex5 !== undefined) {
                  output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
                  this.ex5.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_searchForApplications_args = function(args) {
                this.request = null;
                if (args) {
                                if (args.request !== undefined && args.request !== null) {
                                                this.request = new ttypes.SearchForApplicationsRequest(args.request);
                                }
                }
};
AromaService_searchForApplications_args.prototype = {};
AromaService_searchForApplications_args.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.request = new ttypes.SearchForApplicationsRequest();
                      this.request.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 0:
                      input.skip(ftype);
                      break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_searchForApplications_args.prototype.write = function(output) {
                output.writeStructBegin('AromaService_searchForApplications_args');
                if (this.request !== null && this.request !== undefined) {
                  output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
                  this.request.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaService_searchForApplications_result = function(args) {
                this.success = null;
                this.ex1 = null;
                this.ex2 = null;
                this.ex3 = null;
                this.ex4 = null;
                if (args instanceof Exceptions_ttypes.OperationFailedException) {
                                this.ex1 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                                this.ex2 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.InvalidTokenException) {
                                this.ex3 = args;
                                return;
                }
                if (args instanceof Exceptions_ttypes.UnauthorizedException) {
                                this.ex4 = args;
                                return;
                }
                if (args) {
                                if (args.success !== undefined && args.success !== null) {
                                                this.success = new ttypes.SearchForApplicationsResponse(args.success);
                                }
                                if (args.ex1 !== undefined && args.ex1 !== null) {
                                                this.ex1 = args.ex1;
                                }
                                if (args.ex2 !== undefined && args.ex2 !== null) {
                                                this.ex2 = args.ex2;
                                }
                                if (args.ex3 !== undefined && args.ex3 !== null) {
                                                this.ex3 = args.ex3;
                                }
                                if (args.ex4 !== undefined && args.ex4 !== null) {
                                                this.ex4 = args.ex4;
                                }
                }
};
AromaService_searchForApplications_result.prototype = {};
AromaService_searchForApplications_result.prototype.read = function(input) {
                input.readStructBegin();
                while (true)
                {
                  var ret = input.readFieldBegin();
                  var fname = ret.fname;
                  var ftype = ret.ftype;
                  var fid = ret.fid;
                  if (ftype == Thrift.Type.STOP) {
                    break;
                  }
                  switch (fid)
                  {
                    case 0:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.success = new ttypes.SearchForApplicationsResponse();
                      this.success.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 1:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex1 = new Exceptions_ttypes.OperationFailedException();
                      this.ex1.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 2:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
                      this.ex2.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 3:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex3 = new Exceptions_ttypes.InvalidTokenException();
                      this.ex3.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    case 4:
                    if (ftype == Thrift.Type.STRUCT) {
                      this.ex4 = new Exceptions_ttypes.UnauthorizedException();
                      this.ex4.read(input);
                    } else {
                      input.skip(ftype);
                    }
                    break;
                    default:
                      input.skip(ftype);
                  }
                  input.readFieldEnd();
                }
                input.readStructEnd();
                return;
              };

AromaService_searchForApplications_result.prototype.write = function(output) {
                output.writeStructBegin('AromaService_searchForApplications_result');
                if (this.success !== null && this.success !== undefined) {
                  output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
                  this.success.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex1 !== null && this.ex1 !== undefined) {
                  output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
                  this.ex1.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex2 !== null && this.ex2 !== undefined) {
                  output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
                  this.ex2.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex3 !== null && this.ex3 !== undefined) {
                  output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
                  this.ex3.write(output);
                  output.writeFieldEnd();
                }
                if (this.ex4 !== null && this.ex4 !== undefined) {
                  output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
                  this.ex4.write(output);
                  output.writeFieldEnd();
                }
                output.writeFieldStop();
                output.writeStructEnd();
                return;
              };

AromaServiceClient = exports.Client = function(output, pClass) {
                  this.output = output;
                  this.pClass = pClass;
                  this._seqid = 0;
                  this._reqs = {};
              };
              AromaServiceClient.prototype = {};
              AromaServiceClient.prototype.seqid = function() { return this._seqid; }
AromaServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
AromaServiceClient.prototype.getApiVersion = function(callback) {
                this._seqid = this.new_seqid();
                if (callback === undefined) {
                  var _defer = Q.defer();
                  this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                      _defer.reject(error);
                    } else {
                      _defer.resolve(result);
                    }
                  };
                  this.send_getApiVersion();
                  return _defer.promise;
                } else {
                  this._reqs[this.seqid()] = callback;
                  this.send_getApiVersion();
                }
};

AromaServiceClient.prototype.send_getApiVersion = function() {
                var output = new this.pClass(this.output);
                output.writeMessageBegin('getApiVersion', Thrift.MessageType.CALL, this.seqid());
                var args = new AromaService_getApiVersion_args();
                args.write(output);
                output.writeMessageEnd();
                return this.output.flush();
};

AromaServiceClient.prototype.recv_getApiVersion = function(input,mtype,rseqid) {
                var callback = this._reqs[rseqid] || function() {};
                delete this._reqs[rseqid];
                if (mtype == Thrift.MessageType.EXCEPTION) {
                  var x = new Thrift.TApplicationException();
                  x.read(input);
                  input.readMessageEnd();
                  return callback(x);
                }
                var result = new AromaService_getApiVersion_result();
                result.read(input);
                input.readMessageEnd();

                if (null !== result.success) {
                  return callback(null, result.success);
                }
                return callback('getApiVersion failed: unknown result');
};
AromaServiceClient.prototype.deleteApplication = function(request, callback) {
                this._seqid = this.new_seqid();
                if (callback === undefined) {
                  var _defer = Q.defer();
                  this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                      _defer.reject(error);
                    } else {
                      _defer.resolve(result);
                    }
                  };
                  this.send_deleteApplication(request);
                  return _defer.promise;
                } else {
                  this._reqs[this.seqid()] = callback;
                  this.send_deleteApplication(request);
                }
};

AromaServiceClient.prototype.send_deleteApplication = function(request) {
                var output = new this.pClass(this.output);
                output.writeMessageBegin('deleteApplication', Thrift.MessageType.CALL, this.seqid());
                var args = new AromaService_deleteApplication_args();
                args.request = request;
                args.write(output);
                output.writeMessageEnd();
                return this.output.flush();
};

AromaServiceClient.prototype.recv_deleteApplication = function(input,mtype,rseqid) {
                var callback = this._reqs[rseqid] || function() {};
                delete this._reqs[rseqid];
                if (mtype == Thrift.MessageType.EXCEPTION) {
                  var x = new Thrift.TApplicationException();
                  x.read(input);
                  input.readMessageEnd();
                  return callback(x);
                }
                var result = new AromaService_deleteApplication_result();
                result.read(input);
                input.readMessageEnd();

                if (null !== result.ex1) {
                  return callback(result.ex1);
                }
                if (null !== result.ex2) {
                  return callback(result.ex2);
                }
                if (null !== result.ex3) {
                  return callback(result.ex3);
                }
                if (null !== result.ex4) {
                  return callback(result.ex4);
                }
                if (null !== result.ex5) {
                  return callback(result.ex5);
                }
                if (null !== result.success) {
                  return callback(null, result.success);
                }
                return callback('deleteApplication failed: unknown result');
};
AromaServiceClient.prototype.deleteMessage = function(request, callback) {
                this._seqid = this.new_seqid();
                if (callback === undefined) {
                  var _defer = Q.defer();
                  this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                      _defer.reject(error);
                    } else {
                      _defer.resolve(result);
                    }
                  };
                  this.send_deleteMessage(request);
                  return _defer.promise;
                } else {
                  this._reqs[this.seqid()] = callback;
                  this.send_deleteMessage(request);
                }
};

AromaServiceClient.prototype.send_deleteMessage = function(request) {
                var output = new this.pClass(this.output);
                output.writeMessageBegin('deleteMessage', Thrift.MessageType.CALL, this.seqid());
                var args = new AromaService_deleteMessage_args();
                args.request = request;
                args.write(output);
                output.writeMessageEnd();
                return this.output.flush();
};

AromaServiceClient.prototype.recv_deleteMessage = function(input,mtype,rseqid) {
                var callback = this._reqs[rseqid] || function() {};
                delete this._reqs[rseqid];
                if (mtype == Thrift.MessageType.EXCEPTION) {
                  var x = new Thrift.TApplicationException();
                  x.read(input);
                  input.readMessageEnd();
                  return callback(x);
                }
                var result = new AromaService_deleteMessage_result();
                result.read(input);
                input.readMessageEnd();

                if (null !== result.ex1) {
                  return callback(result.ex1);
                }
                if (null !== result.ex2) {
                  return callback(result.ex2);
                }
                if (null !== result.ex3) {
                  return callback(result.ex3);
                }
                if (null !== result.ex4) {
                  return callback(result.ex4);
                }
                if (null !== result.ex5) {
                  return callback(result.ex5);
                }
                if (null !== result.success) {
                  return callback(null, result.success);
                }
                return callback('deleteMessage failed: unknown result');
};
AromaServiceClient.prototype.dismissMessage = function(request, callback) {
                this._seqid = this.new_seqid();
                if (callback === undefined) {
                  var _defer = Q.defer();
                  this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                      _defer.reject(error);
                    } else {
                      _defer.resolve(result);
                    }
                  };
                  this.send_dismissMessage(request);
                  return _defer.promise;
                } else {
                  this._reqs[this.seqid()] = callback;
                  this.send_dismissMessage(request);
                }
};

AromaServiceClient.prototype.send_dismissMessage = function(request) {
                var output = new this.pClass(this.output);
                output.writeMessageBegin('dismissMessage', Thrift.MessageType.CALL, this.seqid());
                var args = new AromaService_dismissMessage_args();
                args.request = request;
                args.write(output);
                output.writeMessageEnd();
                return this.output.flush();
};

AromaServiceClient.prototype.recv_dismissMessage = function(input,mtype,rseqid) {
                var callback = this._reqs[rseqid] || function() {};
                delete this._reqs[rseqid];
                if (mtype == Thrift.MessageType.EXCEPTION) {
                  var x = new Thrift.TApplicationException();
                  x.read(input);
                  input.readMessageEnd();
                  return callback(x);
                }
                var result = new AromaService_dismissMessage_result();
                result.read(input);
                input.readMessageEnd();

                if (null !== result.ex1) {
                  return callback(result.ex1);
                }
                if (null !== result.ex2) {
                  return callback(result.ex2);
                }
                if (null !== result.ex3) {
                  return callback(result.ex3);
                }
                if (null !== result.ex4) {
                  return callback(result.ex4);
                }
                if (null !== result.ex5) {
                  return callback(result.ex5);
                }
                if (null !== result.success) {
                  return callback(null, result.success);
                }
                return callback('dismissMessage failed: unknown result');
};
AromaServiceClient.prototype.provisionApplication = function(request, callback) {
                this._seqid = this.new_seqid();
                if (callback === undefined) {
                  var _defer = Q.defer();
                  this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                      _defer.reject(error);
                    } else {
                      _defer.resolve(result);
                    }
                  };
                  this.send_provisionApplication(request);
                  return _defer.promise;
                } else {
                  this._reqs[this.seqid()] = callback;
                  this.send_provisionApplication(request);
                }
};

AromaServiceClient.prototype.send_provisionApplication = function(request) {
                var output = new this.pClass(this.output);
                output.writeMessageBegin('provisionApplication', Thrift.MessageType.CALL, this.seqid());
                var args = new AromaService_provisionApplication_args();
                args.request = request;
                args.write(output);
                output.writeMessageEnd();
                return this.output.flush();
};

AromaServiceClient.prototype.recv_provisionApplication = function(input,mtype,rseqid) {
                var callback = this._reqs[rseqid] || function() {};
                delete this._reqs[rseqid];
                if (mtype == Thrift.MessageType.EXCEPTION) {
                  var x = new Thrift.TApplicationException();
                  x.read(input);
                  input.readMessageEnd();
                  return callback(x);
                }
                var result = new AromaService_provisionApplication_result();
                result.read(input);
                input.readMessageEnd();

                if (null !== result.ex1) {
                  return callback(result.ex1);
                }
                if (null !== result.ex2) {
                  return callback(result.ex2);
                }
                if (null !== result.ex3) {
                  return callback(result.ex3);
                }
                if (null !== result.ex4) {
                  return callback(result.ex4);
                }
                if (null !== result.ex5) {
                  return callback(result.ex5);
                }
                if (null !== result.success) {
                  return callback(null, result.success);
                }
                return callback('provisionApplication failed: unknown result');
};
AromaServiceClient.prototype.regenerateToken = function(request, callback) {
                this._seqid = this.new_seqid();
                if (callback === undefined) {
                  var _defer = Q.defer();
                  this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                      _defer.reject(error);
                    } else {
                      _defer.resolve(result);
                    }
                  };
                  this.send_regenerateToken(request);
                  return _defer.promise;
                } else {
                  this._reqs[this.seqid()] = callback;
                  this.send_regenerateToken(request);
                }
};

AromaServiceClient.prototype.send_regenerateToken = function(request) {
                var output = new this.pClass(this.output);
                output.writeMessageBegin('regenerateToken', Thrift.MessageType.CALL, this.seqid());
                var args = new AromaService_regenerateToken_args();
                args.request = request;
                args.write(output);
                output.writeMessageEnd();
                return this.output.flush();
};

AromaServiceClient.prototype.recv_regenerateToken = function(input,mtype,rseqid) {
                var callback = this._reqs[rseqid] || function() {};
                delete this._reqs[rseqid];
                if (mtype == Thrift.MessageType.EXCEPTION) {
                  var x = new Thrift.TApplicationException();
                  x.read(input);
                  input.readMessageEnd();
                  return callback(x);
                }
                var result = new AromaService_regenerateToken_result();
                result.read(input);
                input.readMessageEnd();

                if (null !== result.ex1) {
                  return callback(result.ex1);
                }
                if (null !== result.ex2) {
                  return callback(result.ex2);
                }
                if (null !== result.ex3) {
                  return callback(result.ex3);
                }
                if (null !== result.ex4) {
                  return callback(result.ex4);
                }
                if (null !== result.ex5) {
                  return callback(result.ex5);
                }
                if (null !== result.success) {
                  return callback(null, result.success);
                }
                return callback('regenerateToken failed: unknown result');
};
AromaServiceClient.prototype.registerHealthCheck = function(request, callback) {
                this._seqid = this.new_seqid();
                if (callback === undefined) {
                  var _defer = Q.defer();
                  this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                      _defer.reject(error);
                    } else {
                      _defer.resolve(result);
                    }
                  };
                  this.send_registerHealthCheck(request);
                  return _defer.promise;
                } else {
                  this._reqs[this.seqid()] = callback;
                  this.send_registerHealthCheck(request);
                }
};

AromaServiceClient.prototype.send_registerHealthCheck = function(request) {
                var output = new this.pClass(this.output);
                output.writeMessageBegin('registerHealthCheck', Thrift.MessageType.CALL, this.seqid());
                var args = new AromaService_registerHealthCheck_args();
                args.request = request;
                args.write(output);
                output.writeMessageEnd();
                return this.output.flush();
};

AromaServiceClient.prototype.recv_registerHealthCheck = function(input,mtype,rseqid) {
                var callback = this._reqs[rseqid] || function() {};
                delete this._reqs[rseqid];
                if (mtype == Thrift.MessageType.EXCEPTION) {
                  var x = new Thrift.TApplicationException();
                  x.read(input);
                  input.readMessageEnd();
                  return callback(x);
                }
                var result = new AromaService_registerHealthCheck_result();
                result.read(input);
                input.readMessageEnd();

                if (null !== result.ex1) {
                  return callback(result.ex1);
                }
                if (null !== result.ex2) {
                  return callback(result.ex2);
                }
                if (null !== result.ex3) {
                  return callback(result.ex3);
                }
                if (null !== result.ex4) {
                  return callback(result.ex4);
                }
                if (null !== result.ex5) {
                  return callback(result.ex5);
                }
                if (null !== result.success) {
                  return callback(null, result.success);
                }
                return callback('registerHealthCheck failed: unknown result');
};
AromaServiceClient.prototype.removeSavedChannel = function(request, callback) {
                this._seqid = this.new_seqid();
                if (callback === undefined) {
                  var _defer = Q.defer();
                  this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                      _defer.reject(error);
                    } else {
                      _defer.resolve(result);
                    }
                  };
                  this.send_removeSavedChannel(request);
                  return _defer.promise;
                } else {
                  this._reqs[this.seqid()] = callback;
                  this.send_removeSavedChannel(request);
                }
};

AromaServiceClient.prototype.send_removeSavedChannel = function(request) {
                var output = new this.pClass(this.output);
                output.writeMessageBegin('removeSavedChannel', Thrift.MessageType.CALL, this.seqid());
                var args = new AromaService_removeSavedChannel_args();
                args.request = request;
                args.write(output);
                output.writeMessageEnd();
                return this.output.flush();
};

AromaServiceClient.prototype.recv_removeSavedChannel = function(input,mtype,rseqid) {
                var callback = this._reqs[rseqid] || function() {};
                delete this._reqs[rseqid];
                if (mtype == Thrift.MessageType.EXCEPTION) {
                  var x = new Thrift.TApplicationException();
                  x.read(input);
                  input.readMessageEnd();
                  return callback(x);
                }
                var result = new AromaService_removeSavedChannel_result();
                result.read(input);
                input.readMessageEnd();

                if (null !== result.ex1) {
                  return callback(result.ex1);
                }
                if (null !== result.ex2) {
                  return callback(result.ex2);
                }
                if (null !== result.ex3) {
                  return callback(result.ex3);
                }
                if (null !== result.ex4) {
                  return callback(result.ex4);
                }
                if (null !== result.ex5) {
                  return callback(result.ex5);
                }
                if (null !== result.success) {
                  return callback(null, result.success);
                }
                return callback('removeSavedChannel failed: unknown result');
};
AromaServiceClient.prototype.renewApplicationToken = function(request, callback) {
                this._seqid = this.new_seqid();
                if (callback === undefined) {
                  var _defer = Q.defer();
                  this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                      _defer.reject(error);
                    } else {
                      _defer.resolve(result);
                    }
                  };
                  this.send_renewApplicationToken(request);
                  return _defer.promise;
                } else {
                  this._reqs[this.seqid()] = callback;
                  this.send_renewApplicationToken(request);
                }
};

AromaServiceClient.prototype.send_renewApplicationToken = function(request) {
                var output = new this.pClass(this.output);
                output.writeMessageBegin('renewApplicationToken', Thrift.MessageType.CALL, this.seqid());
                var args = new AromaService_renewApplicationToken_args();
                args.request = request;
                args.write(output);
                output.writeMessageEnd();
                return this.output.flush();
};

AromaServiceClient.prototype.recv_renewApplicationToken = function(input,mtype,rseqid) {
                var callback = this._reqs[rseqid] || function() {};
                delete this._reqs[rseqid];
                if (mtype == Thrift.MessageType.EXCEPTION) {
                  var x = new Thrift.TApplicationException();
                  x.read(input);
                  input.readMessageEnd();
                  return callback(x);
                }
                var result = new AromaService_renewApplicationToken_result();
                result.read(input);
                input.readMessageEnd();

                if (null !== result.ex1) {
                  return callback(result.ex1);
                }
                if (null !== result.ex2) {
                  return callback(result.ex2);
                }
                if (null !== result.ex3) {
                  return callback(result.ex3);
                }
                if (null !== result.ex4) {
                  return callback(result.ex4);
                }
                if (null !== result.ex5) {
                  return callback(result.ex5);
                }
                if (null !== result.success) {
                  return callback(null, result.success);
                }
                return callback('renewApplicationToken failed: unknown result');
};
AromaServiceClient.prototype.saveChannel = function(request, callback) {
                this._seqid = this.new_seqid();
                if (callback === undefined) {
                  var _defer = Q.defer();
                  this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                      _defer.reject(error);
                    } else {
                      _defer.resolve(result);
                    }
                  };
                  this.send_saveChannel(request);
                  return _defer.promise;
                } else {
                  this._reqs[this.seqid()] = callback;
                  this.send_saveChannel(request);
                }
};

AromaServiceClient.prototype.send_saveChannel = function(request) {
                var output = new this.pClass(this.output);
                output.writeMessageBegin('saveChannel', Thrift.MessageType.CALL, this.seqid());
                var args = new AromaService_saveChannel_args();
                args.request = request;
                args.write(output);
                output.writeMessageEnd();
                return this.output.flush();
};

AromaServiceClient.prototype.recv_saveChannel = function(input,mtype,rseqid) {
                var callback = this._reqs[rseqid] || function() {};
                delete this._reqs[rseqid];
                if (mtype == Thrift.MessageType.EXCEPTION) {
                  var x = new Thrift.TApplicationException();
                  x.read(input);
                  input.readMessageEnd();
                  return callback(x);
                }
                var result = new AromaService_saveChannel_result();
                result.read(input);
                input.readMessageEnd();

                if (null !== result.ex1) {
                  return callback(result.ex1);
                }
                if (null !== result.ex2) {
                  return callback(result.ex2);
                }
                if (null !== result.ex3) {
                  return callback(result.ex3);
                }
                if (null !== result.ex4) {
                  return callback(result.ex4);
                }
                if (null !== result.success) {
                  return callback(null, result.success);
                }
                return callback('saveChannel failed: unknown result');
};
AromaServiceClient.prototype.signIn = function(request, callback) {
                this._seqid = this.new_seqid();
                if (callback === undefined) {
                  var _defer = Q.defer();
                  this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                      _defer.reject(error);
                    } else {
                      _defer.resolve(result);
                    }
                  };
                  this.send_signIn(request);
                  return _defer.promise;
                } else {
                  this._reqs[this.seqid()] = callback;
                  this.send_signIn(request);
                }
};

AromaServiceClient.prototype.send_signIn = function(request) {
                var output = new this.pClass(this.output);
                output.writeMessageBegin('signIn', Thrift.MessageType.CALL, this.seqid());
                var args = new AromaService_signIn_args();
                args.request = request;
                args.write(output);
                output.writeMessageEnd();
                return this.output.flush();
};

AromaServiceClient.prototype.recv_signIn = function(input,mtype,rseqid) {
                var callback = this._reqs[rseqid] || function() {};
                delete this._reqs[rseqid];
                if (mtype == Thrift.MessageType.EXCEPTION) {
                  var x = new Thrift.TApplicationException();
                  x.read(input);
                  input.readMessageEnd();
                  return callback(x);
                }
                var result = new AromaService_signIn_result();
                result.read(input);
                input.readMessageEnd();

                if (null !== result.ex1) {
                  return callback(result.ex1);
                }
                if (null !== result.ex2) {
                  return callback(result.ex2);
                }
                if (null !== result.ex3) {
                  return callback(result.ex3);
                }
                if (null !== result.ex4) {
                  return callback(result.ex4);
                }
                if (null !== result.success) {
                  return callback(null, result.success);
                }
                return callback('signIn failed: unknown result');
};
AromaServiceClient.prototype.signUp = function(request, callback) {
                this._seqid = this.new_seqid();
                if (callback === undefined) {
                  var _defer = Q.defer();
                  this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                      _defer.reject(error);
                    } else {
                      _defer.resolve(result);
                    }
                  };
                  this.send_signUp(request);
                  return _defer.promise;
                } else {
                  this._reqs[this.seqid()] = callback;
                  this.send_signUp(request);
                }
};

AromaServiceClient.prototype.send_signUp = function(request) {
                var output = new this.pClass(this.output);
                output.writeMessageBegin('signUp', Thrift.MessageType.CALL, this.seqid());
                var args = new AromaService_signUp_args();
                args.request = request;
                args.write(output);
                output.writeMessageEnd();
                return this.output.flush();
};

AromaServiceClient.prototype.recv_signUp = function(input,mtype,rseqid) {
                var callback = this._reqs[rseqid] || function() {};
                delete this._reqs[rseqid];
                if (mtype == Thrift.MessageType.EXCEPTION) {
                  var x = new Thrift.TApplicationException();
                  x.read(input);
                  input.readMessageEnd();
                  return callback(x);
                }
                var result = new AromaService_signUp_result();
                result.read(input);
                input.readMessageEnd();

                if (null !== result.ex1) {
                  return callback(result.ex1);
                }
                if (null !== result.ex2) {
                  return callback(result.ex2);
                }
                if (null !== result.ex3) {
                  return callback(result.ex3);
                }
                if (null !== result.ex4) {
                  return callback(result.ex4);
                }
                if (null !== result.success) {
                  return callback(null, result.success);
                }
                return callback('signUp failed: unknown result');
};
AromaServiceClient.prototype.snoozeChannel = function(request, callback) {
                this._seqid = this.new_seqid();
                if (callback === undefined) {
                  var _defer = Q.defer();
                  this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                      _defer.reject(error);
                    } else {
                      _defer.resolve(result);
                    }
                  };
                  this.send_snoozeChannel(request);
                  return _defer.promise;
                } else {
                  this._reqs[this.seqid()] = callback;
                  this.send_snoozeChannel(request);
                }
};

AromaServiceClient.prototype.send_snoozeChannel = function(request) {
                var output = new this.pClass(this.output);
                output.writeMessageBegin('snoozeChannel', Thrift.MessageType.CALL, this.seqid());
                var args = new AromaService_snoozeChannel_args();
                args.request = request;
                args.write(output);
                output.writeMessageEnd();
                return this.output.flush();
};

AromaServiceClient.prototype.recv_snoozeChannel = function(input,mtype,rseqid) {
                var callback = this._reqs[rseqid] || function() {};
                delete this._reqs[rseqid];
                if (mtype == Thrift.MessageType.EXCEPTION) {
                  var x = new Thrift.TApplicationException();
                  x.read(input);
                  input.readMessageEnd();
                  return callback(x);
                }
                var result = new AromaService_snoozeChannel_result();
                result.read(input);
                input.readMessageEnd();

                if (null !== result.ex1) {
                  return callback(result.ex1);
                }
                if (null !== result.ex2) {
                  return callback(result.ex2);
                }
                if (null !== result.ex3) {
                  return callback(result.ex3);
                }
                if (null !== result.ex4) {
                  return callback(result.ex4);
                }
                if (null !== result.ex5) {
                  return callback(result.ex5);
                }
                if (null !== result.success) {
                  return callback(null, result.success);
                }
                return callback('snoozeChannel failed: unknown result');
};
AromaServiceClient.prototype.followApplication = function(request, callback) {
                this._seqid = this.new_seqid();
                if (callback === undefined) {
                  var _defer = Q.defer();
                  this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                      _defer.reject(error);
                    } else {
                      _defer.resolve(result);
                    }
                  };
                  this.send_followApplication(request);
                  return _defer.promise;
                } else {
                  this._reqs[this.seqid()] = callback;
                  this.send_followApplication(request);
                }
};

AromaServiceClient.prototype.send_followApplication = function(request) {
                var output = new this.pClass(this.output);
                output.writeMessageBegin('followApplication', Thrift.MessageType.CALL, this.seqid());
                var args = new AromaService_followApplication_args();
                args.request = request;
                args.write(output);
                output.writeMessageEnd();
                return this.output.flush();
};

AromaServiceClient.prototype.recv_followApplication = function(input,mtype,rseqid) {
                var callback = this._reqs[rseqid] || function() {};
                delete this._reqs[rseqid];
                if (mtype == Thrift.MessageType.EXCEPTION) {
                  var x = new Thrift.TApplicationException();
                  x.read(input);
                  input.readMessageEnd();
                  return callback(x);
                }
                var result = new AromaService_followApplication_result();
                result.read(input);
                input.readMessageEnd();

                if (null !== result.ex1) {
                  return callback(result.ex1);
                }
                if (null !== result.ex2) {
                  return callback(result.ex2);
                }
                if (null !== result.ex3) {
                  return callback(result.ex3);
                }
                if (null !== result.ex4) {
                  return callback(result.ex4);
                }
                if (null !== result.ex5) {
                  return callback(result.ex5);
                }
                if (null !== result.success) {
                  return callback(null, result.success);
                }
                return callback('followApplication failed: unknown result');
};
AromaServiceClient.prototype.unfollowApplication = function(request, callback) {
                this._seqid = this.new_seqid();
                if (callback === undefined) {
                  var _defer = Q.defer();
                  this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                      _defer.reject(error);
                    } else {
                      _defer.resolve(result);
                    }
                  };
                  this.send_unfollowApplication(request);
                  return _defer.promise;
                } else {
                  this._reqs[this.seqid()] = callback;
                  this.send_unfollowApplication(request);
                }
};

AromaServiceClient.prototype.send_unfollowApplication = function(request) {
                var output = new this.pClass(this.output);
                output.writeMessageBegin('unfollowApplication', Thrift.MessageType.CALL, this.seqid());
                var args = new AromaService_unfollowApplication_args();
                args.request = request;
                args.write(output);
                output.writeMessageEnd();
                return this.output.flush();
};

AromaServiceClient.prototype.recv_unfollowApplication = function(input,mtype,rseqid) {
                var callback = this._reqs[rseqid] || function() {};
                delete this._reqs[rseqid];
                if (mtype == Thrift.MessageType.EXCEPTION) {
                  var x = new Thrift.TApplicationException();
                  x.read(input);
                  input.readMessageEnd();
                  return callback(x);
                }
                var result = new AromaService_unfollowApplication_result();
                result.read(input);
                input.readMessageEnd();

                if (null !== result.ex1) {
                  return callback(result.ex1);
                }
                if (null !== result.ex2) {
                  return callback(result.ex2);
                }
                if (null !== result.ex3) {
                  return callback(result.ex3);
                }
                if (null !== result.ex4) {
                  return callback(result.ex4);
                }
                if (null !== result.ex5) {
                  return callback(result.ex5);
                }
                if (null !== result.success) {
                  return callback(null, result.success);
                }
                return callback('unfollowApplication failed: unknown result');
};
AromaServiceClient.prototype.updateApplication = function(request, callback) {
                this._seqid = this.new_seqid();
                if (callback === undefined) {
                  var _defer = Q.defer();
                  this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                      _defer.reject(error);
                    } else {
                      _defer.resolve(result);
                    }
                  };
                  this.send_updateApplication(request);
                  return _defer.promise;
                } else {
                  this._reqs[this.seqid()] = callback;
                  this.send_updateApplication(request);
                }
};

AromaServiceClient.prototype.send_updateApplication = function(request) {
                var output = new this.pClass(this.output);
                output.writeMessageBegin('updateApplication', Thrift.MessageType.CALL, this.seqid());
                var args = new AromaService_updateApplication_args();
                args.request = request;
                args.write(output);
                output.writeMessageEnd();
                return this.output.flush();
};

AromaServiceClient.prototype.recv_updateApplication = function(input,mtype,rseqid) {
                var callback = this._reqs[rseqid] || function() {};
                delete this._reqs[rseqid];
                if (mtype == Thrift.MessageType.EXCEPTION) {
                  var x = new Thrift.TApplicationException();
                  x.read(input);
                  input.readMessageEnd();
                  return callback(x);
                }
                var result = new AromaService_updateApplication_result();
                result.read(input);
                input.readMessageEnd();

                if (null !== result.ex1) {
                  return callback(result.ex1);
                }
                if (null !== result.ex2) {
                  return callback(result.ex2);
                }
                if (null !== result.ex3) {
                  return callback(result.ex3);
                }
                if (null !== result.ex4) {
                  return callback(result.ex4);
                }
                if (null !== result.ex5) {
                  return callback(result.ex5);
                }
                if (null !== result.success) {
                  return callback(null, result.success);
                }
                return callback('updateApplication failed: unknown result');
};
AromaServiceClient.prototype.getActivity = function(request, callback) {
                this._seqid = this.new_seqid();
                if (callback === undefined) {
                  var _defer = Q.defer();
                  this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                      _defer.reject(error);
                    } else {
                      _defer.resolve(result);
                    }
                  };
                  this.send_getActivity(request);
                  return _defer.promise;
                } else {
                  this._reqs[this.seqid()] = callback;
                  this.send_getActivity(request);
                }
};

AromaServiceClient.prototype.send_getActivity = function(request) {
                var output = new this.pClass(this.output);
                output.writeMessageBegin('getActivity', Thrift.MessageType.CALL, this.seqid());
                var args = new AromaService_getActivity_args();
                args.request = request;
                args.write(output);
                output.writeMessageEnd();
                return this.output.flush();
};

AromaServiceClient.prototype.recv_getActivity = function(input,mtype,rseqid) {
                var callback = this._reqs[rseqid] || function() {};
                delete this._reqs[rseqid];
                if (mtype == Thrift.MessageType.EXCEPTION) {
                  var x = new Thrift.TApplicationException();
                  x.read(input);
                  input.readMessageEnd();
                  return callback(x);
                }
                var result = new AromaService_getActivity_result();
                result.read(input);
                input.readMessageEnd();

                if (null !== result.ex1) {
                  return callback(result.ex1);
                }
                if (null !== result.ex2) {
                  return callback(result.ex2);
                }
                if (null !== result.ex3) {
                  return callback(result.ex3);
                }
                if (null !== result.success) {
                  return callback(null, result.success);
                }
                return callback('getActivity failed: unknown result');
};
AromaServiceClient.prototype.getApplicationInfo = function(request, callback) {
                this._seqid = this.new_seqid();
                if (callback === undefined) {
                  var _defer = Q.defer();
                  this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                      _defer.reject(error);
                    } else {
                      _defer.resolve(result);
                    }
                  };
                  this.send_getApplicationInfo(request);
                  return _defer.promise;
                } else {
                  this._reqs[this.seqid()] = callback;
                  this.send_getApplicationInfo(request);
                }
};

AromaServiceClient.prototype.send_getApplicationInfo = function(request) {
                var output = new this.pClass(this.output);
                output.writeMessageBegin('getApplicationInfo', Thrift.MessageType.CALL, this.seqid());
                var args = new AromaService_getApplicationInfo_args();
                args.request = request;
                args.write(output);
                output.writeMessageEnd();
                return this.output.flush();
};

AromaServiceClient.prototype.recv_getApplicationInfo = function(input,mtype,rseqid) {
                var callback = this._reqs[rseqid] || function() {};
                delete this._reqs[rseqid];
                if (mtype == Thrift.MessageType.EXCEPTION) {
                  var x = new Thrift.TApplicationException();
                  x.read(input);
                  input.readMessageEnd();
                  return callback(x);
                }
                var result = new AromaService_getApplicationInfo_result();
                result.read(input);
                input.readMessageEnd();

                if (null !== result.ex1) {
                  return callback(result.ex1);
                }
                if (null !== result.ex2) {
                  return callback(result.ex2);
                }
                if (null !== result.ex3) {
                  return callback(result.ex3);
                }
                if (null !== result.ex4) {
                  return callback(result.ex4);
                }
                if (null !== result.ex5) {
                  return callback(result.ex5);
                }
                if (null !== result.success) {
                  return callback(null, result.success);
                }
                return callback('getApplicationInfo failed: unknown result');
};
AromaServiceClient.prototype.getBuzz = function(request, callback) {
                this._seqid = this.new_seqid();
                if (callback === undefined) {
                  var _defer = Q.defer();
                  this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                      _defer.reject(error);
                    } else {
                      _defer.resolve(result);
                    }
                  };
                  this.send_getBuzz(request);
                  return _defer.promise;
                } else {
                  this._reqs[this.seqid()] = callback;
                  this.send_getBuzz(request);
                }
};

AromaServiceClient.prototype.send_getBuzz = function(request) {
                var output = new this.pClass(this.output);
                output.writeMessageBegin('getBuzz', Thrift.MessageType.CALL, this.seqid());
                var args = new AromaService_getBuzz_args();
                args.request = request;
                args.write(output);
                output.writeMessageEnd();
                return this.output.flush();
};

AromaServiceClient.prototype.recv_getBuzz = function(input,mtype,rseqid) {
                var callback = this._reqs[rseqid] || function() {};
                delete this._reqs[rseqid];
                if (mtype == Thrift.MessageType.EXCEPTION) {
                  var x = new Thrift.TApplicationException();
                  x.read(input);
                  input.readMessageEnd();
                  return callback(x);
                }
                var result = new AromaService_getBuzz_result();
                result.read(input);
                input.readMessageEnd();

                if (null !== result.ex1) {
                  return callback(result.ex1);
                }
                if (null !== result.ex2) {
                  return callback(result.ex2);
                }
                if (null !== result.ex3) {
                  return callback(result.ex3);
                }
                if (null !== result.ex4) {
                  return callback(result.ex4);
                }
                if (null !== result.ex5) {
                  return callback(result.ex5);
                }
                if (null !== result.success) {
                  return callback(null, result.success);
                }
                return callback('getBuzz failed: unknown result');
};
AromaServiceClient.prototype.getDashboard = function(request, callback) {
                this._seqid = this.new_seqid();
                if (callback === undefined) {
                  var _defer = Q.defer();
                  this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                      _defer.reject(error);
                    } else {
                      _defer.resolve(result);
                    }
                  };
                  this.send_getDashboard(request);
                  return _defer.promise;
                } else {
                  this._reqs[this.seqid()] = callback;
                  this.send_getDashboard(request);
                }
};

AromaServiceClient.prototype.send_getDashboard = function(request) {
                var output = new this.pClass(this.output);
                output.writeMessageBegin('getDashboard', Thrift.MessageType.CALL, this.seqid());
                var args = new AromaService_getDashboard_args();
                args.request = request;
                args.write(output);
                output.writeMessageEnd();
                return this.output.flush();
};

AromaServiceClient.prototype.recv_getDashboard = function(input,mtype,rseqid) {
                var callback = this._reqs[rseqid] || function() {};
                delete this._reqs[rseqid];
                if (mtype == Thrift.MessageType.EXCEPTION) {
                  var x = new Thrift.TApplicationException();
                  x.read(input);
                  input.readMessageEnd();
                  return callback(x);
                }
                var result = new AromaService_getDashboard_result();
                result.read(input);
                input.readMessageEnd();

                if (null !== result.ex1) {
                  return callback(result.ex1);
                }
                if (null !== result.ex2) {
                  return callback(result.ex2);
                }
                if (null !== result.ex3) {
                  return callback(result.ex3);
                }
                if (null !== result.success) {
                  return callback(null, result.success);
                }
                return callback('getDashboard failed: unknown result');
};
AromaServiceClient.prototype.getApplicationMessages = function(request, callback) {
                this._seqid = this.new_seqid();
                if (callback === undefined) {
                  var _defer = Q.defer();
                  this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                      _defer.reject(error);
                    } else {
                      _defer.resolve(result);
                    }
                  };
                  this.send_getApplicationMessages(request);
                  return _defer.promise;
                } else {
                  this._reqs[this.seqid()] = callback;
                  this.send_getApplicationMessages(request);
                }
};

AromaServiceClient.prototype.send_getApplicationMessages = function(request) {
                var output = new this.pClass(this.output);
                output.writeMessageBegin('getApplicationMessages', Thrift.MessageType.CALL, this.seqid());
                var args = new AromaService_getApplicationMessages_args();
                args.request = request;
                args.write(output);
                output.writeMessageEnd();
                return this.output.flush();
};

AromaServiceClient.prototype.recv_getApplicationMessages = function(input,mtype,rseqid) {
                var callback = this._reqs[rseqid] || function() {};
                delete this._reqs[rseqid];
                if (mtype == Thrift.MessageType.EXCEPTION) {
                  var x = new Thrift.TApplicationException();
                  x.read(input);
                  input.readMessageEnd();
                  return callback(x);
                }
                var result = new AromaService_getApplicationMessages_result();
                result.read(input);
                input.readMessageEnd();

                if (null !== result.ex1) {
                  return callback(result.ex1);
                }
                if (null !== result.ex2) {
                  return callback(result.ex2);
                }
                if (null !== result.ex3) {
                  return callback(result.ex3);
                }
                if (null !== result.ex4) {
                  return callback(result.ex4);
                }
                if (null !== result.ex5) {
                  return callback(result.ex5);
                }
                if (null !== result.success) {
                  return callback(null, result.success);
                }
                return callback('getApplicationMessages failed: unknown result');
};
AromaServiceClient.prototype.getInbox = function(request, callback) {
                this._seqid = this.new_seqid();
                if (callback === undefined) {
                  var _defer = Q.defer();
                  this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                      _defer.reject(error);
                    } else {
                      _defer.resolve(result);
                    }
                  };
                  this.send_getInbox(request);
                  return _defer.promise;
                } else {
                  this._reqs[this.seqid()] = callback;
                  this.send_getInbox(request);
                }
};

AromaServiceClient.prototype.send_getInbox = function(request) {
                var output = new this.pClass(this.output);
                output.writeMessageBegin('getInbox', Thrift.MessageType.CALL, this.seqid());
                var args = new AromaService_getInbox_args();
                args.request = request;
                args.write(output);
                output.writeMessageEnd();
                return this.output.flush();
};

AromaServiceClient.prototype.recv_getInbox = function(input,mtype,rseqid) {
                var callback = this._reqs[rseqid] || function() {};
                delete this._reqs[rseqid];
                if (mtype == Thrift.MessageType.EXCEPTION) {
                  var x = new Thrift.TApplicationException();
                  x.read(input);
                  input.readMessageEnd();
                  return callback(x);
                }
                var result = new AromaService_getInbox_result();
                result.read(input);
                input.readMessageEnd();

                if (null !== result.ex1) {
                  return callback(result.ex1);
                }
                if (null !== result.ex2) {
                  return callback(result.ex2);
                }
                if (null !== result.ex3) {
                  return callback(result.ex3);
                }
                if (null !== result.success) {
                  return callback(null, result.success);
                }
                return callback('getInbox failed: unknown result');
};
AromaServiceClient.prototype.getFullMessage = function(request, callback) {
                this._seqid = this.new_seqid();
                if (callback === undefined) {
                  var _defer = Q.defer();
                  this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                      _defer.reject(error);
                    } else {
                      _defer.resolve(result);
                    }
                  };
                  this.send_getFullMessage(request);
                  return _defer.promise;
                } else {
                  this._reqs[this.seqid()] = callback;
                  this.send_getFullMessage(request);
                }
};

AromaServiceClient.prototype.send_getFullMessage = function(request) {
                var output = new this.pClass(this.output);
                output.writeMessageBegin('getFullMessage', Thrift.MessageType.CALL, this.seqid());
                var args = new AromaService_getFullMessage_args();
                args.request = request;
                args.write(output);
                output.writeMessageEnd();
                return this.output.flush();
};

AromaServiceClient.prototype.recv_getFullMessage = function(input,mtype,rseqid) {
                var callback = this._reqs[rseqid] || function() {};
                delete this._reqs[rseqid];
                if (mtype == Thrift.MessageType.EXCEPTION) {
                  var x = new Thrift.TApplicationException();
                  x.read(input);
                  input.readMessageEnd();
                  return callback(x);
                }
                var result = new AromaService_getFullMessage_result();
                result.read(input);
                input.readMessageEnd();

                if (null !== result.ex1) {
                  return callback(result.ex1);
                }
                if (null !== result.ex2) {
                  return callback(result.ex2);
                }
                if (null !== result.ex3) {
                  return callback(result.ex3);
                }
                if (null !== result.success) {
                  return callback(null, result.success);
                }
                return callback('getFullMessage failed: unknown result');
};
AromaServiceClient.prototype.getMedia = function(request, callback) {
                this._seqid = this.new_seqid();
                if (callback === undefined) {
                  var _defer = Q.defer();
                  this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                      _defer.reject(error);
                    } else {
                      _defer.resolve(result);
                    }
                  };
                  this.send_getMedia(request);
                  return _defer.promise;
                } else {
                  this._reqs[this.seqid()] = callback;
                  this.send_getMedia(request);
                }
};

AromaServiceClient.prototype.send_getMedia = function(request) {
                var output = new this.pClass(this.output);
                output.writeMessageBegin('getMedia', Thrift.MessageType.CALL, this.seqid());
                var args = new AromaService_getMedia_args();
                args.request = request;
                args.write(output);
                output.writeMessageEnd();
                return this.output.flush();
};

AromaServiceClient.prototype.recv_getMedia = function(input,mtype,rseqid) {
                var callback = this._reqs[rseqid] || function() {};
                delete this._reqs[rseqid];
                if (mtype == Thrift.MessageType.EXCEPTION) {
                  var x = new Thrift.TApplicationException();
                  x.read(input);
                  input.readMessageEnd();
                  return callback(x);
                }
                var result = new AromaService_getMedia_result();
                result.read(input);
                input.readMessageEnd();

                if (null !== result.ex1) {
                  return callback(result.ex1);
                }
                if (null !== result.ex2) {
                  return callback(result.ex2);
                }
                if (null !== result.ex3) {
                  return callback(result.ex3);
                }
                if (null !== result.ex4) {
                  return callback(result.ex4);
                }
                if (null !== result.ex5) {
                  return callback(result.ex5);
                }
                if (null !== result.success) {
                  return callback(null, result.success);
                }
                return callback('getMedia failed: unknown result');
};
AromaServiceClient.prototype.getApplicationsOwnedBy = function(request, callback) {
                this._seqid = this.new_seqid();
                if (callback === undefined) {
                  var _defer = Q.defer();
                  this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                      _defer.reject(error);
                    } else {
                      _defer.resolve(result);
                    }
                  };
                  this.send_getApplicationsOwnedBy(request);
                  return _defer.promise;
                } else {
                  this._reqs[this.seqid()] = callback;
                  this.send_getApplicationsOwnedBy(request);
                }
};

AromaServiceClient.prototype.send_getApplicationsOwnedBy = function(request) {
                var output = new this.pClass(this.output);
                output.writeMessageBegin('getApplicationsOwnedBy', Thrift.MessageType.CALL, this.seqid());
                var args = new AromaService_getApplicationsOwnedBy_args();
                args.request = request;
                args.write(output);
                output.writeMessageEnd();
                return this.output.flush();
};

AromaServiceClient.prototype.recv_getApplicationsOwnedBy = function(input,mtype,rseqid) {
                var callback = this._reqs[rseqid] || function() {};
                delete this._reqs[rseqid];
                if (mtype == Thrift.MessageType.EXCEPTION) {
                  var x = new Thrift.TApplicationException();
                  x.read(input);
                  input.readMessageEnd();
                  return callback(x);
                }
                var result = new AromaService_getApplicationsOwnedBy_result();
                result.read(input);
                input.readMessageEnd();

                if (null !== result.ex1) {
                  return callback(result.ex1);
                }
                if (null !== result.ex2) {
                  return callback(result.ex2);
                }
                if (null !== result.ex3) {
                  return callback(result.ex3);
                }
                if (null !== result.success) {
                  return callback(null, result.success);
                }
                return callback('getApplicationsOwnedBy failed: unknown result');
};
AromaServiceClient.prototype.getApplicationsFollowedBy = function(request, callback) {
                this._seqid = this.new_seqid();
                if (callback === undefined) {
                  var _defer = Q.defer();
                  this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                      _defer.reject(error);
                    } else {
                      _defer.resolve(result);
                    }
                  };
                  this.send_getApplicationsFollowedBy(request);
                  return _defer.promise;
                } else {
                  this._reqs[this.seqid()] = callback;
                  this.send_getApplicationsFollowedBy(request);
                }
};

AromaServiceClient.prototype.send_getApplicationsFollowedBy = function(request) {
                var output = new this.pClass(this.output);
                output.writeMessageBegin('getApplicationsFollowedBy', Thrift.MessageType.CALL, this.seqid());
                var args = new AromaService_getApplicationsFollowedBy_args();
                args.request = request;
                args.write(output);
                output.writeMessageEnd();
                return this.output.flush();
};

AromaServiceClient.prototype.recv_getApplicationsFollowedBy = function(input,mtype,rseqid) {
                var callback = this._reqs[rseqid] || function() {};
                delete this._reqs[rseqid];
                if (mtype == Thrift.MessageType.EXCEPTION) {
                  var x = new Thrift.TApplicationException();
                  x.read(input);
                  input.readMessageEnd();
                  return callback(x);
                }
                var result = new AromaService_getApplicationsFollowedBy_result();
                result.read(input);
                input.readMessageEnd();

                if (null !== result.ex1) {
                  return callback(result.ex1);
                }
                if (null !== result.ex2) {
                  return callback(result.ex2);
                }
                if (null !== result.ex3) {
                  return callback(result.ex3);
                }
                if (null !== result.success) {
                  return callback(null, result.success);
                }
                return callback('getApplicationsFollowedBy failed: unknown result');
};
AromaServiceClient.prototype.getMySavedChannels = function(request, callback) {
                this._seqid = this.new_seqid();
                if (callback === undefined) {
                  var _defer = Q.defer();
                  this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                      _defer.reject(error);
                    } else {
                      _defer.resolve(result);
                    }
                  };
                  this.send_getMySavedChannels(request);
                  return _defer.promise;
                } else {
                  this._reqs[this.seqid()] = callback;
                  this.send_getMySavedChannels(request);
                }
};

AromaServiceClient.prototype.send_getMySavedChannels = function(request) {
                var output = new this.pClass(this.output);
                output.writeMessageBegin('getMySavedChannels', Thrift.MessageType.CALL, this.seqid());
                var args = new AromaService_getMySavedChannels_args();
                args.request = request;
                args.write(output);
                output.writeMessageEnd();
                return this.output.flush();
};

AromaServiceClient.prototype.recv_getMySavedChannels = function(input,mtype,rseqid) {
                var callback = this._reqs[rseqid] || function() {};
                delete this._reqs[rseqid];
                if (mtype == Thrift.MessageType.EXCEPTION) {
                  var x = new Thrift.TApplicationException();
                  x.read(input);
                  input.readMessageEnd();
                  return callback(x);
                }
                var result = new AromaService_getMySavedChannels_result();
                result.read(input);
                input.readMessageEnd();

                if (null !== result.ex1) {
                  return callback(result.ex1);
                }
                if (null !== result.ex2) {
                  return callback(result.ex2);
                }
                if (null !== result.ex3) {
                  return callback(result.ex3);
                }
                if (null !== result.success) {
                  return callback(null, result.success);
                }
                return callback('getMySavedChannels failed: unknown result');
};
AromaServiceClient.prototype.getUserInfo = function(request, callback) {
                this._seqid = this.new_seqid();
                if (callback === undefined) {
                  var _defer = Q.defer();
                  this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                      _defer.reject(error);
                    } else {
                      _defer.resolve(result);
                    }
                  };
                  this.send_getUserInfo(request);
                  return _defer.promise;
                } else {
                  this._reqs[this.seqid()] = callback;
                  this.send_getUserInfo(request);
                }
};

AromaServiceClient.prototype.send_getUserInfo = function(request) {
                var output = new this.pClass(this.output);
                output.writeMessageBegin('getUserInfo', Thrift.MessageType.CALL, this.seqid());
                var args = new AromaService_getUserInfo_args();
                args.request = request;
                args.write(output);
                output.writeMessageEnd();
                return this.output.flush();
};

AromaServiceClient.prototype.recv_getUserInfo = function(input,mtype,rseqid) {
                var callback = this._reqs[rseqid] || function() {};
                delete this._reqs[rseqid];
                if (mtype == Thrift.MessageType.EXCEPTION) {
                  var x = new Thrift.TApplicationException();
                  x.read(input);
                  input.readMessageEnd();
                  return callback(x);
                }
                var result = new AromaService_getUserInfo_result();
                result.read(input);
                input.readMessageEnd();

                if (null !== result.ex1) {
                  return callback(result.ex1);
                }
                if (null !== result.ex2) {
                  return callback(result.ex2);
                }
                if (null !== result.ex3) {
                  return callback(result.ex3);
                }
                if (null !== result.ex4) {
                  return callback(result.ex4);
                }
                if (null !== result.ex5) {
                  return callback(result.ex5);
                }
                if (null !== result.success) {
                  return callback(null, result.success);
                }
                return callback('getUserInfo failed: unknown result');
};
AromaServiceClient.prototype.searchForApplications = function(request, callback) {
                this._seqid = this.new_seqid();
                if (callback === undefined) {
                  var _defer = Q.defer();
                  this._reqs[this.seqid()] = function(error, result) {
                    if (error) {
                      _defer.reject(error);
                    } else {
                      _defer.resolve(result);
                    }
                  };
                  this.send_searchForApplications(request);
                  return _defer.promise;
                } else {
                  this._reqs[this.seqid()] = callback;
                  this.send_searchForApplications(request);
                }
};

AromaServiceClient.prototype.send_searchForApplications = function(request) {
                var output = new this.pClass(this.output);
                output.writeMessageBegin('searchForApplications', Thrift.MessageType.CALL, this.seqid());
                var args = new AromaService_searchForApplications_args();
                args.request = request;
                args.write(output);
                output.writeMessageEnd();
                return this.output.flush();
};

AromaServiceClient.prototype.recv_searchForApplications = function(input,mtype,rseqid) {
                var callback = this._reqs[rseqid] || function() {};
                delete this._reqs[rseqid];
                if (mtype == Thrift.MessageType.EXCEPTION) {
                  var x = new Thrift.TApplicationException();
                  x.read(input);
                  input.readMessageEnd();
                  return callback(x);
                }
                var result = new AromaService_searchForApplications_result();
                result.read(input);
                input.readMessageEnd();

                if (null !== result.ex1) {
                  return callback(result.ex1);
                }
                if (null !== result.ex2) {
                  return callback(result.ex2);
                }
                if (null !== result.ex3) {
                  return callback(result.ex3);
                }
                if (null !== result.ex4) {
                  return callback(result.ex4);
                }
                if (null !== result.success) {
                  return callback(null, result.success);
                }
                return callback('searchForApplications failed: unknown result');
};
AromaServiceProcessor = exports.Processor = function(handler)               {
                this._handler = handler
              }
              AromaServiceProcessor.prototype.process = function(input, output)               {
                var r = input.readMessageBegin();
                if (this['process_' + r.fname]) {
                  return this['process_' + r.fname].call(this, r.rseqid, input, output);
                } else {
                  input.skip(Thrift.Type.STRUCT);
                  input.readMessageEnd();
                  var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
                  output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
                  x.write(output);
                  output.writeMessageEnd();
                  output.flush();
                }
              }

              AromaServiceProcessor.prototype.process_getApiVersion = function(seqid, input, output)               {
                var args = new AromaService_getApiVersion_args();
                args.read(input);
                input.readMessageEnd();
                if (this._handler.getApiVersion.length === 0) {
                  Q.fcall(this._handler.getApiVersion)
                    .then(function(result) {
                      var result = new AromaService_getApiVersion_result({success: result});
                      output.writeMessageBegin("getApiVersion", Thrift.MessageType.REPLY, seqid);
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    }, function (err) {
                      var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                      output.writeMessageBegin("getApiVersion", Thrift.MessageType.EXCEPTION, seqid);
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    });
                } else {
                  this._handler.getApiVersion(function (err, result) {
                    if (err == null) {
                      var result = new AromaService_getApiVersion_result((err != null ? err : {success: result}));
                      output.writeMessageBegin("getApiVersion", Thrift.MessageType.REPLY, seqid);
                    } else {
                      var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                      output.writeMessageBegin("getApiVersion", Thrift.MessageType.EXCEPTION, seqid);
                    }
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                  });
                }
              }

              AromaServiceProcessor.prototype.process_deleteApplication = function(seqid, input, output)               {
                var args = new AromaService_deleteApplication_args();
                args.read(input);
                input.readMessageEnd();
                if (this._handler.deleteApplication.length === 1) {
                  Q.fcall(this._handler.deleteApplication, args.request)
                    .then(function(result) {
                      var result = new AromaService_deleteApplication_result({success: result});
                      output.writeMessageBegin("deleteApplication", Thrift.MessageType.REPLY, seqid);
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    }, function (err) {
                      if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.ApplicationDoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                        var result = new AromaService_deleteApplication_result(err);
                        output.writeMessageBegin("deleteApplication", Thrift.MessageType.REPLY, seqid);
                      } else {
                        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                        output.writeMessageBegin("deleteApplication", Thrift.MessageType.EXCEPTION, seqid);
                      }
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    });
                } else {
                  this._handler.deleteApplication(args.request, function (err, result) {
                    if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.ApplicationDoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                      var result = new AromaService_deleteApplication_result((err != null ? err : {success: result}));
                      output.writeMessageBegin("deleteApplication", Thrift.MessageType.REPLY, seqid);
                    } else {
                      var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                      output.writeMessageBegin("deleteApplication", Thrift.MessageType.EXCEPTION, seqid);
                    }
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                  });
                }
              }

              AromaServiceProcessor.prototype.process_deleteMessage = function(seqid, input, output)               {
                var args = new AromaService_deleteMessage_args();
                args.read(input);
                input.readMessageEnd();
                if (this._handler.deleteMessage.length === 1) {
                  Q.fcall(this._handler.deleteMessage, args.request)
                    .then(function(result) {
                      var result = new AromaService_deleteMessage_result({success: result});
                      output.writeMessageBegin("deleteMessage", Thrift.MessageType.REPLY, seqid);
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    }, function (err) {
                      if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.MessageDoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                        var result = new AromaService_deleteMessage_result(err);
                        output.writeMessageBegin("deleteMessage", Thrift.MessageType.REPLY, seqid);
                      } else {
                        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                        output.writeMessageBegin("deleteMessage", Thrift.MessageType.EXCEPTION, seqid);
                      }
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    });
                } else {
                  this._handler.deleteMessage(args.request, function (err, result) {
                    if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.MessageDoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                      var result = new AromaService_deleteMessage_result((err != null ? err : {success: result}));
                      output.writeMessageBegin("deleteMessage", Thrift.MessageType.REPLY, seqid);
                    } else {
                      var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                      output.writeMessageBegin("deleteMessage", Thrift.MessageType.EXCEPTION, seqid);
                    }
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                  });
                }
              }

              AromaServiceProcessor.prototype.process_dismissMessage = function(seqid, input, output)               {
                var args = new AromaService_dismissMessage_args();
                args.read(input);
                input.readMessageEnd();
                if (this._handler.dismissMessage.length === 1) {
                  Q.fcall(this._handler.dismissMessage, args.request)
                    .then(function(result) {
                      var result = new AromaService_dismissMessage_result({success: result});
                      output.writeMessageBegin("dismissMessage", Thrift.MessageType.REPLY, seqid);
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    }, function (err) {
                      if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.MessageDoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                        var result = new AromaService_dismissMessage_result(err);
                        output.writeMessageBegin("dismissMessage", Thrift.MessageType.REPLY, seqid);
                      } else {
                        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                        output.writeMessageBegin("dismissMessage", Thrift.MessageType.EXCEPTION, seqid);
                      }
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    });
                } else {
                  this._handler.dismissMessage(args.request, function (err, result) {
                    if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.MessageDoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                      var result = new AromaService_dismissMessage_result((err != null ? err : {success: result}));
                      output.writeMessageBegin("dismissMessage", Thrift.MessageType.REPLY, seqid);
                    } else {
                      var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                      output.writeMessageBegin("dismissMessage", Thrift.MessageType.EXCEPTION, seqid);
                    }
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                  });
                }
              }

              AromaServiceProcessor.prototype.process_provisionApplication = function(seqid, input, output)               {
                var args = new AromaService_provisionApplication_args();
                args.read(input);
                input.readMessageEnd();
                if (this._handler.provisionApplication.length === 1) {
                  Q.fcall(this._handler.provisionApplication, args.request)
                    .then(function(result) {
                      var result = new AromaService_provisionApplication_result({success: result});
                      output.writeMessageBegin("provisionApplication", Thrift.MessageType.REPLY, seqid);
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    }, function (err) {
                      if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.ApplicationDoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                        var result = new AromaService_provisionApplication_result(err);
                        output.writeMessageBegin("provisionApplication", Thrift.MessageType.REPLY, seqid);
                      } else {
                        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                        output.writeMessageBegin("provisionApplication", Thrift.MessageType.EXCEPTION, seqid);
                      }
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    });
                } else {
                  this._handler.provisionApplication(args.request, function (err, result) {
                    if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.ApplicationDoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                      var result = new AromaService_provisionApplication_result((err != null ? err : {success: result}));
                      output.writeMessageBegin("provisionApplication", Thrift.MessageType.REPLY, seqid);
                    } else {
                      var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                      output.writeMessageBegin("provisionApplication", Thrift.MessageType.EXCEPTION, seqid);
                    }
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                  });
                }
              }

              AromaServiceProcessor.prototype.process_regenerateToken = function(seqid, input, output)               {
                var args = new AromaService_regenerateToken_args();
                args.read(input);
                input.readMessageEnd();
                if (this._handler.regenerateToken.length === 1) {
                  Q.fcall(this._handler.regenerateToken, args.request)
                    .then(function(result) {
                      var result = new AromaService_regenerateToken_result({success: result});
                      output.writeMessageBegin("regenerateToken", Thrift.MessageType.REPLY, seqid);
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    }, function (err) {
                      if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.ApplicationDoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                        var result = new AromaService_regenerateToken_result(err);
                        output.writeMessageBegin("regenerateToken", Thrift.MessageType.REPLY, seqid);
                      } else {
                        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                        output.writeMessageBegin("regenerateToken", Thrift.MessageType.EXCEPTION, seqid);
                      }
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    });
                } else {
                  this._handler.regenerateToken(args.request, function (err, result) {
                    if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.ApplicationDoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                      var result = new AromaService_regenerateToken_result((err != null ? err : {success: result}));
                      output.writeMessageBegin("regenerateToken", Thrift.MessageType.REPLY, seqid);
                    } else {
                      var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                      output.writeMessageBegin("regenerateToken", Thrift.MessageType.EXCEPTION, seqid);
                    }
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                  });
                }
              }

              AromaServiceProcessor.prototype.process_registerHealthCheck = function(seqid, input, output)               {
                var args = new AromaService_registerHealthCheck_args();
                args.read(input);
                input.readMessageEnd();
                if (this._handler.registerHealthCheck.length === 1) {
                  Q.fcall(this._handler.registerHealthCheck, args.request)
                    .then(function(result) {
                      var result = new AromaService_registerHealthCheck_result({success: result});
                      output.writeMessageBegin("registerHealthCheck", Thrift.MessageType.REPLY, seqid);
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    }, function (err) {
                      if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.ApplicationDoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                        var result = new AromaService_registerHealthCheck_result(err);
                        output.writeMessageBegin("registerHealthCheck", Thrift.MessageType.REPLY, seqid);
                      } else {
                        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                        output.writeMessageBegin("registerHealthCheck", Thrift.MessageType.EXCEPTION, seqid);
                      }
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    });
                } else {
                  this._handler.registerHealthCheck(args.request, function (err, result) {
                    if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.ApplicationDoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                      var result = new AromaService_registerHealthCheck_result((err != null ? err : {success: result}));
                      output.writeMessageBegin("registerHealthCheck", Thrift.MessageType.REPLY, seqid);
                    } else {
                      var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                      output.writeMessageBegin("registerHealthCheck", Thrift.MessageType.EXCEPTION, seqid);
                    }
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                  });
                }
              }

              AromaServiceProcessor.prototype.process_removeSavedChannel = function(seqid, input, output)               {
                var args = new AromaService_removeSavedChannel_args();
                args.read(input);
                input.readMessageEnd();
                if (this._handler.removeSavedChannel.length === 1) {
                  Q.fcall(this._handler.removeSavedChannel, args.request)
                    .then(function(result) {
                      var result = new AromaService_removeSavedChannel_result({success: result});
                      output.writeMessageBegin("removeSavedChannel", Thrift.MessageType.REPLY, seqid);
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    }, function (err) {
                      if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.UnauthorizedException || err instanceof Exceptions_ttypes.ChannelDoesNotExistException) {
                        var result = new AromaService_removeSavedChannel_result(err);
                        output.writeMessageBegin("removeSavedChannel", Thrift.MessageType.REPLY, seqid);
                      } else {
                        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                        output.writeMessageBegin("removeSavedChannel", Thrift.MessageType.EXCEPTION, seqid);
                      }
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    });
                } else {
                  this._handler.removeSavedChannel(args.request, function (err, result) {
                    if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.UnauthorizedException || err instanceof Exceptions_ttypes.ChannelDoesNotExistException) {
                      var result = new AromaService_removeSavedChannel_result((err != null ? err : {success: result}));
                      output.writeMessageBegin("removeSavedChannel", Thrift.MessageType.REPLY, seqid);
                    } else {
                      var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                      output.writeMessageBegin("removeSavedChannel", Thrift.MessageType.EXCEPTION, seqid);
                    }
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                  });
                }
              }

              AromaServiceProcessor.prototype.process_renewApplicationToken = function(seqid, input, output)               {
                var args = new AromaService_renewApplicationToken_args();
                args.read(input);
                input.readMessageEnd();
                if (this._handler.renewApplicationToken.length === 1) {
                  Q.fcall(this._handler.renewApplicationToken, args.request)
                    .then(function(result) {
                      var result = new AromaService_renewApplicationToken_result({success: result});
                      output.writeMessageBegin("renewApplicationToken", Thrift.MessageType.REPLY, seqid);
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    }, function (err) {
                      if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.ApplicationDoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                        var result = new AromaService_renewApplicationToken_result(err);
                        output.writeMessageBegin("renewApplicationToken", Thrift.MessageType.REPLY, seqid);
                      } else {
                        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                        output.writeMessageBegin("renewApplicationToken", Thrift.MessageType.EXCEPTION, seqid);
                      }
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    });
                } else {
                  this._handler.renewApplicationToken(args.request, function (err, result) {
                    if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.ApplicationDoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                      var result = new AromaService_renewApplicationToken_result((err != null ? err : {success: result}));
                      output.writeMessageBegin("renewApplicationToken", Thrift.MessageType.REPLY, seqid);
                    } else {
                      var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                      output.writeMessageBegin("renewApplicationToken", Thrift.MessageType.EXCEPTION, seqid);
                    }
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                  });
                }
              }

              AromaServiceProcessor.prototype.process_saveChannel = function(seqid, input, output)               {
                var args = new AromaService_saveChannel_args();
                args.read(input);
                input.readMessageEnd();
                if (this._handler.saveChannel.length === 1) {
                  Q.fcall(this._handler.saveChannel, args.request)
                    .then(function(result) {
                      var result = new AromaService_saveChannel_result({success: result});
                      output.writeMessageBegin("saveChannel", Thrift.MessageType.REPLY, seqid);
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    }, function (err) {
                      if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                        var result = new AromaService_saveChannel_result(err);
                        output.writeMessageBegin("saveChannel", Thrift.MessageType.REPLY, seqid);
                      } else {
                        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                        output.writeMessageBegin("saveChannel", Thrift.MessageType.EXCEPTION, seqid);
                      }
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    });
                } else {
                  this._handler.saveChannel(args.request, function (err, result) {
                    if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                      var result = new AromaService_saveChannel_result((err != null ? err : {success: result}));
                      output.writeMessageBegin("saveChannel", Thrift.MessageType.REPLY, seqid);
                    } else {
                      var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                      output.writeMessageBegin("saveChannel", Thrift.MessageType.EXCEPTION, seqid);
                    }
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                  });
                }
              }

              AromaServiceProcessor.prototype.process_signIn = function(seqid, input, output)               {
                var args = new AromaService_signIn_args();
                args.read(input);
                input.readMessageEnd();
                if (this._handler.signIn.length === 1) {
                  Q.fcall(this._handler.signIn, args.request)
                    .then(function(result) {
                      var result = new AromaService_signIn_result({success: result});
                      output.writeMessageBegin("signIn", Thrift.MessageType.REPLY, seqid);
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    }, function (err) {
                      if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidCredentialsException || err instanceof Exceptions_ttypes.UserDoesNotExistException) {
                        var result = new AromaService_signIn_result(err);
                        output.writeMessageBegin("signIn", Thrift.MessageType.REPLY, seqid);
                      } else {
                        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                        output.writeMessageBegin("signIn", Thrift.MessageType.EXCEPTION, seqid);
                      }
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    });
                } else {
                  this._handler.signIn(args.request, function (err, result) {
                    if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidCredentialsException || err instanceof Exceptions_ttypes.UserDoesNotExistException) {
                      var result = new AromaService_signIn_result((err != null ? err : {success: result}));
                      output.writeMessageBegin("signIn", Thrift.MessageType.REPLY, seqid);
                    } else {
                      var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                      output.writeMessageBegin("signIn", Thrift.MessageType.EXCEPTION, seqid);
                    }
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                  });
                }
              }

              AromaServiceProcessor.prototype.process_signUp = function(seqid, input, output)               {
                var args = new AromaService_signUp_args();
                args.read(input);
                input.readMessageEnd();
                if (this._handler.signUp.length === 1) {
                  Q.fcall(this._handler.signUp, args.request)
                    .then(function(result) {
                      var result = new AromaService_signUp_result({success: result});
                      output.writeMessageBegin("signUp", Thrift.MessageType.REPLY, seqid);
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    }, function (err) {
                      if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidCredentialsException || err instanceof Exceptions_ttypes.AccountAlreadyExistsException) {
                        var result = new AromaService_signUp_result(err);
                        output.writeMessageBegin("signUp", Thrift.MessageType.REPLY, seqid);
                      } else {
                        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                        output.writeMessageBegin("signUp", Thrift.MessageType.EXCEPTION, seqid);
                      }
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    });
                } else {
                  this._handler.signUp(args.request, function (err, result) {
                    if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidCredentialsException || err instanceof Exceptions_ttypes.AccountAlreadyExistsException) {
                      var result = new AromaService_signUp_result((err != null ? err : {success: result}));
                      output.writeMessageBegin("signUp", Thrift.MessageType.REPLY, seqid);
                    } else {
                      var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                      output.writeMessageBegin("signUp", Thrift.MessageType.EXCEPTION, seqid);
                    }
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                  });
                }
              }

              AromaServiceProcessor.prototype.process_snoozeChannel = function(seqid, input, output)               {
                var args = new AromaService_snoozeChannel_args();
                args.read(input);
                input.readMessageEnd();
                if (this._handler.snoozeChannel.length === 1) {
                  Q.fcall(this._handler.snoozeChannel, args.request)
                    .then(function(result) {
                      var result = new AromaService_snoozeChannel_result({success: result});
                      output.writeMessageBegin("snoozeChannel", Thrift.MessageType.REPLY, seqid);
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    }, function (err) {
                      if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.UnauthorizedException || err instanceof Exceptions_ttypes.ChannelDoesNotExistException) {
                        var result = new AromaService_snoozeChannel_result(err);
                        output.writeMessageBegin("snoozeChannel", Thrift.MessageType.REPLY, seqid);
                      } else {
                        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                        output.writeMessageBegin("snoozeChannel", Thrift.MessageType.EXCEPTION, seqid);
                      }
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    });
                } else {
                  this._handler.snoozeChannel(args.request, function (err, result) {
                    if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.UnauthorizedException || err instanceof Exceptions_ttypes.ChannelDoesNotExistException) {
                      var result = new AromaService_snoozeChannel_result((err != null ? err : {success: result}));
                      output.writeMessageBegin("snoozeChannel", Thrift.MessageType.REPLY, seqid);
                    } else {
                      var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                      output.writeMessageBegin("snoozeChannel", Thrift.MessageType.EXCEPTION, seqid);
                    }
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                  });
                }
              }

              AromaServiceProcessor.prototype.process_followApplication = function(seqid, input, output)               {
                var args = new AromaService_followApplication_args();
                args.read(input);
                input.readMessageEnd();
                if (this._handler.followApplication.length === 1) {
                  Q.fcall(this._handler.followApplication, args.request)
                    .then(function(result) {
                      var result = new AromaService_followApplication_result({success: result});
                      output.writeMessageBegin("followApplication", Thrift.MessageType.REPLY, seqid);
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    }, function (err) {
                      if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.ApplicationDoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                        var result = new AromaService_followApplication_result(err);
                        output.writeMessageBegin("followApplication", Thrift.MessageType.REPLY, seqid);
                      } else {
                        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                        output.writeMessageBegin("followApplication", Thrift.MessageType.EXCEPTION, seqid);
                      }
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    });
                } else {
                  this._handler.followApplication(args.request, function (err, result) {
                    if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.ApplicationDoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                      var result = new AromaService_followApplication_result((err != null ? err : {success: result}));
                      output.writeMessageBegin("followApplication", Thrift.MessageType.REPLY, seqid);
                    } else {
                      var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                      output.writeMessageBegin("followApplication", Thrift.MessageType.EXCEPTION, seqid);
                    }
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                  });
                }
              }

              AromaServiceProcessor.prototype.process_unfollowApplication = function(seqid, input, output)               {
                var args = new AromaService_unfollowApplication_args();
                args.read(input);
                input.readMessageEnd();
                if (this._handler.unfollowApplication.length === 1) {
                  Q.fcall(this._handler.unfollowApplication, args.request)
                    .then(function(result) {
                      var result = new AromaService_unfollowApplication_result({success: result});
                      output.writeMessageBegin("unfollowApplication", Thrift.MessageType.REPLY, seqid);
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    }, function (err) {
                      if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.ApplicationDoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                        var result = new AromaService_unfollowApplication_result(err);
                        output.writeMessageBegin("unfollowApplication", Thrift.MessageType.REPLY, seqid);
                      } else {
                        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                        output.writeMessageBegin("unfollowApplication", Thrift.MessageType.EXCEPTION, seqid);
                      }
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    });
                } else {
                  this._handler.unfollowApplication(args.request, function (err, result) {
                    if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.ApplicationDoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                      var result = new AromaService_unfollowApplication_result((err != null ? err : {success: result}));
                      output.writeMessageBegin("unfollowApplication", Thrift.MessageType.REPLY, seqid);
                    } else {
                      var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                      output.writeMessageBegin("unfollowApplication", Thrift.MessageType.EXCEPTION, seqid);
                    }
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                  });
                }
              }

              AromaServiceProcessor.prototype.process_updateApplication = function(seqid, input, output)               {
                var args = new AromaService_updateApplication_args();
                args.read(input);
                input.readMessageEnd();
                if (this._handler.updateApplication.length === 1) {
                  Q.fcall(this._handler.updateApplication, args.request)
                    .then(function(result) {
                      var result = new AromaService_updateApplication_result({success: result});
                      output.writeMessageBegin("updateApplication", Thrift.MessageType.REPLY, seqid);
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    }, function (err) {
                      if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.ApplicationDoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                        var result = new AromaService_updateApplication_result(err);
                        output.writeMessageBegin("updateApplication", Thrift.MessageType.REPLY, seqid);
                      } else {
                        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                        output.writeMessageBegin("updateApplication", Thrift.MessageType.EXCEPTION, seqid);
                      }
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    });
                } else {
                  this._handler.updateApplication(args.request, function (err, result) {
                    if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.ApplicationDoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                      var result = new AromaService_updateApplication_result((err != null ? err : {success: result}));
                      output.writeMessageBegin("updateApplication", Thrift.MessageType.REPLY, seqid);
                    } else {
                      var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                      output.writeMessageBegin("updateApplication", Thrift.MessageType.EXCEPTION, seqid);
                    }
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                  });
                }
              }

              AromaServiceProcessor.prototype.process_getActivity = function(seqid, input, output)               {
                var args = new AromaService_getActivity_args();
                args.read(input);
                input.readMessageEnd();
                if (this._handler.getActivity.length === 1) {
                  Q.fcall(this._handler.getActivity, args.request)
                    .then(function(result) {
                      var result = new AromaService_getActivity_result({success: result});
                      output.writeMessageBegin("getActivity", Thrift.MessageType.REPLY, seqid);
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    }, function (err) {
                      if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException) {
                        var result = new AromaService_getActivity_result(err);
                        output.writeMessageBegin("getActivity", Thrift.MessageType.REPLY, seqid);
                      } else {
                        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                        output.writeMessageBegin("getActivity", Thrift.MessageType.EXCEPTION, seqid);
                      }
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    });
                } else {
                  this._handler.getActivity(args.request, function (err, result) {
                    if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException) {
                      var result = new AromaService_getActivity_result((err != null ? err : {success: result}));
                      output.writeMessageBegin("getActivity", Thrift.MessageType.REPLY, seqid);
                    } else {
                      var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                      output.writeMessageBegin("getActivity", Thrift.MessageType.EXCEPTION, seqid);
                    }
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                  });
                }
              }

              AromaServiceProcessor.prototype.process_getApplicationInfo = function(seqid, input, output)               {
                var args = new AromaService_getApplicationInfo_args();
                args.read(input);
                input.readMessageEnd();
                if (this._handler.getApplicationInfo.length === 1) {
                  Q.fcall(this._handler.getApplicationInfo, args.request)
                    .then(function(result) {
                      var result = new AromaService_getApplicationInfo_result({success: result});
                      output.writeMessageBegin("getApplicationInfo", Thrift.MessageType.REPLY, seqid);
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    }, function (err) {
                      if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.ApplicationDoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                        var result = new AromaService_getApplicationInfo_result(err);
                        output.writeMessageBegin("getApplicationInfo", Thrift.MessageType.REPLY, seqid);
                      } else {
                        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                        output.writeMessageBegin("getApplicationInfo", Thrift.MessageType.EXCEPTION, seqid);
                      }
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    });
                } else {
                  this._handler.getApplicationInfo(args.request, function (err, result) {
                    if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.ApplicationDoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                      var result = new AromaService_getApplicationInfo_result((err != null ? err : {success: result}));
                      output.writeMessageBegin("getApplicationInfo", Thrift.MessageType.REPLY, seqid);
                    } else {
                      var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                      output.writeMessageBegin("getApplicationInfo", Thrift.MessageType.EXCEPTION, seqid);
                    }
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                  });
                }
              }

              AromaServiceProcessor.prototype.process_getBuzz = function(seqid, input, output)               {
                var args = new AromaService_getBuzz_args();
                args.read(input);
                input.readMessageEnd();
                if (this._handler.getBuzz.length === 1) {
                  Q.fcall(this._handler.getBuzz, args.request)
                    .then(function(result) {
                      var result = new AromaService_getBuzz_result({success: result});
                      output.writeMessageBegin("getBuzz", Thrift.MessageType.REPLY, seqid);
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    }, function (err) {
                      if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.ApplicationDoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                        var result = new AromaService_getBuzz_result(err);
                        output.writeMessageBegin("getBuzz", Thrift.MessageType.REPLY, seqid);
                      } else {
                        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                        output.writeMessageBegin("getBuzz", Thrift.MessageType.EXCEPTION, seqid);
                      }
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    });
                } else {
                  this._handler.getBuzz(args.request, function (err, result) {
                    if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.ApplicationDoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                      var result = new AromaService_getBuzz_result((err != null ? err : {success: result}));
                      output.writeMessageBegin("getBuzz", Thrift.MessageType.REPLY, seqid);
                    } else {
                      var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                      output.writeMessageBegin("getBuzz", Thrift.MessageType.EXCEPTION, seqid);
                    }
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                  });
                }
              }

              AromaServiceProcessor.prototype.process_getDashboard = function(seqid, input, output)               {
                var args = new AromaService_getDashboard_args();
                args.read(input);
                input.readMessageEnd();
                if (this._handler.getDashboard.length === 1) {
                  Q.fcall(this._handler.getDashboard, args.request)
                    .then(function(result) {
                      var result = new AromaService_getDashboard_result({success: result});
                      output.writeMessageBegin("getDashboard", Thrift.MessageType.REPLY, seqid);
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    }, function (err) {
                      if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException) {
                        var result = new AromaService_getDashboard_result(err);
                        output.writeMessageBegin("getDashboard", Thrift.MessageType.REPLY, seqid);
                      } else {
                        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                        output.writeMessageBegin("getDashboard", Thrift.MessageType.EXCEPTION, seqid);
                      }
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    });
                } else {
                  this._handler.getDashboard(args.request, function (err, result) {
                    if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException) {
                      var result = new AromaService_getDashboard_result((err != null ? err : {success: result}));
                      output.writeMessageBegin("getDashboard", Thrift.MessageType.REPLY, seqid);
                    } else {
                      var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                      output.writeMessageBegin("getDashboard", Thrift.MessageType.EXCEPTION, seqid);
                    }
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                  });
                }
              }

              AromaServiceProcessor.prototype.process_getApplicationMessages = function(seqid, input, output)               {
                var args = new AromaService_getApplicationMessages_args();
                args.read(input);
                input.readMessageEnd();
                if (this._handler.getApplicationMessages.length === 1) {
                  Q.fcall(this._handler.getApplicationMessages, args.request)
                    .then(function(result) {
                      var result = new AromaService_getApplicationMessages_result({success: result});
                      output.writeMessageBegin("getApplicationMessages", Thrift.MessageType.REPLY, seqid);
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    }, function (err) {
                      if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.UnauthorizedException || err instanceof Exceptions_ttypes.ApplicationDoesNotExistException) {
                        var result = new AromaService_getApplicationMessages_result(err);
                        output.writeMessageBegin("getApplicationMessages", Thrift.MessageType.REPLY, seqid);
                      } else {
                        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                        output.writeMessageBegin("getApplicationMessages", Thrift.MessageType.EXCEPTION, seqid);
                      }
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    });
                } else {
                  this._handler.getApplicationMessages(args.request, function (err, result) {
                    if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.UnauthorizedException || err instanceof Exceptions_ttypes.ApplicationDoesNotExistException) {
                      var result = new AromaService_getApplicationMessages_result((err != null ? err : {success: result}));
                      output.writeMessageBegin("getApplicationMessages", Thrift.MessageType.REPLY, seqid);
                    } else {
                      var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                      output.writeMessageBegin("getApplicationMessages", Thrift.MessageType.EXCEPTION, seqid);
                    }
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                  });
                }
              }

              AromaServiceProcessor.prototype.process_getInbox = function(seqid, input, output)               {
                var args = new AromaService_getInbox_args();
                args.read(input);
                input.readMessageEnd();
                if (this._handler.getInbox.length === 1) {
                  Q.fcall(this._handler.getInbox, args.request)
                    .then(function(result) {
                      var result = new AromaService_getInbox_result({success: result});
                      output.writeMessageBegin("getInbox", Thrift.MessageType.REPLY, seqid);
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    }, function (err) {
                      if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException) {
                        var result = new AromaService_getInbox_result(err);
                        output.writeMessageBegin("getInbox", Thrift.MessageType.REPLY, seqid);
                      } else {
                        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                        output.writeMessageBegin("getInbox", Thrift.MessageType.EXCEPTION, seqid);
                      }
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    });
                } else {
                  this._handler.getInbox(args.request, function (err, result) {
                    if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException) {
                      var result = new AromaService_getInbox_result((err != null ? err : {success: result}));
                      output.writeMessageBegin("getInbox", Thrift.MessageType.REPLY, seqid);
                    } else {
                      var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                      output.writeMessageBegin("getInbox", Thrift.MessageType.EXCEPTION, seqid);
                    }
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                  });
                }
              }

              AromaServiceProcessor.prototype.process_getFullMessage = function(seqid, input, output)               {
                var args = new AromaService_getFullMessage_args();
                args.read(input);
                input.readMessageEnd();
                if (this._handler.getFullMessage.length === 1) {
                  Q.fcall(this._handler.getFullMessage, args.request)
                    .then(function(result) {
                      var result = new AromaService_getFullMessage_result({success: result});
                      output.writeMessageBegin("getFullMessage", Thrift.MessageType.REPLY, seqid);
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    }, function (err) {
                      if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException) {
                        var result = new AromaService_getFullMessage_result(err);
                        output.writeMessageBegin("getFullMessage", Thrift.MessageType.REPLY, seqid);
                      } else {
                        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                        output.writeMessageBegin("getFullMessage", Thrift.MessageType.EXCEPTION, seqid);
                      }
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    });
                } else {
                  this._handler.getFullMessage(args.request, function (err, result) {
                    if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException) {
                      var result = new AromaService_getFullMessage_result((err != null ? err : {success: result}));
                      output.writeMessageBegin("getFullMessage", Thrift.MessageType.REPLY, seqid);
                    } else {
                      var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                      output.writeMessageBegin("getFullMessage", Thrift.MessageType.EXCEPTION, seqid);
                    }
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                  });
                }
              }

              AromaServiceProcessor.prototype.process_getMedia = function(seqid, input, output)               {
                var args = new AromaService_getMedia_args();
                args.read(input);
                input.readMessageEnd();
                if (this._handler.getMedia.length === 1) {
                  Q.fcall(this._handler.getMedia, args.request)
                    .then(function(result) {
                      var result = new AromaService_getMedia_result({success: result});
                      output.writeMessageBegin("getMedia", Thrift.MessageType.REPLY, seqid);
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    }, function (err) {
                      if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.DoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                        var result = new AromaService_getMedia_result(err);
                        output.writeMessageBegin("getMedia", Thrift.MessageType.REPLY, seqid);
                      } else {
                        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                        output.writeMessageBegin("getMedia", Thrift.MessageType.EXCEPTION, seqid);
                      }
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    });
                } else {
                  this._handler.getMedia(args.request, function (err, result) {
                    if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.DoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                      var result = new AromaService_getMedia_result((err != null ? err : {success: result}));
                      output.writeMessageBegin("getMedia", Thrift.MessageType.REPLY, seqid);
                    } else {
                      var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                      output.writeMessageBegin("getMedia", Thrift.MessageType.EXCEPTION, seqid);
                    }
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                  });
                }
              }

              AromaServiceProcessor.prototype.process_getApplicationsOwnedBy = function(seqid, input, output)               {
                var args = new AromaService_getApplicationsOwnedBy_args();
                args.read(input);
                input.readMessageEnd();
                if (this._handler.getApplicationsOwnedBy.length === 1) {
                  Q.fcall(this._handler.getApplicationsOwnedBy, args.request)
                    .then(function(result) {
                      var result = new AromaService_getApplicationsOwnedBy_result({success: result});
                      output.writeMessageBegin("getApplicationsOwnedBy", Thrift.MessageType.REPLY, seqid);
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    }, function (err) {
                      if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException) {
                        var result = new AromaService_getApplicationsOwnedBy_result(err);
                        output.writeMessageBegin("getApplicationsOwnedBy", Thrift.MessageType.REPLY, seqid);
                      } else {
                        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                        output.writeMessageBegin("getApplicationsOwnedBy", Thrift.MessageType.EXCEPTION, seqid);
                      }
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    });
                } else {
                  this._handler.getApplicationsOwnedBy(args.request, function (err, result) {
                    if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException) {
                      var result = new AromaService_getApplicationsOwnedBy_result((err != null ? err : {success: result}));
                      output.writeMessageBegin("getApplicationsOwnedBy", Thrift.MessageType.REPLY, seqid);
                    } else {
                      var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                      output.writeMessageBegin("getApplicationsOwnedBy", Thrift.MessageType.EXCEPTION, seqid);
                    }
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                  });
                }
              }

              AromaServiceProcessor.prototype.process_getApplicationsFollowedBy = function(seqid, input, output)               {
                var args = new AromaService_getApplicationsFollowedBy_args();
                args.read(input);
                input.readMessageEnd();
                if (this._handler.getApplicationsFollowedBy.length === 1) {
                  Q.fcall(this._handler.getApplicationsFollowedBy, args.request)
                    .then(function(result) {
                      var result = new AromaService_getApplicationsFollowedBy_result({success: result});
                      output.writeMessageBegin("getApplicationsFollowedBy", Thrift.MessageType.REPLY, seqid);
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    }, function (err) {
                      if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException) {
                        var result = new AromaService_getApplicationsFollowedBy_result(err);
                        output.writeMessageBegin("getApplicationsFollowedBy", Thrift.MessageType.REPLY, seqid);
                      } else {
                        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                        output.writeMessageBegin("getApplicationsFollowedBy", Thrift.MessageType.EXCEPTION, seqid);
                      }
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    });
                } else {
                  this._handler.getApplicationsFollowedBy(args.request, function (err, result) {
                    if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException) {
                      var result = new AromaService_getApplicationsFollowedBy_result((err != null ? err : {success: result}));
                      output.writeMessageBegin("getApplicationsFollowedBy", Thrift.MessageType.REPLY, seqid);
                    } else {
                      var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                      output.writeMessageBegin("getApplicationsFollowedBy", Thrift.MessageType.EXCEPTION, seqid);
                    }
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                  });
                }
              }

              AromaServiceProcessor.prototype.process_getMySavedChannels = function(seqid, input, output)               {
                var args = new AromaService_getMySavedChannels_args();
                args.read(input);
                input.readMessageEnd();
                if (this._handler.getMySavedChannels.length === 1) {
                  Q.fcall(this._handler.getMySavedChannels, args.request)
                    .then(function(result) {
                      var result = new AromaService_getMySavedChannels_result({success: result});
                      output.writeMessageBegin("getMySavedChannels", Thrift.MessageType.REPLY, seqid);
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    }, function (err) {
                      if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException) {
                        var result = new AromaService_getMySavedChannels_result(err);
                        output.writeMessageBegin("getMySavedChannels", Thrift.MessageType.REPLY, seqid);
                      } else {
                        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                        output.writeMessageBegin("getMySavedChannels", Thrift.MessageType.EXCEPTION, seqid);
                      }
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    });
                } else {
                  this._handler.getMySavedChannels(args.request, function (err, result) {
                    if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException) {
                      var result = new AromaService_getMySavedChannels_result((err != null ? err : {success: result}));
                      output.writeMessageBegin("getMySavedChannels", Thrift.MessageType.REPLY, seqid);
                    } else {
                      var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                      output.writeMessageBegin("getMySavedChannels", Thrift.MessageType.EXCEPTION, seqid);
                    }
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                  });
                }
              }

              AromaServiceProcessor.prototype.process_getUserInfo = function(seqid, input, output)               {
                var args = new AromaService_getUserInfo_args();
                args.read(input);
                input.readMessageEnd();
                if (this._handler.getUserInfo.length === 1) {
                  Q.fcall(this._handler.getUserInfo, args.request)
                    .then(function(result) {
                      var result = new AromaService_getUserInfo_result({success: result});
                      output.writeMessageBegin("getUserInfo", Thrift.MessageType.REPLY, seqid);
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    }, function (err) {
                      if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.UnauthorizedException || err instanceof Exceptions_ttypes.UserDoesNotExistException) {
                        var result = new AromaService_getUserInfo_result(err);
                        output.writeMessageBegin("getUserInfo", Thrift.MessageType.REPLY, seqid);
                      } else {
                        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                        output.writeMessageBegin("getUserInfo", Thrift.MessageType.EXCEPTION, seqid);
                      }
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    });
                } else {
                  this._handler.getUserInfo(args.request, function (err, result) {
                    if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.UnauthorizedException || err instanceof Exceptions_ttypes.UserDoesNotExistException) {
                      var result = new AromaService_getUserInfo_result((err != null ? err : {success: result}));
                      output.writeMessageBegin("getUserInfo", Thrift.MessageType.REPLY, seqid);
                    } else {
                      var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                      output.writeMessageBegin("getUserInfo", Thrift.MessageType.EXCEPTION, seqid);
                    }
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                  });
                }
              }

              AromaServiceProcessor.prototype.process_searchForApplications = function(seqid, input, output)               {
                var args = new AromaService_searchForApplications_args();
                args.read(input);
                input.readMessageEnd();
                if (this._handler.searchForApplications.length === 1) {
                  Q.fcall(this._handler.searchForApplications, args.request)
                    .then(function(result) {
                      var result = new AromaService_searchForApplications_result({success: result});
                      output.writeMessageBegin("searchForApplications", Thrift.MessageType.REPLY, seqid);
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    }, function (err) {
                      if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                        var result = new AromaService_searchForApplications_result(err);
                        output.writeMessageBegin("searchForApplications", Thrift.MessageType.REPLY, seqid);
                      } else {
                        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                        output.writeMessageBegin("searchForApplications", Thrift.MessageType.EXCEPTION, seqid);
                      }
                      result.write(output);
                      output.writeMessageEnd();
                      output.flush();
                    });
                } else {
                  this._handler.searchForApplications(args.request, function (err, result) {
                    if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidTokenException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                      var result = new AromaService_searchForApplications_result((err != null ? err : {success: result}));
                      output.writeMessageBegin("searchForApplications", Thrift.MessageType.REPLY, seqid);
                    } else {
                      var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                      output.writeMessageBegin("searchForApplications", Thrift.MessageType.EXCEPTION, seqid);
                    }
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                  });
                }
              }

