//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Authentication_ttypes = require('./Authentication_types');
var Aroma_ttypes = require('./Aroma_types');
var Channels_ttypes = require('./Channels_types');
var Endpoint_ttypes = require('./Endpoint_types');
var Events_ttypes = require('./Events_types');
var Exceptions_ttypes = require('./Exceptions_types');


var ttypes = module.exports = {};
var SendNotificationRequest = module.exports.SendNotificationRequest = function(args) {
  this.token = null;
  this.event = null;
  this.channels = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = new Authentication_ttypes.AuthenticationToken(args.token);
    }
    if (args.event !== undefined && args.event !== null) {
      this.event = new Events_ttypes.Event(args.event);
    }
    if (args.channels !== undefined && args.channels !== null) {
      this.channels = Thrift.copyMap(args.channels, [null]);
    }
  }
};
SendNotificationRequest.prototype = {};
SendNotificationRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Authentication_ttypes.AuthenticationToken();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.event = new Events_ttypes.Event();
        this.event.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.channels = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = new Channels_ttypes.AromaChannel();
          key6.read(input);
          val7 = new Aroma_ttypes.User();
          val7.read(input);
          this.channels[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SendNotificationRequest.prototype.write = function(output) {
  output.writeStructBegin('SendNotificationRequest');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  if (this.event !== null && this.event !== undefined) {
    output.writeFieldBegin('event', Thrift.Type.STRUCT, 2);
    this.event.write(output);
    output.writeFieldEnd();
  }
  if (this.channels !== null && this.channels !== undefined) {
    output.writeFieldBegin('channels', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.STRUCT, Thrift.objectLength(this.channels));
    for (var kiter8 in this.channels)
    {
      if (this.channels.hasOwnProperty(kiter8))
      {
        var viter9 = this.channels[kiter8];
        kiter8.write(output);
        viter9.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SendNotificationResponse = module.exports.SendNotificationResponse = function(args) {
  this.notificationId = null;
  if (args) {
    if (args.notificationId !== undefined && args.notificationId !== null) {
      this.notificationId = args.notificationId;
    }
  }
};
SendNotificationResponse.prototype = {};
SendNotificationResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.notificationId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SendNotificationResponse.prototype.write = function(output) {
  output.writeStructBegin('SendNotificationResponse');
  if (this.notificationId !== null && this.notificationId !== undefined) {
    output.writeFieldBegin('notificationId', Thrift.Type.STRING, 1);
    output.writeString(this.notificationId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.SERVICE_PORT = 7009;
ttypes.PRODUCTION_ENDPOINT = new Endpoint_ttypes.TcpEndpoint({
  'hostname' : 'notification-srv.aroma.tech',
  'port' : 7009
});
ttypes.BETA_ENDPOINT = new Endpoint_ttypes.TcpEndpoint({
  'hostname' : 'notification-srv.beta.aroma.tech',
  'port' : 7009
});
