//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Authentication_ttypes = require('./Authentication_types')
var Banana_ttypes = require('./Banana_types')
var Endpoint_ttypes = require('./Endpoint_types')
var Exceptions_ttypes = require('./Exceptions_types')


var ttypes = require('./AuthenticationService_types');
//HELPER FUNCTIONS AND STRUCTURES

AuthenticationService_getApiVersion_args = function(args) {
};
AuthenticationService_getApiVersion_args.prototype = {};
AuthenticationService_getApiVersion_args.prototype.read = function(input) {
      input.readStructBegin();
      while (true)
      {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
          break;
        }
        input.skip(ftype);
        input.readFieldEnd();
      }
      input.readStructEnd();
      return;
    };

AuthenticationService_getApiVersion_args.prototype.write = function(output) {
      output.writeStructBegin('AuthenticationService_getApiVersion_args');
      output.writeFieldStop();
      output.writeStructEnd();
      return;
    };

AuthenticationService_getApiVersion_result = function(args) {
      this.success = null;
      if (args) {
            if (args.success !== undefined && args.success !== null) {
                  this.success = args.success;
            }
      }
};
AuthenticationService_getApiVersion_result.prototype = {};
AuthenticationService_getApiVersion_result.prototype.read = function(input) {
      input.readStructBegin();
      while (true)
      {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
          break;
        }
        switch (fid)
        {
          case 0:
          if (ftype == Thrift.Type.DOUBLE) {
            this.success = input.readDouble();
          } else {
            input.skip(ftype);
          }
          break;
          case 0:
            input.skip(ftype);
            break;
          default:
            input.skip(ftype);
        }
        input.readFieldEnd();
      }
      input.readStructEnd();
      return;
    };

AuthenticationService_getApiVersion_result.prototype.write = function(output) {
      output.writeStructBegin('AuthenticationService_getApiVersion_result');
      if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.DOUBLE, 0);
        output.writeDouble(this.success);
        output.writeFieldEnd();
      }
      output.writeFieldStop();
      output.writeStructEnd();
      return;
    };

AuthenticationService_createUserToken_args = function(args) {
      this.request = null;
      if (args) {
            if (args.request !== undefined && args.request !== null) {
                  this.request = new ttypes.CreateUserTokenRequest(args.request);
            }
      }
};
AuthenticationService_createUserToken_args.prototype = {};
AuthenticationService_createUserToken_args.prototype.read = function(input) {
      input.readStructBegin();
      while (true)
      {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
          break;
        }
        switch (fid)
        {
          case 1:
          if (ftype == Thrift.Type.STRUCT) {
            this.request = new ttypes.CreateUserTokenRequest();
            this.request.read(input);
          } else {
            input.skip(ftype);
          }
          break;
          case 0:
            input.skip(ftype);
            break;
          default:
            input.skip(ftype);
        }
        input.readFieldEnd();
      }
      input.readStructEnd();
      return;
    };

AuthenticationService_createUserToken_args.prototype.write = function(output) {
      output.writeStructBegin('AuthenticationService_createUserToken_args');
      if (this.request !== null && this.request !== undefined) {
        output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
        this.request.write(output);
        output.writeFieldEnd();
      }
      output.writeFieldStop();
      output.writeStructEnd();
      return;
    };

AuthenticationService_createUserToken_result = function(args) {
      this.success = null;
      this.ex = null;
      if (args instanceof Exceptions_ttypes.OperationFailedException) {
            this.ex = args;
            return;
      }
      if (args) {
            if (args.success !== undefined && args.success !== null) {
                  this.success = new ttypes.CreateUserTokenResponse(args.success);
            }
            if (args.ex !== undefined && args.ex !== null) {
                  this.ex = args.ex;
            }
      }
};
AuthenticationService_createUserToken_result.prototype = {};
AuthenticationService_createUserToken_result.prototype.read = function(input) {
      input.readStructBegin();
      while (true)
      {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
          break;
        }
        switch (fid)
        {
          case 0:
          if (ftype == Thrift.Type.STRUCT) {
            this.success = new ttypes.CreateUserTokenResponse();
            this.success.read(input);
          } else {
            input.skip(ftype);
          }
          break;
          case 1:
          if (ftype == Thrift.Type.STRUCT) {
            this.ex = new Exceptions_ttypes.OperationFailedException();
            this.ex.read(input);
          } else {
            input.skip(ftype);
          }
          break;
          default:
            input.skip(ftype);
        }
        input.readFieldEnd();
      }
      input.readStructEnd();
      return;
    };

AuthenticationService_createUserToken_result.prototype.write = function(output) {
      output.writeStructBegin('AuthenticationService_createUserToken_result');
      if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
        this.success.write(output);
        output.writeFieldEnd();
      }
      if (this.ex !== null && this.ex !== undefined) {
        output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
        this.ex.write(output);
        output.writeFieldEnd();
      }
      output.writeFieldStop();
      output.writeStructEnd();
      return;
    };

AuthenticationService_createApplicationToken_args = function(args) {
      this.request = null;
      if (args) {
            if (args.request !== undefined && args.request !== null) {
                  this.request = new ttypes.CreateApplicationTokenRequest(args.request);
            }
      }
};
AuthenticationService_createApplicationToken_args.prototype = {};
AuthenticationService_createApplicationToken_args.prototype.read = function(input) {
      input.readStructBegin();
      while (true)
      {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
          break;
        }
        switch (fid)
        {
          case 1:
          if (ftype == Thrift.Type.STRUCT) {
            this.request = new ttypes.CreateApplicationTokenRequest();
            this.request.read(input);
          } else {
            input.skip(ftype);
          }
          break;
          case 0:
            input.skip(ftype);
            break;
          default:
            input.skip(ftype);
        }
        input.readFieldEnd();
      }
      input.readStructEnd();
      return;
    };

AuthenticationService_createApplicationToken_args.prototype.write = function(output) {
      output.writeStructBegin('AuthenticationService_createApplicationToken_args');
      if (this.request !== null && this.request !== undefined) {
        output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
        this.request.write(output);
        output.writeFieldEnd();
      }
      output.writeFieldStop();
      output.writeStructEnd();
      return;
    };

AuthenticationService_createApplicationToken_result = function(args) {
      this.success = null;
      this.ex = null;
      if (args instanceof Exceptions_ttypes.OperationFailedException) {
            this.ex = args;
            return;
      }
      if (args) {
            if (args.success !== undefined && args.success !== null) {
                  this.success = new ttypes.CreateApplicationTokenResponse(args.success);
            }
            if (args.ex !== undefined && args.ex !== null) {
                  this.ex = args.ex;
            }
      }
};
AuthenticationService_createApplicationToken_result.prototype = {};
AuthenticationService_createApplicationToken_result.prototype.read = function(input) {
      input.readStructBegin();
      while (true)
      {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
          break;
        }
        switch (fid)
        {
          case 0:
          if (ftype == Thrift.Type.STRUCT) {
            this.success = new ttypes.CreateApplicationTokenResponse();
            this.success.read(input);
          } else {
            input.skip(ftype);
          }
          break;
          case 1:
          if (ftype == Thrift.Type.STRUCT) {
            this.ex = new Exceptions_ttypes.OperationFailedException();
            this.ex.read(input);
          } else {
            input.skip(ftype);
          }
          break;
          default:
            input.skip(ftype);
        }
        input.readFieldEnd();
      }
      input.readStructEnd();
      return;
    };

AuthenticationService_createApplicationToken_result.prototype.write = function(output) {
      output.writeStructBegin('AuthenticationService_createApplicationToken_result');
      if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
        this.success.write(output);
        output.writeFieldEnd();
      }
      if (this.ex !== null && this.ex !== undefined) {
        output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
        this.ex.write(output);
        output.writeFieldEnd();
      }
      output.writeFieldStop();
      output.writeStructEnd();
      return;
    };

AuthenticationServiceClient = exports.Client = function(output, pClass) {
        this.output = output;
        this.pClass = pClass;
        this._seqid = 0;
        this._reqs = {};
    };
    AuthenticationServiceClient.prototype = {};
    AuthenticationServiceClient.prototype.seqid = function() { return this._seqid; }
AuthenticationServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
AuthenticationServiceClient.prototype.getApiVersion = function(callback) {
      this._seqid = this.new_seqid();
      if (callback === undefined) {
        var _defer = Q.defer();
        this._reqs[this.seqid()] = function(error, result) {
          if (error) {
            _defer.reject(error);
          } else {
            _defer.resolve(result);
          }
        };
        this.send_getApiVersion();
        return _defer.promise;
      } else {
        this._reqs[this.seqid()] = callback;
        this.send_getApiVersion();
      }
};

AuthenticationServiceClient.prototype.send_getApiVersion = function() {
      var output = new this.pClass(this.output);
      output.writeMessageBegin('getApiVersion', Thrift.MessageType.CALL, this.seqid());
      var args = new AuthenticationService_getApiVersion_args();
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
};

AuthenticationServiceClient.prototype.recv_getApiVersion = function(input,mtype,rseqid) {
      var callback = this._reqs[rseqid] || function() {};
      delete this._reqs[rseqid];
      if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
      }
      var result = new AuthenticationService_getApiVersion_result();
      result.read(input);
      input.readMessageEnd();

      if (null !== result.success) {
        return callback(null, result.success);
      }
      return callback('getApiVersion failed: unknown result');
};
AuthenticationServiceClient.prototype.createUserToken = function(request, callback) {
      this._seqid = this.new_seqid();
      if (callback === undefined) {
        var _defer = Q.defer();
        this._reqs[this.seqid()] = function(error, result) {
          if (error) {
            _defer.reject(error);
          } else {
            _defer.resolve(result);
          }
        };
        this.send_createUserToken(request);
        return _defer.promise;
      } else {
        this._reqs[this.seqid()] = callback;
        this.send_createUserToken(request);
      }
};

AuthenticationServiceClient.prototype.send_createUserToken = function(request) {
      var output = new this.pClass(this.output);
      output.writeMessageBegin('createUserToken', Thrift.MessageType.CALL, this.seqid());
      var args = new AuthenticationService_createUserToken_args();
      args.request = request;
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
};

AuthenticationServiceClient.prototype.recv_createUserToken = function(input,mtype,rseqid) {
      var callback = this._reqs[rseqid] || function() {};
      delete this._reqs[rseqid];
      if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
      }
      var result = new AuthenticationService_createUserToken_result();
      result.read(input);
      input.readMessageEnd();

      if (null !== result.ex) {
        return callback(result.ex);
      }
      if (null !== result.success) {
        return callback(null, result.success);
      }
      return callback('createUserToken failed: unknown result');
};
AuthenticationServiceClient.prototype.createApplicationToken = function(request, callback) {
      this._seqid = this.new_seqid();
      if (callback === undefined) {
        var _defer = Q.defer();
        this._reqs[this.seqid()] = function(error, result) {
          if (error) {
            _defer.reject(error);
          } else {
            _defer.resolve(result);
          }
        };
        this.send_createApplicationToken(request);
        return _defer.promise;
      } else {
        this._reqs[this.seqid()] = callback;
        this.send_createApplicationToken(request);
      }
};

AuthenticationServiceClient.prototype.send_createApplicationToken = function(request) {
      var output = new this.pClass(this.output);
      output.writeMessageBegin('createApplicationToken', Thrift.MessageType.CALL, this.seqid());
      var args = new AuthenticationService_createApplicationToken_args();
      args.request = request;
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
};

AuthenticationServiceClient.prototype.recv_createApplicationToken = function(input,mtype,rseqid) {
      var callback = this._reqs[rseqid] || function() {};
      delete this._reqs[rseqid];
      if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
      }
      var result = new AuthenticationService_createApplicationToken_result();
      result.read(input);
      input.readMessageEnd();

      if (null !== result.ex) {
        return callback(result.ex);
      }
      if (null !== result.success) {
        return callback(null, result.success);
      }
      return callback('createApplicationToken failed: unknown result');
};
AuthenticationServiceProcessor = exports.Processor = function(handler)     {
      this._handler = handler
    }
    AuthenticationServiceProcessor.prototype.process = function(input, output)     {
      var r = input.readMessageBegin();
      if (this['process_' + r.fname]) {
        return this['process_' + r.fname].call(this, r.rseqid, input, output);
      } else {
        input.skip(Thrift.Type.STRUCT);
        input.readMessageEnd();
        var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
        output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
        x.write(output);
        output.writeMessageEnd();
        output.flush();
      }
    }

    AuthenticationServiceProcessor.prototype.process_getApiVersion = function(seqid, input, output)     {
      var args = new AuthenticationService_getApiVersion_args();
      args.read(input);
      input.readMessageEnd();
      if (this._handler.getApiVersion.length === 0) {
        Q.fcall(this._handler.getApiVersion)
          .then(function(result) {
            var result = new AuthenticationService_getApiVersion_result({success: result});
            output.writeMessageBegin("getApiVersion", Thrift.MessageType.REPLY, seqid);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
          }, function (err) {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getApiVersion", Thrift.MessageType.EXCEPTION, seqid);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
          });
      } else {
        this._handler.getApiVersion(function (err, result) {
          if (err == null) {
            var result = new AuthenticationService_getApiVersion_result((err != null ? err : {success: result}));
            output.writeMessageBegin("getApiVersion", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getApiVersion", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
      }
    }

    AuthenticationServiceProcessor.prototype.process_createUserToken = function(seqid, input, output)     {
      var args = new AuthenticationService_createUserToken_args();
      args.read(input);
      input.readMessageEnd();
      if (this._handler.createUserToken.length === 1) {
        Q.fcall(this._handler.createUserToken, args.request)
          .then(function(result) {
            var result = new AuthenticationService_createUserToken_result({success: result});
            output.writeMessageBegin("createUserToken", Thrift.MessageType.REPLY, seqid);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
          }, function (err) {
            if (err instanceof Exceptions_ttypes.OperationFailedException) {
              var result = new AuthenticationService_createUserToken_result(err);
              output.writeMessageBegin("createUserToken", Thrift.MessageType.REPLY, seqid);
            } else {
              var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
              output.writeMessageBegin("createUserToken", Thrift.MessageType.EXCEPTION, seqid);
            }
            result.write(output);
            output.writeMessageEnd();
            output.flush();
          });
      } else {
        this._handler.createUserToken(args.request, function (err, result) {
          if (err == null || err instanceof Exceptions_ttypes.OperationFailedException) {
            var result = new AuthenticationService_createUserToken_result((err != null ? err : {success: result}));
            output.writeMessageBegin("createUserToken", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("createUserToken", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
      }
    }

    AuthenticationServiceProcessor.prototype.process_createApplicationToken = function(seqid, input, output)     {
      var args = new AuthenticationService_createApplicationToken_args();
      args.read(input);
      input.readMessageEnd();
      if (this._handler.createApplicationToken.length === 1) {
        Q.fcall(this._handler.createApplicationToken, args.request)
          .then(function(result) {
            var result = new AuthenticationService_createApplicationToken_result({success: result});
            output.writeMessageBegin("createApplicationToken", Thrift.MessageType.REPLY, seqid);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
          }, function (err) {
            if (err instanceof Exceptions_ttypes.OperationFailedException) {
              var result = new AuthenticationService_createApplicationToken_result(err);
              output.writeMessageBegin("createApplicationToken", Thrift.MessageType.REPLY, seqid);
            } else {
              var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
              output.writeMessageBegin("createApplicationToken", Thrift.MessageType.EXCEPTION, seqid);
            }
            result.write(output);
            output.writeMessageEnd();
            output.flush();
          });
      } else {
        this._handler.createApplicationToken(args.request, function (err, result) {
          if (err == null || err instanceof Exceptions_ttypes.OperationFailedException) {
            var result = new AuthenticationService_createApplicationToken_result((err != null ? err : {success: result}));
            output.writeMessageBegin("createApplicationToken", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("createApplicationToken", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
      }
    }

