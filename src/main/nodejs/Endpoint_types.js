//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Authentication_ttypes = require('./Authentication_types');
var Aroma_ttypes = require('./Aroma_types');
var Exceptions_ttypes = require('./Exceptions_types');


var ttypes = module.exports = {};
var TcpEndpoint = module.exports.TcpEndpoint = function(args) {
  this.hostname = null;
  this.port = 80;
  if (args) {
    if (args.hostname !== undefined && args.hostname !== null) {
      this.hostname = args.hostname;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field hostname is unset!');
    }
    if (args.port !== undefined && args.port !== null) {
      this.port = args.port;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field port is unset!');
    }
  }
};
TcpEndpoint.prototype = {};
TcpEndpoint.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.hostname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.port = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TcpEndpoint.prototype.write = function(output) {
  output.writeStructBegin('TcpEndpoint');
  if (this.hostname !== null && this.hostname !== undefined) {
    output.writeFieldBegin('hostname', Thrift.Type.STRING, 1);
    output.writeString(this.hostname);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I32, 2);
    output.writeI32(this.port);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var HttpThriftEndpoint = module.exports.HttpThriftEndpoint = function(args) {
  this.url = null;
  if (args) {
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field url is unset!');
    }
  }
};
HttpThriftEndpoint.prototype = {};
HttpThriftEndpoint.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HttpThriftEndpoint.prototype.write = function(output) {
  output.writeStructBegin('HttpThriftEndpoint');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var HttpRestEndpoint = module.exports.HttpRestEndpoint = function(args) {
  this.url = null;
  if (args) {
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field url is unset!');
    }
  }
};
HttpRestEndpoint.prototype = {};
HttpRestEndpoint.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HttpRestEndpoint.prototype.write = function(output) {
  output.writeStructBegin('HttpRestEndpoint');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Endpoint = module.exports.Endpoint = function(args) {
  this.tcp = null;
  this.httpThrift = null;
  this.httpRest = null;
  if (args) {
    if (args.tcp !== undefined && args.tcp !== null) {
      this.tcp = new ttypes.TcpEndpoint(args.tcp);
    }
    if (args.httpThrift !== undefined && args.httpThrift !== null) {
      this.httpThrift = new ttypes.HttpThriftEndpoint(args.httpThrift);
    }
    if (args.httpRest !== undefined && args.httpRest !== null) {
      this.httpRest = new ttypes.HttpRestEndpoint(args.httpRest);
    }
  }
};
Endpoint.prototype = {};
Endpoint.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tcp = new ttypes.TcpEndpoint();
        this.tcp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.httpThrift = new ttypes.HttpThriftEndpoint();
        this.httpThrift.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.httpRest = new ttypes.HttpRestEndpoint();
        this.httpRest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Endpoint.prototype.write = function(output) {
  output.writeStructBegin('Endpoint');
  if (this.tcp !== null && this.tcp !== undefined) {
    output.writeFieldBegin('tcp', Thrift.Type.STRUCT, 1);
    this.tcp.write(output);
    output.writeFieldEnd();
  }
  if (this.httpThrift !== null && this.httpThrift !== undefined) {
    output.writeFieldBegin('httpThrift', Thrift.Type.STRUCT, 2);
    this.httpThrift.write(output);
    output.writeFieldEnd();
  }
  if (this.httpRest !== null && this.httpRest !== undefined) {
    output.writeFieldBegin('httpRest', Thrift.Type.STRUCT, 3);
    this.httpRest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var HealthPokeRequest = module.exports.HealthPokeRequest = function(args) {
  this.applicationId = null;
  this.serviceToken = null;
  if (args) {
    if (args.applicationId !== undefined && args.applicationId !== null) {
      this.applicationId = args.applicationId;
    }
    if (args.serviceToken !== undefined && args.serviceToken !== null) {
      this.serviceToken = new Authentication_ttypes.ApplicationToken(args.serviceToken);
    }
  }
};
HealthPokeRequest.prototype = {};
HealthPokeRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.applicationId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.serviceToken = new Authentication_ttypes.ApplicationToken();
        this.serviceToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HealthPokeRequest.prototype.write = function(output) {
  output.writeStructBegin('HealthPokeRequest');
  if (this.applicationId !== null && this.applicationId !== undefined) {
    output.writeFieldBegin('applicationId', Thrift.Type.STRING, 1);
    output.writeString(this.applicationId);
    output.writeFieldEnd();
  }
  if (this.serviceToken !== null && this.serviceToken !== undefined) {
    output.writeFieldBegin('serviceToken', Thrift.Type.STRUCT, 2);
    this.serviceToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var HealthPokeResponse = module.exports.HealthPokeResponse = function(args) {
  this.message = null;
  this.healthy = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.healthy !== undefined && args.healthy !== null) {
      this.healthy = args.healthy;
    }
  }
};
HealthPokeResponse.prototype = {};
HealthPokeResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.healthy = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HealthPokeResponse.prototype.write = function(output) {
  output.writeStructBegin('HealthPokeResponse');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.healthy !== null && this.healthy !== undefined) {
    output.writeFieldBegin('healthy', Thrift.Type.BOOL, 2);
    output.writeBool(this.healthy);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

