//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Authentication_ttypes = require('./Authentication_types')
var Banana_ttypes = require('./Banana_types')
var Channels_ttypes = require('./Channels_types')
var Endpoint_ttypes = require('./Endpoint_types')
var Exceptions_ttypes = require('./Exceptions_types')
var Notifications_ttypes = require('./Notifications_types')


var ttypes = require('./BananaService_types');
//HELPER FUNCTIONS AND STRUCTURES

BananaService_signIn_args = function(args) {
        this.request = null;
        if (args) {
                if (args.request !== undefined && args.request !== null) {
                        this.request = new ttypes.SignInRequest(args.request);
                }
        }
};
BananaService_signIn_args.prototype = {};
BananaService_signIn_args.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.request = new ttypes.SignInRequest();
              this.request.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 0:
              input.skip(ftype);
              break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_signIn_args.prototype.write = function(output) {
        output.writeStructBegin('BananaService_signIn_args');
        if (this.request !== null && this.request !== undefined) {
          output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
          this.request.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_signIn_result = function(args) {
        this.success = null;
        this.ex1 = null;
        this.ex2 = null;
        this.ex3 = null;
        if (args instanceof Exceptions_ttypes.OperationFailedException) {
                this.ex1 = args;
                return;
        }
        if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                this.ex2 = args;
                return;
        }
        if (args instanceof Exceptions_ttypes.InvalidCredentialsException) {
                this.ex3 = args;
                return;
        }
        if (args) {
                if (args.success !== undefined && args.success !== null) {
                        this.success = new ttypes.SignInResponse(args.success);
                }
                if (args.ex1 !== undefined && args.ex1 !== null) {
                        this.ex1 = args.ex1;
                }
                if (args.ex2 !== undefined && args.ex2 !== null) {
                        this.ex2 = args.ex2;
                }
                if (args.ex3 !== undefined && args.ex3 !== null) {
                        this.ex3 = args.ex3;
                }
        }
};
BananaService_signIn_result.prototype = {};
BananaService_signIn_result.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 0:
            if (ftype == Thrift.Type.STRUCT) {
              this.success = new ttypes.SignInResponse();
              this.success.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex1 = new Exceptions_ttypes.OperationFailedException();
              this.ex1.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 2:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
              this.ex2.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 3:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex3 = new Exceptions_ttypes.InvalidCredentialsException();
              this.ex3.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_signIn_result.prototype.write = function(output) {
        output.writeStructBegin('BananaService_signIn_result');
        if (this.success !== null && this.success !== undefined) {
          output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
          this.success.write(output);
          output.writeFieldEnd();
        }
        if (this.ex1 !== null && this.ex1 !== undefined) {
          output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
          this.ex1.write(output);
          output.writeFieldEnd();
        }
        if (this.ex2 !== null && this.ex2 !== undefined) {
          output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
          this.ex2.write(output);
          output.writeFieldEnd();
        }
        if (this.ex3 !== null && this.ex3 !== undefined) {
          output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
          this.ex3.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_provisionService_args = function(args) {
        this.request = null;
        if (args) {
                if (args.request !== undefined && args.request !== null) {
                        this.request = new ttypes.ProvisionServiceRequest(args.request);
                }
        }
};
BananaService_provisionService_args.prototype = {};
BananaService_provisionService_args.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.request = new ttypes.ProvisionServiceRequest();
              this.request.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 0:
              input.skip(ftype);
              break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_provisionService_args.prototype.write = function(output) {
        output.writeStructBegin('BananaService_provisionService_args');
        if (this.request !== null && this.request !== undefined) {
          output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
          this.request.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_provisionService_result = function(args) {
        this.success = null;
        this.ex1 = null;
        this.ex2 = null;
        this.ex3 = null;
        this.ex4 = null;
        if (args instanceof Exceptions_ttypes.OperationFailedException) {
                this.ex1 = args;
                return;
        }
        if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                this.ex2 = args;
                return;
        }
        if (args instanceof Exceptions_ttypes.InvalidCredentialsException) {
                this.ex3 = args;
                return;
        }
        if (args instanceof Exceptions_ttypes.ServiceDoesNotExistException) {
                this.ex4 = args;
                return;
        }
        if (args) {
                if (args.success !== undefined && args.success !== null) {
                        this.success = new ttypes.ProvisionServiceResponse(args.success);
                }
                if (args.ex1 !== undefined && args.ex1 !== null) {
                        this.ex1 = args.ex1;
                }
                if (args.ex2 !== undefined && args.ex2 !== null) {
                        this.ex2 = args.ex2;
                }
                if (args.ex3 !== undefined && args.ex3 !== null) {
                        this.ex3 = args.ex3;
                }
                if (args.ex4 !== undefined && args.ex4 !== null) {
                        this.ex4 = args.ex4;
                }
        }
};
BananaService_provisionService_result.prototype = {};
BananaService_provisionService_result.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 0:
            if (ftype == Thrift.Type.STRUCT) {
              this.success = new ttypes.ProvisionServiceResponse();
              this.success.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex1 = new Exceptions_ttypes.OperationFailedException();
              this.ex1.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 2:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
              this.ex2.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 3:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex3 = new Exceptions_ttypes.InvalidCredentialsException();
              this.ex3.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 4:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex4 = new Exceptions_ttypes.ServiceDoesNotExistException();
              this.ex4.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_provisionService_result.prototype.write = function(output) {
        output.writeStructBegin('BananaService_provisionService_result');
        if (this.success !== null && this.success !== undefined) {
          output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
          this.success.write(output);
          output.writeFieldEnd();
        }
        if (this.ex1 !== null && this.ex1 !== undefined) {
          output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
          this.ex1.write(output);
          output.writeFieldEnd();
        }
        if (this.ex2 !== null && this.ex2 !== undefined) {
          output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
          this.ex2.write(output);
          output.writeFieldEnd();
        }
        if (this.ex3 !== null && this.ex3 !== undefined) {
          output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
          this.ex3.write(output);
          output.writeFieldEnd();
        }
        if (this.ex4 !== null && this.ex4 !== undefined) {
          output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
          this.ex4.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_subscribeToService_args = function(args) {
        this.request = null;
        if (args) {
                if (args.request !== undefined && args.request !== null) {
                        this.request = new ttypes.SubscribeToServiceRequest(args.request);
                }
        }
};
BananaService_subscribeToService_args.prototype = {};
BananaService_subscribeToService_args.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.request = new ttypes.SubscribeToServiceRequest();
              this.request.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 0:
              input.skip(ftype);
              break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_subscribeToService_args.prototype.write = function(output) {
        output.writeStructBegin('BananaService_subscribeToService_args');
        if (this.request !== null && this.request !== undefined) {
          output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
          this.request.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_subscribeToService_result = function(args) {
        this.success = null;
        this.ex1 = null;
        this.ex2 = null;
        this.ex3 = null;
        this.ex4 = null;
        this.ex5 = null;
        if (args instanceof Exceptions_ttypes.OperationFailedException) {
                this.ex1 = args;
                return;
        }
        if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                this.ex2 = args;
                return;
        }
        if (args instanceof Exceptions_ttypes.InvalidCredentialsException) {
                this.ex3 = args;
                return;
        }
        if (args instanceof Exceptions_ttypes.ServiceDoesNotExistException) {
                this.ex4 = args;
                return;
        }
        if (args instanceof Exceptions_ttypes.ServiceAlreadyRegisteredException) {
                this.ex5 = args;
                return;
        }
        if (args) {
                if (args.success !== undefined && args.success !== null) {
                        this.success = new ttypes.SubscribeToServiceResponse(args.success);
                }
                if (args.ex1 !== undefined && args.ex1 !== null) {
                        this.ex1 = args.ex1;
                }
                if (args.ex2 !== undefined && args.ex2 !== null) {
                        this.ex2 = args.ex2;
                }
                if (args.ex3 !== undefined && args.ex3 !== null) {
                        this.ex3 = args.ex3;
                }
                if (args.ex4 !== undefined && args.ex4 !== null) {
                        this.ex4 = args.ex4;
                }
                if (args.ex5 !== undefined && args.ex5 !== null) {
                        this.ex5 = args.ex5;
                }
        }
};
BananaService_subscribeToService_result.prototype = {};
BananaService_subscribeToService_result.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 0:
            if (ftype == Thrift.Type.STRUCT) {
              this.success = new ttypes.SubscribeToServiceResponse();
              this.success.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex1 = new Exceptions_ttypes.OperationFailedException();
              this.ex1.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 2:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
              this.ex2.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 3:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex3 = new Exceptions_ttypes.InvalidCredentialsException();
              this.ex3.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 4:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex4 = new Exceptions_ttypes.ServiceDoesNotExistException();
              this.ex4.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 5:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex5 = new Exceptions_ttypes.ServiceAlreadyRegisteredException();
              this.ex5.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_subscribeToService_result.prototype.write = function(output) {
        output.writeStructBegin('BananaService_subscribeToService_result');
        if (this.success !== null && this.success !== undefined) {
          output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
          this.success.write(output);
          output.writeFieldEnd();
        }
        if (this.ex1 !== null && this.ex1 !== undefined) {
          output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
          this.ex1.write(output);
          output.writeFieldEnd();
        }
        if (this.ex2 !== null && this.ex2 !== undefined) {
          output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
          this.ex2.write(output);
          output.writeFieldEnd();
        }
        if (this.ex3 !== null && this.ex3 !== undefined) {
          output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
          this.ex3.write(output);
          output.writeFieldEnd();
        }
        if (this.ex4 !== null && this.ex4 !== undefined) {
          output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
          this.ex4.write(output);
          output.writeFieldEnd();
        }
        if (this.ex5 !== null && this.ex5 !== undefined) {
          output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
          this.ex5.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_registerHealthCheck_args = function(args) {
        this.request = null;
        if (args) {
                if (args.request !== undefined && args.request !== null) {
                        this.request = new ttypes.RegisterHealthCheckRequest(args.request);
                }
        }
};
BananaService_registerHealthCheck_args.prototype = {};
BananaService_registerHealthCheck_args.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.request = new ttypes.RegisterHealthCheckRequest();
              this.request.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 0:
              input.skip(ftype);
              break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_registerHealthCheck_args.prototype.write = function(output) {
        output.writeStructBegin('BananaService_registerHealthCheck_args');
        if (this.request !== null && this.request !== undefined) {
          output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
          this.request.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_registerHealthCheck_result = function(args) {
        this.success = null;
        this.ex1 = null;
        this.ex2 = null;
        this.ex3 = null;
        this.ex4 = null;
        this.ex5 = null;
        if (args instanceof Exceptions_ttypes.OperationFailedException) {
                this.ex1 = args;
                return;
        }
        if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                this.ex2 = args;
                return;
        }
        if (args instanceof Exceptions_ttypes.InvalidCredentialsException) {
                this.ex3 = args;
                return;
        }
        if (args instanceof Exceptions_ttypes.ServiceDoesNotExistException) {
                this.ex4 = args;
                return;
        }
        if (args instanceof Exceptions_ttypes.UnauthorizedException) {
                this.ex5 = args;
                return;
        }
        if (args) {
                if (args.success !== undefined && args.success !== null) {
                        this.success = new ttypes.RegisterHealthCheckResponse(args.success);
                }
                if (args.ex1 !== undefined && args.ex1 !== null) {
                        this.ex1 = args.ex1;
                }
                if (args.ex2 !== undefined && args.ex2 !== null) {
                        this.ex2 = args.ex2;
                }
                if (args.ex3 !== undefined && args.ex3 !== null) {
                        this.ex3 = args.ex3;
                }
                if (args.ex4 !== undefined && args.ex4 !== null) {
                        this.ex4 = args.ex4;
                }
                if (args.ex5 !== undefined && args.ex5 !== null) {
                        this.ex5 = args.ex5;
                }
        }
};
BananaService_registerHealthCheck_result.prototype = {};
BananaService_registerHealthCheck_result.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 0:
            if (ftype == Thrift.Type.STRUCT) {
              this.success = new ttypes.RegisterHealthCheckResponse();
              this.success.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex1 = new Exceptions_ttypes.OperationFailedException();
              this.ex1.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 2:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
              this.ex2.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 3:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex3 = new Exceptions_ttypes.InvalidCredentialsException();
              this.ex3.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 4:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex4 = new Exceptions_ttypes.ServiceDoesNotExistException();
              this.ex4.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 5:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex5 = new Exceptions_ttypes.UnauthorizedException();
              this.ex5.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_registerHealthCheck_result.prototype.write = function(output) {
        output.writeStructBegin('BananaService_registerHealthCheck_result');
        if (this.success !== null && this.success !== undefined) {
          output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
          this.success.write(output);
          output.writeFieldEnd();
        }
        if (this.ex1 !== null && this.ex1 !== undefined) {
          output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
          this.ex1.write(output);
          output.writeFieldEnd();
        }
        if (this.ex2 !== null && this.ex2 !== undefined) {
          output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
          this.ex2.write(output);
          output.writeFieldEnd();
        }
        if (this.ex3 !== null && this.ex3 !== undefined) {
          output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
          this.ex3.write(output);
          output.writeFieldEnd();
        }
        if (this.ex4 !== null && this.ex4 !== undefined) {
          output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
          this.ex4.write(output);
          output.writeFieldEnd();
        }
        if (this.ex5 !== null && this.ex5 !== undefined) {
          output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
          this.ex5.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_renewServiceToken_args = function(args) {
        this.request = null;
        if (args) {
                if (args.request !== undefined && args.request !== null) {
                        this.request = new ttypes.RenewServiceTokenRequest(args.request);
                }
        }
};
BananaService_renewServiceToken_args.prototype = {};
BananaService_renewServiceToken_args.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.request = new ttypes.RenewServiceTokenRequest();
              this.request.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 0:
              input.skip(ftype);
              break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_renewServiceToken_args.prototype.write = function(output) {
        output.writeStructBegin('BananaService_renewServiceToken_args');
        if (this.request !== null && this.request !== undefined) {
          output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
          this.request.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_renewServiceToken_result = function(args) {
        this.success = null;
        this.ex1 = null;
        this.ex2 = null;
        this.ex3 = null;
        this.ex4 = null;
        this.ex5 = null;
        if (args instanceof Exceptions_ttypes.OperationFailedException) {
                this.ex1 = args;
                return;
        }
        if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                this.ex2 = args;
                return;
        }
        if (args instanceof Exceptions_ttypes.InvalidCredentialsException) {
                this.ex3 = args;
                return;
        }
        if (args instanceof Exceptions_ttypes.ServiceDoesNotExistException) {
                this.ex4 = args;
                return;
        }
        if (args instanceof Exceptions_ttypes.UnauthorizedException) {
                this.ex5 = args;
                return;
        }
        if (args) {
                if (args.success !== undefined && args.success !== null) {
                        this.success = new ttypes.RenewServiceTokenResponse(args.success);
                }
                if (args.ex1 !== undefined && args.ex1 !== null) {
                        this.ex1 = args.ex1;
                }
                if (args.ex2 !== undefined && args.ex2 !== null) {
                        this.ex2 = args.ex2;
                }
                if (args.ex3 !== undefined && args.ex3 !== null) {
                        this.ex3 = args.ex3;
                }
                if (args.ex4 !== undefined && args.ex4 !== null) {
                        this.ex4 = args.ex4;
                }
                if (args.ex5 !== undefined && args.ex5 !== null) {
                        this.ex5 = args.ex5;
                }
        }
};
BananaService_renewServiceToken_result.prototype = {};
BananaService_renewServiceToken_result.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 0:
            if (ftype == Thrift.Type.STRUCT) {
              this.success = new ttypes.RenewServiceTokenResponse();
              this.success.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex1 = new Exceptions_ttypes.OperationFailedException();
              this.ex1.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 2:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
              this.ex2.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 3:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex3 = new Exceptions_ttypes.InvalidCredentialsException();
              this.ex3.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 4:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex4 = new Exceptions_ttypes.ServiceDoesNotExistException();
              this.ex4.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 5:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex5 = new Exceptions_ttypes.UnauthorizedException();
              this.ex5.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_renewServiceToken_result.prototype.write = function(output) {
        output.writeStructBegin('BananaService_renewServiceToken_result');
        if (this.success !== null && this.success !== undefined) {
          output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
          this.success.write(output);
          output.writeFieldEnd();
        }
        if (this.ex1 !== null && this.ex1 !== undefined) {
          output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
          this.ex1.write(output);
          output.writeFieldEnd();
        }
        if (this.ex2 !== null && this.ex2 !== undefined) {
          output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
          this.ex2.write(output);
          output.writeFieldEnd();
        }
        if (this.ex3 !== null && this.ex3 !== undefined) {
          output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
          this.ex3.write(output);
          output.writeFieldEnd();
        }
        if (this.ex4 !== null && this.ex4 !== undefined) {
          output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
          this.ex4.write(output);
          output.writeFieldEnd();
        }
        if (this.ex5 !== null && this.ex5 !== undefined) {
          output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
          this.ex5.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_regenerateToken_args = function(args) {
        this.request = null;
        if (args) {
                if (args.request !== undefined && args.request !== null) {
                        this.request = new ttypes.RegenerateTokenRequest(args.request);
                }
        }
};
BananaService_regenerateToken_args.prototype = {};
BananaService_regenerateToken_args.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.request = new ttypes.RegenerateTokenRequest();
              this.request.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 0:
              input.skip(ftype);
              break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_regenerateToken_args.prototype.write = function(output) {
        output.writeStructBegin('BananaService_regenerateToken_args');
        if (this.request !== null && this.request !== undefined) {
          output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
          this.request.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_regenerateToken_result = function(args) {
        this.success = null;
        this.ex1 = null;
        this.ex2 = null;
        this.ex3 = null;
        this.ex4 = null;
        this.ex5 = null;
        if (args instanceof Exceptions_ttypes.OperationFailedException) {
                this.ex1 = args;
                return;
        }
        if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                this.ex2 = args;
                return;
        }
        if (args instanceof Exceptions_ttypes.InvalidCredentialsException) {
                this.ex3 = args;
                return;
        }
        if (args instanceof Exceptions_ttypes.ServiceDoesNotExistException) {
                this.ex4 = args;
                return;
        }
        if (args instanceof Exceptions_ttypes.UnauthorizedException) {
                this.ex5 = args;
                return;
        }
        if (args) {
                if (args.success !== undefined && args.success !== null) {
                        this.success = new ttypes.RegenerateTokenResponse(args.success);
                }
                if (args.ex1 !== undefined && args.ex1 !== null) {
                        this.ex1 = args.ex1;
                }
                if (args.ex2 !== undefined && args.ex2 !== null) {
                        this.ex2 = args.ex2;
                }
                if (args.ex3 !== undefined && args.ex3 !== null) {
                        this.ex3 = args.ex3;
                }
                if (args.ex4 !== undefined && args.ex4 !== null) {
                        this.ex4 = args.ex4;
                }
                if (args.ex5 !== undefined && args.ex5 !== null) {
                        this.ex5 = args.ex5;
                }
        }
};
BananaService_regenerateToken_result.prototype = {};
BananaService_regenerateToken_result.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 0:
            if (ftype == Thrift.Type.STRUCT) {
              this.success = new ttypes.RegenerateTokenResponse();
              this.success.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex1 = new Exceptions_ttypes.OperationFailedException();
              this.ex1.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 2:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
              this.ex2.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 3:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex3 = new Exceptions_ttypes.InvalidCredentialsException();
              this.ex3.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 4:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex4 = new Exceptions_ttypes.ServiceDoesNotExistException();
              this.ex4.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 5:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex5 = new Exceptions_ttypes.UnauthorizedException();
              this.ex5.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_regenerateToken_result.prototype.write = function(output) {
        output.writeStructBegin('BananaService_regenerateToken_result');
        if (this.success !== null && this.success !== undefined) {
          output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
          this.success.write(output);
          output.writeFieldEnd();
        }
        if (this.ex1 !== null && this.ex1 !== undefined) {
          output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
          this.ex1.write(output);
          output.writeFieldEnd();
        }
        if (this.ex2 !== null && this.ex2 !== undefined) {
          output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
          this.ex2.write(output);
          output.writeFieldEnd();
        }
        if (this.ex3 !== null && this.ex3 !== undefined) {
          output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
          this.ex3.write(output);
          output.writeFieldEnd();
        }
        if (this.ex4 !== null && this.ex4 !== undefined) {
          output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
          this.ex4.write(output);
          output.writeFieldEnd();
        }
        if (this.ex5 !== null && this.ex5 !== undefined) {
          output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
          this.ex5.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_sendMessage_args = function(args) {
        this.request = null;
        if (args) {
                if (args.request !== undefined && args.request !== null) {
                        this.request = new ttypes.SendMessageRequest(args.request);
                }
        }
};
BananaService_sendMessage_args.prototype = {};
BananaService_sendMessage_args.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.request = new ttypes.SendMessageRequest();
              this.request.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 0:
              input.skip(ftype);
              break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_sendMessage_args.prototype.write = function(output) {
        output.writeStructBegin('BananaService_sendMessage_args');
        if (this.request !== null && this.request !== undefined) {
          output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
          this.request.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_sendMessage_result = function(args) {
        this.success = null;
        this.ex1 = null;
        this.ex2 = null;
        this.ex3 = null;
        if (args instanceof Exceptions_ttypes.OperationFailedException) {
                this.ex1 = args;
                return;
        }
        if (args instanceof Exceptions_ttypes.InvalidArgumentException) {
                this.ex2 = args;
                return;
        }
        if (args instanceof Exceptions_ttypes.InvalidCredentialsException) {
                this.ex3 = args;
                return;
        }
        if (args) {
                if (args.success !== undefined && args.success !== null) {
                        this.success = new ttypes.SendMessageResponse(args.success);
                }
                if (args.ex1 !== undefined && args.ex1 !== null) {
                        this.ex1 = args.ex1;
                }
                if (args.ex2 !== undefined && args.ex2 !== null) {
                        this.ex2 = args.ex2;
                }
                if (args.ex3 !== undefined && args.ex3 !== null) {
                        this.ex3 = args.ex3;
                }
        }
};
BananaService_sendMessage_result.prototype = {};
BananaService_sendMessage_result.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 0:
            if (ftype == Thrift.Type.STRUCT) {
              this.success = new ttypes.SendMessageResponse();
              this.success.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex1 = new Exceptions_ttypes.OperationFailedException();
              this.ex1.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 2:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex2 = new Exceptions_ttypes.InvalidArgumentException();
              this.ex2.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 3:
            if (ftype == Thrift.Type.STRUCT) {
              this.ex3 = new Exceptions_ttypes.InvalidCredentialsException();
              this.ex3.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_sendMessage_result.prototype.write = function(output) {
        output.writeStructBegin('BananaService_sendMessage_result');
        if (this.success !== null && this.success !== undefined) {
          output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
          this.success.write(output);
          output.writeFieldEnd();
        }
        if (this.ex1 !== null && this.ex1 !== undefined) {
          output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
          this.ex1.write(output);
          output.writeFieldEnd();
        }
        if (this.ex2 !== null && this.ex2 !== undefined) {
          output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
          this.ex2.write(output);
          output.writeFieldEnd();
        }
        if (this.ex3 !== null && this.ex3 !== undefined) {
          output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
          this.ex3.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_sendMessageAsync_args = function(args) {
        this.request = null;
        if (args) {
                if (args.request !== undefined && args.request !== null) {
                        this.request = new ttypes.SendMessageRequest(args.request);
                }
        }
};
BananaService_sendMessageAsync_args.prototype = {};
BananaService_sendMessageAsync_args.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          switch (fid)
          {
            case 1:
            if (ftype == Thrift.Type.STRUCT) {
              this.request = new ttypes.SendMessageRequest();
              this.request.read(input);
            } else {
              input.skip(ftype);
            }
            break;
            case 0:
              input.skip(ftype);
              break;
            default:
              input.skip(ftype);
          }
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_sendMessageAsync_args.prototype.write = function(output) {
        output.writeStructBegin('BananaService_sendMessageAsync_args');
        if (this.request !== null && this.request !== undefined) {
          output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
          this.request.write(output);
          output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaService_sendMessageAsync_result = function(args) {
};
BananaService_sendMessageAsync_result.prototype = {};
BananaService_sendMessageAsync_result.prototype.read = function(input) {
        input.readStructBegin();
        while (true)
        {
          var ret = input.readFieldBegin();
          var fname = ret.fname;
          var ftype = ret.ftype;
          var fid = ret.fid;
          if (ftype == Thrift.Type.STOP) {
            break;
          }
          input.skip(ftype);
          input.readFieldEnd();
        }
        input.readStructEnd();
        return;
      };

BananaService_sendMessageAsync_result.prototype.write = function(output) {
        output.writeStructBegin('BananaService_sendMessageAsync_result');
        output.writeFieldStop();
        output.writeStructEnd();
        return;
      };

BananaServiceClient = exports.Client = function(output, pClass) {
          this.output = output;
          this.pClass = pClass;
          this._seqid = 0;
          this._reqs = {};
      };
      BananaServiceClient.prototype = {};
      BananaServiceClient.prototype.seqid = function() { return this._seqid; }
BananaServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
BananaServiceClient.prototype.signIn = function(request, callback) {
        this._seqid = this.new_seqid();
        if (callback === undefined) {
          var _defer = Q.defer();
          this._reqs[this.seqid()] = function(error, result) {
            if (error) {
              _defer.reject(error);
            } else {
              _defer.resolve(result);
            }
          };
          this.send_signIn(request);
          return _defer.promise;
        } else {
          this._reqs[this.seqid()] = callback;
          this.send_signIn(request);
        }
};

BananaServiceClient.prototype.send_signIn = function(request) {
        var output = new this.pClass(this.output);
        output.writeMessageBegin('signIn', Thrift.MessageType.CALL, this.seqid());
        var args = new BananaService_signIn_args();
        args.request = request;
        args.write(output);
        output.writeMessageEnd();
        return this.output.flush();
};

BananaServiceClient.prototype.recv_signIn = function(input,mtype,rseqid) {
        var callback = this._reqs[rseqid] || function() {};
        delete this._reqs[rseqid];
        if (mtype == Thrift.MessageType.EXCEPTION) {
          var x = new Thrift.TApplicationException();
          x.read(input);
          input.readMessageEnd();
          return callback(x);
        }
        var result = new BananaService_signIn_result();
        result.read(input);
        input.readMessageEnd();

        if (null !== result.ex1) {
          return callback(result.ex1);
        }
        if (null !== result.ex2) {
          return callback(result.ex2);
        }
        if (null !== result.ex3) {
          return callback(result.ex3);
        }
        if (null !== result.success) {
          return callback(null, result.success);
        }
        return callback('signIn failed: unknown result');
};
BananaServiceClient.prototype.provisionService = function(request, callback) {
        this._seqid = this.new_seqid();
        if (callback === undefined) {
          var _defer = Q.defer();
          this._reqs[this.seqid()] = function(error, result) {
            if (error) {
              _defer.reject(error);
            } else {
              _defer.resolve(result);
            }
          };
          this.send_provisionService(request);
          return _defer.promise;
        } else {
          this._reqs[this.seqid()] = callback;
          this.send_provisionService(request);
        }
};

BananaServiceClient.prototype.send_provisionService = function(request) {
        var output = new this.pClass(this.output);
        output.writeMessageBegin('provisionService', Thrift.MessageType.CALL, this.seqid());
        var args = new BananaService_provisionService_args();
        args.request = request;
        args.write(output);
        output.writeMessageEnd();
        return this.output.flush();
};

BananaServiceClient.prototype.recv_provisionService = function(input,mtype,rseqid) {
        var callback = this._reqs[rseqid] || function() {};
        delete this._reqs[rseqid];
        if (mtype == Thrift.MessageType.EXCEPTION) {
          var x = new Thrift.TApplicationException();
          x.read(input);
          input.readMessageEnd();
          return callback(x);
        }
        var result = new BananaService_provisionService_result();
        result.read(input);
        input.readMessageEnd();

        if (null !== result.ex1) {
          return callback(result.ex1);
        }
        if (null !== result.ex2) {
          return callback(result.ex2);
        }
        if (null !== result.ex3) {
          return callback(result.ex3);
        }
        if (null !== result.ex4) {
          return callback(result.ex4);
        }
        if (null !== result.success) {
          return callback(null, result.success);
        }
        return callback('provisionService failed: unknown result');
};
BananaServiceClient.prototype.subscribeToService = function(request, callback) {
        this._seqid = this.new_seqid();
        if (callback === undefined) {
          var _defer = Q.defer();
          this._reqs[this.seqid()] = function(error, result) {
            if (error) {
              _defer.reject(error);
            } else {
              _defer.resolve(result);
            }
          };
          this.send_subscribeToService(request);
          return _defer.promise;
        } else {
          this._reqs[this.seqid()] = callback;
          this.send_subscribeToService(request);
        }
};

BananaServiceClient.prototype.send_subscribeToService = function(request) {
        var output = new this.pClass(this.output);
        output.writeMessageBegin('subscribeToService', Thrift.MessageType.CALL, this.seqid());
        var args = new BananaService_subscribeToService_args();
        args.request = request;
        args.write(output);
        output.writeMessageEnd();
        return this.output.flush();
};

BananaServiceClient.prototype.recv_subscribeToService = function(input,mtype,rseqid) {
        var callback = this._reqs[rseqid] || function() {};
        delete this._reqs[rseqid];
        if (mtype == Thrift.MessageType.EXCEPTION) {
          var x = new Thrift.TApplicationException();
          x.read(input);
          input.readMessageEnd();
          return callback(x);
        }
        var result = new BananaService_subscribeToService_result();
        result.read(input);
        input.readMessageEnd();

        if (null !== result.ex1) {
          return callback(result.ex1);
        }
        if (null !== result.ex2) {
          return callback(result.ex2);
        }
        if (null !== result.ex3) {
          return callback(result.ex3);
        }
        if (null !== result.ex4) {
          return callback(result.ex4);
        }
        if (null !== result.ex5) {
          return callback(result.ex5);
        }
        if (null !== result.success) {
          return callback(null, result.success);
        }
        return callback('subscribeToService failed: unknown result');
};
BananaServiceClient.prototype.registerHealthCheck = function(request, callback) {
        this._seqid = this.new_seqid();
        if (callback === undefined) {
          var _defer = Q.defer();
          this._reqs[this.seqid()] = function(error, result) {
            if (error) {
              _defer.reject(error);
            } else {
              _defer.resolve(result);
            }
          };
          this.send_registerHealthCheck(request);
          return _defer.promise;
        } else {
          this._reqs[this.seqid()] = callback;
          this.send_registerHealthCheck(request);
        }
};

BananaServiceClient.prototype.send_registerHealthCheck = function(request) {
        var output = new this.pClass(this.output);
        output.writeMessageBegin('registerHealthCheck', Thrift.MessageType.CALL, this.seqid());
        var args = new BananaService_registerHealthCheck_args();
        args.request = request;
        args.write(output);
        output.writeMessageEnd();
        return this.output.flush();
};

BananaServiceClient.prototype.recv_registerHealthCheck = function(input,mtype,rseqid) {
        var callback = this._reqs[rseqid] || function() {};
        delete this._reqs[rseqid];
        if (mtype == Thrift.MessageType.EXCEPTION) {
          var x = new Thrift.TApplicationException();
          x.read(input);
          input.readMessageEnd();
          return callback(x);
        }
        var result = new BananaService_registerHealthCheck_result();
        result.read(input);
        input.readMessageEnd();

        if (null !== result.ex1) {
          return callback(result.ex1);
        }
        if (null !== result.ex2) {
          return callback(result.ex2);
        }
        if (null !== result.ex3) {
          return callback(result.ex3);
        }
        if (null !== result.ex4) {
          return callback(result.ex4);
        }
        if (null !== result.ex5) {
          return callback(result.ex5);
        }
        if (null !== result.success) {
          return callback(null, result.success);
        }
        return callback('registerHealthCheck failed: unknown result');
};
BananaServiceClient.prototype.renewServiceToken = function(request, callback) {
        this._seqid = this.new_seqid();
        if (callback === undefined) {
          var _defer = Q.defer();
          this._reqs[this.seqid()] = function(error, result) {
            if (error) {
              _defer.reject(error);
            } else {
              _defer.resolve(result);
            }
          };
          this.send_renewServiceToken(request);
          return _defer.promise;
        } else {
          this._reqs[this.seqid()] = callback;
          this.send_renewServiceToken(request);
        }
};

BananaServiceClient.prototype.send_renewServiceToken = function(request) {
        var output = new this.pClass(this.output);
        output.writeMessageBegin('renewServiceToken', Thrift.MessageType.CALL, this.seqid());
        var args = new BananaService_renewServiceToken_args();
        args.request = request;
        args.write(output);
        output.writeMessageEnd();
        return this.output.flush();
};

BananaServiceClient.prototype.recv_renewServiceToken = function(input,mtype,rseqid) {
        var callback = this._reqs[rseqid] || function() {};
        delete this._reqs[rseqid];
        if (mtype == Thrift.MessageType.EXCEPTION) {
          var x = new Thrift.TApplicationException();
          x.read(input);
          input.readMessageEnd();
          return callback(x);
        }
        var result = new BananaService_renewServiceToken_result();
        result.read(input);
        input.readMessageEnd();

        if (null !== result.ex1) {
          return callback(result.ex1);
        }
        if (null !== result.ex2) {
          return callback(result.ex2);
        }
        if (null !== result.ex3) {
          return callback(result.ex3);
        }
        if (null !== result.ex4) {
          return callback(result.ex4);
        }
        if (null !== result.ex5) {
          return callback(result.ex5);
        }
        if (null !== result.success) {
          return callback(null, result.success);
        }
        return callback('renewServiceToken failed: unknown result');
};
BananaServiceClient.prototype.regenerateToken = function(request, callback) {
        this._seqid = this.new_seqid();
        if (callback === undefined) {
          var _defer = Q.defer();
          this._reqs[this.seqid()] = function(error, result) {
            if (error) {
              _defer.reject(error);
            } else {
              _defer.resolve(result);
            }
          };
          this.send_regenerateToken(request);
          return _defer.promise;
        } else {
          this._reqs[this.seqid()] = callback;
          this.send_regenerateToken(request);
        }
};

BananaServiceClient.prototype.send_regenerateToken = function(request) {
        var output = new this.pClass(this.output);
        output.writeMessageBegin('regenerateToken', Thrift.MessageType.CALL, this.seqid());
        var args = new BananaService_regenerateToken_args();
        args.request = request;
        args.write(output);
        output.writeMessageEnd();
        return this.output.flush();
};

BananaServiceClient.prototype.recv_regenerateToken = function(input,mtype,rseqid) {
        var callback = this._reqs[rseqid] || function() {};
        delete this._reqs[rseqid];
        if (mtype == Thrift.MessageType.EXCEPTION) {
          var x = new Thrift.TApplicationException();
          x.read(input);
          input.readMessageEnd();
          return callback(x);
        }
        var result = new BananaService_regenerateToken_result();
        result.read(input);
        input.readMessageEnd();

        if (null !== result.ex1) {
          return callback(result.ex1);
        }
        if (null !== result.ex2) {
          return callback(result.ex2);
        }
        if (null !== result.ex3) {
          return callback(result.ex3);
        }
        if (null !== result.ex4) {
          return callback(result.ex4);
        }
        if (null !== result.ex5) {
          return callback(result.ex5);
        }
        if (null !== result.success) {
          return callback(null, result.success);
        }
        return callback('regenerateToken failed: unknown result');
};
BananaServiceClient.prototype.sendMessage = function(request, callback) {
        this._seqid = this.new_seqid();
        if (callback === undefined) {
          var _defer = Q.defer();
          this._reqs[this.seqid()] = function(error, result) {
            if (error) {
              _defer.reject(error);
            } else {
              _defer.resolve(result);
            }
          };
          this.send_sendMessage(request);
          return _defer.promise;
        } else {
          this._reqs[this.seqid()] = callback;
          this.send_sendMessage(request);
        }
};

BananaServiceClient.prototype.send_sendMessage = function(request) {
        var output = new this.pClass(this.output);
        output.writeMessageBegin('sendMessage', Thrift.MessageType.CALL, this.seqid());
        var args = new BananaService_sendMessage_args();
        args.request = request;
        args.write(output);
        output.writeMessageEnd();
        return this.output.flush();
};

BananaServiceClient.prototype.recv_sendMessage = function(input,mtype,rseqid) {
        var callback = this._reqs[rseqid] || function() {};
        delete this._reqs[rseqid];
        if (mtype == Thrift.MessageType.EXCEPTION) {
          var x = new Thrift.TApplicationException();
          x.read(input);
          input.readMessageEnd();
          return callback(x);
        }
        var result = new BananaService_sendMessage_result();
        result.read(input);
        input.readMessageEnd();

        if (null !== result.ex1) {
          return callback(result.ex1);
        }
        if (null !== result.ex2) {
          return callback(result.ex2);
        }
        if (null !== result.ex3) {
          return callback(result.ex3);
        }
        if (null !== result.success) {
          return callback(null, result.success);
        }
        return callback('sendMessage failed: unknown result');
};
BananaServiceClient.prototype.sendMessageAsync = function(request, callback) {
        this._seqid = this.new_seqid();
        if (callback === undefined) {
          var _defer = Q.defer();
          this._reqs[this.seqid()] = function(error, result) {
            if (error) {
              _defer.reject(error);
            } else {
              _defer.resolve(result);
            }
          };
          this.send_sendMessageAsync(request);
          return _defer.promise;
        } else {
          this._reqs[this.seqid()] = callback;
          this.send_sendMessageAsync(request);
        }
};

BananaServiceClient.prototype.send_sendMessageAsync = function(request) {
        var output = new this.pClass(this.output);
        output.writeMessageBegin('sendMessageAsync', Thrift.MessageType.ONEWAY, this.seqid());
        var args = new BananaService_sendMessageAsync_args();
        args.request = request;
        args.write(output);
        output.writeMessageEnd();
        return this.output.flush();
};
BananaServiceProcessor = exports.Processor = function(handler)       {
        this._handler = handler
      }
      BananaServiceProcessor.prototype.process = function(input, output)       {
        var r = input.readMessageBegin();
        if (this['process_' + r.fname]) {
          return this['process_' + r.fname].call(this, r.rseqid, input, output);
        } else {
          input.skip(Thrift.Type.STRUCT);
          input.readMessageEnd();
          var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
          output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
          x.write(output);
          output.writeMessageEnd();
          output.flush();
        }
      }

      BananaServiceProcessor.prototype.process_signIn = function(seqid, input, output)       {
        var args = new BananaService_signIn_args();
        args.read(input);
        input.readMessageEnd();
        if (this._handler.signIn.length === 1) {
          Q.fcall(this._handler.signIn, args.request)
            .then(function(result) {
              var result = new BananaService_signIn_result({success: result});
              output.writeMessageBegin("signIn", Thrift.MessageType.REPLY, seqid);
              result.write(output);
              output.writeMessageEnd();
              output.flush();
            }, function (err) {
              if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidCredentialsException) {
                var result = new BananaService_signIn_result(err);
                output.writeMessageBegin("signIn", Thrift.MessageType.REPLY, seqid);
              } else {
                var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("signIn", Thrift.MessageType.EXCEPTION, seqid);
              }
              result.write(output);
              output.writeMessageEnd();
              output.flush();
            });
        } else {
          this._handler.signIn(args.request, function (err, result) {
            if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidCredentialsException) {
              var result = new BananaService_signIn_result((err != null ? err : {success: result}));
              output.writeMessageBegin("signIn", Thrift.MessageType.REPLY, seqid);
            } else {
              var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
              output.writeMessageBegin("signIn", Thrift.MessageType.EXCEPTION, seqid);
            }
            result.write(output);
            output.writeMessageEnd();
            output.flush();
          });
        }
      }

      BananaServiceProcessor.prototype.process_provisionService = function(seqid, input, output)       {
        var args = new BananaService_provisionService_args();
        args.read(input);
        input.readMessageEnd();
        if (this._handler.provisionService.length === 1) {
          Q.fcall(this._handler.provisionService, args.request)
            .then(function(result) {
              var result = new BananaService_provisionService_result({success: result});
              output.writeMessageBegin("provisionService", Thrift.MessageType.REPLY, seqid);
              result.write(output);
              output.writeMessageEnd();
              output.flush();
            }, function (err) {
              if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidCredentialsException || err instanceof Exceptions_ttypes.ServiceDoesNotExistException) {
                var result = new BananaService_provisionService_result(err);
                output.writeMessageBegin("provisionService", Thrift.MessageType.REPLY, seqid);
              } else {
                var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("provisionService", Thrift.MessageType.EXCEPTION, seqid);
              }
              result.write(output);
              output.writeMessageEnd();
              output.flush();
            });
        } else {
          this._handler.provisionService(args.request, function (err, result) {
            if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidCredentialsException || err instanceof Exceptions_ttypes.ServiceDoesNotExistException) {
              var result = new BananaService_provisionService_result((err != null ? err : {success: result}));
              output.writeMessageBegin("provisionService", Thrift.MessageType.REPLY, seqid);
            } else {
              var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
              output.writeMessageBegin("provisionService", Thrift.MessageType.EXCEPTION, seqid);
            }
            result.write(output);
            output.writeMessageEnd();
            output.flush();
          });
        }
      }

      BananaServiceProcessor.prototype.process_subscribeToService = function(seqid, input, output)       {
        var args = new BananaService_subscribeToService_args();
        args.read(input);
        input.readMessageEnd();
        if (this._handler.subscribeToService.length === 1) {
          Q.fcall(this._handler.subscribeToService, args.request)
            .then(function(result) {
              var result = new BananaService_subscribeToService_result({success: result});
              output.writeMessageBegin("subscribeToService", Thrift.MessageType.REPLY, seqid);
              result.write(output);
              output.writeMessageEnd();
              output.flush();
            }, function (err) {
              if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidCredentialsException || err instanceof Exceptions_ttypes.ServiceDoesNotExistException || err instanceof Exceptions_ttypes.ServiceAlreadyRegisteredException) {
                var result = new BananaService_subscribeToService_result(err);
                output.writeMessageBegin("subscribeToService", Thrift.MessageType.REPLY, seqid);
              } else {
                var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("subscribeToService", Thrift.MessageType.EXCEPTION, seqid);
              }
              result.write(output);
              output.writeMessageEnd();
              output.flush();
            });
        } else {
          this._handler.subscribeToService(args.request, function (err, result) {
            if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidCredentialsException || err instanceof Exceptions_ttypes.ServiceDoesNotExistException || err instanceof Exceptions_ttypes.ServiceAlreadyRegisteredException) {
              var result = new BananaService_subscribeToService_result((err != null ? err : {success: result}));
              output.writeMessageBegin("subscribeToService", Thrift.MessageType.REPLY, seqid);
            } else {
              var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
              output.writeMessageBegin("subscribeToService", Thrift.MessageType.EXCEPTION, seqid);
            }
            result.write(output);
            output.writeMessageEnd();
            output.flush();
          });
        }
      }

      BananaServiceProcessor.prototype.process_registerHealthCheck = function(seqid, input, output)       {
        var args = new BananaService_registerHealthCheck_args();
        args.read(input);
        input.readMessageEnd();
        if (this._handler.registerHealthCheck.length === 1) {
          Q.fcall(this._handler.registerHealthCheck, args.request)
            .then(function(result) {
              var result = new BananaService_registerHealthCheck_result({success: result});
              output.writeMessageBegin("registerHealthCheck", Thrift.MessageType.REPLY, seqid);
              result.write(output);
              output.writeMessageEnd();
              output.flush();
            }, function (err) {
              if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidCredentialsException || err instanceof Exceptions_ttypes.ServiceDoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                var result = new BananaService_registerHealthCheck_result(err);
                output.writeMessageBegin("registerHealthCheck", Thrift.MessageType.REPLY, seqid);
              } else {
                var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("registerHealthCheck", Thrift.MessageType.EXCEPTION, seqid);
              }
              result.write(output);
              output.writeMessageEnd();
              output.flush();
            });
        } else {
          this._handler.registerHealthCheck(args.request, function (err, result) {
            if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidCredentialsException || err instanceof Exceptions_ttypes.ServiceDoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
              var result = new BananaService_registerHealthCheck_result((err != null ? err : {success: result}));
              output.writeMessageBegin("registerHealthCheck", Thrift.MessageType.REPLY, seqid);
            } else {
              var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
              output.writeMessageBegin("registerHealthCheck", Thrift.MessageType.EXCEPTION, seqid);
            }
            result.write(output);
            output.writeMessageEnd();
            output.flush();
          });
        }
      }

      BananaServiceProcessor.prototype.process_renewServiceToken = function(seqid, input, output)       {
        var args = new BananaService_renewServiceToken_args();
        args.read(input);
        input.readMessageEnd();
        if (this._handler.renewServiceToken.length === 1) {
          Q.fcall(this._handler.renewServiceToken, args.request)
            .then(function(result) {
              var result = new BananaService_renewServiceToken_result({success: result});
              output.writeMessageBegin("renewServiceToken", Thrift.MessageType.REPLY, seqid);
              result.write(output);
              output.writeMessageEnd();
              output.flush();
            }, function (err) {
              if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidCredentialsException || err instanceof Exceptions_ttypes.ServiceDoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                var result = new BananaService_renewServiceToken_result(err);
                output.writeMessageBegin("renewServiceToken", Thrift.MessageType.REPLY, seqid);
              } else {
                var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("renewServiceToken", Thrift.MessageType.EXCEPTION, seqid);
              }
              result.write(output);
              output.writeMessageEnd();
              output.flush();
            });
        } else {
          this._handler.renewServiceToken(args.request, function (err, result) {
            if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidCredentialsException || err instanceof Exceptions_ttypes.ServiceDoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
              var result = new BananaService_renewServiceToken_result((err != null ? err : {success: result}));
              output.writeMessageBegin("renewServiceToken", Thrift.MessageType.REPLY, seqid);
            } else {
              var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
              output.writeMessageBegin("renewServiceToken", Thrift.MessageType.EXCEPTION, seqid);
            }
            result.write(output);
            output.writeMessageEnd();
            output.flush();
          });
        }
      }

      BananaServiceProcessor.prototype.process_regenerateToken = function(seqid, input, output)       {
        var args = new BananaService_regenerateToken_args();
        args.read(input);
        input.readMessageEnd();
        if (this._handler.regenerateToken.length === 1) {
          Q.fcall(this._handler.regenerateToken, args.request)
            .then(function(result) {
              var result = new BananaService_regenerateToken_result({success: result});
              output.writeMessageBegin("regenerateToken", Thrift.MessageType.REPLY, seqid);
              result.write(output);
              output.writeMessageEnd();
              output.flush();
            }, function (err) {
              if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidCredentialsException || err instanceof Exceptions_ttypes.ServiceDoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
                var result = new BananaService_regenerateToken_result(err);
                output.writeMessageBegin("regenerateToken", Thrift.MessageType.REPLY, seqid);
              } else {
                var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("regenerateToken", Thrift.MessageType.EXCEPTION, seqid);
              }
              result.write(output);
              output.writeMessageEnd();
              output.flush();
            });
        } else {
          this._handler.regenerateToken(args.request, function (err, result) {
            if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidCredentialsException || err instanceof Exceptions_ttypes.ServiceDoesNotExistException || err instanceof Exceptions_ttypes.UnauthorizedException) {
              var result = new BananaService_regenerateToken_result((err != null ? err : {success: result}));
              output.writeMessageBegin("regenerateToken", Thrift.MessageType.REPLY, seqid);
            } else {
              var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
              output.writeMessageBegin("regenerateToken", Thrift.MessageType.EXCEPTION, seqid);
            }
            result.write(output);
            output.writeMessageEnd();
            output.flush();
          });
        }
      }

      BananaServiceProcessor.prototype.process_sendMessage = function(seqid, input, output)       {
        var args = new BananaService_sendMessage_args();
        args.read(input);
        input.readMessageEnd();
        if (this._handler.sendMessage.length === 1) {
          Q.fcall(this._handler.sendMessage, args.request)
            .then(function(result) {
              var result = new BananaService_sendMessage_result({success: result});
              output.writeMessageBegin("sendMessage", Thrift.MessageType.REPLY, seqid);
              result.write(output);
              output.writeMessageEnd();
              output.flush();
            }, function (err) {
              if (err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidCredentialsException) {
                var result = new BananaService_sendMessage_result(err);
                output.writeMessageBegin("sendMessage", Thrift.MessageType.REPLY, seqid);
              } else {
                var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("sendMessage", Thrift.MessageType.EXCEPTION, seqid);
              }
              result.write(output);
              output.writeMessageEnd();
              output.flush();
            });
        } else {
          this._handler.sendMessage(args.request, function (err, result) {
            if (err == null || err instanceof Exceptions_ttypes.OperationFailedException || err instanceof Exceptions_ttypes.InvalidArgumentException || err instanceof Exceptions_ttypes.InvalidCredentialsException) {
              var result = new BananaService_sendMessage_result((err != null ? err : {success: result}));
              output.writeMessageBegin("sendMessage", Thrift.MessageType.REPLY, seqid);
            } else {
              var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
              output.writeMessageBegin("sendMessage", Thrift.MessageType.EXCEPTION, seqid);
            }
            result.write(output);
            output.writeMessageEnd();
            output.flush();
          });
        }
      }

      BananaServiceProcessor.prototype.process_sendMessageAsync = function(seqid, input, output)       {
        var args = new BananaService_sendMessageAsync_args();
        args.read(input);
        input.readMessageEnd();
        this._handler.sendMessageAsync(args.request)
      }

